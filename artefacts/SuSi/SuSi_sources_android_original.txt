<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getDeviceId()>
<com.android.internal.telephony.IccRecords: java.lang.String getVoiceMailNumber()>
<com.android.internal.telephony.sip.SipPhone: java.lang.String getVoiceMailNumber()>
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getVoiceMailNumber()>
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getIccSerialNumber()>
<com.android.internal.telephony.sip.SipPhone: java.lang.String getVoiceMailAlphaTag()>
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getEsn()>
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getSubscriberId()>
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getVoiceMailAlphaTag()>
<com.android.internal.telephony.sip.SipPhone: java.lang.String getPhoneName()>
<com.android.internal.telephony.PhoneProxy: java.lang.String getMsisdn()>
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getMsisdn()>
<android.telephony.PhoneNumberUtils: byte[] numberToCalledPartyBCD(java.lang.String)>
<android.telephony.PhoneNumberUtils: java.lang.String getStrippedReversed(java.lang.String)>
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getIsimImpi()>
<com.android.internal.telephony.IPhoneStateListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getMsisdn()>
<com.android.internal.telephony.sip.SipPhone: java.lang.String getSubscriberId()>
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getSubscriberId()>
<com.android.internal.telephony.sip.SipPhone: java.lang.String getLine1AlphaTag()>
<com.android.internal.telephony.sip.SipPhone: java.lang.String getMeid()>
<com.android.internal.telephony.PhoneBase: java.lang.String getIccSerialNumber()>
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getLine1Number()>
<android.telephony.SmsCbLocation: java.lang.String getPlmn()>
<com.android.internal.telephony.DataConnectionTracker: java.lang.String apnIdToType(int)>
<com.android.internal.telephony.PhoneProxy: java.lang.String getCdmaMin()>
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getPhoneName()>
<android.telephony.TelephonyManager: java.lang.String getDeviceSoftwareVersion()>
<com.android.internal.telephony.PhoneProxy: java.lang.String getSubscriberId()>
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getCdmaMin()>
<android.telephony.SmsCbLocation: java.lang.String toString()>
<com.android.internal.telephony.cdma.CDMALTEPhone: java.lang.String getImei()>
<com.android.internal.telephony.UiccCardApplication: java.lang.String getAid()>
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getVoiceMailAlphaTag()>
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getIsimDomain()>
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getDeviceId()>
<com.android.internal.telephony.PhoneProxy: java.lang.String getLine1AlphaTag()>
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getDeviceId()>
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getCdmaPrlVersion()>
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getDeviceId()>
<com.android.internal.telephony.sip.SipPhone$SipConnection: java.lang.String getAddress()>
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getDeviceSvn()>
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getIsimDomain()>
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getLine1AlphaTag()>
<com.android.internal.telephony.PhoneProxy: java.lang.String getDeviceSvn()>
<android.telephony.TelephonyManager: java.lang.String getLine1AlphaTag()>
<com.android.internal.telephony.IccCardProxy: java.lang.String getServiceProviderName()>
<com.android.internal.telephony.AdnRecord: java.lang.String getNumber()>
<com.android.internal.telephony.CallerInfo: java.lang.String getCallerId(android.content.Context,java.lang.String)>
<com.android.internal.telephony.sip.SipPhone: java.lang.String getLine1Number()>
<com.android.internal.telephony.gsm.VoiceMailConstants: java.lang.String getVoiceMailNumber(java.lang.String)>
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getLine1Number()>
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getSubscriberId()>
<android.telephony.TelephonyManager: java.lang.String getMsisdn()>
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getIsimImpi()>
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String[] getIsimImpu()>
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getDeviceSvn()>
<com.android.internal.telephony.PhoneBase: java.lang.String getActiveApnHost(java.lang.String)>
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getImei()>
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getDeviceSvn()>
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getCompleteVoiceMailNumber()>
<android.telephony.TelephonyManager: java.lang.String getCompleteVoiceMailNumber()>
<com.android.internal.telephony.cdma.CDMALTEPhone: java.lang.String getMsisdn()>
<com.android.internal.telephony.cdma.CDMALTEPhone: java.lang.String getDeviceSvn()>
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getVoiceMailNumber()>
<com.android.internal.telephony.sip.SipPhone: java.lang.String getDeviceSvn()>
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getDeviceId()>
<com.android.internal.telephony.PhoneProxy: java.lang.String getLine1Number()>
<com.android.internal.telephony.IPhoneSubInfo$Stub: com.android.internal.telephony.IPhoneSubInfo asInterface(android.os.IBinder)>
<com.android.internal.telephony.sip.SipPhone$SipConnection: java.lang.String getCnapName()>
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getMsisdn()>
<com.android.internal.telephony.PhoneProxy: java.lang.String getVoiceMailNumber()>
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getVoiceMailNumber()>
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getMeid()>
<com.android.internal.telephony.PhoneProxy: java.lang.String getCdmaEriText()>
<com.android.internal.telephony.PhoneProxy: java.lang.String getDeviceId()>
<com.android.internal.telephony.IccRecords: java.lang.String getMsisdnNumber()>
<com.android.internal.telephony.sip.SipPhone: java.lang.String getImei()>
<com.android.internal.telephony.IPhoneSubInfo$Stub: android.os.IBinder asBinder()>
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getLine1AlphaTag()>
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getCompleteVoiceMailNumber()>
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getIccSerialNumber()>
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getEsn()>
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getVoiceMailAlphaTag()>
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getLine1AlphaTag()>
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getSubscriberId()>
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>
<android.telephony.TelephonyManager: java.lang.String getVoiceMailNumber()>
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getLine1AlphaTag()>
<com.android.internal.telephony.PhoneProxy: java.lang.String getIccSerialNumber()>
<com.android.internal.telephony.sip.SipPhone: java.lang.String getSipUri()>
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.android.internal.telephony.PhoneBase: java.lang.String getCdmaPrlVersion()>
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getLine1AlphaTag()>
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getMeid()>
<com.android.internal.telephony.sip.SipPhone: java.lang.String getEsn()>
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getVoiceMailNumber()>
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getCompleteVoiceMailNumber()>
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getSubscriberId()>
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getIsimImpi()>
<com.android.internal.telephony.sip.SipPhone: java.lang.String getIccSerialNumber()>
<com.android.internal.telephony.gsm.SIMRecords: java.lang.String getVoiceMailNumber()>
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getImei()>
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getLine1AlphaTag()>
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getDeviceSvn()>
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getVoiceMailNumber()>
<com.android.internal.telephony.PhoneProxy: java.lang.String getPhoneName()>
<android.telephony.TelephonyManager: java.lang.String getLine1Number()>
<android.telephony.PhoneNumberUtils: java.lang.String getNumberFromIntent(android.content.Intent,android.content.Context)>
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getVoiceMailAlphaTag()>
<android.telephony.TelephonyManager: java.lang.String getIsimImpi()>
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getDeviceSvn()>
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getLine1Number()>
<com.android.internal.telephony.gsm.SIMRecords: java.lang.String getMsisdnNumber()>
<com.android.internal.telephony.PhoneProxy: java.lang.String getMeid()>
<android.telephony.TelephonyManager: java.lang.String getSimSerialNumber()>
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getVoiceMailAlphaTag()>
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getEsn()>
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.telephony.PhoneNumberUtils: java.lang.String getUsernameFromUriNumber(java.lang.String)>
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getSubscriberId()>
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getLine1Number()>
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getDeviceId()>
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getVoiceMailAlphaTag()>
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getDeviceSvn()>
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getVoiceMailNumber()>
<com.android.internal.telephony.PhoneProxy: java.lang.String getActiveApnHost(java.lang.String)>
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getMsisdn()>
<com.android.internal.telephony.PhoneProxy: java.lang.String getImei()>
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getIsimDomain()>
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getIccSerialNumber()>
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getLine1Number()>
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getMeid()>
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getPhoneName()>
<com.android.internal.telephony.IccRecords: java.lang.String getServiceProviderName()>
<com.android.internal.telephony.PhoneProxy: java.lang.String getVoiceMailAlphaTag()>
<com.android.internal.telephony.cdma.CDMALTEPhone: java.lang.String getSubscriberId()>
<com.android.internal.telephony.PhoneProxy: java.lang.String getCdmaPrlVersion()>
<com.android.internal.telephony.sip.SipPhone: java.lang.String getDeviceId()>
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getImei()>
<com.android.internal.telephony.PhoneBase: java.lang.String getCdmaMin()>
<com.android.internal.telephony.CallTracker: java.lang.String checkForTestEmergencyNumber(java.lang.String)>
<android.telephony.TelephonyManager: java.lang.String getIsimDomain()>
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>
<com.android.internal.telephony.PhoneBase: java.lang.String getCdmaEriText()>
<com.android.internal.telephony.PhoneProxy: java.lang.String getEsn()>
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getLine1Number()>
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getCdmaEriText()>
<android.telephony.TelephonyManager: java.lang.String getVoiceMailAlphaTag()>
<com.android.internal.telephony.PhoneBase: java.lang.String getMsisdn()>
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getIccSerialNumber()>
<android.renderscript.Allocation: android.renderscript.Allocation createTyped(android.renderscript.RenderScript,android.renderscript.Type)>
<android.location.ICountryDetector$Stub: android.os.IBinder asBinder()>
<android.location.GpsSatellite: int getPrn()>
<android.location.Address: java.lang.String getFeatureName()>
<com.android.internal.telephony.sip.SipPhone: android.telephony.CellLocation getCellLocation()>
<com.android.server.location.LocationBasedCountryDetector: android.location.Country detectCountry()>
<android.location.Address: java.lang.String getAdminArea()>
<android.location.Location: float getSpeed()>
<com.android.server.location.MockProvider: long getStatusUpdateTime()>
<android.location.Address: java.util.Locale getLocale()>
<android.location.LocationManager: java.util.List getProviders(boolean)>
<android.location.Address: java.lang.String getCountryName()>
<android.telephony.SmsCbLocation: int getLac()>
<com.android.internal.telephony.cdma.CDMAPhone: void getPreferredNetworkType(android.os.Message)>
<android.renderscript.Allocation: android.renderscript.Allocation createSized(android.renderscript.RenderScript,android.renderscript.Element,int,int)>
<android.location.ILocationManager$Stub$Proxy: java.util.List getAllProviders()>
<android.location.GpsSatellite: float getSnr()>
<android.location.GeocoderParams: java.util.Locale getLocale()>
<android.renderscript.Allocation: int getBytesSize()>
<android.telephony.cdma.CdmaCellLocation: int getNetworkId()>
<com.android.server.location.PassiveProvider: long getStatusUpdateTime()>
<android.location.ILocationManager$Stub$Proxy: java.lang.String getBestProvider(android.location.Criteria,boolean)>
<com.android.internal.telephony.sip.SipPhone: void getPreferredNetworkType(android.os.Message)>
<android.renderscript.Allocation: android.renderscript.Allocation createTyped(android.renderscript.RenderScript,android.renderscript.Type,int)>
<com.android.server.location.LocationBasedCountryDetector: android.location.Location getLastKnownLocation()>
<com.android.server.location.PassiveProvider: java.lang.String getName()>
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>
<com.android.server.location.ComprehensiveCountryDetector: android.location.Country getNetworkBasedCountry()>
<android.location.ILocationManager$Stub$Proxy: android.location.Location getLastLocation(android.location.LocationRequest,java.lang.String)>
<android.renderscript.Allocation: android.renderscript.Type typeFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap,android.renderscript.Allocation$MipmapControl)>
<com.android.internal.location.ILocationProvider$Stub$Proxy: long getStatusUpdateTime()>
<android.renderscript.Allocation: android.renderscript.Allocation createCubemapFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap)>
<android.location.Address: int getMaxAddressLineIndex()>
<com.android.internal.telephony.PhoneProxy: void getPreferredNetworkType(android.os.Message)>
<android.location.Geocoder: java.util.List getFromLocation(double,double,int)>
<android.location.Criteria: int getVerticalAccuracy()>
<android.location.Geocoder: java.util.List getFromLocationName(java.lang.String,int,double,double,double,double)>
<android.location.IGeocodeProvider$Stub$Proxy: java.lang.String getFromLocationName(java.lang.String,double,double,double,double,int,android.location.GeocoderParams,java.util.List)>
<com.android.internal.telephony.sip.SipPhoneBase: android.telephony.CellLocation getCellLocation()>
<android.location.ILocationManager$Stub$Proxy: com.android.internal.location.ProviderProperties getProviderProperties(java.lang.String)>
<android.location.Location: long getElapsedRealtimeNanos()>
<android.location.Location: double getLatitude()>
<android.location.Location: float getBearing()>
<android.location.ILocationManager$Stub$Proxy: java.lang.String getFromLocationName(java.lang.String,double,double,double,double,int,android.location.GeocoderParams,java.util.List)>
<android.renderscript.Allocation: android.renderscript.Allocation createFromString(android.renderscript.RenderScript,java.lang.String,int)>
<android.location.IGeocodeProvider$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.location.LocationProvider: java.lang.String getName()>
<android.location.IGpsStatusListener$Stub: android.os.IBinder asBinder()>
<android.renderscript.Mesh$AllocationBuilder: int getCurrentVertexTypeIndex()>
<android.renderscript.Allocation: android.renderscript.Allocation createCubemapFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap,android.renderscript.Allocation$MipmapControl,int)>
<com.android.server.location.MockProvider: int getStatus(android.os.Bundle)>
<android.location.Location: android.os.Bundle getExtras()>
<android.location.ILocationListener$Stub: android.os.IBinder asBinder()>
<android.renderscript.Allocation: android.graphics.SurfaceTexture getSurfaceTexture()>
<android.location.Criteria: int getPowerRequirement()>
<android.telephony.gsm.GsmCellLocation: int getPsc()>
<android.location.GpsStatus: java.lang.Iterable getSatellites()>
<com.android.camera.LocationManager: android.location.Location getCurrentLocation()>
<android.location.Address: java.lang.String getPremises()>
<android.telephony.gsm.GsmCellLocation: int getLac()>
<com.android.internal.location.GpsNetInitiatedHandler: byte[] stringToByteArray(java.lang.String,boolean)>
<android.telephony.cdma.CdmaCellLocation: int getSystemId()>
<com.android.server.location.LocationProviderProxy: java.lang.String getName()>
<android.location.Address: java.lang.String getThoroughfare()>
<com.android.camera.RecordLocationPreference: java.lang.String getValue()>
<com.android.internal.telephony.cdma.CDMALTEPhone: void getPreferredNetworkType(android.os.Message)>
<android.location.LocationRequest: java.lang.String getProvider()>
<com.android.server.LocationManagerService: java.lang.String getFromLocation(double,double,int,android.location.GeocoderParams,java.util.List)>
<com.android.internal.telephony.gsm.GSMPhone: void getPreferredNetworkType(android.os.Message)>
<android.location.IGpsStatusProvider$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.location.LocationRequest: int getQuality()>
<com.android.server.location.MockProvider: com.android.internal.location.ProviderProperties getProperties()>
<android.telephony.CellLocation: android.telephony.CellLocation getEmpty()>
<android.location.Location: long getTime()>
<android.renderscript.Allocation: android.renderscript.Element getElement()>
<android.location.Address: java.lang.String getAddressLine(int)>
<com.android.server.location.PassiveProvider: com.android.internal.location.ProviderProperties getProperties()>
<android.renderscript.Allocation: android.renderscript.Allocation createFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap)>
<com.android.server.location.MockProvider: java.lang.String getName()>
<android.location.Country: int getSource()>
<com.android.server.location.GeofenceState: double getDistanceToBoundary()>
<com.android.server.location.LocationProviderProxy: int getStatus(android.os.Bundle)>
<com.android.internal.location.ILocationProvider$Stub: android.os.IBinder asBinder()>
<android.location.Address: java.lang.String getPhone()>
<android.location.Geofence: double getLongitude()>
<android.location.ICountryDetector$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.android.internal.telephony.gsm.GSMPhone: android.telephony.CellLocation getCellLocation()>
<android.location.ICountryDetector$Stub$Proxy: android.location.Country detectCountry()>
<android.telephony.cdma.CdmaCellLocation: int getBaseStationId()>
<android.location.INetInitiatedListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.location.LocationRequest: long getInterval()>
<android.renderscript.Allocation: android.renderscript.Allocation createFromBitmapResource(android.renderscript.RenderScript,android.content.res.Resources,int)>
<android.location.ILocationManager$Stub$Proxy: java.lang.String getFromLocation(double,double,int,android.location.GeocoderParams,java.util.List)>
<android.location.ICountryListener$Stub: android.os.IBinder asBinder()>
<com.android.internal.location.ILocationProvider$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.location.Address: java.lang.String getUrl()>
<com.android.server.location.LocationBasedCountryDetector: java.lang.String getCountryFromLocation(android.location.Location)>
<com.android.server.location.LocationBasedCountryDetector: long getQueryLocationTimeout()>
<android.location.Address: java.lang.String getLocality()>
<android.location.IGpsStatusProvider$Stub: android.os.IBinder asBinder()>
<com.android.server.LocationManagerService$Receiver: android.location.ILocationListener getListener()>
<android.webkit.GeolocationPermissions: android.webkit.GeolocationPermissions getInstance()>
<android.location.INetInitiatedListener$Stub: android.os.IBinder asBinder()>
<android.location.Location: java.lang.String getProvider()>
<android.location.LocationProvider: int getPowerRequirement()>
<com.android.server.location.LocationProviderProxy: com.android.internal.location.ProviderProperties getProperties()>
<com.android.server.LocationManagerService: java.util.List getAllProviders()>
<android.renderscript.Allocation: android.renderscript.Allocation createCubemapFromCubeFaces(android.renderscript.RenderScript,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.renderscript.Allocation$MipmapControl,int)>
<android.location.ILocationListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.location.LocationManager: java.util.List getAllProviders()>
<android.location.Criteria: int getSpeedAccuracy()>
<android.location.GpsStatus: int getTimeToFirstFix()>
<android.location.Geofence: int getType()>
<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()>
<android.location.Geofence: float getRadius()>
<com.android.internal.telephony.PhoneBase: void getPreferredNetworkType(android.os.Message)>
<com.android.server.location.GpsLocationProvider: android.location.INetInitiatedListener getNetInitiatedListener()>
<android.location.ILocationManager$Stub$Proxy: java.util.List getProviders(android.location.Criteria,boolean)>
<android.location.Geofence: double getLatitude()>
<android.location.Address: android.os.Bundle getExtras()>
<android.telephony.cdma.CdmaCellLocation: int getBaseStationLongitude()>
<com.android.server.LocationManagerService: android.location.Location getLastLocation(android.location.LocationRequest,java.lang.String)>
<android.location.Location: double getAltitude()>
<com.android.server.LocationManagerService: java.util.List getProviders(android.location.Criteria,boolean)>
<com.android.server.location.GeocoderProxy: java.lang.String getFromLocationName(java.lang.String,double,double,double,double,int,android.location.GeocoderParams,java.util.List)>
<android.location.Address: double getLongitude()>
<android.location.GpsSatellite: float getElevation()>
<com.android.internal.telephony.PhoneProxy: android.telephony.CellLocation getCellLocation()>
<android.renderscript.Allocation: android.renderscript.Type getType()>
<android.location.Location: android.location.Location getExtraLocation(java.lang.String)>
<android.renderscript.Allocation: android.view.Surface getSurface()>
<android.location.IGeocodeProvider$Stub: android.os.IBinder asBinder()>
<com.android.phone.PhoneInterfaceManager: android.os.Bundle getCellLocation()>
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>
<android.renderscript.Mesh$AllocationBuilder: int getCurrentIndexSetIndex()>
<android.location.IGpsStatusListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.android.server.location.GpsLocationProvider: com.android.internal.location.ProviderProperties getProperties()>
<android.location.Country: java.lang.String getCountryIso()>
<android.location.LocationProvider: int getAccuracy()>
<android.location.GpsStatus: int getMaxSatellites()>
<android.location.ILocationManager$Stub: android.os.IBinder asBinder()>
<com.google.android.apps.lightcycle.util.LocationProvider: android.location.Location getCurrentLocation()>
<android.renderscript.Allocation: android.renderscript.Allocation createCubemapFromCubeFaces(android.renderscript.RenderScript,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap)>
<com.android.server.location.ComprehensiveCountryDetector: android.location.Country getSimBasedCountry()>
<com.android.internal.location.ILocationProvider$Stub$Proxy: int getStatus(android.os.Bundle)>
<android.location.GeocoderParams: java.lang.String getClientPackage()>
<com.android.server.location.ComprehensiveCountryDetector: android.location.Country getLocaleCountry()>
<android.renderscript.Allocation: android.renderscript.Allocation createSized(android.renderscript.RenderScript,android.renderscript.Element,int)>
<android.telephony.gsm.GsmCellLocation: int getCid()>
<com.android.server.location.GeocoderProxy: java.lang.String getFromLocation(double,double,int,android.location.GeocoderParams,java.util.List)>
<com.android.internal.telephony.sip.SipPhoneBase: void getPreferredNetworkType(android.os.Message)>
<android.location.LocationRequest: long getExpireAt()>
<com.android.server.LocationManagerService: java.lang.String getFromLocationName(java.lang.String,double,double,double,double,int,android.location.GeocoderParams,java.util.List)>
<android.location.LocationManager: java.util.List getProviders(android.location.Criteria,boolean)>
<android.location.LocationManager: android.location.Location getLastLocation()>
<com.android.server.location.GpsLocationProvider: java.lang.String getName()>
<com.android.server.LocationManagerService: com.android.internal.location.ProviderProperties getProviderProperties(java.lang.String)>
<android.location.Geocoder: java.util.List getFromLocationName(java.lang.String,int)>
<com.android.server.location.GpsXtraDownloader: byte[] downloadXtraData()>
<android.location.Address: java.lang.String getPostalCode()>
<android.webkit.GeolocationPermissionsClassic: android.webkit.GeolocationPermissionsClassic getInstance()>
<android.location.GpsSatellite: float getAzimuth()>
<com.android.server.location.GeocoderProxy: java.lang.String getConnectedPackageName()>
<android.location.Country: long getTimestamp()>
<com.android.internal.location.ILocationProvider$Stub$Proxy: com.android.internal.location.ProviderProperties getProperties()>
<com.android.server.location.GpsXtraDownloader: byte[] doDownload(java.lang.String,boolean,java.lang.String,int)>
<android.location.IGeocodeProvider$Stub$Proxy: java.lang.String getFromLocation(double,double,int,android.location.GeocoderParams,java.util.List)>
<android.telephony.cdma.CdmaCellLocation: int getBaseStationLatitude()>
<android.location.LocationManager: android.location.LocationProvider getProvider(java.lang.String)>
<com.android.internal.location.GpsNetInitiatedHandler: java.lang.String getDialogTitle(com.android.internal.location.GpsNetInitiatedHandler$GpsNiNotification,android.content.Context)>
<android.location.LocationRequest: long getFastestInterval()>
<android.location.Address: java.lang.String getSubLocality()>
<android.location.Address: java.lang.String getSubAdminArea()>
<android.location.LocationManager: android.location.GpsStatus getGpsStatus(android.location.GpsStatus)>
<android.renderscript.AllocationAdapter: int getID(android.renderscript.RenderScript)>
<android.location.Address: double getLatitude()>
<android.location.Criteria: int getHorizontalAccuracy()>
<android.location.ILocationManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>
<android.renderscript.Allocation: int getUsage()>
<com.android.server.location.GpsLocationProvider: android.location.IGpsStatusProvider getGpsStatusProvider()>
<com.android.server.location.ComprehensiveCountryDetector: android.location.Country getLastKnownLocationBasedCountry()>
<android.telephony.SmsCbLocation: int getCid()>
<android.location.LocationRequest: int getNumUpdates()>
<com.android.server.location.GpsLocationProvider: long getStatusUpdateTime()>
<com.android.server.location.GpsLocationProvider: int getStatus(android.os.Bundle)>
<com.android.server.location.LocationFudger: android.location.Location getOrCreate(android.location.Location)>
<android.location.ICountryListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.location.LocationRequest: float getSmallestDisplacement()>
<com.android.internal.telephony.cdma.CDMAPhone: android.telephony.CellLocation getCellLocation()>
<android.location.Address: java.lang.String getCountryCode()>
<com.android.phone.PhoneInterfaceManager: int getNetworkType()>
<android.location.Location: float getAccuracy()>
<android.location.Location: double getLongitude()>
<com.android.server.location.LocationProviderProxy: java.lang.String getConnectedPackageName()>
<android.location.Criteria: int getAccuracy()>
<com.android.server.location.PassiveProvider: int getStatus(android.os.Bundle)>
<android.location.Criteria: int getBearingAccuracy()>
<com.android.server.location.LocationBasedCountryDetector: java.util.List getEnabledProviders()>
<android.renderscript.Allocation: android.renderscript.Allocation createFromBitmapResource(android.renderscript.RenderScript,android.content.res.Resources,int,android.renderscript.Allocation$MipmapControl,int)>
<com.android.server.location.LocationProviderProxy: long getStatusUpdateTime()>
<com.android.server.LocationManagerService: java.lang.String getBestProvider(android.location.Criteria,boolean)>
<android.location.Address: java.lang.String getSubThoroughfare()>
<android.net.ConnectivityManager: java.lang.String[] getTetherableUsbRegexs()>
<com.android.internal.telephony.cdma.CdmaCall: com.android.internal.telephony.Call$State getState()>
<com.android.internal.telephony.cdma.SmsMessage: int getNumOfVoicemails()>
<com.android.server.sip.SipService: android.os.Looper access$1800()>
<android.net.Uri$HierarchicalUri: android.net.Uri$Builder buildUpon()>
<android.media.IAudioService$Stub$Proxy: int getRemoteStreamMaxVolume()>
<com.android.internal.telephony.IccRefreshResponse: java.lang.String toString()>
<com.android.exchange.EasSyncService: com.android.exchange.EasSyncService getServiceForMailbox(android.content.Context,com.android.emailcommon.provider.Mailbox)>
<com.android.internal.telephony.SmsUsageMonitor: int getPremiumSmsPermission(java.lang.String)>
<android.net.ConnectivityManager: boolean isNetworkSupported(int)>
<android.telephony.ServiceState: int getRilRadioTechnology()>
<android.net.http.AndroidHttpClientConnection: java.net.InetAddress getLocalAddress()>
<com.android.server.DevicePolicyManagerService: long getMaximumTimeToLock(android.content.ComponentName,int)>
<com.android.server.BackupManagerService: java.lang.String getDestinationString(java.lang.String)>
<com.android.server.MountService$ObbState: android.os.IBinder getBinder()>
<android.telephony.CellSignalStrengthGsm: int getDbm()>
<com.android.internal.telephony.SMSDispatcher: int getPremiumSmsPermission(java.lang.String)>
<com.android.internal.telephony.gsm.SmsCbHeader: int getSerialNumber()>
<com.android.server.InputMethodManagerService: com.android.internal.view.InputBindResult startInputInnerLocked()>
<android.app.ContextImpl$ServiceFetcher: java.lang.Object getService(android.app.ContextImpl)>
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.ServiceStateTracker getServiceStateTracker()>
<com.android.internal.telephony.AdnRecordCache: java.util.ArrayList getRecordsIfLoaded(int)>
<android.telephony.CellSignalStrengthCdma: int getAsuLevel()>
<android.net.http.Headers: int getConnectionType()>
<android.net.sip.SimpleSessionDescription$Media: java.lang.String[] getAttributeNames()>
<android.net.http.AndroidHttpClientConnection: int getRemotePort()>
<android.os.INetworkManagementService$Stub$Proxy: android.net.NetworkStats getNetworkStatsSummaryDev()>
<android.media.AudioService: int getMasterVolume()>
<com.android.internal.telephony.SmsMessageBase: java.lang.String getDisplayMessageBody()>
<android.service.textservice.SpellCheckerService$Session: android.view.textservice.SuggestionsInfo[] onGetSuggestionsMultiple(android.view.textservice.TextInfo[],int,boolean)>
<android.net.sip.SimpleSessionDescription$Media: int getPort()>
<com.android.internal.telephony.gsm.SmsMessage$PduParser: int getUserDataSeptetPadding()>
<com.android.internal.telephony.Connection: int getCnapNamePresentation()>
<android.telephony.gsm.SmsManager: java.util.ArrayList getAllMessagesFromSim()>
<android.net.LocalSocketAddress: android.net.LocalSocketAddress$Namespace getNamespace()>
<com.android.internal.telephony.ServiceStateTracker: boolean getDesiredPowerState()>
<com.android.internal.telephony.ApnContext: com.android.internal.telephony.DataConnectionAc getDataConnectionAc()>
<com.android.email.mail.transport.MailTransport: java.lang.String getHost()>
<android.telephony.CellInfo: long getTimeStamp()>
<com.android.internal.telephony.DataConnection: java.lang.String getWhatToString(int)>
<com.android.server.MountService: java.lang.String getMountedObbPath(java.lang.String)>
<android.net.wifi.WifiStateTracker: java.lang.String getTcpBufferSizesPropName()>
<com.android.internal.telephony.gsm.GsmMmiCode: com.android.internal.telephony.MmiCode$State getState()>
<android.net.MobileDataStateTracker: android.net.LinkProperties getLinkProperties()>
<android.net.http.HttpConnection: java.lang.String getScheme()>
<android.net.LocalSocketImpl: java.lang.Object getOption(int)>
<com.android.internal.telephony.SmsMessageBase: java.lang.String getEmailFrom()>
<android.net.Proxy: java.lang.String getHost(android.content.Context)>
<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String getNativeLibraryPath()>
<android.telephony.SmsMessage: byte[] getPdu()>
<com.android.internal.telephony.cdma.RuimRecords$EfCsimEprlLoaded: java.lang.String getEfName()>
<com.android.internal.telephony.sip.SipConnectionBase: long getDurationMillis()>
<com.android.internal.telephony.SmsMessageBase: com.android.internal.telephony.SmsHeader getUserDataHeader()>
<com.android.internal.telephony.IccRecords: com.android.internal.telephony.ims.IsimRecords getIsimRecords()>
<com.android.internal.telephony.gsm.GsmCallTracker: com.android.internal.telephony.gsm.GsmConnection getConnectionByIndex(com.android.internal.telephony.gsm.GsmCall,int)>
<com.android.server.ThrottleService$DataRecorder: long getPeriodEnd()>
<android.net.nsd.NsdServiceInfo: int getPort()>
<com.android.internal.telephony.uicc.UiccController: com.android.internal.telephony.UiccCardApplication getUiccCardApplication(int)>
<android.net.http.Request: java.lang.String getHostPort()>
<com.android.server.TextServicesManagerService$TextServicesSettings: java.lang.String getSelectedSpellCheckerSubtype()>
<com.android.server.am.ActivityManagerService: int[] getUsersLocked()>
<android.telephony.SmsCbMessage: android.telephony.SmsCbEtwsInfo getEtwsWarningInfo()>
<com.android.internal.telephony.SmsMessageBase: java.lang.String getEmailBody()>
<android.net.NetworkPolicyManager: int getUidPolicy(int)>
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetherableWifiRegexs()>
<android.telephony.SmsMessage: java.lang.String getDisplayOriginatingAddress()>
<android.media.AudioService: int getLastAudibleStreamVolume(int)>
<android.net.Uri$PathPart: android.net.Uri$PathSegments getPathSegments()>
<android.net.sip.ISipSessionListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress,int)>
<com.android.internal.telephony.cdma.CDMAPhone: boolean getCallForwardingIndicator()>
<android.net.wifi.WifiManager: android.net.wifi.WifiInfo getConnectionInfo()>
<android.net.sip.SipAudioCall: android.net.rtp.AudioGroup getAudioGroup()>
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: int[] getAppWidgetIdsForHost(int)>
<com.android.internal.telephony.CallManager: java.util.List getPendingMmiCodes(com.android.internal.telephony.Phone)>
<com.android.internal.telephony.IccRecords: java.lang.String getMsisdnAlphaTag()>
<android.net.Uri: java.lang.String access$600()>
<com.android.internal.telephony.ApnSetting: java.lang.String toString()>
<android.net.NetworkUtils: java.net.InetAddress getNetworkPart(java.net.InetAddress,int)>
<android.service.dreams.IDreamManager$Stub$Proxy: android.content.ComponentName getDefaultDreamComponent()>
<android.net.LocalSocket: android.net.LocalSocketAddress getRemoteSocketAddress()>
<com.android.server.ThrottleService: int getCliffLevel(java.lang.String,int)>
<android.net.http.SslCertificate$DName: java.lang.String getDName()>
<android.net.http.Connection: android.net.http.SslCertificate getCertificate()>
<android.inputmethodservice.Keyboard: int[] getNearestKeys(int,int)>
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.Call getForegroundCall()>
<android.telephony.SignalStrength: int getGsmLevel()>
<com.android.server.ConnectivityService: int getNetworkPreference()>
<android.net.LocalSocket: java.io.FileDescriptor getFileDescriptor()>
<com.android.server.ConnectivityService: java.lang.String[] getTetherableUsbRegexs()>
<com.android.server.accessibility.AccessibilityManagerService: java.util.List getEnabledAccessibilityServiceList(int,int)>
<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String getResourcePath()>
<com.android.server.am.ActivityManagerService: int[] getRunningUserIds()>
<com.android.internal.telephony.SmsResponse: java.lang.String toString()>
<android.net.nsd.DnsSdTxtRecord: byte[] getRawData()>
<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDisplayContentLocked(int)>
<android.inputmethodservice.Keyboard$Key: int[] getCurrentDrawableState()>
<com.android.server.input.InputManagerService: android.view.InputDevice[] getInputDevices()>
<com.android.exchange.ExchangeService: int getStatusType(java.lang.String)>
<com.android.internal.telephony.cdma.CdmaConnection: long getCreateTime()>
<android.net.EthernetDataTracker: android.net.LinkProperties getLinkProperties()>
<com.android.internal.telephony.gsm.VoiceMailConstants: java.lang.String getCarrierName(java.lang.String)>
<android.net.wifi.IWifiManager$Stub$Proxy: java.lang.String getConfigFile()>
<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDefaultDisplayContentLocked()>
<android.telephony.CellSignalStrengthCdma: int getEvdoSnr()>
<com.android.internal.telephony.gsm.GsmServiceStateTracker: int getCurrentDataConnectionState()>
<android.telephony.CellSignalStrengthCdma: int getCdmaDbm()>
<com.android.emailcommon.utility.SSLUtils$StubKeyManager: java.lang.String[] getClientAliases(java.lang.String,java.security.Principal[])>
<android.net.Uri: boolean getBooleanQueryParameter(java.lang.String,boolean)>
<android.telephony.CellSignalStrengthLte: int getLevel()>
<com.android.internal.telephony.OperatorInfo: java.lang.String getOperatorNumeric()>
<android.view.textservice.SpellCheckerSubtype: java.lang.String getExtraValueOf(java.lang.String)>
<android.provider.Telephony$Sms$Intents: android.telephony.SmsMessage[] getMessagesFromIntent(android.content.Intent)>
<com.android.internal.telephony.CallManager: java.util.List getBgCallConnections()>
<android.net.sip.SimpleSessionDescription$Media: java.lang.String getEncryptionKey()>
<com.android.server.am.ActivityManagerService: java.util.List getRunningAppProcesses()>
<com.android.server.pm.PackageManagerService: java.util.List getAllPermissionGroups(int)>
<com.android.server.NetworkManagementService: android.net.NetworkStats getNetworkStatsSummaryDev()>
<com.android.server.connectivity.Tethering: java.lang.String[] getTetherableUsbRegexs()>
<android.net.Uri$HierarchicalUri: java.lang.String getQuery()>
<com.android.internal.telephony.cdma.EriManager: int getEriFileVersion()>
<android.net.NetworkIdentity: boolean getRoaming()>
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.ServiceStateTracker getServiceStateTracker()>
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.Call getRingingCall()>
<android.telephony.SignalStrength: int getLteAsuLevel()>
<com.android.internal.telephony.SmsMessageBase: java.lang.String getOriginatingAddress()>
<android.telephony.ServiceState: int getState()>
<android.net.sip.ISipSession$Stub$Proxy: int getState()>
<android.telephony.SmsCbCmasInfo: java.lang.String toString()>
<com.android.server.TextServicesManagerService: android.view.textservice.SpellCheckerSubtype getCurrentSpellCheckerSubtype(java.lang.String,boolean)>
<com.android.internal.telephony.IccFileHandler: java.lang.String getCommonIccEFPath(int)>
<android.media.AudioService: int getStreamVolume(int)>
<android.net.sip.SipProfile: java.lang.String getProfileName()>
<com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice getInstalledApplications(int,java.lang.String,int)>
<android.net.sip.SipAudioCall: android.net.sip.SimpleSessionDescription access$1300(android.net.sip.SipAudioCall)>
<android.service.wallpaper.IWallpaperConnection$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.android.email.activity.MessageOrderManager$LoadMessageListTask: android.database.Cursor doInBackground(java.lang.Void[])>
<com.android.server.DevicePolicyManagerService: int getPasswordMinimumNonLetter(android.content.ComponentName,int)>
<com.android.emailcommon.service.IEmailService$Stub$Proxy: int getApiLevel()>
<com.android.server.wm.WindowManagerService: android.os.IBinder getFocusedWindowToken()>
<android.service.wallpaper.IWallpaperService$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.android.server.am.ActivityManagerService: android.content.ComponentName getActivityClassForToken(android.os.IBinder)>
<android.inputmethodservice.Keyboard: int getHeight()>
<com.android.server.am.ActivityManagerService: android.os.Debug$MemoryInfo[] getProcessMemoryInfo(int[])>
<android.net.rtp.RtpStream: int getSocket()>
<android.net.sip.SimpleSessionDescription: java.lang.String getAttribute(java.lang.String)>
<android.net.NetworkTemplate: java.lang.String getSubscriberId()>
<android.net.rtp.RtpStream: java.net.InetAddress getRemoteAddress()>
<android.net.Uri: java.lang.String access$300()>
<android.telephony.cdma.CdmaSmsCbProgramResults: int getCategoryResult()>
<com.android.internal.telephony.RetryManager: int getRetryTimer()>
<android.telephony.TelephonyManager: int getCdmaEriIconIndex()>
<com.android.server.am.UsageStatsService: com.android.internal.os.PkgUsageStats[] getAllPkgUsageStats()>
<android.net.EthernetDataTracker: int getDefaultGatewayAddr()>
<android.telephony.SignalStrength: int getGsmDbm()>
<android.speech.tts.TextToSpeechService$SpeechItem: java.lang.String getStringParam(java.lang.String,java.lang.String)>
<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>
<android.net.http.RequestHandle: java.lang.String getMethod()>
<com.android.emailcommon.utility.SSLUtils$KeyChainKeyManager: java.security.PrivateKey getPrivateKey(java.lang.String)>
<com.android.internal.textservice.ISpellCheckerSessionListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.inputmethodservice.ExtractEditLayout$ExtractActionMode: android.view.Menu getMenu()>
<android.net.sip.SimpleSessionDescription$Media: java.lang.String getType()>
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: java.util.List getAllCellInfo()>
<android.service.wallpaper.IWallpaperService$Stub: android.os.IBinder asBinder()>
<com.android.server.LightsService: com.android.server.LightsService$Light getLight(int)>
<com.android.server.am.UsageStatsService: com.android.internal.os.PkgUsageStats getPkgUsageStats(android.content.ComponentName)>
<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String getCodePath()>
<android.net.SSLCertificateSocketFactory: java.lang.String[] getSupportedCipherSuites()>
<com.android.server.ConnectivityService: android.net.ProxyProperties getGlobalProxy()>
<android.net.InterfaceConfiguration: android.net.LinkAddress getLinkAddress()>
<com.android.email.service.AttachmentDownloadService: int getSize()>
<com.android.internal.telephony.gsm.SpnOverride: java.lang.String getSpn(java.lang.String)>
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: java.lang.String getFormat()>
<android.net.Uri$OpaqueUri: java.lang.String getEncodedAuthority()>
<android.inputmethodservice.KeyboardView: android.inputmethodservice.KeyboardView$OnKeyboardActionListener getOnKeyboardActionListener()>
<android.net.Uri: java.lang.String getQueryParameter(java.lang.String)>
<android.net.sip.SipProfile: java.lang.String getDisplayName()>
<android.net.IConnectivityManager$Stub$Proxy: boolean isNetworkSupported(int)>
<com.android.internal.telephony.CallManager: com.android.internal.telephony.Call$State getActiveFgCallState()>
<android.telephony.CellInfoCdma: android.telephony.CellIdentityCdma getCellIdentity()>
<android.net.rtp.AudioStream: android.net.rtp.AudioCodec getCodec()>
<com.android.internal.telephony.cdma.CDMAPhone: int getCdmaEriIconMode()>
<com.android.server.am.ActivityManagerService: com.android.server.pm.UserManagerService getUserManagerLocked()>
<com.android.internal.telephony.cdma.RuimRecords: boolean getCsimSpnDisplayCondition()>
<android.net.Uri$StringUri: java.lang.String getPath()>
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: com.android.internal.telephony.DctConstants$State getOverallState()>
<com.android.server.WifiService: android.net.wifi.WifiInfo getConnectionInfo()>
<android.os.INetworkManagementService$Stub$Proxy: java.lang.String[] getDnsForwarders()>
<com.android.server.input.InputManagerService: android.view.InputDevice getInputDevice(int)>
<com.android.server.wm.WindowManagerService: float getWindowCompatibilityScale(android.os.IBinder)>
<android.net.Uri$StringUri: java.lang.String getEncodedQuery()>
<com.android.server.pm.UserManagerService: android.content.pm.UserInfo getUserInfo(int)>
<android.telephony.CellSignalStrengthCdma: int getCdmaEcio()>
<android.net.WebAddress: java.lang.String getHost()>
<android.accessibilityservice.AccessibilityService: android.view.accessibility.AccessibilityNodeInfo getRootInActiveWindow()>
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.service.textservice.SpellCheckerService$SpellCheckerServiceBinder: com.android.internal.textservice.ISpellCheckerSession getISpellCheckerSession(java.lang.String,com.android.internal.textservice.ISpellCheckerSessionListener,android.os.Bundle)>
<com.android.server.input.InputManagerService: android.hardware.input.KeyboardLayout getKeyboardLayout(java.lang.String)>
<android.net.wifi.WifiManager: int getFrequencyBand()>
<android.net.ConnectivityManager: int getNetworkPreference()>
<com.android.emailcommon.utility.SSLUtils$StubKeyManager: java.lang.String[] getServerAliases(java.lang.String,java.security.Principal[])>
<com.android.server.ServiceWatcher: android.os.IBinder getBinder()>
<android.net.http.Headers: java.lang.String getContentDisposition()>
<android.net.wifi.p2p.WifiP2pGroup: java.lang.String getInterface()>
<com.android.server.ClipboardService: android.content.ClipData getPrimaryClip(java.lang.String)>
<android.service.wallpaper.WallpaperService: java.util.ArrayList access$300(android.service.wallpaper.WallpaperService)>
<android.net.Uri$StringUri: java.lang.String getEncodedFragment()>
<android.net.LinkCapabilities: java.lang.String get(int)>
<android.net.Uri$OpaqueUri: java.lang.String getEncodedSchemeSpecificPart()>
<android.telephony.CellSignalStrengthCdma: int getLevel()>
<com.android.email.service.AccountService$1: android.os.Bundle getConfigurationData(java.lang.String)>
<com.android.email.EmailConnectivityManager: int getActiveNetworkType(android.content.Context)>
<com.android.internal.telephony.ApnContext: boolean getDependencyMet()>
<android.net.ConnectivityManager: java.lang.String getNetworkTypeName(int)>
<android.net.http.SslError: int getPrimaryError()>
<android.os.INetworkManagementService$Stub$Proxy: android.net.InterfaceConfiguration getInterfaceConfig(java.lang.String)>
<android.telephony.ServiceState: java.lang.String getOperatorNumeric()>
<android.net.TrafficStats: long getMobileRxPackets()>
<com.android.internal.telephony.WspTypeDecoder: long getValue32()>
<android.net.wifi.p2p.WifiP2pGroupList: java.lang.String getOwnerAddr(int)>
<android.telephony.TelephonyManager: int getPhoneType()>
<android.accessibilityservice.IAccessibilityServiceClient$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.net.http.RequestQueue$ActivePool: org.apache.http.HttpHost getProxyHost()>
<com.android.server.WallpaperManagerService: int getHeightHint()>
<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>
<android.net.EthernetDataTracker: android.net.EthernetDataTracker getInstance()>
<android.net.TrafficStats: int getThreadStatsTag()>
<android.net.INetworkPolicyManager$Stub$Proxy: android.net.NetworkPolicy[] getNetworkPolicies()>
<com.android.internal.telephony.DataConnectionTracker: int enableApnType(java.lang.String)>
<com.android.email.service.EasAuthenticatorService$EasAuthenticator: java.lang.String getAuthTokenLabel(java.lang.String)>
<android.net.ConnectivityManager: boolean getMobileDataEnabled()>
<com.android.internal.telephony.gsm.GsmConnection: java.lang.String getRemainingPostDialString()>
<com.android.internal.telephony.WspTypeDecoder: int getDecodedDataLength()>
<android.service.dreams.IDreamService$Stub: android.os.IBinder asBinder()>
<com.android.internal.telephony.gsm.SmsMessage: com.android.internal.telephony.gsm.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,int,byte[],boolean)>
<android.telephony.CellInfoGsm: android.telephony.CellSignalStrengthGsm getCellSignalStrength()>
<com.android.server.connectivity.Tethering: java.lang.String[] getTetherableWifiRegexs()>
<com.android.internal.telephony.Connection: java.lang.String getCnapName()>
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: java.util.ArrayList access$300(com.android.internal.telephony.cdma.RuimSmsInterfaceManager,java.util.ArrayList)>
<com.android.server.wm.WindowManagerService: android.content.res.Configuration computeNewConfigurationLocked()>
<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig getLegacyVpnConfig()>
<com.android.internal.telephony.cdma.CdmaConnection: com.android.internal.telephony.Call getCall()>
<android.net.wifi.p2p.WifiP2pGroupList: int getNetworkId(java.lang.String)>
<com.android.internal.telephony.gsm.GsmConnection: com.android.internal.telephony.Call$State getState()>
<com.android.server.net.NetworkPolicyManagerService: android.net.NetworkPolicy[] getNetworkPolicies()>
<com.android.internal.telephony.ApnContext: com.android.internal.telephony.ApnSetting getNextWaitingApn()>
<android.media.IAudioService$Stub$Proxy: int getMasterStreamType()>
<com.android.internal.telephony.GsmAlphabet: byte[] stringToGsm7BitPacked(java.lang.String)>
<android.net.INetworkManagementEventObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.android.internal.telephony.gsm.SIMFileHandler: java.lang.String getEFPath(int)>
<com.android.internal.telephony.cdma.SmsMessage: com.android.internal.telephony.cdma.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,java.lang.String,boolean,com.android.internal.telephony.SmsHeader)>
<android.net.LinkProperties: android.net.ProxyProperties getHttpProxy()>
<com.android.internal.telephony.cat.CatService: com.android.internal.telephony.cat.AppInterface getInstance()>
<com.android.server.am.ActivityManagerService: com.android.server.am.ProcessRecord getProcessRecordLocked(java.lang.String,int)>
<android.net.http.RequestQueue: android.net.http.Request getRequest()>
<com.android.emailcommon.utility.SSLSocketFactory: java.net.Socket createSocket()>
<com.android.internal.telephony.DataConnection: com.android.internal.telephony.DataConnection$UpdateLinkPropertyResult access$500(com.android.internal.telephony.DataConnection,com.android.internal.telephony.DataCallState)>
<com.android.internal.telephony.ims.IsimFileHandler: java.lang.String getEFPath(int)>
<com.android.server.pm.PackageManagerService: int getUidForSharedUser(java.lang.String)>
<com.android.server.input.InputManagerService: int getSwitchState(int,int,int)>
<android.net.http.ErrorStrings: java.lang.String getString(int,android.content.Context)>
<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String getPackageName()>
<android.service.wallpaper.IWallpaperEngine$Stub: android.os.IBinder asBinder()>
<com.android.internal.telephony.SmsRawData: byte[] getBytes()>
<android.telephony.SmsCbEtwsInfo: int getWarningType()>
<android.net.http.AndroidHttpClient: org.apache.http.entity.AbstractHttpEntity getCompressedEntity(byte[],android.content.ContentResolver)>
<android.net.wifi.p2p.nsd.WifiP2pServiceResponse: byte[] getRawData()>
<android.inputmethodservice.KeyboardView: android.inputmethodservice.Keyboard getKeyboard()>
<com.android.internal.telephony.gsm.SmsMessage$PduParser: java.lang.String getUserDataKSC5601(int)>
<android.telephony.TelephonyManager: int getLteOnCdmaModeStatic()>
<android.net.LocalSocket: java.io.InputStream getInputStream()>
<android.media.IAudioService$Stub$Proxy: int getStreamMaxVolume(int)>
<android.net.http.AndroidHttpClientConnection: java.net.InetAddress getRemoteAddress()>
<com.android.server.input.InputManagerService: int[] getInputDeviceIds()>
<android.net.NetworkStats: android.net.NetworkStats$Entry getTotal(android.net.NetworkStats$Entry)>
<com.android.server.pm.UserManagerService: android.graphics.Bitmap getUserIcon(int)>
<com.android.emailcommon.utility.SSLUtils$KeyChainKeyManager: java.lang.String chooseClientAlias(java.lang.String[],java.security.Principal[],java.net.Socket)>
<com.android.server.connectivity.Tethering$TetherInterfaceSM: int getLastError()>
<android.media.AudioService: int getValueForVibrateSetting(int,int,int)>
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: java.util.List getAllMessagesFromIccEf()>
<com.android.emailcommon.service.IEmailService$Stub$Proxy: android.os.Bundle validate(com.android.emailcommon.provider.HostAuth)>
<android.security.IKeyChainService$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.net.NetworkInfo: int getSubtype()>
<com.android.internal.telephony.ApnContext: java.util.ArrayList getWaitingApns()>
<com.android.server.connectivity.Tethering: java.lang.String[] getTetheredIfaces()>
<android.net.BaseNetworkStateTracker: android.net.LinkProperties getLinkProperties()>
<android.net.http.AndroidHttpClient$2: org.apache.http.protocol.BasicHttpProcessor createHttpProcessor()>
<com.android.server.InputMethodManagerService$InputMethodSettings: int getCurrentUserId()>
<android.net.sip.SipProfile: boolean getSendKeepAlive()>
<com.android.server.BatteryService: int getBatteryLevel()>
<android.net.sip.ISipSession$Stub$Proxy: android.net.sip.SipProfile getPeerProfile()>
<android.telephony.cdma.CdmaSmsCbProgramData: int getOperation()>
<com.android.internal.telephony.gsm.SmsCbHeader: int getServiceCategory()>
<com.android.server.display.DisplayManagerService: android.view.DisplayInfo getDisplayInfo(int)>
<android.net.INetworkStatsSession$Stub$Proxy: android.net.NetworkStatsHistory getHistoryForNetwork(android.net.NetworkTemplate,int)>
<com.android.internal.telephony.cdma.CdmaConnection: int getCDMAIndex()>
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService: android.view.textservice.SuggestionsInfo getNotInDictEmptySuggestions()>
<android.net.IConnectivityManager$Stub$Proxy: int getNetworkPreference()>
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkInfo[] getAllNetworkInfo()>
<android.app.ContextImpl$StaticServiceFetcher: java.lang.Object getService(android.app.ContextImpl)>
<android.net.sip.SimpleSessionDescription$Fields: java.lang.String getAddress()>
<com.android.server.DevicePolicyManagerService: int getPasswordMinimumNumeric(android.content.ComponentName,int)>
<android.inputmethodservice.InputMethodService: android.app.Dialog getWindow()>
<com.android.server.pm.PackageManagerService: java.util.List queryIntentActivities(android.content.Intent,java.lang.String,int,int)>
<com.android.server.InputMethodManagerService: java.util.List getEnabledInputMethodList()>
<android.net.EthernetDataTracker: android.net.LinkCapabilities getLinkCapabilities()>
<com.android.server.TwilightService$TwilightState: long getTodaySunrise()>
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetheredIfaces()>
<com.android.internal.telephony.cdma.CdmaConnection: java.lang.String getAddress()>
<android.net.wifi.WifiInfo: int getRssi()>
<com.android.internal.telephony.ims.IsimUiccRecords: java.lang.String getIsimImpi()>
<com.android.internal.telephony.ims.IsimUiccRecords: java.lang.String[] getIsimImpu()>
<android.content.IContentService$Stub: android.os.IBinder asBinder()>
<com.android.internal.app.IMediaContainerService$Stub: android.os.IBinder asBinder()>
<com.android.server.ConnectivityService: android.net.NetworkInfo getNetworkInfo(int)>
<android.net.INetworkPolicyManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.android.internal.app.IMediaContainerService$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.android.internal.telephony.gsm.GSMPhone: java.util.List getPendingMmiCodes()>
<android.net.Uri$AbstractHierarchicalUri: java.lang.String getHost()>
<com.android.server.usb.UsbService: android.hardware.usb.UsbAccessory getCurrentAccessory()>
<android.net.NetworkStats: android.net.NetworkStats$Entry getTotal(android.net.NetworkStats$Entry,int)>
<android.net.IConnectivityManager$Stub$Proxy: int getLastTetherError(java.lang.String)>
<com.android.server.pm.PackageManagerService: java.util.List getPersistentApplications(int)>
<android.net.wifi.p2p.IWifiP2pManager$Stub: android.os.IBinder asBinder()>
<com.android.internal.telephony.cdma.RuimRecords: java.lang.String getMdnNumber()>
<com.android.server.pm.PackageManagerService: android.content.pm.VerifierDeviceIdentity getVerifierDeviceIdentity()>
<com.android.server.ConnectivityService: android.net.LinkProperties getActiveLinkProperties()>
<com.android.internal.telephony.sip.SipConnectionBase: long getConnectTime()>
<android.net.http.Connection: byte[] getBuf()>
<com.android.internal.telephony.cat.CommandDetails: com.android.internal.telephony.cat.ComprehensionTlvTag getTag()>
<com.android.email.mail.store.ServiceStore: android.os.Bundle checkSettings()>
<com.android.server.am.ActivityManagerService: java.util.List getRunningExternalApplications()>
<com.android.internal.textservice.ISpellCheckerService$Stub$Proxy: com.android.internal.textservice.ISpellCheckerSession getISpellCheckerSession(java.lang.String,com.android.internal.textservice.ISpellCheckerSessionListener,android.os.Bundle)>
<android.net.SSLCertificateSocketFactory: org.apache.http.conn.ssl.SSLSocketFactory getHttpSocketFactory(int,android.net.SSLSessionCache)>
<android.telephony.CellSignalStrengthCdma: int getEvdoDbm()>
<com.android.server.net.NetworkStatsService: long getNetworkTotalBytes(android.net.NetworkTemplate,long,long)>
<com.android.server.pm.PackageManagerService: android.content.pm.ProviderInfo getProviderInfo(android.content.ComponentName,int,int)>
<com.android.internal.telephony.cdma.CdmaConnection: long getHoldDurationMillis()>
<android.net.wifi.WifiInfo: java.lang.String getSSID()>
<com.android.internal.telephony.DataConnectionTracker: java.lang.String getReryConfig(boolean)>
<android.accessibilityservice.IAccessibilityServiceConnection$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.android.internal.telephony.cdma.CdmaSubscriptionSourceManager: int getCdmaSubscriptionSource()>
<android.net.IConnectivityManager$Stub: android.os.IBinder asBinder()>
<android.media.IAudioService$Stub$Proxy: int getVibrateSetting(int)>
<com.android.server.WifiService: android.os.Messenger getWifiStateMachineMessenger()>
<com.android.server.am.ActivityManagerService: int getTaskForActivityLocked(android.os.IBinder,boolean)>
<com.google.android.apps.lightcycle.panorama.StitchingService: android.net.Uri access$700(com.google.android.apps.lightcycle.panorama.StitchingService,java.lang.String,android.net.Uri)>
<android.net.SSLCertificateSocketFactory$1: java.security.cert.X509Certificate[] getAcceptedIssuers()>
<android.net.nsd.INsdManager$Stub$Proxy: android.os.Messenger getMessenger()>
<android.service.wallpaper.IWallpaperEngine$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.net.http.SslError: java.lang.String getUrl()>
<com.android.server.ConnectivityService: java.lang.String[] getTetheredIfacePairs()>
<android.net.Uri$Builder: android.net.Uri$Builder clearQuery()>
<android.net.LinkProperties: java.util.Collection getAddresses()>
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.Call getBackgroundCall()>
<com.android.server.AppWidgetService: int[] getAppWidgetIdsForHost(int)>
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: int getPremiumSmsPermission(java.lang.String)>
<android.net.ProxyProperties: java.net.InetSocketAddress getSocketAddress()>
<com.android.email.service.PopImapAuthenticatorService$PopImapAuthenticator: java.lang.String getAuthTokenLabel(java.lang.String)>
<com.android.server.pm.PackageManagerService: java.io.File access$2200(com.android.server.pm.PackageManagerService,java.io.File)>
<android.net.wifi.WifiStateMachine: int getFrequencyBand()>
<android.telephony.SmsCbCmasInfo: int getCategory()>
<android.net.wifi.WifiInfo: boolean getMeteredHint()>
<com.android.server.connectivity.Vpn: com.android.internal.net.LegacyVpnInfo getLegacyVpnInfo()>
<android.net.Uri$HierarchicalUri: java.lang.String getEncodedAuthority()>
<android.net.wifi.p2p.WifiP2pGroup: android.net.wifi.p2p.WifiP2pDevice getOwner()>
<android.net.http.SslCertificate: java.util.Date getValidNotBeforeDate()>
<android.telephony.SmsMessage: java.lang.String getPseudoSubject()>
<com.android.email.service.EasTestAuthenticatorService$EasAuthenticator: android.os.Bundle getAuthToken(android.accounts.AccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)>
<android.net.http.RequestQueue: org.apache.http.HttpHost getProxyHost()>
<com.android.internal.telephony.UiccCard: com.android.internal.telephony.UiccCardApplication getApplication(int)>
<com.android.internal.telephony.gsm.SmsBroadcastConfigInfo: int getToServiceId()>
<com.android.internal.telephony.sip.SipConnectionBase: long getHoldDurationMillis()>
<android.net.http.Headers: java.lang.String getCacheControl()>
<android.net.wifi.WifiNative: java.lang.String getNetworkVariable(int,java.lang.String)>
<com.android.internal.telephony.CallManager: java.util.List getBackgroundCalls()>
<com.android.internal.telephony.IccCardApplicationStatus: com.android.internal.telephony.IccCardStatus$PinState PinStateFromRILInt(int)>
<com.android.server.connectivity.Vpn: java.lang.String getTcpBufferSizesPropName()>
<com.android.email.RefreshManager: long getLastMessageListRefreshTime(long)>
<com.android.internal.telephony.ApnContext: int getRetryCount()>
<com.android.emailcommon.utility.SSLUtils$KeyChainKeyManager: java.security.cert.X509Certificate[] getCertificateChain(java.lang.String)>
<android.net.INetworkPolicyManager$Stub: android.os.IBinder asBinder()>
<android.telephony.CellSignalStrengthLte: int getAsuLevel()>
<android.server.search.SearchManagerService: java.util.List getSearchablesInGlobalSearch()>
<android.net.DummyDataStateTracker: android.net.NetworkInfo getNetworkInfo()>
<com.android.internal.util.AsyncService: android.os.Handler getHandler()>
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: java.util.List getAllCellInfo()>
<com.android.server.WallpaperManagerService: int getWidthHint()>
<android.net.IThrottleManager$Stub$Proxy: long getPeriodStartTime(java.lang.String)>
<com.android.internal.telephony.gsm.GsmSMSDispatcher: java.lang.String getFormat()>
<com.android.internal.telephony.gsm.SmsMessage$PduParser: int getByte()>
<android.net.NetworkTemplate: int getMatchRule()>
<com.android.internal.telephony.gsm.SmsMessage$PduParser: java.lang.String getUserDataGSM7Bit(int,int,int)>
<android.media.AudioService$RcClientDeathHandler: android.os.IBinder getBinder()>
<android.net.Uri$StringUri: java.lang.String getSchemeSpecificPart()>
<android.net.SntpClient: long getNtpTimeReference()>
<android.telephony.SignalStrength: int getAsuLevel()>
<android.telephony.CellIdentityCdma: int getLatitude()>
<com.android.server.InputMethodManagerService$InputMethodAndSubtypeListManager: java.util.List getSortedInputMethodAndSubtypeList(boolean,boolean,boolean)>
<com.android.internal.telephony.IccRecords: com.android.internal.telephony.gsm.UsimServiceTable getUsimServiceTable()>
<com.android.internal.telephony.DataConnectionTracker: android.net.LinkCapabilities getLinkCapabilities(java.lang.String)>
<android.net.sip.SipManager: android.net.sip.SipProfile[] getListOfProfiles()>
<android.telephony.SmsCbMessage: android.telephony.SmsCbCmasInfo getCmasWarningInfo()>
<com.android.internal.telephony.IWapPushManager$Stub: android.os.IBinder asBinder()>
<com.android.internal.telephony.cdma.CdmaConnection: com.android.internal.telephony.UUSInfo getUUSInfo()>
<com.android.server.am.ActivityManagerService: android.content.pm.ConfigurationInfo getDeviceConfigurationInfo()>
<com.android.server.AppWidgetServiceImpl: java.io.File getSettingsFile(int)>
<android.net.Uri$PathSegmentsBuilder: android.net.Uri$PathSegments build()>
<com.android.server.ThrottleService: long getPeriodStartTime(java.lang.String)>
<com.android.internal.telephony.gsm.SmsCbHeader: android.telephony.SmsCbEtwsInfo getEtwsInfo()>
<android.inputmethodservice.Keyboard: int[] getShiftKeyIndices()>
<android.net.sip.SipProfile: java.lang.String getPassword()>
<com.android.internal.telephony.UiccCardApplication: com.android.internal.telephony.IccFileHandler getIccFileHandler()>
<com.android.internal.telephony.CallerInfo: com.android.internal.telephony.CallerInfo getCallerInfo(android.content.Context,android.net.Uri,android.database.Cursor)>
<android.media.IAudioService$Stub$Proxy: int getMasterVolume()>
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getNetworkType()>
<com.android.internal.telephony.gsm.GsmDataConnection: int getProfileId()>
<android.telephony.CellInfo$1: android.telephony.CellInfo createFromParcel(android.os.Parcel)>
<android.telephony.SignalStrength: int getEvdoDbm()>
<com.android.server.RecognitionManagerService: android.content.ComponentName findAvailRecognizer(java.lang.String,int)>
<com.android.server.accessibility.AccessibilityManagerService$Service: float findAccessibilityNodeInfosByText(int,long,java.lang.String,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,long)>
<com.android.internal.telephony.ServiceStateTracker: java.util.List getAllCellInfo()>
<com.android.internal.telephony.ims.IsimUiccRecords: java.lang.String getIsimDomain()>
<com.android.internal.telephony.cdma.RuimRecords: java.lang.String getMdn()>
<android.net.NetworkStatsHistory: android.net.NetworkStatsHistory$Entry getValues(int,android.net.NetworkStatsHistory$Entry)>
<android.telephony.SignalStrength: int getLteDbm()>
<com.android.emailcommon.utility.SSLSocketFactory: java.net.Socket connectSocket(java.net.Socket,java.lang.String,int,java.net.InetAddress,int,org.apache.http.params.HttpParams)>
<android.telephony.CellIdentityCdma: int getBasestationId()>
<android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
<android.net.http.AndroidHttpClientConnection: org.apache.http.HttpConnectionMetrics getMetrics()>
<android.net.INetworkStatsService$Stub$Proxy: android.net.NetworkStats getDataLayerSnapshotForUid(int)>
<android.service.wallpaper.IWallpaperConnection$Stub: android.os.IBinder asBinder()>
<com.android.internal.telephony.Connection: com.android.internal.telephony.Call$State getState()>
<com.android.server.TextServicesManagerService: android.view.textservice.SpellCheckerInfo[] getEnabledSpellCheckers()>
<com.android.internal.telephony.cdma.RuimRecords: java.lang.String getMin()>
<android.telephony.SignalStrength: int getLteCqi()>
<com.android.server.NsdService$NsdStateMachine: java.lang.String getWhatToString(int)>
<com.android.internal.telephony.DataCallState: java.lang.String toString()>
<android.net.sip.SimpleSessionDescription$Fields: java.lang.String getEncryptionKey()>
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>
<android.telephony.gsm.SmsManager: java.util.ArrayList divideMessage(java.lang.String)>
<com.android.server.ConnectivityService: java.lang.String[] getTetherableIfaces()>
<android.net.IThrottleManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.telephony.SmsMessage: int getProtocolIdentifier()>
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService: int getCapitalizationType(java.lang.String)>
<com.android.internal.telephony.cdma.RuimRecords: java.lang.String getNid()>
<android.telephony.SmsMessage: int getIndexOnIcc()>
<com.android.internal.telephony.DataConnection: boolean isRetryNeeded()>
<android.net.Uri: java.util.List getQueryParameters(java.lang.String)>
<android.net.nsd.NsdServiceInfo: java.net.InetAddress getHost()>
<android.net.wifi.WifiManager: int getWifiState()>
<android.net.wifi.WifiConfigStore: android.net.DhcpInfoInternal getIpConfiguration(int)>
<com.android.server.wm.WindowManagerService: android.view.DisplayInfo getDefaultDisplayInfoLocked()>
<com.android.internal.telephony.gsm.SmsMessage$PduParser: java.lang.String getSCAddress()>
<android.net.MobileDataStateTracker: android.net.NetworkInfo getNetworkInfo()>
<android.inputmethodservice.InputMethodService: android.view.inputmethod.EditorInfo getCurrentInputEditorInfo()>
<com.android.server.RecognitionManagerService: android.content.ComponentName getCurRecognizer(int)>
<android.view.textservice.TextServicesManager: android.view.textservice.SpellCheckerSubtype getCurrentSpellCheckerSubtype(boolean)>
<android.net.INetworkPolicyManager$Stub$Proxy: int getUidPolicy(int)>
<com.android.internal.telephony.cdma.CdmaConnection: int getNumberPresentation()>
<android.net.wifi.WifiManager: int getWifiApState()>
<android.view.textservice.SpellCheckerInfo: java.lang.String getSettingsActivity()>
<android.accessibilityservice.AccessibilityServiceInfo: java.lang.String getDescription()>
<android.net.sip.SipAudioCall: android.net.sip.SipProfile getPeerProfile()>
<com.android.internal.telephony.CallTracker: android.os.Message obtainNoPollCompleteMessage(int)>
<com.android.internal.telephony.ISms$Stub$Proxy: java.util.List getAllMessagesFromIccEf()>
<com.android.internal.telephony.WspTypeDecoder: java.lang.String getValueString()>
<android.view.textservice.SpellCheckerSubtype: java.lang.String getExtraValue()>
<com.android.internal.telephony.cdma.SmsMessage: int getStatus()>
<com.android.email.service.EmailServiceUtils$NullEmailService: int getApiLevel()>
<android.net.wifi.IWifiManager$Stub$Proxy: android.net.wifi.WifiInfo getConnectionInfo()>
<android.net.ConnectivityManager: int stopUsingNetworkFeature(int,java.lang.String)>
<android.net.Uri$Part: java.lang.String getEncoded()>
<android.net.sip.SipProfile: java.lang.String getProxyAddress()>
<com.android.internal.telephony.gsm.SmsBroadcastConfigInfo: int getFromServiceId()>
<android.telephony.TelephonyManager: java.lang.String getNetworkCountryIso()>
<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket()>
<com.android.internal.telephony.DataConnectionTracker: com.android.internal.telephony.DctConstants$Activity getActivity()>
<android.telephony.CellInfoGsm: android.telephony.CellIdentityGsm getCellIdentity()>
<com.android.internal.telephony.IccProvider: java.lang.String getType(android.net.Uri)>
<com.android.server.am.ActivityManagerService: int getRequestedOrientation(android.os.IBinder)>
<android.telephony.SmsCbEtwsInfo: byte[] getPrimaryNotificationSignature()>
<android.speech.tts.TextToSpeechService$SynthesisSpeechItem: java.lang.String getLanguage()>
<com.android.server.pm.PackageManagerService: int getApplicationEnabledSetting(java.lang.String,int)>
<com.android.emailcommon.service.AccountServiceProxy: android.os.Bundle getConfigurationData(java.lang.String)>
<android.media.IAudioService$Stub$Proxy: int getRingerMode()>
<com.android.internal.telephony.uicc.UiccController: com.android.internal.telephony.IccRecords getIccRecords(int)>
<android.net.ThrottleManager: long getResetTime(java.lang.String)>
<android.net.LinkProperties: java.util.Collection getRoutes()>
<com.android.phone.EmergencyCallbackModeService: boolean getEmergencyCallbackModeCallState()>
<android.net.ProxyProperties: java.lang.String getExclusionList()>
<com.android.internal.telephony.IccUtils: android.graphics.Bitmap parseToRGB(byte[],int,boolean)>
<android.net.INetworkPolicyManager$Stub$Proxy: boolean isUidForeground(int)>
<android.net.http.HttpsConnection$1: java.security.cert.X509Certificate[] getAcceptedIssuers()>
<android.net.WebAddress: java.lang.String getPath()>
<android.net.wifi.WifiManager: android.os.Messenger getWifiServiceMessenger()>
<android.telephony.TelephonyManager: int getNetworkType()>
<android.media.AudioService$VolumeStreamState: int getStreamType()>
<com.android.server.pm.PackageManagerService: int getPackageUid(java.lang.String,int)>
<com.android.internal.telephony.SmsMessageBase: byte[] getPdu()>
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>
<com.android.server.pm.PackageManagerService: java.lang.String getAsecPackageName(java.lang.String)>
<com.android.internal.telephony.RetryManager: java.lang.String toString()>
<com.android.internal.telephony.gsm.SIMRecords: com.android.internal.telephony.gsm.UsimServiceTable getUsimServiceTable()>
<android.net.http.RequestQueue$SyncFeeder: android.net.http.Request getRequest()>
<android.net.MobileDataStateTracker: java.lang.String getTcpBufferSizesPropName()>
<android.net.sip.SipSession: android.net.sip.ISipSession getRealSession()>
<android.net.IConnectivityManager$Stub$Proxy: android.net.LinkProperties getActiveLinkProperties()>
<com.android.server.WifiService: android.net.DhcpInfo getDhcpInfo()>
<android.net.Uri$HierarchicalUri: java.util.List getPathSegments()>
<android.net.LocalSocket: android.net.Credentials getPeerCredentials()>
<android.net.sip.SimpleSessionDescription$Media: java.lang.String getFmtp(java.lang.String)>
<com.android.server.am.ProcessList: long getMemLevel(int)>
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: android.view.textservice.SpellCheckerSubtype getCurrentSpellCheckerSubtype(java.lang.String,boolean)>
<android.telephony.cdma.CdmaSmsCbProgramResults: int getCategory()>
<android.telephony.SignalStrength: int getGsmAsuLevel()>
<android.net.Uri$OpaqueUri: java.util.List getPathSegments()>
<com.android.internal.telephony.ITelephony$Stub$Proxy: android.os.Bundle getCellLocation()>
<android.net.wifi.p2p.WifiP2pGroupList: java.util.Collection getGroupList()>
<com.android.internal.telephony.CallManager: com.android.internal.telephony.Phone getRingingPhone()>
<android.telephony.TelephonyManager: java.lang.String getNetworkOperator()>
<android.net.LinkAddress: int getNetworkPrefixLength()>
<android.accessibilityservice.IAccessibilityServiceConnection$Stub$Proxy: float focusSearch(int,long,int,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,long)>
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.inputmethodservice.InputMethodService: android.view.inputmethod.InputBinding getCurrentInputBinding()>
<com.android.server.am.ActivityManagerService: android.content.res.Configuration getConfiguration()>
<com.android.internal.telephony.cdma.CDMAPhone: android.telephony.ServiceState getServiceState()>
<android.telephony.SmsCbMessage: java.lang.String getLanguageCode()>
<android.net.sip.SipProfile: java.lang.String getProtocol()>
<android.view.textservice.TextServicesManager: android.view.textservice.SpellCheckerSession newSpellCheckerSession(android.os.Bundle,java.util.Locale,android.view.textservice.SpellCheckerSession$SpellCheckerSessionListener,boolean)>
<com.android.server.wm.WindowManagerService: android.graphics.Bitmap screenshotApplications(android.os.IBinder,int,int,int)>
<android.telephony.CellSignalStrengthLte: int getDbm()>
<android.net.LocalSocketAddress: java.lang.String getName()>
<com.android.server.net.NetworkPolicyManagerService: int getUidPolicy(int)>
<com.android.internal.telephony.DataConnection$CallSetupException: int getRetryOverride()>
<android.net.ProxyProperties: int getPort()>
<android.telephony.SmsCbCmasInfo: int getCertainty()>
<com.android.internal.telephony.sip.SipConnectionBase: com.android.internal.telephony.Connection$DisconnectCause getDisconnectCause()>
<com.android.internal.telephony.cat.BerTlv: int getTag()>
<com.android.server.InputMethodManagerService$InputMethodSettings: java.util.List getEnabledInputMethodSubtypeListLocked(android.view.inputmethod.InputMethodInfo)>
<android.telephony.SmsMessage: int getIndexOnSim()>
<com.android.server.pm.UserManagerService: int[] getUserIdsLPr()>
<android.telephony.CellIdentityLte: android.telephony.CellIdentityLte copy()>
<android.net.http.AndroidHttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()>
<com.android.internal.telephony.gsm.SmsMessage: com.android.internal.telephony.gsm.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,java.lang.String,boolean,byte[])>
<android.net.LocalSocketImpl: java.io.FileDescriptor[] getAncillaryFileDescriptors()>
<com.android.internal.telephony.SmsMessageBase: java.lang.String getMessageBody()>
<android.telephony.SignalStrength: int getLteLevel()>
<com.android.server.WifiService: int getWifiEnabledState()>
<com.android.internal.telephony.Connection: java.lang.Object getUserData()>
<com.android.server.ThrottleService: java.lang.String getHelpUri()>
<com.android.internal.telephony.DriverCall: java.lang.String toString()>
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: java.util.List access$202(com.android.internal.telephony.cdma.RuimSmsInterfaceManager,java.util.List)>
<com.android.server.am.ActiveServices$ServiceMap: com.android.server.am.ServiceRecord getServiceByName(android.content.ComponentName,int)>
<android.support.v4.net.ConnectivityManagerCompat: android.net.NetworkInfo getNetworkInfoFromBroadcast(android.net.ConnectivityManager,android.content.Intent)>
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: void getSpellCheckerService(java.lang.String,java.lang.String,com.android.internal.textservice.ITextServicesSessionListener,com.android.internal.textservice.ISpellCheckerSessionListener,android.os.Bundle)>
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: java.util.ArrayList access$300(com.android.internal.telephony.gsm.SimSmsInterfaceManager,java.util.ArrayList)>
<android.net.Uri$HierarchicalUri: java.lang.String getScheme()>
<com.android.internal.telephony.cdma.RuimRecords: java.lang.String getSid()>
<com.android.server.input.InputManagerService: java.lang.String getCurrentKeyboardLayoutForInputDevice(java.lang.String)>
<android.net.sip.ISipSessionListener$Stub: android.os.IBinder asBinder()>
<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: java.util.Map getTxtRecord()>
<com.android.server.wm.WindowManagerService$4: float getInterpolation(float)>
<com.android.internal.telephony.IccCardProxy: com.android.internal.telephony.IccRecords getIccRecords()>
<com.android.internal.telephony.IccRecords: java.lang.String getIMSI()>
<android.net.rtp.AudioGroup: int getMode()>
<android.speech.tts.TextToSpeechService$SynthesisSpeechItem: java.lang.String getText()>
<android.telephony.ServiceState: int getSystemId()>
<com.android.server.DropBoxManagerService: android.os.DropBoxManager$Entry getNextEntry(java.lang.String,long)>
<com.android.server.TwilightService: com.android.server.TwilightService$TwilightState getCurrentState()>
<android.net.ThrottleManager: int getCliffLevel(java.lang.String,int)>
<android.telephony.CellIdentityLte: int getCi()>
<com.android.server.pm.PackageManagerService$HandlerParams: android.os.UserHandle getUser()>
<com.google.android.gsf.Gservices: java.lang.String getString(android.content.ContentResolver,java.lang.String)>
<com.android.providers.telephony.SmsProvider: java.lang.String getType(android.net.Uri)>
<com.android.server.ConnectivityService: android.net.NetworkInfo[] getAllNetworkInfo()>
<android.accessibilityservice.IAccessibilityServiceConnection$Stub$Proxy: android.accessibilityservice.AccessibilityServiceInfo getServiceInfo()>
<com.android.email.mail.store.ServiceStore: android.os.Bundle autoDiscover(android.content.Context,java.lang.String,java.lang.String)>
<android.net.sip.SipManager: java.lang.String getCallId(android.content.Intent)>
<android.content.pm.RegisteredServicesCache: android.content.pm.RegisteredServicesCache$ServiceInfo getServiceInfo(java.lang.Object,int)>
<android.telephony.TelephonyManager: java.lang.String getNetworkTypeName()>
<com.android.internal.telephony.ITelephony$Stub: android.os.IBinder asBinder()>
<com.android.server.am.ActivityManagerService: java.util.List getTasks(int,int,android.app.IThumbnailReceiver)>
<com.android.internal.telephony.SmsHeader: java.lang.String toString()>
<com.android.internal.telephony.cdma.CDMAPhone: boolean getMute()>
<com.google.android.apps.lightcycle.panorama.StitchingServiceManager: com.google.android.apps.lightcycle.panorama.StitchingServiceManager$StitchSession popNextSession()>
<android.net.sip.SimpleSessionDescription$Media: java.lang.String getAttribute(java.lang.String)>
<com.android.internal.telephony.test.LineReader: java.lang.String getNextLineCtrlZ()>
<android.telephony.NeighboringCellInfo: int getNetworkType()>
<android.media.AudioService: int getRemoteStreamVolume()>
<android.net.sip.SipManager: android.net.sip.SipSession createSipSession(android.net.sip.SipProfile,android.net.sip.SipSession$Listener)>
<android.net.Uri$HierarchicalUri: java.lang.String getEncodedSchemeSpecificPart()>
<com.android.emailcommon.service.IAccountService$Stub$Proxy: int getAccountColor(long)>
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.CallTracker getCallTracker()>
<android.net.Uri$AbstractHierarchicalUri: java.lang.String getUserInfo()>
<android.telephony.cdma.CdmaSmsCbProgramData: int getLanguage()>
<android.content.pm.RegisteredServicesCache: android.content.pm.RegisteredServicesCacheListener getListener()>
<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: java.lang.String getInstanceName()>
<android.provider.Telephony$Sms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],java.lang.String,java.lang.String)>
<com.android.server.InputMethodManagerService: java.util.List getInputMethodList()>
<com.android.email.service.EmailServiceUtils: com.android.emailcommon.service.IEmailService getService(android.content.Context,java.lang.String,com.android.emailcommon.service.IEmailServiceCallback)>
<android.net.WebAddress: java.lang.String getAuthInfo()>
<android.telephony.SignalStrength: int getGsmBitErrorRate()>
<android.media.IMediaScannerService$Stub: android.os.IBinder asBinder()>
<android.net.NetworkStats: long getElapsedRealtimeAge()>
<com.android.internal.os.IDropBoxManagerService$Stub$Proxy: android.os.DropBoxManager$Entry getNextEntry(java.lang.String,long)>
<android.accessibilityservice.IAccessibilityServiceConnection$Stub: android.os.IBinder asBinder()>
<android.telephony.SignalStrength: int getCdmaDbm()>
<com.android.server.NetworkManagementService: android.net.NetworkStats getNetworkStatsSummaryXt()>
<com.android.internal.telephony.IccUtils: byte[] hexStringToBytes(java.lang.String)>
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: int getOtasp()>
<android.net.wifi.p2p.WifiP2pService: android.os.Messenger getMessenger()>
<com.android.internal.telephony.cdma.RuimRecords$EfCsimCdmaHomeLoaded: java.lang.String getEfName()>
<android.net.Uri$StringUri: java.lang.String getEncodedAuthority()>
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.Call getBackgroundCall()>
<com.android.server.am.ActivityManagerService: java.lang.String getPackageForToken(android.os.IBinder)>
<com.android.server.accessibility.AccessibilityManagerService: boolean getActiveWindowBounds(android.graphics.Rect)>
<android.net.wifi.WifiConfiguration: int getAuthType()>
<android.view.textservice.SpellCheckerInfo: android.view.textservice.SpellCheckerSubtype getSubtypeAt(int)>
<android.inputmethodservice.ExtractEditLayout$ExtractActionMode: android.view.View getCustomView()>
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService: android.view.textservice.SuggestionsInfo getInDictEmptySuggestions()>
<com.android.internal.telephony.SMSDispatcher: int getNextConcatenatedRef()>
<android.speech.tts.TextToSpeechService$SpeechItem: int getStreamType()>
<android.telephony.SmsCbMessage: int getSerialNumber()>
<android.net.sip.SipProfile: boolean getAutoRegistration()>
<android.net.wifi.IWifiManager$Stub$Proxy: int getWifiApEnabledState()>
<android.net.http.Headers: long getTransferEncoding()>
<com.android.internal.telephony.sip.SipConnectionBase: com.android.internal.telephony.UUSInfo getUUSInfo()>
<com.android.server.am.ActiveServices$ServiceMap: com.android.server.am.ServiceRecord getServiceByName(android.content.ComponentName)>
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getLteOnCdmaMode()>
<android.net.sip.ISipSession$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: android.view.textservice.SpellCheckerInfo getCurrentSpellChecker(java.lang.String)>
<com.android.internal.textservice.ISpellCheckerSessionListener$Stub: android.os.IBinder asBinder()>
<android.net.wifi.WifiManager: java.util.List getConfiguredNetworks()>
<android.media.AudioService$SetModeDeathHandler: android.os.IBinder getBinder()>
<com.android.internal.telephony.ITelephonyRegistry$Stub: com.android.internal.telephony.ITelephonyRegistry asInterface(android.os.IBinder)>
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getDataState()>
<android.telephony.SmsMessage: android.telephony.SmsMessage$MessageClass getMessageClass()>
<android.net.Uri: java.util.Set getQueryParameterNames()>
<com.android.internal.telephony.cat.CommandParams: com.android.internal.telephony.cat.AppInterface$CommandType getCommandType()>
<android.telephony.CellSignalStrengthLte: int getTimingAdvance()>
<com.android.internal.telephony.OperatorInfo: java.lang.String toString()>
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: java.lang.String getActionIntentDataStallAlarm()>
<com.android.server.DevicePolicyManagerService: long getPasswordExpirationTimeout(android.content.ComponentName,int)>
<com.android.server.net.NetworkStatsService: java.lang.String[] getMobileIfaces()>
<android.telephony.CellInfoCdma: android.telephony.CellSignalStrengthCdma getCellSignalStrength()>
<com.android.internal.telephony.ServiceStateTracker: boolean onSignalStrengthResult(android.os.AsyncResult,boolean)>
<android.net.http.Connection: org.apache.http.protocol.HttpContext getHttpContext()>
<android.net.rtp.AudioCodec: android.net.rtp.AudioCodec[] getCodecs()>
<android.net.INetworkStatsSession$Stub$Proxy: android.net.NetworkStats getSummaryForNetwork(android.net.NetworkTemplate,long,long)>
<android.net.ProxyProperties: java.lang.String getHost()>
<android.telephony.CellIdentityCdma: int getLongitude()>
<android.telephony.gsm.SmsManager: android.telephony.gsm.SmsManager getDefault()>
<com.android.internal.telephony.cdma.CDMAPhone: java.util.List getPendingMmiCodes()>
<android.net.http.AndroidHttpClientConnection: int getSocketTimeout()>
<com.android.server.pm.PackageManagerService: int getPreferredActivities(java.util.List,java.util.List,java.lang.String)>
<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowList getDefaultWindowListLocked()>
<com.android.internal.telephony.gsm.GsmConnection: int getNumberPresentation()>
<android.telephony.SignalStrength: int getCdmaEcio()>
<com.android.server.InputMethodManagerService$ImeSubtypeListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<android.telephony.CellInfoLte: android.telephony.CellSignalStrengthLte getCellSignalStrength()>
<android.widget.RemoteViewsService$RemoteViewsFactoryAdapter: int getCount()>
<com.android.server.InputMethodManagerService$InputMethodFileManager: java.util.HashMap getAllAdditionalInputMethodSubtypes()>
<com.android.server.ConnectivityService: boolean getMobileDataEnabled()>
<com.android.exchange.EasSyncService: com.android.exchange.provider.GalResult searchGal(android.content.Context,long,java.lang.String,int)>
<android.net.ConnectivityManager: java.lang.String[] getTetheredIfaces()>
<android.media.AudioService: int getMasterMaxVolume()>
<android.telephony.SmsCbMessage: int getMessagePriority()>
<com.android.internal.telephony.cdma.RuimRecords: java.lang.String getCdmaMin()>
<android.net.Uri$AbstractHierarchicalUri: int getPort()>
<com.android.internal.telephony.CallManager: com.android.internal.telephony.Phone getFgPhone()>
<android.telephony.TelephonyManager: int getPhoneType(int)>
<android.net.wifi.p2p.nsd.WifiP2pServiceRequest: int getTransactionId()>
<android.media.IAudioService$Stub$Proxy: android.media.IRingtonePlayer getRingtonePlayer()>
<com.android.internal.telephony.gsm.GsmCall: java.util.List getConnections()>
<com.android.server.InputMethodManagerService: java.util.List getEnabledInputMethodSubtypeListLocked(android.view.inputmethod.InputMethodInfo,boolean)>
<android.telephony.CellIdentityCdma: android.telephony.CellIdentityCdma copy()>
<android.net.NetworkIdentity: int getSubType()>
<android.telephony.cdma.CdmaSmsCbProgramData: int getMaxMessages()>
<com.android.email.RefreshManager$Status: long getLastRefreshTime()>
<android.accessibilityservice.AccessibilityServiceInfo: java.lang.String getSettingsActivityName()>
<com.android.internal.telephony.GsmAlphabet: byte[] stringToGsm7BitPackedWithHeader(java.lang.String,byte[])>
<android.net.wifi.p2p.WifiP2pManager: android.net.wifi.p2p.WifiP2pManager$Channel initialize(android.content.Context,android.os.Looper,android.net.wifi.p2p.WifiP2pManager$ChannelListener)>
<android.telephony.TelephonyManager: int getDataActivity()>
<android.app.LoadedApk$WarningContextClassLoader: java.lang.Class loadClass(java.lang.String)>
<com.android.server.pm.PackageManagerService: java.util.List getPreferredPackages(int)>
<com.android.internal.telephony.SmsMessageBase$SubmitPduBase: java.lang.String toString()>
<android.net.Uri$OpaqueUri: java.lang.String getQuery()>
<com.android.internal.telephony.cdma.CdmaCall: java.util.List getConnections()>
<com.android.internal.telephony.cdma.RuimRecords$EfCsimImsimLoaded: java.lang.String getEfName()>
<com.android.internal.telephony.DataConnection: int getRilRadioTechnology(int)>
<android.net.sip.SipManager: android.net.sip.SipAudioCall makeAudioCall(java.lang.String,java.lang.String,android.net.sip.SipAudioCall$Listener,int)>
<android.view.textservice.SuggestionsInfo: int getSuggestionsAttributes()>
<android.net.INetworkStatsSession$Stub: android.os.IBinder asBinder()>
<android.telephony.SignalStrength: int getEvdoSnr()>
<com.android.internal.telephony.test.SimulatedGsmCallState: java.util.List getDriverCalls()>
<com.android.server.MountService$ObbAction: android.content.res.ObbInfo getObbInfo()>
<com.android.server.am.ActiveServices: java.util.List getRunningServiceInfoLocked(int,int)>
<android.net.http.IdleCache: android.net.http.Connection getConnection(org.apache.http.HttpHost)>
<android.telephony.SmsCbCmasInfo: int getResponseType()>
<android.webkit.SslCertLookupTable: android.webkit.SslCertLookupTable getInstance()>
<com.android.email.service.EasAuthenticatorService$EasAuthenticator: android.os.Bundle getAuthToken(android.accounts.AccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)>
<android.net.wifi.p2p.nsd.WifiP2pServiceRequest: java.lang.String getSupplicantQuery()>
<com.android.internal.telephony.DataConnection: boolean isRetryForever()>
<android.net.sip.SipProfile: java.lang.String getSipDomain()>
<android.net.wifi.p2p.WifiP2pGroup: java.util.Collection getClientList()>
<com.android.server.am.ActivityManagerService: android.content.pm.ApplicationInfo getAppInfoForUser(android.content.pm.ApplicationInfo,int)>
<com.android.server.am.BatteryStatsService: com.android.internal.app.IBatteryStats getService()>
<android.net.http.Headers: java.lang.String getEtag()>
<android.media.AudioService$VolumeStreamState: int getMaxIndex()>
<android.telephony.SmsCbMessage: java.lang.String getMessageBody()>
<com.android.internal.telephony.cat.ComprehensionTlv: int getTag()>
<android.net.sip.SipManager: android.net.sip.SipAudioCall takeAudioCall(android.content.Intent,android.net.sip.SipAudioCall$Listener)>
<android.net.INetworkManagementEventObserver$Stub: android.os.IBinder asBinder()>
<com.android.internal.telephony.IccCardProxy: boolean getIccRecordsLoaded()>
<android.os.INetworkManagementService$Stub$Proxy: android.net.NetworkStats getNetworkStatsDetail()>
<android.net.Uri: java.lang.String toSafeString()>
<com.android.server.pm.PackageManagerService: int getInstallLocation()>
<com.android.internal.telephony.cat.CatService: com.android.internal.telephony.cat.CatService getInstance(com.android.internal.telephony.CommandsInterface,android.content.Context,com.android.internal.telephony.UiccCard)>
<android.inputmethodservice.ExtractEditLayout$ExtractActionMode: java.lang.CharSequence getSubtitle()>
<com.android.internal.telephony.SmsMessageBase: long getTimestampMillis()>
<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int getRetrievalAllowingWindowLocked()>
<android.net.wifi.p2p.nsd.WifiP2pServiceResponse: int getStatus()>
<android.inputmethodservice.Keyboard: java.util.List getKeys()>
<com.android.server.pm.PackageManagerService$DumpState: com.android.server.pm.SharedUserSetting getSharedUser()>
<com.android.email.RefreshManager: com.android.email.RefreshManager$Status getMessageListStatusForTest(long)>
<android.accessibilityservice.UiTestAutomationBridge: android.view.accessibility.AccessibilityEvent getLastAccessibilityEvent()>
<com.android.emailcommon.utility.SSLUtils$TrackingKeyManager: java.security.PrivateKey getPrivateKey(java.lang.String)>
<android.media.IAudioService$Stub$Proxy: int getLastAudibleMasterVolume()>
<android.net.http.RequestQueue$ActivePool: android.net.http.Connection getConnection(android.content.Context,org.apache.http.HttpHost)>
<android.net.wifi.p2p.WifiP2pGroup: java.lang.String getPassphrase()>
<android.app.LoadedApk$ServiceDispatcher: java.lang.RuntimeException getUnbindLocation()>
<android.inputmethodservice.Keyboard: int getKeyHeight()>
<com.android.internal.telephony.cdma.EriManager: int getCdmaEriIconIndex(int,int)>
<com.android.internal.telephony.IccRecords: java.lang.String getOperatorNumeric()>
<com.android.server.BackupManagerService$PerformFullRestoreTask: com.android.server.BackupManagerService$RestorePolicy readAppManifest(com.android.server.BackupManagerService$FileMetadata,java.io.InputStream)>
<com.android.server.TextServicesManagerService: android.view.textservice.SpellCheckerInfo getCurrentSpellChecker(java.lang.String)>
<com.android.internal.telephony.gsm.GsmConnection: long getDurationMillis()>
<com.android.server.wm.WindowManagerService: int getAppOrientation(android.view.IApplicationToken)>
<android.net.sip.SipProfile: java.lang.String getUserName()>
<android.net.LocalSocketImpl: java.io.OutputStream getOutputStream()>
<com.android.server.ConnectivityService: java.lang.String[] getTetherableBluetoothRegexs()>
<com.android.internal.telephony.ATResponseParser: java.lang.String nextString()>
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getVoiceMessageCount()>
<android.net.wifi.WifiSsid: java.lang.String getHexString()>
<android.net.MobileDataStateTracker: android.net.LinkCapabilities getLinkCapabilities()>
<android.net.sip.SipProfile: javax.sip.address.Address getSipAddress()>
<android.service.dreams.IDreamManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.telephony.SignalStrength: int getDbm()>
<com.android.internal.telephony.AdnRecord: java.lang.String getAlphaTag()>
<com.android.server.TextServicesManagerService$TextServicesSettings: int getCurrentUserId()>
<com.android.internal.telephony.cdma.CDMALTEPhone: void getAvailableNetworks(android.os.Message)>
<android.net.WebAddress: int getPort()>
<android.net.WebAddress: java.lang.String getScheme()>
<com.android.email.widget.WidgetManager: com.android.email.widget.WidgetManager getInstance()>
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.util.List getNeighboringCellInfo()>
<com.android.server.BackupManagerService: java.lang.String getCurrentTransport()>
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getActivePhoneType()>
<android.media.AudioService$ScoClient: int getCount()>
<android.net.rtp.RtpStream: int getMode()>
<android.net.NetworkStatsHistory: android.net.NetworkStatsHistory$Entry getValues(long,long,long,android.net.NetworkStatsHistory$Entry)>
<com.android.server.MountService: int getEncryptionState()>
<android.telephony.SmsMessage: java.lang.String getServiceCenterAddress()>
<android.net.sip.ISipSession$Stub: android.os.IBinder asBinder()>
<android.net.NetworkQuotaInfo: long getEstimatedBytes()>
<com.android.internal.telephony.cat.IconLoader: com.android.internal.telephony.cat.IconLoader getInstance(android.os.Handler,com.android.internal.telephony.IccFileHandler)>
<android.net.IConnectivityManager$Stub$Proxy: android.os.ParcelFileDescriptor establishVpn(com.android.internal.net.VpnConfig)>
<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: int getDnsType()>
<com.android.internal.telephony.IccSmsInterfaceManager: java.util.ArrayList buildValidRawData(java.util.ArrayList)>
<com.android.server.ConnectivityService: android.net.LinkProperties getLinkProperties(int)>
<android.telephony.ServiceState: int getRadioTechnology()>
<android.net.wifi.WifiStateTracker: android.net.NetworkInfo getNetworkInfo()>
<com.android.server.pm.PackageManagerService: android.content.pm.PermissionGroupInfo getPermissionGroupInfo(java.lang.String,int)>
<com.android.internal.telephony.test.LineReader: java.lang.String getNextLine()>
<com.android.server.InputMethodManagerService$InputMethodSettings: java.lang.String getSelectedInputMethod()>
<com.android.internal.telephony.cdma.RuimRecords: byte[] access$100(com.android.internal.telephony.cdma.RuimRecords)>
<com.android.server.pm.PackageManagerService$InstallParams: android.content.pm.ManifestDigest getManifestDigest()>
<android.telephony.SmsMessage: java.lang.String getEmailFrom()>
<com.android.internal.telephony.UiccCardApplication: com.android.internal.telephony.IccCardStatus$PinState getPin1State()>
<com.android.server.sip.SipService: android.net.sip.ISipSession getPendingSession(java.lang.String)>
<com.android.internal.telephony.IccCardApplicationStatus: com.android.internal.telephony.IccCardApplicationStatus$PersoSubState PersoSubstateFromRILInt(int)>
<com.android.server.TwilightService$TwilightState: long getTomorrowSunrise()>
<com.android.internal.telephony.cat.ComprehensionTlv: int getValueIndex()>
<com.android.internal.telephony.gsm.VoiceMailConstants: java.lang.String getVoiceMailTag(java.lang.String)>
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: com.android.internal.telephony.Phone getPhone()>
<android.net.http.RequestQueue$SyncFeeder: android.net.http.Request getRequest(org.apache.http.HttpHost)>
<android.net.TrafficStats: long getTxPackets(java.lang.String)>
<com.android.internal.telephony.ISms$Stub: com.android.internal.telephony.ISms asInterface(android.os.IBinder)>
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.net.TrafficStats: long getTotalRxBytes()>
<android.webkit.SslClientCertLookupTable: android.webkit.SslClientCertLookupTable getInstance()>
<android.os.INetworkManagementService$Stub$Proxy: android.net.NetworkStats getNetworkStatsSummaryXt()>
<com.android.internal.telephony.Connection: java.lang.String toString()>
<com.android.server.pm.PackageManagerService: java.lang.String[] getPackagesForUid(int)>
<android.net.wifi.WifiManager: java.util.List getScanResults()>
<com.android.internal.telephony.gsm.GsmConnection: java.lang.String getAddress()>
<android.net.wifi.WifiInfo: int getLinkSpeed()>
<android.net.TrafficStats: long getRxPackets(java.lang.String)>
<com.android.server.ConnectivityService: com.android.internal.net.LegacyVpnInfo getLegacyVpnInfo()>
<com.android.internal.telephony.cdma.CdmaCallTracker: com.android.internal.telephony.cdma.CdmaConnection getConnectionByIndex(com.android.internal.telephony.cdma.CdmaCall,int)>
<android.net.IThrottleManager$Stub$Proxy: long getCliffThreshold(java.lang.String,int)>
<android.os.INetworkManagementService$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.net.wifi.p2p.WifiP2pWfdInfo: int getDeviceType()>
<com.android.internal.widget.LockSettingsService: java.lang.String getString(java.lang.String,java.lang.String,int)>
<com.android.internal.telephony.gsm.GsmConnection: long getHoldDurationMillis()>
<com.android.server.am.ActivityManagerService: int getCurrentUserIdLocked()>
<com.android.internal.telephony.AdnRecord: byte[] buildAdnString(int)>
<com.android.internal.telephony.gsm.GsmSmsCbMessage: android.telephony.SmsCbMessage createSmsCbMessage(android.telephony.SmsCbLocation,byte[][])>
<com.android.server.sip.SipService$SipSessionGroupExt: android.net.sip.SipProfile getLocalProfile()>
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: int getApnProfileID(java.lang.String)>
<android.telephony.SignalStrength: int getLevel()>
<android.net.Uri$StringUri: java.lang.String getScheme()>
<android.net.wifi.WifiStateMachine: java.lang.String getConfigFile()>
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: java.util.List access$200(com.android.internal.telephony.cdma.RuimSmsInterfaceManager)>
<com.android.internal.telephony.SmsMessageBase: java.lang.String getPseudoSubject()>
<android.net.ConnectivityManager: java.lang.String[] getTetheringErroredIfaces()>
<android.net.NetworkIdentity: int getType()>
<com.android.server.MountService: java.lang.String getSecureContainerPath(java.lang.String)>
<com.android.internal.telephony.cdma.CdmaConnection: long getDurationMillis()>
<com.android.internal.telephony.SmsMessageBase: int getIndexOnIcc()>
<com.android.server.am.ActivityManagerService: java.lang.String getCallingPackage(android.os.IBinder)>
<com.android.server.pm.PackageManagerService: java.util.List queryIntentActivityOptions(android.content.ComponentName,android.content.Intent[],java.lang.String[],android.content.Intent,java.lang.String,int,int)>
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: java.util.List getAllMessagesFromIccEf()>
<android.net.InterfaceConfiguration: java.lang.String getHardwareAddress()>
<com.android.internal.telephony.CallManager: com.android.internal.telephony.Call getFirstActiveBgCall()>
<android.telephony.SmsCbEtwsInfo: java.lang.String toString()>
<com.android.internal.telephony.CallForwardInfo: java.lang.String toString()>
<com.android.server.BackupManagerService$PerformFullRestoreTask$RestoreInstallObserver: int getResult()>
<com.android.internal.telephony.Call: com.android.internal.telephony.Connection getLatestConnection()>
<android.telephony.CellInfoGsm$1: android.telephony.CellInfoGsm createFromParcel(android.os.Parcel)>
<com.android.internal.telephony.gsm.GsmConnection: com.android.internal.telephony.Connection$DisconnectCause getDisconnectCause()>
<com.android.internal.telephony.sip.SipCallBase: java.util.List getConnections()>
<android.net.wifi.p2p.IWifiP2pManager$Stub$Proxy: android.os.Messenger getMessenger()>
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: android.view.textservice.SpellCheckerInfo[] getEnabledSpellCheckers()>
<android.net.Uri$HierarchicalUri: java.lang.String getSchemeSpecificPart()>
<com.android.server.WifiService$Multicaster: int getUid()>
<android.security.IKeyChainService$Stub: android.os.IBinder asBinder()>
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>
<android.telephony.ServiceState: int getCdmaDefaultRoamingIndicator()>
<android.app.LoadedApk$WarningContextClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getCdmaEriIconMode()>
<android.net.sip.SipAudioCall: android.net.sip.SimpleSessionDescription access$400(android.net.sip.SipAudioCall,java.lang.String)>
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: java.lang.String getActionIntentReconnectAlarm()>
<com.android.internal.telephony.Call: long getEarliestConnectTime()>
<android.net.http.Headers: java.lang.String getPragma()>
<com.android.internal.telephony.ims.IsimUiccRecords: int getDisplayRule(java.lang.String)>
<com.android.internal.telephony.ApnContext: int getWaitingApnsPermFailCount()>
<com.android.server.pm.PackageManagerService: java.lang.String getTempContainerId()>
<android.net.NetworkInfo: int getType()>
<com.android.internal.telephony.gsm.UsimServiceTable: java.lang.String getTag()>
<android.inputmethodservice.InputMethodService: java.lang.CharSequence getTextForImeAction(int)>
<android.app.LoadedApk$ServiceDispatcher: android.content.ServiceConnection getServiceConnection()>
<android.telephony.TelephonyManager: java.util.List getNeighboringCellInfo()>
<com.android.internal.telephony.IccSmsInterfaceManager: int getPremiumSmsPermission(java.lang.String)>
<android.net.IThrottleManager$Stub$Proxy: int getCliffLevel(java.lang.String,int)>
<android.net.nsd.INsdManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>
<android.net.ConnectivityManager: android.net.LinkProperties getActiveLinkProperties()>
<com.android.email.activity.RecentMailboxManager: java.util.ArrayList getMostRecent(long,boolean)>
<com.android.internal.telephony.AdnRecord: java.lang.String toString()>
<android.net.TrafficStats: long getTotalRxPackets()>
<com.android.internal.telephony.BaseCommands: int getLteOnCdmaMode()>
<com.android.internal.telephony.gsm.SmsMessage: int getDataCodingScheme()>
<android.media.AudioService: int getRingerMode()>
<com.android.server.InputMethodManagerService$InputMethodSettings: java.lang.String getDisabledSystemInputMethods()>
<com.android.server.wm.WindowManagerService: int getPendingAppTransition()>
<android.app.IServiceConnection$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.android.internal.telephony.cdma.RuimRecords: byte[] access$000(com.android.internal.telephony.cdma.RuimRecords)>
<android.net.IConnectivityManager$Stub$Proxy: android.net.LinkProperties getLinkProperties(int)>
<android.telephony.SignalStrength: java.lang.String toString()>
<android.provider.Telephony$Sms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[])>
<com.android.server.NetworkManagementService: android.net.NetworkStats getNetworkStatsDetail()>
<com.android.internal.telephony.uicc.UiccController: com.android.internal.telephony.uicc.UiccController getInstance()>
<android.media.AudioService$VolumeStreamState: java.util.concurrent.ConcurrentHashMap getAllIndexes(boolean)>
<android.telephony.CellSignalStrengthGsm: int getLevel()>
<com.android.internal.telephony.gsm.GsmMmiCode: java.lang.CharSequence getMessage()>
<android.net.http.Headers: java.lang.String getAcceptRanges()>
<com.android.server.AppWidgetServiceImpl: int[] getAppWidgetIdsForHost(int)>
<com.android.internal.telephony.CsimFileHandler: java.lang.String getEFPath(int)>
<android.net.wifi.WifiInfo: int getIpAddress()>
<android.net.IThrottleManager$Stub$Proxy: long getByteCount(java.lang.String,int,int,int)>
<com.android.internal.telephony.cdma.SmsMessage: int getMessageType()>
<android.media.AudioService: int getRemoteStreamMaxVolume()>
<com.android.internal.telephony.gsm.SmsBroadcastConfigInfo: int getFromCodeScheme()>
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkState[] getAllNetworkState()>
<com.android.internal.telephony.cdma.SmsMessage: com.android.internal.telephony.cdma.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,int,byte[],boolean)>
<android.view.textservice.SuggestionsInfo: int getCookie()>
<android.net.Uri$OpaqueUri: java.lang.String getHost()>
<android.app.Service: java.lang.String getClassName()>
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetheredIfacePairs()>
<android.net.wifi.WifiInfo: android.net.wifi.SupplicantState getSupplicantState()>
<android.net.ConnectivityManager: boolean getBackgroundDataSetting()>
<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket(java.net.InetAddress,int)>
<android.net.LocalSocket: int getSendBufferSize()>
<com.android.exchange.ExchangeService: int getStatusChangeCount(java.lang.String)>
<android.view.textservice.TextInfo: int getCookie()>
<com.android.server.InputMethodManagerService$InputMethodSettings: java.util.List getEnabledInputMethodAndSubtypeHashCodeListLocked()>
<android.net.sip.SimpleSessionDescription: java.lang.String getEncryptionMethod()>
<android.net.NetworkStatsHistory: android.net.NetworkStatsHistory$Entry getValues(long,long,android.net.NetworkStatsHistory$Entry)>
<com.android.internal.telephony.sip.SipConnectionBase: java.lang.String getRemainingPostDialString()>
<android.view.textservice.SentenceSuggestionsInfo: int getOffsetAt(int)>
<com.android.server.am.ActivityManagerService: long[] getProcessPss(int[])>
<android.inputmethodservice.AbstractInputMethodService: android.view.KeyEvent$DispatcherState getKeyDispatcherState()>
<com.android.internal.telephony.gsm.GSMPhone: int getPhoneType()>
<com.android.server.net.NetworkPolicyManagerService: boolean getRestrictBackground()>
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: android.net.LinkProperties getLinkProperties(java.lang.String)>
<com.android.server.DevicePolicyManagerService: long getPasswordExpiration(android.content.ComponentName,int)>
<com.android.internal.telephony.IccRecords: int getVoiceMessageCount()>
<com.android.internal.telephony.IccCardApplicationStatus: com.android.internal.telephony.IccCardApplicationStatus$AppState AppStateFromRILInt(int)>
<com.android.server.connectivity.Tethering: java.lang.String[] getTetherableIfaces()>
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: java.lang.String getPrlVersion()>
<android.net.rtp.RtpStream: int getRemotePort()>
<com.android.server.pm.PackageManagerService: java.io.File getDataPathForUser(int)>
<com.android.server.NotificationManagerService: long[] getLongArray(android.content.res.Resources,int,int,long[])>
<android.net.NetworkQuotaInfo: long getSoftLimitBytes()>
<com.android.email.service.AccountService$1: java.lang.String getDeviceId()>
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: java.lang.String getImsi()>
<android.accessibilityservice.IAccessibilityServiceClient$Stub: android.os.IBinder asBinder()>
<com.android.internal.telephony.CallManager: com.android.internal.telephony.PhoneConstants$State getState()>
<com.android.internal.telephony.UiccCardApplication: com.android.internal.telephony.IccRecords getIccRecords()>
<com.android.internal.telephony.RestrictedState: java.lang.String toString()>
<com.android.server.pm.PackageManagerService: java.util.List queryIntentServices(android.content.Intent,java.lang.String,int,int)>
<android.net.NetworkStats: long getElapsedRealtime()>
<com.android.server.DevicePolicyManagerService: int getPasswordMinimumSymbols(android.content.ComponentName,int)>
<android.net.wifi.p2p.nsd.WifiP2pServiceResponse: int getServiceType()>
<android.net.wifi.WifiManager: android.net.wifi.WifiManager$MulticastLock createMulticastLock(java.lang.String)>
<com.android.internal.telephony.gsm.GSMPhone: android.telephony.ServiceState getServiceState()>
<android.net.DhcpInfoInternal: java.util.Collection getRoutes()>
<android.telephony.TelephonyManager: java.lang.String getSimOperator()>
<com.android.email.service.MailService: java.util.ArrayList getPopImapAccountList(android.content.Context)>
<android.media.AudioService: int getLastAudibleMasterVolume()>
<com.android.email.EmailConnectivityManager: int getActiveNetworkType()>
<android.net.http.Connection: android.net.http.Connection getConnection(android.content.Context,org.apache.http.HttpHost,org.apache.http.HttpHost,android.net.http.RequestFeeder)>
<com.android.internal.telephony.gsm.GsmConnection: com.android.internal.telephony.UUSInfo getUUSInfo()>
<android.net.wifi.p2p.nsd.WifiP2pUpnpServiceResponse: java.util.List getUniqueServiceNames()>
<android.net.wifi.WifiSsid: byte[] getOctets()>
<com.android.internal.textservice.ISpellCheckerSession$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.widget.RemoteViewsAdapter$RemoteViewsAdapterServiceConnection: com.android.internal.widget.IRemoteViewsFactory getRemoteViewsFactory()>
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.Call getRingingCall()>
<android.net.http.AndroidHttpClient: long getMinGzipSize(android.content.ContentResolver)>
<android.net.Uri$StringUri: java.lang.String getEncodedSchemeSpecificPart()>
<android.net.Uri$PathPart: java.lang.String getEncoded()>
<com.android.email.mail.store.ImapStore: java.util.Collection getConnectionPoolForTest()>
<android.media.IAudioService$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.android.internal.telephony.IPhoneStateListener$Stub: com.android.internal.telephony.IPhoneStateListener asInterface(android.os.IBinder)>
<android.net.wifi.WifiNative: int getGroupCapability(java.lang.String)>
<com.android.internal.telephony.cat.IconLoader: android.graphics.Bitmap parseToRGB(byte[],int,boolean,byte[])>
<com.android.server.am.ActiveServices$ServiceMap: com.android.server.am.ServiceRecord getServiceByIntent(android.content.Intent$FilterComparison,int)>
<android.net.sip.SipAudioCall: int getState()>
<com.android.emailcommon.service.IAccountService$Stub$Proxy: android.os.Bundle getConfigurationData(java.lang.String)>
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: java.util.List access$202(com.android.internal.telephony.gsm.SimSmsInterfaceManager,java.util.List)>
<android.view.textservice.SpellCheckerSession: com.android.internal.textservice.ISpellCheckerSessionListener getSpellCheckerSessionListener()>
<android.net.BaseNetworkStateTracker: android.net.LinkCapabilities getLinkCapabilities()>
<com.android.server.wm.WindowManagerService: com.android.server.wm.MagnificationSpec getDisplayMagnificationSpecLocked(int)>
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: java.lang.String[] getActiveApnTypes()>
<android.net.ThrottleManager: long getByteCount(java.lang.String,int,int,int)>
<com.android.server.am.ActivityManagerService: int getPackageScreenCompatMode(java.lang.String)>
<com.android.server.pm.UserManagerService: com.android.server.pm.UserManagerService getInstance()>
<android.net.ConnectivityManager: int tether(java.lang.String)>
<com.android.email.RefreshManager: com.android.email.RefreshManager getInstance(android.content.Context)>
<com.android.email.EmailConnectivityManager: int getActiveNetworkType(android.net.ConnectivityManager)>
<com.android.internal.telephony.UiccCardApplication: com.android.internal.telephony.IccCardApplicationStatus$PersoSubState getPersoSubState()>
<com.android.internal.telephony.gsm.SmsMessage: com.android.internal.telephony.SmsConstants$MessageClass getMessageClass()>
<android.app.Service: android.app.Application getApplication()>
<com.android.emailcommon.utility.SSLUtils$TrackingKeyManager: java.security.cert.X509Certificate[] getCertificateChain(java.lang.String)>
<com.android.server.accessibility.AccessibilityManagerService: java.util.List getInstalledAccessibilityServiceList(int)>
<android.os.INetworkManagementService$Stub$Proxy: android.net.NetworkStats getNetworkStatsTethering(java.lang.String[])>
<android.view.textservice.SentenceSuggestionsInfo: int getLengthAt(int)>
<android.telephony.NeighboringCellInfo: int getLac()>
<android.net.Uri$PathSegments: java.lang.Object get(int)>
<com.android.server.NetworkManagementService: android.net.NetworkStats getNetworkStatsTethering(java.lang.String[])>
<android.net.sip.SimpleSessionDescription$Media: int getPortCount()>
<android.inputmethodservice.Keyboard: java.util.List getModifierKeys()>
<com.android.internal.telephony.cdma.CDMAPhone: int getCdmaEriIconIndex()>
<android.net.SntpClient: long getNtpTime()>
<android.inputmethodservice.Keyboard: int getVerticalGap()>
<android.net.NetworkStats: long getTotalBytes()>
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: int getCurrentDataConnectionState()>
<com.android.internal.telephony.DataConnectionTracker: com.android.internal.telephony.ApnSetting fetchDunApn()>
<android.net.sip.SipManager: boolean isRegistered(java.lang.String)>
<com.android.internal.telephony.gsm.GsmServiceStateTracker: int getCurrentGprsState()>
<android.net.Uri$StringUri: android.net.Uri$Builder buildUpon()>
<android.telephony.CellSignalStrengthGsm: int getAsuLevel()>
<com.android.server.WifiService: android.net.wifi.WifiConfiguration getWifiApConfiguration()>
<com.android.emailcommon.utility.SSLUtils: com.android.emailcommon.utility.SSLSocketFactory getHttpSocketFactory(boolean,javax.net.ssl.KeyManager)>
<android.net.NetworkStats: android.net.NetworkStats$Entry getTotal(android.net.NetworkStats$Entry,java.util.HashSet)>
<android.net.wifi.p2p.nsd.WifiP2pServiceResponse: int getTransactionId()>
<com.android.server.InputMethodManagerService: java.util.List getShortcutInputMethodsAndSubtypes()>
<android.telephony.SignalStrength: int getCdmaLevel()>
<android.net.Uri$OpaqueUri: java.lang.String getAuthority()>
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>
<android.net.sip.SipAudioCall: android.net.sip.SipProfile getLocalProfile()>
<android.net.sip.SimpleSessionDescription$Media: java.lang.String getRtpmap(int)>
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkInfo getActiveNetworkInfoForUid(int)>
<android.telephony.TelephonyManager: java.lang.String getCdmaEriText()>
<com.android.server.am.ActiveServices: android.app.PendingIntent getRunningServiceControlPanelLocked(android.content.ComponentName)>
<com.android.server.ConnectivityService: android.net.NetworkInfo getActiveNetworkInfo()>
<android.accessibilityservice.AccessibilityServiceInfo: boolean getCanRetrieveWindowContent()>
<android.telephony.CellIdentityGsm: int getMnc()>
<com.android.internal.telephony.CallManager: com.android.internal.telephony.Phone getBgPhone()>
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkInfo getNetworkInfo(int)>
<com.android.exchange.EasOutboxService$SendMailParser: int getStatus()>
<com.android.server.am.ActivityManagerService: android.content.ComponentName getCallingActivity(android.os.IBinder)>
<com.android.internal.telephony.cat.CatCmdMessage: com.android.internal.telephony.cat.ToneSettings getToneSettings()>
<android.telephony.SmsManager: java.util.ArrayList divideMessage(java.lang.String)>
<android.net.NetworkStatsHistory: int getIndexBefore(long)>
<com.android.internal.telephony.IccIoResult: com.android.internal.telephony.IccException getException()>
<android.net.NetworkInfo: java.lang.String getTypeName()>
<com.android.server.net.NetworkPolicyManagerService: int[] getUidsWithPolicy(int)>
<com.android.internal.telephony.cdma.CDMAPhone: int getPhoneType()>
<android.telephony.SmsMessage: int getStatus()>
<android.telephony.CellIdentityGsm: int getMcc()>
<com.android.server.BackupManagerService: android.content.Intent getConfigurationIntent(java.lang.String)>
<android.net.IConnectivityManager$Stub$Proxy: android.net.ProxyProperties getProxy()>
<android.net.nsd.NsdServiceInfo: android.net.nsd.DnsSdTxtRecord getTxtRecord()>
<com.android.server.pm.PackageManagerService: java.lang.String getApkName(java.lang.String)>
<android.inputmethodservice.IInputMethodSessionWrapper: android.view.inputmethod.InputMethodSession getInternalInputMethodSession()>
<android.telephony.SmsMessage: java.lang.String getEmailBody()>
<com.android.internal.telephony.gsm.SmsMessage$PduParser: byte[] getUserData()>
<android.app.LoadedApk$WarningContextClassLoader: java.net.URL getResource(java.lang.String)>
<com.android.server.WifiService: int getWifiApEnabledState()>
<android.net.sip.ISipService$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.inputmethodservice.ExtractEditLayout$ExtractActionMode: java.lang.CharSequence getTitle()>
<android.telephony.ServiceState: java.lang.String getOperatorAlphaShort()>
<com.android.server.ConnectivityService: android.net.NetworkInfo getActiveNetworkInfoForUid(int)>
<com.android.internal.telephony.Call: com.android.internal.telephony.Call$State getState()>
<android.net.wifi.IWifiManager$Stub$Proxy: int getFrequencyBand()>
<com.android.internal.telephony.gsm.GsmCall: com.android.internal.telephony.Phone getPhone()>
<com.android.internal.telephony.UiccCardApplication: com.android.internal.telephony.IccCardApplicationStatus$AppType getType()>
<android.net.wifi.NetworkUpdateResult: int getNetworkId()>
<com.android.internal.telephony.cdma.RuimRecords$EfPlLoaded: java.lang.String getEfName()>
<com.android.internal.telephony.CallerInfo: java.lang.String toString()>
<com.android.emailcommon.service.IAccountService$Stub$Proxy: java.lang.String getDeviceId()>
<android.media.AudioService$ScoClient: android.os.IBinder getBinder()>
<android.telephony.CellIdentityGsm: int getLac()>
<android.net.sip.SimpleSessionDescription$Media: java.lang.String getProtocol()>
<com.android.phone.BluetoothPhoneService$3: java.lang.String getNetworkOperator()>
<com.android.email.service.PopImapAuthenticatorService$PopImapAuthenticator: android.os.Bundle getAuthToken(android.accounts.AccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)>
<android.net.nsd.INsdManager$Stub: android.os.IBinder asBinder()>
<com.android.internal.telephony.IccUtils: android.graphics.Bitmap parseToBnW(byte[],int)>
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: java.lang.String getActionIntentReconnectAlarm()>
<android.net.wifi.WifiNative: java.lang.String getMacAddress()>
<android.telephony.NeighboringCellInfo: int getPsc()>
<android.telephony.SignalStrength: int getCdmaAsuLevel()>
<com.android.internal.telephony.cat.BerTlv: java.util.List getComprehensionTlvs()>
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.IccSmsInterfaceManager getIccSmsInterfaceManager()>
<android.net.wifi.WifiInfo: java.lang.String getBSSID()>
<com.android.internal.telephony.Call: com.android.internal.telephony.Connection getEarliestConnection()>
<android.net.http.SslCertificate: java.lang.String getValidNotAfter()>
<com.android.email.service.EasTestAuthenticatorService$EasAuthenticator: java.lang.String getAuthTokenLabel(java.lang.String)>
<com.android.server.InputMethodManagerService$InputMethodSettings: java.lang.String getLastSubtypeForInputMethodLocked(java.lang.String)>
<android.telephony.ServiceState: int getCssIndicator()>
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.util.List getAllCellInfo()>
<com.android.server.DevicePolicyManagerService: java.util.List getActiveAdmins(int)>
<com.android.internal.telephony.gsm.SmsCbHeader: int getGeographicalScope()>
<android.net.wifi.WifiStateTracker: android.net.LinkProperties getLinkProperties()>
<com.android.server.input.InputManagerService: int getKeyCodeState(int,int,int)>
<com.android.server.DevicePolicyManagerService: android.content.ComponentName getGlobalProxyAdmin(int)>
<android.net.sip.SipProfile: java.lang.String getUriString()>
<com.android.internal.telephony.cdma.CdmaCall: com.android.internal.telephony.Phone getPhone()>
<com.android.internal.telephony.IccRecords: java.lang.String getVoiceMailAlphaTag()>
<android.telephony.CellInfoLte: android.telephony.CellIdentityLte getCellIdentity()>
<android.net.wifi.WifiManager: java.lang.String getConfigFile()>
<android.net.wifi.WifiConfigStore: android.net.LinkProperties getLinkProperties(int)>
<com.android.internal.telephony.ApnContext: com.android.internal.telephony.DataConnection getDataConnection()>
<com.google.android.gsf.Gservices: java.lang.String getString(android.content.ContentResolver,java.lang.String,java.lang.String)>
<com.android.internal.telephony.test.LineReader: java.lang.String getNextLine(boolean)>
<android.server.search.SearchManagerService: android.app.SearchableInfo getSearchableInfo(android.content.ComponentName)>
<android.net.TrafficStats: long getMobileTxBytes()>
<android.net.wifi.WifiManager: android.net.DhcpInfo getDhcpInfo()>
<com.android.internal.telephony.CallManager: com.android.internal.telephony.Call getActiveFgCall()>
<android.telephony.TelephonyManager: java.util.List getAllCellInfo()>
<com.android.internal.telephony.cdma.CDMAPhone: boolean getMessageWaitingIndicator()>
<com.android.emailcommon.service.EmailServiceProxy: int getApiLevel()>
<android.telephony.SmsManager: java.util.ArrayList getAllMessagesFromIcc()>
<com.android.internal.telephony.ISms$Stub$Proxy: int getPremiumSmsPermission(java.lang.String)>
<android.net.LocalSocket: java.io.OutputStream getOutputStream()>
<android.telephony.TelephonyManager: java.lang.String getNetworkTypeName(int)>
<com.android.internal.telephony.cdma.CdmaSubscriptionSourceManager: com.android.internal.telephony.cdma.CdmaSubscriptionSourceManager getInstance(android.content.Context,com.android.internal.telephony.CommandsInterface,android.os.Handler,int,java.lang.Object)>
<com.android.server.ServiceWatcher: java.lang.String getBestPackageName()>
<com.android.email.RefreshManager: boolean isRefreshingAnyMessageListForTest()>
<com.android.internal.telephony.IccProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<com.android.server.am.ActivityManagerService: android.app.ActivityManager$TaskThumbnails getTaskThumbnails(int)>
<android.inputmethodservice.InputMethodService: int getBackDisposition()>
<com.android.internal.telephony.UiccCardApplication: com.android.internal.telephony.IccCardApplicationStatus$AppState getState()>
<com.android.server.DeviceStorageMonitorService: long getMemoryLowThreshold()>
<android.os.INetworkManagementService$Stub$Proxy: java.lang.String[] listTetheredInterfaces()>
<android.inputmethodservice.InputMethodService: android.view.LayoutInflater getLayoutInflater()>
<android.net.wifi.IWifiManager$Stub: android.os.IBinder asBinder()>
<android.net.sip.ISipService$Stub$Proxy: android.net.sip.SipProfile[] getListOfProfiles()>
<com.android.server.wm.WindowManagerService: android.view.WindowInfo getWindowInfo(android.os.IBinder)>
<com.android.internal.telephony.gsm.GsmCallTracker: boolean getMute()>
<android.telephony.SmsMessage: java.lang.String getDisplayMessageBody()>
<com.android.internal.statusbar.IStatusBarService$Stub: android.os.IBinder asBinder()>
<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName,int,int)>
<android.speech.IRecognitionService$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.android.internal.telephony.OperatorInfo: com.android.internal.telephony.OperatorInfo$State getState()>
<com.android.internal.telephony.IccCardApplicationStatus: java.lang.String toString()>
<com.android.internal.telephony.gsm.SmsMessage: com.android.internal.telephony.gsm.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,java.lang.String,boolean)>
<android.media.IAudioService$Stub$Proxy: int getRemoteStreamVolume()>
<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory getDefault(int,android.net.SSLSessionCache)>
<com.android.server.TwilightService$TwilightState: long getTodaySunset()>
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfoForUid(int)>
<com.android.server.BackupManagerService: java.util.List allAgentPackages()>
<android.net.LocalServerSocket: java.io.FileDescriptor getFileDescriptor()>
<com.android.server.pm.PackageManagerService$InstallArgs: android.os.UserHandle getUser()>
<android.net.Uri$Builder: android.net.Uri$Builder encodedQuery(java.lang.String)>
<android.net.DummyDataStateTracker: android.net.LinkProperties getLinkProperties()>
<android.net.wifi.WifiConfiguration: java.lang.String getPrintableSsid()>
<android.telephony.ServiceState: int getCdmaRoamingIndicator()>
<android.telephony.SmsCbCmasInfo: int getUrgency()>
<android.net.wifi.WifiManager: android.net.wifi.WifiManager$WifiLock createWifiLock(java.lang.String)>
<android.media.AudioService$SetModeDeathHandler: int getMode()>
<android.view.textservice.SpellCheckerInfo: android.content.ComponentName getComponent()>
<com.android.server.TextServicesManagerService$TextServicesSettings: java.lang.String getSelectedSpellChecker()>
<com.android.server.ClipboardService: android.content.ClipDescription getPrimaryClipDescription()>
<com.android.internal.telephony.CommandException: com.android.internal.telephony.CommandException$Error getCommandError()>
<com.android.server.am.ActivityManagerService: android.content.Intent createAppErrorIntentLocked(com.android.server.am.ProcessRecord,long,android.app.ApplicationErrorReport$CrashInfo)>
<com.android.server.am.ActivityManagerService: java.lang.String getPackageForIntentSender(android.content.IIntentSender)>
<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>
<android.net.NetworkPolicyManager: boolean getRestrictBackground()>
<android.net.NetworkStatsHistory: long getTotalBytes()>
<android.net.RouteInfo: java.net.InetAddress getGateway()>
<com.android.internal.telephony.cdma.RuimFileHandler: java.lang.String getEFPath(int)>
<com.android.internal.telephony.cdma.RuimRecords: java.lang.String getPrlVersion()>
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: java.util.List access$200(com.android.internal.telephony.gsm.SimSmsInterfaceManager)>
<com.android.email.mail.store.ImapStore: com.android.email.mail.store.ImapConnection getConnection()>
<com.android.server.net.NetworkPolicyManagerService: android.net.NetworkQuotaInfo getNetworkQuotaInfo(android.net.NetworkState)>
<com.android.server.wm.WindowManagerService: int getPreferredOptionsPanelGravity()>
<android.view.textservice.SpellCheckerSubtype: java.lang.String getLocale()>
<android.net.sip.SipManager: java.lang.String getOfferSessionDescription(android.content.Intent)>
<android.net.Uri$OpaqueUri: java.lang.String getPath()>
<android.net.ConnectivityManager: java.lang.String[] getTetherableIfaces()>
<android.speech.IRecognitionService$Stub: android.os.IBinder asBinder()>
<android.view.textservice.TextInfo: int getSequence()>
<com.android.internal.telephony.cat.IconId: com.android.internal.telephony.cat.ComprehensionTlvTag getTag()>
<android.net.sip.ISipService$Stub: android.os.IBinder asBinder()>
<android.net.NetworkStatsHistory: long getStart()>
<android.telephony.SmsMessage: android.telephony.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,java.lang.String,boolean)>
<com.android.server.UiModeManagerService: int getCurrentModeType()>
<android.net.wifi.p2p.WifiP2pGroupList: int getNetworkId(java.lang.String,java.lang.String)>
<android.net.http.SslCertificate$DName: java.lang.String getUName()>
<android.telephony.ServiceState: int getCdmaEriIconIndex()>
<android.media.IAudioService$Stub$Proxy: int getMode()>
<com.android.internal.telephony.gsm.SIMRecords: int getDisplayRule(java.lang.String)>
<android.net.Proxy: org.apache.http.HttpHost getPreferredHttpHost(android.content.Context,java.lang.String)>
<com.android.internal.telephony.cdma.CdmaConnection: long getConnectTime()>
<android.telephony.CellIdentityGsm: int getCid()>
<android.net.wifi.WifiManager: android.net.wifi.WifiManager$WifiLock createWifiLock(int,java.lang.String)>
<android.net.Uri$HierarchicalUri: java.lang.String getEncodedFragment()>
<android.net.IThrottleManager$Stub: android.os.IBinder asBinder()>
<android.net.INetworkStatsService$Stub: android.os.IBinder asBinder()>
<com.android.internal.telephony.gsm.SmsMessage$PduParser: long getSCTimestampMillis()>
<com.android.server.DevicePolicyManagerService: int getKeyguardDisabledFeatures(android.content.ComponentName,int)>
<android.telephony.PhoneNumberUtils: int getFormatTypeForLocale(java.util.Locale)>
<com.android.internal.telephony.DataConnectionTracker: android.net.LinkProperties getLinkProperties(java.lang.String)>
<android.telephony.CellInfoCdma$1: android.telephony.CellInfoCdma createFromParcel(android.os.Parcel)>
<android.telephony.SmsMessage: android.telephony.SmsMessage createFromEfRecord(int,byte[])>
<com.android.internal.telephony.gsm.GsmConnection: com.android.internal.telephony.Call getCall()>
<android.net.wifi.p2p.IWifiP2pManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.android.internal.telephony.cdma.CdmaMmiCode: java.lang.CharSequence getMessage()>
<android.net.EthernetDataTracker: android.net.NetworkInfo getNetworkInfo()>
<com.android.internal.telephony.OperatorInfo: java.lang.String getOperatorAlphaShort()>
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
<com.android.emailcommon.utility.SSLUtils$TrackingKeyManager: long getLastCertReqTime()>
<android.net.rtp.AudioStream: int getDtmfType()>
<com.android.internal.telephony.CallerInfo: com.android.internal.telephony.CallerInfo markAsVoiceMail()>
<android.net.wifi.p2p.nsd.WifiP2pServiceInfo: java.util.List getSupplicantQueryList()>
<android.net.sip.ISipSession$Stub$Proxy: android.net.sip.SipProfile getLocalProfile()>
<com.android.internal.telephony.cdma.RuimRecords: int getDisplayRule(java.lang.String)>
<android.telephony.SignalStrength: int getLteSignalStrenght()>
<com.android.server.ConnectivityService: java.lang.String[] getTetherableWifiRegexs()>
<com.android.internal.telephony.cdma.RuimRecords: java.lang.String getIMSI()>
<android.net.LinkProperties: java.util.Collection getDnses()>
<android.security.IKeyChainService$Stub$Proxy: byte[] getCertificate(java.lang.String)>
<com.android.server.InputMethodManagerService$InputMethodSettings: android.util.Pair getLastInputMethodAndSubtypeLocked()>
<com.android.internal.telephony.DataConnection: int getRetryTimer()>
<com.android.internal.telephony.CallManager: java.util.List getRingingCalls()>
<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String getNativeLibraryPath()>
<android.net.ThrottleManager: java.lang.String getHelpUri()>
<com.android.server.pm.PackageManagerService: java.lang.String[] getSystemSharedLibraryNames()>
<android.net.INetworkPolicyListener$Stub: android.os.IBinder asBinder()>
<android.net.INetworkStatsSession$Stub$Proxy: android.net.NetworkStatsHistory getHistoryForUid(android.net.NetworkTemplate,int,int,int,int)>
<com.android.internal.telephony.cdma.RuimRecords$EfCsimSpnLoaded: java.lang.String getEfName()>
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: com.android.internal.telephony.DctConstants$State getState(java.lang.String)>
<android.net.sip.SimpleSessionDescription$Media: java.lang.String getAddress()>
<com.android.server.MountService: java.lang.String[] getSecureContainerList()>
<com.android.internal.telephony.ApnContext: com.android.internal.telephony.DctConstants$State getState()>
<android.service.textservice.SpellCheckerService$Session: java.lang.String getLocale()>
<com.android.internal.textservice.ITextServicesSessionListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.speech.tts.TextToSpeechService$SpeechItem: float getFloatParam(java.lang.String,float)>
<android.telephony.SmsCbMessage: int getMessageFormat()>
<com.android.email.activity.MessageOrderManager: int getTotalMessageCount()>
<android.telephony.TelephonyManager: java.lang.String getSimCountryIso()>
<android.net.wifi.p2p.WifiP2pGroup: int getNetworkId()>
<com.android.email.Throttle: long getLastEventTimeForTest()>
<com.android.internal.telephony.ISms$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.android.server.net.NetworkStatsService: android.net.NetworkStats getDataLayerSnapshotForUid(int)>
<com.android.email.activity.MessageOrderManager: int getCurrentPosition()>
<android.telephony.ServiceState: boolean getRoaming()>
<com.android.server.am.ActivityManagerService: int getProcessLimit()>
<android.net.InterfaceConfiguration: java.lang.Iterable getFlags()>
<com.android.internal.telephony.cdma.RuimRecords: byte[] access$102(com.android.internal.telephony.cdma.RuimRecords,byte[])>
<com.android.internal.telephony.DataConnection: int getDataConnectionId()>
<com.android.phone.EmergencyCallbackModeService: long getEmergencyCallbackModeTimeout()>
<com.android.server.am.UsageStatsService: com.android.internal.app.IUsageStats getService()>
<android.server.search.SearchManagerService: java.util.List getGlobalSearchActivities()>
<android.telephony.TelephonyManager: int getNetworkClass(int)>
<com.android.internal.telephony.gsm.SmsMessage$PduParser: com.android.internal.telephony.SmsHeader getUserDataHeader()>
<android.telephony.TelephonyManager: int getCurrentPhoneType()>
<com.android.server.pm.PackageManagerService: int getComponentEnabledSetting(android.content.ComponentName,int)>
<android.net.http.Headers: java.lang.String getContentEncoding()>
<android.net.INetworkStatsSession$Stub$Proxy: android.net.NetworkStats getSummaryForAllUid(android.net.NetworkTemplate,long,long,boolean)>
<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$InstallArgs access$2300(com.android.server.pm.PackageManagerService,com.android.server.pm.PackageManagerService$InstallParams)>
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: java.lang.String getActiveApnString(java.lang.String)>
<android.view.textservice.TextServicesManager: android.view.textservice.SpellCheckerInfo[] getEnabledSpellCheckers()>
<com.android.server.InputMethodManagerService$InputMethodAndSubtypeListManager: java.util.List getSortedInputMethodAndSubtypeList()>
<android.net.rtp.AudioCodec: android.net.rtp.AudioCodec getCodec(int,java.lang.String,java.lang.String)>
<android.net.sip.SimpleSessionDescription: java.lang.String[] getAttributeNames()>
<android.net.sip.SipManager: boolean isOpened(java.lang.String)>
<android.telephony.CellSignalStrengthCdma: int getEvdoLevel()>
<android.telephony.SignalStrength: int getGsmSignalStrength()>
<com.android.server.am.ActivityManagerService: android.content.IIntentSender getIntentSender(int,java.lang.String,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int,android.os.Bundle,int)>
<com.android.server.ThrottleService: long getCliffThreshold(java.lang.String,int)>
<com.android.internal.telephony.cat.ItemsIconId: com.android.internal.telephony.cat.ComprehensionTlvTag getTag()>
<android.service.dreams.IDreamService$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.telephony.SignalStrength: int getLteRssnr()>
<com.android.exchange.ExchangeService: java.lang.String getEasAccountSelector()>
<com.android.server.am.ActivityManagerService: int getFrontActivityScreenCompatMode()>
<android.telephony.SmsCbMessage: int getGeographicalScope()>
<com.android.server.DevicePolicyManagerService: int getCurrentFailedPasswordAttempts(int)>
<android.net.NetworkStats: android.net.NetworkStats$Entry getTotalIncludingTags(android.net.NetworkStats$Entry)>
<android.telephony.SmsCbMessage: int getServiceCategory()>
<com.android.exchange.ExchangeService: com.android.exchange.ExchangeService$AccountList access$600(android.content.Context,com.android.exchange.ExchangeService$AccountList)>
<android.net.LocalSocketImpl: android.net.LocalSocketAddress getSockAddress()>
<android.net.sip.SipManager: android.net.sip.SipSession getSessionFor(android.content.Intent)>
<com.android.server.ServiceWatcher: int getBestVersion()>
<android.net.sip.SimpleSessionDescription: java.lang.String getEncryptionKey()>
<android.inputmethodservice.KeyboardView$SwipeTracker: float getYVelocity()>
<android.net.sip.SimpleSessionDescription$Media: int[] getRtpPayloadTypes()>
<android.net.sip.SipAudioCall: android.net.rtp.AudioStream getAudioStream()>
<com.android.internal.telephony.IPhoneStateListener$Stub: android.os.IBinder asBinder()>
<android.net.Uri$OpaqueUri: java.lang.String getLastPathSegment()>
<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String getCodePath()>
<android.net.sip.SimpleSessionDescription$Fields: java.lang.String getAttribute(java.lang.String)>
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.IccSmsInterfaceManager getIccSmsInterfaceManager()>
<android.telephony.NeighboringCellInfo: int getRssi()>
<com.android.server.DevicePolicyManagerService$ActiveAdmin: int getUid()>
<android.net.LinkProperties$1: android.net.LinkProperties createFromParcel(android.os.Parcel)>
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getDataActivity()>
<com.android.internal.telephony.UUSInfo: int getDcs()>
<com.android.internal.telephony.gsm.SIMRecords: java.lang.String getOperatorNumeric()>
<com.android.server.NetworkManagementService: android.net.NetworkStats getNetworkStatsUidDetail(int)>
<com.android.internal.telephony.cdma.CDMALTEPhone: com.android.internal.telephony.ims.IsimRecords getIsimRecords()>
<android.telephony.SmsCbMessage: android.telephony.SmsCbLocation getLocation()>
<com.android.internal.telephony.IccServiceTable: java.lang.String toString()>
<android.speech.tts.ITextToSpeechService$Stub$Proxy: int isLanguageAvailable(java.lang.String,java.lang.String,java.lang.String)>
<android.net.sip.SimpleSessionDescription$Media: java.lang.String getFmtp(int)>
<android.telephony.ServiceState: java.lang.String toString()>
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService: com.android.inputmethod.latin.spellcheck.DictionaryPool getDictionaryPool(java.lang.String)>
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getCdmaEriIconIndex()>
<com.android.internal.telephony.CallManager: int getServiceState()>
<com.android.internal.telephony.cdma.CdmaConnection: java.lang.String getRemainingPostDialString()>
<com.android.internal.telephony.CallManager: java.util.List getFgCallConnections()>
<com.android.internal.telephony.gsm.SmsMessage: int getProtocolIdentifier()>
<com.android.server.InputMethodManagerService: java.util.List getEnabledInputMethodSubtypeList(android.view.inputmethod.InputMethodInfo,boolean)>
<com.google.android.apps.lightcycle.panorama.StitchingServiceManager: com.google.android.apps.lightcycle.panorama.StitchingServiceManager getStitchingServiceManager(android.content.Context)>
<com.android.server.wm.WindowManagerService: int getLidState()>
<com.android.internal.app.IMediaContainerService$Stub$Proxy: android.content.res.ObbInfo getObbInfo(java.lang.String)>
<android.net.ConnectivityManager: android.net.ProxyProperties getProxy()>
<android.net.RouteInfo: android.net.LinkAddress getDestination()>
<android.net.sip.SipProfile: java.lang.String getAuthUserName()>
<android.net.NetworkInfo: java.lang.String getSubtypeName()>
<android.net.SSLCertificateSocketFactory: byte[] getNpnSelectedProtocol(java.net.Socket)>
<android.widget.RemoteViewsService$RemoteViewsFactoryAdapter: android.widget.RemoteViews getViewAt(int)>
<android.net.http.Connection: boolean getCanPersist()>
<com.android.server.pm.PackageManagerService: java.lang.String getNameForUid(int)>
<com.android.internal.telephony.gsm.SmsMessage$PduParser: com.android.internal.telephony.gsm.GsmSmsAddress getAddress()>
<android.net.rtp.RtpStream: int getLocalPort()>
<android.server.search.SearchManagerService: android.content.ComponentName getWebSearchActivity()>
<android.media.AudioService: int getMode()>
<android.server.search.SearchManagerService: android.content.ComponentName getGlobalSearchActivity()>
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: java.lang.String getMdnNumber()>
<com.android.internal.telephony.sip.SipConnectionBase: long getCreateTime()>
<android.net.wifi.WifiConfigStore: java.util.List getConfiguredNetworks()>
<com.android.server.net.NetworkStatsService$1: android.net.NetworkStats getSummaryForNetwork(android.net.NetworkTemplate,long,long)>
<android.speech.tts.TextToSpeechService: java.util.Set onGetFeaturesForLanguage(java.lang.String,java.lang.String,java.lang.String)>
<android.telephony.SmsMessage: long getTimestampMillis()>
<android.view.textservice.SpellCheckerInfo: android.content.pm.ServiceInfo getServiceInfo()>
<android.media.IAudioService$Stub$Proxy: int getLastAudibleStreamVolume(int)>
<android.net.nsd.NsdServiceInfo: java.lang.String getServiceName()>
<android.app.IServiceConnection$Stub: android.os.IBinder asBinder()>
<com.android.email.RefreshManager$RefreshStatusMap: com.android.email.RefreshManager$Status get(long)>
<android.net.wifi.p2p.nsd.WifiP2pUpnpServiceResponse: int getVersion()>
<com.android.providers.media.IMtpService$Stub: android.os.IBinder asBinder()>
<android.net.SntpClient: long getRoundTripTime()>
<com.android.internal.telephony.DataConnectionTracker$TxRxSum: java.lang.String toString()>
<android.inputmethodservice.InputMethodService: boolean getCurrentInputStarted()>
<android.telephony.SmsCbCmasInfo: int getSeverity()>
<com.android.server.pm.UserManagerService: int getUserSerialNumber(int)>
<com.android.email.service.EmailServiceUtils: com.android.emailcommon.service.IEmailService getExchangeService(android.content.Context,com.android.emailcommon.service.IEmailServiceCallback)>
<com.android.server.ConnectivityService: android.net.ProxyProperties getProxy()>
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkQuotaInfo getActiveNetworkQuotaInfo()>
<com.android.internal.telephony.SmsMessageBase: java.lang.String getDisplayOriginatingAddress()>
<com.android.server.net.NetworkStatsService$1: android.net.NetworkStatsHistory getHistoryForNetwork(android.net.NetworkTemplate,int)>
<com.android.internal.telephony.gsm.GsmMmiCode: int getCLIRMode()>
<android.net.LocalSocketImpl: java.io.FileDescriptor getFileDescriptor()>
<com.android.server.wm.WindowManagerService: float[] getAnimationScales()>
<android.net.wifi.WifiManager: android.os.Messenger getWifiStateMachineMessenger()>
<com.android.server.am.ActivityManagerService: java.util.List getRecentTasks(int,int,int)>
<com.android.server.accessibility.AccessibilityManagerService$Service: android.accessibilityservice.AccessibilityServiceInfo getServiceInfo()>
<com.android.internal.telephony.ApnContext: java.lang.String getApnType()>
<com.android.emailcommon.service.AccountServiceProxy: java.lang.String getDeviceId()>
<android.net.Uri$OpaqueUri: java.lang.String getEncodedPath()>
<android.net.http.SslCertificate: java.util.Date getValidNotAfterDate()>
<com.android.server.am.ActivityManagerService: android.content.IIntentSender getIntentSenderLocked(int,java.lang.String,int,int,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int,android.os.Bundle)>
<com.android.server.pm.UserManagerService: int[] getUserIds()>
<android.inputmethodservice.Keyboard: int getShiftKeyIndex()>
<android.net.Uri$OpaqueUri: int getPort()>
<com.android.server.UiModeManagerService: int getNightMode()>
<com.android.server.ThrottleService$DataRecorder: long getPeriodTx(int)>
<com.android.server.ThrottleService$DataRecorder: long getPeriodRx(int)>
<android.telephony.CellIdentityGsm: int getPsc()>
<com.android.server.ThrottleService: long getResetTime(java.lang.String)>
<android.net.INetworkPolicyManager$Stub$Proxy: android.net.NetworkQuotaInfo getNetworkQuotaInfo(android.net.NetworkState)>
<android.telephony.TelephonyManager: int getVoiceMessageCount()>
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: int[] getAdnRecordsSize(int)>
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: java.lang.String getCdmaMin()>
<android.net.nsd.NsdServiceInfo: java.lang.String getServiceType()>
<android.net.wifi.p2p.WifiP2pGroup: java.lang.String getNetworkName()>
<android.telephony.ServiceState: boolean getIsManualSelection()>
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.CallTracker getCallTracker()>
<com.android.internal.telephony.IccRecords: boolean getVoiceMessageWaiting()>
<android.net.http.RequestHandle: int getRedirectCount()>
<android.telephony.CellIdentityCdma: int getSystemId()>
<android.telephony.SmsMessage: int getTPLayerLengthForPDU(java.lang.String)>
<com.android.internal.telephony.cdma.SmsMessage: int getProtocolIdentifier()>
<android.telephony.SignalStrength: int getEvdoAsuLevel()>
<android.inputmethodservice.SoftInputWindow: int getSize()>
<com.google.android.picasastore.HttpUtils$MetricsTrackingConnectionManager$1: org.apache.http.conn.ManagedClientConnection getConnection(long,java.util.concurrent.TimeUnit)>
<com.android.internal.telephony.CallManager: com.android.internal.telephony.CallManager getInstance()>
<com.android.server.ConnectivityService: android.net.NetworkQuotaInfo getActiveNetworkQuotaInfo()>
<android.media.AudioService: int getMasterStreamType()>
<android.net.wifi.IWifiManager$Stub$Proxy: int getWifiEnabledState()>
<com.android.server.pm.PackageManagerService: android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName,int,int)>
<android.media.AudioService$VolumeStreamState: int getIndex(int,boolean)>
<com.android.internal.textservice.ITextServicesSessionListener$Stub: android.os.IBinder asBinder()>
<com.android.email.activity.MessageOrderManager: com.android.email.MessageListContext getListContext()>
<com.android.server.am.ActivityManagerService: android.content.Intent getIntentForIntentSender(android.content.IIntentSender)>
<android.net.Uri$OpaqueUri: java.lang.String getScheme()>
<com.android.internal.telephony.gsm.GSMPhone: boolean getMute()>
<android.net.EthernetDataTracker: java.lang.String getTcpBufferSizesPropName()>
<com.android.server.ConnectivityService: android.net.NetworkInfo getActiveNetworkInfoUnfiltered()>
<android.net.http.AndroidHttpClient: org.apache.http.params.HttpParams getParams()>
<android.net.wifi.WifiInfo: android.net.wifi.WifiSsid getWifiSsid()>
<android.net.http.Headers: java.lang.String getXPermittedCrossDomainPolicies()>
<android.net.DummyDataStateTracker: java.lang.String getTcpBufferSizesPropName()>
<android.net.TrafficStats: long getTxBytes(java.lang.String)>
<android.media.AudioService: android.media.IRingtonePlayer getRingtonePlayer()>
<android.net.wifi.IWifiManager$Stub$Proxy: android.os.Messenger getWifiStateMachineMessenger()>
<com.android.internal.app.IMediaContainerService$Stub$Proxy: android.content.pm.PackageInfoLite getMinimalPackageInfo(java.lang.String,int,long)>
<android.telephony.TelephonyManager: java.lang.String[] getIsimImpu()>
<android.telephony.SmsMessage$SubmitPdu: java.lang.String toString()>
<com.android.internal.telephony.ServiceStateTracker: android.telephony.SignalStrength getSignalStrength()>
<com.android.server.am.ActivityManagerService: android.content.pm.UserInfo getCurrentUser()>
<android.telephony.SmsMessage: java.lang.String getMessageBody()>
<android.net.http.Headers: java.util.ArrayList getSetCookie()>
<com.android.internal.telephony.IccCardStatus: java.lang.String toString()>
<android.telephony.TelephonyManager: int getSimState()>
<com.android.server.input.InputManagerService: java.lang.String[] getKeyboardLayoutsForInputDevice(java.lang.String)>
<com.android.internal.telephony.gsm.SmsMessage: int getStatus()>
<com.android.internal.telephony.gsm.SmsMessage: int getTPLayerLengthForPDU(java.lang.String)>
<android.telephony.CellSignalStrengthCdma: int getEvdoEcio()>
<com.android.server.BatteryService: int getPlugType()>
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.Call getForegroundCall()>
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.IccPhoneBookInterfaceManager getIccPhoneBookInterfaceManager()>
<com.android.server.am.ActivityManagerService: java.util.List getProcessesInErrorState()>
<android.media.IAudioService$Stub$Proxy: int getStreamVolume(int)>
<com.android.server.DevicePolicyManagerService: int getPasswordMinimumLowerCase(android.content.ComponentName,int)>
<com.android.internal.telephony.cat.IconLoader: android.graphics.Bitmap parseToBnW(byte[],int)>
<com.android.internal.telephony.cdma.CdmaCallTracker: boolean getMute()>
<android.net.sip.SimpleSessionDescription: android.net.sip.SimpleSessionDescription$Media[] getMedia()>
<com.android.email.Throttle: int getTimeoutForTest()>
<android.net.NetworkPolicyManager: long computeNextCycleBoundary(long,android.net.NetworkPolicy)>
<android.net.TrafficStats: long getMobileRxBytes()>
<com.android.server.NetworkManagementService: int getInterfaceRxThrottle(java.lang.String)>
<com.android.server.display.DisplayManagerService: int[] getDisplayIds()>
<com.android.internal.telephony.UiccCard: com.android.internal.telephony.IccCardStatus$CardState getCardState()>
<com.android.emailcommon.service.IEmailService$Stub: android.os.IBinder asBinder()>
<com.google.android.gsf.Gservices: java.util.Map getStringsByPrefix(android.content.ContentResolver,java.lang.String[])>
<android.net.Uri$StringUri: java.lang.String getAuthority()>
<android.net.Uri$OpaqueUri: java.lang.String getEncodedQuery()>
<com.android.server.WallpaperManagerService: java.lang.String getName()>
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState(java.lang.String)>
<com.android.server.wm.WindowManagerService: int getRotation()>
<android.net.TrafficStats: long getMobileTxPackets()>
<android.service.dreams.IDreamManager$Stub: android.os.IBinder asBinder()>
<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int,int)>
<com.android.internal.appwidget.IAppWidgetService$Stub: android.os.IBinder asBinder()>
<android.inputmethodservice.Keyboard: int getHorizontalGap()>
<android.net.http.SslCertificate$DName: java.lang.String getCName()>
<android.net.wifi.WifiInfo: int getNetworkId()>
<android.service.textservice.SpellCheckerService$InternalISpellCheckerSession: java.lang.String getLocale()>
<android.net.wifi.WifiNative: int getBand()>
<com.android.internal.telephony.gsm.SmsMessage$PduParser: java.lang.String getUserDataUCS2(int)>
<android.telephony.CellIdentityCdma: int getNetworkId()>
<android.net.wifi.IWifiManager$Stub$Proxy: android.net.DhcpInfo getDhcpInfo()>
<android.net.NetworkIdentity: java.lang.String getSubscriberId()>
<com.android.internal.telephony.cdma.SmsMessage: java.util.ArrayList getSmsCbProgramData()>
<com.android.internal.telephony.SmsMessageBase: java.lang.String getServiceCenterAddress()>
<com.android.internal.telephony.cdma.RuimRecords: byte[] access$002(com.android.internal.telephony.cdma.RuimRecords,byte[])>
<android.net.http.Request: android.net.http.EventHandler getEventHandler()>
<com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice getInstalledPackages(int,java.lang.String,int)>
<android.os.INetworkManagementService$Stub$Proxy: int getInterfaceRxThrottle(java.lang.String)>
<com.android.internal.telephony.cdma.SmsMessage: com.android.internal.telephony.SmsConstants$MessageClass getMessageClass()>
<com.android.internal.telephony.gsm.GsmServiceStateTracker: com.android.internal.telephony.Phone getPhone()>
<com.android.server.am.ActivityManagerService: java.lang.String getProviderMimeType(android.net.Uri,int)>
<com.android.server.WifiService: java.lang.String getConfigFile()>
<com.android.server.pm.PackageManagerService: java.util.List queryIntentReceivers(android.content.Intent,java.lang.String,int,int)>
<android.net.TrafficStats: long getRxBytes(java.lang.String)>
<com.android.server.dreams.DreamManagerService: android.content.ComponentName[] getDreamComponents()>
<com.android.internal.telephony.UiccCard: com.android.internal.telephony.IccCardStatus$PinState getUniversalPinState()>
<com.android.server.DevicePolicyManagerService: int getPasswordMinimumLetters(android.content.ComponentName,int)>
<com.android.internal.telephony.CallManager: com.android.internal.telephony.Phone getDefaultPhone()>
<com.android.internal.telephony.cdma.SmsMessage: int getNextMessageId()>
<com.android.exchange.AbstractSyncService: void <init>(android.content.Context,com.android.emailcommon.provider.Mailbox)>
<com.android.server.DevicePolicyManagerService$ActiveAdmin: android.os.UserHandle getUserHandle()>
<com.android.internal.telephony.WspTypeDecoder: java.util.HashMap getContentParameters()>
<android.inputmethodservice.IInputMethodWrapper: android.view.inputmethod.InputMethod getInternalInputMethod()>
<com.android.internal.telephony.UUSInfo: byte[] getUserData()>
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getCallState()>
<com.android.internal.telephony.cdma.SmsMessage: byte[] getIncomingSmsFingerprint()>
<com.android.internal.telephony.gsm.SimTlv: int getTag()>
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetherableIfaces()>
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: com.android.internal.telephony.DctConstants$State getOverallState()>
<com.android.server.pm.PackageManagerService: android.content.pm.PermissionInfo getPermissionInfo(java.lang.String,int)>
<com.android.email.service.AttachmentDownloadService: int getQueueSize()>
<android.net.sip.SimpleSessionDescription$Fields: java.lang.String getEncryptionMethod()>
<com.android.internal.telephony.cdma.RuimRecords$EfCsimLiLoaded: java.lang.String getEfName()>
<android.telephony.CellInfo: java.lang.String toString()>
<com.android.server.ConnectivityService: int getLastTetherError(java.lang.String)>
<com.android.internal.telephony.cdma.SmsMessage: int getTeleService()>
<android.net.sip.SipProfile: int getPort()>
<android.net.Uri$AbstractHierarchicalUri: java.lang.String getLastPathSegment()>
<android.telephony.TelephonyManager: int getCdmaEriIconMode()>
<android.net.INetworkStatsService$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.android.internal.telephony.SmsMessageBase: byte[] getUserData()>
<android.telephony.SmsMessage: int getStatusOnSim()>
<android.net.NetworkStats: int[] getUniqueUids()>
<com.android.internal.telephony.CallerInfo: com.android.internal.telephony.CallerInfo getCallerInfo(android.content.Context,java.lang.String)>
<com.android.internal.textservice.ISpellCheckerService$Stub: android.os.IBinder asBinder()>
<android.net.sip.SimpleSessionDescription$Fields: java.lang.String[] getAttributeNames()>
<com.android.server.am.ActivityManagerService: android.app.IActivityManager$ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,int,boolean)>
<com.android.internal.telephony.IccCardProxy: com.android.internal.telephony.IccCardConstants$State getState()>
<android.net.Uri$OpaqueUri: java.lang.String getFragment()>
<com.android.internal.telephony.cdma.sms.BearerData: java.lang.String getLanguage()>
<android.net.wifi.WifiConfigStore: android.net.ProxyProperties getProxyProperties(int)>
<com.android.internal.os.IDropBoxManagerService$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.net.NetworkInfo: android.net.NetworkInfo$DetailedState getDetailedState()>
<com.android.server.am.ActiveServices$ServiceMap: java.util.Collection getAllServices(int)>
<com.android.internal.telephony.gsm.SmsCbHeader: int getNumberOfPages()>
<com.android.exchange.EasSyncService: java.lang.String getTargetCollectionClassFromCursor(android.database.Cursor)>
<android.telephony.SmsMessage: android.telephony.SmsMessage createFromPdu(byte[],java.lang.String)>
<android.telephony.SmsCbCmasInfo: int getMessageClass()>
<android.telephony.SmsCbMessage: java.lang.String toString()>
<com.android.server.ConnectivityService: java.lang.String[] getTetheredIfaces()>
<com.android.server.pm.PackageManagerService: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int,int)>
<com.android.internal.telephony.uicc.UiccController: com.android.internal.telephony.IccFileHandler getIccFileHandler(int)>
<com.android.internal.telephony.IccCardApplicationStatus: com.android.internal.telephony.IccCardApplicationStatus$AppType AppTypeFromRILInt(int)>
<android.os.INetworkManagementService$Stub$Proxy: android.net.NetworkStats getNetworkStatsUidDetail(int)>
<com.android.internal.telephony.CallManager: java.util.List getAllPhones()>
<android.view.textservice.SuggestionsInfo: int getSequence()>
<com.android.internal.telephony.uicc.UiccController: com.android.internal.telephony.UiccCard getUiccCard()>
<com.android.email.activity.MessageOrderManager: android.os.Handler getHandlerForContentObserver()>
<com.android.server.wm.WindowManagerService: void getVisibleWindowsForDisplay(int,java.util.List)>
<com.android.server.DevicePolicyManagerService: int getPasswordMinimumUpperCase(android.content.ComponentName,int)>
<android.server.search.SearchManagerService: android.content.ComponentName getAssistIntent(int)>
<android.net.DnsPinger: java.util.List getDnsList()>
<android.net.http.CertificateChainValidator: android.net.http.CertificateChainValidator getInstance()>
<android.view.textservice.TextServicesManager: android.view.textservice.SpellCheckerInfo getCurrentSpellChecker()>
<com.android.internal.textservice.ISpellCheckerService$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.android.server.pm.PackageManagerService$FileInstallArgs: boolean doRename(int,java.lang.String,java.lang.String)>
<android.net.wifi.p2p.WifiP2pManager: android.os.Messenger getMessenger()>
<com.android.internal.telephony.gsm.SmsCbHeader: int getDataCodingScheme()>
<android.net.wifi.WifiStateMachine: android.os.Messenger getMessenger()>
<com.android.server.am.ActivityManagerService: int getUidForIntentSender(android.content.IIntentSender)>
<android.net.Uri$HierarchicalUri: java.lang.String getPath()>
<com.android.emailcommon.utility.SSLSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.lang.String getCdmaEriText()>
<com.android.internal.telephony.GsmAlphabet: byte[] stringToGsm7BitPackedWithHeader(java.lang.String,byte[],int,int)>
<android.telephony.CellSignalStrengthCdma: int getDbm()>
<android.net.BaseNetworkStateTracker: android.os.Handler getTargetHandler()>
<com.android.internal.telephony.gsm.GsmConnection: com.android.internal.telephony.Connection$PostDialState getPostDialState()>
<com.android.internal.telephony.IccIoResult: java.lang.String toString()>
<android.telephony.cdma.CdmaSmsCbProgramResults: int getLanguage()>
<android.view.textservice.SpellCheckerSession: android.view.textservice.SpellCheckerInfo getSpellChecker()>
<android.media.IAudioService$Stub$Proxy: boolean isStreamMute(int)>
<android.net.wifi.IWifiManager$Stub$Proxy: android.os.Messenger getWifiServiceMessenger()>
<com.android.internal.textservice.ISpellCheckerSession$Stub: android.os.IBinder asBinder()>
<android.app.LoadedApk$ServiceDispatcher: android.app.ServiceConnectionLeaked getLocation()>
<com.android.internal.telephony.gsm.SmsCbHeader: android.telephony.SmsCbCmasInfo getCmasInfo()>
<android.speech.tts.ITextToSpeechService$Stub$Proxy: java.lang.String[] getLanguage()>
<android.view.textservice.SentenceSuggestionsInfo: android.view.textservice.SuggestionsInfo getSuggestionsInfoAt(int)>
<com.android.emailcommon.service.EmailServiceProxy: android.os.Bundle validate(com.android.emailcommon.provider.HostAuth)>
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkInfo getActiveNetworkInfo()>
<android.net.NetworkPolicyManager: int[] getUidsWithPolicy(int)>
<android.net.TrafficStats: long getTotalTxPackets()>
<com.android.email.activity.RecentMailboxManager: com.android.email.activity.RecentMailboxManager getInstance(android.content.Context)>
<com.android.internal.telephony.OperatorInfo: java.lang.String getOperatorAlphaLong()>
<com.android.internal.telephony.cdma.CdmaConnection: long getDisconnectTime()>
<android.net.http.RequestQueue: android.net.http.Request getRequest(org.apache.http.HttpHost)>
<com.android.internal.telephony.ITelephony$Stub: com.android.internal.telephony.ITelephony asInterface(android.os.IBinder)>
<android.net.http.SslCertificate$DName: java.lang.String getOName()>
<com.android.server.NetworkManagementService: java.lang.String[] getDnsForwarders()>
<com.android.server.pm.PackageManagerService: java.lang.String getInstallerPackageName(java.lang.String)>
<android.telephony.CellInfo: int hashCode()>
<com.android.server.wm.WindowManagerService: int getPropertyInt(java.lang.String[],int,int,int,android.util.DisplayMetrics)>
<android.view.textservice.SuggestionsInfo: java.lang.String getSuggestionAt(int)>
<com.android.internal.telephony.gsm.GsmConnection: long getDisconnectTime()>
<android.net.NetworkStatsHistory: long getEnd()>
<com.android.email.activity.RecentMailboxManager: com.android.emailcommon.utility.EmailAsyncTask touch(long,long)>
<android.accessibilityservice.UiTestAutomationBridge: android.view.accessibility.AccessibilityNodeInfo getRootAccessibilityNodeInfoInActiveWindow()>
<com.android.internal.telephony.AdnRecord: java.lang.String[] getEmails()>
<com.android.server.am.ActiveServices$ServiceMap: com.android.server.am.ServiceRecord getServiceByIntent(android.content.Intent$FilterComparison)>
<android.service.textservice.SpellCheckerService$InternalISpellCheckerSession: android.os.Bundle getBundle()>
<android.service.wallpaper.WallpaperService$Engine: android.view.SurfaceHolder getSurfaceHolder()>
<android.view.textservice.SpellCheckerInfo: int getSubtypeCount()>
<com.android.internal.telephony.DataConnection$FailCause: int getErrorCode()>
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.IccPhoneBookInterfaceManager getIccPhoneBookInterfaceManager()>
<com.android.server.SerialService: java.lang.String[] getSerialPorts()>
<com.android.server.ConnectivityService: android.net.NetworkState[] getAllNetworkState()>
<android.speech.tts.TextToSpeechService$SpeechItem: float getPan()>
<android.view.textservice.SpellCheckerInfo: java.lang.String getPackageName()>
<android.net.rtp.AudioGroup: android.net.rtp.AudioStream[] getStreams()>
<android.service.wallpaper.WallpaperService$Engine: int getDesiredMinimumHeight()>
<android.net.NetworkStats: java.lang.String[] getUniqueIfaces()>
<com.android.server.pm.PackageManagerService: int[] getPackageGids(java.lang.String)>
<android.telephony.ServiceState: int getNetworkId()>
<android.net.NetworkStatsHistory: int getIndexAfter(long)>
<android.inputmethodservice.InputMethodService: android.view.inputmethod.InputConnection getCurrentInputConnection()>
<android.media.AudioService: int getVibrateSetting(int)>
<android.telephony.SignalStrength: int getEvdoEcio()>
<android.media.AudioService$VolumeStreamState: java.lang.String getSettingNameForDevice(boolean,int)>
<com.android.internal.telephony.cdma.CdmaConnection: java.lang.String getOrigDialString()>
<com.android.internal.telephony.GsmAlphabet$TextEncodingDetails: java.lang.String toString()>
<android.net.ThrottleManager: long getCliffThreshold(java.lang.String,int)>
<android.app.LoadedApk$WarningContextClassLoader: java.util.Enumeration getResources(java.lang.String)>
<com.android.internal.telephony.cdma.SmsMessage: com.android.internal.telephony.cdma.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,com.android.internal.telephony.cdma.sms.UserData,boolean)>
<com.google.android.gsf.Gservices: java.lang.Object getVersionToken(android.content.ContentResolver)>
<com.android.internal.telephony.ApnContext: java.lang.String getReason()>
<android.net.wifi.WifiInfo: android.net.NetworkInfo$DetailedState getDetailedStateOf(android.net.wifi.SupplicantState)>
<com.android.server.am.ActivityManagerService: int getLaunchedFromUid(android.os.IBinder)>
<com.android.internal.telephony.UUSInfo: int getType()>
<android.widget.RemoteViewsService$RemoteViewsFactoryAdapter: int getViewTypeCount()>
<android.net.http.AndroidHttpClientConnection: org.apache.http.HttpEntity receiveResponseEntity(android.net.http.Headers)>
<com.android.internal.telephony.CallManager: java.lang.String toString()>
<com.android.server.am.ActivityManagerService: java.util.List getServices(int,int)>
<android.net.Uri$AbstractHierarchicalUri: java.lang.String getEncodedUserInfo()>
<com.android.server.DevicePolicyManagerService: int getPasswordMinimumLength(android.content.ComponentName,int)>
<android.os.INetworkManagementService$Stub$Proxy: java.lang.String[] listTtys()>
<android.os.ServiceManagerProxy: android.os.IBinder getService(java.lang.String)>
<com.android.internal.telephony.ims.IsimUiccRecords$EfIsimImpiLoaded: java.lang.String getEfName()>
<com.android.server.ThrottleService: int getThrottle(java.lang.String)>
<android.net.INetworkStatsSession$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.android.server.CountryDetectorService$Receiver: android.location.ICountryListener getListener()>
<android.net.wifi.WifiConfigStore: android.net.wifi.NetworkUpdateResult saveNetwork(android.net.wifi.WifiConfiguration)>
<android.service.dreams.IDreamManager$Stub$Proxy: android.content.ComponentName[] getDreamComponents()>
<android.net.Uri$OpaqueUri: java.lang.String getSchemeSpecificPart()>
<android.widget.RemoteViewsService: java.lang.Object access$000()>
<com.android.server.ConnectivityService: java.lang.String[] getTetheringErroredIfaces()>
<android.net.http.RequestQueue$ActivePool: android.net.http.ConnectionThread getThread(org.apache.http.HttpHost)>
<android.net.LinkProperties: java.lang.String getInterfaceName()>
<android.net.Uri$HierarchicalUri: java.lang.String getEncodedQuery()>
<com.android.emailcommon.service.IEmailServiceCallback$Stub: android.os.IBinder asBinder()>
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: java.lang.String getActionIntentDataStallAlarm()>
<com.android.server.pm.PackageManagerService: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>
<android.net.NetworkStats: android.net.NetworkStats$Entry getValues(int,android.net.NetworkStats$Entry)>
<android.net.NetworkStatsHistory: long getBucketDuration()>
<com.android.internal.telephony.CallManager: com.android.internal.telephony.Connection getFgCallLatestConnection()>
<com.android.internal.telephony.CallerInfo: com.android.internal.telephony.CallerInfo markAsEmergency(android.content.Context)>
<android.net.ThrottleManager: long getPeriodStartTime(java.lang.String)>
<android.net.LocalSocket: android.net.LocalSocketAddress getLocalSocketAddress()>
<android.net.LocalSocketImpl: android.net.Credentials getPeerCredentials()>
<android.telephony.SmsMessage: int getStatusOnIcc()>
<android.os.INetworkManagementService$Stub$Proxy: int getInterfaceTxThrottle(java.lang.String)>
<com.android.exchange.ExchangeService: com.android.emailcommon.utility.EmailClientConnectionManager getClientConnectionManager(boolean,int)>
<android.widget.RemoteViewsService: java.util.HashMap access$100()>
<com.android.server.display.DisplayManagerService: android.hardware.display.WifiDisplayStatus getWifiDisplayStatus()>
<com.android.internal.telephony.test.SimulatedGsmCallState: java.util.List getClccLines()>
<android.net.rtp.AudioStream: android.net.rtp.AudioGroup getGroup()>
<com.android.internal.telephony.GsmAlphabet: byte[] stringToGsm8BitPacked(java.lang.String)>
<android.net.Proxy: java.net.Proxy getProxy(android.content.Context,java.lang.String)>
<com.android.server.MountService: java.lang.String getSecureContainerFilesystemPath(java.lang.String)>
<com.android.internal.telephony.CallManager: java.util.List getForegroundCalls()>
<android.net.Uri$HierarchicalUri: java.lang.String getEncodedPath()>
<android.os.INetworkManagementService$Stub: android.os.IBinder asBinder()>
<com.android.internal.telephony.gsm.SIMRecords: java.lang.String getIMSI()>
<com.android.internal.telephony.cat.RilMessageDecoder: com.android.internal.telephony.cat.RilMessageDecoder getInstance(android.os.Handler,com.android.internal.telephony.IccFileHandler)>
<android.content.pm.RegisteredServicesCache: java.util.Collection getAllServices(int)>
<android.telephony.TelephonyManager: int getDataState()>
<com.android.internal.telephony.DataConnectionTracker: java.lang.String[] getActiveApnTypes()>
<com.android.server.DevicePolicyManagerService: int getPasswordQuality(android.content.ComponentName,int)>
<android.net.NetworkInfo: java.lang.String getExtraInfo()>
<android.net.http.Connection: org.apache.http.HttpHost getHost()>
<com.android.internal.telephony.gsm.SIMRecords: java.lang.String getVoiceMailAlphaTag()>
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: android.net.LinkCapabilities getLinkCapabilities(java.lang.String)>
<com.android.internal.telephony.DataConnectionTracker: java.lang.String getActiveApnString(java.lang.String)>
<com.android.server.sip.SipService: android.net.sip.SipProfile[] getListOfProfiles()>
<com.android.internal.telephony.cdma.CdmaMmiCode: com.android.internal.telephony.MmiCode$State getState()>
<android.net.wifi.p2p.nsd.WifiP2pServiceResponse: android.net.wifi.p2p.WifiP2pDevice getSrcDevice()>
<android.telephony.SignalStrength: int getLteRsrq()>
<android.telephony.SignalStrength: int getLteRsrp()>
<android.telephony.NeighboringCellInfo: java.lang.String toString()>
<android.net.IThrottleManager$Stub$Proxy: long getResetTime(java.lang.String)>
<com.android.internal.telephony.cdma.EriManager: int getCdmaEriIconMode(int,int)>
<android.net.wifi.IWifiManager$Stub$Proxy: java.util.List getScanResults()>
<android.telephony.cdma.CdmaSmsCbProgramData: int getAlertOption()>
<com.android.server.InputMethodManagerService$InputMethodSettings: java.util.List getEnabledInputMethodListLocked()>
<android.net.http.Headers: java.lang.String getLastModified()>
<com.android.server.ThrottleService$DataRecorder: int getPeriodCount()>
<android.net.http.SslError: android.net.http.SslCertificate getCertificate()>
<com.android.internal.telephony.gsm.SIMRecords: java.lang.String getMsisdnAlphaTag()>
<android.net.ConnectivityManager: java.lang.String[] getTetherableWifiRegexs()>
<com.android.internal.telephony.sip.SipConnectionBase: com.android.internal.telephony.Connection$PostDialState getPostDialState()>
<android.net.wifi.p2p.WifiP2pDeviceList: java.util.Collection getDeviceList()>
<android.telephony.SmsCbEtwsInfo: long getPrimaryNotificationTimestamp()>
<android.media.IMediaScannerService$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.media.AudioService: int getStreamMaxVolume(int)>
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetheringErroredIfaces()>
<com.android.server.DevicePolicyManagerService: void getRemoveWarning(android.content.ComponentName,android.os.RemoteCallback,int)>
<android.net.wifi.IWifiManager$Stub$Proxy: android.net.wifi.WifiConfiguration getWifiApConfiguration()>
<android.net.LinkAddress: java.net.InetAddress getAddress()>
<android.net.nsd.DnsSdTxtRecord: byte[] access$000(android.net.nsd.DnsSdTxtRecord)>
<com.android.internal.telephony.IccCardProxy: com.android.internal.telephony.IccFileHandler getIccFileHandler()>
<com.android.internal.telephony.cat.CatCmdMessage: com.android.internal.telephony.cat.Menu getMenu()>
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetherableUsbRegexs()>
<android.telephony.SignalStrength: int getEvdoLevel()>
<android.net.ConnectivityManager: android.net.LinkProperties getLinkProperties(int)>
<android.net.SSLCertificateSocketFactory: java.lang.String[] getDefaultCipherSuites()>
<android.net.Uri$OpaqueUri: java.lang.String getEncodedUserInfo()>
<android.inputmethodservice.Keyboard: int getDimensionOrFraction(android.content.res.TypedArray,int,int,int)>
<com.android.internal.telephony.DataConnectionTracker: int disableApnType(java.lang.String)>
<com.android.server.WifiService: java.util.List getConfiguredNetworks()>
<android.os.INetworkManagementService$Stub$Proxy: android.net.RouteInfo[] getRoutes(java.lang.String)>
<com.android.email.activity.MessageOrderManager: android.database.Cursor access$500(com.android.email.activity.MessageOrderManager)>
<android.content.IContentService$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.android.internal.telephony.Call: long getEarliestCreateTime()>
<android.net.LinkProperties: java.util.Collection getLinkAddresses()>
<android.net.sip.SipAudioCall: android.net.sip.SipSession getSipSession()>
<android.net.wifi.p2p.WifiP2pWfdInfo: int getMaxThroughput()>
<com.android.internal.telephony.gsm.GsmConnection: int getGSMIndex()>
<android.net.LocalSocket: int getReceiveBufferSize()>
<android.telephony.PhoneNumberUtils: byte[] networkPortionToCalledPartyBCD(java.lang.String)>
<android.telephony.CellInfo: int getTimeStampType()>
<com.android.server.MountService: int[] getStorageUsers(java.lang.String)>
<com.android.internal.telephony.cat.CatCmdMessage: com.android.internal.telephony.cat.CatCmdMessage$CallSettings getCallSettings()>
<android.net.wifi.WifiInfo: boolean getHiddenSSID()>
<android.telephony.TelephonyManager: java.lang.String getSimOperatorName()>
<com.android.internal.telephony.cdma.EriManager: java.lang.String getCdmaEriText(int,int)>
<com.android.internal.app.IMediaContainerService$Stub$Proxy: long[] getFileSystemStats(java.lang.String)>
<com.android.internal.telephony.IccRecords: boolean getRecordsLoaded()>
<android.net.http.Headers: java.lang.String getLocation()>
<com.android.internal.telephony.gsm.SmsBroadcastConfigInfo: int getToCodeScheme()>
<com.android.internal.telephony.gsm.GsmSmsAddress: java.lang.String getAddressString()>
<android.net.NetworkPolicyManager: long computeLastCycleBoundary(long,android.net.NetworkPolicy)>
<com.android.internal.telephony.sip.SipConnectionBase: long getDisconnectTime()>
<android.net.sip.SimpleSessionDescription: java.lang.String getAddress()>
<com.android.server.wm.WindowManagerService: int getOrientationFromAppTokensLocked()>
<android.net.SSLCertificateSocketFactory: javax.net.SocketFactory getDefault(int)>
<android.net.ConnectivityManager: android.net.NetworkQuotaInfo getActiveNetworkQuotaInfo()>
<com.android.internal.telephony.ApnContext: com.android.internal.telephony.ApnSetting getApnSetting()>
<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowList getWindowListLocked(android.view.Display)>
<com.android.server.DevicePolicyManagerService: int getMaximumFailedPasswordsForWipe(android.content.ComponentName,int)>
<android.net.NetworkPolicyManager: android.net.NetworkPolicy[] getNetworkPolicies()>
<android.speech.tts.TextToSpeechService$SpeechItem: int getIntParam(java.lang.String,int)>
<android.net.SSLCertificateSocketFactory: byte[] toNpnProtocolsList(byte[][])>
<com.android.internal.os.IDropBoxManagerService$Stub: android.os.IBinder asBinder()>
<com.android.internal.telephony.cat.CatResponseMessage: com.android.internal.telephony.cat.CommandDetails getCmdDetails()>
<android.net.http.AndroidHttpClientConnection: int getLocalPort()>
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: com.android.internal.telephony.DctConstants$State getState(java.lang.String)>
<android.net.http.SslCertificate: android.net.http.SslCertificate$DName getIssuedBy()>
<com.android.internal.telephony.DataConnectionTracker: int getRecoveryAction()>
<com.android.emailcommon.utility.SSLUtils: android.net.SSLCertificateSocketFactory getSSLSocketFactory(boolean,int)>
<com.android.internal.telephony.cat.CatCmdMessage: com.android.internal.telephony.cat.AppInterface$CommandType getCmdType()>
<com.android.internal.telephony.cdma.CDMALTEPhone: com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState(java.lang.String)>
<com.android.internal.telephony.UsimFileHandler: java.lang.String getEFPath(int)>
<android.media.IAudioService$Stub$Proxy: int getMasterMaxVolume()>
<com.android.server.pm.UserManagerService: java.util.List getUsers(boolean)>
<android.accessibilityservice.IAccessibilityServiceConnection$Stub$Proxy: float findFocus(int,long,int,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,long)>
<com.android.internal.telephony.cat.CatCmdMessage: com.android.internal.telephony.cat.CatCmdMessage$BrowserSettings getBrowserSettings()>
<android.media.IAudioService$Stub: android.os.IBinder asBinder()>
<com.android.phone.EmergencyCallbackModeService$LocalBinder: com.android.phone.EmergencyCallbackModeService getService()>
<android.app.LoadedApk$ServiceDispatcher: android.app.IServiceConnection getIServiceConnection()>
<android.net.http.Request: java.lang.String getUri()>
<android.net.http.Headers: java.lang.String getProxyAuthenticate()>
<com.android.server.am.ActivityManagerService: com.android.server.am.ProcessRecord getRecordForAppLocked(android.app.IApplicationThread)>
<com.android.internal.telephony.cat.DeviceIdentities: com.android.internal.telephony.cat.ComprehensionTlvTag getTag()>
<com.android.server.connectivity.Tethering: java.lang.String[] getErroredIfaces()>
<com.android.server.pm.UserManagerService: int getUserHandle(int)>
<com.android.internal.telephony.UiccCard: com.android.internal.telephony.UiccCardApplication getApplicationIndex(int)>
<com.android.server.DevicePolicyManagerService: int getPasswordHistoryLength(android.content.ComponentName,int)>
<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$InstallArgs access$3000(com.android.server.pm.PackageManagerService,android.net.Uri,int,java.lang.String,java.lang.String)>
<com.android.internal.telephony.gsm.SmsMessage: com.android.internal.telephony.gsm.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,java.lang.String,boolean,byte[],int,int,int)>
<com.android.internal.telephony.ims.IsimUiccRecords$EfIsimDomainLoaded: java.lang.String getEfName()>
<com.android.server.am.ActivityManagerService: android.graphics.Bitmap getTaskTopThumbnail(int)>
<android.net.wifi.p2p.WifiP2pDeviceList: android.net.wifi.p2p.WifiP2pDevice get(java.lang.String)>
<android.net.NetworkQuotaInfo: long getHardLimitBytes()>
<com.android.internal.telephony.gsm.GsmConnection: long getConnectTime()>
<android.telephony.CellInfoLte$1: android.telephony.CellInfoLte createFromParcel(android.os.Parcel)>
<android.telephony.ServiceState: int getNetworkType()>
<com.android.internal.telephony.WapPushOverSms$WapPushConnection: com.android.internal.telephony.IWapPushManager getWapPushManager()>
<com.android.server.pm.PackageManagerService: android.content.pm.FeatureInfo[] getSystemAvailableFeatures()>
<android.net.rtp.RtpStream: java.net.InetAddress getLocalAddress()>
<android.telephony.cdma.CdmaSmsCbProgramData: int getCategory()>
<android.net.Uri: android.net.Uri normalizeScheme()>
<android.view.textservice.SpellCheckerSubtype: java.lang.CharSequence getDisplayName(android.content.Context,java.lang.String,android.content.pm.ApplicationInfo)>
<com.android.server.NsdService: android.os.Messenger getMessenger()>
<com.android.server.InputMethodManagerService$InputMethodSettings: int getSelectedInputMethodSubtypeHashCode()>
<com.android.internal.telephony.cdma.CdmaConnection: com.android.internal.telephony.Connection$DisconnectCause getDisconnectCause()>
<android.net.sip.SipManager: android.net.sip.SipAudioCall makeAudioCall(android.net.sip.SipProfile,android.net.sip.SipProfile,android.net.sip.SipAudioCall$Listener,int)>
<android.net.wifi.p2p.WifiP2pWfdInfo: int getControlPort()>
<com.android.internal.telephony.CallManager: boolean getMute()>
<com.android.server.NetworkManagementService: android.net.InterfaceConfiguration getInterfaceConfig(java.lang.String)>
<com.android.server.am.UsageStatsService: byte[] readFully(java.io.FileInputStream)>
<com.android.email.RefreshManager: java.util.Collection getListenersForTest()>
<android.service.textservice.SpellCheckerService$Session: android.os.Bundle getBundle()>
<android.telephony.SmsMessage: java.lang.String getOriginatingAddress()>
<com.android.server.WifiService: int getFrequencyBand()>
<android.view.textservice.TextServicesManager: android.view.textservice.TextServicesManager getInstance()>
<com.android.internal.telephony.cdma.RuimRecords$EfCsimMdnLoaded: java.lang.String getEfName()>
<android.view.textservice.TextInfo: java.lang.String getText()>
<com.android.internal.telephony.cdma.EriManager: int getEriNumberOfEntries()>
<android.net.LocalSocketImpl: java.io.InputStream getInputStream()>
<com.android.server.input.InputManagerService: int getScanCodeState(int,int,int)>
<android.telephony.SmsMessage: android.telephony.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,short,byte[],boolean)>
<com.android.server.pm.PackageManagerService: android.content.pm.InstrumentationInfo getInstrumentationInfo(android.content.ComponentName,int)>
<com.android.server.sip.SipService: android.net.sip.ISipSession createSession(android.net.sip.SipProfile,android.net.sip.ISipSessionListener)>
<com.android.server.accessibility.AccessibilityManagerService: int getActiveWindowId()>
<android.telephony.SmsMessage: android.telephony.SmsMessage createFromPdu(byte[])>
<com.android.server.ThrottleService$DataRecorder: long getPeriodStart()>
<com.android.server.WallpaperManagerService: android.app.WallpaperInfo getWallpaperInfo()>
<android.net.sip.ISipSession$Stub$Proxy: java.lang.String getLocalIp()>
<com.android.server.MountService: java.lang.String getVolumeState(java.lang.String)>
<android.net.Uri$StringUri: java.util.List getPathSegments()>
<android.speech.tts.TextToSpeechService$SpeechItem: float getVolume()>
<com.android.internal.telephony.cat.ComprehensionTlv: byte[] getRawValue()>
<android.net.IThrottleManager$Stub$Proxy: java.lang.String getHelpUri()>
<android.telephony.TelephonyManager: android.telephony.TelephonyManager getDefault()>
<android.net.wifi.WifiStateTracker: android.net.LinkCapabilities getLinkCapabilities()>
<android.net.Uri$StringUri: java.lang.String getEncodedPath()>
<com.android.internal.telephony.IccRecords: com.android.internal.telephony.AdnRecordCache getAdnCache()>
<android.view.textservice.SentenceSuggestionsInfo: int getSuggestionsCount()>
<com.android.internal.telephony.SmsUsageMonitor$ShortCodePatternMatcher: int getNumberCategory(java.lang.String)>
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService$SuggestionsGatherer: com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService$SuggestionsGatherer$Result getResults(int,java.util.Locale)>
<android.net.wifi.p2p.WifiP2pWfdInfo: java.lang.String getDeviceInfoHex()>
<android.net.http.HttpsConnection: java.lang.String getScheme()>
<com.android.internal.telephony.cdma.CdmaConnection: com.android.internal.telephony.Connection$PostDialState getPostDialState()>
<android.telephony.TelephonyManager: int getCallState()>
<com.android.internal.telephony.IWapPushManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.android.server.BackupManagerService: long getAvailableRestoreToken(java.lang.String)>
<com.android.internal.telephony.gsm.SmsCbHeader: int getPageIndex()>
<android.net.IConnectivityManager$Stub$Proxy: android.net.ProxyProperties getGlobalProxy()>
<com.android.exchange.ExchangeService$AccountObserver: java.lang.String getAccountKeyWhere()>
<com.android.internal.telephony.ims.IsimUiccRecords$EfIsimImpuLoaded: java.lang.String getEfName()>
<com.android.internal.textservice.ITextServicesManager$Stub: android.os.IBinder asBinder()>
<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket(java.lang.String,int)>
<com.android.server.accessibility.AccessibilityManagerService: boolean getAccessibilityFocusBoundsInActiveWindow(android.graphics.Rect)>
<com.android.emailcommon.service.IEmailService$Stub$Proxy: android.os.Bundle autoDiscover(java.lang.String,java.lang.String)>
<android.net.TrafficStats: long getTotalTxBytes()>
<android.net.sip.ISipService$Stub$Proxy: android.net.sip.ISipSession getPendingSession(java.lang.String)>
<android.net.nsd.DnsSdTxtRecord: java.lang.String get(java.lang.String)>
<android.net.INetworkPolicyListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.net.sip.SimpleSessionDescription$Media: java.lang.String getEncryptionMethod()>
<com.android.server.am.ActivityManagerService: android.app.IActivityManager$ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder)>
<android.net.ConnectivityManager: int untether(java.lang.String)>
<android.telephony.CellIdentityLte: int getMcc()>
<com.android.internal.telephony.IccRecords: boolean getVoiceCallForwardingFlag()>
<android.net.INetworkStatsService$Stub$Proxy: long getNetworkTotalBytes(android.net.NetworkTemplate,long,long)>
<android.net.Uri$AbstractPart: java.lang.String getDecoded()>
<android.net.NetworkIdentity: java.lang.String getNetworkId()>
<com.android.server.connectivity.Tethering: java.lang.String[] getTetheredIfacePairs()>
<android.telephony.CellIdentityLte: int getMnc()>
<android.net.http.SslCertificate: java.lang.String getValidNotBefore()>
<com.android.internal.telephony.GsmAlphabet: byte[] stringToGsm7BitPacked(java.lang.String,int,boolean,int,int)>
<android.net.http.Headers: java.lang.String getRefresh()>
<android.net.wifi.IWifiManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.net.wifi.WifiManager: android.net.wifi.WifiConfiguration getWifiApConfiguration()>
<android.speech.tts.ITextToSpeechService$Stub$Proxy: java.lang.String[] getFeaturesForLanguage(java.lang.String,java.lang.String,java.lang.String)>
<android.net.IThrottleManager$Stub$Proxy: int getThrottle(java.lang.String)>
<android.telephony.PhoneNumberUtils: byte[] networkPortionToCalledPartyBCDWithLength(java.lang.String)>
<com.android.server.InputMethodManagerService$InputMethodAndSubtypeListManager: com.android.server.InputMethodManagerService$ImeSubtypeListItem getNextInputMethod(boolean,android.view.inputmethod.InputMethodInfo,android.view.inputmethod.InputMethodSubtype)>
<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: java.lang.String getDnsQueryName()>
<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int)>
<android.telephony.ServiceState: int getCdmaEriIconMode()>
<com.android.internal.telephony.Connection: java.lang.String getOrigDialString()>
<android.speech.tts.TextToSpeechService$1: java.lang.String[] getLanguage()>
<android.telephony.NeighboringCellInfo: int getCid()>
<android.net.BaseNetworkStateTracker: android.net.NetworkInfo getNetworkInfo()>
<android.net.ConnectivityManager: android.net.ProxyProperties getGlobalProxy()>
<com.android.internal.telephony.BaseCommands: com.android.internal.telephony.CommandsInterface$RadioState getRadioState()>
<com.android.internal.telephony.ITelephonyRegistry$Stub: android.os.IBinder asBinder()>
<android.accessibilityservice.AccessibilityServiceInfo: android.content.pm.ResolveInfo getResolveInfo()>
<android.view.textservice.SpellCheckerSession: com.android.internal.textservice.ITextServicesSessionListener getTextServicesSessionListener()>
<com.android.internal.telephony.gsm.SimTlv: byte[] getData()>
<com.android.server.am.ActivityManagerService: android.content.pm.ActivityInfo getActivityInfoForUser(android.content.pm.ActivityInfo,int)>
<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: int getVersion()>
<android.net.LocalSocket: java.io.FileDescriptor[] getAncillaryFileDescriptors()>
<android.net.wifi.WifiConfigStore: java.lang.String getConfigFile()>
<com.android.internal.telephony.RetryManager: int getRetryCount()>
<com.android.exchange.ExchangeService: android.content.Context getContext()>
<android.speech.tts.ITextToSpeechService$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.net.Uri$StringUri: java.lang.String getQuery()>
<com.android.internal.telephony.gsm.UsimServiceTable: java.lang.Object[] getValues()>
<android.telephony.SmsMessage: byte[] getUserData()>
<android.speech.tts.TextToSpeechService$1: java.lang.String[] getFeaturesForLanguage(java.lang.String,java.lang.String,java.lang.String)>
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.android.internal.telephony.cdma.EriManager: int getEriFileType()>
<com.android.server.input.InputManagerService: android.hardware.input.KeyboardLayout[] getKeyboardLayouts()>
<android.net.http.Headers: java.lang.String getContentType()>
<android.net.Uri$StringUri: java.lang.String getFragment()>
<android.view.textservice.SuggestionsInfo: int getSuggestionsCount()>
<android.net.Uri$HierarchicalUri: java.lang.String getFragment()>
<android.net.wifi.IWifiManager$Stub$Proxy: java.util.List getConfiguredNetworks()>
<android.telephony.CellIdentityLte: int getPci()>
<android.net.sip.SimpleSessionDescription$Media: java.lang.String[] getFormats()>
<android.net.Uri$OpaqueUri: java.lang.String getEncodedFragment()>
<com.android.internal.telephony.SmsMessageBase: int getStatusOnIcc()>
<android.app.LoadedApk$ServiceDispatcher: int getFlags()>
<com.android.internal.telephony.gsm.GsmConnection: long getCreateTime()>
<android.net.ConnectivityManager: int getLastTetherError(java.lang.String)>
<com.android.server.DevicePolicyManagerService: int getStorageEncryptionStatus(int)>
<android.speech.tts.ITextToSpeechService$Stub: android.os.IBinder asBinder()>
<com.android.internal.telephony.CallManager: com.android.internal.telephony.Call getFirstActiveRingingCall()>
<com.android.emailcommon.service.AccountServiceProxy: int getAccountColor(long)>
<com.android.internal.telephony.IccSmsInterfaceManager: byte[] makeSmsRecordData(int,byte[])>
<com.android.internal.telephony.CallerInfo: com.android.internal.telephony.CallerInfo getCallerInfo(android.content.Context,android.net.Uri)>
<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory getInsecure(int,android.net.SSLSessionCache)>
<android.net.http.Headers: long getContentLength()>
<android.net.IConnectivityManager$Stub$Proxy: com.android.internal.net.LegacyVpnInfo getLegacyVpnInfo()>
<com.android.internal.telephony.gsm.SIMRecords: boolean getVoiceCallForwardingFlag()>
<android.net.wifi.ScanResult$1: android.net.wifi.ScanResult createFromParcel(android.os.Parcel)>
<com.android.internal.telephony.cat.CommandParamsFactory: com.android.internal.telephony.cat.CommandParamsFactory getInstance(com.android.internal.telephony.cat.RilMessageDecoder,com.android.internal.telephony.IccFileHandler)>
<android.net.LocalSocket: int getSoTimeout()>
<com.android.server.ThrottleService: long getByteCount(java.lang.String,int,int,int)>
<com.android.server.am.ActivityManagerService: android.app.PendingIntent getRunningServiceControlPanel(android.content.ComponentName)>
<android.telephony.CellSignalStrengthCdma: int getCdmaLevel()>
<android.telephony.ServiceState: java.lang.String getOperatorAlphaLong()>
<com.android.internal.telephony.cat.ComprehensionTlv: int getLength()>
<com.android.server.wm.WindowManagerService: float getAnimationScale(int)>
<android.inputmethodservice.ExtractEditLayout$ExtractActionMode: android.view.MenuInflater getMenuInflater()>
<android.net.NetworkInfo: java.lang.String getReason()>
<android.net.INetworkStatsService$Stub$Proxy: java.lang.String[] getMobileIfaces()>
<android.media.AudioService$AudioFocusDeathHandler: android.os.IBinder getBinder()>
<com.android.internal.telephony.IntRangeManager: boolean isEmpty()>
<android.net.Uri$HierarchicalUri: java.lang.String getAuthority()>
<com.android.internal.telephony.GsmAlphabet: byte[] stringToGsm7BitPacked(java.lang.String,int,int)>
<com.android.server.TwilightService$TwilightState: long getYesterdaySunset()>
<com.android.internal.telephony.cdma.RuimRecords: java.lang.String getRUIMOperatorNumeric()>
<android.net.Proxy: java.lang.String getDefaultHost()>
<com.android.internal.telephony.cdma.CdmaConnection: com.android.internal.telephony.Call$State getState()>
<com.android.server.wm.WindowManagerService: com.android.server.wm.InputMonitor getInputMonitor()>
<com.android.server.dreams.DreamManagerService: android.content.ComponentName getDefaultDreamComponent()>
<com.android.server.InputMethodManagerService: android.view.inputmethod.InputMethodSubtype getLastInputMethodSubtype()>
<com.android.server.MountService: android.os.storage.StorageVolume[] getVolumeList()>
<com.android.server.connectivity.Tethering: int[] getUpstreamIfaceTypes()>
<com.android.server.WifiService: java.util.List getScanResults()>
<android.os.INetworkManagementService$Stub$Proxy: java.lang.String[] listInterfaces()>
<android.net.DummyDataStateTracker: android.net.LinkCapabilities getLinkCapabilities()>
<android.telephony.CellIdentityGsm: android.telephony.CellIdentityGsm copy()>
<android.os.ServiceManagerNative: android.os.IBinder asBinder()>
<com.android.exchange.EasSyncService: android.os.Bundle tryAutodiscover(java.lang.String,java.lang.String)>
<android.telephony.cdma.CdmaSmsCbProgramData: java.lang.String getCategoryName()>
<android.telephony.CellIdentityLte: int getTac()>
<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$DevicePolicyData getUserData(int)>
<android.net.http.Headers: java.lang.String getExpires()>
<com.android.exchange.EasOutboxService$SendMailEntity: long getContentLength()>
<android.net.INetworkPolicyManager$Stub$Proxy: int[] getUidsWithPolicy(int)>
<android.net.http.SslCertificate: android.net.http.SslCertificate$DName getIssuedTo()>
<android.telephony.TelephonyManager: int getLteOnCdmaMode()>
<android.net.sip.ISipService$Stub$Proxy: android.net.sip.ISipSession createSession(android.net.sip.SipProfile,android.net.sip.ISipSessionListener)>
<android.net.LocalServerSocket: android.net.LocalSocketAddress getLocalSocketAddress()>
<com.android.server.DevicePolicyManagerService: android.app.admin.DeviceAdminInfo findAdmin(android.content.ComponentName,int)>
<com.android.internal.telephony.IWapPushManager$Stub: com.android.internal.telephony.IWapPushManager asInterface(android.os.IBinder)>
<com.android.exchange.EasSyncService: com.android.exchange.EasResponse sendHttpClientOptions()>
<com.android.internal.telephony.DataConnection: int getRetryCount()>
<android.net.NetworkTemplate: java.lang.String getNetworkId()>
<com.android.server.wm.WindowManagerService: int getOrientationFromWindowsLocked()>
<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String getResourcePath()>
<android.widget.RemoteViewsService$RemoteViewsFactoryAdapter: android.widget.RemoteViews getLoadingView()>
<com.android.internal.telephony.SmsAddress: java.lang.String getAddressString()>
<android.net.Uri$OpaqueUri: java.lang.String getUserInfo()>
<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowList getTokenWindowsOnDisplay(com.android.server.wm.WindowToken,com.android.server.wm.DisplayContent)>
<com.android.server.InputMethodManagerService: android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtype()>
<com.android.internal.telephony.ISms$Stub: android.os.IBinder asBinder()>
<android.net.http.Headers: java.lang.String getWwwAuthenticate()>
<com.android.server.NetworkManagementService: android.net.RouteInfo[] getRoutes(java.lang.String)>
<com.android.server.NetworkManagementService: int getInterfaceTxThrottle(java.lang.String)>
<android.accounts.AccountManagerService: android.accounts.AccountAndUser[] getAllAccounts()>
<com.android.email.service.AttachmentDownloadService$AccountManagerStub: int getNumberOfAccounts()>
<android.accounts.AccountManager: java.lang.String blockingGetAuthToken(android.accounts.Account,java.lang.String,boolean)>
<com.google.android.picasasync.Authorizer: java.lang.String getAuthToken(java.lang.String)>
<android.accounts.AccountManagerService: android.accounts.AuthenticatorDescription[] getAuthenticatorTypes()>
<android.accounts.AccountManagerService: java.lang.String getUserData(android.accounts.Account,java.lang.String)>
<android.test.IsolatedContext$MockAccountManager: android.accounts.Account[] getAccounts()>
<android.accounts.AccountManagerService: android.accounts.Account[] getAccountsAsUser(java.lang.String,int)>
<android.accounts.AccountManager: java.lang.String getPassword(android.accounts.Account)>
<android.accounts.IAccountManager$Stub$Proxy: android.accounts.Account[] getAccountsAsUser(java.lang.String,int)>
<android.accounts.AccountManager$Future2Task: android.accounts.AccountManager$Future2Task start()>
<android.accounts.AccountManagerService: android.accounts.Account[] getAccounts(int)>
<android.accounts.AccountManager$Future2Task: java.lang.Object getResult()>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthTokenByFeatures(java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManagerService: android.accounts.Account[] getAccountsFromCacheLocked(android.accounts.AccountManagerService$UserAccounts,java.lang.String)>
<android.accounts.AccountManager: java.util.HashMap access$1300(android.accounts.AccountManager)>
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager$AmsTask: android.os.Bundle getResult(long,java.util.concurrent.TimeUnit)>
<com.google.android.picasasync.Authorizer: java.lang.String getFreshAuthToken(java.lang.String,java.lang.String)>
<android.accounts.AccountManagerService: android.accounts.AccountManagerService getSingleton()>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture confirmCredentials(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManagerService: java.lang.String getPassword(android.accounts.Account)>
<android.accounts.AccountManagerService$Session: android.accounts.IAccountManagerResponse getResponseAndClose()>
<android.test.IsolatedContext$MockAccountManager: java.lang.String getPassword(android.accounts.Account)>
<android.accounts.IAccountManager$Stub$Proxy: java.lang.String getPassword(android.accounts.Account)>
<android.accounts.AccountManager: android.accounts.Account[] getAccountsByTypeAsUser(java.lang.String,android.os.UserHandle)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,boolean,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManager get(android.content.Context)>
<android.accounts.AccountManager: android.accounts.Account[] getAccountsByType(java.lang.String)>
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAccountsByTypeAndFeatures(java.lang.String,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.IAccountManager$Stub$Proxy: android.accounts.Account[] getAccounts(java.lang.String)>
<android.test.IsolatedContext$MockAccountManager: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthTokenLabel(java.lang.String,java.lang.String,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture editProperties(java.lang.String,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.IAccountManager$Stub$Proxy: java.lang.String getUserData(android.accounts.Account,java.lang.String)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture confirmCredentialsAsUser(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler,android.os.UserHandle)>
<android.accounts.AccountManager: android.accounts.Account[] getAccounts()>
<android.accounts.AccountManagerService: android.accounts.AccountAndUser[] getRunningAccounts()>
<android.accounts.AbstractAccountAuthenticator: android.os.Bundle getAccountRemovalAllowed(android.accounts.AccountAuthenticatorResponse,android.accounts.Account)>
<android.accounts.AccountManager: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)>
<android.accounts.AccountManager$Future2Task: java.lang.Object getResult(long,java.util.concurrent.TimeUnit)>
<android.accounts.AccountManagerService: android.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>
<android.accounts.AccountManager: android.os.Handler access$600(android.accounts.AccountManager)>
<android.accounts.AccountManagerService: android.accounts.Account[] getAccounts(java.lang.String)>
<android.accounts.AccountManager$AmsTask: android.os.Bundle getResult()>
<android.accounts.AccountManager: java.lang.Exception access$400(android.accounts.AccountManager,int,java.lang.String)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture hasFeatures(android.accounts.Account,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.IAccountManager access$000(android.accounts.AccountManager)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture removeAccount(android.accounts.Account,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: java.lang.String getUserData(android.accounts.Account,java.lang.String)>
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAccountsByTypeAndFeatures(java.lang.String,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AuthenticatorDescription[] getAuthenticatorTypes()>
<android.accounts.AccountManagerService$Session: java.lang.String toDebugString()>
<com.android.server.sip.SipSessionGroup: java.lang.String getLocalProfileUri()>
<android.provider.MediaStore$Audio$Albums: android.net.Uri getContentUri(java.lang.String)>
<com.android.ex.chips.Queries$Query: android.net.Uri getContentUri()>
<com.android.emailcommon.provider.EmailContent: android.net.Uri getUri()>
<android.provider.Settings$NameValueTable: android.net.Uri getUriFor(android.net.Uri,java.lang.String)>
<android.content.CursorLoader: android.net.Uri getUri()>
<com.google.android.picasasync.PicasaFacade: android.net.Uri getAlbumsUri()>
<android.provider.MediaStore$Files: android.net.Uri getMtpObjectsUri(java.lang.String,long)>
<com.google.android.picasasync.PicasaFacade: android.net.Uri getPostPhotosUri()>
<android.provider.MediaStore$Files: android.net.Uri getContentUri(java.lang.String,long)>
<com.google.android.picasasync.PicasaFacade: android.net.Uri getUploadRecordsUri()>
<android.media.RingtoneManager: android.net.Uri getDefaultUri(int)>
<com.google.android.picasastore.PicasaStoreFacade: android.net.Uri getAlbumCoverUri(long,java.lang.String)>
<android.provider.MediaStore$Files: android.net.Uri getMtpObjectsUri(java.lang.String)>
<android.provider.SyncStateContract$Helpers: android.util.Pair getWithUri(android.content.ContentProviderClient,android.net.Uri,android.accounts.Account)>
<com.android.internal.policy.impl.keyguard.KeyguardSecurityModel: com.android.internal.policy.impl.keyguard.KeyguardSecurityModel$SecurityMode getSecurityMode()>
<android.net.sip.SipProfile: javax.sip.address.SipURI getUri()>
<android.content.ClipData$Item: android.net.Uri getUri()>
<com.google.android.picasasync.PicasaFacade: android.net.Uri getPhotosUri()>
<com.android.server.am.ActivityRecord: com.android.server.am.UriPermissionOwner getUriPermissionsLocked()>
<android.hardware.usb.UsbAccessory: java.lang.String getUri()>
<android.provider.MediaStore$Audio$Playlists: android.net.Uri getContentUri(java.lang.String)>
<android.app.DownloadManager: android.net.Uri getDownloadUri(long)>
<android.provider.MediaStore$Audio$Artists$Albums: android.net.Uri getContentUri(java.lang.String,long)>
<com.android.videoeditor.service.VideoEditorProject: android.net.Uri getExportedMovieUri()>
<android.media.RingtoneManager: android.net.Uri getRingtoneUri(int)>
<android.provider.MediaStore$Audio$Genres: android.net.Uri getContentUriForAudioId(java.lang.String,int)>
<com.google.android.picasasync.PicasaFacade: android.net.Uri getUsersUri()>
<com.android.internal.policy.impl.keyguard.KeyguardSecurityViewFlipper: com.android.internal.policy.impl.keyguard.KeyguardSecurityView getSecurityView()>
<com.android.camera.PhotoModule$ImageNamer: android.net.Uri getUri()>
<com.android.providers.media.MediaProvider: android.net.Uri getAlbumArtOutputUri(com.android.providers.media.MediaProvider$DatabaseHelper,android.database.sqlite.SQLiteDatabase,long,android.net.Uri)>
<android.widget.TextView: android.text.TextDirectionHeuristic getTextDirectionHeuristic()>
<com.android.phone.PhoneUtils: com.android.internal.telephony.Phone getSipPhoneFromUri(com.android.internal.telephony.CallManager,java.lang.String)>
<com.android.server.pm.PackageManagerService$InstallParams: android.net.Uri getPackageUri()>
<android.widget.FrameLayout: boolean getConsiderGoneChildrenWhenMeasuring()>
<com.google.android.picasasync.PicasaFacade: android.net.Uri getUploadsUri()>
<android.app.DownloadManager: android.net.Uri getUriForDownloadedFile(long)>
<com.android.server.am.ServiceRecord$StartItem: com.android.server.am.UriPermissionOwner getUriPermissionsLocked()>
<android.provider.MediaStore$Images$Thumbnails: android.net.Uri getContentUri(java.lang.String)>
<android.content.pm.VerificationParams: android.net.Uri getOriginatingURI()>
<com.android.internal.policy.impl.keyguard.KeyguardSecurityModel: com.android.internal.policy.impl.keyguard.KeyguardSecurityModel$SecurityMode getBackupSecurityMode(com.android.internal.policy.impl.keyguard.KeyguardSecurityModel$SecurityMode)>
<com.google.android.picasasync.PicasaFacade: android.net.Uri getSettingsUri()>
<com.google.android.picasasync.PicasaFacade: android.net.Uri getPostAlbumsUri()>
<com.google.android.picasasync.UploadTaskEntry: android.net.Uri getContentUri()>
<android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)>
<android.provider.MediaStore$Files: android.net.Uri getMtpReferencesUri(java.lang.String,long)>
<com.android.emailcommon.utility.AttachmentUtilities: android.net.Uri getAttachmentUri(long,long)>
<com.android.providers.downloads.DownloadInfo$Reader: com.android.providers.downloads.DownloadInfo newDownloadInfo(android.content.Context,com.android.providers.downloads.SystemFacade)>
<com.android.ex.chips.RecipientEntry: android.net.Uri getPhotoThumbnailUri()>
<android.content.ContentProviderOperation: android.net.Uri getUri()>
<com.google.android.picasasync.PicasaFacade: android.net.Uri getUploadUri(long)>
<android.webkit.HTML5VideoView: boolean getPauseDuringPreparing()>
<com.android.ex.chips.Queries$Query: android.net.Uri getContentFilterUri()>
<android.provider.MediaStore: android.net.Uri getMediaScannerUri()>
<android.provider.MediaStore$Video$Thumbnails: android.net.Uri getContentUri(java.lang.String)>
<android.media.RingtoneManager: android.net.Uri getActualDefaultRingtoneUri(android.content.Context,int)>
<android.app.ActivityManagerProxy: android.os.ParcelFileDescriptor openContentUri(android.net.Uri)>
<com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo: android.net.Uri getUriForIntent(android.content.Context,long)>
<android.provider.MediaStore$Audio$Genres$Members: android.net.Uri getContentUri(java.lang.String,long)>
<android.provider.MediaStore$Audio$Genres: android.net.Uri getContentUri(java.lang.String)>
<com.android.camera.VideoModule$VideoNamer: android.net.Uri getUri()>
<com.android.launcher2.LauncherSettings$Favorites: android.net.Uri getContentUri(long,boolean)>
<com.android.email.AttachmentInfo: android.net.Uri getUriForIntent(android.content.Context,long)>
<com.android.phone.PhoneUtils: android.net.Uri getProviderGatewayUri(android.content.Intent)>
<android.media.RingtoneManager: android.net.Uri getValidRingtoneUri(android.content.Context)>
<android.provider.MediaStore$Audio$Playlists$Members: android.net.Uri getContentUri(java.lang.String,long)>
<android.provider.Settings$System: android.net.Uri getUriFor(java.lang.String)>
<android.provider.MediaStore$Audio$Media: android.net.Uri getContentUri(java.lang.String)>
<android.provider.Settings$Secure: android.net.Uri getUriFor(java.lang.String)>
<android.provider.MediaStore$Images$Media: android.net.Uri getContentUri(java.lang.String)>
<com.android.providers.downloads.DownloadInfo: android.net.Uri getAllDownloadsUri()>
<android.media.Ringtone: android.net.Uri getUri()>
<android.provider.MediaStore$Audio$Artists: android.net.Uri getContentUri(java.lang.String)>
<com.google.android.picasasync.PicasaFacade: android.net.Uri getAlbumUri(long)>
<android.provider.MediaStore$Files: android.net.Uri getContentUri(java.lang.String)>
<com.android.providers.downloads.DownloadInfo: android.net.Uri getMyDownloadsUri()>
<com.google.android.picasastore.PicasaStoreFacade: android.net.Uri getPhotoUri(long,java.lang.String,java.lang.String)>
<android.content.pm.VerificationParams: android.net.Uri getVerificationURI()>
<android.text.Layout: android.text.TextDirectionHeuristic getTextDirectionHeuristic()>
<android.net.Uri: android.net.Uri getCanonicalUri()>
<android.provider.MediaStore$Audio$Media: android.net.Uri getContentUriForPath(java.lang.String)>
<android.provider.MediaStore$Video$Media: android.net.Uri getContentUri(java.lang.String)>
<android.content.res.XmlBlock$Parser: java.lang.String getNamespaceUri(int)>
<com.google.android.picasastore.FIFEUtil: java.lang.String getImageUriOptions(android.net.Uri)>
<android.bluetooth.IBluetoothPbap$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.bluetooth.IBluetoothInputDevice$Stub: android.os.IBinder asBinder()>
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: int getPriority(android.bluetooth.BluetoothDevice)>
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: android.os.ParcelUuid[] getUuids()>
<android.bluetooth.BluetoothInputDevice: java.util.List getConnectedDevices()>
<android.bluetooth.IBluetooth$Stub$Proxy: int getRemoteClass(android.bluetooth.BluetoothDevice)>
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int getPhonebookSize(int)>
<android.bluetooth.BluetoothHeadset: java.util.List getConnectedDevices()>
<android.net.ConnectivityManager: java.lang.String[] getTetherableBluetoothRegexs()>
<com.android.bluetooth.btservice.AdapterService: java.lang.String getName()>
<android.bluetooth.BluetoothTetheringDataTracker: android.net.LinkCapabilities getLinkCapabilities()>
<android.bluetooth.IBluetooth$Stub$Proxy: android.os.ParcelFileDescriptor connectSocket(android.bluetooth.BluetoothDevice,int,android.os.ParcelUuid,int,int)>
<android.bluetooth.IBluetoothStateChangeCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.android.bluetooth.btservice.RemoteDevices: com.android.bluetooth.btservice.RemoteDevices$DeviceProperties getDeviceProperties(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothServerSocket: int getChannel()>
<com.android.bluetooth.pbap.BluetoothPbapAuthenticator: byte[] onAuthenticationResponse(byte[])>
<android.bluetooth.IBluetoothPbap$Stub$Proxy: android.bluetooth.BluetoothDevice getClient()>
<android.bluetooth.BluetoothAdapter: boolean getProfileProxy(android.content.Context,android.bluetooth.BluetoothProfile$ServiceListener,int)>
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: android.os.ParcelUuid[] getRemoteUuids(android.bluetooth.BluetoothDevice)>
<com.android.bluetooth.hid.HidService: boolean getProtocolMode(android.bluetooth.BluetoothDevice)>
<com.android.bluetooth.pan.PanService: java.lang.String getName()>
<android.bluetooth.IBluetoothManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.bluetooth.BluetoothDevice: android.os.ParcelUuid[] getUuids()>
<com.android.bluetooth.btservice.RemoteDevices$DeviceProperties: byte[] getAddress()>
<com.android.bluetooth.btservice.AdapterService: int getBondState(android.bluetooth.BluetoothDevice)>
<com.android.bluetooth.pbap.BluetoothPbapService: java.lang.String getLocalPhoneName()>
<com.android.bluetooth.pbap.BluetoothPbapService: java.lang.String getLocalPhoneNum()>
<android.bluetooth.IBluetooth$Stub$Proxy: android.os.ParcelUuid[] getUuids()>
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: int getState()>
<com.android.bluetooth.btservice.AdapterService: int getAdapterConnectionState()>
<com.android.bluetooth.btservice.AdapterProperties: int getConnectionState()>
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: java.lang.String getAddress()>
<android.bluetooth.IBluetoothManager$Stub$Proxy: java.lang.String getAddress()>
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: java.util.List getDevicesMatchingConnectionStates(int[])>
<android.bluetooth.BluetoothDevice: java.lang.String getAlias()>
<android.bluetooth.IBluetooth$Stub$Proxy: int getAdapterConnectionState()>
<android.bluetooth.BluetoothTetheringDataTracker: java.lang.String getTcpBufferSizesPropName()>
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingInsecureRfcommWithServiceRecord(java.lang.String,java.util.UUID)>
<com.android.bluetooth.hfp.HeadsetService: java.util.List getConnectedDevices()>
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: java.lang.String getRemoteName(android.bluetooth.BluetoothDevice)>
<com.android.bluetooth.hfp.HeadsetService: int getConnectionState(android.bluetooth.BluetoothDevice)>
<com.android.bluetooth.pan.PanService$BluetoothPanBinder: java.util.List getConnectedDevices()>
<android.bluetooth.IBluetoothHeadsetPhone$Stub: android.os.IBinder asBinder()>
<android.bluetooth.IBluetoothHealth$Stub$Proxy: int getHealthDeviceConnectionState(android.bluetooth.BluetoothDevice)>
<com.android.bluetooth.hfp.AtPhonebook: boolean getCheckingAccessPermission()>
<com.android.bluetooth.a2dp.A2dpStateMachine: java.util.List getDevicesMatchingConnectionStates(int[])>
<android.bluetooth.BluetoothPan: int getConnectionState(android.bluetooth.BluetoothDevice)>
<com.android.bluetooth.a2dp.A2dpService: java.lang.String getName()>
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: java.util.List getConnectedDevices()>
<com.android.bluetooth.hfp.HeadsetPhoneState: int getNumActiveCall()>
<android.bluetooth.BluetoothAdapter: java.util.Set getBondedDevices()>
<android.bluetooth.IBluetooth$Stub: android.os.IBinder asBinder()>
<com.android.bluetooth.btservice.AdapterService: java.lang.String getRemoteName(android.bluetooth.BluetoothDevice)>
<android.bluetooth.IBluetooth$Stub$Proxy: int getDiscoverableTimeout()>
<com.android.bluetooth.btservice.AdapterService: int getProfileConnectionState(int)>
<com.android.bluetooth.btservice.AdapterService: int getState()>
<android.bluetooth.IBluetoothHealth$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.android.bluetooth.btservice.AdapterService: int getDiscoverableTimeout()>
<com.android.bluetooth.btservice.Config: java.lang.Class[] getSupportedProfiles()>
<com.android.bluetooth.hfp.HeadsetStateMachine: java.util.List getConnectedDevices()>
<android.bluetooth.BluetoothA2dp: int getConnectionState(android.bluetooth.BluetoothDevice)>
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int getContactsSize()>
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: java.util.ArrayList loadCallHistoryList(int)>
<com.android.bluetooth.hfp.HeadsetService: java.lang.String getName()>
<com.android.bluetooth.hfp.HeadsetPhoneState: int getBatteryCharge()>
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.android.bluetooth.Utils: byte[] getByteAddress(android.bluetooth.BluetoothDevice)>
<com.android.bluetooth.hid.HidService: com.android.bluetooth.hid.HidService getHidService()>
<com.android.bluetooth.opp.BluetoothOppPreference: java.lang.String getName(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothAdapter getDefaultAdapter()>
<android.bluetooth.BluetoothSocket: java.io.InputStream getInputStream()>
<android.bluetooth.BluetoothClass: int getMajorDeviceClass()>
<com.android.bluetooth.opp.BluetoothOppManager: int getBatchSize()>
<android.bluetooth.BluetoothTetheringDataTracker: int getDefaultGatewayAddr()>
<android.bluetooth.BluetoothPbap: android.bluetooth.BluetoothDevice getClient()>
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: java.lang.String getOwnerPhoneNumberVcard(boolean,byte[])>
<com.android.bluetooth.hfp.HeadsetPhoneState: int getSignal()>
<com.android.bluetooth.hfp.HeadsetService: int getPriority(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothSocket: java.io.OutputStream getOutputStream()>
<android.bluetooth.IBluetoothHeadsetPhone$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.android.bluetooth.btservice.RemoteDevices$DeviceProperties: android.os.ParcelUuid[] getUuids()>
<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: java.util.List getHealthDevicesMatchingConnectionStates(int[])>
<com.android.bluetooth.pbap.BluetoothPbapCallLogComposer: java.lang.String createOneEntry(boolean)>
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: java.util.List getDevicesMatchingConnectionStates(int[])>
<android.bluetooth.IBluetooth$Stub$Proxy: android.os.ParcelFileDescriptor createSocketChannel(int,java.lang.String,android.os.ParcelUuid,int,int)>
<android.bluetooth.BluetoothHealth: android.os.ParcelFileDescriptor getMainChannelFd(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)>
<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: java.util.List getConnectedHealthDevices()>
<com.android.bluetooth.pbap.BluetoothPbapUtils: java.lang.String getProfileName(android.content.Context)>
<com.android.bluetooth.hdp.HealthService: com.android.bluetooth.btservice.ProfileService$IProfileServiceBinder initBinder()>
<android.bluetooth.BluetoothTetheringDataTracker: android.net.NetworkInfo getNetworkInfo()>
<com.android.bluetooth.btservice.RemoteDevices$DeviceProperties: java.lang.String getAlias()>
<android.bluetooth.BluetoothDevice: java.lang.String getAliasName()>
<com.android.bluetooth.hdp.HealthService: java.lang.String getName()>
<android.bluetooth.BluetoothAdapter: int getDiscoverableTimeout()>
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: int getConnectionState(android.bluetooth.BluetoothDevice)>
<com.android.bluetooth.hfp.HeadsetPhoneState: int getSpeakerVolume()>
<android.bluetooth.IBluetoothA2dp$Stub: android.os.IBinder asBinder()>
<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: android.os.ParcelFileDescriptor getMainChannelFd(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)>
<com.android.bluetooth.hdp.HealthService: int getHealthDeviceConnectionState(android.bluetooth.BluetoothDevice)>
<com.android.bluetooth.opp.BluetoothOppUtility: com.android.bluetooth.opp.BluetoothOppSendFileInfo getSendFileInfo(android.net.Uri)>
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: int getConnectionState(android.bluetooth.BluetoothDevice)>
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int getCallHistorySize(int)>
<android.bluetooth.IBluetoothHealthCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.android.bluetooth.opp.BluetoothOppSendFileInfo: com.android.bluetooth.opp.BluetoothOppSendFileInfo generateFileInfo(android.content.Context,android.net.Uri,java.lang.String)>
<com.android.bluetooth.Utils: byte[] getBytesFromAddress(java.lang.String)>
<com.android.bluetooth.hid.HidService: int getPriority(android.bluetooth.BluetoothDevice)>
<com.android.bluetooth.a2dp.A2dpService: java.util.List getDevicesMatchingConnectionStates(int[])>
<com.android.bluetooth.opp.BluetoothOppRfcommTransport: java.lang.String getRemoteAddress()>
<com.android.bluetooth.opp.BluetoothOppBatch: com.android.bluetooth.opp.BluetoothOppShareInfo getPendingShare()>
<android.bluetooth.BluetoothHeadset: int getConnectionState(android.bluetooth.BluetoothDevice)>
<com.android.bluetooth.btservice.AdapterService: android.os.ParcelFileDescriptor createSocketChannel(int,java.lang.String,android.os.ParcelUuid,int,int)>
<android.bluetooth.BluetoothDevice: int getBondState()>
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: int getPriority(android.bluetooth.BluetoothDevice)>
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: java.util.List getDevicesMatchingConnectionStates(int[])>
<android.bluetooth.BluetoothAdapter: android.bluetooth.IBluetooth getBluetoothService(android.bluetooth.IBluetoothManagerCallback)>
<com.android.bluetooth.a2dp.A2dpStateMachine: java.util.List getConnectedDevices()>
<android.bluetooth.BluetoothTetheringDataTracker: android.bluetooth.BluetoothTetheringDataTracker getInstance()>
<com.android.bluetooth.hfp.HeadsetStateMachine: int getAudioState(android.bluetooth.BluetoothDevice)>
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: int getScanMode()>
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.bluetooth.IBluetoothHeadsetPhone$Stub$Proxy: java.lang.String getNetworkOperator()>
<com.android.bluetooth.hdp.HealthService: java.util.List getHealthDevicesMatchingConnectionStates(int[])>
<com.android.bluetooth.hfp.HeadsetService: int getBatteryUsageHint(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothPan: java.util.List getDevicesMatchingConnectionStates(int[])>
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothClass getBluetoothClass()>
<android.bluetooth.IBluetooth$Stub$Proxy: android.os.ParcelUuid[] getRemoteUuids(android.bluetooth.BluetoothDevice)>
<android.bluetooth.IBluetoothPbap$Stub$Proxy: int getState()>
<android.bluetooth.BluetoothDevice: android.bluetooth.IBluetooth getService()>
<com.android.bluetooth.hfp.HeadsetStateMachine: int getConnectionState(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothHeadset: java.util.List getDevicesMatchingConnectionStates(int[])>
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: int getBatteryUsageHint(android.bluetooth.BluetoothDevice)>
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: java.util.List getDevicesMatchingConnectionStates(int[])>
<com.android.bluetooth.opp.BluetoothOppManager: java.lang.String getDeviceName(android.bluetooth.BluetoothDevice)>
<android.bluetooth.IBluetoothStateChangeCallback$Stub: android.os.IBinder asBinder()>
<com.android.bluetooth.hid.HidService: java.lang.String getName()>
<android.bluetooth.IBluetooth$Stub$Proxy: java.lang.String getRemoteName(android.bluetooth.BluetoothDevice)>
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: com.android.bluetooth.btservice.AdapterService getService()>
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: java.lang.String getName()>
<com.android.bluetooth.hfp.HeadsetPhoneState: int getCallState()>
<android.bluetooth.BluetoothHealth: int getConnectionState(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothInputDevice: int getPriority(android.bluetooth.BluetoothDevice)>
<com.android.bluetooth.btservice.AdapterService: android.os.ParcelUuid[] getUuids()>
<android.bluetooth.IBluetooth$Stub$Proxy: int getState()>
<com.android.bluetooth.hfp.AtPhonebook: java.lang.String getLastDialledNumber()>
<android.bluetooth.IBluetoothPbap$Stub: android.os.IBinder asBinder()>
<android.bluetooth.BluetoothTetheringDataTracker: android.net.LinkProperties getLinkProperties()>
<com.android.bluetooth.pan.PanService$BluetoothPanBinder: java.util.List getDevicesMatchingConnectionStates(int[])>
<android.bluetooth.BluetoothAdapter: java.lang.String getName()>
<android.media.AudioManager: int setBluetoothA2dpDeviceConnectionState(android.bluetooth.BluetoothDevice,int)>
<android.bluetooth.BluetoothDevice: java.lang.String getAddress()>
<android.bluetooth.IBluetooth$Stub$Proxy: int getBondState(android.bluetooth.BluetoothDevice)>
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: boolean getReport(android.bluetooth.BluetoothDevice,byte,byte,int)>
<android.bluetooth.BluetoothHealthAppConfiguration: int getRole()>
<com.android.server.BluetoothManagerService: java.lang.String getAddress()>
<com.android.bluetooth.pbap.BluetoothPbapUtils: java.lang.String createProfileVCard(android.content.Context,int,byte[])>
<com.android.bluetooth.hid.HidService: int getConnectionState(android.bluetooth.BluetoothDevice)>
<com.android.bluetooth.btservice.ProfileService: android.os.IBinder onBind(android.content.Intent)>
<com.android.bluetooth.btservice.AdapterProperties: java.lang.String getName()>
<com.android.bluetooth.hid.HidService: java.util.List getDevicesMatchingConnectionStates(int[])>
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingEncryptedRfcommWithServiceRecord(java.lang.String,java.util.UUID)>
<android.bluetooth.IBluetoothPan$Stub$Proxy: int getConnectionState(android.bluetooth.BluetoothDevice)>
<com.android.bluetooth.hdp.HealthService: java.util.List lookupHealthDevicesMatchingStates(int[])>
<com.android.bluetooth.pbap.BluetoothPbapService: java.lang.String getRemoteDeviceName()>
<android.bluetooth.BluetoothUuid: int getServiceIdentifierFromParcelUuid(android.os.ParcelUuid)>
<com.android.bluetooth.btservice.ProfileService: android.bluetooth.BluetoothDevice getDevice(byte[])>
<com.android.bluetooth.pbap.BluetoothPbapCallLogComposer: java.lang.String getErrorReason()>
<android.bluetooth.IBluetooth$Stub$Proxy: java.lang.String getAddress()>
<com.android.bluetooth.btservice.AdapterService: android.os.ParcelUuid[] getRemoteUuids(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothPbap: int getState()>
<com.android.bluetooth.pbap.BluetoothPbapService$2: android.bluetooth.BluetoothDevice getClient()>
<android.bluetooth.IBluetoothManagerCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.bluetooth.BluetoothHeadset: int getBatteryUsageHint(android.bluetooth.BluetoothDevice)>
<android.bluetooth.IBluetoothCallback$Stub: android.os.IBinder asBinder()>
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: android.os.ParcelFileDescriptor createSocketChannel(int,java.lang.String,android.os.ParcelUuid,int,int)>
<com.android.bluetooth.opp.BluetoothOppManager: com.android.bluetooth.opp.BluetoothOppManager getInstance(android.content.Context)>
<com.android.bluetooth.btservice.AdapterProperties: byte[] getAddress()>
<android.bluetooth.BluetoothInputDevice: boolean getReport(android.bluetooth.BluetoothDevice,byte,byte,int)>
<com.android.bluetooth.a2dp.A2dpStateMachine: int getConnectionState(android.bluetooth.BluetoothDevice)>
<com.android.bluetooth.Utils: java.lang.String getAddressStringFromByte(byte[])>
<android.bluetooth.IBluetoothHeadset$Stub: android.os.IBinder asBinder()>
<android.bluetooth.BluetoothAdapter: int getConnectionState()>
<com.android.bluetooth.a2dp.A2dpService: com.android.bluetooth.btservice.ProfileService$IProfileServiceBinder initBinder()>
<com.android.server.connectivity.Tethering: java.lang.String[] getTetherableBluetoothRegexs()>
<com.android.bluetooth.btservice.AdapterService: int getScanMode()>
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: java.util.ArrayList getPhonebookNameList(int)>
<com.android.bluetooth.hfp.HeadsetService: com.android.bluetooth.hfp.HeadsetService getHeadsetService()>
<android.bluetooth.BluetoothHealth: java.util.List getConnectedDevices()>
<com.android.bluetooth.a2dp.A2dpService: int getConnectionState(android.bluetooth.BluetoothDevice)>
<com.android.bluetooth.hfp.HeadsetPhoneState: int getRoam()>
<com.android.bluetooth.opp.BluetoothOppUtility: java.lang.String getStatusDescription(android.content.Context,int,java.lang.String)>
<android.bluetooth.BluetoothAdapter: int getScanMode()>
<android.bluetooth.IBluetoothPan$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.android.bluetooth.btservice.RemoteDevices$DeviceProperties: int getDeviceType()>
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothDevice getRemoteDevice(java.lang.String)>
<android.bluetooth.BluetoothDevice: java.lang.String getName()>
<com.android.bluetooth.hdp.HealthService: android.os.ParcelFileDescriptor getMainChannelFd(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)>
<com.android.bluetooth.btservice.AdapterService: java.lang.String getRemoteAlias(android.bluetooth.BluetoothDevice)>
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: int getAudioState(android.bluetooth.BluetoothDevice)>
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: int getDiscoverableTimeout()>
<android.bluetooth.BluetoothHeadset: int getAudioState(android.bluetooth.BluetoothDevice)>
<com.android.bluetooth.opp.BluetoothOppTransfer: int getBatchId()>
<android.bluetooth.IBluetoothPan$Stub$Proxy: java.util.List getDevicesMatchingConnectionStates(int[])>
<android.bluetooth.IBluetoothHealthCallback$Stub: android.os.IBinder asBinder()>
<com.android.bluetooth.a2dp.A2dpService: int getPriority(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothInputDevice: int getConnectionState(android.bluetooth.BluetoothDevice)>
<android.bluetooth.IBluetoothHealth$Stub$Proxy: java.util.List getConnectedHealthDevices()>
<com.android.bluetooth.hdp.HealthService: java.util.List getConnectedHealthDevices()>
<com.android.bluetooth.btservice.AdapterProperties: int getBluetoothClass()>
<com.android.bluetooth.btservice.RemoteDevices$DeviceProperties: java.lang.String getName()>
<android.bluetooth.BluetoothHealthAppConfiguration: java.lang.String getName()>
<com.android.server.BluetoothManagerService: java.lang.String getName()>
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: java.util.List getDevicesMatchingConnectionStates(int[])>
<android.bluetooth.BluetoothPan: boolean isTetheringOn()>
<com.android.bluetooth.btservice.RemoteDevices$DeviceProperties: int getBondState()>
<com.android.bluetooth.pbap.BluetoothPbapCallLogComposer: int getCount()>
<com.android.bluetooth.btservice.AdapterService: int getRemoteClass(android.bluetooth.BluetoothDevice)>
<com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder: java.util.List getDevicesMatchingConnectionStates(int[])>
<com.android.bluetooth.btservice.AdapterProperties: android.bluetooth.BluetoothDevice[] getBondedDevices()>
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: int getAdapterConnectionState()>
<android.bluetooth.IBluetooth$Stub$Proxy: int getProfileConnectionState(int)>
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: android.bluetooth.BluetoothDevice[] getBondedDevices()>
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingRfcommWithServiceRecord(java.lang.String,java.util.UUID)>
<android.bluetooth.IBluetoothCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.bluetooth.BluetoothSocket: int getPort()>
<android.bluetooth.BluetoothSocket: android.bluetooth.BluetoothSocket accept(int)>
<com.android.bluetooth.a2dp.A2dpService: com.android.bluetooth.a2dp.A2dpService getA2dpService()>
<com.android.bluetooth.btservice.AdapterService: com.android.bluetooth.btservice.AdapterService getAdapterService()>
<android.bluetooth.BluetoothSocket: android.bluetooth.BluetoothDevice getRemoteDevice()>
<com.android.bluetooth.opp.BluetoothOppPreference: com.android.bluetooth.opp.BluetoothOppPreference getInstance(android.content.Context)>
<com.android.bluetooth.btservice.RemoteDevices$DeviceProperties: short getRssi()>
<android.bluetooth.BluetoothAdapter: android.os.ParcelUuid[] getUuids()>
<com.android.bluetooth.pan.PanService: int getConnectionState(android.bluetooth.BluetoothDevice)>
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: java.util.List getConnectedDevices()>
<com.android.bluetooth.a2dp.A2dpService: java.util.List getConnectedDevices()>
<android.bluetooth.IBluetoothHeadsetPhone$Stub$Proxy: java.lang.String getSubscriberNumber()>
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: java.util.ArrayList getContactNamesByNumber(java.lang.String)>
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: java.util.List getConnectedDevices()>
<android.bluetooth.BluetoothInputDevice: java.util.List getDevicesMatchingConnectionStates(int[])>
<com.android.bluetooth.pan.PanService: java.util.List getConnectedDevices()>
<android.bluetooth.BluetoothClass: int getDeviceClass()>
<android.bluetooth.BluetoothAdapter: android.bluetooth.IBluetoothManager getBluetoothManager()>
<com.android.bluetooth.btservice.RemoteDevices: android.bluetooth.BluetoothDevice getDevice(byte[])>
<android.bluetooth.IBluetooth$Stub$Proxy: android.bluetooth.BluetoothDevice[] getBondedDevices()>
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: int getPriority(android.bluetooth.BluetoothDevice)>
<com.android.bluetooth.hid.HidService: boolean getReport(android.bluetooth.BluetoothDevice,byte,byte,int)>
<android.bluetooth.BluetoothA2dp: java.util.List getDevicesMatchingConnectionStates(int[])>
<android.bluetooth.IBluetoothManager$Stub: android.os.IBinder asBinder()>
<android.bluetooth.BluetoothAdapter: int getProfileConnectionState(int)>
<com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder: java.util.List getConnectedDevices()>
<android.bluetooth.IBluetooth$Stub$Proxy: java.lang.String getName()>
<com.android.bluetooth.btservice.AdapterProperties: android.os.ParcelUuid[] getUuids()>
<android.bluetooth.BluetoothPan: java.util.List getConnectedDevices()>
<com.android.bluetooth.btservice.AdapterService: android.bluetooth.BluetoothDevice[] getBondedDevices()>
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.android.bluetooth.btservice.AdapterService: java.lang.String getAddress()>
<com.android.bluetooth.btservice.AdapterProperties: int getScanMode()>
<android.bluetooth.IBluetooth$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetherableBluetoothRegexs()>
<com.android.bluetooth.hfp.HeadsetPhoneState: int getNumHeldCall()>
<android.bluetooth.BluetoothInputDevice: boolean getProtocolMode(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothHealthAppConfiguration: int getDataType()>
<com.android.bluetooth.btservice.ProfileService: java.lang.String getName()>
<com.android.bluetooth.hfp.HeadsetPhoneState: int getMicVolume()>
<com.android.bluetooth.hfp.HeadsetPhoneState: int getService()>
<android.bluetooth.IBluetoothHealth$Stub$Proxy: java.util.List getHealthDevicesMatchingConnectionStates(int[])>
<com.android.bluetooth.btservice.AdapterProperties: int getDiscoverableTimeout()>
<android.bluetooth.IBluetoothManager$Stub$Proxy: java.lang.String getName()>
<android.bluetooth.BluetoothAdapter: java.lang.String getAddress()>
<com.android.bluetooth.btservice.AdapterProperties: int getState()>
<android.bluetooth.BluetoothA2dp: int getPriority(android.bluetooth.BluetoothDevice)>
<com.android.bluetooth.hfp.HeadsetService: int getAudioState(android.bluetooth.BluetoothDevice)>
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: java.util.List getConnectedDevices()>
<android.bluetooth.BluetoothHealth: java.util.List getDevicesMatchingConnectionStates(int[])>
<android.bluetooth.BluetoothDevice: boolean getTrustState()>
<android.bluetooth.IBluetooth$Stub$Proxy: int getScanMode()>
<android.bluetooth.IBluetoothHealth$Stub$Proxy: android.os.ParcelFileDescriptor getMainChannelFd(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)>
<android.bluetooth.BluetoothA2dp: java.util.List getConnectedDevices()>
<com.android.bluetooth.opp.BluetoothOppReceiveFileInfo: com.android.bluetooth.opp.BluetoothOppReceiveFileInfo generateFileInfo(android.content.Context,int)>
<android.bluetooth.BluetoothAdapter: int getState()>
<android.bluetooth.BluetoothHeadset: int getPriority(android.bluetooth.BluetoothDevice)>
<android.bluetooth.IBluetooth$Stub$Proxy: java.lang.String getRemoteAlias(android.bluetooth.BluetoothDevice)>
<com.android.bluetooth.hfp.HeadsetStateMachine: java.util.List getDevicesMatchingConnectionStates(int[])>
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: int getConnectionState(android.bluetooth.BluetoothDevice)>
<android.bluetooth.IBluetoothManagerCallback$Stub: android.os.IBinder asBinder()>
<android.bluetooth.BluetoothHealthAppConfiguration: int getChannelType()>
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: java.util.List getConnectedDevices()>
<android.bluetooth.IBluetoothPan$Stub: android.os.IBinder asBinder()>
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: java.lang.String getRemoteAlias(android.bluetooth.BluetoothDevice)>
<android.bluetooth.IBluetoothHealth$Stub: android.os.IBinder asBinder()>
<com.android.bluetooth.pan.PanService: java.util.List getDevicesMatchingConnectionStates(int[])>
<com.android.bluetooth.btservice.RemoteDevices$DeviceProperties: int getBluetoothClass()>
<android.bluetooth.IBluetoothPan$Stub$Proxy: java.util.List getConnectedDevices()>
<com.android.bluetooth.opp.BluetoothOppPreference: int getChannel(android.bluetooth.BluetoothDevice,int)>
<android.bluetooth.BluetoothDevice: int getServiceChannel(android.os.ParcelUuid)>
<com.android.bluetooth.btservice.AdapterProperties: int getProfileConnectionState(int)>
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothDevice getRemoteDevice(byte[])>
<android.database.CursorWrapper: int getCount()>
<android.database.CursorToBulkCursorAdaptor: android.os.Bundle getExtras()>
<android.database.CursorWrapper: float getFloat(int)>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQueryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>
<android.database.MergeCursor: short getShort(int)>
<android.database.AbstractWindowedCursor: short getShort(int)>
<android.database.AbstractCursor: int getColumnCount()>
<android.database.sqlite.SQLiteDebug: android.database.sqlite.SQLiteDebug$PagerStats getDatabaseInfo()>
<android.database.sqlite.SQLiteConnection: int getConnectionId()>
<android.database.sqlite.SQLiteDatabase: java.util.Map getSyncedTables()>
<android.database.CursorWrapper: int getColumnIndexOrThrow(java.lang.String)>
<android.database.MergeCursor: int getCount()>
<android.database.AbstractWindowedCursor: java.lang.String getString(int)>
<android.database.AbstractWindowedCursor: double getDouble(int)>
<android.database.sqlite.SQLiteOpenHelper: java.lang.String getDatabaseName()>
<android.database.AbstractCursor: android.net.Uri getNotificationUri()>
<android.database.sqlite.SQLiteDatabase: int getVersion()>
<android.database.MatrixCursor: byte[] getBlob(int)>
<android.database.CursorWindow: double getDouble(int,int)>
<android.database.sqlite.SQLiteGlobal: int getJournalSizeLimit()>
<android.database.MatrixCursor: int getType(int)>
<android.database.BulkCursorToCursorAdaptor: java.lang.String[] getColumnNames()>
<android.database.sqlite.SQLiteProgram: java.lang.Object[] getBindArgs()>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[],android.os.CancellationSignal)>
<android.database.MergeCursor: byte[] getBlob(int)>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[])>
<android.database.AbstractWindowedCursor: int getInt(int)>
<android.database.MergeCursor: int getType(int)>
<android.database.sqlite.SQLiteGlobal: int getWALConnectionPoolSize()>
<android.database.CursorWrapper: int getType(int)>
<android.database.MatrixCursor: java.lang.String[] getColumnNames()>
<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()>
<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>
<android.database.MergeCursor: long getLong(int)>
<android.database.CursorWindow: long getLong(int,int)>
<android.database.sqlite.SQLiteCursor: int getColumnIndex(java.lang.String)>
<android.database.sqlite.SQLiteQueryBuilder: java.lang.String getTables()>
<com.android.providers.telephony.MmsSmsDatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>
<android.database.AbstractWindowedCursor: android.database.CursorWindow getWindow()>
<android.database.AbstractWindowedCursor: byte[] getBlob(int)>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor queryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.database.sqlite.SQLiteDatabase: long getMaximumSize()>
<android.database.ContentObserver: android.database.IContentObserver releaseContentObserver()>
<android.database.sqlite.SQLiteCursor: android.database.sqlite.SQLiteDatabase getDatabase()>
<android.database.AbstractCursor: java.lang.String getColumnName(int)>
<android.database.sqlite.SQLiteDatabase$1: android.database.sqlite.SQLiteSession initialValue()>
<com.android.providers.calendar.CalendarDatabaseHelper: com.android.common.content.SyncStateContentProviderHelper getSyncState()>
<android.database.MergeCursor: java.lang.String[] getColumnNames()>
<android.database.MatrixCursor: int getInt(int)>
<android.database.CursorWindow: android.database.CursorWindow newFromParcel(android.os.Parcel)>
<android.database.BulkCursorToCursorAdaptor: int getCount()>
<android.database.AbstractCursor: boolean getWantsAllOnMoveCalls()>
<android.database.MatrixCursor: long getLong(int)>
<android.database.sqlite.SqliteWrapper: android.net.Uri insert(android.content.Context,android.content.ContentResolver,android.net.Uri,android.content.ContentValues)>
<android.database.sqlite.SQLiteQueryBuilder: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>
<android.database.MatrixCursor: short getShort(int)>
<android.database.MergeCursor: int getInt(int)>
<android.database.CursorWrapper: int getColumnCount()>
<android.database.AbstractCursor: int getColumnIndexOrThrow(java.lang.String)>
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteSession getThreadSession()>
<android.database.AbstractCursor: byte[] getBlob(int)>
<android.database.CursorWrapper: long getLong(int)>
<android.database.CursorWindow: short getShort(int,int)>
<android.database.sqlite.SQLiteProgram: java.lang.String getSql()>
<android.database.MergeCursor: java.lang.String getString(int)>
<android.database.BulkCursorToCursorAdaptor: android.database.IContentObserver getObserver()>
<android.database.CursorWrapper: android.os.Bundle getExtras()>
<android.database.MergeCursor: float getFloat(int)>
<android.database.CursorWrapper: int getPosition()>
<android.database.BulkCursorProxy: android.os.Bundle getExtras()>
<android.database.AbstractCursor: int getColumnIndex(java.lang.String)>
<android.database.sqlite.SQLiteGlobal: java.lang.String getDefaultJournalMode()>
<android.database.CursorWrapper: byte[] getBlob(int)>
<android.database.sqlite.SQLiteProgram: int getConnectionFlags()>
<android.database.CursorWindow: int getStartPosition()>
<android.database.sqlite.SQLiteCursor: java.lang.String[] getColumnNames()>
<android.database.CursorWindow: int getInt(int,int)>
<android.database.sqlite.SQLiteGlobal: int getDefaultPageSize()>
<android.database.sqlite.SQLiteDatabase: java.util.ArrayList getDbStats()>
<android.database.sqlite.SQLiteGlobal: int getWALAutoCheckpoint()>
<android.database.sqlite.SQLiteDatabase: long getPageSize()>
<android.database.sqlite.SQLiteGlobal: java.lang.String getWALSyncMode()>
<android.database.CursorWrapper: double getDouble(int)>
<android.database.sqlite.SQLiteProgram: android.database.sqlite.SQLiteDatabase getDatabase()>
<android.database.CrossProcessCursorWrapper: android.database.CursorWindow getWindow()>
<android.database.sqlite.SQLiteProgram: android.database.sqlite.SQLiteSession getSession()>
<android.database.AbstractCursor: android.os.Bundle getExtras()>
<android.database.MatrixCursor: int getCount()>
<android.database.CursorWrapper: int getInt(int)>
<android.database.ContentObserver: android.database.IContentObserver getContentObserver()>
<android.database.BulkCursorToCursorAdaptor: android.os.Bundle getExtras()>
<android.database.MergeCursor: double getDouble(int)>
<android.database.CursorWrapper: int getColumnIndex(java.lang.String)>
<android.database.IContentObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.database.IContentObserver$Stub: android.os.IBinder asBinder()>
<android.database.sqlite.SQLiteConnection: byte[] access$500()>
<android.database.CursorWindow: byte[] getBlob(int,int)>
<android.database.sqlite.SQLiteDatabase: java.util.List getAttachedDbs()>
<android.database.CursorWrapper: android.database.Cursor getWrappedCursor()>
<android.database.sqlite.SQLiteDatabase: java.lang.String getLabel()>
<android.database.MatrixCursor: float getFloat(int)>
<android.database.AbstractCursor: android.database.CursorWindow getWindow()>
<android.database.AbstractWindowedCursor: float getFloat(int)>
<android.database.BulkCursorNative: android.os.IBinder asBinder()>
<android.database.CursorWrapper: java.lang.String getString(int)>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.database.CursorWrapper: short getShort(int)>
<android.database.CursorWindow: java.lang.String getName()>
<android.database.sqlite.SQLiteQueryBuilder: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.database.MatrixCursor: double getDouble(int)>
<android.database.DatabaseUtils$InsertHelper: int getColumnIndex(java.lang.String)>
<android.database.CursorWindow: int getType(int,int)>
<android.database.CursorWrapper: java.lang.String getColumnName(int)>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>
<android.database.sqlite.SQLiteCursor: int getCount()>
<android.database.sqlite.SQLiteProgram: int getUniqueId()>
<android.database.AbstractWindowedCursor: int getType(int)>
<android.database.CursorWrapper: boolean getWantsAllOnMoveCalls()>
<android.database.AbstractWindowedCursor: long getLong(int)>
<android.database.sqlite.SQLiteDatabase: java.lang.String getPath()>
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteSession createSession()>
<android.database.CursorWrapper: java.lang.String[] getColumnNames()>
<android.database.DatabaseUtils: java.lang.String getHexCollationKey(java.lang.String)>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.database.CursorWindow: int getNumRows()>
<android.database.sqlite.SQLiteProgram: java.lang.String[] getColumnNames()>
<android.database.CursorWindow: java.lang.String getString(int,int)>
<android.database.BulkCursorProxy: android.database.CursorWindow getWindow(int)>
<android.database.CursorToBulkCursorAdaptor: android.database.BulkCursorDescriptor getBulkCursorDescriptor()>
<android.database.sqlite.SQLiteGlobal: java.lang.String getDefaultSyncMode()>
<android.database.AbstractCursor: int getPosition()>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.CancellationSignal)>
<android.database.CursorWindow: float getFloat(int,int)>
<android.database.AbstractCursor: java.lang.Object getUpdatedField(int)>
<android.database.CursorToBulkCursorAdaptor: android.database.CursorWindow getWindow(int)>
<android.database.AbstractCursor: int getType(int)>
<com.android.providers.contacts.ContactsDatabaseHelper: com.android.common.content.SyncStateContentProviderHelper getSyncState()>
<android.database.sqlite.SQLiteConnection: java.lang.String describeCurrentOperationUnsafe()>
<android.database.DatabaseUtils: java.lang.String getCollationKey(java.lang.String)>
<android.database.MatrixCursor: java.lang.String getString(int)>
<android.database.sqlite.SqliteWrapper: android.database.Cursor query(android.content.Context,android.content.ContentResolver,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<android.database.sqlite.SQLiteDatabase: int getThreadDefaultConnectionFlags(boolean)>
<com.android.email.activity.MessagesAdapter$SearchResultsCursor: com.android.emailcommon.provider.Mailbox getSearchedMailbox()>
<com.android.email.FolderProperties: int getMessageCountForCombinedMailbox(android.content.Context,long)>
<com.android.email.activity.EmailActivity: android.content.Intent createOpenAccountIntent(android.app.Activity,long)>
<com.android.email.activity.Welcome: android.content.Intent createOpenAccountInboxIntent(android.content.Context,long)>
<com.android.email.Controller: long findOrCreateMailboxOfType(long,int)>
<com.android.email.RefreshManager: boolean isRefreshingAnyMailboxListForTest()>
<com.android.emailcommon.provider.Mailbox: com.android.emailcommon.provider.Mailbox restoreMailboxOfType(android.content.Context,long,int)>
<com.android.email.activity.UIControllerBase: long getMailboxListMailboxId()>
<com.android.email.activity.AccountSelectorAdapter$CursorWithExtras: java.lang.String getMailboxDisplayName()>
<com.android.email.activity.UIControllerBase: long getMessageListMailboxId()>
<com.android.email.activity.EmailActivity: android.content.Intent createOpenMailboxIntent(android.app.Activity,long,long)>
<com.android.email.activity.MailboxListFragment: long getInitialCurrentMailboxId()>
<com.android.email.activity.MessageListFragment: com.android.emailcommon.provider.Mailbox getSearchedMailbox()>
<com.android.email.RefreshManager: com.android.email.RefreshManager$Status getMailboxListStatusForTest(long)>
<com.android.email.activity.EmailActivity: android.content.Intent createOpenMessageIntent(android.app.Activity,long,long,long)>
<com.android.email.widget.EmailWidgetLoader$WidgetCursor: java.lang.String getMailboxName()>
<com.android.email.widget.WidgetManager: long loadMailboxIdPref(android.content.Context,int)>
<com.android.email.activity.UIControllerOnePane$ActionBarControllerCallback: long getMailboxId()>
<com.android.email.activity.Welcome: android.content.Intent createOpenMessageIntent(android.content.Context,long,long,long)>
<com.android.email.activity.AccountSelectorAdapter$CursorWithExtras: int getMailboxMessageCount()>
<com.android.email.MessageListContext: long getSearchedMailbox()>
<com.android.email.Controller: com.android.emailcommon.provider.Mailbox getAttachmentMailbox()>
<com.android.emailcommon.provider.Mailbox: com.android.emailcommon.provider.Mailbox restoreMailboxWithId(android.content.Context,long)>
<com.android.email.FolderProperties: java.lang.String getCombinedMailboxName(long)>
<com.android.email.activity.AccountSelectorAdapter$CursorWithExtras: int getRecentMailboxCount()>
<com.android.email.activity.UIControllerTwoPane: long getMailboxSettingsMailboxId()>
<com.android.email.RefreshManager: long getLastMailboxListRefreshTime(long)>
<com.android.email.activity.UIControllerSearchTwoPane: long getMailboxSettingsMailboxId()>
<com.android.email.activity.MailboxListFragment: long getSelectedMailboxId()>
<com.android.email.Controller: java.lang.String getMailboxServerName(android.content.Context,int)>
<com.android.email.activity.AccountSelectorAdapter$CursorWithExtras: long getMailboxId()>
<com.android.email.Controller: com.android.emailcommon.provider.Mailbox getSearchMailbox(long)>
<com.android.email.activity.MessageListFragment: long getMailboxId()>
<com.android.email.activity.UIControllerOnePane: long getMailboxSettingsMailboxId()>
<com.android.email.activity.UIControllerBase: com.android.email.activity.MailboxListFragment getMailboxListFragment()>
<com.android.email.activity.MessageListFragment: com.android.emailcommon.provider.Mailbox getMailbox()>
<com.android.emailcommon.provider.Mailbox: long findMailboxOfType(android.content.Context,long,int)>
<com.android.email.MessageListContext: long getMailboxId()>
<com.android.email.activity.UIControllerTwoPane$ActionBarControllerCallback: long getMailboxId()>
<android.content.ContentService: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)>
<com.android.emailcommon.TrafficFlags: int getSyncFlags(android.content.Context,com.android.emailcommon.provider.Account)>
<android.content.SyncStorageEngine: int getIsSyncable(android.accounts.Account,int,java.lang.String)>
<com.android.internal.telephony.DataConnectionAc: int getRefCountSync()>
<android.content.ContentService: android.content.SyncAdapterType[] getSyncAdapterTypes()>
<android.content.IContentService$Stub$Proxy: int getIsSyncable(android.accounts.Account,java.lang.String)>
<com.android.exchange.ExchangeService$AccountObserver: java.lang.String getSyncableEasMailboxWhere()>
<com.android.internal.telephony.DataConnectionAc: java.util.Collection getApnListSync()>
<android.app.ContextImpl$ApplicationContentResolver: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)>
<android.content.IContentService$Stub$Proxy: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)>
<android.content.ContentResolver: java.util.List getCurrentSyncs()>
<android.content.SyncStorageEngine: int getSyncRandomOffset()>
<android.test.mock.MockContentResolver: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)>
<android.content.ContentService: int getIsSyncable(android.accounts.Account,java.lang.String)>
<com.android.providers.contacts.TransactionContext: java.util.Set getUpdatedSyncStates()>
<android.content.SyncStorageEngine: java.util.ArrayList getSyncHistory()>
<com.android.exchange.adapter.ContactsSyncAdapter: java.lang.String getSyncKey()>
<android.content.SyncStorageEngine: java.util.ArrayList getSyncStatus()>
<android.content.SyncStorageEngine: android.content.SyncStatusInfo getOrCreateSyncStatus(android.content.SyncStorageEngine$AuthorityInfo)>
<com.android.mms.dom.smil.ElementParallelTimeContainerImpl: java.lang.String getEndSync()>
<android.content.SyncStatusInfo: long getPeriodicSyncTime(int)>
<android.content.ContentResolver: android.content.SyncInfo getCurrentSync()>
<com.android.exchange.adapter.AccountSyncAdapter: java.lang.String getSyncKey()>
<android.app.ContextImpl$ApplicationContentResolver: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)>
<com.android.server.BackupManagerService: android.app.IBackupAgent bindToAgentSynchronous(android.content.pm.ApplicationInfo,int)>
<com.android.internal.telephony.DataConnectionAc: com.android.internal.telephony.ApnSetting getApnSettingSync()>
<android.content.ContentResolver: android.content.SyncAdapterType[] getSyncAdapterTypes()>
<com.android.internal.telephony.DataConnectionAc: android.net.LinkCapabilities getLinkCapabilitiesSync()>
<android.content.ContentResolver: int getIsSyncable(android.accounts.Account,java.lang.String)>
<android.os.CommonTimeConfig: int getClientSyncInterval()>
<android.content.ContentResolver: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)>
<com.google.android.picasasync.PicasaFacade: android.net.Uri getSyncRequestUri()>
<android.test.mock.MockContentResolver: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)>
<android.content.ContentResolver: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)>
<com.android.contacts.list.CustomContactListFilterActivity: int getSyncMode(com.android.contacts.list.CustomContactListFilterActivity$AccountDisplay)>
<com.android.providers.calendar.CalendarInstancesHelper: java.lang.String getSyncIdKey(java.lang.String,long)>
<android.test.mock.MockContentResolver: int getIsSyncable(android.accounts.Account,java.lang.String)>
<com.android.exchange.adapter.ProvisionParser: java.lang.String getSecuritySyncKey()>
<android.content.IContentService$Stub$Proxy: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)>
<android.content.SyncStorageEngine: java.util.List getPeriodicSyncs(android.accounts.Account,int,java.lang.String)>
<android.test.mock.MockContentResolver: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)>
<android.content.SyncManager: android.content.SyncAdapterType[] getSyncAdapterTypes(int)>
<android.content.IContentService$Stub$Proxy: android.content.SyncAdapterType[] getSyncAdapterTypes()>
<com.android.exchange.adapter.AbstractSyncAdapter: java.lang.String getSyncKey()>
<com.android.exchange.AbstractSyncService: java.lang.Object getSynchronizer()>
<android.content.SyncManager: android.content.SyncStorageEngine getSyncStorageEngine()>
<com.android.providers.calendar.SQLiteContentProvider: boolean getIsCallerSyncAdapter(android.net.Uri)>
<com.android.exchange.adapter.EmailSyncAdapter: java.lang.String getSyncKey()>
<android.app.ContextImpl$ApplicationContentResolver: int getIsSyncable(android.accounts.Account,java.lang.String)>
<android.content.SyncContext: android.os.IBinder getSyncContextBinder()>
<com.android.gallery3d.picasasource.PicasaAlbumSet$PicasaSyncTaskFuture: int getSyncResult()>
<android.content.IContentService$Stub$Proxy: java.util.List getCurrentSyncs()>
<com.android.contacts.util.AsyncTaskExecutors: com.android.contacts.util.AsyncTaskExecutor createAsyncTaskExecutor()>
<com.android.internal.telephony.DataConnectionAc: android.app.PendingIntent getReconnectIntentSync()>
<com.android.exchange.adapter.PingParser: int getSyncStatus()>
<android.app.ContextImpl$ApplicationContentResolver: android.content.SyncInfo getCurrentSync()>
<com.android.email.Preferences: boolean getHasShownRequireManualSync(android.content.Context,com.android.emailcommon.provider.Account)>
<com.android.internal.telephony.DataConnectionAc: int getCidSync()>
<android.content.BroadcastReceiver: android.content.BroadcastReceiver$PendingResult goAsync()>
<com.android.server.display.DisplayAdapter: com.android.server.display.DisplayManagerService$SyncRoot getSyncRoot()>
<android.content.SyncStorageEngine: java.util.List getCurrentSyncs(int)>
<com.android.exchange.adapter.PingParser: java.util.ArrayList getSyncList()>
<android.content.AbstractThreadedSyncAdapter: android.os.IBinder getSyncAdapterBinder()>
<android.content.IContentService$Stub$Proxy: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)>
<android.webkit.WebStorageClassic: java.util.Collection getOriginsSync()>
<android.test.mock.MockContentResolver: android.content.SyncInfo getCurrentSync()>
<com.android.email.activity.MessageViewFragmentBase: com.android.emailcommon.provider.EmailContent$Message reloadMessageSync(android.app.Activity)>
<android.content.ContentService: java.util.List getCurrentSyncs()>
<com.android.exchange.adapter.CalendarSyncAdapter: java.lang.String getSyncKey()>
<android.net.wifi.WifiStateMachine: java.util.List syncGetScanResultsList()>
<com.android.internal.telephony.DataConnectionAc: android.net.LinkProperties getLinkPropertiesSync()>
<com.android.contacts.list.CustomContactListFilterActivity$GroupDelta: boolean getShouldSync()>
<com.android.mms.ui.ComposeMessageActivity: com.android.mms.ui.AsyncDialog getAsyncDialog()>
<android.content.ContentService: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)>
<android.content.ContentResolver: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)>
<android.provider.Telephony$Mms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],java.lang.String,java.lang.String)>
<com.google.android.mms.pdu.PduBody: com.google.android.mms.pdu.PduPart getPartByFileName(java.lang.String)>
<com.google.android.mms.util.AbstractCache: java.lang.Object get(java.lang.Object)>
<com.google.android.mms.pdu.NotificationInd: long getExpiry()>
<com.google.android.mms.pdu.PduHeaders: byte[] getTextString(int)>
<android.provider.Telephony$Mms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[])>
<com.google.android.mms.pdu.DeliveryInd: long getDate()>
<com.google.android.mms.pdu.PduBody: int getPartIndex(com.google.android.mms.pdu.PduPart)>
<com.google.android.mms.pdu.GenericPdu: com.google.android.mms.pdu.EncodedStringValue getFrom()>
<com.google.android.mms.pdu.PduPart: byte[] getData()>
<com.google.android.mms.pdu.ReadOrigInd: int getReadStatus()>
<com.google.android.mms.pdu.RetrieveConf: byte[] getTransactionId()>
<com.google.android.mms.pdu.RetrieveConf: com.google.android.mms.pdu.EncodedStringValue getRetrieveText()>
<com.google.android.mms.pdu.SendReq: byte[] getTransactionId()>
<com.google.android.mms.pdu.PduPart: byte[] getContentDisposition()>
<com.google.android.mms.pdu.ReadRecInd: long getDate()>
<com.google.android.mms.pdu.PduParser: byte[] getWapString(java.io.ByteArrayInputStream,int)>
<com.google.android.mms.pdu.NotificationInd: com.google.android.mms.pdu.EncodedStringValue getFrom()>
<com.google.android.mms.pdu.PduParser: com.google.android.mms.pdu.PduHeaders parseHeaders(java.io.ByteArrayInputStream)>
<com.google.android.mms.pdu.SendReq: com.google.android.mms.pdu.EncodedStringValue[] getCc()>
<com.google.android.mms.pdu.MultimediaMessagePdu: long getDate()>
<com.google.android.mms.pdu.SendConf: byte[] getTransactionId()>
<com.google.android.mms.pdu.SendConf: int getResponseStatus()>
<com.google.android.mms.pdu.PduBody: com.google.android.mms.pdu.PduPart getPartByContentId(java.lang.String)>
<com.google.android.mms.pdu.GenericPdu: int getMessageType()>
<com.google.android.mms.pdu.ReadOrigInd: byte[] getMessageId()>
<com.google.android.mms.pdu.NotificationInd: int getDeliveryReport()>
<com.google.android.mms.pdu.AcknowledgeInd: int getReportAllowed()>
<com.google.android.mms.pdu.NotificationInd: byte[] getMessageClass()>
<com.google.android.mms.pdu.PduPersister: android.database.Cursor getPendingMessages(long)>
<com.google.android.mms.pdu.MultimediaMessagePdu: int getPriority()>
<com.google.android.mms.pdu.SendReq: int getDeliveryReport()>
<com.google.android.mms.pdu.ReadRecInd: byte[] getMessageId()>
<com.google.android.mms.pdu.EncodedStringValue: byte[] getTextString()>
<com.google.android.mms.pdu.ReadOrigInd: long getDate()>
<com.google.android.mms.pdu.PduBody: com.google.android.mms.pdu.PduPart getPartByContentLocation(java.lang.String)>
<com.google.android.mms.pdu.SendReq: byte[] getContentType()>
<com.google.android.mms.pdu.RetrieveConf: com.google.android.mms.pdu.EncodedStringValue getFrom()>
<com.google.android.mms.pdu.RetrieveConf: byte[] getMessageClass()>
<com.google.android.mms.pdu.PduHeaders: long getLongInteger(int)>
<com.google.android.mms.pdu.NotifyRespInd: byte[] getTransactionId()>
<com.google.android.mms.pdu.SendReq: long getExpiry()>
<com.google.android.mms.util.PduCacheEntry: long getThreadId()>
<com.google.android.mms.pdu.SendReq: com.google.android.mms.pdu.EncodedStringValue[] getBcc()>
<com.google.android.mms.pdu.EncodedStringValue: int getCharacterSet()>
<com.google.android.mms.ContentType: java.util.ArrayList getImageTypes()>
<com.google.android.mms.ContentType: java.util.ArrayList getAudioTypes()>
<com.google.android.mms.pdu.RetrieveConf: com.google.android.mms.pdu.EncodedStringValue[] getCc()>
<com.google.android.mms.pdu.NotificationInd: byte[] getContentLocation()>
<com.google.android.mms.util.PduCacheEntry: int getMessageBox()>
<com.google.android.mms.pdu.PduPart: byte[] getName()>
<com.google.android.mms.pdu.SendConf: byte[] getMessageId()>
<com.google.android.mms.pdu.PduPart: int getCharset()>
<com.google.android.mms.pdu.DeliveryInd: byte[] getMessageId()>
<com.google.android.mms.pdu.ReadRecInd: int getReadStatus()>
<com.google.android.mms.pdu.NotificationInd: int getContentClass()>
<com.google.android.mms.pdu.RetrieveConf: byte[] getContentType()>
<com.google.android.mms.pdu.PduHeaders: int getOctet(int)>
<com.google.android.mms.pdu.SendReq: byte[] getMessageClass()>
<com.google.android.mms.pdu.AcknowledgeInd: byte[] getTransactionId()>
<com.google.android.mms.pdu.ReadOrigInd: com.google.android.mms.pdu.EncodedStringValue[] getTo()>
<com.google.android.mms.pdu.MultimediaMessagePdu: com.google.android.mms.pdu.PduBody getBody()>
<com.google.android.mms.pdu.NotificationInd: com.google.android.mms.pdu.EncodedStringValue getSubject()>
<com.google.android.mms.pdu.PduPart: byte[] getContentId()>
<com.google.android.mms.util.SqliteWrapper: android.database.Cursor query(android.content.Context,android.content.ContentResolver,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<com.google.android.mms.util.SqliteWrapper: android.net.Uri insert(android.content.Context,android.content.ContentResolver,android.net.Uri,android.content.ContentValues)>
<com.google.android.mms.pdu.PduPart: byte[] getContentType()>
<com.google.android.mms.pdu.NotificationInd: byte[] getTransactionId()>
<com.google.android.mms.pdu.NotifyRespInd: int getReportAllowed()>
<com.google.android.mms.util.PduCache: com.google.android.mms.util.PduCache getInstance()>
<com.google.android.mms.pdu.PduBody: int getPartsNum()>
<com.google.android.mms.pdu.SendReq: int getReadReport()>
<com.google.android.mms.pdu.ReadOrigInd: com.google.android.mms.pdu.EncodedStringValue getFrom()>
<com.android.providers.telephony.MmsProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<com.google.android.mms.pdu.RetrieveConf: int getDeliveryReport()>
<com.google.android.mms.pdu.PduHeaders: com.google.android.mms.pdu.EncodedStringValue getEncodedStringValue(int)>
<com.google.android.mms.pdu.SendReq: long getMessageSize()>
<com.google.android.mms.util.DrmConvertSession: byte[] convert(byte[],int)>
<com.google.android.mms.pdu.MultimediaMessagePdu: com.google.android.mms.pdu.EncodedStringValue getSubject()>
<com.google.android.mms.pdu.PduPart: byte[] getContentLocation()>
<com.google.android.mms.pdu.DeliveryInd: int getStatus()>
<com.google.android.mms.pdu.ReadRecInd: com.google.android.mms.pdu.EncodedStringValue[] getTo()>
<com.android.providers.telephony.MmsSmsProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<com.google.android.mms.pdu.NotificationInd: long getMessageSize()>
<com.google.android.mms.pdu.PduBody: com.google.android.mms.pdu.PduPart getPartByName(java.lang.String)>
<com.google.android.mms.pdu.DeliveryInd: com.google.android.mms.pdu.EncodedStringValue[] getTo()>
<com.google.android.mms.pdu.PduPart: android.net.Uri getDataUri()>
<com.google.android.mms.util.PduCacheEntry: com.google.android.mms.pdu.GenericPdu getPdu()>
<com.google.android.mms.pdu.PduPart: byte[] getContentTransferEncoding()>
<com.google.android.mms.pdu.RetrieveConf: byte[] getMessageId()>
<com.google.android.mms.ContentType: java.util.ArrayList getSupportedTypes()>
<com.google.android.mms.pdu.MultimediaMessagePdu: com.google.android.mms.pdu.EncodedStringValue[] getTo()>
<com.google.android.mms.pdu.NotifyRespInd: int getStatus()>
<com.google.android.mms.pdu.GenericPdu: int getMmsVersion()>
<com.google.android.mms.pdu.PduPersister: byte[] getBytes(java.lang.String)>
<com.google.android.mms.pdu.RetrieveConf: int getRetrieveStatus()>
<com.google.android.mms.pdu.RetrieveConf: int getReadReport()>
<com.google.android.mms.pdu.PduComposer$PositionMarker: int getLength()>
<com.google.android.mms.pdu.GenericPdu: com.google.android.mms.pdu.PduHeaders getPduHeaders()>
<com.google.android.mms.pdu.PduBody: com.google.android.mms.pdu.PduPart getPart(int)>
<com.google.android.mms.pdu.PduComposer: byte[] make()>
<com.google.android.mms.pdu.PduHeaders: com.google.android.mms.pdu.EncodedStringValue[] getEncodedStringValues(int)>
<com.google.android.mms.pdu.PduPersister: com.google.android.mms.pdu.PduPersister getPduPersister(android.content.Context)>
<com.google.android.mms.pdu.Base64: byte[] discardNonBase64(byte[])>
<com.google.android.mms.ContentType: java.util.ArrayList getVideoTypes()>
<com.google.android.mms.pdu.PduPart: byte[] getFilename()>
<com.android.contacts.util.StreamItemEntry: long getId()>
<com.android.contacts.model.account.AccountType: java.lang.String getViewGroupActivity()>
<com.android.contacts.widget.IndexerListAdapter: int getPinnedHeaderCount()>
<com.android.contacts.widget.IndexerListAdapter: int getPositionForSection(int)>
<com.android.contacts.model.account.BaseAccountType$NicknameKindBuilder: java.lang.String getTagName()>
<com.android.contacts.model.AccountTypeManagerImpl: com.android.contacts.model.dataitem.DataKind getKindOrFallback(java.lang.String,java.lang.String,java.lang.String)>
<com.android.contacts.ContactPresenceIconUtil: android.graphics.drawable.Drawable getPresenceIcon(android.content.Context,int)>
<com.android.vcard.VCardUtils: java.lang.String getPropertyNameForIm(int)>
<com.android.contacts.activities.ActionBarAdapter: int getCurrentTab()>
<com.android.contacts.model.account.BaseAccountType$NameKindBuilder: java.lang.String getTagName()>
<com.android.contacts.list.LegacyContactListAdapter: android.net.Uri getPersonUri(int)>
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<com.android.contacts.model.account.AccountType: java.lang.CharSequence getResourceText(android.content.Context,java.lang.String,int,java.lang.String)>
<com.android.contacts.model.account.ExternalAccountType: java.lang.String getEditContactActivityClassName()>
<com.android.contacts.group.GroupEditorFragment$MemberListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.contacts.util.ExpirableCache: com.android.contacts.util.ExpirableCache$CachedValue getCachedValue(java.lang.Object)>
<com.android.contacts.editor.EventFieldEditorView: android.app.Dialog createDialog(android.os.Bundle)>
<com.android.contacts.list.ContactEntryListAdapter: int getViewTypeCount()>
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.String getPhoneticGivenName()>
<com.android.contacts.detail.StreamItemAdapter: java.lang.Object getItem(int)>
<com.android.contacts.list.CustomContactListFilterActivity$DisplayAdapter: android.view.View getChildView(int,int,boolean,android.view.View,android.view.ViewGroup)>
<com.android.contacts.model.RawContactDeltaList: com.android.contacts.model.RawContactDeltaList fromQuery(android.net.Uri,android.content.ContentResolver,java.lang.String,java.lang.String[],java.lang.String)>
<android.provider.Contacts$People: long tryGetMyContactsGroupId(android.content.ContentResolver)>
<com.android.contacts.model.Contact: java.util.ArrayList getContentValues()>
<com.android.contacts.preference.ContactsPreferences: int getDefaultDisplayOrder()>
<com.android.contacts.model.RawContactDeltaList: com.android.contacts.model.RawContactDelta getByRawContactId(java.lang.Long)>
<com.android.contacts.model.account.BaseAccountType$CommonInflater: java.lang.String toString()>
<com.android.contacts.interactions.ContactDeletionInteraction: android.app.LoaderManager getLoaderManager()>
<com.android.contacts.editor.LabeledEditorView: com.android.contacts.model.dataitem.DataKind getKind()>
<com.android.providers.contacts.ContactsDatabaseHelper: long getMimeTypeId(java.lang.String)>
<com.android.contacts.model.dataitem.StructuredPostalDataItem: java.lang.String getFormattedAddress()>
<com.android.contacts.calllog.IntentProvider: com.android.contacts.calllog.IntentProvider getCallDetailIntentProvider(com.android.contacts.calllog.CallLogAdapter,int,long,int)>
<com.android.providers.contacts.ContactLocaleUtils$ContactLocaleUtilsBase: java.util.Iterator getNameLookupKeys(java.lang.String)>
<com.android.contacts.editor.ContactEditorUtils: com.android.contacts.model.account.AccountWithDataSet getCreatedAccount(int,android.content.Intent)>
<com.android.contacts.interactions.TestLoaderManager: android.content.Loader restartLoader(int,android.os.Bundle,android.app.LoaderManager$LoaderCallbacks)>
<com.android.contacts.list.ContactsRequest: java.lang.CharSequence getActivityTitle()>
<com.android.contacts.dialpad.DialpadFragment$DialpadChooserAdapter: int getCount()>
<com.android.contacts.model.account.AccountType: com.android.contacts.model.account.AccountTypeWithDataSet getAccountTypeAndDataSet()>
<com.android.contacts.detail.ContactDetailFragment$ViewAdapter: int getViewTypeCount()>
<com.android.contacts.model.account.AccountTypeWithDataSet: com.android.contacts.model.account.AccountTypeWithDataSet get(java.lang.String,java.lang.String)>
<com.android.contacts.calllog.IntentProvider: com.android.contacts.calllog.IntentProvider getPlayVoicemailIntentProvider(long,java.lang.String)>
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.String getPhoneticMiddleName()>
<com.android.contacts.model.RawContact: com.android.contacts.model.account.AccountType getAccountType()>
<com.android.contacts.model.Contact: com.google.common.collect.ImmutableList getStreamItems()>
<com.android.contacts.editor.GroupMembershipView$GroupSelectionItem: long getGroupId()>
<com.android.contacts.ContactsUtils: android.content.Intent getInvitableIntent(com.android.contacts.model.account.AccountType,android.net.Uri)>
<com.android.contacts.list.ContactListFilterController: com.android.contacts.list.ContactListFilterController getInstance(android.content.Context)>
<com.android.contacts.list.ContactTileListFragment$2: int getApproximateTileWidth()>
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.String getAsString(java.lang.String)>
<com.android.contacts.editor.PhotoActionPopup$ChoiceListItem: int getId()>
<com.android.contacts.model.account.BaseAccountType$CommonInflater: java.lang.CharSequence getTypeLabel(android.content.res.Resources,java.lang.Integer,java.lang.CharSequence)>
<com.android.contacts.model.account.GoogleAccountType: java.lang.String getViewContactNotifyServicePackageName()>
<com.android.contacts.ContactsApplication: java.lang.Object getSystemService(java.lang.String)>
<com.android.providers.contacts.ProfileDatabaseHelper: com.android.providers.contacts.ProfileDatabaseHelper getInstance(android.content.Context)>
<com.android.contacts.editor.GroupMembershipView$GroupMembershipAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.contacts.SpecialCharSequenceMgr$SimContactQueryCookie: android.widget.EditText getTextField()>
<com.android.contacts.model.account.BaseAccountType$RelationActionInflater: int getTypeLabelResource(java.lang.Integer)>
<com.android.contacts.list.ContactEntryListAdapter: int getContactNameDisplayOrder()>
<com.android.contacts.list.ContactTileAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.contacts.model.RawContactDelta: com.android.contacts.model.account.AccountType getRawContactAccountType(android.content.Context)>
<com.android.contacts.detail.ContactDetailDisplayUtils: android.view.View addStreamItemText(android.content.Context,com.android.contacts.util.StreamItemEntry,android.view.View)>
<com.android.contacts.list.ContactEntryListAdapter: com.android.contacts.list.ContactListFilter getFilter()>
<com.android.contacts.model.account.ExchangeAccountType: com.android.contacts.model.dataitem.DataKind addDataKindWebsite(android.content.Context)>
<com.android.contacts.model.dataitem.PhotoDataItem: byte[] getPhoto()>
<com.android.providers.contacts.ProfileDatabaseHelper: com.android.providers.contacts.ProfileDatabaseHelper getNewInstanceForTest(android.content.Context)>
<com.android.contacts.model.account.BaseAccountType$PhoneKindBuilder: java.lang.String getTagName()>
<com.android.providers.contacts.PhotoProcessor: byte[] getThumbnailPhotoBytes()>
<com.android.providers.contacts.ReorderingCursorWrapper: int getInt(int)>
<com.android.contacts.list.PhoneFavoriteMergedAdapter: int getSectionForPosition(int)>
<com.android.vcard.VCardUtils: java.lang.String getPhoneTypeString(java.lang.Integer)>
<com.android.contacts.util.StreamItemEntry: java.lang.String getDataSet()>
<com.android.providers.contacts.VoicemailContentProvider$UriData: com.android.providers.contacts.VoicemailUriType getUriType()>
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(long,java.lang.String)>
<com.android.contacts.calllog.CallDetailHistoryAdapter: int getViewTypeCount()>
<com.android.providers.contacts.PhotoProcessor: byte[] getDisplayPhotoBytes()>
<com.android.contacts.list.ContactEntryListFragment: android.widget.ListView getListView()>
<com.android.contacts.list.ContactEntryListFragment: android.content.Loader onCreateLoader(int,android.os.Bundle)>
<com.android.contacts.dialog.ClearFrequentsDialog: android.app.Dialog onCreateDialog(android.os.Bundle)>
<com.android.providers.contacts.aggregation.util.ContactMatcher$MatchScore: int getScore()>
<com.android.contacts.model.RawContactDelta: java.lang.String getAccountName()>
<com.android.providers.contacts.AbstractContactsProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.String getMimetype()>
<com.android.contacts.interactions.ImportExportDialogFragment$1: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.contacts.detail.ContactDetailLayoutController: com.android.contacts.activities.ContactDetailActivity$FragmentKeyListener getCurrentPage()>
<com.android.contacts.list.ContactListItemView: android.widget.TextView getNameTextView()>
<com.android.providers.contacts.aggregation.util.ContactMatcher$MatchScore: long getContactId()>
<com.android.contacts.model.account.ExchangeAccountType: com.android.contacts.model.dataitem.DataKind addDataKindStructuredName(android.content.Context)>
<com.android.contacts.detail.ContactDetailDisplayUtils: java.lang.String getCompany(android.content.Context,com.android.contacts.model.Contact)>
<com.android.contacts.list.ContactListItemView: android.widget.TextView getDataView()>
<com.android.phone.ContactsAsyncHelper$ImageTracker: int getPhotoState()>
<com.android.contacts.model.account.ExchangeAccountType: com.android.contacts.model.dataitem.DataKind addDataKindStructuredPostal(android.content.Context)>
<com.android.contacts.model.AccountTypeManagerImpl: java.util.List getAccounts(boolean)>
<com.android.contacts.quickcontact.ResolveCache: java.lang.CharSequence getDescription(com.android.contacts.quickcontact.Action)>
<com.android.contacts.model.account.BaseAccountType$CommonInflater: java.lang.String getLabelColumn()>
<com.android.contacts.group.GroupListItem: java.lang.String getAccountName()>
<com.android.providers.contacts.util.DbQueryUtils: java.lang.String getEqualityClause(java.lang.String,java.lang.String)>
<com.android.providers.contacts.ContactDirectoryManager: com.android.providers.contacts.ContactsDatabaseHelper getDbHelper()>
<com.android.vcard.VCardEntry: java.lang.String getDisplayName()>
<com.android.contacts.list.DirectoryPartition: java.lang.String getDirectoryType()>
<com.android.contacts.calllog.CallTypeIconsView: int getCount()>
<com.android.contacts.editor.LabeledEditorView: com.android.contacts.model.account.AccountType$EditType getType()>
<com.android.contacts.util.StructuredPostalUtils: android.net.Uri getPostalAddressUri(java.lang.String)>
<com.android.contacts.model.RawContact: java.util.List getDataItems()>
<com.android.providers.contacts.ContactsProvider2: int getMaxDisplayPhotoDim()>
<com.android.contacts.ContactsApplication: android.content.ContentResolver getContentResolver()>
<com.android.contacts.interactions.PhoneNumberInteraction: android.content.CursorLoader getLoader()>
<com.android.contacts.interactions.GroupDeletionDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)>
<com.android.providers.contacts.ContactsDatabaseHelper: boolean getUseStrictPhoneNumberComparisonForTest()>
<com.android.contacts.list.PhoneFavoriteMergedAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<android.provider.ContactsContract$SyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)>
<com.android.contacts.list.ContactListAdapter: int getSelectedContactPosition()>
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.String getPhoneNumber()>
<com.android.contacts.list.JoinContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor)>
<com.android.contacts.util.StopWatch: com.android.contacts.util.StopWatch getNullStopWatch()>
<com.android.contacts.model.account.BaseAccountType$PostalActionInflater: int getTypeLabelResource(java.lang.Integer)>
<com.android.mms.data.Contact: byte[] access$1700(com.android.mms.data.Contact)>
<com.android.providers.contacts.ContactsProvider2: java.lang.ThreadLocal getTransactionHolder()>
<com.android.contacts.editor.LabeledEditorView: com.android.contacts.model.RawContactDelta$ValuesDelta getValues()>
<com.android.contacts.detail.ContactDetailDisplayUtils$StreamPhotoTag: android.net.Uri getStreamItemPhotoUri()>
<com.android.contacts.detail.ContactDetailDisplayUtils: java.lang.String getPhoneticName(android.content.Context,com.android.contacts.model.Contact)>
<com.android.contacts.model.AccountTypeManager: com.android.contacts.model.AccountTypeManager createAccountTypeManager(android.content.Context)>
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.IccSmsInterfaceManager getIccSmsInterfaceManager()>
<com.android.contacts.util.StreamItemEntry: java.lang.CharSequence getDecodedText()>
<com.android.contacts.model.account.GoogleAccountType: com.android.contacts.model.dataitem.DataKind addDataKindEmail(android.content.Context)>
<com.android.contacts.util.AccountsListAdapter: int getCount()>
<com.android.contacts.ContactsUtils: android.content.Intent getCallIntent(android.net.Uri)>
<com.android.contacts.quickcontact.QuickContactListFragment$1: long getItemId(int)>
<com.android.contacts.model.account.ExchangeAccountType: com.android.contacts.model.dataitem.DataKind addDataKindNote(android.content.Context)>
<com.android.common.contacts.BaseEmailAddressAdapter$DirectoryPartitionFilter: int getLimit()>
<com.android.contacts.detail.ContactDetailFragment$InvitableAccountTypesAdapter: com.android.contacts.model.account.AccountType getItem(int)>
<com.android.internal.telephony.PhoneProxy: boolean getIccRecordsLoaded()>
<com.android.contacts.list.ContactListItemView: android.widget.TextView getPhoneticNameTextView()>
<com.android.contacts.voicemail.VoicemailStatusHelperImpl: int getNumberActivityVoicemailSources(android.database.Cursor)>
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindStructuredName(android.content.Context)>
<com.android.contacts.list.PhoneFavoriteMergedAdapter: java.lang.Object[] getSections()>
<com.android.contacts.model.Contact: int getDirectoryExportSupport()>
<com.android.contacts.detail.ContactDetailFragment$InvitableAccountTypesAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.contacts.model.Contact: int getDisplayNameSource()>
<com.android.contacts.list.ContactEntryListFragment: android.view.View getView()>
<com.android.mms.data.Contact: com.android.mms.data.Contact get(java.lang.String,boolean)>
<com.android.contacts.model.RawContactDelta: java.lang.Long getRawContactId()>
<com.android.contacts.dialpad.DialpadFragment$DialpadChooserAdapter: java.lang.Object getItem(int)>
<com.android.contacts.detail.ContactDetailFragment: android.content.Context getContext()>
<android.provider.Contacts$Phones: java.lang.CharSequence getDisplayLabel(android.content.Context,int,java.lang.CharSequence)>
<com.android.contacts.calllog.CallLogFragment: com.android.contacts.calllog.CallLogAdapter getAdapter()>
<com.android.contacts.model.RawContactDeltaList: java.lang.Long getRawContactId(int)>
<com.android.contacts.model.Contact: long getFirstWritableRawContactId(android.content.Context)>
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindWebsite(android.content.Context)>
<com.android.contacts.list.EmailAddressListAdapter: android.view.View newView(android.content.Context,int,android.database.Cursor,int,android.view.ViewGroup)>
<com.android.contacts.model.account.AccountType: com.android.contacts.model.dataitem.DataKind getKindForMimetype(java.lang.String)>
<com.android.contacts.model.account.AccountType: java.lang.CharSequence getDisplayLabel(android.content.Context)>
<com.android.contacts.list.ContactBrowseListFragment: android.net.Uri getSelectedContactUri()>
<com.android.contacts.ContactStatusUtil: java.lang.String getStatusString(android.content.Context,int)>
<com.android.contacts.model.RawContactDelta: com.android.contacts.model.RawContactDelta$ValuesDelta getSuperPrimaryEntry(java.lang.String,boolean)>
<com.android.contacts.group.GroupBrowseListAdapter: android.net.Uri getSelectedGroup()>
<com.android.contacts.detail.ContactDetailFragment$NetworkTitleViewEntry: java.lang.CharSequence getLabel()>
<com.android.providers.contacts.DefaultCallLogInsertionHelper: java.lang.String getGeocodedLocationFor(java.lang.String,java.lang.String)>
<com.android.contacts.widget.PinnedHeaderListView: float getTopFadingEdgeStrength()>
<com.android.contacts.model.RawContactDelta: java.util.ArrayList getContentValues()>
<com.android.contacts.model.Contact: java.lang.String getDirectoryAccountName()>
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindIm(android.content.Context)>
<com.android.contacts.editor.ContactEditorFragment$AggregationSuggestionAdapter: java.lang.Object getItem(int)>
<com.android.contacts.activities.ActionBarAdapter: java.lang.String getQueryString()>
<com.android.contacts.model.AccountTypeManagerImpl: java.util.List getGroupWritableAccounts()>
<com.android.contacts.model.RawContactDelta$ValuesDelta: int getPhoneType()>
<com.android.mms.data.Contact$ContactsCache: com.android.mms.data.Contact get(java.lang.String,boolean)>
<com.android.contacts.list.ContactEntryListAdapter: android.view.View newHeaderView(android.content.Context,int,android.database.Cursor,android.view.ViewGroup)>
<com.android.contacts.list.ContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor)>
<com.android.contacts.list.ContactListAdapter: long getSelectedContactId()>
<com.android.contacts.calllog.PhoneNumberHelper: java.lang.CharSequence getDisplayNumber(java.lang.CharSequence,java.lang.CharSequence)>
<com.android.contacts.list.ContactEntryListAdapter: android.view.View createPinnedSectionHeaderView(android.content.Context,android.view.ViewGroup)>
<com.android.providers.contacts.ContactsDatabaseHelper: long getMimeTypeIdForSip()>
<com.android.vcard.VCardComposer: java.lang.String createOneEntry(java.lang.reflect.Method)>
<com.android.contacts.list.ContactListAdapter: android.net.Uri getFirstContactUri()>
<com.android.providers.contacts.GlobalSearchSupport: android.database.Cursor handleSearchSuggestionsQuery(android.database.sqlite.SQLiteDatabase,android.net.Uri,java.lang.String[],java.lang.String)>
<com.android.providers.contacts.ContactsProvider2: com.android.providers.contacts.ContactDirectoryManager getContactDirectoryManagerForTest()>
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindPhone(android.content.Context)>
<com.android.contacts.model.Contact: java.lang.Exception getException()>
<com.android.contacts.detail.ContactDetailFragment$ViewAdapter: com.android.contacts.detail.ContactDetailFragment$ViewEntry getItem(int)>
<com.android.contacts.model.account.BaseAccountType$EmailActionInflater: int getTypeLabelResource(java.lang.Integer)>
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindPhoto(android.content.Context)>
<com.android.contacts.calllog.CallTypeHelper: java.lang.CharSequence getCallTypeText(int)>
<com.android.contacts.model.Contact: com.google.common.collect.ImmutableList getInvitableAccountTypes()>
<com.android.providers.contacts.ContactsDatabaseHelper: java.lang.String getUseStrictPhoneNumberComparisonParameter()>
<com.android.contacts.list.ContactEntryListFragment: com.android.contacts.widget.ContextMenuAdapter getContextMenuAdapter()>
<com.android.contacts.activities.DialtactsActivity$ViewPagerAdapter: android.app.Fragment getItem(int)>
<com.android.contacts.model.account.BaseAccountType$WebsiteKindBuilder: java.lang.String getTagName()>
<com.android.contacts.model.AccountTypeManagerImpl$InvitableAccountTypeCache: java.util.Map getCachedValue()>
<com.android.contacts.editor.ViewIdGenerator: int getId(com.android.contacts.model.RawContactDelta,com.android.contacts.model.dataitem.DataKind,com.android.contacts.model.RawContactDelta$ValuesDelta,int)>
<com.android.contacts.util.StreamItemEntry: java.lang.String getLabelRes()>
<com.android.vcard.VCardEntry$WebsiteData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()>
<com.android.contacts.voicemail.VoicemailPlaybackFragment$ActivityReference: android.app.Activity get()>
<com.android.contacts.list.ContactListFilterControllerImpl: com.android.contacts.list.ContactListFilter getFilter()>
<com.android.contacts.group.GroupEditorFragment$Member: java.lang.String getDisplayName()>
<com.android.contacts.ContactsUtils: android.net.Uri getCallUri(java.lang.String)>
<com.android.contacts.util.BitmapUtil: int getSmallerExtentFromBytes(byte[])>
<android.provider.Contacts$Organizations: java.lang.CharSequence getDisplayLabel(android.content.Context,int,java.lang.CharSequence)>
<com.android.mms.data.Contact$ContactsCache: java.util.List getContactInfoForPhoneUris(android.os.Parcelable[])>
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getGsmPhone()>
<com.android.contacts.detail.ContactDetailDisplayUtils: android.text.Html$ImageGetter getImageGetter(android.content.Context)>
<com.android.contacts.model.RawContact: com.android.contacts.model.RawContact$NamedDataItem addNamedDataItemValues(android.net.Uri,android.content.ContentValues)>
<com.android.providers.contacts.util.Clock: com.android.providers.contacts.util.Clock getInstance()>
<com.android.contacts.GroupMetaData: long getGroupId()>
<com.android.providers.contacts.ContactLocaleUtils$ChineseContactUtils: java.util.Iterator getNameLookupKeys(java.lang.String)>
<com.android.contacts.ContactsActivity: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>
<com.android.contacts.list.ContactListItemView: android.widget.TextView getLabelView()>
<com.android.contacts.quickcontact.QuickContactListFragment$1: int getCount()>
<com.android.providers.contacts.ContactLocaleUtils: java.util.Iterator getNameLookupKeys(java.lang.String,int)>
<com.android.vcard.VCardParserImpl_V21: java.lang.String getVersionString()>
<com.android.providers.contacts.ContactsProvider2: android.database.sqlite.SQLiteOpenHelper getDatabaseHelper(android.content.Context)>
<com.android.vcard.VCardParserImpl_V30: java.lang.String getVersionString()>
<com.android.contacts.model.account.ExternalAccountType: java.lang.String getViewStreamItemActivity()>
<com.android.contacts.calllog.CallLogListItemViews: com.android.contacts.calllog.CallLogListItemViews createForTest(android.content.Context)>
<com.android.vcard.VCardParserImpl_V40: java.lang.String getVersionString()>
<com.android.contacts.model.Contact: java.lang.String getLookupKey()>
<com.android.contacts.list.ContactEntryListAdapter: com.android.contacts.ContactPhotoManager getPhotoLoader()>
<com.android.contacts.ContactsUtils: android.content.Intent getCallIntent(java.lang.String,java.lang.String)>
<com.android.contacts.group.SuggestedMemberListAdapter$SuggestedMember: byte[] getPhotoByteArray()>
<com.android.contacts.model.dataitem.ImDataItem: java.lang.Integer getProtocol()>
<com.android.providers.contacts.aggregation.ContactAggregator$NameLookupSelectionBuilder: java.lang.String getSelection()>
<com.android.providers.contacts.PhotoStore: long getTotalSize()>
<com.android.providers.contacts.ContactsDatabaseHelper: java.lang.String getProperty(java.lang.String,java.lang.String)>
<com.android.contacts.list.ContactListAdapter: java.lang.String[] getProjection(boolean)>
<com.android.providers.contacts.ReorderingCursorWrapper: double getDouble(int)>
<com.android.contacts.util.AccountsListAdapter: long getItemId(int)>
<com.android.contacts.model.RawContactDelta: com.android.contacts.model.account.AccountType getAccountType(com.android.contacts.model.AccountTypeManager)>
<com.android.contacts.list.PhoneFavoriteFragment$ContactTileAdapterListener: int getApproximateTileWidth()>
<com.android.mms.data.Contact: com.android.mms.data.Contact getMe(boolean)>
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>
<com.android.contacts.model.RawContact: android.content.ContentValues getValues()>
<com.android.contacts.model.dataitem.DataItem: com.android.contacts.model.AccountTypeManager getAccountTypeManager()>
<com.android.contacts.ContactsApplication: com.android.contacts.test.InjectedServices getInjectedServices()>
<com.android.contacts.model.RawContactDelta: java.lang.String getDataSet()>
<com.android.contacts.widget.IndexerListAdapter: com.android.contacts.widget.IndexerListAdapter$Placement getItemPlacementInSection(int)>
<com.android.contacts.ContactsUtils: java.lang.String getCurrentCountryIso(android.content.Context)>
<com.android.providers.contacts.AbstractContactsProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>
<com.android.providers.contacts.LegacyApiSupport: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String)>
<com.android.vcard.VCardProperty: byte[] getByteValue()>
<com.android.vcard.VCardParserImpl_V30: java.lang.String getBase64(java.lang.String)>
<com.android.providers.contacts.ProfileProvider: java.lang.ThreadLocal getTransactionHolder()>
<com.android.vcard.VCardParserImpl_V21: java.lang.String getBase64(java.lang.String)>
<com.android.contacts.util.StreamItemEntry: java.lang.CharSequence getDecodedComments()>
<com.android.contacts.model.RawContactDeltaList: com.android.contacts.model.RawContactDeltaList fromIterator(java.util.Iterator)>
<com.android.providers.contacts.VoicemailStatusTable: java.lang.String getType(com.android.providers.contacts.VoicemailContentProvider$UriData)>
<com.android.contacts.model.account.GoogleAccountType: java.util.List getExtensionPackageNames()>
<com.android.vcard.VCardSourceDetector: java.lang.String getEstimatedCharset()>
<com.android.contacts.list.PhoneNumberListAdapter: android.net.Uri getDataUri(int)>
<com.android.contacts.ContactsUtils: android.content.Intent getCallIntent(java.lang.String)>
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor buildSingleRowResult(java.lang.String[],java.lang.String[],java.lang.Object[])>
<com.android.contacts.model.Contact: boolean getStarred()>
<com.android.contacts.detail.StreamItemAdapter: int getItemViewType(int)>
<com.android.contacts.list.ContactEntryListFragment: com.android.contacts.list.ContactEntryListAdapter getAdapter()>
<com.android.contacts.detail.ContactDetailFragment$KindTitleViewEntry: java.lang.String getTitle()>
<com.android.contacts.editor.ContactEditorUtils: com.android.contacts.editor.ContactEditorUtils getInstance(android.content.Context)>
<com.android.contacts.list.LegacyPhoneNumberListAdapter: android.net.Uri getPhoneUri(int)>
<com.android.contacts.group.GroupBrowseListAdapter$GroupListItemViewCache: android.net.Uri getUri()>
<com.android.providers.contacts.aggregation.ContactAggregator: android.database.Cursor queryAggregationSuggestions(android.database.sqlite.SQLiteQueryBuilder,java.lang.String[],long,int,java.lang.String,java.util.ArrayList)>
<com.android.contacts.detail.ContactDetailViewPagerAdapter: int getCount()>
<com.android.contacts.widget.PinnedHeaderListView: int getPinnedHeaderHeight(int)>
<com.android.contacts.model.Contact: java.lang.String getDirectoryType()>
<com.android.providers.contacts.ContactsProvider2: com.android.providers.contacts.PhotoPriorityResolver createPhotoPriorityResolver(android.content.Context)>
<com.android.contacts.widget.PinnedHeaderListView: int getTotalTopPinnedHeaderHeight()>
<com.android.contacts.group.SuggestedMemberListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.providers.contacts.aggregation.util.CommonNicknameCache: java.lang.String[] getCommonNicknameClusters(java.lang.String)>
<com.android.contacts.list.PhoneFavoriteMergedAdapter: int getViewTypeCount()>
<com.android.contacts.model.account.BaseAccountType$ImActionInflater: int getTypeLabelResource(java.lang.Integer)>
<com.android.contacts.list.CustomContactListFilterActivity$DisplayAdapter: long getChildId(int,int)>
<com.android.contacts.quickcontact.DataAction: java.lang.CharSequence getBody()>
<com.android.contacts.util.StreamItemEntry: java.util.List getPhotos()>
<com.android.contacts.model.account.BaseAccountType$PhotoKindBuilder: java.lang.String getTagName()>
<com.android.contacts.model.AccountTypeManager: com.android.contacts.model.AccountTypeManager getInstance(android.content.Context)>
<com.android.contacts.editor.ContactEditorUtils: java.lang.String[] getWritableAccountTypeStrings()>
<com.android.contacts.model.account.BaseAccountType$StructuredPostalKindBuilder: java.lang.String getTagName()>
<com.android.contacts.detail.ContactDetailFragment$ViewEntryDimensions: int getWidePaddingLeft()>
<com.android.contacts.model.dataitem.OrganizationDataItem: java.lang.String getTitle()>
<com.android.providers.contacts.ProfileProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>
<com.android.vcard.VCardParserImpl_V21: java.lang.String getNonEmptyLine()>
<com.android.contacts.list.CustomContactListFilterActivity$DisplayAdapter: java.lang.Object getGroup(int)>
<com.android.contacts.model.account.ExchangeAccountType: com.android.contacts.model.dataitem.DataKind addDataKindEvent(android.content.Context)>
<com.android.contacts.list.CustomContactListFilterActivity$DisplayAdapter: long getGroupId(int)>
<com.android.contacts.detail.ContactDetailViewPagerAdapter: int getItemPosition(java.lang.Object)>
<com.android.vcard.VCardParserImpl_V30: java.lang.String getNonEmptyLine()>
<com.android.contacts.list.ContactEntryListFragment: int getContactNameDisplayOrder()>
<com.android.providers.contacts.ContactsDatabaseHelper: com.android.providers.contacts.ContactsDatabaseHelper getNewInstanceForTest(android.content.Context)>
<com.android.providers.contacts.ContactsDatabaseHelper: long getMimeTypeIdForEmail()>
<com.android.contacts.datepicker.DatePicker$SavedState: int getMonth()>
<com.android.contacts.model.AccountTypeManager: com.android.contacts.model.dataitem.DataKind getKindOrFallback(java.lang.String,java.lang.String,java.lang.String)>
<com.android.contacts.model.ContactLoader: com.android.contacts.model.Contact loadInBackground()>
<com.android.contacts.vcard.ExportProcessor: com.android.contacts.vcard.ExportRequest getRequest()>
<com.android.contacts.list.CustomContactListFilterActivity$GroupDelta: com.android.contacts.list.CustomContactListFilterActivity$GroupDelta fromSettings(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,boolean)>
<com.android.contacts.interactions.TestLoaderManager: android.content.Loader getLoader(int)>
<com.android.providers.contacts.ContactsProvider2: java.lang.String getQueryParameter(android.net.Uri,java.lang.String)>
<com.android.contacts.model.AccountTypeManagerImpl: com.android.contacts.model.account.AccountType getAccountType(com.android.contacts.model.account.AccountTypeWithDataSet)>
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.Long getAsLong(java.lang.String)>
<com.android.contacts.interactions.GroupCreationDialogFragment: int getTitleResourceId()>
<com.android.providers.contacts.AccountWithDataSet: java.lang.String getAccountType()>
<com.android.contacts.model.account.AccountType: java.lang.String getEditContactActivityClassName()>
<com.android.contacts.editor.SelectAccountDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)>
<com.android.contacts.util.ExpirableCache$GenerationalCachedValue: java.lang.Object getValue()>
<com.android.exchange.adapter.ContactsSyncAdapter$ContactOperations: com.android.exchange.adapter.ContactsSyncAdapter$RowBuilder createBuilder(android.content.Entity,java.lang.String,int,java.lang.String)>
<com.android.contacts.group.GroupListItem: long getGroupId()>
<android.provider.ContactsContract$ProfileSyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)>
<com.android.contacts.quickcontact.QuickContactActivity$ViewPagerAdapter: android.app.Fragment getItem(int)>
<com.android.providers.contacts.DataRowHandler: android.content.ContentValues getAugmentedValues(android.database.sqlite.SQLiteDatabase,long,android.content.ContentValues)>
<com.android.providers.contacts.PhotoPriorityResolver: int getPhotoPriority(java.lang.String)>
<com.android.vcard.VCardEntry$PostalData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()>
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.String getEmailLabel()>
<com.android.providers.contacts.DataRowHandlerForPhoneNumber: int getTypeRank(int)>
<com.android.providers.contacts.VoicemailContentProvider$UriData: java.lang.String getSourcePackage()>
<com.android.contacts.list.DefaultContactBrowseListFragment: com.android.contacts.list.ContactEntryListAdapter createListAdapter()>
<com.android.contacts.quickcontact.DataAction: android.content.Intent getIntent()>
<com.android.providers.contacts.AbstractContactsProvider: com.android.providers.contacts.ContactsTransaction getCurrentTransaction()>
<com.android.contacts.model.Contact: com.google.common.collect.ImmutableList getRawContacts()>
<com.android.contacts.ContactsApplication: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>
<com.android.providers.contacts.SearchIndexManager$IndexBuilder: java.lang.String getName()>
<com.android.vcard.VCardConfig: int getNameOrderType(int)>
<com.android.mms.data.ContactList: com.android.mms.data.ContactList getByIds(java.lang.String,boolean)>
<com.android.contacts.list.EmailAddressListAdapter: android.net.Uri getDataUri(int)>
<com.android.contacts.model.RawContactDelta$ValuesDelta: byte[] getAsByteArray(java.lang.String)>
<com.android.contacts.list.CustomContactListFilterActivity$CustomFilterConfigurationLoader: com.android.contacts.list.CustomContactListFilterActivity$AccountSet loadInBackground()>
<android.provider.Contacts$People: android.database.Cursor queryGroups(android.content.ContentResolver,long)>
<com.android.contacts.quickcontact.QuickContactListFragment$1: java.lang.Object getItem(int)>
<com.android.contacts.quickcontact.QuickContactListFragment$1: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.providers.contacts.NameSplitter: int getAdjustedFullNameStyle(int)>
<com.android.contacts.detail.ContactDetailFragment$ViewAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindSipAddress(android.content.Context)>
<com.android.contacts.detail.ContactDetailFragment: android.net.Uri getUri()>
<com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager: int[] getAdnRecordsSize(int)>
<com.android.providers.contacts.ContactsDatabaseHelper: long getOrCreateAccountIdInTransaction(com.android.providers.contacts.AccountWithDataSet)>
<com.android.contacts.group.GroupEditorFragment$Member: long getContactId()>
<com.android.contacts.model.Contact: android.net.Uri getLookupUri()>
<com.android.contacts.calllog.CallDetailHistoryAdapter: java.lang.Object getItem(int)>
<com.android.providers.contacts.VoicemailContentProvider$UriData: android.net.Uri getUri()>
<com.android.providers.contacts.CallLogProvider: com.android.providers.contacts.ContactsDatabaseHelper getDatabaseHelper(android.content.Context)>
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.Long getGroupRowId()>
<com.android.contacts.model.account.ExchangeAccountType: com.android.contacts.model.dataitem.DataKind addDataKindNickname(android.content.Context)>
<com.android.contacts.detail.ContactDetailTabCarousel: float getStoredYCoordinateForTab(int)>
<com.android.mms.ui.QuickContactDivot: float getCloseOffset()>
<com.android.providers.contacts.DataRowHandlerForOrganization: int getTypeRank(int)>
<com.android.phone.ContactsAsyncHelper$ImageTracker: android.net.Uri getPhotoUri()>
<com.android.providers.contacts.MemoryCursor: int getCount()>
<com.android.contacts.list.ContactListFilter: com.android.contacts.list.ContactListFilter restoreDefaultPreferences(android.content.SharedPreferences)>
<com.android.contacts.list.ContactTileAdapter: int getCount()>
<com.android.contacts.model.account.AccountType: java.lang.CharSequence getViewGroupLabel(android.content.Context)>
<com.android.contacts.model.Contact: byte[] getPhotoBinaryData()>
<com.android.providers.contacts.util.MemoryUtils: long getTotalMemorySize()>
<com.android.providers.contacts.VoicemailStatusTable: android.database.Cursor query(com.android.providers.contacts.VoicemailContentProvider$UriData,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<com.android.mms.data.Contact: byte[] access$1702(com.android.mms.data.Contact,byte[])>
<com.android.contacts.interactions.PhoneNumberInteraction$PhoneDisambiguationDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)>
<com.android.contacts.activities.DialtactsActivity$PageChangeListener: int getCurrentPosition()>
<com.android.contacts.group.GroupDetailDisplayUtils: android.view.View getNewGroupSourceView(android.content.Context)>
<com.android.vcard.VCardEntry$PostalData: java.lang.String getFormattedAddress(int)>
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: int[] getAdnRecordsSize(int)>
<com.android.contacts.activities.ShowOrCreateActivity: android.app.Dialog onCreateDialog(int)>
<com.android.contacts.list.ContactTileAdapter: int getColumnCount()>
<com.android.providers.contacts.ReorderingCursorWrapper: int getCount()>
<com.android.contacts.socialwidget.SocialWidgetSettings: android.net.Uri getContactUri(android.content.Context,int)>
<com.android.contacts.editor.RawContactReadOnlyEditorView: long getRawContactId()>
<com.android.contacts.calllog.ExtendedCursor: long getLong(int)>
<com.android.contacts.dialpad.DialpadFragment$ErrorDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)>
<com.android.contacts.model.account.ExternalAccountType: int getInviteContactActionResId()>
<com.android.contacts.util.AccountSelectionUtil: android.app.Dialog getSelectAccountDialog(android.content.Context,int,android.content.DialogInterface$OnClickListener,android.content.DialogInterface$OnCancelListener)>
<com.android.contacts.list.ContactsRequest: android.content.Intent getRedirectIntent()>
<com.android.providers.contacts.FastScrollingIndexCache: android.os.Bundle get(android.net.Uri,java.lang.String,java.lang.String[],java.lang.String,java.lang.String)>
<com.android.contacts.list.ContactsRequest: android.net.Uri getContactUri()>
<com.android.contacts.editor.ContactEditorFragment: long getContactId()>
<com.android.mms.data.Contact: java.lang.String getName()>
<com.android.contacts.model.RawContactDelta$ValuesDelta: byte[] getPhoto()>
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(android.content.ContentResolver,android.net.Uri)>
<com.android.providers.contacts.VoicemailContentProvider: java.lang.String getType(android.net.Uri)>
<com.android.contacts.list.ContactEntryListFragment: int getDirectorySearchMode()>
<com.android.email.activity.setup.SetupData: android.accounts.AccountAuthenticatorResponse getAccountAuthenticatorResponse()>
<com.android.contacts.calllog.ExtendedCursor: float getFloat(int)>
<com.android.contacts.editor.GroupMembershipView$GroupMembershipAdapter: int getItemViewType(int)>
<com.android.contacts.calllog.CallTypeIconsView: int getCallType(int)>
<com.android.contacts.util.LocalizedNameResolver: java.lang.String getAllContactsName(android.content.Context,java.lang.String)>
<com.android.contacts.model.RawContact: android.content.Context getContext()>
<com.android.contacts.model.dataitem.PhoneDataItem: java.lang.String getNumber()>
<com.android.contacts.model.Contact: long getPhotoId()>
<com.android.providers.contacts.util.DbQueryUtils: java.lang.String getInequalityClause(java.lang.String,long)>
<com.android.contacts.list.ContactListAdapter: android.net.Uri getContactUri(int)>
<com.android.contacts.vcard.ImportVCardActivity$VCardFile: java.lang.String getCanonicalPath()>
<com.android.contacts.group.GroupDetailFragment$1: int getApproximateTileWidth()>
<com.android.contacts.util.AccountSelectionUtil$1: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.contacts.activities.DialtactsActivity: android.content.Intent getCallSettingsIntent()>
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler: com.android.contacts.detail.PhotoSelectionHandler$PhotoActionListener getListener()>
<com.android.contacts.list.ContactListItemView: android.widget.QuickContactBadge getQuickContact()>
<com.android.contacts.calllog.CallTypeHelper: java.lang.Integer getHighlightedColor(int)>
<com.android.contacts.ContactsUtils: android.content.Intent getVoicemailIntent()>
<com.android.providers.contacts.SearchIndexManager: java.lang.String getFtsMatchQuery(java.lang.String,com.android.providers.contacts.SearchIndexManager$FtsQueryBuilder)>
<com.android.contacts.list.ContactEntryListAdapter: char[] getUpperCaseQueryString()>
<com.android.contacts.model.Contact: android.net.Uri getRequestedUri()>
<com.android.providers.contacts.TransactionContext: java.util.Set getDirtyRawContactIds()>
<com.android.contacts.quickcontact.DataAction: java.lang.String getAlternateIconDescription()>
<com.android.contacts.detail.ContactDetailFragment$ViewEntryDimensions: int getPaddingBottom()>
<com.android.contacts.editor.ContactEditorFragment: android.database.Cursor access$1202(com.android.contacts.editor.ContactEditorFragment,android.database.Cursor)>
<com.android.contacts.detail.ContactDetailFragmentCarousel: int getCurrentPage()>
<com.android.contacts.test.InjectedServices: android.content.SharedPreferences getSharedPreferences()>
<com.android.contacts.model.dataitem.DataItem: java.lang.String getMimeType()>
<com.android.providers.contacts.VoicemailContentProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<com.android.contacts.widget.IndexerListAdapter: int getSectionForPosition(int)>
<com.android.contacts.model.account.ExternalAccountType: java.lang.String getViewGroupActivity()>
<com.android.vcard.VCardParserImpl_V30: java.util.Set getKnownPropertyNameSet()>
<com.android.vcard.VCardParserImpl_V21: java.util.Set getKnownPropertyNameSet()>
<com.android.contacts.model.RawContactDeltaList: java.util.ArrayList buildDiff()>
<com.android.contacts.model.Contact: long getNameRawContactId()>
<com.android.contacts.model.Contact: java.lang.String getPhotoUri()>
<com.android.contacts.activities.ConfirmAddDetailActivity: com.android.contacts.util.DialogManager getDialogManager()>
<com.android.vcard.VCardParserImpl_V40: java.util.Set getKnownPropertyNameSet()>
<com.android.contacts.list.ContactEntryListAdapter: com.android.contacts.list.DirectoryPartition createDefaultDirectoryPartition()>
<com.android.providers.contacts.ProfileProvider: android.database.sqlite.SQLiteOpenHelper getDatabaseHelper(android.content.Context)>
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindOrganization(android.content.Context)>
<com.android.contacts.voicemail.VoicemailStatusHelperImpl$OverallState: com.android.contacts.voicemail.VoicemailStatusHelperImpl$Action getAction()>
<com.android.vcard.VCardEntry$ImData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()>
<com.android.contacts.calllog.ClearCallLogDialog: android.app.Dialog onCreateDialog(android.os.Bundle)>
<com.android.contacts.model.account.AccountWithDataSet: com.android.contacts.model.account.AccountTypeWithDataSet getAccountTypeWithDataSet()>
<com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler: long getWritableEntityId()>
<com.android.mms.data.Contact: android.net.Uri getPhoneUri()>
<com.android.contacts.list.ContactListItemView: android.widget.TextView getCountView()>
<com.android.contacts.list.JoinContactLoader: android.database.Cursor loadInBackground()>
<com.android.contacts.preference.ContactsPreferences: int getSortOrder()>
<com.android.contacts.list.CustomContactListFilterActivity$GroupDelta: java.lang.CharSequence getTitle(android.content.Context)>
<com.android.contacts.list.PhoneFavoriteMergedAdapter: int getCount()>
<com.android.contacts.dialpad.DialpadFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>
<com.android.vcard.VCardEntry$EmailData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()>
<com.android.providers.contacts.DataRowHandler: int getTypeRank(int)>
<com.android.contacts.model.dataitem.StructuredNameDataItem: java.lang.String getPhoneticFamilyName()>
<com.android.contacts.list.ContactListItemView: android.widget.TextView getStatusView()>
<com.android.contacts.list.CustomContactListFilterActivity$DisplayAdapter: java.lang.Object getChild(int,int)>
<com.android.contacts.model.account.BaseAccountType$KindParser: java.util.List parseDataKindTag(android.content.Context,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)>
<com.android.contacts.editor.ContactEditorFragment$AggregationSuggestionAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.contacts.model.dataitem.ImDataItem: java.lang.String getData()>
<com.android.providers.contacts.ProfileProvider: java.lang.String getType(android.net.Uri)>
<com.android.contacts.ContactsActivity: android.content.ContentResolver getContentResolver()>
<com.android.contacts.model.account.AccountType: int getInviteContactActionResId()>
<com.android.contacts.list.ProfileAndContactsLoader: android.database.Cursor loadInBackground()>
<com.android.contacts.model.AccountTypeManager: com.android.contacts.model.account.AccountType getAccountType(java.lang.String,java.lang.String)>
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindPhoneticName(android.content.Context)>
<com.android.contacts.model.AccountTypeManager: com.android.contacts.model.account.AccountType getAccountTypeForAccount(com.android.contacts.model.account.AccountWithDataSet)>
<com.android.contacts.editor.EditorAnimator: com.android.contacts.editor.EditorAnimator getInstance()>
<com.android.contacts.ContactPhotoManager: int getDefaultAvatarResId(boolean,boolean)>
<com.android.contacts.model.account.BaseAccountType$ImActionInflater: java.lang.String getTypeColumn()>
<com.android.contacts.dialpad.DialpadFragment$DialpadChooserAdapter: long getItemId(int)>
<com.android.contacts.model.account.BaseAccountType$EmailKindBuilder: java.lang.String getTagName()>
<com.android.contacts.widget.PinnedHeaderListAdapter: int getPinnedHeaderCount()>
<com.android.contacts.GroupMetaData: java.lang.String getTitle()>
<com.android.contacts.model.account.ExchangeAccountType: com.android.contacts.model.dataitem.DataKind addDataKindEmail(android.content.Context)>
<com.android.contacts.util.HtmlUtils$StreamItemQuoteSpan: int getLeadingMargin(boolean)>
<com.android.contacts.util.ImageViewDrawableSetter: byte[] getCompressedImage()>
<com.android.contacts.editor.KindSectionView: java.lang.String getTitle()>
<com.android.contacts.list.LegacyPostalAddressListAdapter: android.view.View newView(android.content.Context,int,android.database.Cursor,int,android.view.ViewGroup)>
<com.android.vcard.VCardEntry$OrganizationData: java.lang.String getFormattedString()>
<com.android.contacts.group.GroupBrowseListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.contacts.list.CustomContactListFilterActivity$AccountSet: java.util.ArrayList buildDiff()>
<com.android.providers.contacts.TransactionContext: java.lang.Long getAccountIdOrNullForRawContact(long)>
<com.android.providers.contacts.CallLogProvider: java.lang.String getType(android.net.Uri)>
<com.android.contacts.list.PhoneFavoriteMergedAdapter: java.lang.Object getItem(int)>
<android.provider.ContactsContract$CommonDataKinds$Phone: java.lang.CharSequence getDisplayLabel(android.content.Context,int,java.lang.CharSequence,java.lang.CharSequence[])>
<android.provider.ContactsContract$RawContacts$EntityIteratorImpl: android.content.Entity getEntityAndIncrementCursor(android.database.Cursor)>
<com.android.contacts.activities.GroupEditorActivity: com.android.contacts.util.DialogManager getDialogManager()>
<com.android.contacts.voicemail.VoicemailStatusHelperImpl$Action: int getMessageId()>
<com.android.contacts.calllog.CallDetailHistoryAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.contacts.activities.PeopleActivity$TabPagerAdapter: int getItemPosition(java.lang.Object)>
<com.android.contacts.ContactsUtils: android.graphics.Rect getTargetRectFromView(android.content.Context,android.view.View)>
<android.provider.ContactsContract$Contacts: java.io.InputStream openContactPhotoInputStream(android.content.ContentResolver,android.net.Uri,boolean)>
<com.android.email.activity.ContactStatusLoader: com.android.email.activity.ContactStatusLoader$Result loadInBackground()>
<com.android.contacts.list.ContactEntryListAdapter: int getDirectoryResultLimit()>
<com.android.contacts.interactions.GroupNameDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)>
<com.android.contacts.quickcontact.DataAction: java.lang.String getMimeType()>
<com.android.contacts.util.ContactBadgeUtil: java.lang.CharSequence getSocialDate(com.android.contacts.util.StreamItemEntry,android.content.Context)>
<com.android.contacts.model.RawContactDelta: com.android.contacts.model.RawContactDelta$ValuesDelta getValues()>
<com.android.contacts.model.account.ExchangeAccountType: com.android.contacts.model.dataitem.DataKind addDataKindOrganization(android.content.Context)>
<com.android.providers.contacts.TransactionContext: java.util.Set getStaleSearchIndexRawContactIds()>
<com.android.contacts.model.RawContactModifier: java.util.ArrayList getValidTypes(com.android.contacts.model.RawContactDelta,com.android.contacts.model.dataitem.DataKind,com.android.contacts.model.account.AccountType$EditType)>
<com.android.providers.contacts.PhotoStore: com.android.providers.contacts.PhotoStore$Entry get(long)>
<com.android.contacts.list.LegacyContactListAdapter: android.view.View newView(android.content.Context,int,android.database.Cursor,int,android.view.ViewGroup)>
<com.android.contacts.vcard.ExportProcessor: int getType()>
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler$PhotoEditorListener: java.lang.String getCurrentPhotoFile()>
<com.android.providers.contacts.ContactsDatabaseHelper: java.lang.Long getAccountIdOrNull(com.android.providers.contacts.AccountWithDataSet)>
<com.android.contacts.widget.PinnedHeaderListAdapter: int getScrollPositionForHeader(int)>
<com.android.contacts.detail.StreamItemAdapter: int getCount()>
<com.android.contacts.editor.ContactEditorFragment$JoinSuggestedContactDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)>
<com.android.contacts.datepicker.DatePicker: int getDayOfMonth()>
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.String getPhoneticFamilyName()>
<com.android.contacts.list.ProviderStatusWatcher: com.android.contacts.list.ProviderStatusWatcher$Status getProviderStatus()>
<com.android.contacts.calllog.ExtendedCursor: java.lang.String getString(int)>
<com.android.contacts.ContactsActivity: android.view.View getView(int)>
<com.android.mms.data.Contact: int getContactMethodType()>
<com.android.vcard.VCardEntry$NicknameData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()>
<com.android.contacts.widget.PinnedHeaderListDemoActivity$TestPinnedHeaderListAdapter: android.view.View getPinnedHeaderView(int,android.view.View,android.view.ViewGroup)>
<com.android.contacts.quickcontact.ResolveCache: com.android.contacts.quickcontact.ResolveCache$Entry getEntry(com.android.contacts.quickcontact.Action)>
<com.android.contacts.ContactsUtils: android.content.Intent getCallIntent(android.net.Uri,java.lang.String)>
<com.android.providers.contacts.ContactsProvider2: com.android.providers.contacts.DataRowHandler getDataRowHandlerForProfile(java.lang.String)>
<com.android.providers.contacts.ContactLocaleUtils$ContactLocaleUtilsBase: java.lang.String getSortKey(java.lang.String)>
<com.android.providers.contacts.ReorderingCursorWrapper: short getShort(int)>
<com.android.contacts.calllog.CallDetailHistoryAdapter: int getCount()>
<com.android.contacts.list.ProviderStatusWatcher: com.android.contacts.list.ProviderStatusWatcher getInstance(android.content.Context)>
<com.android.contacts.model.Contact: long getDirectoryId()>
<com.android.contacts.detail.ContactDetailFragment$ViewAdapter: int getCount()>
<com.android.contacts.model.RawContactDelta: java.lang.String getAccountType()>
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor queryLocal(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,long,android.os.CancellationSignal)>
<com.android.contacts.preference.SortOrderPreference: java.lang.CharSequence getSummary()>
<com.android.contacts.ContactPhotoManagerImpl$Request: long getId()>
<com.android.contacts.list.CustomContactListFilterActivity$GroupDelta: boolean getVisible()>
<com.android.contacts.model.account.ExternalAccountType: java.lang.String getViewStreamItemPhotoActivity()>
<com.android.mms.data.ContactList: java.lang.String[] getNumbers()>
<com.android.contacts.datepicker.DatePicker: int getMonth()>
<com.android.contacts.list.ContactsSectionIndexer: java.lang.Object[] getSections()>
<com.android.contacts.group.GroupEditorFragment$Member: android.net.Uri getLookupUri()>
<com.android.providers.contacts.NameLookupBuilder: java.lang.String normalizeName(java.lang.String)>
<com.android.contacts.model.account.ExchangeAccountType: com.android.contacts.model.dataitem.DataKind addDataKindIm(android.content.Context)>
<com.android.contacts.vcard.ImportVCardActivity$VCardCacheThread: android.net.Uri[] getSourceUris()>
<com.android.mms.data.Contact: java.util.List getByPhoneUris(android.os.Parcelable[])>
<com.android.contacts.dialpad.DialpadFragment$DialpadChooserAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.contacts.model.account.AccountType: java.lang.String getViewContactNotifyServicePackageName()>
<com.android.contacts.ContactPhotoManager: com.android.contacts.ContactPhotoManager getInstance(android.content.Context)>
<com.android.contacts.ContactsUtils: int getThumbnailSize(android.content.Context)>
<com.android.vcard.VCardSourceDetector: int getEstimatedType()>
<com.android.contacts.list.PhoneFavoriteFragment: com.android.contacts.list.ContactListFilter getFilter()>
<com.android.contacts.list.ContactEntryListFragment: android.app.LoaderManager getLoaderManager()>
<com.android.contacts.list.ContactTileAdapter: java.lang.Object getItem(int)>
<android.provider.ContactsContract$Data: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)>
<com.android.contacts.editor.BaseRawContactEditorView: com.android.contacts.editor.PhotoEditorView getPhotoEditor()>
<com.android.contacts.editor.KindSectionView: com.android.contacts.model.dataitem.DataKind getKind()>
<com.android.contacts.model.RawContactModifier: com.android.contacts.model.account.AccountType$EditType getType(com.android.contacts.model.dataitem.DataKind,int)>
<com.android.contacts.list.ContactsSectionIndexer: int getSectionForPosition(int)>
<com.android.contacts.vcard.ImportVCardActivity$VCardFile: long getLastModified()>
<com.android.providers.contacts.SearchIndexManager$IndexBuilder: java.lang.String getString(java.lang.String)>
<com.android.providers.contacts.ReorderingCursorWrapper: java.lang.String getString(int)>
<com.android.contacts.model.dataitem.PhoneDataItem: java.lang.String getNormalizedNumber()>
<com.android.contacts.voicemail.VoicemailStatusHelperImpl$OverallState: int getCallDetailsMessageId()>
<com.android.contacts.list.PhoneNumberPickerFragment: com.android.contacts.list.ContactListFilter getFilter()>
<com.android.contacts.editor.PhoneticNameEditorView$PhoneticValuesDelta: java.lang.Long getId()>
<com.android.contacts.activities.PhotoSelectionActivity: android.content.Intent buildIntent(android.content.Context,android.net.Uri,android.graphics.Bitmap,byte[],android.graphics.Rect,com.android.contacts.model.RawContactDeltaList,boolean,boolean,boolean)>
<com.android.contacts.util.MemoryUtils: long getTotalMemorySize()>
<com.android.contacts.model.account.BaseAccountType$OrganizationKindBuilder: java.lang.String getTagName()>
<com.android.contacts.model.RawContactDelta: com.android.contacts.model.RawContactDelta$ValuesDelta getEntry(java.lang.Long)>
<com.android.providers.contacts.VoicemailContentProvider$UriData: java.lang.String getId()>
<com.android.contacts.vcard.NfcImportVCardActivity$ImportTask: com.android.contacts.vcard.ImportRequest doInBackground(com.android.contacts.vcard.VCardService[])>
<com.android.contacts.list.ContactBrowseListFragment: com.android.contacts.list.ContactListFilter getFilter()>
<com.android.providers.contacts.ContactsDatabaseHelper: long getMimeTypeIdForStructuredName()>
<com.android.contacts.activities.NonPhoneActivity$NonPhoneDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)>
<com.android.contacts.detail.ContactDetailTabCarousel: int getAllowedVerticalScrollLength()>
<com.android.contacts.activities.PeopleActivity: com.android.contacts.util.DialogManager getDialogManager()>
<com.android.vcard.VCardEntry$OrganizationData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()>
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindEmail(android.content.Context)>
<com.android.contacts.voicemail.VoicemailStatusHelperImpl: java.util.List getStatusMessages(android.database.Cursor)>
<com.android.contacts.list.ContactEntryListAdapter: java.lang.String getQueryString()>
<com.android.internal.telephony.gsm.UsimPhoneBookManager: java.util.ArrayList loadEfFilesFromUsim()>
<com.android.contacts.model.account.BaseAccountType$PhoneActionAltInflater: int getTypeLabelResource(java.lang.Integer)>
<com.android.contacts.list.ContactListItemView: android.widget.ImageView getPhotoView()>
<com.android.email.activity.ContactStatusLoader: com.android.email.activity.ContactStatusLoader$Result getContactInfo(android.content.Context,java.lang.String)>
<com.android.contacts.list.ContactTileView: android.widget.QuickContactBadge getQuickContact()>
<com.android.contacts.editor.RawContactEditorView: long getRawContactId()>
<com.android.contacts.model.Contact: java.lang.String getDirectoryAccountType()>
<com.android.contacts.model.account.AccountType: java.util.ArrayList getSortedDataKinds()>
<com.android.contacts.quickcontact.DataAction: int getPresence()>
<com.android.contacts.list.JoinContactListAdapter: int getItemViewType(int,int)>
<com.android.contacts.model.account.GoogleAccountType: java.lang.String getViewContactNotifyServiceClassName()>
<com.android.contacts.util.ExpirableCache: com.android.contacts.util.ExpirableCache create(int)>
<com.android.vcard.VCardProperty: java.util.Map getParameterMap()>
<com.android.contacts.list.ContactEntryListAdapter: int getItemViewType(int,int)>
<com.android.contacts.model.RawContactDelta: int getEntryCount(boolean)>
<com.android.providers.contacts.AbstractContactsProvider: android.database.sqlite.SQLiteOpenHelper getDatabaseHelper()>
<android.provider.ContactsContract$CommonDataKinds$Phone: java.lang.CharSequence getDisplayLabel(android.content.Context,int,java.lang.CharSequence)>
<com.android.contacts.util.StreamItemEntry: java.lang.String getText()>
<com.android.contacts.detail.ContactDetailFragment$ViewEntryDimensions: int getPaddingLeft()>
<com.android.contacts.detail.ContactDetailDisplayUtils$DefaultImageGetter: android.graphics.drawable.Drawable getDrawable(java.lang.String)>
<com.android.providers.contacts.TransactionContext: java.util.Set getUpdatedRawContactIds()>
<com.android.contacts.model.dataitem.OrganizationDataItem: java.lang.String getCompany()>
<com.android.contacts.test.InjectedServices: java.lang.Object getSystemService(java.lang.String)>
<com.android.providers.contacts.util.DbQueryUtils: java.lang.String getEqualityClause(java.lang.String,long)>
<com.android.contacts.model.account.ExternalAccountType: int getViewGroupLabelResId()>
<com.android.contacts.widget.IndexerListAdapter: android.view.View getPinnedHeaderView(int,android.view.View,android.view.ViewGroup)>
<com.android.contacts.editor.ContactEditorFragment$SuggestionEditConfirmationDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)>
<com.android.contacts.model.dataitem.WebsiteDataItem: java.lang.String getUrl()>
<com.android.contacts.vcard.ProcessorBase: java.lang.Object get()>
<com.android.contacts.quickcontact.ResolveCache: android.content.pm.ResolveInfo getBestResolve(android.content.Intent,java.util.List)>
<com.android.vcard.VCardEntry$AndroidCustomData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()>
<com.android.contacts.group.GroupDetailFragment: long getGroupId()>
<com.android.contacts.list.ContactListFilter: java.lang.String getId()>
<com.android.contacts.model.account.ExchangeAccountType: com.android.contacts.model.dataitem.DataKind addDataKindPhoto(android.content.Context)>
<com.android.providers.contacts.TransactionContext: java.util.Set getStaleSearchIndexContactIds()>
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.Long getId()>
<com.android.contacts.detail.ActionsViewContainer: android.view.ContextMenu$ContextMenuInfo getContextMenuInfo()>
<com.android.mms.data.ContactList: java.lang.String[] getNumbers(boolean)>
<com.android.contacts.detail.ContactDetailFragment$ViewEntry: int getViewType()>
<com.android.contacts.voicemail.VoicemailStatusHelperImpl$OverallState: int getCallLogMessageId()>
<com.android.contacts.model.account.ExchangeAccountType: com.android.contacts.model.dataitem.DataKind addDataKindPhone(android.content.Context)>
<com.android.contacts.detail.ContactDetailFragment$ViewAdapter: long getItemId(int)>
<com.android.contacts.model.dataitem.StructuredNameDataItem: java.lang.String getPhoneticGivenName()>
<com.android.providers.contacts.ContactsDatabaseHelper: java.lang.String getDataMimeType(long)>
<com.android.contacts.list.ContactEntryListFragment: android.content.CursorLoader createCursorLoader()>
<com.android.providers.contacts.ReorderingCursorWrapper: long getLong(int)>
<com.android.providers.contacts.ContactsDatabaseHelper: java.lang.String getCurrentCountryIso()>
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: java.util.List getAdnRecordsInEf(int)>
<com.android.contacts.group.GroupEditorFragment$MemberListAdapter: com.android.contacts.group.GroupEditorFragment$Member getItem(int)>
<com.android.contacts.group.GroupListItem: java.lang.String getTitle()>
<com.android.contacts.util.StreamItemEntry: long getTimestamp()>
<com.android.contacts.model.Contact: java.lang.String getAltDisplayName()>
<com.android.providers.contacts.ContactsDatabaseHelper: int getAggregationMode(long)>
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: int[] getAdnRecordsSize(int)>
<com.android.contacts.model.Contact: java.lang.String getPhoneticName()>
<com.android.contacts.list.PostalAddressListAdapter: android.view.View newView(android.content.Context,int,android.database.Cursor,int,android.view.ViewGroup)>
<com.android.contacts.detail.ContactDetailDisplayUtils: java.lang.CharSequence getDisplayName(android.content.Context,com.android.contacts.model.Contact)>
<com.android.providers.contacts.CountryMonitor: java.lang.String getCountryIso()>
<com.android.contacts.group.GroupBrowseListAdapter: long getItemId(int)>
<com.android.mms.data.Contact: android.net.Uri getUri()>
<com.android.contacts.editor.ContactEditorFragment$CancelEditDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)>
<com.android.contacts.voicemail.VoicemailStatusHelperImpl$OverallState: int getPriority()>
<com.android.contacts.editor.EventFieldEditorView: com.android.contacts.model.account.AccountType$EditType getType()>
<com.android.contacts.util.AccountsListAdapter: com.android.contacts.model.account.AccountWithDataSet getItem(int)>
<com.android.contacts.widget.IndexerListAdapter: int getIndexedPartition()>
<com.android.contacts.model.Contact: java.lang.String getDirectoryDisplayName()>
<com.android.contacts.calllog.ContactInfoHelper: com.android.contacts.calllog.ContactInfo lookupNumber(java.lang.String,java.lang.String)>
<com.android.contacts.list.JoinContactListFragment: com.android.contacts.list.ContactEntryListAdapter createListAdapter()>
<com.android.contacts.model.AccountTypeManagerImpl: java.util.List getAccountTypes(boolean)>
<com.android.contacts.list.ContactsRequest: int getActionCode()>
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindDisplayName(android.content.Context)>
<com.android.contacts.list.ContactTileView: android.view.View$OnClickListener createClickListener()>
<com.android.contacts.model.RawContactDelta: java.util.ArrayList getMimeEntries(java.lang.String)>
<com.android.providers.contacts.SearchIndexManager: java.util.List splitIntoFtsTokens(java.lang.String)>
<com.android.providers.contacts.ReorderingCursorWrapper: java.lang.String[] getColumnNames()>
<com.android.contacts.model.dataitem.StructuredNameDataItem: java.lang.String getDisplayName()>
<com.android.providers.contacts.ContactsProvider2$StructuredNameLookupBuilder: java.lang.String[] getCommonNicknameClusters(java.lang.String)>
<com.android.contacts.model.account.AccountType: android.graphics.drawable.Drawable getDisplayIcon(android.content.Context)>
<com.android.providers.contacts.ContactsDatabaseHelper: android.database.sqlite.SQLiteDatabase getDatabase(boolean)>
<com.android.contacts.util.StreamItemEntry: java.lang.String getResPackage()>
<com.android.contacts.detail.ContactDetailFragment$AddToMyContactsQuickFix: java.lang.String getTitle()>
<com.android.contacts.detail.ContactDetailFragment$MakeLocalCopyQuickFix: java.lang.String getTitle()>
<com.android.providers.contacts.ContactDirectoryManager: int scanAllPackages()>
<com.android.contacts.model.Contact: java.lang.String getCustomRingtone()>
<com.android.providers.contacts.PhotoProcessor: int getMaxThumbnailPhotoDim()>
<com.android.vcard.VCardProperty: java.lang.String getRawValue()>
<android.provider.ContactsContract$Groups$EntityIteratorImpl: android.content.Entity getEntityAndIncrementCursor(android.database.Cursor)>
<com.android.contacts.list.ContactTileAdapter: android.view.View getDivider()>
<com.android.contacts.model.dataitem.DataItem: java.lang.String getKindString()>
<com.android.contacts.activities.PeopleActivity$TabPagerAdapter: int getCount()>
<com.android.contacts.detail.ContactDetailFragment: int getFirstListItemOffset()>
<com.android.contacts.ContactPhotoManagerImpl$Request: int getRequestedExtent()>
<com.android.providers.contacts.AccountWithDataSet: java.lang.String getAccountName()>
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.String getPhoneLabel()>
<com.android.contacts.group.GroupDetailFragment: android.net.Uri getGroupUri()>
<com.android.providers.contacts.NameNormalizer: java.text.RuleBasedCollator getCompressingCollator()>
<com.android.contacts.detail.ContactDetailPhotoSetter: android.view.View$OnClickListener setupContactPhotoForClick(android.content.Context,com.android.contacts.model.Contact,android.widget.ImageView,boolean)>
<com.android.contacts.model.account.BaseAccountType$SipAddressKindBuilder: java.lang.String getTagName()>
<com.android.contacts.editor.KindSectionView: int getEditorCount()>
<com.android.contacts.calllog.ExtendedCursor: int getCount()>
<com.android.contacts.voicemail.VoicemailPlaybackFragment$PlaybackViewImpl: android.content.Context getDataSourceContext()>
<com.android.providers.contacts.ContactsTransaction: android.database.sqlite.SQLiteDatabase getDbForTag(java.lang.String)>
<com.android.contacts.model.RawContactDelta: int getMimeEntriesCount(java.lang.String,boolean)>
<com.android.contacts.calllog.ExtendedCursor: short getShort(int)>
<com.android.contacts.group.SuggestedMemberListAdapter$SuggestedMember: java.lang.String getExtraInfo()>
<com.android.vcard.VCardEntry$NameData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()>
<com.android.providers.contacts.ReorderingCursorWrapper: int getType(int)>
<com.android.providers.contacts.ContactsDatabaseHelper: java.lang.String getCountryIso()>
<com.android.vcard.VCardParserImpl_V21: java.util.Set getAvailableEncodingSet()>
<com.android.contacts.model.Contact: com.google.common.collect.ImmutableList getGroupMetaData()>
<com.android.providers.contacts.ReorderingCursorWrapper: float getFloat(int)>
<com.android.contacts.model.dataitem.DataItem: com.android.contacts.model.RawContact getRawContact()>
<com.android.contacts.model.account.ExternalAccountType: java.util.List getExtensionPackageNames()>
<com.android.exchange.provider.ExchangeDirectoryProvider$GalContactRow: java.lang.Object[] getRow()>
<com.android.contacts.group.GroupBrowseListAdapter: com.android.contacts.group.GroupListItem getItem(int)>
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,java.lang.String)>
<com.android.contacts.model.RawContactDelta$ValuesDelta: android.content.ContentValues getCompleteValues()>
<com.android.contacts.activities.DialtactsActivity$ViewPagerAdapter: int getCount()>
<com.android.contacts.editor.ContactEditorUtils: java.util.List getSavedAccounts()>
<com.android.contacts.model.account.GoogleAccountType: com.android.contacts.model.dataitem.DataKind addDataKindPhone(android.content.Context)>
<com.android.contacts.detail.ContactDetailFragment$ViewEntryDimensions: int getPaddingTop()>
<com.android.contacts.model.Contact: long getId()>
<com.android.vcard.VCardEntry$NoteData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()>
<com.android.providers.contacts.NameSplitter$Name: java.lang.String getGivenNames()>
<com.android.contacts.model.account.AccountType: java.lang.String getViewContactNotifyServiceClassName()>
<com.android.contacts.editor.LabeledEditorView$EditTypeAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.contacts.list.LegacyPostalAddressListAdapter: android.net.Uri getContactMethodUri(int)>
<com.android.contacts.model.AccountTypeManagerImpl: java.util.Map getUsableInvitableAccountTypes()>
<com.android.providers.contacts.ContactsDatabaseHelper: long getMimeTypeIdForOrganization()>
<com.android.contacts.list.ContactListItemView: android.widget.TextView getSnippetView()>
<com.android.providers.contacts.NameSplitter$Name: java.lang.String getSuffix()>
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindNote(android.content.Context)>
<com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler: com.android.contacts.detail.PhotoSelectionHandler$PhotoActionListener getListener()>
<com.android.providers.contacts.VoicemailContentProvider$UriData: java.lang.String getWhereClause()>
<com.android.contacts.group.GroupEditorFragment$MemberListAdapter: int getCount()>
<com.android.contacts.editor.EventFieldEditorView: int getDefaultHourForBirthday()>
<com.android.providers.contacts.aggregation.util.NameDistance: float getDistance(byte[],byte[])>
<com.android.contacts.util.StreamItemEntry: java.lang.String getAccountType()>
<com.android.contacts.widget.PinnedHeaderListDemoActivity$TestPinnedHeaderListAdapter: android.view.View newHeaderView(android.content.Context,int,android.database.Cursor,android.view.ViewGroup)>
<com.android.contacts.detail.ContactDetailFragment$AddConnectionViewEntry: android.graphics.drawable.Drawable getIcon()>
<com.android.providers.contacts.HanziToPinyin: com.android.providers.contacts.HanziToPinyin getInstance()>
<com.android.contacts.voicemail.VoicemailPlaybackFragment$PlaybackViewImpl: int getDesiredClipPosition()>
<com.android.contacts.detail.PhotoSelectionHandler: com.android.contacts.model.RawContactDeltaList getDeltaForAttachingPhotoToContact()>
<com.android.contacts.editor.AggregationSuggestionEngine: int getSuggestedContactCount()>
<com.android.contacts.calllog.ExtendedCursor: double getDouble(int)>
<com.android.contacts.list.ContactListAdapter: java.lang.String getSelectedContactLookupKey()>
<com.android.contacts.model.account.ExternalAccountType: java.lang.String getInviteContactActivityClassName()>
<com.android.providers.contacts.ContactLocaleUtils: java.lang.String getSortKey(java.lang.String,int)>
<android.provider.ContactsContract$Contacts: android.net.Uri lookupContact(android.content.ContentResolver,android.net.Uri)>
<android.provider.Contacts$Phones: java.lang.CharSequence getDisplayLabel(android.content.Context,int,java.lang.CharSequence,java.lang.CharSequence[])>
<com.android.contacts.quickcontact.DataAction: android.content.Intent getAlternateIntent()>
<com.android.contacts.group.GroupEditorFragment$Member: long getRawContactId()>
<com.android.providers.contacts.ContactsProvider2: java.lang.String getType(android.net.Uri)>
<com.android.contacts.model.account.ExchangeAccountType: com.android.contacts.model.dataitem.DataKind addDataKindDisplayName(android.content.Context)>
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: java.util.ArrayList getSuggestions(com.android.inputmethod.latin.WordComposer,java.lang.CharSequence,com.android.inputmethod.keyboard.ProximityInfo)>
<com.android.contacts.quickcontact.QuickContactActivity$ViewPagerAdapter: int getCount()>
<com.android.contacts.editor.ContactEditorFragment$PhotoHandler: long getWritableEntityId()>
<com.android.contacts.list.AccountFilterActivity: java.util.List access$100(android.content.Context)>
<com.android.providers.contacts.HanziToPinyin: java.util.ArrayList get(java.lang.String)>
<com.android.contacts.model.account.AccountType: java.lang.String getViewStreamItemPhotoActivity()>
<com.android.contacts.list.CustomContactListFilterActivity$DisplayAdapter: int getGroupCount()>
<com.android.providers.contacts.NameSplitter$Name: java.lang.String getMiddleName()>
<com.android.contacts.model.account.BaseAccountType$GroupMembershipKindBuilder: java.lang.String getTagName()>
<com.android.providers.contacts.DataRowHandlerForEmail: int getTypeRank(int)>
<com.android.providers.contacts.ContactsDatabaseHelper: com.android.providers.contacts.ContactsDatabaseHelper getInstance(android.content.Context)>
<com.android.providers.contacts.ContactDirectoryManager: java.util.Set getDirectoryProviderPackages(android.content.pm.PackageManager)>
<com.android.vcard.VCardEntry$AnniversaryData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()>
<com.android.contacts.model.dataitem.ImDataItem: int getChatCapability()>
<com.android.providers.contacts.ContactLocaleUtils$ChineseContactUtils: java.lang.String getSortKey(java.lang.String)>
<com.android.contacts.detail.StreamItemAdapter: int getViewTypeCount()>
<com.android.contacts.model.account.ExchangeAccountType: com.android.contacts.model.dataitem.DataKind addDataKindPhoneticName(android.content.Context)>
<com.android.contacts.editor.RawContactEditorView: com.android.contacts.editor.TextFieldsEditorView getPhoneticNameEditor()>
<com.android.contacts.list.ContactEntryListAdapter: java.lang.String getQuantityText(int,int,int)>
<com.android.contacts.detail.ContactDetailFragment$InvitableAccountTypesAdapter: long getItemId(int)>
<com.android.contacts.calllog.IntentProvider$1: android.content.Intent getIntent(android.content.Context)>
<com.android.contacts.calllog.IntentProvider$2: android.content.Intent getIntent(android.content.Context)>
<com.android.contacts.calllog.IntentProvider$3: android.content.Intent getIntent(android.content.Context)>
<com.android.contacts.model.account.BaseAccountType$EventKindBuilder: java.lang.String getTagName()>
<com.android.contacts.model.account.AccountType: int getViewGroupLabelResId()>
<com.android.providers.contacts.aggregation.ContactAggregator$NameLookupSelectionBuilder: java.lang.String[] getCommonNicknameClusters(java.lang.String)>
<com.android.contacts.util.AsyncTaskExecutors: com.android.contacts.util.AsyncTaskExecutor createThreadPoolExecutor()>
<com.android.internal.telephony.IIccPhoneBook$Stub: android.os.IBinder asBinder()>
<com.android.providers.contacts.SearchIndexManager$IndexBuilder: java.lang.String getContent()>
<com.android.contacts.model.RawContactDelta$ValuesDelta: android.content.ContentValues getAfter()>
<com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager: java.util.List getAdnRecordsInEf(int)>
<com.android.contacts.list.ContactEntryListAdapter: boolean getDisplayPhotos()>
<com.android.contacts.editor.LabeledEditorView: com.android.contacts.model.RawContactDelta$ValuesDelta getEntry()>
<com.android.contacts.model.dataitem.SipAddressDataItem: java.lang.String getSipAddress()>
<com.android.providers.contacts.TransactionContext: java.util.Set getInsertedRawContactIds()>
<com.android.contacts.calllog.ExtendedCursor: int getInt(int)>
<com.android.contacts.model.account.BaseAccountType$CommonInflater: java.lang.CharSequence inflateUsing(android.content.Context,android.content.ContentValues)>
<com.android.contacts.model.account.AccountType: java.lang.String getInviteContactActivityClassName()>
<com.android.contacts.calllog.CallDetailHistoryAdapter: long getItemId(int)>
<com.android.contacts.editor.LabeledEditorView: android.app.Dialog createDialog(android.os.Bundle)>
<com.android.contacts.list.PhoneFavoriteMergedAdapter: int getPositionForSection(int)>
<com.android.contacts.list.CustomContactListFilterActivity$DisplayAdapter: android.view.View getGroupView(int,boolean,android.view.View,android.view.ViewGroup)>
<com.android.contacts.detail.ContactDetailFragment$AddConnectionViewEntry: java.lang.CharSequence getLabel()>
<com.android.contacts.list.CustomContactListFilterActivity$DisplayAdapter: int getChildrenCount(int)>
<com.android.providers.contacts.DataRowHandler: long insert(android.database.sqlite.SQLiteDatabase,com.android.providers.contacts.TransactionContext,long,android.content.ContentValues)>
<com.android.contacts.group.GroupListItem: java.lang.String getAccountType()>
<com.android.contacts.group.GroupListItem: java.lang.String getDataSet()>
<com.android.contacts.list.ContactTilePhoneFrequentView: int getApproximateImageSize()>
<com.android.providers.contacts.CallLogProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<com.android.providers.contacts.ContactsDatabaseHelper: long getContactId(long)>
<com.android.contacts.calllog.IntentProvider: com.android.contacts.calllog.IntentProvider getReturnCallIntentProvider(java.lang.String)>
<com.android.contacts.model.RawContactDeltaList: com.android.contacts.model.RawContactDelta getFirstWritableRawContact(android.content.Context)>
<com.android.contacts.model.account.BaseAccountType$PhoneActionInflater: int getTypeLabelResource(java.lang.Integer)>
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.IccPhoneBookInterfaceManager getIccPhoneBookInterfaceManager()>
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: java.util.List getAllMessagesFromIccEf()>
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindGroupMembership(android.content.Context)>
<com.android.contacts.vcard.ProcessorBase: java.lang.Object get(long,java.util.concurrent.TimeUnit)>
<com.android.contacts.util.StreamItemPhotoEntry: java.lang.String getPhotoUri()>
<com.android.contacts.detail.ContactDetailDisplayUtils: java.lang.String getAttribution(android.content.Context,com.android.contacts.model.Contact)>
<com.android.vcard.VCardProperty: java.util.List getValueList()>
<com.android.contacts.model.account.ExternalAccountType: java.lang.String getViewContactNotifyServiceClassName()>
<com.android.vcard.VCardEntry$PhotoData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()>
<com.android.contacts.editor.AggregationSuggestionEngine: android.os.Handler getHandler()>
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.Integer getAsInteger(java.lang.String,java.lang.Integer)>
<com.android.contacts.test.InjectedServices: android.content.ContentResolver getContentResolver()>
<com.android.contacts.group.SuggestedMemberListAdapter$SuggestedMember: long getContactId()>
<com.android.contacts.preference.ContactsPreferences: int getDefaultSortOrder()>
<com.android.contacts.list.ContactEntryListAdapter: android.net.Uri getContactUri(int,android.database.Cursor,int,int)>
<com.android.contacts.detail.ContactDetailFragment$InvitableAccountTypesAdapter: int getCount()>
<com.android.contacts.group.SuggestedMemberListAdapter$SuggestedMember: long getRawContactId()>
<com.android.contacts.list.ContactEntryListFragment: android.content.Context getContext()>
<com.android.contacts.quickcontact.ResolveCache: com.android.contacts.quickcontact.ResolveCache getInstance(android.content.Context)>
<com.android.contacts.widget.PinnedHeaderListDemoActivity$TestPinnedHeaderListAdapter: int getPinnedHeaderCount()>
<com.android.contacts.model.RawContactModifier: java.util.ArrayList getValidTypes(com.android.contacts.model.RawContactDelta,com.android.contacts.model.dataitem.DataKind)>
<com.android.contacts.datepicker.DatePicker$SavedState: int getYear()>
<com.android.contacts.quickcontact.DataAction: android.graphics.drawable.Drawable getAlternateIcon()>
<com.android.contacts.ContactPhotoManager: int getDefaultAvatarResId(android.content.Context,int,boolean)>
<com.android.contacts.list.ContactListAdapter: android.view.View newView(android.content.Context,int,android.database.Cursor,int,android.view.ViewGroup)>
<com.android.contacts.vcard.CancelActivity: android.app.Dialog onCreateDialog(int,android.os.Bundle)>
<android.provider.Contacts$ContactMethods: java.lang.CharSequence getDisplayLabel(android.content.Context,int,int,java.lang.CharSequence)>
<com.android.providers.contacts.ContactLocaleUtils: com.android.providers.contacts.ContactLocaleUtils getIntance()>
<com.android.contacts.list.ContactTileAdapter: long getItemId(int)>
<com.android.contacts.group.SuggestedMemberListAdapter: android.widget.Filter getFilter()>
<com.android.contacts.vcard.ImportProcessor: int getType()>
<com.android.contacts.ContactsActivity: java.lang.Object getSystemService(java.lang.String)>
<com.android.contacts.editor.PhoneticNameEditorView$PhoneticValuesDelta: java.lang.String getAsString(java.lang.String)>
<com.android.contacts.list.ContactTileAdapter: int getItemViewType(int)>
<com.android.contacts.list.ContactListItemView: int getDefaultPhotoViewSize()>
<com.android.contacts.widget.IndexerListAdapter: java.lang.Object[] getSections()>
<com.android.providers.contacts.ContactsDatabaseHelper: long getMimeTypeIdForStructuredPostal()>
<com.android.contacts.group.GroupBrowseListAdapter: int getCount()>
<com.android.contacts.widget.IndexerListAdapter: android.widget.SectionIndexer getIndexer()>
<com.android.contacts.ContactPhotoManagerImpl$Request: java.lang.Object getKey()>
<com.android.contacts.list.PhoneNumberListAdapter: android.view.View newView(android.content.Context,int,android.database.Cursor,int,android.view.ViewGroup)>
<com.android.contacts.widget.PinnedHeaderListView: int getPositionAt(int)>
<com.android.contacts.widget.PinnedHeaderListDemoActivity$TestPinnedHeaderListAdapter: android.view.View newView(android.content.Context,int,android.database.Cursor,int,android.view.ViewGroup)>
<com.android.contacts.interactions.PhoneNumberInteraction$PhoneItemAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.contacts.list.AccountFilterActivity$FilterListAdapter: com.android.contacts.list.ContactListFilter getItem(int)>
<com.android.contacts.model.RawContactDelta$ValuesDelta: int getEmailType()>
<com.android.contacts.list.DirectoryPartition: java.lang.String getDisplayName()>
<com.android.contacts.list.AccountFilterActivity$FilterListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.contacts.ContactPhotoManager: com.android.contacts.ContactPhotoManager createContactPhotoManager(android.content.Context)>
<com.android.contacts.detail.ContactDetailFragment$ViewEntry: long getId()>
<com.android.contacts.group.GroupEditorFragment$Member: android.net.Uri getPhotoUri()>
<com.android.contacts.model.account.BaseAccountType$CommonInflater: java.lang.String getTypeColumn()>
<com.android.contacts.vcard.ImportVCardActivity$VCardFile: java.lang.String getName()>
<com.android.contacts.ContactPhotoManagerImpl$Request: android.net.Uri getUri()>
<com.android.providers.contacts.VoicemailContentProvider$UriData: com.android.providers.contacts.VoicemailContentProvider$UriData createUriData(android.net.Uri)>
<com.android.contacts.CallDetailActivity$1UpdateContactDetailsTask$2: int getMaximumScrollableHeaderOffset()>
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getCdmaPhone()>
<com.android.vcard.VCardParserImpl_V40: int getVersion()>
<com.android.providers.contacts.ContactsProvider2: java.lang.String[] getDefaultProjection(android.net.Uri)>
<com.android.vcard.VCardParserImpl_V30: int getVersion()>
<com.android.contacts.list.ContactTileAdapter: int getNumFrequents()>
<com.android.vcard.VCardProperty: java.util.Collection getParameters(java.lang.String)>
<com.android.vcard.VCardParserImpl_V21: int getVersion()>
<com.android.contacts.calllog.ExtendedCursor: java.lang.String[] getColumnNames()>
<android.provider.ContactsContract$RawContacts: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)>
<com.android.vcard.VCardParserImpl_V21: java.lang.String getLine()>
<com.android.contacts.preference.ContactsPreferences: int getDisplayOrder()>
<com.android.vcard.VCardParserImpl_V30: java.lang.String getLine()>
<com.android.providers.contacts.SearchIndexManager$IndexBuilder: int getInt(java.lang.String)>
<com.android.contacts.model.dataitem.GroupMembershipDataItem: long getGroupRowId()>
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.String getPhoneNormalizedNumber()>
<com.android.contacts.group.GroupEditorFragment$MemberListAdapter: long getItemId(int)>
<com.android.contacts.list.AccountFilterActivity$FilterListAdapter: long getItemId(int)>
<com.android.contacts.interactions.TestLoaderManager: android.content.Loader initLoader(int,android.os.Bundle,android.app.LoaderManager$LoaderCallbacks)>
<com.android.contacts.list.ContactsRequest: java.lang.String getQueryString()>
<com.android.contacts.vcard.ImportVCardActivity: android.app.Dialog onCreateDialog(int,android.os.Bundle)>
<com.android.contacts.editor.AggregationSuggestionEngine: java.util.List getSuggestions()>
<com.android.contacts.list.ContactEntryListFragment: java.lang.String getQueryString()>
<com.android.contacts.calllog.CallDetailHistoryAdapter: int getItemViewType(int)>
<com.android.contacts.group.GroupEditorFragment$CancelEditDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)>
<com.android.contacts.editor.LabeledEditorView$EditTypeAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)>
<com.android.contacts.vcard.VCardService$MyBinder: com.android.contacts.vcard.VCardService getService()>
<com.android.exchange.adapter.ContactsSyncAdapter: java.lang.String getCollectionName()>
<com.android.contacts.socialwidget.SocialWidgetSettings: com.android.contacts.socialwidget.SocialWidgetSettings getInstance()>
<com.android.contacts.editor.GroupMembershipView$GroupMembershipAdapter: int getViewTypeCount()>
<com.android.contacts.list.DirectoryPartition: int getStatus()>
<com.android.contacts.util.ExpirableCache: java.lang.Object getPossiblyExpired(java.lang.Object)>
<com.android.contacts.model.RawContactModifier: com.android.contacts.model.account.AccountType$EditType getBestValidType(com.android.contacts.model.RawContactDelta,com.android.contacts.model.dataitem.DataKind,boolean,int)>
<com.android.contacts.editor.ContactEditorUtils: com.android.contacts.model.account.AccountWithDataSet getDefaultAccount()>
<com.android.providers.contacts.NameSplitter: int getAdjustedNameStyleBasedOnPhoneticNameStyle(int,int)>
<com.android.providers.contacts.AccountWithDataSet: java.lang.String getDataSet()>
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.Integer getAsInteger(java.lang.String)>
<com.android.contacts.model.dataitem.PhoneDataItem: java.lang.String getFormattedPhoneNumber()>
<com.android.contacts.model.RawContact: java.lang.String getAccountTypeString()>
<com.android.contacts.editor.SplitContactConfirmationDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)>
<com.android.contacts.list.PostalAddressListAdapter: android.net.Uri getDataUri(int)>
<com.android.contacts.ContactsActivity: android.app.Fragment getFragment(int)>
<com.android.mms.data.ContactList: com.android.mms.data.ContactList getByNumbers(java.lang.String,boolean,boolean)>
<com.android.mms.data.Contact: java.lang.String getNameAndNumber()>
<com.android.providers.contacts.NameNormalizer: java.text.RuleBasedCollator getComplexityCollator()>
<android.provider.ContactsContract$ProfileSyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)>
<com.android.contacts.model.account.BaseAccountType$ImKindBuilder: java.lang.String getTagName()>
<com.android.providers.contacts.VoicemailContentProvider: java.lang.String getCallingPackage()>
<com.android.contacts.editor.RawContactEditorView: com.android.contacts.editor.TextFieldsEditorView getNameEditor()>
<com.android.contacts.detail.ContactDetailFragment$ViewEntryDimensions: int getPaddingRight()>
<com.android.contacts.list.DirectoryPartition: long getDirectoryId()>
<com.android.contacts.group.GroupListItem: int getMemberCount()>
<com.android.mms.data.Contact: android.graphics.drawable.Drawable getAvatar(android.content.Context,android.graphics.drawable.Drawable)>
<com.android.contacts.interactions.ImportExportDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)>
<com.android.contacts.list.AccountFilterActivity$FilterListAdapter: int getCount()>
<com.android.vcard.VCardComposer: int getCount()>
<com.android.contacts.model.RawContact: com.android.contacts.model.AccountTypeManager getAccountTypeManager()>
<com.android.vcard.VCardEntry$BirthdayData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()>
<com.android.contacts.model.RawContactDelta: com.android.contacts.model.RawContactDelta$ValuesDelta getPrimaryEntry(java.lang.String)>
<com.android.providers.contacts.ContactsDatabaseHelper$StructuredNameLookupBuilder: java.lang.String[] getCommonNicknameClusters(java.lang.String)>
<com.android.mms.data.Contact: long getRecipientId()>
<com.android.vcard.VCardProperty: java.lang.String getName()>
<com.android.mms.data.Contact: java.lang.String getNumber()>
<com.android.contacts.util.StreamItemPhotoEntry: long getId()>
<com.android.contacts.list.JoinContactListAdapter: int getViewTypeCount()>
<com.android.contacts.model.account.BaseAccountType$EventActionInflater: int getTypeLabelResource(java.lang.Integer)>
<com.android.contacts.model.dataitem.StructuredNameDataItem: java.lang.String getPhoneticMiddleName()>
<com.android.contacts.util.DataStatus: int getPresence()>
<com.android.contacts.model.RawContact: java.lang.String getDataSet()>
<com.android.contacts.voicemail.VoicemailPlaybackPresenter$FetchResultHandler: java.lang.Runnable getTimeoutRunnable()>
<com.android.contacts.list.ProfileAndContactsLoader$1: android.os.Bundle getExtras()>
<com.android.contacts.model.account.AccountType: java.util.List getExtensionPackageNames()>
<com.android.contacts.activities.DialtactsActivity: java.lang.String getCallOrigin()>
<com.android.vcard.VCardEntry$SipData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()>
<com.android.providers.contacts.DataRowHandler: long getMimeTypeId()>
<com.android.contacts.list.ContactsSectionIndexer: int getPositionForSection(int)>
<com.android.contacts.model.dataitem.ImDataItem: java.lang.String getCustomProtocol()>
<com.android.contacts.list.ContactTileView: android.net.Uri getLookupUri()>
<com.android.vcard.VCardEntryCommitter: java.util.ArrayList getCreatedUris()>
<com.android.contacts.model.account.BaseAccountType$SimpleInflater: java.lang.String getColumnNameForTest()>
<com.android.vcard.VCardParserImpl_V21: java.util.Set getKnownValueSet()>
<com.android.contacts.detail.ContactDetailUpdatesFragment: int getFirstListItemOffset()>
<com.android.contacts.model.dataitem.DataItem: int getKindTypeColumn()>
<com.android.providers.contacts.ContactsProvider2: android.accounts.Account getDefaultAccount()>
<com.android.providers.contacts.AccountWithDataSet: com.android.providers.contacts.AccountWithDataSet get(java.lang.String,java.lang.String,java.lang.String)>
<com.android.contacts.model.account.BaseAccountType$ImActionInflater: java.lang.String getLabelColumn()>
<com.android.contacts.editor.ContactEditorFragment: com.android.contacts.editor.BaseRawContactEditorView getRawContactEditorView(long)>
<com.android.contacts.group.GroupBrowseListAdapter: int getSelectedGroupPosition()>
<com.android.contacts.model.dataitem.DataItem: long getId()>
<com.android.contacts.model.account.ExternalAccountType: java.lang.String getCreateContactActivityClassName()>
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindStructuredPostal(android.content.Context)>
<com.android.providers.contacts.VoicemailContentTable: java.lang.String getType(com.android.providers.contacts.VoicemailContentProvider$UriData)>
<com.android.contacts.util.ThemeUtils: int getAttribute(android.content.res.Resources$Theme,int)>
<com.android.contacts.editor.ContactEditorFragment$AggregationSuggestionAdapter: int getCount()>
<com.android.mms.data.Contact$ContactsCache: com.android.mms.data.Contact getMe(boolean)>
<com.android.contacts.model.account.BaseAccountType: com.android.contacts.model.dataitem.DataKind addDataKindNickname(android.content.Context)>
<com.android.providers.contacts.ContactsProvider2: java.util.Locale getLocale()>
<com.android.contacts.model.account.BaseAccountType$NoteKindBuilder: java.lang.String getTagName()>
<com.android.contacts.util.WeakAsyncTask: java.lang.Object doInBackground(java.lang.Object[])>
<com.android.contacts.util.ImageViewDrawableSetter: android.widget.ImageView getTarget()>
<com.android.contacts.TypePrecedence: int getTypePrecedence(java.lang.String,int)>
<com.android.vcard.VCardParserImpl_V21: java.util.Set getKnownTypeSet()>
<com.android.providers.contacts.GlobalSearchSupport: android.database.Cursor handleSearchShortcutRefresh(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String)>
<com.android.providers.contacts.ContactsProvider2: com.android.providers.contacts.ContactsDatabaseHelper getThreadActiveDatabaseHelperForTest()>
<com.android.contacts.group.SuggestedMemberListAdapter$SuggestedMember: java.lang.String getDisplayName()>
<com.android.contacts.detail.StreamItemAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.providers.contacts.PhotoProcessor: android.graphics.Bitmap getDisplayPhoto()>
<com.android.providers.contacts.DefaultCallLogInsertionHelper: com.android.providers.contacts.DefaultCallLogInsertionHelper getInstance(android.content.Context)>
<com.android.contacts.model.dataitem.DataItem: com.android.contacts.model.dataitem.DataKind getDataKind()>
<com.android.contacts.list.PhoneFavoriteMergedAdapter: long getItemId(int)>
<com.android.contacts.list.ContactTileAdapter: int getViewTypeCount()>
<com.android.vcard.VCardEntry: java.util.ArrayList constructInsertOperations(android.content.ContentResolver,java.util.ArrayList)>
<com.android.providers.contacts.SearchIndexManager$IndexBuilder: java.lang.String getTokens()>
<com.android.contacts.editor.ContactEditorFragment$AggregationSuggestionAdapter: long getItemId(int)>
<com.android.providers.contacts.ContactsProvider2: int getMaxThumbnailDim()>
<com.android.providers.contacts.ContactsDatabaseHelper: long getMimeTypeIdForPhone()>
<com.android.contacts.activities.ActionBarAdapter$CustomArrayAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)>
<com.android.providers.contacts.ContactsProvider2: com.android.providers.contacts.PhotoStore getProfilePhotoStore()>
<com.android.contacts.list.DirectoryListLoader: android.database.Cursor loadInBackground()>
<com.android.contacts.vcard.ExportVCardActivity: android.app.Dialog onCreateDialog(int,android.os.Bundle)>
<com.android.contacts.model.RawContactModifier: com.android.contacts.model.account.AccountType$EditType getCurrentType(com.android.contacts.model.RawContactDelta$ValuesDelta,com.android.contacts.model.dataitem.DataKind)>
<com.android.contacts.group.GroupBrowseListFragment: android.database.Cursor access$302(com.android.contacts.group.GroupBrowseListFragment,android.database.Cursor)>
<com.android.providers.contacts.ContactsDatabaseHelper: long getMimeTypeIdForIm()>
<com.android.contacts.calllog.DefaultVoicemailNotifier: com.android.contacts.calllog.DefaultVoicemailNotifier getInstance(android.content.Context)>
<com.android.contacts.model.Contact: com.google.common.collect.ImmutableMap getStatuses()>
<com.android.contacts.quickcontact.DataAction: java.lang.CharSequence getSubtitle()>
<com.android.vcard.VCardEntryCounter: int getCount()>
<com.android.contacts.list.LegacyPhoneNumberListAdapter: android.view.View newView(android.content.Context,int,android.database.Cursor,int,android.view.ViewGroup)>
<com.android.contacts.list.ContactTileAdapter: int getFrequentHeaderPosition()>
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.String getEmailData()>
<android.provider.Contacts$Settings: java.lang.String getSetting(android.content.ContentResolver,java.lang.String,java.lang.String)>
<com.android.providers.contacts.ProfileProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<com.android.contacts.detail.PhotoSelectionHandler: long getWritableEntityId()>
<com.android.contacts.util.AccountsListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.contacts.model.account.AccountType: java.lang.CharSequence getInviteContactActionLabel(android.content.Context)>
<com.android.contacts.model.account.AccountType: java.lang.String getViewStreamItemActivity()>
<com.android.internal.telephony.IccPhoneBookInterfaceManager: java.util.List getAdnRecordsInEf(int)>
<com.android.contacts.activities.ActionBarAdapter$CustomArrayAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.contacts.detail.ContactDetailTabCarousel: int getAllowedHorizontalScrollLength()>
<com.android.contacts.list.ContactEntryListAdapter: int getSortOrder()>
<com.android.providers.contacts.ContactsDatabaseHelper: java.util.Set getAllAccountsWithDataSets()>
<com.android.contacts.model.dataitem.DataItem: android.content.ContentValues getContentValues()>
<com.android.providers.contacts.ContactsProvider2: com.android.providers.contacts.PhotoStore getPhotoStore()>
<com.android.internal.telephony.IIccPhoneBook$Stub: com.android.internal.telephony.IIccPhoneBook asInterface(android.os.IBinder)>
<com.android.contacts.model.RawContactDelta$ValuesDelta: java.lang.String getDisplayName()>
<com.android.contacts.model.Contact: java.lang.String getDisplayName()>
<com.android.providers.contacts.SearchIndexManager$FtsQueryBuilder: com.android.providers.contacts.SearchIndexManager$FtsQueryBuilder getDigitsQueryBuilder(java.lang.String)>
<com.android.contacts.detail.ContactDetailFragment$NetworkTitleViewEntry: android.graphics.drawable.Drawable getIcon()>
<com.android.vcard.VCardEntry$PhoneData: com.android.vcard.VCardEntry$EntryLabel getEntryLabel()>
<com.android.contacts.list.ContactListAdapter: long getSelectedContactDirectoryId()>
<android.provider.ContactsContract$SyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)>
<com.android.contacts.model.RawContact: java.lang.Long getId()>
<com.android.providers.contacts.ContactsDatabaseHelper: int getDisplayNameSourceForMimeTypeId(int)>
<com.android.contacts.model.dataitem.DataItem: com.android.contacts.model.account.AccountType getAccountType()>
<com.android.mms.data.ContactList: com.android.mms.data.ContactList getByNumbers(java.lang.Iterable,boolean)>
<com.android.providers.contacts.VoicemailContentProvider: com.android.providers.contacts.ContactsDatabaseHelper getDatabaseHelper(android.content.Context)>
<com.android.providers.contacts.MemoryCursor: java.lang.String[] getColumnNames()>
<com.android.providers.contacts.ContactsProvider2: com.android.providers.contacts.DataRowHandler getDataRowHandler(java.lang.String)>
<com.android.vcard.VCardComposer: java.lang.String createOneEntry()>
<com.android.providers.contacts.ContactsDatabaseHelper: long getPackageId(java.lang.String)>
<com.android.contacts.list.ContactEntryListFragment: int getSortOrder()>
<com.android.contacts.activities.PhotoSelectionActivity$PhotoHandler$PhotoListener: java.lang.String getCurrentPhotoFile()>
<com.android.providers.contacts.NameSplitter$Name: java.lang.String getPrefix()>
<com.android.contacts.list.PhoneFavoriteMergedAdapter: int getItemViewType(int)>
<com.android.contacts.list.ContactEntryListAdapter: java.lang.String getContactsCount()>
<com.android.contacts.datepicker.DatePicker: int getYear()>
<com.android.mms.data.Contact: boolean getSendToVoicemail()>
<com.android.providers.contacts.LegacyApiSupport: java.lang.String getType(android.net.Uri)>
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: java.util.List getAdnRecordsInEf(int)>
<com.android.contacts.activities.ContactEditorActivity: com.android.contacts.util.DialogManager getDialogManager()>
<com.android.contacts.preference.DisplayOrderPreference: java.lang.CharSequence getSummary()>
<com.android.providers.contacts.PhotoProcessor: android.graphics.Bitmap getNormalizedBitmap(android.graphics.Bitmap,int,boolean)>
<com.android.providers.contacts.ContactDirectoryManager: java.lang.String providerDescription(android.content.pm.ProviderInfo)>
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: java.util.List getAdnRecordsInEf(int)>
<com.android.contacts.datepicker.DatePicker$SavedState: int getDay()>
<com.android.contacts.util.DialogManager: android.app.Dialog onCreateDialog(int,android.os.Bundle)>
<com.android.contacts.model.RawContact: java.lang.String getAccountName()>
<com.android.providers.contacts.VoicemailContentTable: android.database.Cursor query(com.android.providers.contacts.VoicemailContentProvider$UriData,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<com.android.contacts.util.StructuredPostalUtils: android.content.Intent getViewPostalAddressIntent(java.lang.String)>
<com.android.contacts.NfcHandler: android.nfc.NdefMessage createNdefMessage(android.nfc.NfcEvent)>
<com.android.contacts.detail.StreamItemAdapter: long getItemId(int)>
<com.android.contacts.ContactSaveService: java.lang.Object getSystemService(java.lang.String)>
<com.android.contacts.model.account.AccountType: java.lang.String getCreateContactActivityClassName()>
<com.android.contacts.model.dataitem.EmailDataItem: java.lang.String getData()>
<com.android.contacts.widget.PinnedHeaderListAdapter: android.view.View getPinnedHeaderView(int,android.view.View,android.view.ViewGroup)>
<com.android.contacts.quickcontact.ResolveCache: android.graphics.drawable.Drawable getIcon(com.android.contacts.quickcontact.Action)>
<com.android.contacts.model.ContactLoader: android.net.Uri getLookupUri()>
<com.android.providers.contacts.NameSplitter$Name: java.lang.String getFamilyName()>
<com.android.calendar.Utils: java.lang.String getDisplayedDatetime(long,long,long,java.lang.String,boolean,android.content.Context)>
<com.android.calendar.EventRecurrenceFormatter: java.lang.String getRepeatString(android.content.res.Resources,com.android.calendarcommon2.EventRecurrence)>
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: android.widget.RemoteViews getViewAt(int)>
<com.android.calendar.month.SimpleWeekView: int getFirstJulianDay()>
<com.android.calendar.Utils: long getTardis()>
<com.android.calendar.month.SimpleWeeksAdapter: android.text.format.Time getSelectedDay()>
<com.android.calendar.selectcalendars.SelectCalendarsSimpleAdapter: java.lang.Object getItem(int)>
<com.android.calendar.EventInfoFragment: android.database.Cursor access$2002(com.android.calendar.EventInfoFragment,android.database.Cursor)>
<com.android.calendar.alerts.AlertReceiver: com.android.calendar.alerts.AlertService$NotificationWrapper makeDigestNotification(android.content.Context,java.util.ArrayList,java.lang.String,boolean)>
<android.widget.CalendarView: int getDateTextAppearance()>
<android.provider.CalendarContract$Instances: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],long,long)>
<com.android.calendar.TimezoneAdapter: int getRowById(java.lang.String)>
<com.android.calendar.Utils: java.lang.String[] getSharedPreference(android.content.Context,java.lang.String,java.lang.String[])>
<com.android.calendar.Event: java.lang.String getTitleAndLocation()>
<com.android.calendar.alerts.AlertUtils: android.content.SharedPreferences getFiredAlertsTable(android.content.Context)>
<com.android.calendar.EventInfoFragment: long getStartMillis()>
<com.android.calendar.Utils: int getDeclinedColorFromColor(int)>
<com.android.calendar.alerts.AlertUtils: java.lang.String formatTimeLocation(android.content.Context,long,boolean,java.lang.String)>
<com.android.calendar.selectcalendars.SelectCalendarsSyncAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.calendar.event.EditEventView$TitleAdapter: int getCount()>
<android.widget.CalendarView$WeekView: java.util.Calendar getFirstDay()>
<com.android.calendar.alerts.AlertReceiver: android.content.Intent createEmailIntent(android.content.Context,long,java.lang.String)>
<com.android.calendar.Utils: java.lang.String[] getQuickResponses(android.content.Context)>
<com.android.providers.calendar.CalendarProvider2: java.lang.String getType(android.net.Uri)>
<com.android.calendar.event.EditEventFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>
<com.android.calendar.agenda.AgendaWindowAdapter: int getHeaderPositionFromItemPosition(int)>
<com.android.providers.calendar.SQLiteContentProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>
<com.android.calendar.selectcalendars.SelectCalendarsSimpleAdapter: long getItemId(int)>
<com.android.calendar.EventInfoFragment: android.database.Cursor access$900(com.android.calendar.EventInfoFragment)>
<com.android.calendar.agenda.AgendaWindowAdapter: long getItemId(int)>
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: int getViewTypeCount()>
<com.android.providers.calendar.CalendarDatabaseHelper: com.android.providers.calendar.CalendarDatabaseHelper getInstance(android.content.Context)>
<android.widget.CalendarView: int getWeekDayTextAppearance()>
<com.android.calendar.event.EditEventHelper: long constructDefaultStartTime(long)>
<com.android.calendar.agenda.AgendaFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>
<com.android.calendar.month.MonthByWeekAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<android.widget.CalendarView$WeeksAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.calendar.AsyncQueryService: int getNextToken()>
<android.widget.CalendarView$WeeksAdapter: long getItemId(int)>
<com.android.calendar.DayView$ScrollInterpolator: float getInterpolation(float)>
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: java.lang.String access$500(com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory)>
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountAdapter: android.view.View newGroupView(android.content.Context,android.database.Cursor,boolean,android.view.ViewGroup)>
<com.android.calendar.selectcalendars.SelectCalendarsSyncAdapter: long getItemId(int)>
<com.android.calendar.agenda.AgendaWindowAdapter: com.android.calendar.agenda.AgendaWindowAdapter$DayAdapterInfo getAdapterInfoByPosition(int)>
<com.android.calendarcommon2.Duration: long getMillis()>
<com.android.calendar.Utils: int getWeeksSinceEpochFromJulianDay(int,int)>
<com.android.calendar.Utils: int getSharedPreference(android.content.Context,java.lang.String,int)>
<com.android.calendar.DayFragment: long getSelectedTimeInMillis()>
<com.android.providers.calendar.MetaData: com.android.providers.calendar.MetaData$Fields getFieldsLocked()>
<com.android.exchange.utility.CalendarUtilities: com.android.exchange.utility.CalendarUtilities$TimeZoneDate getTimeZoneDateFromSystemTime(byte[],int)>
<com.android.calendar.agenda.AgendaListView: long getFirstVisibleTime(com.android.calendar.agenda.AgendaWindowAdapter$EventInfo)>
<com.android.calendar.DayFragment: long getSupportedEventTypes()>
<com.android.calendar.selectcalendars.SelectCalendarsSimpleAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.exchange.utility.CalendarUtilities: com.android.emailcommon.provider.EmailContent$Message createMessageForEventId(android.content.Context,long,int,java.lang.String,com.android.emailcommon.provider.Account)>
<com.android.calendar.DayOfMonthDrawable: int getOpacity()>
<com.android.calendar.Utils: int getWeekNumberFromTime(long,android.content.Context)>
<com.android.calendar.month.MonthByWeekFragment: long getSupportedEventTypes()>
<com.android.calendar.Utils: boolean getSharedPreference(android.content.Context,java.lang.String,boolean)>
<com.android.calendar.EventInfoFragment: android.database.Cursor access$600(com.android.calendar.EventInfoFragment)>
<android.widget.CalendarView: int getSelectedWeekBackgroundColor()>
<com.android.calendar.selectcalendars.SelectCalendarsSyncAdapter: java.lang.Object getItem(int)>
<com.android.calendar.Utils: java.lang.String getTimeZone(android.content.Context,java.lang.Runnable)>
<com.android.calendar.month.SimpleWeeksAdapter: long getItemId(int)>
<com.android.providers.calendar.QueryParameterUtils: java.lang.String getQueryParameter(android.net.Uri,java.lang.String)>
<com.android.calendar.selectcalendars.SelectCalendarsSyncAdapter: java.util.HashMap getChanges()>
<android.provider.CalendarContract$Reminders: android.database.Cursor query(android.content.ContentResolver,long,java.lang.String[])>
<com.android.calendar.SearchActivity: long getSupportedEventTypes()>
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: android.widget.RemoteViews getLoadingView()>
<com.android.calendar.agenda.AgendaWindowAdapter: long getSelectedInstanceId()>
<com.android.calendar.agenda.AgendaWindowAdapter: int getCount()>
<com.android.calendar.CalendarViewAdapter: java.lang.Object getItem(int)>
<com.android.calendar.EventInfoFragment: android.content.DialogInterface$OnDismissListener access$3400(com.android.calendar.EventInfoFragment)>
<com.android.calendar.AbstractCalendarActivity: com.android.calendar.AsyncQueryService getAsyncQueryService()>
<com.android.calendar.Utils: java.lang.String getDisplayedTimezone(long,java.lang.String,java.lang.String)>
<com.android.calendar.CalendarController: long getEventId()>
<android.provider.CalendarContract$CalendarAlerts: long findNextAlarmTime(android.content.ContentResolver,long)>
<com.android.exchange.utility.CalendarUtilities: int getTrueTransitionHour(java.util.GregorianCalendar)>
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountAdapter: android.database.Cursor getChildrenCursor(android.database.Cursor)>
<android.provider.CalendarContract$Instances: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],long,long,java.lang.String)>
<android.widget.CalendarView$WeeksAdapter: java.lang.Object getItem(int)>
<com.android.calendar.selectcalendars.SelectCalendarsSyncAdapter: int getCount()>
<com.android.calendar.agenda.AgendaWindowAdapter: int getItemViewType(int)>
<com.android.providers.calendar.CalendarProvider2: android.database.sqlite.SQLiteOpenHelper getDatabaseHelper(android.content.Context)>
<android.provider.CalendarContract$EventDays: android.database.Cursor query(android.content.ContentResolver,int,int,java.lang.String[])>
<android.provider.CalendarContract$EventsEntity$EntityIteratorImpl: android.content.Entity getEntityAndIncrementCursor(android.database.Cursor)>
<com.android.exchange.utility.CalendarUtilities: java.lang.String getString(byte[],int,int)>
<com.android.exchange.utility.CalendarUtilities: com.android.emailcommon.provider.EmailContent$Message createMessageForEntity(android.content.Context,android.content.Entity,int,java.lang.String,com.android.emailcommon.provider.Account)>
<android.widget.CalendarView: int getUnfocusedMonthDateColor()>
<com.android.exchange.utility.CalendarUtilities: int getWord(byte[],int)>
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: long getItemId(int)>
<com.android.calendar.TimezoneAdapter: java.lang.CharSequence[][] getAllTimezones()>
<com.android.calendar.event.EditEventFragment: long getSupportedEventTypes()>
<com.android.calendar.CalendarController: long getDateFlags()>
<com.android.calendar.Utils: int getDaysPerWeek(android.content.Context)>
<android.widget.CalendarView: int getFocusedMonthDateColor()>
<com.android.calendar.DayView: long getSelectedTimeInMillis()>
<com.android.calendar.Utils: long getNextMidnight(android.text.format.Time,long,java.lang.String)>
<com.android.calendar.Event: long getEndMillis()>
<android.widget.CalendarView: long getMaxDate()>
<com.android.calendar.CalendarController: int getPreviousViewType()>
<com.android.calendar.widget.CalendarAppWidgetProvider: android.app.PendingIntent getLaunchPendingIntentTemplate(android.content.Context)>
<com.android.calendar.month.SimpleWeeksAdapter: int getCount()>
<com.android.calendar.CalendarViewAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)>
<com.android.calendar.DayView: int getFirstVisibleHour()>
<com.android.calendar.month.MonthWeekEventsView: int getDayIndexFromLocation(float)>
<com.android.calendar.agenda.AgendaByDayAdapter: long getItemId(int)>
<android.widget.CalendarView: android.graphics.drawable.Drawable getSelectedDateVerticalBar()>
<com.android.providers.calendar.SQLiteContentProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>
<com.android.calendar.Event: int getColumn()>
<com.android.exchange.adapter.CalendarSyncAdapter: java.lang.String getCollectionName()>
<com.android.calendar.Event: int getMaxColumns()>
<android.widget.CalendarView: int getFirstDayOfWeek()>
<com.android.calendar.CalendarController: long getTime()>
<com.android.calendar.Utils: int getDisplayColorFromColor(int)>
<com.android.exchange.utility.CalendarUtilities: long getUtcAllDayCalendarTime(long,java.util.TimeZone)>
<com.android.calendar.Utils: java.lang.String getSharedPreference(android.content.Context,java.lang.String,java.lang.String)>
<com.android.calendar.agenda.AgendaByDayAdapter: int getCount()>
<com.android.calendar.EventInfoFragment: long getEventId()>
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountAdapter: android.view.View newChildView(android.content.Context,android.database.Cursor,boolean,android.view.ViewGroup)>
<com.android.calendar.month.SimpleWeekView: int getFirstMonth()>
<android.widget.CalendarView: long getDate()>
<android.widget.CalendarView$WeeksAdapter: int getCount()>
<com.android.calendar.EventInfoFragment: long getSupportedEventTypes()>
<com.android.calendar.alerts.AlertService: boolean updateAlertNotification(android.content.Context)>
<com.android.calendar.CalendarUtils$TimeZoneUtils: java.lang.String getTimeZone(android.content.Context,java.lang.Runnable)>
<com.android.calendar.EventInfoFragment: long getEndMillis()>
<com.android.calendar.agenda.AgendaListView: com.android.calendar.agenda.AgendaAdapter$ViewHolder getSelectedViewHolder()>
<com.android.calendar.event.EditEventHelper: android.content.ContentValues getContentValuesFromModel(com.android.calendar.CalendarEventModel)>
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: int getCount()>
<com.android.providers.calendar.CalendarProvider2: com.android.providers.calendar.CalendarAlarmManager getOrCreateCalendarAlarmManager()>
<com.android.calendar.AsyncQueryServiceHelper$OperationInfo: long getDelay(java.util.concurrent.TimeUnit)>
<com.android.calendar.agenda.AgendaWindowAdapter: com.android.calendar.agenda.AgendaWindowAdapter$EventInfo getEventByPosition(int)>
<com.android.calendar.CalendarEventModel: java.lang.String getAttendeesString()>
<com.android.calendar.agenda.AgendaListView: com.android.calendar.agenda.AgendaWindowAdapter$EventInfo getFirstVisibleEvent()>
<com.android.calendar.Utils: java.lang.String getSearchAuthority(android.content.Context)>
<com.android.calendar.CalendarController: com.android.calendar.CalendarController getInstance(android.content.Context)>
<com.android.calendar.GeneralPreferences: java.lang.String getRingtoneTitleFromUri(android.content.Context,java.lang.String)>
<com.android.calendar.agenda.AgendaWindowAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<android.widget.CalendarView: int getWeekNumberColor()>
<com.android.exchange.utility.CalendarUtilities: int getTrueTransitionMinute(java.util.GregorianCalendar)>
<com.android.providers.calendar.SQLiteContentProvider: android.database.sqlite.SQLiteOpenHelper getDatabaseHelper()>
<com.android.calendar.agenda.AgendaWindowAdapter: int getHeaderItemsNumber(int)>
<com.android.calendar.CalendarEventModel$ReminderEntry: int getMinutes()>
<com.android.calendar.agenda.AgendaWindowAdapter: int getStickyHeaderHeight()>
<com.android.calendar.agenda.AgendaByDayAdapter: java.lang.Object getItem(int)>
<com.android.calendar.month.MonthWeekEventsView: android.text.format.Time getDayFromLocation(float)>
<com.android.calendar.selectcalendars.SelectCalendarsSimpleAdapter: int getVisible(int)>
<com.android.calendar.agenda.AgendaByDayAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.calendar.event.EditEventHelper: java.util.LinkedHashSet getAddressesFromList(java.lang.String,com.android.common.Rfc822Validator)>
<com.android.calendar.Utils: java.lang.String getWidgetScheduledUpdateAction(android.content.Context)>
<android.provider.CalendarContract$Attendees: android.database.Cursor query(android.content.ContentResolver,long,java.lang.String[])>
<com.android.calendar.DayView: android.text.format.Time getSelectedTime()>
<com.android.calendar.agenda.AgendaByDayAdapter: int getViewTypeCount()>
<com.android.exchange.utility.CalendarUtilities: long getLocalAllDayCalendarTime(long,java.util.TimeZone)>
<com.android.calendar.CalendarEventModel$ReminderEntry: int getMethod()>
<com.android.calendar.extensions.AllInOneMenuExtensions: java.lang.Integer getExtensionMenuResource(android.view.Menu)>
<com.android.calendar.agenda.AgendaWindowAdapter: java.lang.Object getItem(int)>
<com.android.providers.calendar.CalendarProvider2: java.lang.String getTimezoneDatabaseVersion()>
<com.android.providers.calendar.CalendarCache: java.lang.String readDataLocked(android.database.sqlite.SQLiteDatabase,java.lang.String)>
<com.android.calendar.agenda.AgendaByDayAdapter: long getInstanceId(int)>
<com.android.exchange.utility.CalendarUtilities: java.lang.String getUidFromGlobalObjId(java.lang.String)>
<com.android.exchange.utility.CalendarUtilities: boolean getDSTCalendars(java.util.TimeZone,java.util.GregorianCalendar[],java.util.GregorianCalendar[])>
<com.android.calendar.GeneralPreferences: android.content.SharedPreferences getSharedPreferences(android.content.Context)>
<com.android.calendar.month.SimpleWeeksAdapter: java.lang.Object getItem(int)>
<android.widget.CalendarView$WeekView: int getMonthOfLastWeekDay()>
<android.widget.CalendarView$WeeksAdapter: java.util.Calendar getSelectedDay()>
<android.provider.CalendarContract$CalendarEntity$EntityIteratorImpl: android.content.Entity getEntityAndIncrementCursor(android.database.Cursor)>
<com.android.calendar.agenda.AgendaWindowAdapter: com.android.calendar.agenda.AgendaWindowAdapter$EventInfo getEventByPosition(int,boolean)>
<com.android.calendar.agenda.AgendaByDayAdapter: int getHeaderPosition(int)>
<com.android.calendar.agenda.AgendaByDayAdapter: long getStartTime(int)>
<com.android.calendar.selectcalendars.SelectVisibleCalendarsFragment: long getSupportedEventTypes()>
<com.android.calendar.widget.CalendarAppWidgetProvider: android.content.ComponentName getComponentName(android.content.Context)>
<com.android.providers.calendar.CalendarProvider2: com.android.providers.calendar.CalendarProvider2 getInstance()>
<com.android.providers.calendar.CalendarAlarmManager: android.os.PowerManager$WakeLock getScheduleNextAlarmWakeLock()>
<com.android.calendar.CalendarController$EventInfo: int getResponse()>
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountAdapter: java.lang.CharSequence getLabelForType(java.lang.String)>
<com.android.calendar.Event: long getStartMillis()>
<com.android.calendar.widget.CalendarAppWidgetProvider: android.content.Intent getLaunchFillInIntent(android.content.Context,long,long,long,boolean)>
<com.android.calendar.EventInfoFragment: android.database.Cursor access$2000(com.android.calendar.EventInfoFragment)>
<com.android.calendar.CalendarViewAdapter: int getViewTypeCount()>
<com.android.calendar.agenda.AgendaWindowAdapter: com.android.calendar.agenda.AgendaAdapter$ViewHolder getSelectedViewHolder()>
<com.android.calendar.DayView: int getEventsAlpha()>
<com.android.calendar.alerts.AlertActivity: android.database.Cursor access$002(com.android.calendar.alerts.AlertActivity,android.database.Cursor)>
<com.android.providers.calendar.CalendarDatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>
<com.android.calendar.CalendarController: int getViewType()>
<com.android.calendar.agenda.AgendaByDayAdapter: int getCursorPosition(int)>
<com.android.calendar.AllInOneActivity: long getSupportedEventTypes()>
<android.widget.CalendarView$WeekView: int getMonthOfFirstWeekDay()>
<com.android.calendar.month.SimpleWeeksAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.calendar.EventInfoFragment: android.database.Cursor access$1802(com.android.calendar.EventInfoFragment,android.database.Cursor)>
<com.android.calendar.EditResponseHelper: int getWhichEvents()>
<com.android.calendar.selectcalendars.SelectCalendarsSimpleAdapter$TabletCalendarItemBackgrounds: int[] getBackgrounds()>
<com.android.calendar.agenda.AgendaListView: long getSelectedInstanceId()>
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: java.lang.Runnable access$800(com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory,java.lang.String,android.content.BroadcastReceiver$PendingResult,int)>
<com.android.calendar.agenda.AgendaFragment: long getSupportedEventTypes()>
<android.widget.CalendarView: int getWeekSeparatorLineColor()>
<com.android.calendar.agenda.AgendaListView: android.view.View getFirstVisibleView()>
<com.android.calendar.selectcalendars.SelectVisibleCalendarsFragment: android.database.Cursor access$102(com.android.calendar.selectcalendars.SelectVisibleCalendarsFragment,android.database.Cursor)>
<android.widget.CalendarView: long getMinDate()>
<com.android.calendar.Utils: java.lang.String getWidgetUpdateAction(android.content.Context)>
<com.android.calendar.selectcalendars.SelectCalendarsSimpleAdapter: int getCount()>
<com.android.calendar.CalendarViewAdapter: int getCount()>
<com.android.calendar.CalendarViewAdapter: long getItemId(int)>
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: android.net.Uri access$200(com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory)>
<com.android.calendar.EventInfoFragment: android.database.Cursor access$602(com.android.calendar.EventInfoFragment,android.database.Cursor)>
<com.android.calendar.CalendarViewAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.calendar.Utils: java.lang.String getDayOfWeekString(int,int,long,android.content.Context)>
<com.android.calendar.agenda.AgendaWindowAdapter: int getViewTypeCount()>
<com.android.calendar.Utils: java.lang.String getVersionCode(android.content.Context)>
<com.android.calendar.month.SimpleWeekView: android.text.format.Time getDayFromLocation(float)>
<com.android.exchange.utility.CalendarUtilities: com.android.emailcommon.provider.EmailContent$Message createMessageForEventId(android.content.Context,long,int,java.lang.String,com.android.emailcommon.provider.Account,java.lang.String)>
<com.android.calendar.EventInfoFragment: android.database.Cursor access$902(com.android.calendar.EventInfoFragment,android.database.Cursor)>
<com.android.calendar.DayView: android.text.format.Time getSelectedTimeForAccessibility()>
<com.android.calendar.agenda.AgendaFragment: long getLastShowEventId()>
<com.android.calendar.alerts.AlertActivity: android.database.Cursor getItemForView(android.view.View)>
<com.android.calendar.widget.CalendarAppWidgetProvider: android.app.PendingIntent getUpdateIntent(android.content.Context)>
<com.android.providers.calendar.SQLiteContentProvider: int bulkInsert(android.net.Uri,android.content.ContentValues[])>
<com.android.calendar.selectcalendars.SelectCalendarsSimpleAdapter: android.graphics.drawable.Drawable getBackground(int,boolean)>
<com.android.calendar.Utils: int getJulianMondayFromWeeksSinceEpoch(int)>
<com.android.calendar.agenda.AgendaByDayAdapter: int getItemViewType(int)>
<com.android.exchange.utility.CalendarUtilities: int getLong(byte[],int)>
<com.android.calendar.CalendarUtils: android.content.SharedPreferences getSharedPreferences(android.content.Context,java.lang.String)>
<com.android.providers.calendar.CalendarProvider2: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<com.android.calendar.ExpandableTextView: java.lang.CharSequence getText()>
<com.android.calendar.agenda.AgendaByDayAdapter: int getHeaderItemsCount(int)>
<com.android.exchange.utility.CalendarUtilities: long getMillisAtTimeZoneDateTransition(java.util.TimeZone,com.android.exchange.utility.CalendarUtilities$TimeZoneDate)>
<android.widget.CalendarView: int getShownWeekCount()>
<com.android.calendar.Utils: int getFirstDayOfWeek(android.content.Context)>
<com.android.calendar.month.SimpleWeekView: int getLastMonth()>
<android.widget.CalendarView: boolean getShowWeekNumber()>
<com.android.calendar.CalendarViewAdapter: int getItemViewType(int)>
<com.android.internal.telephony.sip.SipPhoneBase: boolean getCallForwardingIndicator()>
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.Phone$DataActivityState getDataActivityState()>
<com.android.internal.os.BatteryStatsImpl: long getTotalTcpBytesReceived(int)>
<com.android.internal.telephony.PhoneProxy: void getEnhancedVoicePrivacy(android.os.Message)>
<com.android.internal.os.BatteryStatsImpl$Uid: long getWifiMulticastTime(long,int)>
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: long getTimeAtCpuSpeedStep(int,int)>
<com.android.internal.telephony.PhoneProxy: void getNeighboringCids(android.os.Message)>
<com.android.internal.os.BatteryStatsImpl: long getBatteryRealtime(long)>
<com.android.internal.telephony.cdma.CDMAPhone: void getSmscAddress(android.os.Message)>
<android.webkit.WebSettingsClassic: boolean getDomStorageEnabled()>
<com.android.internal.os.BatteryStatsImpl: com.android.internal.os.BatteryStatsImpl$Uid$Proc getProcessStatsLocked(java.lang.String,int)>
<com.android.internal.os.BatteryStatsImpl: int getBluetoothPingCount()>
<com.android.internal.os.BatteryStatsImpl$Uid: java.util.Map getPackageStats()>
<com.android.internal.telephony.sip.SipPhone$SipConnection: boolean getMute()>
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.IccFileHandler getIccFileHandler()>
<com.android.internal.telephony.PhoneBase: boolean getUnitTestMode()>
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: long getDevPersistBytes(long)>
<com.android.server.net.NetworkStatsCollection: long getTotalBytes()>
<com.android.internal.telephony.sip.SipPhone: boolean getIccRecordsLoaded()>
<com.android.internal.telephony.sip.SipPhone: java.util.List getAllCellInfo()>
<com.android.internal.telephony.PhoneBase: android.content.Context getContext()>
<com.android.internal.telephony.gsm.GSMPhone: void getCallWaiting(android.os.Message)>
<com.android.internal.os.BatteryStatsImpl: long getWifiOnTime(long,int)>
<com.android.internal.telephony.PhoneBase: android.telephony.SignalStrength getSignalStrength()>
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.IccFileHandler getIccFileHandler()>
<com.android.internal.os.BatteryStatsImpl$Uid: int getUid()>
<com.android.internal.os.BatteryStatsImpl: int getInputEventCount(int)>
<com.android.internal.os.BatteryStatsImpl: com.android.internal.os.BatteryStatsImpl$Uid$Proc getProcessStatsLocked(int,java.lang.String)>
<com.android.internal.telephony.PhoneProxy: int getCdmaEriIconMode()>
<com.android.internal.os.BatteryStatsImpl: int getLowDischargeAmountSinceCharge()>
<android.webkit.WebSettings: boolean getSavePassword()>
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState(java.lang.String)>
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.IccCard getIccCard()>
<com.android.internal.os.BatteryStatsImpl: com.android.internal.os.BatteryStatsImpl$SamplingTimer getKernelWakelockTimerLocked(java.lang.String)>
<com.android.internal.os.BatteryStatsImpl: int getDischargeAmountScreenOnSinceCharge()>
<com.android.internal.telephony.PhoneBase: android.net.LinkCapabilities getLinkCapabilities(java.lang.String)>
<com.android.internal.os.BatteryStatsImpl$Uid: android.os.BatteryStats$Uid$Pid getPidStatsLocked(int)>
<com.android.internal.telephony.PhoneProxy: boolean getCallForwardingIndicator()>
<com.android.internal.telephony.DataConnectionTracker: boolean getDataOnRoamingEnabled()>
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.ims.IsimRecords getIsimRecords()>
<com.android.internal.telephony.IccCardProxy: boolean getIccFdnEnabled()>
<com.android.internal.telephony.PhoneProxy: int getLteOnCdmaMode()>
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String[] getIsimImpu()>
<com.android.internal.telephony.sip.SipPhone$SipConnection: int getNumberPresentation()>
<com.android.internal.telephony.gsm.GSMPhone: void getSmscAddress(android.os.Message)>
<com.android.server.net.NetworkStatsCollection: long getFirstAtomicBucketMillis()>
<com.android.internal.telephony.gsm.GSMPhone: void getNeighboringCids(android.os.Message)>
<com.android.internal.telephony.sip.SipPhoneBase: android.telephony.SignalStrength getSignalStrength()>
<com.android.internal.os.BatteryStatsImpl$Timer: long getTotalTimeLocked(long,int)>
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Call getBackgroundCall()>
<com.android.internal.widget.LockPatternUtils: int getRequestedMinimumPasswordLength()>
<com.android.server.net.NetworkStatsCollection: long getStartMillis()>
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv: long getStartTimeToNowLocked(long)>
<com.android.internal.telephony.PhoneBase: int getLteOnCdmaMode()>
<com.android.internal.os.BatteryStatsImpl: long getAwakeTimeBattery()>
<com.android.internal.telephony.PhoneProxy: void getCallWaiting(android.os.Message)>
<com.android.server.net.NetworkStatsRecorder: com.android.server.net.NetworkStatsCollection getOrLoadCompleteLocked()>
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.Phone$DataActivityState getDataActivityState()>
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: long getUidPersistBytes(long)>
<com.android.internal.telephony.IccFileHandler: void getEFLinearRecordSize(int,android.os.Message)>
<com.android.internal.widget.LockPatternUtils: byte[] passwordToHash(java.lang.String)>
<com.android.internal.widget.ILockSettings$Stub$Proxy: boolean getBoolean(java.lang.String,boolean,int)>
<com.android.server.net.NetworkStatsCollection: long getEndMillis()>
<com.android.internal.telephony.sip.SipPhone: java.util.List getPendingMmiCodes()>
<com.android.internal.telephony.PhoneProxy: android.telephony.ServiceState getServiceState()>
<com.android.internal.os.BatteryStatsImpl: com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv getServiceStatsLocked(int,java.lang.String,java.lang.String)>
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv: int getLaunches(int)>
<com.android.internal.os.BatteryStatsImpl: long getGlobalWifiRunningTime(long,int)>
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Phone$DataActivityState getDataActivityState()>
<com.android.internal.telephony.PhoneProxy: java.util.List getPendingMmiCodes()>
<com.android.internal.telephony.sip.SipPhone: android.telephony.ServiceState getServiceState()>
<com.android.internal.os.BatteryStatsImpl$Uid: long getWifiScanTime(long,int)>
<com.android.internal.os.BatteryStatsImpl$Uid: com.android.internal.os.BatteryStatsImpl$Uid$Proc getProcessStatsLocked(java.lang.String)>
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.IccSmsInterfaceManager getIccSmsInterfaceManager()>
<com.android.internal.telephony.GsmAlphabet: int[] getEnabledLockingShiftTables()>
<com.android.internal.os.BatteryStatsImpl: long getBatteryRealtimeLocked(long)>
<com.android.internal.os.BatteryStatsImpl$Uid$Sensor: int getHandle()>
<com.android.internal.telephony.UiccCardApplication: boolean getIccLockEnabled()>
<com.android.internal.os.BatteryStatsImpl$Uid: com.android.internal.os.BatteryStatsImpl getBatteryStats()>
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv: int getStarts(int)>
<com.android.internal.telephony.sip.SipPhoneBase: android.net.LinkProperties getLinkProperties(java.lang.String)>
<com.android.internal.widget.LockPatternUtils: int getRequestedPasswordMinimumLetters()>
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.IccFileHandler getIccFileHandler()>
<android.webkit.WebSettings: boolean getDatabaseEnabled()>
<com.android.internal.os.BatteryStatsImpl$Uid: android.util.SparseArray getPidStats()>
<com.android.server.am.BatteryStatsService: com.android.internal.os.BatteryStatsImpl getActiveStatistics()>
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: long getPollInterval()>
<com.android.server.am.BatteryStatsService: long getAwakeTimeBattery()>
<com.android.internal.telephony.sip.SipPhone: boolean getMute()>
<com.android.internal.os.BatteryStatsImpl: long getPhoneSignalStrengthTime(int,long,int)>
<com.android.internal.telephony.PhoneBase: android.os.Handler getHandler()>
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: com.android.server.net.NetworkStatsService$NetworkStatsSettings$Config getXtConfig()>
<com.android.server.pm.Settings: int getComponentEnabledSettingLPr(android.content.ComponentName,int)>
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.IccCardApplicationStatus$AppType getCurrentUiccAppType()>
<com.android.internal.telephony.PhoneProxy: boolean getMessageWaitingIndicator()>
<com.android.internal.os.BatteryStatsImpl$Uid: com.android.internal.os.BatteryStatsImpl$StopwatchTimer getWakeTimerLocked(java.lang.String,int)>
<com.android.internal.telephony.PhoneProxy: int getPhoneType()>
<com.android.internal.telephony.sip.SipPhoneBase: android.telephony.ServiceState getServiceState()>
<com.android.internal.widget.ILockSettings$Stub$Proxy: java.lang.String getString(java.lang.String,java.lang.String,int)>
<com.android.internal.os.BatteryStatsImpl: long getMobileTcpBytesSent(int)>
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.PhoneSubInfo getPhoneSubInfo()>
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState(java.lang.String)>
<com.android.internal.telephony.PhoneBase: int getCdmaEriIconMode()>
<com.android.internal.widget.LockPatternUtils: int getRequestedPasswordMinimumNumeric()>
<android.webkit.WebSettingsClassic: boolean getJavaScriptEnabled()>
<android.webkit.WebSettingsClassic: boolean getPluginsEnabled()>
<com.android.internal.widget.LockSettingsService: long getLong(java.lang.String,long,int)>
<com.android.internal.telephony.sip.SipPhone: boolean getMessageWaitingIndicator()>
<com.android.internal.os.BatteryStatsImpl: long getScreenOnTime(long,int)>
<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.Phone getPhone()>
<com.android.internal.os.BatteryStatsImpl: long getBluetoothOnTime(long,int)>
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.PhoneSubInfo getPhoneSubInfo()>
<com.android.internal.os.BatteryStatsImpl$Uid: java.util.Map getSensorStats()>
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.PhoneConstants$State getState()>
<com.android.internal.telephony.PhoneBase: boolean getMessageWaitingIndicator()>
<com.android.internal.telephony.sip.SipPhone: android.net.LinkProperties getLinkProperties(java.lang.String)>
<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.Call getCall()>
<com.android.internal.os.BatteryStatsImpl: int getDischargeAmountScreenOffSinceCharge()>
<com.android.internal.telephony.sip.SipPhone: boolean getDataRoamingEnabled()>
<com.android.internal.os.BatteryStatsImpl$Uid: int getUserActivityCount(int,int)>
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.IccCard getIccCard()>
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.gsm.UsimServiceTable getUsimServiceTable()>
<com.android.internal.os.BatteryStatsImpl: long getPhoneOnTime(long,int)>
<com.android.internal.widget.LockPatternUtils: int getRequestedPasswordMinimumSymbols()>
<com.android.internal.telephony.PhoneBase: void getSmscAddress(android.os.Message)>
<com.android.internal.os.BatteryStatsImpl: int getPhoneDataConnectionCount(int,int)>
<com.android.server.net.NetworkStatsCollection: android.net.NetworkStatsHistory getHistory(android.net.NetworkTemplate,int,int,int,int,long,long)>
<com.android.internal.telephony.gsm.GSMPhone: void getDataCallList(android.os.Message)>
<com.android.internal.os.BatteryStatsImpl: java.util.Map getKernelWakelockStats()>
<com.android.internal.telephony.cdma.CDMALTEPhone: void getSmscAddress(android.os.Message)>
<com.android.internal.os.BatteryStatsImpl$Uid: com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv getServiceStatsLocked(java.lang.String,java.lang.String)>
<com.android.server.pm.Settings: int getApplicationEnabledSettingLPr(java.lang.String,int)>
<android.webkit.WebSettingsClassic: boolean getSavePassword()>
<android.webkit.WebSettingsClassic: boolean getDatabaseEnabled()>
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.Call getBackgroundCall()>
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: int getStarts(int)>
<com.android.internal.telephony.PhoneBase: java.lang.String[] getActiveApnTypes()>
<com.android.internal.os.BatteryStatsImpl$Uid: long getAudioTurnedOnTime(long,int)>
<com.android.internal.os.BatteryStatsImpl$Uid: com.android.internal.os.BatteryStatsImpl$Uid$Pkg getPackageStatsLocked(java.lang.String)>
<com.android.internal.os.BatteryStatsImpl: long getHistoryBaseTime()>
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState()>
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: long getXtPersistBytes(long)>
<com.android.internal.telephony.RIL: void getSmscAddress(android.os.Message)>
<com.android.internal.os.BatteryStatsImpl: byte[] readFully(java.io.FileInputStream)>
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.IccCard getIccCard()>
<android.webkit.WebSettings: boolean getLightTouchEnabled()>
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.PhoneConstants$State getState()>
<com.android.server.sip.SipSessionGroup$SipSessionImpl$2$1: java.lang.String getPassword()>
<com.android.internal.telephony.PhoneProxy: android.net.LinkProperties getLinkProperties(java.lang.String)>
<com.android.internal.telephony.PhoneProxy: void getCellBroadcastSmsConfig(android.os.Message)>
<com.android.internal.os.BatteryStatsImpl$SamplingTimer: int getUpdateVersion()>
<com.android.internal.telephony.sip.SipPhone: boolean getCallForwardingIndicator()>
<com.android.internal.telephony.sip.SipPhone: int getPhoneType()>
<com.android.internal.telephony.cdma.CDMAPhone: void getEnhancedVoicePrivacy(android.os.Message)>
<com.android.internal.os.BatteryStatsImpl: int getStartCount()>
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState(java.lang.String)>
<com.android.internal.widget.LockPatternUtils: int getRequestedPasswordMinimumUpperCase()>
<com.android.internal.telephony.sip.SipPhone$SipCall: java.util.List getConnections()>
<com.android.internal.os.BatteryStatsImpl: int getDischargeStartLevel()>
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.Call getForegroundCall()>
<com.android.internal.os.BatteryStatsImpl: long getPhoneDataConnectionTime(int,long,int)>
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.IccCard getIccCard()>
<com.android.internal.telephony.gsm.GSMPhone: boolean getDataRoamingEnabled()>
<com.android.internal.telephony.sip.SipPhoneBase: java.util.List getCurrentDataConnectionList()>
<com.android.internal.telephony.sip.SipPhoneBase: java.util.List getPendingMmiCodes()>
<com.android.internal.widget.LockPatternUtils: int getRequestedPasswordMinimumLowerCase()>
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.test.SimulatedRadioControl getSimulatedRadioControl()>
<com.android.internal.telephony.UiccCardApplication: boolean getIccFdnEnabled()>
<com.android.internal.os.BatteryStatsImpl$Uid: java.util.Map getWakelockStats()>
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.test.SimulatedRadioControl getSimulatedRadioControl()>
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg: java.util.Map getServiceStats()>
<com.android.server.NetworkManagementSocketTagger: int getThreadSocketStatsTag()>
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: com.android.server.net.NetworkStatsService$NetworkStatsSettings$Config getDevConfig()>
<com.android.internal.os.BatteryStatsImpl: long getScreenBrightnessTime(int,long,int)>
<com.android.internal.telephony.sip.SipPhoneBase: boolean getIccRecordsLoaded()>
<android.webkit.WebSettingsClassic: boolean getAutoFillEnabled()>
<com.android.internal.telephony.GsmAlphabet: int[] getEnabledSingleShiftTables()>
<com.android.internal.telephony.gsm.GSMPhone: void getAvailableNetworks(android.os.Message)>
<com.android.internal.telephony.PhoneProxy: void getSmscAddress(android.os.Message)>
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState()>
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg: int getWakeups(int)>
<com.android.internal.telephony.PhoneBase: int getVoiceMessageCount()>
<com.android.internal.os.BatteryStatsImpl: android.util.SparseArray getUidStats()>
<com.android.internal.telephony.cdma.CDMAPhone: boolean getDataRoamingEnabled()>
<com.android.internal.telephony.gsm.GSMPhone: void getCallForwardingOption(int,android.os.Message)>
<com.android.internal.os.BatteryStatsImpl$Uid$Sensor: android.os.BatteryStats$Timer getSensorTime()>
<com.android.internal.telephony.PhoneProxy: void getCallForwardingOption(int,android.os.Message)>
<com.android.internal.os.BatteryStatsImpl: int getPhoneSignalStrengthCount(int,int)>
<com.android.internal.telephony.sip.SipPhone$SipCall: com.android.internal.telephony.Connection dial(java.lang.String)>
<com.android.internal.telephony.sip.SipPhoneBase: int getPhoneType()>
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState()>
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.Call getRingingCall()>
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.Phone$DataActivityState getDataActivityState()>
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.PhoneConstants$State getState()>
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: com.android.server.net.NetworkStatsService$NetworkStatsSettings$Config getUidConfig()>
<com.android.internal.os.BatteryStatsImpl$Counter: int getCountLocked(int)>
<com.android.internal.widget.LockPatternUtils: int getRequestedPasswordQuality()>
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.CallTracker getCallTracker()>
<com.android.internal.telephony.sip.SipConnectionBase: int getNumberPresentation()>
<com.android.internal.os.BatteryStatsImpl: long getBatteryUptime(long)>
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: long getTimeCacheMaxAge()>
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState(java.lang.String)>
<com.android.internal.os.BatteryStatsImpl: long getRadioDataUptime()>
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: long getGlobalAlertBytes(long)>
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: long getForegroundTime(int)>
<com.android.internal.os.BatteryStatsImpl: long getAwakeTimePlugged()>
<com.android.internal.os.BatteryStatsImpl$Uid: long getTcpBytesSent(int)>
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv: com.android.internal.os.BatteryStatsImpl getBatteryStats()>
<com.android.internal.telephony.PhoneSubInfo: java.lang.String[] getIsimImpu()>
<com.android.internal.widget.LockPatternUtils: int getActivePasswordQuality()>
<com.android.internal.telephony.PhoneProxy: android.net.LinkCapabilities getLinkCapabilities(java.lang.String)>
<com.android.internal.os.BatteryStatsImpl: int getDischargeCurrentLevelLocked()>
<com.android.internal.os.BatteryStatsImpl: int getDischargeAmountScreenOff()>
<com.android.internal.telephony.sip.SipPhoneBase: boolean getDataRoamingEnabled()>
<android.webkit.WebSettings: boolean getJavaScriptEnabled()>
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.Phone getActivePhone()>
<com.android.internal.telephony.cdma.CDMALTEPhone: void getEnhancedVoicePrivacy(android.os.Message)>
<com.android.internal.telephony.PhoneBase: java.util.List getAllCellInfo()>
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.ServiceStateTracker getServiceStateTracker()>
<com.android.internal.widget.LockPatternUtils: int getRequestedPasswordHistoryLength()>
<com.android.internal.telephony.DataConnectionTracker: boolean getAnyDataEnabled()>
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState()>
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv: long getLaunchTimeToNowLocked(long)>
<com.android.internal.telephony.PhoneProxy: java.lang.String[] getActiveApnTypes()>
<com.android.internal.os.BatteryStatsImpl: com.android.internal.os.BatteryStatsImpl$Uid$Pkg getPackageStatsLocked(int,java.lang.String)>
<com.android.internal.telephony.sip.SipPhone: android.telephony.SignalStrength getSignalStrength()>
<com.android.internal.telephony.PhoneBase: int getCdmaEriIconIndex()>
<com.android.server.net.NetworkStatsCollection: android.net.NetworkStats getSummary(android.net.NetworkTemplate,long,long)>
<com.android.server.net.NetworkStatsCollection: android.net.NetworkStatsHistory getHistory(android.net.NetworkTemplate,int,int,int,int)>
<android.webkit.WebSettings: boolean getPluginsEnabled()>
<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.Call$State getState()>
<com.android.internal.telephony.PhoneProxy: void getAvailableNetworks(android.os.Message)>
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: long getUserTime(int)>
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.IccPhoneBookInterfaceManager getIccPhoneBookInterfaceManager()>
<com.android.internal.os.BatteryStatsImpl: long getMobileTcpBytesReceived(int)>
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: long getUidTagPersistBytes(long)>
<com.android.internal.os.BatteryStatsImpl: int getHighDischargeAmountSinceCharge()>
<com.android.internal.telephony.PhoneBase: void getEnhancedVoicePrivacy(android.os.Message)>
<com.android.internal.telephony.PhoneProxy: android.telephony.SignalStrength getSignalStrength()>
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.gsm.UsimServiceTable getUsimServiceTable()>
<com.android.internal.telephony.sip.SipPhone$SipConnection: android.net.rtp.AudioGroup getAudioGroup()>
<com.android.internal.os.BatteryStatsImpl: long getRadioDataUptimeMs()>
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv: long getStartTime(long,int)>
<com.android.internal.telephony.PhoneProxy: boolean getDataRoamingEnabled()>
<com.android.internal.telephony.sip.SipPhone$SipCall: com.android.internal.telephony.Phone getPhone()>
<android.webkit.WebSettingsClassic: boolean getHardwareAccelSkiaEnabled()>
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.PhoneConstants$State getState()>
<com.android.internal.os.BatteryStatsImpl$Uid: long getVideoTurnedOnTime(long,int)>
<com.android.internal.widget.ILockSettings$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.android.internal.os.BatteryStatsImpl: long getPhoneSignalScanningTime(long,int)>
<com.android.internal.telephony.sip.SipPhone: void getSmscAddress(android.os.Message)>
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getDefaultPhone()>
<com.android.internal.os.BatteryStatsImpl: int getDischargeAmountScreenOn()>
<com.android.internal.os.BatteryStatsImpl$Uid: long getFullWifiLockTime(long,int)>
<com.android.internal.widget.LockPatternUtils: int getRequestedPasswordMinimumNonLetter()>
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.ims.IsimRecords getIsimRecords()>
<android.webkit.WebSettings: boolean getDomStorageEnabled()>
<com.android.internal.telephony.RILRequest: com.android.internal.telephony.RILRequest obtain(int,android.os.Message)>
<android.webkit.WebSettingsClassic: boolean getLightTouchEnabled()>
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.IccSmsInterfaceManager getIccSmsInterfaceManager()>
<com.android.internal.os.BatteryStatsImpl: int getDischargeCurrentLevel()>
<com.android.internal.telephony.cdma.CDMAPhone: void getDataCallList(android.os.Message)>
<com.android.internal.telephony.cdma.CDMAPhone: int getVoiceMessageCount()>
<com.android.internal.telephony.PhoneBase: boolean isDataConnectivityPossible()>
<com.android.internal.os.BatteryStatsImpl: com.android.internal.os.BatteryStatsImpl$Uid getUidStatsLocked(int)>
<com.android.internal.telephony.PhoneProxy: int getVoiceMessageCount()>
<com.android.server.NetworkManagementService: boolean getIpForwardingEnabled()>
<com.android.internal.os.BatteryStatsImpl$Uid: long getTcpBytesReceived(int)>
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.PhoneSubInfo getPhoneSubInfo()>
<com.android.internal.os.BatteryStatsImpl$Uid: java.util.Map getProcessStats()>
<com.android.internal.telephony.PhoneProxy: boolean getUnitTestMode()>
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: com.android.internal.os.BatteryStatsImpl getBatteryStats()>
<com.android.server.am.BatteryStatsService: byte[] getStatistics()>
<com.android.internal.os.BatteryStatsImpl: long getBatteryUptimeLocked()>
<com.android.internal.telephony.PhoneProxy: void getDataCallList(android.os.Message)>
<com.android.internal.telephony.PhoneProxy: boolean getMute()>
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Call getForegroundCall()>
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.PhoneSubInfo getPhoneSubInfo()>
<com.android.internal.telephony.sip.SipPhoneBase: java.util.List getAllCellInfo()>
<com.android.internal.os.BatteryStatsImpl$Uid$Wakelock: android.os.BatteryStats$Timer getWakeTime(int)>
<com.android.internal.os.BatteryStatsImpl$Uid: long getWifiRunningTime(long,int)>
<com.android.internal.os.BatteryStatsImpl: long getTotalTcpBytesSent(int)>
<com.android.internal.telephony.cdma.CDMAPhone: void getCallWaiting(android.os.Message)>
<com.android.internal.telephony.PhoneProxy: android.content.Context getContext()>
<com.android.internal.widget.LockPatternUtils: int getKeyguardStoredPasswordQuality()>
<com.android.server.am.BatteryStatsService: long getAwakeTimePlugged()>
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg: com.android.internal.os.BatteryStatsImpl getBatteryStats()>
<com.android.internal.telephony.PhoneBase: boolean getIccRecordsLoaded()>
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.PhoneSubInfo getPhoneSubInfo()>
<com.android.internal.telephony.sip.SipPhoneBase: void getSmscAddress(android.os.Message)>
<com.android.internal.telephony.sip.SipPhoneBase: boolean getMessageWaitingIndicator()>
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Call getRingingCall()>
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.PhoneConstants$State getState()>
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: com.android.server.net.NetworkStatsService$NetworkStatsSettings$Config getUidTagConfig()>
<com.android.internal.os.BatteryStatsImpl: int getCpuSpeedSteps()>
<com.android.internal.telephony.PhoneProxy: void getOutgoingCallerIdDisplay(android.os.Message)>
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: android.os.BatteryStats$Uid$Proc$ExcessivePower getExcessivePower(int)>
<com.android.internal.telephony.IccCardProxy: boolean getIccLockEnabled()>
<com.android.internal.telephony.PhoneBase: boolean getCallForwardingIndicator()>
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean getAnyDataEnabled()>
<com.android.internal.os.BatteryStatsImpl$Uid: com.android.internal.os.BatteryStatsImpl$StopwatchTimer getSensorTimerLocked(int,boolean)>
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.Phone$DataActivityState getDataActivityState()>
<com.android.internal.os.BatteryStatsImpl: boolean getIsOnBattery()>
<com.android.internal.telephony.PhoneProxy: int getCdmaEriIconIndex()>
<com.android.internal.telephony.PhoneBase: android.net.LinkProperties getLinkProperties(java.lang.String)>
<com.android.internal.os.BatteryStatsImpl$Timer: int getCountLocked(int)>
<com.android.internal.telephony.PhoneProxy: java.util.List getAllCellInfo()>
<com.android.server.net.NetworkStatsRecorder: android.net.NetworkStats$Entry getTotalSinceBootLocked(android.net.NetworkTemplate)>
<com.android.internal.telephony.sip.SipPhone: java.util.List getCurrentDataConnectionList()>
<com.android.internal.os.BatteryStatsImpl: long getBatteryUptimeLocked(long)>
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.IccPhoneBookInterfaceManager getIccPhoneBookInterfaceManager()>
<com.android.internal.widget.ILockSettings$Stub$Proxy: long getLong(java.lang.String,long,int)>
<com.android.internal.os.BatteryStatsImpl: int getDischargeStartLevelLocked()>
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: long getSystemTime(int)>
<com.android.internal.os.BatteryStatsImpl: long getProcessWakeTime(int,int,long)>
<com.android.internal.widget.ILockSettings$Stub: android.os.IBinder asBinder()>
<com.android.gallery3d.data.UriImage: com.android.gallery3d.data.MediaDetails getDetails()>
<com.android.gallery3d.ui.GLView: int getVisibility()>
<com.android.gallery3d.data.MediaItem: com.android.gallery3d.data.BytesBufferPool getBytesBufferPool()>
<com.android.gallery3d.exif.ExifTag: long getUnsignedLong(int)>
<com.android.gallery3d.filtershow.imageshow.ImageCrop: java.lang.String getName()>
<com.android.gallery3d.gadget.WidgetService$PhotoRVFactory: int getViewTypeCount()>
<com.android.gallery3d.picasasource.PicasaSource: com.google.android.picasastore.PicasaStoreFacade getPicasaStoreFacade()>
<com.android.gallery3d.data.FilterEmptyPromptSet: java.lang.String getName()>
<com.android.gallery3d.exif.ExifData: int getStripCount()>
<com.android.gallery3d.ui.CacheStorageUsageInfo: long getExpectedUsedBytes()>
<com.android.gallery3d.exif.ExifData: byte[] getCompressedThumbnail()>
<com.android.gallery3d.data.FilterDeleteSet: java.lang.String getName()>
<com.android.gallery3d.picasasource.PicasaAlbum: android.database.Cursor internalQuery(int,int)>
<com.android.gallery3d.data.BitmapPool: android.graphics.Bitmap getBitmap(int,int)>
<com.android.gallery3d.picasasource.PicasaImage: com.android.gallery3d.data.Face[] getFaces()>
<com.android.gallery3d.ui.TileImageView$Tile: int getTextureWidth()>
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: android.graphics.Matrix getFlipMatrix(float,float,com.android.gallery3d.filtershow.imageshow.GeometryMetadata$FLIP)>
<com.android.gallery3d.filtershow.imageshow.ImageShow: android.graphics.Bitmap getGeometryOnlyImage()>
<com.android.gallery3d.ui.TiledScreenNail: int getWidth()>
<com.android.gallery3d.common.LongSparseArray: java.lang.Object get(long)>
<com.android.gallery3d.data.LocalAlbum: int getMediaItemCount()>
<com.android.gallery3d.gadget.WidgetService$PhotoRVFactory: int getCount()>
<com.android.gallery3d.picasasource.PicasaSource: com.android.gallery3d.app.GalleryApp getApplication()>
<com.android.gallery3d.filtershow.presets.ImagePreset: com.android.gallery3d.filtershow.cache.ImageLoader getImageLoader()>
<com.android.gallery3d.data.Face: android.graphics.Rect getPosition()>
<com.android.gallery3d.data.MtpClient: android.mtp.MtpObjectInfo getObjectInfo(java.lang.String,int)>
<com.android.gallery3d.ui.CropView: int getImageWidth()>
<com.android.gallery3d.provider.GalleryProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<com.android.gallery3d.data.ClusterAlbumSet: int getSubMediaSetCount()>
<com.android.gallery3d.util.ThreadPool$Worker: java.lang.Object get()>
<com.android.gallery3d.data.LocalAlbumSet: int getSubMediaSetCount()>
<com.android.gallery3d.app.ActivityState: float[] getBackgroundColor()>
<com.android.gallery3d.exif.ExifTag: int getOffset()>
<com.android.gallery3d.ui.SlotView$IntegerAnimation: int get()>
<com.android.gallery3d.util.LightCycleHelper: com.android.gallery3d.util.LightCycleHelper$PanoramaMetadata getPanoramaMetadata(android.content.Context,android.net.Uri)>
<com.android.gallery3d.exif.Rational: long getNominator()>
<com.android.gallery3d.filtershow.filters.ImageFilter: int getMaxParameter()>
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: android.graphics.Matrix getOriginalToScreen(boolean,float,float,float,float)>
<com.android.gallery3d.exif.IfdData: com.android.gallery3d.exif.ExifTag getTag(short)>
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: android.graphics.RectF unrotatedCropBounds()>
<com.android.gallery3d.data.MediaObject: int getCacheFlag()>
<com.android.gallery3d.filtershow.cache.ZoomCache: android.graphics.Bitmap getImage(com.android.gallery3d.filtershow.presets.ImagePreset,android.graphics.Rect)>
<com.android.gallery3d.picasasource.PicasaAlbum: com.android.gallery3d.data.MediaItem getCoverMediaItem()>
<com.android.gallery3d.app.SinglePhotoDataAdapter: int getLoadingState(int)>
<com.android.gallery3d.filtershow.imageshow.ImageShow: com.android.gallery3d.filtershow.PanelController getPanelController()>
<com.android.gallery3d.ui.ResourceTexture: int getHeight()>
<com.android.gallery3d.ui.PhotoView: boolean getFilmMode()>
<com.android.gallery3d.picasasource.PicasaSource: long getDateTaken(com.android.gallery3d.data.MediaObject)>
<com.android.gallery3d.ui.Paper: float[] getTransform(android.graphics.Rect,float)>
<com.android.gallery3d.ui.BitmapLoader: android.graphics.Bitmap getBitmap()>
<com.android.gallery3d.picasasource.PicasaSource: long getTotalTargetCacheSize()>
<com.android.gallery3d.ui.PreparePageFadeoutTexture: com.android.gallery3d.ui.RawTexture get()>
<com.android.gallery3d.app.TimeBar: int getPreferredHeight()>
<com.android.gallery3d.filtershow.HistoryAdapter: com.android.gallery3d.filtershow.presets.ImagePreset getLast()>
<com.android.gallery3d.filtershow.imageshow.ImageRotate: java.lang.String getName()>
<com.android.gallery3d.ui.PositionController: android.graphics.Rect getPosition(int)>
<com.android.gallery3d.ui.BitmapTileProvider: com.android.gallery3d.ui.ScreenNail getScreenNail()>
<com.android.gallery3d.app.AlbumSetDataLoader: com.android.gallery3d.data.MediaSet getMediaSet(int)>
<com.android.gallery3d.filtershow.cache.ImageLoader: android.net.Uri getUri()>
<com.android.gallery3d.app.AlbumSetPage: int getBackgroundColorId()>
<com.android.gallery3d.data.LocalImage: int getRotation()>
<com.android.gallery3d.app.AbstractGalleryActivity: com.android.gallery3d.data.DataManager getDataManager()>
<com.android.gallery3d.data.LocalVideo: int getMediaType()>
<com.android.gallery3d.filtershow.PanelController$Panel: int getPosition()>
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: android.graphics.RectF getCropBounds(android.graphics.Bitmap)>
<com.android.gallery3d.data.LocalAlbum: android.database.Cursor getItemCursor(android.content.ContentResolver,android.net.Uri,java.lang.String[],int)>
<com.android.gallery3d.data.MtpImage: int getMediaType()>
<com.android.gallery3d.data.SecureAlbum: int getMediaItemCount()>
<com.android.gallery3d.ui.BasicTexture: int getWidth()>
<com.android.gallery3d.data.LocalImage$LocalLargeImageRequest: android.graphics.BitmapRegionDecoder run(com.android.gallery3d.util.ThreadPool$JobContext)>
<com.android.gallery3d.gadget.WidgetService$PhotoRVFactory: long getItemId(int)>
<com.android.gallery3d.data.MediaObject: int getTypeFromString(java.lang.String)>
<com.android.gallery3d.data.LocalMediaItem: java.lang.String getName()>
<com.android.gallery3d.ui.GLView: int getMeasuredHeight()>
<com.android.gallery3d.filtershow.cache.ImageLoader: android.graphics.Bitmap getOriginalBitmapLarge()>
<com.android.gallery3d.app.PhotoDataAdapter: int getImageRotation(int)>
<com.android.gallery3d.data.FilterEmptyPromptSet: java.util.ArrayList getMediaItem(int,int)>
<com.android.gallery3d.app.AlbumSetDataLoader: com.android.gallery3d.data.MediaItem getCoverItem(int)>
<com.android.gallery3d.data.LocalVideo: java.lang.String getFilePath()>
<com.android.gallery3d.data.UriImage: int getHeight()>
<com.android.gallery3d.app.TransitionStore: java.lang.Object get(java.lang.Object)>
<com.android.gallery3d.data.BytesBufferPool: com.android.gallery3d.data.BytesBufferPool$BytesBuffer get()>
<com.android.gallery3d.app.ManageCachePage: int getBackgroundColorId()>
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: float getScaleFactor()>
<com.android.gallery3d.ui.PopupList$ItemDataAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.gallery3d.data.MtpImage: long getSize()>
<com.android.gallery3d.data.MediaDetails: java.lang.Object getDetail(int)>
<com.android.gallery3d.exif.ExifParser: com.android.gallery3d.exif.ExifTag getTag()>
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: android.graphics.RectF getPhotoBounds()>
<com.android.gallery3d.common.OverScroller: float getCurrVelocity()>
<com.android.gallery3d.ui.GLView: int getMeasuredWidth()>
<com.android.gallery3d.ui.PopupList$ItemDataAdapter: java.lang.Object getItem(int)>
<com.android.gallery3d.ui.PositionController: int getImageAtEdges()>
<com.android.gallery3d.exif.ExifTag: int getDataSize()>
<com.android.gallery3d.data.LocalAlbumSet: com.android.gallery3d.data.MediaSet getSubMediaSet(int)>
<com.android.gallery3d.data.MediaSource: long getTotalUsedCacheSize()>
<com.android.gallery3d.data.LocalAlbum: com.android.gallery3d.data.MediaItem[] getMediaItemById(com.android.gallery3d.app.GalleryApp,boolean,java.util.ArrayList)>
<com.android.gallery3d.filtershow.imageshow.ImageShow: int getDefaultBackgroundColor()>
<com.android.gallery3d.app.PhotoPage: android.content.Intent access$2600(android.net.Uri)>
<com.android.gallery3d.filtershow.cache.ImageLoader: android.graphics.Bitmap getImageForPreset(com.android.gallery3d.filtershow.imageshow.ImageShow,com.android.gallery3d.filtershow.presets.ImagePreset,boolean)>
<com.android.gallery3d.common.EntrySchema: com.android.gallery3d.common.EntrySchema$ColumnInfo getColumn(java.lang.String)>
<com.android.gallery3d.data.ComboAlbumSet: java.lang.String getName()>
<com.android.gallery3d.ui.RawTexture: int getTextureWidth()>
<com.android.gallery3d.ui.EdgeEffect$Drawable: int getIntrinsicWidth()>
<com.android.gallery3d.ui.GLRootView: android.graphics.Matrix getCompensationMatrix()>
<com.android.gallery3d.data.ClusterAlbum: java.util.ArrayList getMediaItems()>
<com.android.gallery3d.ui.BitmapTexture: android.graphics.Bitmap getBitmap()>
<com.android.gallery3d.data.DataManager: long getTotalUsedCacheSize()>
<com.android.gallery3d.filtershow.filters.ImageFilter: int getParameter()>
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.MediaObject getMediaObject(com.android.gallery3d.data.Path)>
<com.android.gallery3d.ui.CropView: int getImageHeight()>
<com.android.gallery3d.ui.SlotView: int getVisibleStart()>
<com.android.gallery3d.data.ClusterAlbum: java.util.ArrayList getMediaItem(int,int)>
<com.android.gallery3d.util.JobLimiter$JobWrapper: java.lang.Object get()>
<com.android.gallery3d.data.TagClustering: java.lang.String getClusterName(int)>
<com.android.gallery3d.app.PhotoDataAdapter: int getLevelCount()>
<com.android.gallery3d.data.LocalAlbum: java.lang.String getName()>
<com.android.gallery3d.picasasource.PicasaImage: java.lang.String getMimeType()>
<com.android.gallery3d.app.GalleryActionBar$AlbumModeAdapter: int getCount()>
<com.android.gallery3d.ui.CacheStorageUsageInfo: long getUsedBytes()>
<com.android.gallery3d.data.ActionImage: android.net.Uri getContentUri()>
<com.android.gallery3d.picasasource.PicasaImage: android.net.Uri getPlayUri()>
<com.android.gallery3d.ui.AnimationTime: long get()>
<com.android.gallery3d.data.Face: java.lang.String getName()>
<com.android.gallery3d.ui.TileImageView$Tile: int getTextureHeight()>
<com.android.gallery3d.ui.ExtTexture: int getWidth()>
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.MediaSet getMediaSet(java.lang.String)>
<com.android.gallery3d.filtershow.imageshow.ImageSlave: com.android.gallery3d.filtershow.imageshow.ImageShow getMaster()>
<com.android.gallery3d.exif.ExifTag: int getElementSize(short)>
<com.android.gallery3d.app.PhotoPage: android.content.Intent access$2700(com.android.gallery3d.data.MediaObject)>
<com.android.gallery3d.data.MediaSet: com.android.gallery3d.data.MediaDetails getDetails()>
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: android.graphics.RectF getUntranslatedStraightenCropBounds(android.graphics.RectF,float)>
<com.android.gallery3d.picasasource.PicasaAlbumSet: long getTotalUsedCacheSize(android.content.Context)>
<com.android.gallery3d.ui.BitmapScreenNail: int getHeight()>
<com.android.gallery3d.data.ClusterAlbum: java.lang.String getName()>
<com.android.gallery3d.app.PhotoPage: int getBackgroundColorId()>
<com.android.gallery3d.ui.CropView: android.graphics.RectF getCropRectangle()>
<com.android.gallery3d.picasasource.PicasaAlbum: java.lang.String getName()>
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: java.lang.String getName()>
<com.android.gallery3d.picasasource.PicasaSource: com.google.android.picasasync.PicasaFacade getPicasaFacade()>
<com.android.gallery3d.picasasource.PicasaSource: java.lang.String getContentType(com.android.gallery3d.data.MediaObject)>
<com.android.gallery3d.app.GalleryActionBar: int getClusterTypeAction()>
<com.android.gallery3d.filtershow.imageshow.ImageSlave: com.android.gallery3d.filtershow.presets.ImagePreset getImagePreset()>
<com.android.gallery3d.data.MtpImage: byte[] getImageData()>
<com.android.gallery3d.anim.FloatAnimation: float get()>
<com.android.gallery3d.data.LocalImage: android.net.Uri getContentUri()>
<com.android.gallery3d.provider.GalleryProvider: java.lang.String getAuthority(android.content.Context)>
<com.android.gallery3d.ui.ResourceTexture: int getTextureHeight()>
<com.android.gallery3d.data.MtpImage: int getWidth()>
<com.android.gallery3d.ui.ExtTexture: int getHeight()>
<com.android.gallery3d.app.TimeBar: int getBarHeight()>
<com.android.gallery3d.exif.CountedDataInputStream: int getReadByteCount()>
<com.android.gallery3d.picasasource.PicasaAlbum: long getCacheSize()>
<com.android.gallery3d.ui.GLView: int getComponentCount()>
<com.android.gallery3d.filtershow.imageshow.ImageShow: com.android.gallery3d.filtershow.presets.ImagePreset getImagePreset()>
<com.android.gallery3d.picasasource.PicasaAlbumSet: java.lang.String getName()>
<com.android.gallery3d.ui.FlingScroller: int getFinalY()>
<com.android.gallery3d.ui.FlingScroller: int getFinalX()>
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: android.graphics.Matrix getLocalGeoFlipMatrix(float,float)>
<com.android.gallery3d.exif.ExifTag: short getTagId()>
<com.android.gallery3d.util.HelpUtils: android.content.Intent getHelpIntent(android.content.Context,int)>
<com.android.gallery3d.exif.IfdData: int getOffsetToNextIfd()>
<com.android.gallery3d.data.MediaItem: java.lang.String getFilePath()>
<com.android.gallery3d.ui.NinePatchTexture: com.android.gallery3d.ui.NinePatchChunk getNinePatchChunk()>
<com.android.gallery3d.ui.FadeTexture: float getRatio()>
<com.android.gallery3d.ui.PhotoView$FullPicture: com.android.gallery3d.ui.PhotoView$Size getSize()>
<com.android.gallery3d.filtershow.cache.ImageLoader: android.graphics.Rect getOriginalBounds()>
<com.android.gallery3d.ui.ExtTexture: int getId()>
<com.android.gallery3d.data.SnailItem: java.lang.String getMimeType()>
<com.android.gallery3d.filtershow.cache.ImageLoader: com.adobe.xmp.XMPMeta getXmpObject()>
<com.android.gallery3d.data.SecureAlbum: java.util.ArrayList getMediaItem(int,int)>
<com.android.gallery3d.picasasource.PicasaImage: android.net.Uri getContentUri()>
<com.android.gallery3d.exif.ExifParser: int getStripSize()>
<com.android.gallery3d.data.ClusterAlbum: com.android.gallery3d.data.MediaItem getCoverMediaItem()>
<com.android.gallery3d.common.OverScroller: int getCurrX()>
<com.android.gallery3d.ui.ScrollerHelper: int getPosition()>
<com.android.gallery3d.data.LocalMergeAlbum: int getTotalMediaItemCount()>
<com.android.gallery3d.ui.GLView: int getWidth()>
<com.android.gallery3d.data.ComboAlbum: java.lang.String getName()>
<com.android.gallery3d.data.MediaItem: com.android.gallery3d.data.BitmapPool getThumbPool()>
<com.android.gallery3d.picasasource.PicasaSource: double getLatitude(com.android.gallery3d.data.MediaObject)>
<com.android.gallery3d.data.LocalAlbum: android.net.Uri getContentUri()>
<com.android.gallery3d.data.MediaItem: long getDateInMs()>
<com.android.gallery3d.data.MtpClient: java.util.List getDeviceList()>
<com.android.gallery3d.filtershow.imageshow.ImageShow: android.graphics.Bitmap getFiltersOnlyImage()>
<com.android.gallery3d.filtershow.imageshow.ImageShow: android.graphics.Bitmap getFilteredImage()>
<com.android.gallery3d.common.EntrySchema: com.android.gallery3d.common.Entry valuesToObject(android.content.ContentValues,com.android.gallery3d.common.Entry)>
<com.android.gallery3d.data.DataManager: int getMediaType(com.android.gallery3d.data.Path)>
<com.android.gallery3d.ui.PositionController: float getFilmRatio()>
<com.android.gallery3d.data.Path: com.android.gallery3d.data.Path getParent()>
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: int getLocalValue()>
<com.android.gallery3d.picasasource.FaceImage: java.lang.String getMimeType()>
<com.android.gallery3d.data.MediaObject: int getCacheStatus()>
<com.android.gallery3d.ui.BasicTexture: int getTextureWidth()>
<com.android.gallery3d.picasasource.PicasaAlbum$CoverItem: int getWidth()>
<com.android.gallery3d.common.EntrySchema: int getColumnIndex(java.lang.String)>
<com.android.gallery3d.app.SinglePhotoDataAdapter: int getCurrentIndex()>
<com.android.gallery3d.data.MediaObject: long getCacheSize()>
<com.android.gallery3d.app.GalleryActionBar$ClusterAdapter: java.lang.Object getItem(int)>
<com.android.gallery3d.ui.GLView: float[] getBackgroundColor()>
<com.android.gallery3d.exif.ExifTag: int getUnsignedShort(int)>
<com.android.gallery3d.exif.CountedDataInputStream: java.nio.ByteOrder getByteOrder()>
<com.android.gallery3d.ui.SlotView: int getVisibleEnd()>
<com.android.gallery3d.app.AbstractGalleryActivity: com.android.gallery3d.app.GalleryActionBar getGalleryActionBar()>
<com.android.gallery3d.data.TagClustering: java.util.ArrayList getCluster(int)>
<com.android.gallery3d.data.ClusterAlbum: java.util.ArrayList getMediaItemFromPath(java.util.ArrayList,int,int,com.android.gallery3d.data.DataManager)>
<com.android.gallery3d.ui.DialogDetailsView$DetailsAdapter: long getItemId(int)>
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: com.android.gallery3d.filtershow.imageshow.GeometryMetadata$FLIP getFlipType()>
<com.android.gallery3d.data.MtpImage: int getHeight()>
<com.android.gallery3d.data.FilterDeleteSet: int getMediaItemCount()>
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: android.graphics.Matrix getGeoMatrix(android.graphics.RectF,boolean)>
<com.android.gallery3d.app.Config$ManageCachePage: com.android.gallery3d.app.Config$ManageCachePage get(android.content.Context)>
<com.android.gallery3d.ui.PositionController: int getImageHeight()>
<com.android.gallery3d.filtershow.cache.ImageLoader: android.graphics.Bitmap rotateToPortrait(android.graphics.Bitmap,int)>
<com.android.gallery3d.data.PathMatcher$Node: com.android.gallery3d.data.PathMatcher$Node getChild(java.lang.String)>
<com.android.gallery3d.data.MediaSet: int getSubMediaSetCount()>
<com.android.gallery3d.ui.RawTexture: int getWidth()>
<com.android.gallery3d.data.SingleItemAlbum: com.android.gallery3d.data.MediaItem getItem()>
<com.android.gallery3d.util.IdentityCache: java.lang.Object get(java.lang.Object)>
<com.android.gallery3d.app.GalleryActionBar$ClusterAdapter: int getCount()>
<android.widget.Gallery: android.view.ContextMenu$ContextMenuInfo getContextMenuInfo()>
<com.android.gallery3d.filtershow.filters.ImageFilterRS: android.renderscript.RenderScript getRenderScriptContext()>
<com.android.gallery3d.data.MediaItem: com.android.gallery3d.ui.ScreenNail getScreenNail()>
<com.android.gallery3d.data.LocalVideo: int getHeight()>
<com.android.gallery3d.ui.TiledTexture: int getWidth()>
<com.android.gallery3d.picasasource.BasePicasaAlbum: android.database.Cursor internalQuery(int,int)>
<com.android.gallery3d.filtershow.filters.ImageFilter: java.lang.String getName()>
<com.android.gallery3d.data.SingleItemAlbum: java.util.ArrayList getMediaItem(int,int)>
<com.android.gallery3d.picasasource.PicasaAlbumSet: long getTotalTargetCacheSize(com.android.gallery3d.picasasource.PicasaSource)>
<com.android.gallery3d.exif.IfdData: int getTagCount()>
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: android.graphics.RectF getLocalCropBounds()>
<com.android.gallery3d.ui.CacheStorageUsageInfo: long getFreeBytes()>
<com.android.gallery3d.app.SinglePhotoDataAdapter: com.android.gallery3d.ui.ScreenNail getScreenNail(int)>
<com.android.gallery3d.common.EntrySchema: java.lang.String[] getProjection()>
<com.android.gallery3d.app.PhotoDataAdapter: com.android.gallery3d.ui.ScreenNail getScreenNail()>
<com.android.gallery3d.picasasource.PicasaAlbum: int getSupportedOperations()>
<com.android.gallery3d.exif.ExifTag: java.lang.String getString()>
<com.android.gallery3d.data.FaceClustering: java.lang.String getClusterName(int)>
<com.android.gallery3d.filtershow.filters.ImageFilterRS: android.graphics.Bitmap apply(android.graphics.Bitmap,float,boolean)>
<com.android.gallery3d.exif.ExifTag: int getComponentCount()>
<com.android.gallery3d.filtershow.filters.ImageFilterCurves: com.android.gallery3d.filtershow.ui.Spline getSpline(int)>
<com.android.gallery3d.ui.SlotView$Layout: int getVisibleStart()>
<com.android.gallery3d.ui.AlbumLabelMaker: int getBorderSize()>
<com.android.gallery3d.filtershow.ui.Spline: float[] getAppliedCurve()>
<com.android.gallery3d.common.EntrySchema: java.lang.String getTableName()>
<com.android.gallery3d.filtershow.ui.Spline: com.android.gallery3d.filtershow.ui.ControlPoint getPoint(int)>
<com.android.gallery3d.filtershow.imageshow.ImageSlave: com.android.gallery3d.filtershow.PanelController getPanelController()>
<com.android.gallery3d.app.AbstractGalleryActivity: android.content.Context getAndroidContext()>
<com.android.gallery3d.data.FilterDeleteSet: java.util.ArrayList getMediaItem(int,int)>
<com.android.gallery3d.picasasource.PicasaSource: com.android.gallery3d.common.BlobCache getFaceCache(android.content.Context)>
<com.android.gallery3d.picasasource.PicasaImage: java.lang.String getName()>
<com.android.gallery3d.data.Path: java.lang.String getPrefix()>
<com.android.gallery3d.data.MediaSet: java.util.ArrayList getMediaItem(int,int)>
<com.android.gallery3d.picasasource.PicasaImage: int getWidth()>
<com.android.gallery3d.data.ActionImage: java.lang.String getMimeType()>
<com.android.gallery3d.app.PhotoDataAdapter: int getImageWidth()>
<com.android.gallery3d.ui.TileImageViewAdapter: com.android.gallery3d.ui.ScreenNail getScreenNail()>
<com.android.gallery3d.data.MtpDevice: int getSupportedOperations()>
<com.android.gallery3d.util.CacheManager: com.android.gallery3d.common.BlobCache getCache(android.content.Context,java.lang.String,int,int,int)>
<com.android.gallery3d.data.SingleItemAlbum: java.lang.String getName()>
<com.android.gallery3d.ui.CropView$AnimationController: int getCenterY()>
<com.android.gallery3d.ui.CropView$AnimationController: int getCenterX()>
<com.android.gallery3d.data.LocalVideo: int getSupportedOperations()>
<com.android.gallery3d.picasasource.BasePicasaAlbum: java.util.ArrayList getMediaItem(int,int)>
<com.android.gallery3d.picasasource.PicasaSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)>
<com.android.gallery3d.data.MediaSet: int getIndexOfItem(com.android.gallery3d.data.Path,int)>
<com.android.gallery3d.filtershow.imageshow.ImageShow: android.widget.ArrayAdapter getImageStateAdapter()>
<com.android.gallery3d.ui.BitmapScreenNail: int getWidth()>
<com.android.gallery3d.ui.SlideshowView$SlideshowAnimation: int getCanvasSaveFlags()>
<com.android.gallery3d.data.LocalImage: com.android.gallery3d.data.MediaDetails getDetails()>
<com.android.gallery3d.ui.DialogDetailsView$DetailsAdapter: java.lang.Object getItem(int)>
<com.android.gallery3d.data.MediaObject: long getDataVersion()>
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: float getLocalStraighten()>
<com.android.gallery3d.ui.WakeLockHoldingProgressListener: com.android.gallery3d.app.AbstractGalleryActivity getActivity()>
<com.android.gallery3d.data.UriImage: int getMediaType()>
<com.android.gallery3d.data.MediaSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)>
<com.android.gallery3d.filtershow.filters.ImageFilterGeometry: android.graphics.Bitmap apply(android.graphics.Bitmap,float,boolean)>
<com.android.gallery3d.app.AbstractGalleryActivity: com.android.gallery3d.util.LightCycleHelper$PanoramaViewHelper getPanoramaViewHelper()>
<com.android.gallery3d.ui.PhotoView$ScreenNailPicture: com.android.gallery3d.ui.PhotoView$Size getSize()>
<com.android.gallery3d.ui.DetailsHelper: java.lang.String getDetailsName(android.content.Context,int)>
<com.android.gallery3d.ui.UploadedTexture: int getWidth()>
<com.android.gallery3d.picasasource.PicasaAlbum: com.google.android.picasasync.PhotoEntry getPhotoEntry(com.android.gallery3d.picasasource.PicasaSource,long)>
<com.android.gallery3d.filtershow.imageshow.ImageShow: android.graphics.Rect getDisplayedImageBounds()>
<com.android.gallery3d.ui.BitmapTexture: int getId()>
<com.android.gallery3d.ui.RawTexture: int getId()>
<com.android.gallery3d.data.ActionImage: int getWidth()>
<com.android.gallery3d.provider.GalleryProvider: java.lang.String getType(android.net.Uri)>
<com.android.gallery3d.data.MtpImage: long getDateInMs()>
<com.android.gallery3d.data.Path: com.android.gallery3d.data.Path getChild(java.lang.String)>
<com.android.gallery3d.data.SnailItem: int getWidth()>
<com.android.gallery3d.ui.TiledScreenNail: int getHeight()>
<com.android.gallery3d.exif.ExifTag: int getLong(int)>
<com.android.gallery3d.exif.ExifData: byte[] getStrip(int)>
<com.android.gallery3d.ui.PopupList$ItemDataAdapter: long getItemId(int)>
<com.android.gallery3d.data.ComboAlbum: int getMediaItemCount()>
<com.android.gallery3d.data.LocationClustering: int getNumberOfClusters()>
<com.android.gallery3d.data.MediaObject: com.android.gallery3d.data.MediaDetails getDetails()>
<com.android.gallery3d.ui.SurfaceTextureScreenNail: int getHeight()>
<com.android.gallery3d.picasasource.PicasaPostAlbum: int getMediaItemCount()>
<com.android.gallery3d.filtershow.imageshow.ImageSlave: android.graphics.Bitmap getFilteredImage()>
<com.android.gallery3d.data.LocalImage: int getWidth()>
<com.android.gallery3d.ui.PositionController: float getImageScale()>
<com.android.gallery3d.ui.EdgeEffect$Drawable: int getIntrinsicHeight()>
<com.android.gallery3d.data.SnailItem: com.android.gallery3d.ui.ScreenNail getScreenNail()>
<com.android.gallery3d.ui.GLView: com.android.gallery3d.ui.GLRoot getGLRoot()>
<com.android.gallery3d.picasasource.PicasaPostAlbum: int getSupportedOperations()>
<com.android.gallery3d.data.Cluster: java.util.ArrayList getItems()>
<com.android.gallery3d.picasasource.BasePicasaAlbum: long reload()>
<com.android.gallery3d.ui.GLCanvasImpl: javax.microedition.khronos.opengles.GL11 getGLInstance()>
<com.android.gallery3d.common.Fingerprint: byte[] getBytes()>
<com.android.gallery3d.picasasource.PicasaAlbumSet: int getSubMediaSetCount()>
<com.android.gallery3d.ui.PositionController: int getImageWidth()>
<com.android.gallery3d.picasasource.PicasaSource: long getTotalUsedCacheSize()>
<com.android.gallery3d.picasasource.PicasaAlbum: int getCacheStatus()>
<com.android.gallery3d.filtershow.provider.SharedImageProvider: java.lang.String getType(android.net.Uri)>
<com.android.gallery3d.app.ActivityState: android.view.MenuInflater getSupportMenuInflater()>
<com.android.gallery3d.data.UriImage: int getWidth()>
<com.android.gallery3d.data.MediaSet: int getMediaItemCount()>
<com.android.gallery3d.ui.FlingScroller: int getCurrY()>
<com.android.gallery3d.ui.FlingScroller: int getCurrX()>
<com.android.gallery3d.data.LocalAlbum: java.lang.String getLocalizedName(android.content.res.Resources,int,java.lang.String)>
<com.android.gallery3d.data.MediaSet: int getTotalMediaItemCount()>
<com.android.gallery3d.picasasource.PicasaSource: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<com.android.gallery3d.data.MediaSet: com.android.gallery3d.data.MediaSet getSubMediaSet(int)>
<com.android.gallery3d.data.MtpClient: java.util.List getObjectList(java.lang.String,int,int)>
<com.android.gallery3d.ui.CacheStorageUsageInfo: long getTotalBytes()>
<com.android.gallery3d.data.BitmapPool: android.graphics.Bitmap getBitmap()>
<com.android.gallery3d.app.PackagesMonitor: int getPackagesVersion(android.content.Context)>
<com.android.gallery3d.exif.IfdData: com.android.gallery3d.exif.ExifTag[] getAllTags()>
<com.android.gallery3d.ui.AlbumSetSlidingWindow: com.android.gallery3d.ui.AlbumSetSlidingWindow$AlbumSetEntry get(int)>
<com.android.gallery3d.filtershow.imageshow.ImageStraighten: int getLocalValue()>
<com.android.gallery3d.exif.IfdData: int getId()>
<com.android.gallery3d.app.PhotoDataAdapter: android.graphics.Bitmap getTile(int,int,int,int,int,com.android.gallery3d.data.BitmapPool)>
<com.android.gallery3d.filtershow.imageshow.ImageShow: boolean getDirtyGeometryFlag()>
<android.widget.Gallery: int getChildDrawingOrder(int,int)>
<com.android.gallery3d.common.Utils: byte[] getBytes(java.lang.String)>
<com.android.gallery3d.data.MtpDevice: java.lang.String getName()>
<com.android.gallery3d.data.ComboAlbumSet: int getSubMediaSetCount()>
<com.android.gallery3d.ui.TileImageViewAdapter: android.graphics.Bitmap getTile(int,int,int,int,int,com.android.gallery3d.data.BitmapPool)>
<com.android.gallery3d.app.GalleryActionBar$ClusterAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.gallery3d.ui.CanvasTexture: android.graphics.Bitmap onGetBitmap()>
<com.android.gallery3d.ui.ExtTexture: int getTextureHeight()>
<com.android.gallery3d.ui.NinePatchTexture$SmallCache: java.lang.Object get(int)>
<com.android.gallery3d.filtershow.tools.SaveCopyTask: java.io.File getNewFile(android.content.Context,android.net.Uri)>
<com.android.gallery3d.data.Path: java.lang.String getSuffix()>
<com.android.gallery3d.exif.ExifParser: int getCompressedImageSize()>
<com.android.gallery3d.exif.ExifTag: int getIfd()>
<com.android.gallery3d.filtershow.imageshow.ImageSlave: com.android.gallery3d.filtershow.HistoryAdapter getHistory()>
<com.android.gallery3d.picasasource.PicasaPostAlbum: java.lang.String getName()>
<com.android.gallery3d.data.MediaSet: com.android.gallery3d.util.Future requestSyncOnMultipleSets(com.android.gallery3d.data.MediaSet[],com.android.gallery3d.data.MediaSet$SyncListener)>
<com.android.gallery3d.ui.BitmapTexture: int getTextureHeight()>
<com.android.gallery3d.app.PhotoDataAdapter: com.android.gallery3d.data.MediaItem getMediaItem(int)>
<com.android.gallery3d.util.IntArray: int[] getInternalArray()>
<com.android.gallery3d.data.LocalMergeAlbum: java.lang.String getName()>
<com.android.gallery3d.ui.GLView: com.android.gallery3d.ui.GLView getComponent(int)>
<com.android.gallery3d.ui.BasicTexture: int getHeight()>
<com.android.gallery3d.app.AbstractGalleryActivity: com.android.gallery3d.app.StateManager getStateManager()>
<com.android.gallery3d.filtershow.provider.SharedImageProvider: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)>
<com.android.gallery3d.data.ComboAlbum: java.util.ArrayList getMediaItem(int,int)>
<com.android.gallery3d.data.MediaObject: int getSupportedOperations()>
<com.android.gallery3d.picasasource.PicasaImage: com.android.gallery3d.data.MediaDetails getDetails()>
<com.android.gallery3d.picasasource.PicasaSource: java.lang.String getImageTitle(com.android.gallery3d.data.MediaObject)>
<com.android.gallery3d.data.Clustering: com.android.gallery3d.data.MediaItem getClusterCover(int)>
<com.android.gallery3d.gadget.LocalPhotoSource: android.net.Uri getContentUri(int)>
<com.android.gallery3d.data.UriImage: int getRotation()>
<com.android.gallery3d.data.SizeClustering: long getMinSize(int)>
<com.android.gallery3d.filtershow.imageshow.ImageCrop: android.graphics.RectF getCropBoundsDisplayed()>
<com.android.gallery3d.data.ActionImage: int getMediaType()>
<com.android.gallery3d.ui.UploadedTexture: int getHeight()>
<com.android.gallery3d.data.BucketHelper: java.lang.String getBucketName(android.content.ContentResolver,int)>
<com.android.gallery3d.data.MtpClient: java.util.List getStorageList(java.lang.String)>
<com.android.gallery3d.data.LocalImage: java.lang.String getFilePath()>
<com.android.gallery3d.data.LocalVideo: android.net.Uri getPlayUri()>
<com.android.gallery3d.data.DataManager: java.lang.String getTopSetPath(int)>
<com.android.gallery3d.provider.GalleryProvider: android.net.Uri getUriFor(android.content.Context,com.android.gallery3d.data.Path)>
<com.android.gallery3d.filtershow.filters.ImageFilterTinyPlanet: float getAngle()>
<com.android.gallery3d.filtershow.PanelController: com.android.gallery3d.filtershow.presets.ImagePreset getImagePreset()>
<com.android.gallery3d.app.Config$AlbumSetPage: com.android.gallery3d.app.Config$AlbumSetPage get(android.content.Context)>
<com.android.gallery3d.data.LocalImage: int getSupportedOperations()>
<com.android.gallery3d.picasasource.PicasaSource: long getPicasaId(com.android.gallery3d.data.MediaObject)>
<com.android.gallery3d.picasasource.PicasaImage: long getDateInMs()>
<com.android.gallery3d.data.PathMatcher$Node: int getKind()>
<com.android.gallery3d.ui.TiledTexture: int getHeight()>
<com.android.gallery3d.filtershow.filters.ImageFilter: com.android.gallery3d.filtershow.presets.ImagePreset getImagePreset()>
<com.android.gallery3d.app.AlbumPage$MyDetailsSource: com.android.gallery3d.data.MediaDetails getDetails()>
<com.android.gallery3d.data.DataManager: long getTotalTargetCacheSize()>
<com.android.gallery3d.app.StitchingProgressManager: java.lang.Integer getProgress(android.net.Uri)>
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.MediaSet[] getMediaSetsFromString(java.lang.String)>
<com.android.gallery3d.data.TimeClustering: java.lang.String getClusterName(int)>
<com.android.gallery3d.filtershow.presets.ImagePreset: float getScaleFactor()>
<com.android.gallery3d.app.PhotoDataAdapter: int getLoadingState(int)>
<com.android.gallery3d.data.MediaSet$1: java.lang.Integer get()>
<com.android.gallery3d.picasasource.PicasaAlbumSet$PicasaSyncTaskFuture: java.lang.Integer get()>
<com.android.gallery3d.data.MediaObject: android.net.Uri getPlayUri()>
<com.android.gallery3d.app.GalleryActionBar$AlbumModeAdapter: java.lang.Object getItem(int)>
<com.android.gallery3d.gadget.MediaSetSource: android.graphics.Bitmap getImage(int)>
<com.android.gallery3d.data.MediaDetails: int getUnit(int)>
<com.android.gallery3d.filtershow.imageshow.ImageCrop: android.graphics.Matrix getCropRotationMatrix(float,android.graphics.RectF)>
<com.android.gallery3d.picasasource.FaceImage: int getHeight()>
<com.android.gallery3d.ui.NinePatchTexture: android.graphics.Rect getPaddings()>
<com.android.gallery3d.filtershow.imageshow.ImageShow: com.android.gallery3d.filtershow.HistoryAdapter getHistory()>
<com.android.gallery3d.ui.BitmapTileProvider: int getImageWidth()>
<com.android.gallery3d.ui.ScrollerHelper: float getCurrVelocity()>
<com.android.gallery3d.data.LocalMergeAlbum: int getMediaItemCount()>
<com.android.gallery3d.data.SizeClustering: java.lang.String getClusterName(int)>
<com.android.gallery3d.ui.GLPaint: float getLineWidth()>
<com.android.gallery3d.filtershow.tools.SaveCopyTask: java.io.File getFinalSaveDirectory(android.content.Context,android.net.Uri)>
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: float getLocalRotation()>
<com.android.gallery3d.filtershow.imageshow.GeometryMath: float[] getUnitVectorFromPoints(float[],float[])>
<com.android.gallery3d.app.AbstractGalleryActivity: com.android.gallery3d.ui.GLRoot getGLRoot()>
<com.android.gallery3d.data.MtpDevice: java.util.ArrayList getMediaItem(int,int)>
<com.android.gallery3d.data.Path: com.android.gallery3d.data.Path getPrefixPath()>
<com.android.gallery3d.filtershow.ui.ImageButtonTitle: java.lang.String getText()>
<com.android.gallery3d.data.MediaItem: int getRotation()>
<com.android.gallery3d.ui.ColorTexture: int getWidth()>
<android.widget.Gallery: int getLimitedMotionScrollAmount(boolean,int)>
<com.android.gallery3d.ui.AlbumLabelMaker$LazyLoadedBitmap: android.graphics.Bitmap get()>
<com.android.gallery3d.app.SlideshowPage$SequentialSource: com.android.gallery3d.data.MediaItem getMediaItem(int)>
<com.android.gallery3d.data.FilterDeleteSet: int getNumberOfDeletions()>
<com.android.gallery3d.filtershow.imageshow.ImageShow: com.android.gallery3d.filtershow.imageshow.GeometryMetadata getGeometry()>
<com.android.gallery3d.data.MediaSet: int getIndexOf(com.android.gallery3d.data.Path,java.util.ArrayList)>
<com.android.gallery3d.app.AbstractGalleryActivity: com.android.gallery3d.app.TransitionStore getTransitionStore()>
<com.android.gallery3d.filtershow.filters.ImageFilter: byte getFilterType()>
<com.android.gallery3d.data.MtpDeviceSet: com.android.gallery3d.data.MediaSet getSubMediaSet(int)>
<com.android.gallery3d.util.GalleryUtils: byte[] getBytes(java.lang.String)>
<com.android.gallery3d.data.LocalMediaItem: long getDateInMs()>
<com.android.gallery3d.picasasource.PicasaAlbum$CoverItem: int getHeight()>
<com.android.gallery3d.filtershow.imageshow.ImageSlave: com.android.gallery3d.filtershow.filters.ImageFilter getCurrentFilter()>
<com.android.gallery3d.data.MediaItem: java.lang.String[] getTags()>
<com.android.gallery3d.ui.TiledScreenNail: com.android.gallery3d.ui.TiledTexture getTexture()>
<com.android.gallery3d.data.DataManager: android.net.Uri getContentUri(com.android.gallery3d.data.Path)>
<com.android.gallery3d.data.ClusterAlbum: int getMediaItemCount()>
<com.android.gallery3d.data.LocalMergeAlbum: int getSupportedOperations()>
<com.android.gallery3d.filtershow.cache.DirectPresetCache: android.graphics.Bitmap get(com.android.gallery3d.filtershow.presets.ImagePreset)>
<com.android.gallery3d.data.FilterDeleteSet: long reload()>
<com.android.gallery3d.ui.SelectionManager: java.util.ArrayList getSelected(boolean)>
<com.android.gallery3d.data.FaceClustering: java.util.ArrayList getCluster(int)>
<com.android.gallery3d.ui.CropView$AnimationController: float getScale()>
<com.android.gallery3d.data.FaceClustering: com.android.gallery3d.data.MediaItem getClusterCover(int)>
<com.android.gallery3d.data.MtpDeviceSet: java.lang.String getName()>
<com.android.gallery3d.ui.SelectionManager: int getSelectedCount()>
<com.android.gallery3d.exif.ExifData: java.nio.ByteOrder getByteOrder()>
<com.android.gallery3d.data.MtpImage: com.android.gallery3d.data.MediaDetails getDetails()>
<com.android.gallery3d.app.StateManager: int getStateCount()>
<com.android.gallery3d.exif.ExifParser: int getCurrentIfd()>
<com.android.gallery3d.app.ActivityState: int getBackgroundColorId()>
<com.android.gallery3d.util.RangeIntArray: int get(int)>
<com.android.gallery3d.data.MediaSource: java.lang.String getPrefix()>
<com.android.gallery3d.filtershow.FilterShowActivity: float getPixelsFromDip(float)>
<com.android.gallery3d.gadget.LocalPhotoSource: android.graphics.Bitmap getImage(int)>
<com.android.gallery3d.picasasource.PicasaImage: com.google.android.picasasync.PhotoEntry getPhotoEntry()>
<com.android.gallery3d.data.EmptyAlbumImage: int getSupportedOperations()>
<com.android.gallery3d.picasasource.PicasaImage: int getSupportedOperations()>
<com.android.gallery3d.data.TimeClustering: int getNumberOfClusters()>
<com.android.gallery3d.data.MediaItem: long getSize()>
<com.android.gallery3d.app.SlideshowPage: int getBackgroundColorId()>
<com.android.gallery3d.app.CommonControllerOverlay: android.view.View getView()>
<com.android.gallery3d.picasasource.PicasaSource: android.app.Dialog getVersionCheckDialog(android.app.Activity)>
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.MediaSet getMediaSet(com.android.gallery3d.data.Path)>
<com.android.gallery3d.filtershow.ui.Spline: int getNbPoints()>
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: float getLocalScale()>
<com.android.gallery3d.data.SnailSource: com.android.gallery3d.data.Path getSetPath(int)>
<com.android.gallery3d.data.PathMatcher: java.lang.String getVar(int)>
<com.android.gallery3d.ui.SlotView$IntegerAnimation: int getTarget()>
<com.android.gallery3d.exif.ExifReader: com.android.gallery3d.exif.ExifData read(java.io.InputStream)>
<com.android.gallery3d.data.PathMatcher: int getIntVar(int)>
<com.android.gallery3d.data.ActionImage: int getSupportedOperations()>
<com.android.gallery3d.data.UriImage: android.net.Uri getContentUri()>
<com.android.gallery3d.data.UnlockImage: int getSupportedOperations()>
<com.android.gallery3d.picasasource.PicasaImage: long getAlbumId()>
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.Path findPathByUri(android.net.Uri,java.lang.String)>
<com.android.gallery3d.data.MediaItem: com.android.gallery3d.data.BitmapPool getMicroThumbPool()>
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: float getStraightenRotation()>
<com.android.gallery3d.ui.BitmapTexture: int getHeight()>
<com.android.gallery3d.exif.ExifTag: short getDataType()>
<com.android.gallery3d.app.ActivityState: android.os.Bundle getData()>
<com.android.gallery3d.common.OverScroller: int getFinalX()>
<com.android.gallery3d.picasasource.PicasaAlbum: int getMediaItemCount()>
<com.android.gallery3d.picasasource.PicasaImage: long getSize()>
<com.android.gallery3d.data.UriImage: int getSupportedOperations()>
<com.android.gallery3d.ui.PopupList$ItemDataAdapter: int getCount()>
<com.android.gallery3d.ui.SurfaceTextureScreenNail: int getWidth()>
<com.android.gallery3d.data.Path: com.android.gallery3d.data.MediaObject getObject()>
<com.android.gallery3d.picasasource.PicasaPostAlbum$PostSyncFuture: java.lang.Integer get()>
<com.android.gallery3d.filtershow.filters.ColorSpaceMatrix: float[] getMatrix()>
<com.android.gallery3d.filtershow.filters.ImageFilterTinyPlanet: android.graphics.Bitmap apply(android.graphics.Bitmap,float,boolean)>
<android.widget.Gallery: int getChildHeight(android.view.View)>
<com.android.gallery3d.app.PhotoPage$MyDetailsSource: int setIndex()>
<com.android.gallery3d.data.SingleItemAlbum: int getMediaItemCount()>
<com.android.gallery3d.ui.TileImageView$Tile: com.android.gallery3d.ui.TileImageView$Tile getParentTile()>
<com.android.gallery3d.app.AlbumSetPage$MyDetailsSource: com.android.gallery3d.data.MediaDetails getDetails()>
<com.android.gallery3d.ui.RawTexture: int getHeight()>
<com.android.gallery3d.filtershow.ImageStateAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.gallery3d.filtershow.cache.ImageLoader: android.graphics.Bitmap getScaleOneImageForPreset(com.android.gallery3d.filtershow.imageshow.ImageShow,com.android.gallery3d.filtershow.presets.ImagePreset,android.graphics.Rect,boolean)>
<com.android.gallery3d.ui.BitmapTileProvider: int getLevelCount()>
<com.android.gallery3d.ui.ExtTexture: int getTextureWidth()>
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: android.graphics.Matrix getHorizontalMatrix(float)>
<com.android.gallery3d.picasasource.PicasaSource: android.content.ContentResolver getContentResolver()>
<com.android.gallery3d.picasasource.PicasaAlbum$CoverItem: java.lang.String getMimeType()>
<com.android.gallery3d.common.LongSparseArray: java.lang.Object get(long,java.lang.Object)>
<com.android.gallery3d.data.MtpImage: android.net.Uri getContentUri()>
<com.android.gallery3d.filtershow.imageshow.ImageRotate: int getLocalValue()>
<com.android.gallery3d.app.GalleryActionBar$AlbumModeAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)>
<com.android.gallery3d.data.LocalAlbum: java.util.ArrayList getMediaItem(int,int)>
<com.android.gallery3d.ui.UploadedTexture: int getTarget()>
<com.android.gallery3d.app.TransitionStore: java.lang.Object get(java.lang.Object,java.lang.Object)>
<com.android.gallery3d.filtershow.cache.ImageLoader: int getOrientation(android.content.Context,android.net.Uri)>
<com.android.gallery3d.data.SecureAlbum: java.lang.String getName()>
<com.android.gallery3d.data.LocalVideo: com.android.gallery3d.data.MediaDetails getDetails()>
<com.android.gallery3d.ui.GLRootView: int getCompensation()>
<com.android.gallery3d.data.LocalImage: int getHeight()>
<com.android.gallery3d.app.AlbumPage: int getBackgroundColorId()>
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: android.graphics.Matrix getVerticalMatrix(float)>
<com.android.gallery3d.data.FilterTypeSet: int getSubMediaSetCount()>
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: android.graphics.Matrix getMatrixOriginalOrientation(int,float,float)>
<com.android.gallery3d.data.LocalMediaItem: void getLatLong(double[])>
<com.android.gallery3d.data.LocalMediaItem: com.android.gallery3d.data.MediaDetails getDetails()>
<com.android.gallery3d.app.PhotoDataAdapter: int getCurrentIndex()>
<com.android.gallery3d.data.FaceClustering: int getNumberOfClusters()>
<com.android.gallery3d.filtershow.filters.ImageFilter: int getMinParameter()>
<com.android.gallery3d.data.Path: com.android.gallery3d.data.Path getChild(int)>
<com.android.gallery3d.data.MtpContext: com.android.gallery3d.data.MtpClient getMtpClient()>
<com.android.gallery3d.exif.ExifTag: int getIfdIdFromTagId(short)>
<com.android.gallery3d.app.Bookmarker: java.lang.Integer getBookmark(android.net.Uri)>
<com.android.gallery3d.filtershow.imageshow.ImageCrop: android.graphics.Matrix getCropBoundDisplayMatrix()>
<com.android.gallery3d.exif.Rational: long getDenominator()>
<com.android.gallery3d.data.ClusterAlbum: int getSupportedOperations()>
<com.android.gallery3d.filtershow.cache.ImageLoader: com.android.gallery3d.filtershow.FilterShowActivity getActivity()>
<com.android.gallery3d.ui.BasicTexture: int getId()>
<com.android.gallery3d.data.LocationClustering: java.util.ArrayList getCluster(int)>
<com.android.gallery3d.app.Config$AlbumPage: com.android.gallery3d.app.Config$AlbumPage get(android.content.Context)>
<com.android.gallery3d.data.FilterTypeSet: java.lang.String getName()>
<com.android.gallery3d.app.OrientationManager: int getDisplayRotation()>
<com.android.gallery3d.picasasource.PicasaImage: java.lang.String[] getTags()>
<com.android.gallery3d.data.FilterTypeSet: com.android.gallery3d.data.MediaSet getSubMediaSet(int)>
<com.android.gallery3d.gadget.WidgetService$PhotoRVFactory: android.widget.RemoteViews getViewAt(int)>
<com.android.gallery3d.data.LocationClustering: java.lang.String getClusterName(int)>
<com.android.gallery3d.picasasource.PicasaImage: int getMediaType()>
<com.android.gallery3d.ui.RawTexture: int getTextureHeight()>
<com.android.gallery3d.filtershow.HistoryAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.gallery3d.data.LocalVideo$LocalVideoRequest: android.graphics.Bitmap onDecodeOriginal(com.android.gallery3d.util.ThreadPool$JobContext,int)>
<com.android.gallery3d.filtershow.imageshow.ImageSmallFilter: com.android.gallery3d.filtershow.presets.ImagePreset getImagePreset()>
<com.android.gallery3d.data.LocalAlbum: int getSupportedOperations()>
<com.android.gallery3d.data.LocalMergeAlbum: android.net.Uri getContentUri()>
<com.android.gallery3d.gadget.WidgetService$EmptySource: android.graphics.Bitmap getImage(int)>
<com.android.gallery3d.ui.PhotoView$ZInterpolator: float getInterpolation(float)>
<com.android.gallery3d.ui.BasicTexture: int getTextureHeight()>
<com.android.gallery3d.exif.ExifData: com.android.gallery3d.exif.ExifTag addTag(short)>
<com.android.gallery3d.app.SlideshowPage$ShuffleSource: com.android.gallery3d.data.MediaItem getMediaItem(int)>
<com.android.gallery3d.data.MtpClient: android.mtp.MtpDevice getDevice(int)>
<com.android.gallery3d.ui.BitmapTileProvider: android.graphics.Bitmap getTile(int,int,int,int,int,com.android.gallery3d.data.BitmapPool)>
<com.android.gallery3d.exif.ExifParser: java.nio.ByteOrder getByteOrder()>
<com.android.gallery3d.filtershow.imageshow.ImageStraighten: java.lang.String getName()>
<com.android.gallery3d.ui.GLCanvasImpl: float getAlpha()>
<com.android.gallery3d.data.SizeClustering: int getNumberOfClusters()>
<com.android.gallery3d.data.ClusterAlbumSet: com.android.gallery3d.data.MediaSet getSubMediaSet(int)>
<com.android.gallery3d.filtershow.cache.ImageLoader: int getOrientationFromPath(java.lang.String)>
<com.android.gallery3d.ui.SlotView: android.graphics.Rect getSlotRect(int,com.android.gallery3d.ui.GLView)>
<com.android.gallery3d.app.AlbumSetDataLoader: int getTotalCount(int)>
<com.android.gallery3d.app.GalleryActionBar: android.view.Menu getMenu()>
<com.android.gallery3d.gadget.WidgetService$PhotoRVFactory: android.widget.RemoteViews getLoadingView()>
<com.android.gallery3d.data.MtpDevice: android.mtp.MtpObjectInfo getObjectInfo(com.android.gallery3d.data.MtpContext,int,int)>
<com.android.gallery3d.picasasource.PicasaImage: int getFullImageRotation()>
<com.android.gallery3d.data.FaceClustering$FaceCluster: com.android.gallery3d.data.MediaItem getCover()>
<com.android.gallery3d.data.LocalVideo: android.net.Uri getContentUri()>
<com.android.gallery3d.ui.ResourceTexture: int getWidth()>
<com.android.gallery3d.app.GalleryActionBar$ClusterAdapter: long getItemId(int)>
<com.android.gallery3d.data.MtpDeviceSet: int getSubMediaSetCount()>
<com.android.gallery3d.data.MtpImage: int getSupportedOperations()>
<com.android.gallery3d.filtershow.imageshow.ImageSlave: android.graphics.Rect getDisplayedImageBounds()>
<com.android.gallery3d.ui.BitmapTexture: int getWidth()>
<com.android.gallery3d.ui.StringTexture: android.text.TextPaint getDefaultPaint(float,int)>
<com.android.gallery3d.picasasource.PicasaAlbum: int getCacheFlag()>
<com.android.gallery3d.data.MediaSet: com.android.gallery3d.data.MediaItem getCoverMediaItem()>
<com.android.gallery3d.filtershow.cache.ImageLoader: int getZoomOrientation()>
<com.android.gallery3d.picasasource.PicasaSource: com.android.gallery3d.data.MediaItem getFaceItem(android.content.Context,com.android.gallery3d.data.MediaItem,int)>
<com.android.gallery3d.filtershow.imageshow.ImageTinyPlanet: float getCurrentTouchAngle()>
<com.android.gallery3d.data.MtpDevice: int getMediaItemCount()>
<com.android.gallery3d.data.LocalMergeAlbum: java.util.ArrayList getMediaItem(int,int)>
<com.android.gallery3d.ui.FadeTexture: int getHeight()>
<com.android.gallery3d.app.GalleryActionBar$AlbumModeAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.gallery3d.ui.ColorTexture: int getHeight()>
<com.android.gallery3d.picasasource.PicasaSource: java.lang.String getUserAccount(android.content.Context,com.android.gallery3d.data.MediaObject)>
<com.android.gallery3d.data.UriImage: java.lang.String getMimeType()>
<com.android.gallery3d.filtershow.filters.ImageFilter: int getPreviewParameter()>
<com.android.gallery3d.filtershow.filters.ImageFilter: int getDefaultParameter()>
<com.android.gallery3d.filtershow.imageshow.ImageFlip: java.lang.String getName()>
<com.android.gallery3d.picasasource.FaceImage: int getWidth()>
<com.android.gallery3d.data.LocalMediaItem: long getSize()>
<com.android.gallery3d.data.DataManager: int getSupportedOperations(com.android.gallery3d.data.Path)>
<com.android.gallery3d.data.MtpClient: byte[] getThumbnail(java.lang.String,int)>
<com.android.gallery3d.ui.SurfaceTextureScreenNail: android.graphics.SurfaceTexture getSurfaceTexture()>
<com.android.gallery3d.data.TagClustering: int getNumberOfClusters()>
<com.android.gallery3d.ui.FadeTexture: int getWidth()>
<com.android.gallery3d.picasasource.PicasaSource: android.app.Dialog getVersionCheckDialog(android.app.Activity,int)>
<com.android.gallery3d.exif.ExifTag: com.android.gallery3d.exif.Rational getRational(int)>
<com.android.gallery3d.app.OrientationManager: int getCompensation()>
<com.android.gallery3d.picasasource.PicasaSource: android.content.ContentProviderClient getContentProvider()>
<com.android.gallery3d.picasasource.PicasaAlbumSet: com.android.gallery3d.data.MediaSet getSubMediaSet(int)>
<com.android.gallery3d.ui.GLPaint: int getColor()>
<com.android.gallery3d.data.MediaObject: int getMediaType()>
<com.android.gallery3d.app.PhotoDataAdapter: int getImageHeight()>
<com.android.gallery3d.app.AlbumDataLoader: com.android.gallery3d.data.MediaItem get(int)>
<com.android.gallery3d.ui.SlotView$Layout: int getSlotIndexByPosition(float,float)>
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: android.graphics.Matrix getFlipMatrix(float,float)>
<com.android.gallery3d.data.FilterTypeSet: java.util.ArrayList getMediaItem(int,int)>
<com.android.gallery3d.data.FilterTypeSet: int getMediaItemCount()>
<com.android.gallery3d.data.LocalSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)>
<com.android.gallery3d.app.SinglePhotoDataAdapter: com.android.gallery3d.data.MediaItem getMediaItem(int)>
<com.android.gallery3d.app.AbstractGalleryActivity: com.android.gallery3d.app.OrientationManager getOrientationManager()>
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: android.graphics.RectF getLocalDisplayBounds()>
<com.android.gallery3d.exif.ExifParser: int getStripIndex()>
<com.android.gallery3d.ui.TileImageViewAdapter: int getImageHeight()>
<com.android.gallery3d.ui.FlingScroller: int getDuration()>
<com.android.gallery3d.data.MediaItem: int getTargetSize(int)>
<com.android.gallery3d.util.RangeArray: java.lang.Object get(int)>
<com.android.gallery3d.data.SizeClustering: java.util.ArrayList getCluster(int)>
<com.android.gallery3d.data.LocalImage: int getMediaType()>
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: android.graphics.RectF getPreviewCropBounds()>
<com.android.gallery3d.app.GalleryActionBar: int getHeight()>
<com.android.gallery3d.picasasource.PicasaImage: int getHeight()>
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: float getCurrentTouchAngle()>
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: android.graphics.RectF straightenBounds()>
<com.android.gallery3d.ui.GLView: int getHeight()>
<com.android.gallery3d.filtershow.imageshow.GeometryMetadata: float getRotation()>
<com.android.gallery3d.ui.BitmapTexture: int getTextureWidth()>
<com.android.gallery3d.data.SnailSource: com.android.gallery3d.data.Path getItemPath(int)>
<com.android.gallery3d.ui.ResourceTexture: int getTextureWidth()>
<com.android.gallery3d.app.SinglePhotoDataAdapter: int getImageRotation(int)>
<com.android.gallery3d.ui.TileImageViewAdapter: int getLevelCount()>
<com.android.gallery3d.data.PathMatcher: long getLongVar(int)>
<com.android.gallery3d.data.DownloadCache$TaskProxy: com.android.gallery3d.data.DownloadCache$Entry get(com.android.gallery3d.util.ThreadPool$JobContext)>
<com.android.gallery3d.data.Path: com.android.gallery3d.data.Path getChild(long)>
<com.android.gallery3d.data.MediaItem: com.android.gallery3d.data.Face[] getFaces()>
<com.android.gallery3d.data.LocalMediaItem: int getBucketId()>
<com.android.gallery3d.app.StitchingProgressManager: java.util.ArrayList access$100(com.android.gallery3d.app.StitchingProgressManager)>
<com.android.gallery3d.ui.DialogDetailsView$DetailsAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.gallery3d.ui.SlotView$Layout: int getVisibleEnd()>
<com.android.gallery3d.ui.AlbumSlidingWindow: com.android.gallery3d.ui.AlbumSlidingWindow$AlbumEntry get(int)>
<com.android.gallery3d.data.MtpDeviceSet: java.lang.String getDeviceName(com.android.gallery3d.data.MtpContext,int)>
<com.android.gallery3d.data.MediaSet$MultiSetSyncFuture: java.lang.Integer get()>
<com.android.gallery3d.ui.SlotView$Layout: android.graphics.Rect getSlotRect(int,android.graphics.Rect)>
<com.android.gallery3d.common.BlobCache: byte[] lookup(long)>
<com.android.gallery3d.ui.GLRootView: int getDisplayRotation()>
<com.android.gallery3d.data.MediaItem: int getFullImageRotation()>
<com.android.gallery3d.filtershow.imageshow.ImageShow: com.android.gallery3d.filtershow.filters.ImageFilter getCurrentFilter()>
<com.android.gallery3d.data.ClusterAlbum: int getTotalMediaItemCount()>
<com.android.gallery3d.app.PhotoDataAdapter: com.android.gallery3d.ui.ScreenNail getScreenNail(int)>
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.MediaObject getMediaObject(java.lang.String)>
<com.android.gallery3d.exif.ExifData: com.android.gallery3d.exif.IfdData getIfdData(int)>
<com.android.gallery3d.common.LruCache: java.lang.Object get(java.lang.Object)>
<com.android.gallery3d.ui.MenuExecutor: java.lang.String getMimeType(int)>
<com.android.gallery3d.data.ClusterAlbumSet: java.lang.String getName()>
<com.android.gallery3d.data.MediaItem: void getLatLong(double[])>
<com.android.gallery3d.data.SnailItem: int getHeight()>
<com.android.gallery3d.data.MediaItem: java.lang.String getName()>
<com.android.gallery3d.data.MediaObject: java.lang.String getTypeString(int)>
<com.android.gallery3d.ui.EdgeAnimation: float getValue()>
<com.android.gallery3d.data.CameraShortcutImage: int getSupportedOperations()>
<com.android.gallery3d.app.GalleryActionBar: java.lang.String getClusterByTypeString(android.content.Context,int)>
<com.android.gallery3d.ui.SlotView: int getScrollY()>
<com.android.gallery3d.ui.SlotView: int getScrollX()>
<com.android.gallery3d.gadget.MediaSetSource: android.net.Uri getContentUri(int)>
<com.android.gallery3d.ui.ResourceTexture: int getId()>
<com.android.gallery3d.gadget.WidgetService$EmptySource: android.net.Uri getContentUri(int)>
<com.android.gallery3d.app.GalleryActionBar$AlbumModeAdapter: long getItemId(int)>
<com.android.gallery3d.app.PhotoPage$MyDetailsSource: com.android.gallery3d.data.MediaDetails getDetails()>
<com.android.gallery3d.data.FilterTypeSet: int getSupportedOperations()>
<com.android.gallery3d.data.MediaSource: long getTotalTargetCacheSize()>
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: android.graphics.RectF getLocalPhotoBounds()>
<com.android.gallery3d.ui.TileImageViewAdapter: int getImageWidth()>
<com.android.gallery3d.data.MediaObject: android.net.Uri getContentUri()>
<com.android.gallery3d.data.LocalMediaItem: java.lang.String getMimeType()>
<com.android.gallery3d.gadget.WidgetUtils: android.graphics.Bitmap createWidgetBitmap(android.graphics.Bitmap,int)>
<com.android.gallery3d.app.StateManager: com.android.gallery3d.app.ActivityState getTopState()>
<com.android.gallery3d.picasasource.PicasaSource: double getLongitude(com.android.gallery3d.data.MediaObject)>
<com.android.gallery3d.data.ComboAlbumSet: com.android.gallery3d.data.MediaSet getSubMediaSet(int)>
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)>
<com.android.gallery3d.data.MediaObject: com.android.gallery3d.data.Path getPath()>
<com.android.gallery3d.filtershow.imageshow.ImageGeometry: com.android.gallery3d.filtershow.imageshow.GeometryMetadata$FLIP getLocalFlip()>
<com.android.gallery3d.picasasource.PicasaPostAlbum: android.database.Cursor internalQuery(int,int)>
<com.android.gallery3d.data.LocalAlbumSet: java.lang.String getName()>
<com.android.gallery3d.ui.BitmapTileProvider: int getImageHeight()>
<com.android.gallery3d.util.GalleryUtils: int getBucketId(java.lang.String)>
<com.android.gallery3d.data.MtpClient: android.mtp.MtpDevice getDevice(java.lang.String)>
<com.android.gallery3d.ui.SlotView$Layout: int getScrollLimit()>
<com.android.gallery3d.data.ActionImage: int getHeight()>
<com.android.gallery3d.data.MtpImage: java.lang.String getMimeType()>
<com.android.gallery3d.data.MtpClient: byte[] getObject(java.lang.String,int,int)>
<com.android.gallery3d.ui.SlotView: android.graphics.Rect getSlotRect(int)>
<com.android.gallery3d.filtershow.FilterShowActivity$LoadBitmapTask: java.lang.Boolean doInBackground(android.net.Uri[])>
<com.android.gallery3d.data.TimeClustering: java.util.ArrayList getCluster(int)>
<com.android.gallery3d.data.LocalVideo: int getWidth()>
<com.android.gallery3d.picasasource.PicasaSource: android.content.ContentProviderClient getStoreProvider()>
<com.android.gallery3d.ui.ExtTexture: int getTarget()>
<com.android.gallery3d.common.Utils: java.lang.String getUserAgent(android.content.Context)>
<com.android.gallery3d.ui.FlingScroller: int getCurrVelocityY()>
<com.android.gallery3d.ui.FlingScroller: int getCurrVelocityX()>
<com.android.gallery3d.data.LocalMergeAlbum$FetchCache: com.android.gallery3d.data.MediaItem getItem(int)>
<com.android.gallery3d.filtershow.presets.ImagePreset: com.android.gallery3d.filtershow.filters.ImageFilter getFilter(java.lang.String)>
<com.android.gallery3d.ui.RawTexture: int getTarget()>
<com.android.gallery3d.data.FilterEmptyPromptSet: int getMediaItemCount()>
<com.android.gallery3d.data.Cluster: com.android.gallery3d.data.SmallItem getLastItem()>
<com.android.gallery3d.app.AbstractGalleryActivity: com.android.gallery3d.util.ThreadPool getThreadPool()>
<com.android.gallery3d.ui.DialogDetailsView$DetailsAdapter: int getCount()>
<com.android.browser.BrowserSettings: int getPageCacheCapacity()>
<com.android.browser.TabControl: com.android.browser.Tab getTab(int)>
<com.android.browser.TabControl: int getTabCount()>
<com.android.browser.BrowserBookmarksAdapter: com.android.browser.BrowserBookmarksAdapterItem getRowObject(android.database.Cursor,com.android.browser.BrowserBookmarksAdapterItem)>
<com.android.browser.homepages.RequestHandler: byte[] htmlEncode(java.lang.String)>
<com.android.browser.BrowserHistoryPage$HistoryGroupWrapper: java.lang.Object getItem(int)>
<com.android.browser.view.BookmarkExpandableView$BookmarkAccountAdapter: java.lang.Object getGroup(int)>
<com.android.browser.BrowserSnapshotPage$SnapshotAdapter: android.database.Cursor getItem(int)>
<com.android.browser.preferences.WebsiteSettingsFragment$SiteAdapter: int getCount()>
<com.android.browser.provider.BrowserProvider$MySuggestionCursor: float getFloat(int)>
<com.android.browser.BrowserBookmarksAdapter: long getItemId(android.database.Cursor)>
<com.android.browser.Tab: java.lang.String getTitle()>
<com.android.browser.WebStorageSizeManager$StatFsDiskInfo: long getTotalSizeBytes()>
<com.android.browser.BrowserSettings: java.lang.String getJsEngineFlags()>
<com.android.browser.search.OpenSearchSearchEngine: java.lang.String getName()>
<com.android.browser.PreloadedTabControl: com.android.browser.Tab getTab()>
<com.android.browser.BrowserSettings: java.lang.String getHomePage()>
<com.android.browser.Tab: android.graphics.Bitmap getFavicon()>
<com.android.browser.BrowserSettings: java.lang.String getDefaultTextEncoding()>
<com.android.browser.BrowserHistoryPage$HistoryGroupWrapper: long getItemId(int)>
<com.android.browser.WebStorageSizeManager$WebKitAppCacheInfo: long getAppCacheSizeBytes()>
<com.android.browser.TitleBar: com.android.browser.BaseUi getUi()>
<com.android.browser.provider.BrowserProvider$MySuggestionCursor: int getCount()>
<com.android.browser.util.ThreadedCursorAdapter: long getItemId(int)>
<com.android.browser.provider.BrowserProvider2$SuggestionsCursor: java.lang.String[] getColumnNames()>
<com.android.browser.Preloader$PreloaderSession: android.webkit.WebView getWebView()>
<com.android.browser.provider.BrowserProvider2: java.lang.String getType(android.net.Uri)>
<com.android.browser.provider.BrowserProvider2$SuggestionsCursor: float getFloat(int)>
<com.android.browser.util.ThreadedCursorAdapter: android.database.Cursor getItem(int)>
<com.android.browser.provider.SnapshotProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<com.android.browser.provider.BrowserProvider2: java.lang.Object[] getSelectionWithAccounts(android.net.Uri,java.lang.String,java.lang.String[])>
<com.android.browser.provider.BrowserProvider2: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<com.android.browser.AutofillHandler: android.webkit.WebSettingsClassic$AutoFillProfile getAutoFillProfile()>
<com.android.browser.AutofillHandler$AutoFillProfileDbTask: java.lang.Object doInBackground(java.lang.Object[])>
<com.android.browser.BrowserBookmarksPage: android.content.Intent createShortcutIntent(android.content.Context,android.database.Cursor)>
<android.provider.BrowserContract$SyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)>
<com.android.browser.view.PieItem: float getAlpha()>
<com.android.browser.BrowserSettings: com.android.browser.WebStorageSizeManager getWebStorageSizeManager()>
<android.provider.BrowserContract$SyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)>
<com.android.browser.Controller: android.graphics.Bitmap getDefaultVideoPoster()>
<com.android.browser.search.OpenSearchSearchEngine$SuggestionsCursor: float getFloat(int)>
<com.android.browser.SnapshotTab: android.content.ContentValues createSnapshotValues()>
<com.android.browser.TitleBar: com.android.browser.UiController getUiController()>
<com.android.browser.Controller: com.android.browser.Tab getCurrentTab()>
<android.provider.Browser: android.database.Cursor getAllBookmarks(android.content.ContentResolver)>
<com.android.browser.TabScrollView: int getChildIndex(android.view.View)>
<com.android.browser.provider.BrowserProvider$MySuggestionCursor: java.lang.String[] getColumnNames()>
<com.android.browser.BrowserSettings: java.lang.String getDefaultLinkPrefetchSetting()>
<com.android.browser.Controller: android.view.View getVideoLoadingProgressView()>
<com.android.browser.BrowserSettings: java.lang.String getDefaultPreloadSetting()>
<com.android.browser.homepages.HomeProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)>
<com.android.browser.ErrorConsoleView$ErrorConsoleListView$ErrorConsoleMessageList: int getCount()>
<com.android.browser.BrowserSettings: java.lang.String getLinkPrefetchEnabled()>
<com.android.browser.DateSortedExpandableListAdapter: java.lang.Object getChild(int,int)>
<com.android.browser.search.SearchEngineInfo: java.lang.String getSearchUriForQuery(java.lang.String)>
<com.android.browser.ErrorConsoleView$ErrorConsoleListView$ErrorConsoleMessageList: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.browser.SuggestionsAdapter: java.lang.String getSuggestionTitle(com.android.browser.SuggestionsAdapter$SuggestItem)>
<com.android.browser.WebViewTimersControl: com.android.browser.WebViewTimersControl getInstance()>
<com.android.browser.provider.BrowserProvider$MySuggestionCursor: short getShort(int)>
<com.android.browser.search.OpenSearchSearchEngine$SuggestionsCursor: int getInt(int)>
<com.android.browser.BaseUi: com.android.browser.TitleBar getTitleBar()>
<com.android.browser.SuggestionsAdapter: java.lang.String getSuggestionUrl(com.android.browser.SuggestionsAdapter$SuggestItem)>
<com.android.browser.provider.BrowserProvider2$SuggestionsCursor: int getCount()>
<com.android.browser.homepages.Template$CursorListEntityWrapper: com.android.browser.homepages.Template$ListEntityIterator getListIterator(java.lang.String)>
<com.android.browser.provider.BrowserProvider$MySuggestionCursor: int getInt(int)>
<com.android.browser.SnapshotTab: com.android.browser.Tab getParent()>
<com.android.browser.search.OpenSearchSearchEngine: java.lang.CharSequence getLabel()>
<com.android.browser.PieControl$TabAdapter: int getCount()>
<com.android.browser.TabControl: com.android.browser.Tab getLeastUsedTab(com.android.browser.Tab)>
<com.android.browser.Controller: com.android.browser.Tab openTab(com.android.browser.IntentHandler$UrlData)>
<com.android.browser.view.BookmarkExpandableView: com.android.browser.BreadCrumbView getBreadCrumbs(int)>
<com.android.browser.TabScrollView: android.view.View getSelectedTab()>
<com.android.browser.DeviceAccountLogin: java.lang.String[] getAccountNames()>
<com.android.browser.Tab: com.android.browser.Tab$SecurityState getSecurityState()>
<com.android.browser.Bookmarks: android.database.Cursor queryCombinedForUrl(android.content.ContentResolver,java.lang.String,java.lang.String)>
<com.android.browser.BrowserSnapshotPage: android.graphics.Bitmap getBitmap(android.database.Cursor,int)>
<com.android.browser.BrowserSettings: java.lang.String getPreloadAlwaysPreferenceString(android.content.Context)>
<com.android.browser.addbookmark.FolderSpinnerAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)>
<com.android.browser.search.SearchEngines: com.android.browser.search.SearchEngine getDefaultSearchEngine(android.content.Context)>
<com.android.browser.BrowserSettings: android.webkit.WebSettings$PluginState getPluginState()>
<com.android.browser.SuggestionsAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.browser.view.PieItem: float getAnimationAngle()>
<com.android.browser.DataUri: java.lang.String getMimeType()>
<com.android.browser.search.SearchEngineInfo: java.lang.String getName()>
<com.android.browser.view.BookmarkExpandableView$BookmarkAccountAdapter: int getChildrenCount(int)>
<com.android.browser.ErrorConsoleView: int getShowState()>
<com.android.browser.TabControl: android.webkit.WebView getCurrentSubWindow()>
<com.android.browser.Preloader: com.android.browser.Preloader getInstance()>
<com.android.browser.UrlInputView: int getState()>
<com.android.browser.view.PieItem: float getSweep()>
<com.android.browser.BrowserBookmarksPage$OpenAllInTabsTask: android.database.Cursor doInBackground(java.lang.Void[])>
<com.android.browser.search.SearchEngineInfo: java.lang.String getLabel()>
<com.android.browser.search.OpenSearchSearchEngine$SuggestionsCursor: java.lang.String[] getColumnNames()>
<com.android.browser.AutoFillProfileDatabase: com.android.browser.AutoFillProfileDatabase getInstance(android.content.Context)>
<com.android.browser.BrowserHistoryPage$HistoryChildWrapper: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.browser.BrowserHistoryPage: android.view.View getTargetView(android.view.ContextMenu$ContextMenuInfo)>
<com.android.browser.provider.BrowserProvider2$SuggestionsCursor: double getDouble(int)>
<com.android.browser.widget.BookmarkThumbnailWidgetService$BookmarkFactory: int getViewTypeCount()>
<com.android.browser.NavScreen: com.android.browser.NavTabView getTabView(int)>
<com.android.browser.TabControl: int getCurrentPosition()>
<com.android.browser.XLargeUi: android.graphics.drawable.Drawable getFaviconDrawable(android.graphics.Bitmap)>
<com.android.browser.BaseUi: com.android.browser.Tab getActiveTab()>
<com.android.browser.provider.BrowserProvider2$SuggestionsCursor: java.lang.String getString(int)>
<com.android.browser.widget.BookmarkThumbnailWidgetService: android.content.SharedPreferences getWidgetState(android.content.Context,int)>
<com.android.browser.BrowserBookmarksPage: android.graphics.Bitmap getBitmap(android.database.Cursor,int)>
<com.android.browser.DateSortedExpandableListAdapter: long getGroupId(int)>
<com.android.browser.widget.BookmarkThumbnailWidgetService$BookmarkFactory: android.widget.RemoteViews getViewAt(int)>
<com.android.browser.provider.BrowserProvider: java.lang.String getType(android.net.Uri)>
<com.android.browser.PieControl$TabAdapter: com.android.browser.Tab getItem(int)>
<com.android.browser.provider.SnapshotProvider: android.database.sqlite.SQLiteDatabase getWritableDatabase()>
<com.android.browser.provider.BrowserProvider2$SuggestionsCursor: short getShort(int)>
<com.android.browser.homepages.RequestHandler: java.lang.String getUriResourcePath()>
<com.android.browser.homepages.RequestHandler$4: com.android.browser.homepages.Template$ListEntityIterator getListIterator(java.lang.String)>
<com.android.browser.IntentHandler: com.android.browser.IntentHandler$UrlData getUrlDataFromIntent(android.content.Intent)>
<com.android.browser.XLargeUi: int getContentWidth()>
<com.android.browser.BrowserSettings: android.webkit.WebSettings$ZoomDensity getDefaultZoom()>
<com.android.browser.DateSortedExpandableListAdapter: long getCombinedGroupId(long)>
<com.android.browser.NavScreen$TabAdapter: long getItemId(int)>
<com.android.browser.widget.BookmarkThumbnailWidgetService$BookmarkFactory: int getCount()>
<com.android.browser.DateSortedExpandableListAdapter: long getCombinedChildId(long,long)>
<com.android.browser.BrowserSettings: android.webkit.WebSettingsClassic$AutoFillProfile getAutoFillProfile()>
<com.android.browser.view.PieItem: int getOuterRadius()>
<com.android.browser.Tab: android.webkit.WebView getWebView()>
<com.android.browser.NavScreen$TabAdapter: int getCount()>
<com.android.browser.BookmarkItem: java.lang.String getName()>
<com.android.browser.view.BookmarkExpandableView$BookmarkAccountAdapter: long getGroupId(int)>
<com.android.browser.SuggestionsAdapter: int getCount()>
<com.android.browser.SnapshotTab: byte[] compressBitmap(android.graphics.Bitmap)>
<com.android.browser.TabControl: com.android.browser.Tab createNewTab(android.os.Bundle,boolean)>
<com.android.browser.SuggestionsAdapter: com.android.browser.SuggestionsAdapter$SuggestionResults buildSuggestionResults()>
<com.android.browser.search.OpenSearchSearchEngine: android.database.Cursor getSuggestions(android.content.Context,java.lang.String)>
<com.android.browser.DateSortedExpandableListAdapter: long getChildId(int,int)>
<com.android.browser.preferences.WebsiteSettingsFragment$Site: int getFeatureCount()>
<com.android.browser.provider.SnapshotProvider: java.io.File getOldDatabasePath(android.content.Context)>
<com.android.browser.BrowserSettings: int getRawTextZoom(int)>
<com.android.browser.provider.BrowserProvider2: android.database.sqlite.SQLiteOpenHelper getDatabaseHelper(android.content.Context)>
<com.android.browser.provider.BrowserProvider2: int getUrlCount(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String)>
<com.android.browser.TabControl: com.android.browser.Tab getTabFromView(android.webkit.WebView)>
<com.android.browser.BrowserBookmarksAdapter: java.lang.CharSequence getTitle(android.database.Cursor)>
<com.android.browser.BookmarkUtils: android.content.Intent createAddToHomeIntent(android.content.Context,java.lang.String,java.lang.String,android.graphics.Bitmap,android.graphics.Bitmap)>
<com.android.browser.view.BookmarkExpandableView$BookmarkAccountAdapter: java.lang.Object getChild(int,int)>
<com.android.browser.DataUri: byte[] getData()>
<com.android.browser.ErrorConsoleView$ErrorConsoleListView$ErrorConsoleMessageList: long getItemId(int)>
<com.android.browser.preferences.WebsiteSettingsFragment$Site: int getFeatureByIndex(int)>
<com.android.browser.BaseUi: boolean isTitleBarShowing()>
<com.android.browser.BrowserSettings: int getAdjustedTextZoom(int)>
<com.android.browser.SuggestionsAdapter: com.android.browser.SuggestionsAdapter$SuggestItem getItem(int)>
<com.android.browser.Controller: android.app.Activity getActivity()>
<com.android.browser.BrowserSettings: com.android.browser.BrowserSettings getInstance()>
<com.android.browser.homepages.Template: com.android.browser.homepages.Template getCachedTemplate(android.content.Context,int)>
<com.android.browser.Controller: com.android.browser.BrowserSettings getSettings()>
<com.android.browser.DateSortedExpandableListAdapter: java.lang.Object getGroup(int)>
<com.android.browser.Controller: com.android.browser.WebViewFactory getWebViewFactory()>
<com.android.browser.Controller: int getDesiredThumbnailHeight(android.content.Context)>
<com.android.browser.BrowserSettings: java.lang.String getFactoryResetHomeUrl(android.content.Context)>
<com.android.browser.preferences.WebsiteSettingsFragment$Site: java.lang.String getPrettyOrigin()>
<com.android.browser.NavScreen$TabAdapter: com.android.browser.Tab getItem(int)>
<com.android.browser.PieControl: com.android.browser.view.PieItem makeItem(int,int)>
<com.android.browser.BrowserSettings: android.webkit.WebSettings$LayoutAlgorithm getLayoutAlgorithm()>
<com.android.browser.BrowserHistoryPage$HistoryGroupWrapper: int getCount()>
<com.android.browser.TabControl: long getNextId()>
<com.android.browser.DateSortedExpandableListAdapter: android.content.Context getContext()>
<com.android.browser.DateSortedExpandableListAdapter: android.view.View getChildView(int,int,boolean,android.view.View,android.view.ViewGroup)>
<com.android.browser.BrowserHistoryPage$HistoryAdapter: android.view.View getChildView(int,int,boolean,android.view.View,android.view.ViewGroup)>
<com.android.browser.view.PieItem: float getStartAngle()>
<com.android.browser.view.BookmarkExpandableView$BookmarkAccountAdapter: int getGroupCount()>
<com.android.browser.Tab$3: android.view.View getVideoLoadingProgressView()>
<com.android.browser.BreadCrumbView: com.android.browser.BreadCrumbView$Crumb getTopCrumb()>
<com.android.browser.Tab: com.android.browser.ErrorConsoleView getErrorConsole(boolean)>
<com.android.browser.widget.BookmarkThumbnailWidgetProvider: android.content.ComponentName getComponentName(android.content.Context)>
<com.android.browser.BrowserBookmarksAdapter: com.android.browser.BrowserBookmarksAdapterItem getLoadingObject()>
<com.android.browser.TitleBar: int getEmbeddedHeight()>
<com.android.browser.IntentHandler$UrlData: com.android.browser.PreloadedTabControl getPreloadedTab()>
<com.android.browser.IntentHandler$UrlData: java.lang.String getSearchBoxQueryToSubmit()>
<com.android.browser.Tab: com.android.browser.DeviceAccountLogin getDeviceAccountLogin()>
<com.android.browser.PreloadController: com.android.browser.TabControl getTabControl()>
<com.android.browser.BrowserSettings: com.android.browser.search.SearchEngine getSearchEngine()>
<com.android.browser.BrowserHistoryPage$HistoryAdapter: long getChildId(int,int)>
<com.android.browser.Controller: com.android.browser.SnapshotTab createNewSnapshotTab(long,boolean)>
<com.android.browser.BrowserSettings: java.lang.String getSearchEngineName()>
<com.android.browser.preferences.WebsiteSettingsFragment$SiteAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.browser.homepages.Template$CursorListEntityWrapper: android.database.Cursor getCursor()>
<com.android.browser.search.SearchEngines: java.util.List getSearchEngineInfos(android.content.Context)>
<android.webkit.BrowserFrame: android.webkit.CallbackProxy getCallbackProxy()>
<com.android.browser.BookmarkUtils: android.graphics.drawable.Drawable createListFaviconBackground(android.content.Context)>
<com.android.browser.Controller: com.android.browser.TabControl getTabControl()>
<com.android.browser.BrowserSettings: int getUserAgent()>
<com.android.browser.Tab: android.webkit.WebView getTopWindow()>
<com.android.browser.view.BookmarkExpandableView$BookmarkAccountAdapter: com.android.browser.BreadCrumbView getBreadCrumbView(int)>
<com.android.browser.search.SearchEngines: com.android.browser.search.SearchEngineInfo getSearchEngineInfo(android.content.Context,java.lang.String)>
<com.android.browser.BookmarkUtils: android.graphics.Bitmap createIcon(android.content.Context,android.graphics.Bitmap,android.graphics.Bitmap,com.android.browser.BookmarkUtils$BookmarkIconType)>
<com.android.browser.BrowserBookmarksPage: java.lang.String getUrl(android.database.Cursor)>
<com.android.browser.Tab: com.android.browser.Tab getParent()>
<com.android.browser.BrowserSettings: android.content.SharedPreferences getPreferences()>
<com.android.browser.provider.BrowserProvider$MySuggestionCursor: long getLong(int)>
<com.android.browser.search.OpenSearchSearchEngine$SuggestionsCursor: short getShort(int)>
<com.android.browser.BrowserHistoryPage$HistoryChildWrapper: int getCount()>
<com.android.browser.preferences.WebsiteSettingsFragment$Site: java.lang.String getOrigin()>
<com.android.browser.Controller: android.content.Context getContext()>
<com.android.browser.addbookmark.FolderSpinnerAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.browser.BrowserSnapshotPage: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>
<com.android.browser.NavTabScroller: com.android.browser.NavTabView getTabView(int)>
<com.android.browser.TabControl: int getTabPosition(com.android.browser.Tab)>
<com.android.browser.provider.BrowserProvider2$SuggestionsCursor: long getLong(int)>
<com.android.browser.homepages.Template: com.android.browser.homepages.Template copy()>
<com.android.browser.BackgroundHandler: android.os.Looper getLooper()>
<com.android.browser.BrowserHistoryPage$HistoryAdapter: android.database.Cursor getCursor(int)>
<com.android.browser.ErrorConsoleView$ErrorConsoleListView$ErrorConsoleMessageList: java.lang.Object getItem(int)>
<com.android.browser.BrowserBookmarksPage: android.graphics.Bitmap getBitmap(android.database.Cursor,int,android.graphics.Bitmap)>
<com.android.browser.BreadCrumbView: java.lang.Object getTopData()>
<com.android.browser.BaseUi: android.webkit.WebView getWebView()>
<com.android.browser.PreloadController: android.content.Context getContext()>
<com.android.browser.provider.SnapshotProvider: java.lang.String getType(android.net.Uri)>
<com.android.browser.BookmarkUtils: android.net.Uri getBookmarksUri(android.content.Context)>
<com.android.browser.provider.SnapshotProvider: android.database.sqlite.SQLiteDatabase getReadableDatabase()>
<com.android.browser.NavTabScroller: int getGap()>
<com.android.browser.view.PieItem: java.util.List getItems()>
<com.android.browser.Tab: android.webkit.WebViewClassic getWebViewClassic()>
<com.android.browser.search.DefaultSearchEngine: android.database.Cursor getSuggestions(android.content.Context,java.lang.String)>
<com.android.browser.view.ScrollerView: int getMaxScrollAmount()>
<com.android.browser.BaseUi: android.view.View getVideoLoadingProgressView()>
<com.android.browser.BrowserSettings: int getTextZoom()>
<com.android.browser.DateSortedExpandableListAdapter: int getChildrenCount(int)>
<com.android.browser.BrowserSettings: java.lang.String getLinkPrefetchOnWifiOnlyPreferenceString(android.content.Context)>
<com.android.browser.util.ThreadedCursorAdapter: int getCount()>
<com.android.browser.Controller: android.webkit.WebView getCurrentWebView()>
<com.android.browser.provider.SQLiteContentProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>
<com.android.browser.search.SearchEngineInfo: java.lang.String getSuggestUriForQuery(java.lang.String)>
<com.android.browser.BrowserHistoryPage$HistoryChildWrapper: long getItemId(int)>
<com.android.browser.Controller: android.webkit.WebView getCurrentTopWebView()>
<com.android.browser.Controller: int getDesiredThumbnailWidth(android.content.Context)>
<com.android.browser.BaseUi: android.graphics.drawable.Drawable getFaviconDrawable(android.graphics.Bitmap)>
<com.android.browser.PreloadController: android.view.View getVideoLoadingProgressView()>
<com.android.browser.UrlInputView: android.widget.ListAdapter getAdapter()>
<com.android.browser.TabControl: com.android.browser.Tab getTabFromAppId(java.lang.String)>
<com.android.browser.Controller: int getMaxTabs()>
<com.android.browser.DateSortedExpandableListAdapter: android.view.View getGroupView(int,boolean,android.view.View,android.view.ViewGroup)>
<com.android.browser.SnapshotTab$LoadData: android.database.Cursor doInBackground(java.lang.Void[])>
<com.android.browser.Tab: java.lang.String getUrl()>
<com.android.browser.BrowserSettings: java.lang.String getPreloadOnWifiOnlyPreferenceString(android.content.Context)>
<com.android.browser.TabControl: android.webkit.WebView getCurrentTopWebView()>
<com.android.browser.BrowserSettings: float getInvertedContrast()>
<com.android.browser.widget.BookmarkThumbnailWidgetService$BookmarkFactory: long getItemId(int)>
<com.android.browser.SuggestionsAdapter$CombinedCursor: com.android.browser.SuggestionsAdapter$SuggestItem getItem()>
<com.android.browser.Tab: com.android.browser.GeolocationPermissionsPrompt getGeolocationPermissionsPrompt()>
<com.android.browser.Tab: android.view.View getSubViewContainer()>
<com.android.browser.ComboViewActivity$TabsAdapter: int getCount()>
<com.android.browser.SuggestionsAdapter: long getItemId(int)>
<com.android.browser.PieControl$TabAdapter: long getItemId(int)>
<com.android.browser.SnapshotTab: android.graphics.Bitmap getScreenshot()>
<com.android.browser.BrowserHistoryPage$HistoryGroupWrapper: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.browser.Controller: android.content.Intent createBookmarkCurrentPageIntent(boolean)>
<com.android.browser.provider.BrowserProvider2$SuggestionsCursor: int getInt(int)>
<com.android.browser.Tab$3: android.graphics.Bitmap getDefaultVideoPoster()>
<com.android.browser.view.BookmarkExpandableView$BookmarkAccountAdapter: long getChildId(int,int)>
<com.android.browser.preferences.WebsiteSettingsFragment$Site: java.lang.String getPrettyTitle()>
<com.android.browser.BrowserSettings: long getLastRecovered()>
<com.android.browser.view.ScrollerView: float getTopFadingEdgeStrength()>
<com.android.browser.SuggestionsAdapter: android.widget.Filter getFilter()>
<com.android.browser.util.ThreadedCursorAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.browser.Controller: com.android.browser.UI getUi()>
<android.provider.Browser: android.database.Cursor getAllVisitedUrls(android.content.ContentResolver)>
<android.webkit.BrowserFrame: java.lang.String getRawResFilename(int,android.content.Context)>
<com.android.browser.NfcHandler: android.nfc.NdefMessage createNdefMessage(android.nfc.NfcEvent)>
<com.android.browser.PreloadController: android.app.Activity getActivity()>
<com.android.browser.view.PieItem: android.view.View getView()>
<com.android.browser.BrowserSettings: java.lang.String getPreloadEnabled()>
<com.android.browser.ComboViewActivity$TabsAdapter: android.app.Fragment getItem(int)>
<com.android.browser.WebStorageSizeManager: long getAppCacheMaxSize()>
<com.android.browser.TabScrollView$TabLayout: int getChildDrawingOrder(int,int)>
<com.android.browser.Controller: android.graphics.Bitmap createScreenshot(android.webkit.WebView,int,int)>
<android.webkit.BrowserFrame: boolean getShouldStartScrolledRight()>
<com.android.browser.AutoFillProfileDatabase: android.database.Cursor getProfile(int)>
<com.android.browser.SnapshotTab: long getDateCreated()>
<com.android.browser.TitleBar: com.android.browser.PageProgressView getProgressView()>
<com.android.browser.view.ScrollerView: float getBottomFadingEdgeStrength()>
<com.android.browser.addbookmark.FolderSpinnerAdapter: long getItemId(int)>
<com.android.browser.NavTabScroller: int getScrollValue()>
<com.android.browser.provider.BrowserProvider: java.lang.String getClientId(android.content.ContentResolver)>
<com.android.browser.TitleBar: com.android.browser.NavigationBarBase getNavigationBar()>
<com.android.browser.BrowserHistoryPage$HistoryAdapter: android.view.View getGroupView(int,boolean,android.view.View,android.view.ViewGroup)>
<com.android.browser.TabControl: com.android.browser.TabControl$OnThumbnailUpdatedListener getOnThumbnailUpdatedListener()>
<com.android.browser.TitleBar: android.webkit.WebView getCurrentWebView()>
<com.android.browser.view.BookmarkExpandableView: android.view.ContextMenu$ContextMenuInfo getContextMenuInfo()>
<com.android.browser.DateSortedExpandableListAdapter: long getLong(int)>
<com.android.browser.provider.BrowserProvider$MySuggestionCursor: double getDouble(int)>
<com.android.browser.DeviceAccountLogin: int getState()>
<com.android.browser.WebStorageSizeManager$StatFsDiskInfo: long getFreeSpaceSizeBytes()>
<com.android.browser.provider.SQLiteContentProvider: int bulkInsert(android.net.Uri,android.content.ContentValues[])>
<com.android.browser.Preloader: com.android.browser.PreloadedTabControl getPreloadedTab(java.lang.String)>
<com.android.browser.search.DefaultSearchEngine: java.lang.CharSequence getLabel()>
<com.android.browser.Tab: android.view.View getViewContainer()>
<com.android.browser.Controller: android.os.Bundle createSaveState()>
<com.android.browser.TabControl: com.android.browser.Tab getCurrentTab()>
<android.provider.Browser: java.lang.String[] getVisitedHistory(android.content.ContentResolver)>
<com.android.browser.provider.SQLiteContentProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>
<com.android.browser.search.SearchEngines: com.android.browser.search.SearchEngine get(android.content.Context,java.lang.String)>
<com.android.browser.provider.BrowserProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<com.android.browser.SuggestionsAdapter$CursorSource: int getCount()>
<com.android.browser.view.BookmarkExpandableView$BookmarkAccountAdapter: android.view.View getChildView(int,int,boolean,android.view.View,android.view.ViewGroup)>
<com.android.browser.Preloader$PreloaderSession: com.android.browser.PreloadedTabControl getTabControl()>
<com.android.browser.BaseUi: android.app.Activity getActivity()>
<com.android.browser.Tab: long getId()>
<com.android.browser.BrowserSettings: java.lang.String getLinkPrefetchAlwaysPreferenceString(android.content.Context)>
<com.android.browser.BrowserSettings: int getAdjustedDoubleTapZoom(int)>
<com.android.browser.preferences.WebsiteSettingsFragment$Site: android.graphics.Bitmap getIcon()>
<com.android.browser.BrowserHistoryPage$HistoryChildWrapper: java.lang.Object getItem(int)>
<com.android.browser.Tab: int getLoadProgress()>
<com.android.browser.Tab: java.lang.String getOriginalUrl()>
<com.android.browser.PieControl$TabAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.browser.BaseUi: android.graphics.Bitmap getDefaultVideoPoster()>
<com.android.browser.Tab: android.graphics.Bitmap getScreenshot()>
<com.android.browser.TabScrollView: int getScroll()>
<com.android.browser.view.PieItem: int getInnerRadius()>
<com.android.browser.view.PieItem: com.android.browser.view.PieMenu$PieView getPieView()>
<com.android.browser.BrowserBookmarksAdapter: java.lang.Object getRowObject(android.database.Cursor,java.lang.Object)>
<com.android.browser.search.DefaultSearchEngine: java.lang.String getName()>
<com.android.browser.PreloadController: android.graphics.Bitmap getDefaultVideoPoster()>
<com.android.browser.homepages.Template$HashMapEntityData: com.android.browser.homepages.Template$ListEntityIterator getListIterator(java.lang.String)>
<com.android.browser.view.PieItem: float getStart()>
<com.android.browser.search.OpenSearchSearchEngine$SuggestionsCursor: double getDouble(int)>
<com.android.browser.BrowserHistoryPage$HistoryAdapter: int getGroupCount()>
<com.android.browser.BrowserSettings: int getAdjustedMinimumFontSize(int)>
<com.android.browser.SnapshotTab: long getId()>
<com.android.browser.search.OpenSearchSearchEngine$SuggestionsCursor: int getCount()>
<com.android.browser.SuggestionsAdapter$SuggestionResults: int getLineCount()>
<com.android.browser.DataController: com.android.browser.DataController getInstance(android.content.Context)>
<com.android.browser.BrowserWebView: int getTitleHeight()>
<com.android.browser.addbookmark.FolderSpinnerAdapter: int getCount()>
<com.android.browser.search.OpenSearchSearchEngine$SuggestionsCursor: java.lang.String getString(int)>
<android.webkit.BrowserFrame: java.lang.String getUserAgentString()>
<com.android.browser.TabControl: android.webkit.WebView getCurrentWebView()>
<com.android.browser.SuggestionsAdapter$SuggestCursor: com.android.browser.SuggestionsAdapter$SuggestItem getItem()>
<com.android.browser.TabControl: com.android.browser.Tab createNewTab(boolean)>
<com.android.browser.addbookmark.FolderSpinnerAdapter: java.lang.Object getItem(int)>
<com.android.browser.Controller: java.util.List getTabs()>
<com.android.browser.view.BookmarkExpandableView: com.android.browser.BrowserBookmarksAdapter getChildAdapter(int)>
<com.android.browser.Tab: android.webkit.WebView getSubWebView()>
<com.android.browser.Tab: android.net.http.SslError getSslCertificateError()>
<com.android.browser.DateSortedExpandableListAdapter: int getGroupCount()>
<com.android.browser.NavScreen$TabAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.browser.search.OpenSearchSearchEngine$SuggestionsCursor: long getLong(int)>
<com.android.browser.BreadCrumbView: int getBaseline()>
<com.android.browser.BrowserSettings: int getDoubleTapZoom()>
<com.android.browser.BrowserSettings: int getMinimumFontSize()>
<com.android.browser.view.BookmarkExpandableView$BookmarkAccountAdapter: android.view.View getGroupView(int,boolean,android.view.View,android.view.ViewGroup)>
<com.android.browser.BookmarkItem: java.lang.String getUrl()>
<com.android.browser.provider.BrowserProvider$MySuggestionCursor: java.lang.String getString(int)>
<com.android.browser.PreloadController: com.android.browser.WebViewFactory getWebViewFactory()>
<com.android.browser.view.PieItem: int getLevel()>
<com.android.browser.homepages.HomeProvider: java.lang.String getType(android.net.Uri)>
<com.android.browser.widget.BookmarkThumbnailWidgetService$BookmarkFactory: android.widget.RemoteViews getLoadingView()>
<com.android.browser.TabControl: java.util.List getTabs()>
<com.android.browser.BrowserActivity: com.android.browser.Controller getController()>
<com.android.browser.Tab: java.lang.String getAppId()>
<android.nfc.INfcAdapterExtras$Stub$Proxy: java.lang.String getDriverName(java.lang.String)>
<com.android.nfc.NfcService$TagService: int getTimeout(int)>
<android.nfc.INfcTag$Stub: android.os.IBinder asBinder()>
<android.nfc.INfcTag$Stub$Proxy: int[] getTechList(int)>
<com.android.nfc.handover.HandoverManager: com.android.nfc.handover.HandoverManager$BluetoothHandoverData parse(android.nfc.NdefMessage)>
<android.nfc.INfcTag$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.android.nfc.NfcService: byte[] doTransceiveNoLock(int,byte[])>
<com.android.nfc.dhimpl.NativeNfcTag: byte[] transceive(byte[],boolean,int[])>
<android.nfc.NdefRecord: int getByteLength()>
<android.nfc.tech.IsoDep: int getMaxTransceiveLength()>
<com.android.nfc.NfcService$NfcAdapterService: android.nfc.INfcAdapterExtras getNfcAdapterExtrasInterface(java.lang.String)>
<com.android.nfc.handover.HandoverManager: android.nfc.NdefMessage createHandoverSelectMessage(boolean)>
<android.nfc.INdefPushCallback$Stub$Proxy: android.net.Uri[] getUris()>
<android.nfc.tech.NdefFormatable: byte[] transceive(byte[],boolean)>
<android.nfc.tech.Ndef: byte[] transceive(byte[],boolean)>
<com.android.nfc.P2pLinkManager: java.lang.String getMessageType(android.nfc.NdefMessage)>
<com.android.nfc.handover.HandoverManager: android.nfc.NdefRecord createBluetoothOobDataRecord()>
<com.android.nfc.handover.HandoverManager: android.nfc.NdefMessage createHandoverRequestMessage()>
<com.android.nfc.dhimpl.NativeNfcManager: com.android.nfc.DeviceHost$LlcpSocket createLlcpSocket(int,int,int,int)>
<com.android.nfc.dhimpl.NativeP2pDevice: byte[] getGeneralBytes()>
<com.android.nfc.handover.HandoverManager: com.android.nfc.handover.HandoverManager$BluetoothHandoverData parseBtOob(java.nio.ByteBuffer)>
<android.nfc.tech.NfcBarcode: android.nfc.Tag getTag()>
<android.nfc.Tag: java.lang.String[] getTechList()>
<android.nfc.INfcAdapter$Stub$Proxy: int getState()>
<android.nfc.Tag: byte[] getId()>
<android.nfc.tech.MifareUltralight: byte[] transceive(byte[],boolean)>
<android.nfc.tech.NfcF: byte[] transceive(byte[],boolean)>
<android.nfc.tech.NfcB: byte[] transceive(byte[],boolean)>
<com.android.nfc.handover.BluetoothOppHandover: java.lang.String getMimeTypeForUri(android.content.Context,android.net.Uri)>
<android.nfc.tech.NfcV: byte[] transceive(byte[],boolean)>
<com.android.nfc.dhimpl.NativeNfcManager: int getTimeout(int)>
<com.android.nfc.NfcService$NfcAdapterService: int getState()>
<android.nfc.tech.MifareClassic: byte[] transceive(byte[])>
<com.android.nfc.handover.HandoverManager: com.android.nfc.handover.HandoverManager$BluetoothHandoverData parseHandoverSelect(android.nfc.NdefMessage)>
<android.nfc.tech.MifareClassic: android.nfc.tech.MifareClassic get(android.nfc.Tag)>
<com.android.nfc.snep.SnepMessage: byte getVersion()>
<com.android.nfc.handover.HandoverManager: com.android.nfc.handover.HandoverManager$BluetoothHandoverData parseNokia(java.nio.ByteBuffer)>
<android.nfc.NdefRecord: byte[] getPayload()>
<android.nfc.tech.NfcB: byte[] getProtocolInfo()>
<android.nfc.tech.NfcBarcode: byte[] getBarcode()>
<android.nfc.tech.IsoDep: byte[] transceive(byte[],boolean)>
<android.nfc.INfcTag$Stub$Proxy: android.nfc.NdefMessage ndefRead(int)>
<android.nfc.tech.Ndef: android.nfc.NdefMessage getCachedNdefMessage()>
<android.nfc.NdefMessage: android.nfc.NdefRecord[] getRecords()>
<com.android.nfc.dhimpl.NativeLlcpConnectionlessSocket: int getSap()>
<android.nfc.Tag: byte[] readBytesWithNull(android.os.Parcel)>
<com.android.nfc.dhimpl.NativeLlcpConnectionlessSocket: int getHandle()>
<android.nfc.NfcAdapter: android.content.Context getContext()>
<android.nfc.tech.MifareClassic: int getSize()>
<android.nfc.tech.MifareClassic: int getBlockCountInSector(int)>
<com.android.nfc.NfcService$NfcAdapterExtrasService: java.lang.String getDriverName(java.lang.String)>
<android.nfc.TransceiveResult: byte[] getResponseOrThrow()>
<com.android.nfc.NfcDispatcher: android.content.Intent getAppSearchIntent(java.lang.String)>
<android.nfc.NfcManager: android.nfc.NfcAdapter getDefaultAdapter()>
<android.nfc.INfcTag$Stub$Proxy: android.nfc.TransceiveResult transceive(int,byte[],boolean)>
<com.android.nfc.NfcService$NfcAdapterService: android.nfc.INfcTag getNfcTagInterface()>
<android.nfc.tech.NfcV: byte getDsfId()>
<com.android.nfc.dhimpl.NativeP2pDevice: byte[] transceive(byte[])>
<android.nfc.INfcAdapterExtras$Stub$Proxy: int getCardEmulationRoute(java.lang.String)>
<com.android.nfc.dhimpl.NativeP2pDevice: byte[] receive()>
<android.nfc.tech.MifareClassic: int getBlockCount()>
<android.nfc.tech.Ndef: android.nfc.Tag getTag()>
<com.android.nfc.dhimpl.NativeNfcManager: com.android.nfc.DeviceHost$LlcpConnectionlessSocket createLlcpConnectionlessSocket(int,java.lang.String)>
<android.nfc.tech.Ndef: android.nfc.tech.Ndef get(android.nfc.Tag)>
<android.nfc.tech.NfcV: byte getResponseFlags()>
<android.nfc.tech.NfcV: byte[] transceive(byte[])>
<android.nfc.tech.NfcF: byte[] transceive(byte[])>
<android.nfc.tech.NfcA: byte[] transceive(byte[])>
<android.nfc.tech.NfcB: byte[] transceive(byte[])>
<android.nfc.NfcActivityManager: android.nfc.NfcActivityManager$NfcActivityState findResumedActivityState()>
<android.nfc.tech.MifareUltralight: android.nfc.tech.MifareUltralight get(android.nfc.Tag)>
<android.nfc.NfcAdapter: int getSdkVersion()>
<com.android.nfc.handover.HandoverManager: com.android.nfc.handover.PendingHandoverTransfer registerInTransferLocked(android.bluetooth.BluetoothDevice)>
<com.android.nfc.snep.SnepMessage: com.android.nfc.snep.SnepMessage getGetRequest(int,android.nfc.NdefMessage)>
<android.nfc.tech.NfcA: int getTimeout()>
<com.android.nfc.handover.HandoverTransfer: int getTransferId()>
<android.nfc.tech.NfcF: int getTimeout()>
<com.android.nfc.RegisteredComponentCache: java.util.ArrayList getComponents()>
<android.nfc.tech.NfcA: int getMaxTransceiveLength()>
<android.nfc.tech.NfcF: int getMaxTransceiveLength()>
<android.nfc.tech.NfcB: int getMaxTransceiveLength()>
<android.nfc.NfcAdapter: android.nfc.NfcAdapter getDefaultAdapter(android.content.Context)>
<android.nfc.tech.NfcV: int getMaxTransceiveLength()>
<android.nfc.INfcAdapterExtras$Stub$Proxy: android.os.Bundle transceive(java.lang.String,byte[])>
<android.nfc.tech.NdefFormatable: android.nfc.tech.NdefFormatable get(android.nfc.Tag)>
<android.nfc.tech.MifareUltralight: android.nfc.Tag getTag()>
<android.nfc.NdefRecord: byte[] toByteArray()>
<com.android.nfc.dhimpl.NativeLlcpSocket: int getRemoteRw()>
<android.nfc.tech.MifareClassic: int getMaxTransceiveLength()>
<com.android.nfc.dhimpl.NativeNfcManager: com.android.nfc.DeviceHost$LlcpServerSocket createLlcpServerSocket(int,java.lang.String,int,int,int)>
<android.nfc.tech.NfcB: android.nfc.Tag getTag()>
<android.nfc.tech.NfcA: android.nfc.Tag getTag()>
<android.nfc.tech.NfcF: android.nfc.Tag getTag()>
<android.nfc.tech.NfcV: android.nfc.Tag getTag()>
<android.nfc.tech.Ndef: java.lang.String getType()>
<android.nfc.INdefPushCallback$Stub$Proxy: android.nfc.NdefMessage createMessage()>
<android.nfc.tech.NfcA: short getSak()>
<android.nfc.tech.NfcA: byte[] getAtqa()>
<com.android.nfc.handover.HandoverManager: byte[] addressToReverseBytes(java.lang.String)>
<com.android.nfc.dhimpl.NativeNfcTag: int[] getTechList()>
<com.android.nfc.dhimpl.NativeNfcManager: byte[][] getWipeApdus()>
<android.nfc.tech.BasicTagTechnology: android.nfc.Tag getTag()>
<android.nfc.tech.NfcV: android.nfc.tech.NfcV get(android.nfc.Tag)>
<android.nfc.NdefMessage: int getByteArrayLength()>
<com.android.nfc.NfcDispatcher$DispatchInfo: android.content.Intent setTagIntent()>
<com.android.nfc.handover.HandoverManager: android.nfc.NdefRecord createHandoverSelectRecord(boolean)>
<android.nfc.tech.NfcF: byte[] getSystemCode()>
<com.android.nfc.dhimpl.NativeLlcpSocket: int getLocalMiu()>
<com.android.nfc.SendUi: float getDegreesForRotation(int)>
<android.nfc.tech.IsoDep: byte[] getHistoricalBytes()>
<com.android.nfc.NfcService: com.android.nfc.DeviceHost$LlcpSocket createLlcpSocket(int,int,int,int)>
<android.nfc.tech.IsoDep: android.nfc.Tag getTag()>
<com.android.nfc.NfcService: com.android.nfc.NfcService getInstance()>
<android.nfc.NfcActivityManager: android.net.Uri[] getUris()>
<com.android.nfc.handover.HandoverManager: android.nfc.NdefMessage tryHandoverRequest(android.nfc.NdefMessage)>
<android.nfc.TechListParcel: java.lang.String[][] getTechLists()>
<com.android.nfc.dhimpl.NativeLlcpSocket: int getRemoteMiu()>
<android.nfc.NdefMessage: byte[] toByteArray()>
<com.android.nfc.snep.SnepMessage: byte getField()>
<android.nfc.tech.NfcBarcode: int getType()>
<com.android.nfc.dhimpl.NativeNfcTag: int getHandle()>
<android.nfc.Tag: android.nfc.INfcTag getTagService()>
<android.nfc.tech.NfcF: android.nfc.tech.NfcF get(android.nfc.Tag)>
<android.nfc.tech.NfcB: android.nfc.tech.NfcB get(android.nfc.Tag)>
<android.nfc.INfcAdapterExtras$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.nfc.tech.NfcA: android.nfc.tech.NfcA get(android.nfc.Tag)>
<android.nfc.tech.MifareUltralight: byte[] transceive(byte[])>
<com.android.nfc.snep.SnepMessage: android.nfc.NdefMessage getNdefMessage()>
<com.android.nfc.dhimpl.NativeLlcpConnectionlessSocket: int getLinkMiu()>
<android.nfc.NfcAdapter: android.nfc.INfcAdapterExtras getNfcAdapterExtrasInterface()>
<android.nfc.NdefRecord: android.nfc.NdefRecord createUri(java.lang.String)>
<com.android.nfc.snep.SnepMessage: com.android.nfc.snep.SnepMessage getSuccessResponse(android.nfc.NdefMessage)>
<android.nfc.NfcAdapter: android.nfc.NfcAdapter getNfcAdapter(android.content.Context)>
<com.android.nfc.P2pLinkManager: int getMessageAarPresent(android.nfc.NdefMessage)>
<com.android.nfc.dhimpl.NativeNfcManager: java.lang.String dump()>
<android.nfc.NfcActivityManager: android.nfc.NfcActivityManager$NfcActivityState findActivityState(android.app.Activity)>
<android.nfc.NfcAdapter: android.nfc.INfcAdapter getService()>
<android.nfc.tech.MifareClassic: byte[] readBlock(int)>
<android.nfc.tech.MifareClassic: int getTimeout()>
<android.nfc.tech.IsoDep: byte[] getHiLayerResponse()>
<android.nfc.tech.IsoDep: byte[] transceive(byte[])>
<com.android.nfc.P2pLinkManager: android.nfc.NdefMessage createDefaultNdef(java.lang.String)>
<android.nfc.INfcAdapter$Stub: android.os.IBinder asBinder()>
<android.nfc.tech.IsoDep: int getTimeout()>
<android.nfc.tech.MifareClassic: byte[] transceive(byte[],boolean)>
<android.nfc.INfcTag$Stub$Proxy: boolean isPresent(int)>
<com.android.nfc.LlcpPacket: byte[] getDataBuffer()>
<com.android.nfc.dhimpl.NativeNfcTag: byte[] getUid()>
<com.android.nfc.dhimpl.NativeLlcpSocket: int getLocalSap()>
<android.nfc.tech.IsoDep: android.nfc.tech.IsoDep get(android.nfc.Tag)>
<android.nfc.INfcAdapter$Stub$Proxy: android.nfc.INfcTag getNfcTagInterface()>
<com.android.nfc.dhimpl.NativeNfcTag: byte[] readNdef()>
<com.android.nfc.snep.SnepClient: com.android.nfc.snep.SnepMessage get(android.nfc.NdefMessage)>
<android.nfc.INfcAdapter$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.nfc.INfcAdapterExtras$Stub: android.os.IBinder asBinder()>
<android.nfc.INdefPushCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.android.nfc.dhimpl.NativeP2pDevice: int getMode()>
<android.nfc.NfcAdapter: android.nfc.NfcAdapter getDefaultAdapter()>
<android.nfc.tech.NfcF: byte[] getManufacturer()>
<com.android.nfc.SendUi: android.graphics.Bitmap createScreenshot()>
<com.android.nfc.handover.HandoverManager: android.nfc.NdefRecord createHandoverRequestRecord()>
<android.nfc.tech.BasicTagTechnology: int getMaxTransceiveLengthInternal()>
<com.android.nfc.ndefpush.NdefPushProtocol: byte[] toByteArray()>
<com.android.nfc.handover.HandoverManager: android.nfc.NdefRecord createCollisionRecord()>
<com.android.nfc.snep.SnepMessenger: com.android.nfc.snep.SnepMessage getMessage()>
<android.nfc.tech.MifareUltralight: int getType()>
<com.android.nfc.snep.SnepMessage: byte[] toByteArray()>
<android.nfc.NfcActivityManager: android.nfc.NfcActivityManager$NfcActivityState getActivityState(android.app.Activity)>
<com.android.nfc.P2pLinkManager: int getMessageTnf(android.nfc.NdefMessage)>
<android.nfc.tech.Ndef: android.nfc.NdefMessage getNdefMessage()>
<com.android.nfc.NfcService: com.android.nfc.DeviceHost$LlcpServerSocket createLlcpServerSocket(int,java.lang.String,int,int,int)>
<com.android.nfc.dhimpl.NativeNfcTag: int getConnectedTechnology()>
<com.android.nfc.dhimpl.NativeP2pDevice: int getHandle()>
<android.nfc.tech.NdefFormatable: android.nfc.Tag getTag()>
<android.nfc.tech.NfcB: byte[] getApplicationData()>
<com.android.nfc.snep.SnepMessage: com.android.nfc.snep.SnepMessage getMessage(byte)>
<com.android.nfc.NfcDispatcher$DispatchInfo: android.content.Intent setTechIntent()>
<android.nfc.INfcAdapterExtras$Stub$Proxy: android.os.Bundle close(java.lang.String,android.os.IBinder)>
<com.android.nfc.snep.SnepMessage: int getLength()>
<android.nfc.INfcTag$Stub$Proxy: android.nfc.Tag rediscover(int)>
<com.android.nfc.dhimpl.NativeNfcManager: int getDefaultLlcpRwSize()>
<com.android.nfc.NfcService$TagService: int getMaxTransceiveLength(int)>
<android.nfc.tech.MifareClassic: android.nfc.Tag getTag()>
<android.nfc.INfcTag$Stub$Proxy: int getMaxTransceiveLength(int)>
<android.nfc.tech.MifareClassic: int getType()>
<com.android.nfc.handover.BluetoothHeadsetHandover: boolean getProfileProxys()>
<com.android.nfc.NfcService: com.android.nfc.DeviceHost$LlcpConnectionlessSocket createLlcpConnectionLessSocket(int,java.lang.String)>
<android.nfc.Tag: int getServiceHandle()>
<android.nfc.NfcAdapter: android.nfc.INfcTag getTagService()>
<android.nfc.tech.BasicTagTechnology: byte[] transceive(byte[],boolean)>
<com.android.nfc.dhimpl.NativeNfcManager: boolean getExtendedLengthApdusSupported()>
<com.android.nfc.dhimpl.NativeLlcpSocket: int getLocalRw()>
<com.android.nfc.dhimpl.NativeNfcManager: int getMaxTransceiveLength(int)>
<android.nfc.tech.NfcBarcode: android.nfc.tech.NfcBarcode get(android.nfc.Tag)>
<com.android.nfc.ndefpush.NdefPushProtocol: android.nfc.NdefMessage getImmediate()>
<android.nfc.NdefRecord: byte[] getType()>
<android.nfc.INfcTag$Stub$Proxy: int getTimeout(int)>
<android.nfc.INdefPushCallback$Stub: android.os.IBinder asBinder()>
<android.nfc.Tag: int getConnectedTechnology()>
<com.android.nfc.handover.HandoverManager: android.nfc.NdefRecord createBluetoothAlternateCarrierRecord(boolean)>
<android.nfc.NdefRecord: byte[] getId()>
<com.android.nfc.NfcService: byte[] doTransceive(int,byte[])>
<com.android.nfc.handover.HandoverManager: com.android.nfc.handover.PendingHandoverTransfer registerOutTransferLocked(com.android.nfc.handover.HandoverManager$BluetoothHandoverData,android.net.Uri[])>
<com.android.nfc.dhimpl.NativeNfcTag: android.os.Bundle[] getTechExtras()>
<com.android.nfc.snep.SnepMessage: int getAcceptableLength()>
<android.nfc.tech.MifareUltralight: int getTimeout()>
<android.nfc.tech.Ndef: int getMaxSize()>
<android.nfc.tech.MifareUltralight: byte[] readPages(int)>
<android.nfc.INfcAdapter$Stub$Proxy: android.nfc.INfcAdapterExtras getNfcAdapterExtrasInterface(java.lang.String)>
<com.android.nfc.dhimpl.NativeNfcManager: java.lang.String getName()>
<com.android.nfc.dhimpl.NativeNfcManager: int getDefaultLlcpMiu()>
<com.android.nfc.snep.SnepMessage: com.android.nfc.snep.SnepMessage getPutRequest(android.nfc.NdefMessage)>
<android.nfc.INfcTag$Stub$Proxy: boolean isNdef(int)>
<android.nfc.tech.MifareClassic: int getSectorCount()>
<android.nfc.NfcAdapter: int getAdapterState()>
<com.android.nfc.LlcpPacket: int getRemoteSap()>
<android.nfc.NdefRecord: short getTnf()>
<android.nfc.Tag: android.os.Bundle getTechExtras(int)>
<com.android.nfc.NfcService$NfcAdapterExtrasService: int getCardEmulationRoute(java.lang.String)>
<com.android.nfc.NfcService$TagService: int[] getTechList(int)>
<android.nfc.NfcActivityManager: android.nfc.NfcActivityManager$NfcApplicationState findAppState(android.app.Application)>
<com.android.nfc.P2pLinkManager: int getMessageSize(android.nfc.NdefMessage)>
<android.nfc.NfcActivityManager: android.nfc.NdefMessage createMessage()>
<android.nfc.tech.MifareUltralight: int getMaxTransceiveLength()>
<android.view.Window: android.view.Window$Callback getCallback()>
<com.android.emailcommon.utility.Utility$4: java.lang.Integer get(android.database.Cursor,int)>
<com.android.commands.monkey.MonkeySourceRandom: com.android.commands.monkey.MonkeyEvent getNextEvent()>
<com.android.mms.dom.smil.SmilMediaElementImpl: short getFill()>
<android.widget.GridLayout$Axis: android.widget.GridLayout$PackedMap getGroupBounds()>
<android.text.style.SuperscriptSpan: int getSpanTypeId()>
<android.content.res.XmlBlock$Parser: java.lang.String getText()>
<android.media.videoeditor.MediaProperties: int[] getSupportedAudioCodecs()>
<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getApplicationIcon(java.lang.String)>
<android.gesture.Gesture: android.graphics.Bitmap toBitmap(int,int,int,int,int)>
<android.provider.MediaStore$Video: android.database.Cursor query(android.content.ContentResolver,android.net.Uri,java.lang.String[])>
<android.media.AudioTrack: int getNativeOutputSampleRate(int)>
<android.app.WallpaperManager: android.app.IWallpaperManager getIWallpaperManager()>
<android.widget.RemoteViewsAdapter: int getViewTypeCount()>
<android.webkit.WebViewClassic: int getWidth()>
<com.android.providers.telephony.MmsSmsProvider: java.lang.String getType(android.net.Uri)>
<android.graphics.drawable.LayerDrawable: int getIntrinsicWidth()>
<android.content.res.Resources: java.lang.CharSequence getText(int)>
<com.google.android.picasasync.UploadTaskEntry: int getState()>
<android.content.pm.IPackageManager$Stub$Proxy: java.util.List queryIntentReceivers(android.content.Intent,java.lang.String,int,int)>
<com.android.email.activity.MessageCompose$ActionSpinnerAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)>
<com.google.android.gms.common.internal.IGmsCallbacks$Stub: android.os.IBinder asBinder()>
<android.os.WorkSource: int get(int)>
<android.webkit.WebViewClassic$Factory: android.webkit.WebViewFactoryProvider$Statics getStatics()>
<android.hardware.SystemSensorManager: java.util.List getFullSensorList()>
<com.android.inputmethod.latin.RichInputConnection: int getCursorCapsMode(int,java.util.Locale,boolean)>
<com.google.android.apps.lightcycle.camera.CameraUtility: com.google.android.apps.lightcycle.util.Size getPhotoSize()>
<com.google.android.picasasync.PicasaJsonReaderParser$BooleanObjectField: int getValue(boolean)>
<com.android.inputmethod.latin.LogEntries$DeviceInfoEntry: java.lang.String[] getLogStrings()>
<android.text.StaticLayout: android.text.Layout$Directions getLineDirections(int)>
<android.content.Intent: char getCharExtra(java.lang.String,char)>
<com.android.uiautomator.testrunner.UiAutomatorTestCase: com.android.uiautomator.testrunner.IAutomationSupport getAutomationSupport()>
<com.android.videoeditor.service.MovieTransition: int getBehavior()>
<com.android.server.Watchdog: com.android.server.Watchdog getInstance()>
<com.android.inputmethod.keyboard.internal.KeyStylesSet$EmptyKeyStyle: java.lang.String[] getStringArray(android.content.res.TypedArray,int)>
<com.android.inputmethod.compat.CompatUtils: android.content.Intent getInputLanguageSelectionIntent(java.lang.String,int)>
<android.webkit.WebView$PrivateAccess: float getVerticalScrollFactor()>
<com.android.org.bouncycastle.util.encoders.Base64: byte[] encode(byte[])>
<android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateStubImpl: android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(java.lang.Object,android.view.View)>
<android.widget.OverScroller: int getCurrY()>
<android.widget.OverScroller: int getCurrX()>
<android.webkit.ViewManager: java.util.ArrayList access$300(android.webkit.ViewManager)>
<android.content.ContentProvider$Transport: android.os.ICancellationSignal createCancellationSignal()>
<android.text.method.DateTimeKeyListener: char[] getAcceptedChars()>
<com.android.internal.app.ActionBarImpl: android.content.Context getThemedContext()>
<android.webkit.WebViewClassic$Factory: android.webkit.CookieManager getCookieManager()>
<com.android.camera.Util: int getJpegRotation(int,int)>
<android.hardware.ISerialManager$Stub: android.os.IBinder asBinder()>
<android.sax.BadXmlException: java.lang.String getMessage()>
<android.content.ContentValues: java.lang.String getAsString(java.lang.String)>
<android.widget.ListPopupWindow: int getPromptPosition()>
<com.android.org.bouncycastle.asn1.DERUTF8String: java.lang.String getString()>
<android.widget.PopupWindow: int getSoftInputMode()>
<android.mtp.MtpDevice: byte[] getThumbnail(int)>
<android.os.storage.IMountShutdownObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.webkit.WebSettingsClassic: boolean getAllowContentAccess()>
<com.android.org.bouncycastle.util.io.pem.PemObject: byte[] getContent()>
<com.android.org.bouncycastle.asn1.ASN1Set$1: com.android.org.bouncycastle.asn1.ASN1Primitive getLoadedObject()>
<android.os.Bundle: int getInt(java.lang.String,int)>
<android.media.MediaRouter: android.media.MediaRouter$RouteInfo getRouteAtStatic(int)>
<com.android.org.bouncycastle.util.encoders.Hex: byte[] decode(java.lang.String)>
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getJpegThumbnailSize()>
<android.widget.PopupMenu: android.view.MenuInflater getMenuInflater()>
<android.webkit.ZoomManager: float getMaxZoomScale()>
<android.view.animation.LayoutAnimationController: int getTransformedIndex(android.view.animation.LayoutAnimationController$AnimationParameters)>
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int,int)>
<android.widget.GridLayout: int getRowCount()>
<com.android.inputmethod.keyboard.internal.KeyboardIconsSet: android.graphics.drawable.Drawable getIconDrawable(int)>
<com.android.videoeditor.util.MediaItemUtils: long getMinimumImageItemDuration()>
<com.android.i18n.phonenumbers.geocoding.AreaCodeMap: com.android.i18n.phonenumbers.geocoding.AreaCodeMapStorageStrategy getSmallerMapStorage(java.util.SortedMap)>
<com.google.android.picasasync.PicasaSyncManager: com.google.android.picasasync.PicasaSyncManager get(android.content.Context)>
<com.android.mms.util.ThumbnailManager: com.android.mms.util.ItemLoadedFuture getVideoThumbnail(android.net.Uri,com.android.mms.util.ItemLoadedCallback)>
<android.mtp.MtpStorageInfo: long getFreeSpace()>
<com.android.emailcommon.mail.Multipart: int getCount()>
<android.media.audiofx.Equalizer: short getBand(int)>
<com.android.internal.view.menu.MenuItemImpl: char getShortcut()>
<com.android.internal.widget.ActionBarView: int getDropdownSelectedPosition()>
<android.content.IntentFilter$AuthorityEntry: java.lang.String getHost()>
<com.android.mms.dom.smil.SmilParElementImpl: org.w3c.dom.smil.TimeList getBegin()>
<android.content.ClipDescription: java.lang.String getMimeType(int)>
<com.android.videoeditor.service.MovieTheme: int getNameResId()>
<android.filterfw.core.FilterPort: java.lang.String getName()>
<android.hardware.usb.UsbDevice: int getDeviceId(java.lang.String)>
<android.view.View: int getScrollBarSize()>
<android.graphics.Bitmap: int getByteCount()>
<com.android.uiautomator.core.QueryController: java.lang.String getCurrentActivityName()>
<android.widget.TextView: int getTopPaddingOffset()>
<android.media.audiofx.Virtualizer: android.media.audiofx.Virtualizer$Settings getProperties()>
<android.content.ContextWrapper: android.content.pm.ApplicationInfo getApplicationInfo()>
<com.android.phone.sip.SipEditor$PreferenceKey: java.lang.String getValue()>
<com.android.deskclock.AlarmPreference: android.net.Uri getAlert()>
<android.widget.RemoteViews$SetOnClickPendingIntent: java.lang.String getActionName()>
<com.google.android.apps.lightcycle.opengl.DeviceOrientedSprite$1: android.graphics.PointF getPosition(com.google.android.apps.lightcycle.sensor.DeviceOrientationDetector$DeviceOrientation)>
<android.view.animation.Animation: int getZAdjustment()>
<android.app.WallpaperManager: android.graphics.Bitmap getBitmap()>
<android.filterfw.core.Filter: int getStatus()>
<android.hardware.usb.UsbDevice: int getDeviceClass()>
<android.webkit.WebBackForwardListClassic: int getSize()>
<android.filterfw.core.FilterContext: android.filterfw.core.GLEnvironment getGLEnvironment()>
<android.widget.GridLayout: int getMargin1(android.view.View,boolean,boolean)>
<android.widget.AbsListView: int findClosestMotionRow(int)>
<android.app.Activity: android.database.Cursor managedQuery(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String)>
<android.app.WallpaperManager: android.app.WallpaperManager getInstance(android.content.Context)>
<android.provider.Settings$System: float getFloatForUser(android.content.ContentResolver,java.lang.String,float,int)>
<com.android.videoeditor.service.MovieTransition: int getType()>
<android.accounts.AuthenticatorDescription: java.lang.String toString()>
<android.view.accessibility.AccessibilityRecord: java.lang.CharSequence getClassName()>
<android.view.VelocityTracker: float getXVelocity(int)>
<com.android.emailcommon.utility.Utility$3: java.lang.Long get(android.database.Cursor,int)>
<android.view.View: float getTopFadingEdgeStrength()>
<android.net.Proxy: org.apache.http.conn.routing.HttpRoutePlanner getAndroidProxySelectorRoutePlanner(android.content.Context)>
<com.android.org.bouncycastle.asn1.DEROutputStream: com.android.org.bouncycastle.asn1.ASN1OutputStream getDLSubStream()>
<android.app.LoaderManagerImpl: android.content.Loader initLoader(int,android.os.Bundle,android.app.LoaderManager$LoaderCallbacks)>
<com.android.email.mail.store.imap.ImapString$1: java.io.InputStream getAsStream()>
<com.android.mms.ui.MessageItem: java.lang.CharSequence getCachedFormattedMessage()>
<com.android.org.bouncycastle.asn1.ASN1Sequence: com.android.org.bouncycastle.asn1.ASN1Encodable getObjectAt(int)>
<android.graphics.drawable.NinePatchDrawable: android.graphics.Region getTransparentRegion()>
<android.view.ViewConfiguration: int getScaledMaximumDrawingCacheSize()>
<android.webkit.WebSettings: android.webkit.WebSettings$LayoutAlgorithm getLayoutAlgorithm()>
<com.android.internal.view.IInputMethodSession$Stub: android.os.IBinder asBinder()>
<android.widget.RemoteViewsAdapter: int getCount()>
<android.os.Bundle: java.util.ArrayList getCharSequenceArrayList(java.lang.String)>
<android.renderscript.Program: android.renderscript.Program$TextureType getTextureType(int)>
<android.view.accessibility.AccessibilityNodeProvider: java.util.List findAccessibilityNodeInfosByText(java.lang.String,int)>
<android.media.Metadata: java.lang.String getString(int)>
<android.content.ContentProviderOperation: int getType()>
<android.webkit.WebStorage: android.webkit.WebStorage getInstance()>
<com.android.commands.monkey.MonkeySourceRandom: int getKeyCode(java.lang.String)>
<android.text.style.AbsoluteSizeSpan: int getSpanTypeId()>
<android.content.IClipboard$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.android.launcher2.DragLayer$LayoutParams: int getHeight()>
<android.content.pm.ContainerEncryptionParams: java.lang.String getMacAlgorithm()>
<android.renderscript.Element: android.renderscript.Element$DataKind getDataKind()>
<com.google.android.apps.lightcycle.opengl.Sprite: int getHeight()>
<android.accounts.IAccountAuthenticatorResponse$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromResourceStream(android.content.res.Resources,android.util.TypedValue,java.io.InputStream,java.lang.String)>
<android.media.RemoteControlClient: android.app.PendingIntent getRcMediaIntent()>
<android.preference.DialogPreference: java.lang.CharSequence getNegativeButtonText()>
<android.widget.ActivityChooserModel: android.content.Intent getIntent()>
<android.preference.PreferenceActivity$Header: java.lang.CharSequence getBreadCrumbTitle(android.content.res.Resources)>
<com.android.server.am.AppErrorResult: int get()>
<android.hardware.input.IInputDevicesChangedListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.webkit.WebSettings: java.lang.String getUserAgentString()>
<com.android.internal.widget.ActionBarContainer: android.view.View getTabContainer()>
<android.widget.TextView: int getGravity()>
<com.android.videoeditor.util.StringUtils: java.lang.String getSimpleTimestampAsString(android.content.Context,long)>
<com.android.server.connectivity.Vpn: android.os.ParcelFileDescriptor establish(com.android.internal.net.VpnConfig)>
<android.app.ApplicationPackageManager: android.content.pm.ResolveInfo resolveActivityAsUser(android.content.Intent,int,int)>
<com.android.mms.transaction.DefaultRetryScheme: long getWaitingInterval()>
<android.view.accessibility.AccessibilityRecord: java.util.List getText()>
<android.webkit.WebViewClassic: android.content.Context getContext()>
<android.provider.Settings$Bookmarks: android.content.Intent getIntentForShortcut(android.content.ContentResolver,char)>
<android.os.MemoryFile: int getSize(java.io.FileDescriptor)>
<android.media.AudioRecord: int getRecordingState()>
<com.android.inputmethod.keyboard.internal.KeyStylesSet$DeclaredKeyStyle: java.lang.String[] getStringArray(android.content.res.TypedArray,int)>
<com.android.uiautomator.testrunner.UiAutomatorTestRunner: com.android.uiautomator.testrunner.TestCaseCollector getTestCaseCollector(java.lang.ClassLoader)>
<com.android.internal.widget.multiwaveview.TargetDrawable: int getHeight()>
<android.gesture.GestureLibrary: int getOrientationStyle()>
<android.filterfw.core.VertexFrame: int getVboId()>
<com.android.camera.PhotoModule$ImageNamer: java.lang.String getTitle()>
<android.media.videoeditor.MediaImageItem: java.lang.String getGeneratedImageClip()>
<com.android.internal.policy.impl.GlobalActions$GlobalActionsDialog: android.widget.ListView getListView()>
<com.android.inputmethod.latin.SubtypeSwitcher: java.util.Locale getCurrentSubtypeLocale()>
<android.widget.GridLayout$Axis: android.widget.GridLayout$Arc[] getArcs()>
<com.android.videoeditor.service.MovieAudioTrack: long getBoundaryEndTime()>
<com.android.videoeditor.service.MovieTheme: com.android.videoeditor.service.MovieTransition getEndTransition()>
<android.provider.Settings$System: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)>
<android.graphics.drawable.LayerDrawable: int getIntrinsicHeight()>
<com.android.server.wm.WindowState: android.graphics.RectF getShownFrameLw()>
<android.widget.ListPopupWindow: android.widget.ListView getListView()>
<com.android.internal.appwidget.IAppWidgetHost$Stub: android.os.IBinder asBinder()>
<com.android.server.pm.Settings: com.android.server.pm.SharedUserSetting getSharedUserLPw(java.lang.String,int,boolean)>
<com.android.videoeditor.TransitionsAdapter: com.android.videoeditor.TransitionType[] getTransitions()>
<android.hardware.usb.UsbDeviceConnection: int getFileDescriptor()>
<android.webkit.WebHistoryItem: int getId()>
<android.widget.AdapterView: int getSelectedItemPosition()>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$NumberFormat getNumberFormat(int)>
<com.android.ex.chips.RecipientEntry: byte[] getPhotoBytes()>
<android.graphics.drawable.ShapeDrawable$ShapeState: int getChangingConfigurations()>
<com.android.server.usb.UsbHostManager: void getDeviceList(android.os.Bundle)>
<android.view.FocusFinder: android.view.View findNextFocusInAbsoluteDirection(java.util.ArrayList,android.view.ViewGroup,android.view.View,android.graphics.Rect,int)>
<com.google.android.picasasync.PicasaDatabaseHelper: long getUserId(java.lang.String)>
<android.app.ActivityManagerProxy: java.util.List getRunningAppProcesses()>
<android.widget.AbsListView: android.util.SparseBooleanArray getCheckedItemPositions()>
<com.android.internal.view.IInputMethodManager$Stub$Proxy: java.util.List getEnabledInputMethodList()>
<com.android.deskclock.Utils: long getTimeNow()>
<android.hardware.Camera$Parameters: java.lang.String getFocusMode()>
<android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityRecord getRecord(int)>
<com.android.email.mail.store.ExchangeStore: java.lang.Class getSettingActivityClass()>
<android.widget.AbsListView: android.view.ContextMenu$ContextMenuInfo getContextMenuInfo()>
<android.hardware.input.IInputDevicesChangedListener$Stub: android.os.IBinder asBinder()>
<android.filterfw.core.FilterPort: android.filterfw.core.Filter getFilter()>
<android.webkit.WebView: int getContentHeight()>
<android.filterfw.format.PrimitiveFormat: android.filterfw.core.MutableFrameFormat createByteFormat(int,int)>
<com.android.org.bouncycastle.asn1.ASN1Set: java.lang.String toString()>
<com.android.inputmethod.compat.InputMethodManagerCompatWrapper: com.android.inputmethod.compat.InputMethodManagerCompatWrapper getInstance()>
<android.widget.AutoCompleteTextView: android.widget.AdapterView$OnItemClickListener getOnItemClickListener()>
<com.android.launcher2.LauncherApplication: int getLongPressTimeout()>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadataCollection: int getMetadataCount()>
<android.view.KeyCharacterMap: android.view.KeyEvent[] getEvents(char[])>
<android.graphics.drawable.Drawable: android.graphics.Rect copyBounds()>
<com.android.server.ServiceWatcher: java.util.ArrayList getSignatureSets(android.content.Context,java.util.List)>
<android.filterpacks.imageproc.ContrastFilter: android.filterfw.core.Program getNativeProgram(android.filterfw.core.FilterContext)>
<com.android.server.AppWidgetService: java.util.List getInstalledProviders(int)>
<com.android.mms.dom.ElementImpl: java.lang.String getTagName()>
<android.filterfw.core.SerializedFrame: float[] getFloats()>
<android.webkit.WebViewDatabaseClassic: java.util.ArrayList getFormData(java.lang.String,java.lang.String)>
<com.android.ex.chips.Queries$Query: java.lang.String[] getProjection()>
<android.filterfw.core.NativeFrame: float[] getFloats()>
<com.android.internal.backup.IBackupTransport$Stub$Proxy: int getRestoreData(android.os.ParcelFileDescriptor)>
<com.android.mms.dom.events.EventImpl: java.lang.String getType()>
<android.widget.AutoCompleteTextView: int getDropDownVerticalOffset()>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getPremiumRate()>
<com.android.videoeditor.OverlaysAdapter: java.lang.Object getItem(int)>
<android.widget.RemoteViewsAdapter$RemoteViewsMetaData: int getMappedViewType(int)>
<com.android.org.bouncycastle.asn1.BEROctetStringParser: com.android.org.bouncycastle.asn1.ASN1Primitive getLoadedObject()>
<android.view.View: android.view.Display getDisplay()>
<com.android.deskclock.widget.multiwaveview.Ease$Cubic$2: float getInterpolation(float)>
<com.android.deskclock.widget.multiwaveview.Ease$Cubic$1: float getInterpolation(float)>
<com.android.deskclock.widget.multiwaveview.Ease$Cubic$3: float getInterpolation(float)>
<android.media.videoeditor.MediaItem: android.media.videoeditor.Overlay getOverlay(java.lang.String)>
<android.animation.Animator: android.animation.Animator clone()>
<com.android.internal.content.PackageHelper: java.lang.String[] getSecureContainerList()>
<com.android.mms.ui.UriImage: java.lang.String getSrc()>
<com.google.android.apps.lightcycle.panorama.LightCycleView: com.google.android.apps.lightcycle.camera.CameraPreview getCameraPreview()>
<android.webkit.CookieManagerClassic: android.webkit.CookieManagerClassic getInstance()>
<android.filterfw.core.FilterContext: android.filterfw.core.FrameManager getFrameManager()>
<android.widget.AbsListView$RecycleBin: android.view.View getActiveView(int)>
<android.view.View: int getSystemUiVisibility()>
<android.text.BoringLayout: int getTopPadding()>
<android.webkit.WebViewClassic: android.webkit.WebViewProvider$ViewDelegate getViewDelegate()>
<com.android.videoeditor.util.FileUtils: java.lang.String getMaskFilename(android.content.Context,int)>
<android.preference.PreferenceActivity: java.util.ArrayList access$100(android.preference.PreferenceActivity)>
<android.accounts.IAccountAuthenticator$Stub: android.os.IBinder asBinder()>
<android.content.pm.IPackageInstallObserver$Stub: android.os.IBinder asBinder()>
<com.android.internal.view.menu.ActionMenuItem: int getOrder()>
<android.view.Display: int getLayerStack()>
<android.widget.CursorAdapter: android.view.View newDropDownView(android.content.Context,android.database.Cursor,android.view.ViewGroup)>
<com.android.videoeditor.widgets.HorizontalScrollView: int getMaxScrollAmount()>
<android.media.videoeditor.TransitionAlpha: int getRGBFileHeight()>
<com.android.phone.PhoneGlobals: com.android.phone.Ringer getRinger()>
<android.widget.Toast: float getVerticalMargin()>
<android.widget.ActivityChooserModel: int getHistorySize()>
<com.android.launcher2.Folder: int getItemCount()>
<com.android.mms.util.DownloadManager: com.android.mms.util.DownloadManager getInstance()>
<android.media.AudioRecord: int getPositionNotificationPeriod()>
<com.android.phone.PhoneUtils: android.graphics.drawable.Drawable getProviderIcon(android.content.Context,android.content.Intent)>
<android.filterfw.format.PrimitiveFormat: android.filterfw.core.MutableFrameFormat createFloatFormat(int,int)>
<android.mtp.MtpStorageInfo: java.lang.String getDescription()>
<android.text.Layout: float getDesiredWidth(java.lang.CharSequence,android.text.TextPaint)>
<com.android.mms.dom.NodeListImpl: int getLength()>
<android.view.PointerIcon: android.view.PointerIcon getNullIcon()>
<com.google.android.picasasync.PicasaApi: int getAlbumPhotos(com.google.android.picasasync.AlbumEntry,com.google.android.picasasync.PicasaApi$EntryHandler)>
<android.test.IsolatedContext: android.content.ContentResolver getContentResolver()>
<android.view.Window: int getLocalFeatures()>
<com.android.email.activity.setup.AccountSetupBasics$NoteDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)>
<android.widget.TextView: int getTotalPaddingLeft()>
<android.widget.AutoCompleteTextView: android.widget.AutoCompleteTextView$Validator getValidator()>
<android.preference.TwoStatePreference: android.os.Parcelable onSaveInstanceState()>
<android.preference.DialogPreference: android.os.Parcelable onSaveInstanceState()>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: int getExitFadeDuration()>
<android.view.accessibility.AccessibilityNodeInfo: int getActions()>
<com.android.launcher2.Launcher: com.android.launcher2.LauncherModel getModel()>
<android.app.AlertDialog$Builder: android.app.AlertDialog show()>
<com.android.launcher2.Workspace: com.android.launcher2.Folder getFolderForTag(java.lang.Object)>
<android.widget.AdapterViewAnimator: int getDisplayedChild()>
<android.widget.LinearLayout: int getShowDividers()>
<android.provider.MediaStore$Images$Thumbnails: android.database.Cursor queryMiniThumbnails(android.content.ContentResolver,android.net.Uri,int,java.lang.String[])>
<com.android.org.bouncycastle.asn1.DERT61String: com.android.org.bouncycastle.asn1.DERT61String getInstance(java.lang.Object)>
<android.app.ExpandableListActivity: android.widget.ExpandableListView getExpandableListView()>
<com.android.email.activity.DeleteMessageConfirmationDialog: android.app.Dialog onCreateDialog(android.os.Bundle)>
<android.content.pm.IPackageDataObserver$Stub: android.os.IBinder asBinder()>
<com.android.uiautomator.core.UiDevice: java.lang.String getCurrentPackageName()>
<com.android.org.bouncycastle.asn1.DERGeneralizedTime: com.android.org.bouncycastle.asn1.ASN1GeneralizedTime getInstance(java.lang.Object)>
<android.os.Environment$UserEnvironment: java.io.File getExternalStorageAppMediaDirectory(java.lang.String)>
<com.android.mms.model.SmilHelper: org.w3c.dom.smil.SMILMediaElement createMediaElement(java.lang.String,org.w3c.dom.smil.SMILDocument,java.lang.String)>
<android.app.ActivityManager: int getLauncherLargeIconSize()>
<com.android.launcher2.Launcher: com.android.launcher2.CellLayout getCellLayout(long,int)>
<android.content.pm.IPackageInstallObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.android.mms.MmsConfig: java.lang.String getHttpParamsLine1Key()>
<com.android.phone.AnimationUtils$CrossFadeDrawable: android.animation.ObjectAnimator getAnimator()>
<com.android.i18n.phonenumbers.CountryCodeToRegionCodeMap: java.util.Map getCountryCodeToRegionCodeMap()>
<com.android.server.AppWidgetServiceImpl: android.appwidget.AppWidgetProviderInfo getAppWidgetInfo(int)>
<com.android.inputmethod.keyboard.MoreKeysKeyboard$MoreKeysKeyboardParams: int getY(int)>
<android.os.Environment: java.io.File getLegacyExternalStorageObbDirectory()>
<android.appwidget.AppWidgetHostView: android.graphics.Rect getDefaultPaddingForWidget(android.content.Context,android.content.ComponentName,android.graphics.Rect)>
<android.graphics.drawable.BitmapDrawable$BitmapState: int getChangingConfigurations()>
<com.android.videoeditor.service.VideoEditorProject: com.android.videoeditor.service.MovieOverlay getOverlay(java.lang.String,java.lang.String)>
<com.android.deskclock.widget.multiwaveview.Ease$Quad$3: float getInterpolation(float)>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>
<android.content.ContentResolver: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>
<com.android.deskclock.widget.multiwaveview.Ease$Quad$1: float getInterpolation(float)>
<android.text.StaticLayout: int getLineStart(int)>
<com.android.deskclock.widget.multiwaveview.Ease$Quad$2: float getInterpolation(float)>
<android.webkit.WebSettings: boolean getLoadWithOverviewMode()>
<android.filterfw.core.GLFrame: java.lang.Object getObjectValue()>
<com.android.email.mail.store.Pop3Store$Pop3Folder: int getUnreadMessageCount()>
<android.graphics.drawable.InsetDrawable: int getIntrinsicWidth()>
<android.os.Bundle: short getShort(java.lang.String,short)>
<com.android.inputmethod.latin.SuggestedWords$SuggestedWordInfo: java.lang.String getDebugString()>
<android.app.admin.DeviceAdminReceiver: android.app.admin.DevicePolicyManager getManager(android.content.Context)>
<android.text.StaticLayout: int getEllipsizedWidth()>
<android.media.AudioTrack: int getChannelConfiguration()>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: boolean getMainCountryForCode()>
<android.hardware.input.InputManager: android.os.Vibrator getInputDeviceVibrator(int)>
<android.content.ISyncStatusObserver$Stub: android.os.IBinder asBinder()>
<android.animation.ValueAnimator: java.lang.Object getAnimatedValue()>
<com.android.org.bouncycastle.asn1.ASN1Sequence: com.android.org.bouncycastle.asn1.ASN1Sequence getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)>
<android.media.videoeditor.MediaProperties: int getSupportedAudioTrackCount()>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: int getOpacity()>
<android.view.accessibility.AccessibilityNodeInfo: long getParentNodeId()>
<android.webkit.WebHistoryItem: java.lang.String getOriginalUrl()>
<com.android.internal.view.menu.MenuItemImpl: char getNumericShortcut()>
<com.android.mms.util.PduLoaderManager: com.android.mms.util.ItemLoadedFuture getPdu(android.net.Uri,boolean,com.android.mms.util.ItemLoadedCallback)>
<android.content.Entity: android.content.ContentValues getEntityValues()>
<android.text.style.AlignmentSpan$Standard: android.text.Layout$Alignment getAlignment()>
<android.view.MotionEvent: float getHistoricalToolMajor(int,int)>
<android.widget.TextView: android.text.InputFilter[] getFilters()>
<com.android.inputmethod.latin.Utils$RingCharBuffer: java.lang.String getLastWord(int)>
<android.widget.ProgressBar: android.graphics.drawable.shapes.Shape getDrawableShape()>
<android.widget.PopupWindow: int getHeight()>
<android.widget.CompoundButton: int[] onCreateDrawableState(int)>
<com.android.wallpaper.fall.ScriptField_Constants: android.renderscript.Element createElement(android.renderscript.RenderScript)>
<android.widget.ProgressBar: android.graphics.drawable.Drawable getProgressDrawable()>
<com.android.internal.policy.impl.keyguard.KeyguardSelectorView$3: com.android.internal.policy.impl.keyguard.KeyguardSecurityCallback getCallback()>
<android.hardware.usb.UsbDeviceConnection: java.lang.String getSerial()>
<android.view.MotionEvent: int getActionIndex()>
<android.widget.SimpleAdapter: android.widget.SimpleAdapter$ViewBinder getViewBinder()>
<android.preference.Preference: android.view.View getView(android.view.View,android.view.ViewGroup)>
<com.android.org.bouncycastle.asn1.DEROutputStream: com.android.org.bouncycastle.asn1.ASN1OutputStream getDERSubStream()>
<com.android.mms.util.ThumbnailManager: com.android.mms.util.ItemLoadedFuture getThumbnail(android.net.Uri,com.android.mms.util.ItemLoadedCallback)>
<com.android.providers.media.MediaProvider: java.lang.String getType(android.net.Uri)>
<com.android.videoeditor.ProjectPickerAdapter: int getCount()>
<android.media.AudioRecord: int getState()>
<android.widget.ArrayAdapter: android.widget.Filter getFilter()>
<android.hardware.Camera$Parameters: boolean getAutoExposureLock()>
<com.android.launcher2.DeleteDropTarget$5: float getInterpolation(float)>
<com.android.launcher2.DeleteDropTarget$3: float getInterpolation(float)>
<android.webkit.WebResourceResponse: java.io.InputStream getData()>
<android.webkit.ZoomManager: float getDefaultMinZoomScale()>
<android.view.GLES20Canvas: int getWidth()>
<android.widget.GridLayout$Alignment: int getSizeInCell(android.view.View,int,int)>
<com.android.internal.policy.impl.PhoneFallbackEventHandler: android.media.AudioManager getAudioManager()>
<com.android.email.activity.MailboxListFragment: long getAccountId()>
<android.os.UserHandle: int getIdentifier()>
<android.view.GLES20TextureLayer: android.graphics.SurfaceTexture getSurfaceTexture()>
<android.text.method.TimeKeyListener: char[] getAcceptedChars()>
<android.view.View: int getAccessibilityWindowId()>
<com.android.org.bouncycastle.jce.netscape.NetscapeCertRequest: java.security.PublicKey getPublicKey()>
<android.speech.tts.TtsEngines: java.lang.String getLocalePrefForEngine(java.lang.String)>
<com.android.launcher2.LauncherViewPropertyAnimator: java.util.ArrayList getListeners()>
<android.graphics.drawable.Drawable: android.graphics.Insets getLayoutInsets()>
<android.provider.Settings$Global: long getLong(android.content.ContentResolver,java.lang.String,long)>
<com.android.uiautomator.core.UiSelector: com.android.uiautomator.core.UiSelector getParentSelector()>
<com.android.internal.view.menu.ActionMenuPresenter: android.view.View getItemView(com.android.internal.view.menu.MenuItemImpl,android.view.View,android.view.ViewGroup)>
<android.content.Context: java.lang.String getString(int)>
<android.content.IntentSender: java.lang.String getTargetPackage()>
<android.hardware.display.DisplayManagerGlobal: int[] getDisplayIds()>
<com.android.internal.view.IInputMethodCallback$Stub: android.os.IBinder asBinder()>
<com.android.wallpaper.galaxy.ScriptField_VpConsts: android.renderscript.Element createElement(android.renderscript.RenderScript)>
<com.android.internal.util.TypedProperties: byte getByte(java.lang.String)>
<com.android.inputmethod.latin.InputPointers: int getPointerSize()>
<com.android.videoeditor.service.VideoEditorProject: long getPlayheadPos()>
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$ConstantState getConstantState()>
<com.android.phone.PhoneInterfaceManager: int getVoiceMessageCount()>
<android.webkit.ZoomManager: float getDefaultMaxZoomScale()>
<com.android.ex.chips.BaseRecipientAdapter: int getViewTypeCount()>
<android.app.SearchableInfo: boolean getVoiceSearchLaunchRecognizer()>
<android.content.pm.VerificationParams: android.net.Uri getReferrer()>
<com.android.inputmethod.latin.WordComposer: java.lang.String getTypedWord()>
<com.android.phone.ManageConferenceUtils: int getNumCallersInConference()>
<android.webkit.HTML5VideoInline: int getTextureName()>
<android.preference.PreferenceFragment: android.preference.PreferenceScreen getPreferenceScreen()>
<com.android.ex.chips.BaseRecipientAdapter: android.database.Cursor access$200(com.android.ex.chips.BaseRecipientAdapter,java.lang.CharSequence,int,java.lang.Long)>
<android.widget.LinearLayout: int getOrientation()>
<com.android.server.IntentResolverOld: java.lang.Object newResult(android.content.IntentFilter,int,int)>
<com.google.android.apps.lightcycle.camera.NullSurfaceCameraPreview: com.google.android.apps.lightcycle.camera.CameraApiProxy$CameraProxy getCamera()>
<android.mtp.MtpDevice: long getParent(int)>
<com.android.server.am.TaskRecord: long getInactiveDuration()>
<android.content.res.XmlBlock$Parser: java.lang.String getAttributeValue(int)>
<android.view.IWindowSession$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.content.pm.Signature: java.security.PublicKey getPublicKey()>
<android.widget.TextView: int getTotalPaddingBottom()>
<com.android.inputmethod.compat.CompatUtils: java.lang.Class getClass(java.lang.String)>
<com.android.inputmethod.latin.LastComposedWord: int getSeparatorLength(java.lang.String)>
<android.app.Activity: android.database.Cursor managedQuery(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<android.filterpacks.imageproc.ToPackedGrayFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)>
<android.opengl.GLLogWrapper$PointerInfo: int getStride()>
<android.app.ActivityManager: int getMemoryClass()>
<com.android.camera.ui.MoreSettingPopup$MoreSettingAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<android.hardware.display.DisplayManagerGlobal: android.view.Display getCompatibleDisplay(int,android.view.CompatibilityInfoHolder)>
<android.widget.GridLayout$6: android.widget.GridLayout$Bounds getBounds()>
<android.widget.TextView: android.text.TextUtils$TruncateAt getEllipsize()>
<android.view.View: int getVerticalFadingEdgeLength()>
<android.os.SystemProperties: long getLong(java.lang.String,long)>
<com.android.mms.dom.smil.SmilRootLayoutElementImpl: int getWidth()>
<android.content.pm.ActivityInfo: int getRealConfigChanged()>
<android.view.accessibility.AccessibilityNodeInfo: int getWindowId()>
<android.drm.DrmSupportInfo: java.lang.String getDescriprition()>
<com.android.org.bouncycastle.asn1.x500.RDN: com.android.org.bouncycastle.asn1.x500.AttributeTypeAndValue[] getTypesAndValues()>
<android.view.View: int getSuggestedMinimumWidth()>
<com.android.mms.model.SlideshowModel: com.android.mms.model.SlideModel get(int)>
<android.util.TypedValue: float getFloat()>
<android.text.Layout: float getDesiredWidth(java.lang.CharSequence,int,int,android.text.TextPaint)>
<android.app.ActivityManager: java.util.Map getAllPackageLaunchCounts()>
<android.test.IsolatedContext$MockAccountManager$MockAccountManagerFuture: java.lang.Object getResult()>
<android.view.InputDevice$MotionRange: float getFlat()>
<com.android.server.accessibility.TouchExplorer$ReceivedPointerTracker: int getLastReceivedDownEdgeFlags()>
<android.app.Fragment: java.lang.String getTag()>
<com.android.mms.dom.NodeImpl: org.w3c.dom.Document getOwnerDocument()>
<com.android.server.am.ActivityStack: android.content.pm.ActivityInfo resolveActivity(android.content.Intent,java.lang.String,int,java.lang.String,android.os.ParcelFileDescriptor,int)>
<com.android.internal.util.StateMachine$LogRec: java.lang.String getInfo()>
<android.filterpacks.imageproc.ResizeFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)>
<com.android.email.Preferences: boolean getEnableExchangeLogging()>
<android.graphics.drawable.NinePatchDrawable: int getOpacity()>
<android.widget.SimpleAdapter: java.lang.Object getItem(int)>
<android.content.pm.PackageParser$Component: java.lang.String getComponentShortName()>
<android.content.ContentProviderProxy: java.lang.String getType(android.net.Uri)>
<android.webkit.DateSorter: java.lang.String getLabel(int)>
<android.widget.ArrayAdapter: java.lang.Object getItem(int)>
<android.app.SearchManager: android.content.ComponentName getGlobalSearchActivity()>
<android.os.storage.StorageManager$ListenerDelegate: android.os.storage.StorageEventListener getListener()>
<com.android.internal.policy.impl.PhoneWindowManager: long interceptKeyBeforeDispatching(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)>
<android.content.ContextWrapper: int getWallpaperDesiredMinimumWidth()>
<android.app.ActivityManagerProxy: java.lang.String getPackageForIntentSender(android.content.IIntentSender)>
<com.android.inputmethod.latin.StaticInnerHandlerWrapper: java.lang.Object getOuterInstance()>
<com.google.android.picasasync.PicasaDatabaseHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()>
<android.content.res.XmlBlock$Parser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>
<android.content.Intent: long getLongExtra(java.lang.String,long)>
<android.webkit.CacheManager$CacheResult: java.lang.String getETag()>
<android.accounts.AccountAndUser: java.lang.String toString()>
<com.android.mms.util.Recycler: int getMessageMinLimit()>
<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.PhoneNumberUtil$MatchType isNumberMatch(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,java.lang.String)>
<com.android.inputmethod.keyboard.Key: android.graphics.drawable.Drawable getIcon(com.android.inputmethod.keyboard.internal.KeyboardIconsSet,int)>
<android.os.Bundle: long getLong(java.lang.String,long)>
<com.android.launcher2.Folder: float getPivotYForIconAnimation()>
<android.widget.AdapterViewAnimator: android.view.View getViewAtRelativeIndex(int)>
<android.webkit.CallbackProxy$UploadFileMessageData: java.lang.String getAcceptType()>
<android.content.ContextWrapper: android.content.res.Resources getResources()>
<android.os.Bundle: short[] getShortArray(java.lang.String)>
<android.media.AudioTrack: float getMaxVolume()>
<com.android.internal.view.menu.ActionMenuItem: android.view.SubMenu getSubMenu()>
<com.android.phone.PhoneUtils: android.app.Dialog displayMMIInitiate(android.content.Context,com.android.internal.telephony.MmiCode,android.os.Message,android.app.Dialog)>
<android.os.Debug: int getGlobalGcInvocationCount()>
<android.media.RemoteControlClient: android.media.IRemoteControlClient getIRemoteControlClient()>
<android.view.accessibility.AccessibilityNodeInfo: long getSourceNodeId()>
<android.app.ListActivity: android.widget.ListAdapter getListAdapter()>
<android.filterpacks.performance.ThroughputFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)>
<android.app.admin.DeviceAdminInfo: java.util.ArrayList getUsedPolicies()>
<com.android.inputmethod.latin.SubtypeSwitcher: android.view.inputmethod.InputMethodSubtype getNoLanguageSubtype()>
<com.android.internal.view.menu.SubMenuBuilder: java.lang.String getActionViewStatesKey()>
<com.android.deskclock.widget.swipeablelistview.SwipeableListView: android.view.View getChildAtPosition(android.view.MotionEvent)>
<com.android.email.activity.MessageViewFragment: long getMessageId()>
<android.content.ContentProvider: android.content.Context getContext()>
<android.widget.TextView: float getLineSpacingMultiplier()>
<com.android.internal.view.menu.MenuBuilder: android.content.Context getContext()>
<com.android.email.activity.MessageViewFragmentBase: com.android.email.Controller getController()>
<android.app.Fragment: java.lang.String getString(int,java.lang.Object[])>
<android.preference.PreferenceActivity: android.preference.PreferenceActivity$Header onGetInitialHeader()>
<com.android.org.bouncycastle.asn1.DERNumericString: com.android.org.bouncycastle.asn1.DERNumericString getInstance(java.lang.Object)>
<android.media.AudioManager: boolean isSpeechRecognitionActive()>
<android.content.ContentProvider: android.content.pm.PathPermission[] getPathPermissions()>
<android.webkit.WebViewCore$EventHub: android.os.Looper getWebKitLooper()>
<android.text.style.StyleSpan: int getSpanTypeId()>
<android.animation.AnimatorInflater: android.animation.Animator loadAnimator(android.content.Context,int)>
<com.android.phone.CallerInfoCache: com.android.phone.CallerInfoCache$CacheEntry getCacheEntry(java.lang.String)>
<android.os.Handler: android.os.Looper getLooper()>
<android.webkit.WebStorageClassic: android.webkit.WebStorageClassic getInstance()>
<com.android.mms.dom.DocumentImpl: java.lang.String getNodeName()>
<com.android.inputmethod.keyboard.MainKeyboardView: int getLanguageOnSpacebarAnimAlpha()>
<com.android.systemui.recent.RecentsHorizontalScrollView: int getHorizontalFadingEdgeLength()>
<com.android.internal.view.ActionBarPolicy: int getEmbeddedMenuWidthLimit()>
<com.android.camera.ActivityBase: long getStorageSpace()>
<android.preference.DialogPreference: java.lang.CharSequence getDialogTitle()>
<com.android.i18n.phonenumbers.PhoneNumberUtil: int getLengthOfGeographicalAreaCode(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>
<com.google.android.apps.lightcycle.camera.CameraUtility: float getFieldOfView()>
<com.android.email.activity.setup.AccountSettingsUtils: android.content.ContentValues getAccountContentValues(com.android.emailcommon.provider.Account)>
<android.hardware.input.KeyboardLayout: java.lang.String getDescriptor()>
<android.net.http.CertificateChainValidator: android.net.http.SslError doHandshakeAndValidateServerCertificates(android.net.http.HttpsConnection,javax.net.ssl.SSLSocket,java.lang.String)>
<android.content.res.ColorStateList: int getColorForState(int[],int)>
<android.webkit.ZoomManager: int getDocumentAnchorY()>
<android.webkit.ZoomManager: int getDocumentAnchorX()>
<android.widget.ListView: android.widget.Adapter getAdapter()>
<com.android.launcher2.FastBitmapDrawable: int getOpacity()>
<com.android.launcher2.LauncherViewPropertyAnimator: long getStartDelay()>
<com.android.server.sip.SipSessionListenerProxy: android.net.sip.ISipSessionListener getListener()>
<android.content.PeriodicSync$1: android.content.PeriodicSync createFromParcel(android.os.Parcel)>
<com.android.email.SecurityPolicy: android.content.ComponentName getAdminComponent()>
<com.android.inputmethod.keyboard.PointerTracker$BogusMoveEventDetector: int getDistanceFromDownEvent(int,int)>
<android.test.IsolatedContext$MockAccountManager$MockAccountManagerFuture: java.lang.Object getResult(long,java.util.concurrent.TimeUnit)>
<android.view.accessibility.IAccessibilityManager$Stub$Proxy: java.util.List getEnabledAccessibilityServiceList(int,int)>
<android.view.HardwareRenderer$GlRenderer: long getFrameCount()>
<android.media.Ringtone: int getStreamType()>
<android.graphics.drawable.BitmapDrawable: android.graphics.Bitmap getBitmap()>
<com.android.internal.view.IInputContext$Stub$Proxy: void getCursorCapsMode(int,int,com.android.internal.view.IInputContextCallback)>
<com.android.launcher2.Workspace: android.graphics.Rect getCellLayoutMetrics(com.android.launcher2.Launcher,int)>
<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: java.lang.String getPreferredDomesticCarrierCode()>
<com.android.deskclock.Alarms: java.util.Calendar calculateAlarm(int,int,com.android.deskclock.Alarm$DaysOfWeek)>
<android.hardware.Camera$Parameters: float getVerticalViewAngle()>
<android.provider.Settings$Secure: long getLongForUser(android.content.ContentResolver,java.lang.String,long,int)>
<com.android.mms.TempFileProvider: java.lang.String getType(android.net.Uri)>
<android.filterfw.core.OutputPort: android.filterfw.core.Filter getTargetFilter()>
<android.view.ViewConfiguration: int getWindowTouchSlop()>
<android.content.Loader: int getId()>
<com.android.inputmethod.keyboard.KeyDetector: com.android.inputmethod.keyboard.Keyboard getKeyboard()>
<android.support.v4.view.VelocityTrackerCompat$BaseVelocityTrackerVersionImpl: float getXVelocity(android.view.VelocityTracker,int)>
<android.app.WallpaperInfo: java.lang.String getSettingsActivity()>
<com.android.email.mail.transport.CountingOutputStream: long getCount()>
<android.webkit.HTML5VideoView: boolean getPlayerBuffering()>
<com.android.internal.util.TypedProperties: short getShort(java.lang.String,short)>
<com.android.org.bouncycastle.asn1.DERGeneralizedTime: java.lang.String getTimeString()>
<com.android.inputmethod.latin.Suggest: com.android.inputmethod.latin.ContactsBinaryDictionary getContactsDictionary()>
<android.util.SparseIntArray: int get(int,int)>
<android.preference.GenericInflater: java.lang.String getDefaultPackage()>
<com.android.videoeditor.service.MovieMediaItem: int getRenderingMode()>
<android.view.inputmethod.CompletionInfo: java.lang.CharSequence getLabel()>
<com.android.email.Controller: com.android.email.Controller getInstance(android.content.Context)>
<android.widget.ImageView: android.widget.ImageView$ScaleType getScaleType()>
<android.view.View: int getBottom()>
<com.android.server.wm.WindowAnimator: com.android.server.wm.ScreenRotationAnimation getScreenRotationAnimationLocked(int)>
<android.app.LocalActivityManager: android.app.Activity getActivity(java.lang.String)>
<android.app.SharedPreferencesImpl: java.util.Set getStringSet(java.lang.String,java.util.Set)>
<com.android.deskclock.widget.multiwaveview.Ease$Linear$1: float getInterpolation(float)>
<com.android.server.am.CompatModePackages: int getPackageScreenCompatModeLocked(java.lang.String)>
<com.android.phone.CdmaPhoneCallState: com.android.phone.CdmaPhoneCallState$PhoneCallState getCurrentCallState()>
<android.view.InputDevice$MotionRange: float getMin()>
<android.drm.DrmRights: java.lang.String getSubscriptionId()>
<android.util.XmlPullAttributes: java.lang.String getAttributeValue(int)>
<com.android.email.provider.ContentCache$CachedCursor: int getCount()>
<android.widget.ActivityChooserView$ActivityChooserViewAdapter: long getItemId(int)>
<android.widget.CursorTreeAdapter: android.widget.CursorTreeAdapter$MyCursorHelper getChildrenCursorHelper(int,boolean)>
<android.content.pm.IPackageManager$Stub$Proxy: int[] getPackageGids(java.lang.String)>
<com.android.email.mail.store.ImapFolder: int getUnreadMessageCount()>
<com.android.inputmethod.keyboard.Key: android.graphics.drawable.Drawable getPreviewIcon(com.android.inputmethod.keyboard.internal.KeyboardIconsSet)>
<com.android.launcher2.PagedViewWidget: int[] getPreviewSize()>
<android.app.ApplicationPackageManager: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int)>
<android.preference.Preference: java.lang.CharSequence getTitle()>
<android.mtp.MtpObjectInfo: int getThumbPixHeight()>
<android.webkit.WebView: java.lang.String getTouchIconUrl()>
<android.view.GLES20Layer: int getLayer()>
<android.filterfw.core.Filter: java.lang.String toString()>
<com.android.org.bouncycastle.asn1.ASN1Object: byte[] getEncoded()>
<android.widget.NumberPicker: int getMinValue()>
<android.media.RingtoneManager: android.media.Ringtone getRingtone(int)>
<android.renderscript.Mesh$Builder: int getCurrentIndexSetIndex()>
<android.preference.Preference: android.preference.Preference$OnPreferenceChangeListener getOnPreferenceChangeListener()>
<android.widget.TextView: java.lang.CharSequence getError()>
<com.android.phone.EditPhoneNumberPreference: java.lang.String getPhoneNumber()>
<android.os.Environment: java.io.File getDirectory(java.lang.String,java.lang.String)>
<android.filterfw.core.GLFrame: float[] getFloats()>
<android.hardware.Camera$Parameters: int getMaxExposureCompensation()>
<android.os.StrictMode: android.os.StrictMode$VmPolicy getVmPolicy()>
<android.speech.tts.PlaybackQueueItem: java.lang.Object getCallerIdentity()>
<com.android.emailcommon.internet.MimeBodyPart: java.lang.String getFirstHeader(java.lang.String)>
<android.media.videoeditor.Transition: java.lang.String getId()>
<android.preference.PreferenceManager: android.preference.PreferenceScreen inflateFromResource(android.content.Context,int,android.preference.PreferenceScreen)>
<com.android.email.provider.EmailProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<com.android.server.display.DisplayDevice: android.os.IBinder getDisplayTokenLocked()>
<android.filterfw.core.Filter: int getNumberOfConnectedInputs()>
<com.android.systemui.statusbar.tablet.TabletStatusBar: android.content.Context getContext()>
<android.content.res.TypedArray: java.lang.CharSequence[] getTextArray(int)>
<android.media.effect.EffectContext: android.media.effect.EffectFactory getFactory()>
<com.google.android.picasastore.PicasaStoreFacade: java.lang.String getAlbumCoverKey(long,java.lang.String)>
<com.android.launcher2.DragLayer$LayoutParams: int getWidth()>
<com.android.camera.ui.PieItem: float getAnimationAngle()>
<android.view.InputDevice$MotionRange: float getMax()>
<android.os.storage.StorageManager$StorageEvent: android.os.Message getMessage()>
<android.content.BroadcastReceiver: boolean getAbortBroadcast()>
<com.android.systemui.statusbar.phone.QuickSettings: com.android.systemui.statusbar.phone.PhoneStatusBar getService()>
<android.media.CamcorderProfile: android.media.CamcorderProfile get(int)>
<com.android.org.bouncycastle.asn1.ASN1TaggedObject: int getTagNo()>
<com.android.launcher2.CellLayout: int getCountX()>
<com.android.launcher2.CellLayout: int getCountY()>
<android.widget.AbsListView: int getCacheColorHint()>
<android.view.ViewConfiguration: int getMaximumFlingVelocity()>
<com.android.launcher2.Folder: float getPivotXForIconAnimation()>
<android.hardware.display.WifiDisplayStatus: int getFeatureState()>
<android.media.videoeditor.MediaImageItem: android.media.videoeditor.MediaArtistNativeHelper$ClipSettings getImageClipProperties()>
<android.os.Debug: java.lang.String getCallers(int,java.lang.String)>
<com.android.launcher2.LauncherModel: com.android.launcher2.ShortcutInfo infoFromShortcutIntent(android.content.Context,android.content.Intent,android.graphics.Bitmap)>
<android.hardware.usb.UsbManager: android.os.ParcelFileDescriptor openAccessory(android.hardware.usb.UsbAccessory)>
<android.media.videoeditor.AudioTrack: android.media.videoeditor.WaveformData getWaveformData()>
<com.android.email.activity.AccountSelectorAdapter: int getItemViewType(int)>
<android.renderscript.Mesh$TriangleMeshBuilder: android.renderscript.Mesh create(boolean)>
<com.android.mms.dom.smil.SmilParElementImpl: short getFill()>
<android.os.IUserManager$Stub$Proxy: int getUserSerialNumber(int)>
<com.android.mms.transaction.TransactionBundle: int getProxyPort()>
<android.content.SyncStorageEngine: long getDelayUntilTime(android.accounts.Account,int,java.lang.String)>
<com.android.email.mail.store.imap.ImapSimpleString: java.lang.String getString()>
<com.google.android.mms.pdu.CharacterSets: java.lang.String getMimeName(int)>
<com.android.email.activity.MessageListFragment: com.android.emailcommon.provider.Account getAccount()>
<android.mtp.MtpDevice: android.mtp.MtpStorageInfo getStorageInfo(int)>
<com.android.videoeditor.service.MovieEffect: android.graphics.Rect getStartRect()>
<android.gesture.Gesture: android.graphics.RectF getBoundingBox()>
<android.view.InputDevice$MotionRange: int getAxis()>
<com.android.videoeditor.ProjectPickerAdapter: java.lang.Object getItem(int)>
<android.graphics.drawable.Drawable: int getMinimumHeight()>
<android.view.MotionEvent: float getTouchMajor()>
<com.android.email.mail.store.ImapConnection: java.util.List getCommandResponses()>
<com.android.systemui.statusbar.phone.NavigationBarView: android.view.View getHomeButton()>
<com.android.camera.CameraActivity: long getPictureDisplayedToJpegCallbackTime()>
<com.android.launcher2.Workspace: int getScrollMode()>
<android.webkit.WebSettingsClassic: java.lang.String getAcceptLanguage()>
<android.webkit.AccessibilityInjectorFallback$AccessibilityWebContentKeyBinding: int getThirdArgument(int)>
<android.app.backup.IBackupManager$Stub$Proxy: java.lang.String[] listAllTransports()>
<android.filterpacks.base.RetargetFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)>
<android.renderscript.ProgramFragmentFixedFunction$Builder: android.renderscript.ProgramFragmentFixedFunction create()>
<android.support.v13.app.FragmentPagerAdapter: java.lang.Object instantiateItem(android.view.ViewGroup,int)>
<android.view.animation.GridLayoutAnimationController: float getRowDelay()>
<com.android.server.sip.SipSessionGroup$SipSessionImpl$2$1: java.lang.String getUserName()>
<android.app.admin.DevicePolicyManager: int getPasswordMinimumSymbols(android.content.ComponentName)>
<android.view.MotionEvent: float getY(int)>
<android.view.MotionEvent: float getX(int)>
<android.view.animation.GridLayoutAnimationController: int getDirection()>
<android.app.Activity: android.app.ActionBar getActionBar()>
<com.android.mms.dom.NodeImpl: java.lang.Object getUserData(java.lang.String)>
<com.android.org.bouncycastle.asn1.DERUniversalString: com.android.org.bouncycastle.asn1.DERUniversalString getInstance(java.lang.Object)>
<android.webkit.WebViewClassic: java.lang.String getTouchIconUrl()>
<android.widget.ListView: android.graphics.drawable.Drawable getOverscrollFooter()>
<android.widget.GridLayout: int getMeasurementIncludingMargin(android.view.View,boolean)>
<android.widget.CursorAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<android.content.res.AssetManager: int createTheme()>
<com.android.systemui.statusbar.phone.NavigationBarView: android.view.View getMenuButton()>
<android.speech.tts.TextToSpeech$Connection: android.os.IBinder getCallerIdentity()>
<android.content.Context: java.lang.String getString(int,java.lang.Object[])>
<android.filterfw.core.SimpleFrame: android.graphics.Bitmap getBitmap()>
<android.os.Bundle: java.lang.CharSequence[] getCharSequenceArray(java.lang.String)>
<android.app.ApplicationPackageManager: java.lang.String getInstallerPackageName(java.lang.String)>
<android.widget.LinearLayout: int getVirtualChildCount()>
<android.content.SyncStorageEngine: java.util.ArrayList getPendingOperations()>
<com.android.internal.policy.impl.keyguard.KeyguardWidgetFrame: float getBackgroundAlpha()>
<android.app.ActivityThread: android.os.Handler getHandler()>
<com.android.internal.widget.multiwaveview.Ease$Sine$1: float getInterpolation(float)>
<com.android.internal.widget.multiwaveview.Ease$Sine$3: float getInterpolation(float)>
<com.android.internal.widget.multiwaveview.Ease$Sine$2: float getInterpolation(float)>
<android.content.ContentProviderClient: java.lang.String getType(android.net.Uri)>
<android.graphics.Paint: android.graphics.Typeface getTypeface()>
<android.view.Choreographer: android.view.Choreographer getInstance()>
<android.text.style.TypefaceSpan: int getSpanTypeId()>
<android.content.SyncStorageEngine: android.content.SyncStorageEngine$AuthorityInfo getAuthority(int)>
<com.android.emailcommon.internet.MimeUtility: java.io.InputStream getInputStreamForContentTransferEncoding(java.io.InputStream,java.lang.String)>
<android.graphics.drawable.shapes.Shape: float getWidth()>
<android.view.MotionEvent: int getSource()>
<android.view.Display: float getRefreshRate()>
<com.android.deskclock.Alarm$DaysOfWeek: int getCoded()>
<android.content.res.Resources: android.content.res.XmlResourceParser getLayout(int)>
<android.view.GLES20RenderLayer: android.view.HardwareCanvas getCanvas()>
<android.widget.AdapterViewAnimator: android.animation.ObjectAnimator getInAnimation()>
<com.android.inputmethod.latin.LogEntries$AutoCorrectionCancelledEntry: java.lang.String[] getLogStrings()>
<com.android.mms.dom.smil.SmilParElementImpl$1: org.w3c.dom.smil.ElementTime getParentElementTime()>
<android.support.v4.view.MotionEventCompat: float getX(android.view.MotionEvent,int)>
<com.android.commands.monkey.MonkeyMotionEvent: long getDownTime()>
<android.support.v4.view.MotionEventCompat: float getY(android.view.MotionEvent,int)>
<com.google.android.apps.lightcycle.camera.TextureCameraPreview: com.google.android.apps.lightcycle.util.Size getPhotoSize()>
<android.view.View: int getPaddingBottom()>
<android.widget.CursorTreeAdapter$MyCursorHelper: long getId(int)>
<com.android.exchange.EasResponse: org.apache.http.Header getHeader(java.lang.String)>
<android.content.Intent: byte[] getByteArrayExtra(java.lang.String)>
<com.android.server.WiredAccessoryManager$WiredAccessoryObserver$UEventInfo: java.lang.String getSwitchStatePath()>
<android.view.animation.AnticipateOvershootInterpolator: float getInterpolation(float)>
<com.android.email.FolderProperties: android.graphics.drawable.Drawable getIcon(int,long,int)>
<com.android.email.activity.UiUtilities: java.lang.String getMessageCountForUi(android.content.Context,int,boolean)>
<com.android.camera.IconListPreference: boolean getUseSingleIcon()>
<android.filterfw.core.GLFrame: int getFboId()>
<android.media.RingtoneManager: android.database.Cursor getCursor()>
<android.filterfw.core.SimpleFrame: float[] getFloats()>
<android.preference.Preference: int getTitleRes()>
<android.content.IOnPrimaryClipChangedListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int,int)>
<android.view.animation.Animation: int getRepeatCount()>
<android.widget.Editor$SuggestionsPopupWindow$SuggestionAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<android.graphics.drawable.LayerDrawable: int getNumberOfLayers()>
<com.android.phone.sip.SipProfileDb: int getProfilesCount()>
<com.android.launcher2.Workspace: android.graphics.Bitmap createWidgetBitmap(com.android.launcher2.ItemInfo,android.view.View)>
<com.android.mms.dom.DocumentImpl: java.lang.String getXmlEncoding()>
<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodSubtype getLastInputMethodSubtype()>
<android.renderscript.Mesh: android.renderscript.Allocation getIndexSetAllocation(int)>
<android.app.PendingIntent: android.content.Intent getIntent()>
<android.hardware.input.IInputManager$Stub$Proxy: java.lang.String getCurrentKeyboardLayoutForInputDevice(java.lang.String)>
<com.android.server.accessibility.TouchExplorer$SendHoverDelayed: float getY()>
<com.android.server.accessibility.TouchExplorer$SendHoverDelayed: float getX()>
<com.android.internal.view.menu.ActionMenuItemView: com.android.internal.view.menu.MenuItemImpl getItemData()>
<android.view.inputmethod.InputBinding: int getPid()>
<android.net.sip.SimpleSessionDescription: java.lang.String[] getBandwidthTypes()>
<android.widget.Toast: android.view.View getView()>
<android.text.BoringLayout: int getLineStart(int)>
<android.app.LoadedApk$ReceiverDispatcher: android.content.BroadcastReceiver getIntentReceiver()>
<com.android.inputmethod.latin.LatinImeLogger$LogEntry: java.lang.String[] getLogStrings()>
<com.android.org.bouncycastle.util.encoders.Hex: byte[] encode(byte[],int,int)>
<android.filterfw.core.SerializedFrame: java.nio.ByteBuffer getData()>
<com.android.mms.ui.SlideshowActivity$SmilPlayerController: int getCurrentPosition()>
<com.android.phone.CallNotifier: com.android.internal.telephony.Call$State getPreviousCdmaCallState()>
<com.android.deskclock.Alarm$DaysOfWeek: java.util.HashSet getSetDays()>
<android.widget.TextView: boolean getHorizontallyScrolling()>
<com.android.server.CertBlacklister$BlacklistObserver: java.lang.String getValue()>
<android.app.ApplicationPackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)>
<com.google.android.picasasync.PrefetchHelper: com.google.android.picasasync.PrefetchHelper get(android.content.Context)>
<com.android.commands.monkey.MonkeyKeyEvent: int getAction()>
<com.android.deskclock.AlarmClock$AlarmItemAdapter: int[] getRepeatArray()>
<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String getRegionCodeForNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>
<com.android.email.mail.store.Pop3Store$Pop3Folder: java.lang.String getName()>
<android.app.ApplicationThreadNative: android.os.IBinder asBinder()>
<com.android.internal.view.IInputContext$Stub$Proxy: void getTextAfterCursor(int,int,int,com.android.internal.view.IInputContextCallback)>
<android.filterfw.core.FrameManager: android.filterfw.core.Frame duplicateFrame(android.filterfw.core.Frame)>
<com.android.mms.transaction.HttpUtils: byte[] httpConnection(android.content.Context,long,java.lang.String,byte[],int,boolean,java.lang.String,int)>
<android.content.ContentProviderClient: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPictureSize()>
<com.android.deskclock.TimerSetupView: int getTime()>
<android.preference.PreferenceActivity: java.util.List getHeaders()>
<android.media.videoeditor.MediaArtistNativeHelper: android.media.videoeditor.MediaArtistNativeHelper$EffectSettings getOverlaySettings(android.media.videoeditor.OverlayFrame)>
<com.android.videoeditor.AlertDialogs: android.app.AlertDialog createEditDialog(android.content.Context,java.lang.String,java.lang.String,java.lang.String,android.content.DialogInterface$OnClickListener,java.lang.String,android.content.DialogInterface$OnClickListener,android.content.DialogInterface$OnCancelListener,int,int,java.lang.String)>
<com.android.launcher2.LauncherApplication: com.android.launcher2.IconCache getIconCache()>
<com.android.phone.InCallScreen: com.android.phone.InCallControlState getUpdatedInCallControlState()>
<android.content.ISyncAdapter$Stub: android.os.IBinder asBinder()>
<android.media.videoeditor.MediaArtistNativeHelper: int getAspectRatio(int,int)>
<com.android.i18n.phonenumbers.PhoneNumberUtil: int getLengthOfNationalDestinationCode(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>
<android.text.style.DynamicDrawableSpan: int getVerticalAlignment()>
<android.mtp.MtpStorage: int getStorageId(int)>
<android.text.style.ScaleXSpan: int getSpanTypeId()>
<android.speech.SpeechRecognizer: android.speech.SpeechRecognizer createSpeechRecognizer(android.content.Context)>
<com.android.internal.policy.impl.keyguard.KeyguardMessageArea: java.lang.CharSequence getCurrentMessage()>
<android.util.NtpTrustedTime: long getCachedNtpTime()>
<com.google.android.apps.lightcycle.camera.CameraUtility: java.lang.String getFocusMode(com.google.android.apps.lightcycle.camera.CameraApiProxy$CameraProxy)>
<com.android.mms.dom.DocumentImpl: org.w3c.dom.NodeList getElementsByTagNameNS(java.lang.String,java.lang.String)>
<android.os.RemoteCallbackList: android.os.IInterface getBroadcastItem(int)>
<com.android.launcher2.Workspace$InverseZInterpolator: float getInterpolation(float)>
<android.media.audiofx.AudioEffect: int getParameter(int,short[])>
<android.view.View: android.view.View$ListenerInfo getListenerInfo()>
<android.filterfw.core.Filter: java.util.Collection getOutputPorts()>
<android.webkit.ZoomManager: android.view.ScaleGestureDetector getScaleGestureDetector()>
<com.android.server.am.ProviderMap: java.util.HashMap getProvidersByClass(int)>
<android.os.IPowerManager$Stub$Proxy: boolean isWakeLockLevelSupported(int)>
<android.text.Layout$SpannedEllipsizer: int getSpanEnd(java.lang.Object)>
<android.content.BroadcastReceiver: int getSendingUserId()>
<android.filterpacks.imageproc.CropFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)>
<android.widget.TabHost: android.view.View getCurrentView()>
<android.content.IntentFilter$AuthorityEntry: int getPort()>
<com.android.org.bouncycastle.asn1.DERUTCTime: java.util.Date getDate()>
<android.content.res.Configuration: int getLayoutDirection()>
<com.android.exchange.adapter.Parser: java.io.InputStream getInput()>
<com.android.videoeditor.ExportOptionsDialog: android.app.Dialog create(android.content.Context,com.android.videoeditor.ExportOptionsDialog$ExportOptionsListener,android.content.DialogInterface$OnClickListener,android.content.DialogInterface$OnCancelListener,int)>
<android.filterfw.core.SimpleFrameManager: android.filterfw.core.Frame releaseFrame(android.filterfw.core.Frame)>
<com.android.camera.MosaicFrameProcessor: com.android.camera.MosaicFrameProcessor getInstance()>
<android.media.videoeditor.Overlay: long getDuration()>
<com.android.inputmethod.latin.RichInputConnection: java.lang.String getWordAtCursor(java.lang.String)>
<android.content.pm.IPackageDataObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.widget.HeaderViewListAdapter: java.lang.Object getItem(int)>
<android.widget.ArrayAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<android.view.animation.Animation: long getStartOffset()>
<android.content.SyncStorageEngine: java.util.ArrayList getAuthorities()>
<android.view.WindowManagerGlobal: android.view.IWindowManager getWindowManagerService()>
<android.view.IWindowManager$Stub$Proxy: float[] getAnimationScales()>
<android.app.ActivityManagerProxy: java.util.List getProcessesInErrorState()>
<android.media.videoeditor.MediaImageItem: int getFileType()>
<com.android.commands.monkey.MonkeyMotionEvent: long getEventTime()>
<com.android.mms.dom.smil.SmilParElementImpl: org.w3c.dom.NodeList getActiveChildrenAt(float)>
<android.content.pm.PathPermission: java.lang.String getWritePermission()>
<android.app.Fragment: int getTargetRequestCode()>
<android.hardware.input.InputManager: java.lang.String getCurrentKeyboardLayoutForInputDevice(java.lang.String)>
<android.text.method.TextKeyListener: android.text.method.TextKeyListener getInstance(boolean,android.text.method.TextKeyListener$Capitalize)>
<android.content.pm.IPackageManager$Stub$Proxy: int getPackageUid(java.lang.String,int)>
<com.android.org.bouncycastle.asn1.BERApplicationSpecificParser: com.android.org.bouncycastle.asn1.ASN1Primitive getLoadedObject()>
<android.view.InputDevice: int[] getDeviceIds()>
<android.content.pm.PackageManager: void getPackageSizeInfo(java.lang.String,android.content.pm.IPackageStatsObserver)>
<com.android.emailcommon.internet.MimeMessage: java.lang.String[] getHeader(java.lang.String)>
<android.view.HardwareRenderer$GlRenderer: android.view.HardwareCanvas getCanvas()>
<android.util.XmlPullAttributes: float getAttributeFloatValue(int,float)>
<android.text.format.Time: int getWeekNumber()>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: int getChildCount()>
<android.filterfw.core.CachedFrameManager: android.filterfw.core.Frame newFrame(android.filterfw.core.FrameFormat)>
<android.webkit.WebViewClassic: java.lang.String getSelection()>
<android.app.IStopUserCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.content.res.Resources: android.content.res.ColorStateList getColorStateList(int)>
<com.android.internal.widget.multiwaveview.GlowPadView: int getTargetDescriptionsResourceId()>
<android.os.AsyncTask: java.lang.Object get()>
<com.android.mms.model.MediaModel: int getDuration()>
<com.android.inputmethod.latin.BinaryDictionary: java.util.ArrayList getSuggestionsWithSessionId(com.android.inputmethod.latin.WordComposer,java.lang.CharSequence,com.android.inputmethod.keyboard.ProximityInfo,int)>
<android.widget.DatePicker: int getDayOfMonth()>
<android.view.ViewConfiguration: int getKeyRepeatDelay()>
<android.accounts.IAccountManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.widget.TextView: android.text.TextPaint getPaint()>
<android.media.MediaSyncEvent: int getType()>
<android.os.Debug: int getThreadGcInvocationCount()>
<android.util.EventLog$Event: int getProcessId()>
<android.widget.TextView: boolean getDefaultEditable()>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: int getCountryCode()>
<android.hardware.usb.UsbDevice: int getProductId()>
<com.android.systemui.recent.RecentsHorizontalScrollView: android.view.View getChildContentView(android.view.View)>
<com.android.mms.TempFileProvider: java.lang.String getScrapPath(android.content.Context,java.lang.String)>
<com.android.email.mail.store.ImapFolder: com.android.emailcommon.mail.Message[] getMessagesInternal(java.lang.String[],com.android.emailcommon.mail.Folder$MessageRetrievalListener)>
<android.app.ApplicationPackageManager: java.util.List queryIntentActivitiesAsUser(android.content.Intent,int,int)>
<android.graphics.drawable.AnimatedRotateDrawable: android.graphics.drawable.Drawable getDrawable()>
<com.android.inputmethod.compat.SuggestionSpanUtils: java.lang.CharSequence getTextWithAutoCorrectionIndicatorUnderline(android.content.Context,java.lang.CharSequence)>
<com.android.deskclock.timer.TimerFragment$TimersListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.email.activity.UIControllerOnePane$ActionBarControllerCallback: long getUIAccountId()>
<android.media.AudioManager: android.media.IRingtonePlayer getRingtonePlayer()>
<android.support.v4.app.NotificationCompat$Builder: android.app.Notification getNotification()>
<android.filterfw.format.PrimitiveFormat: android.filterfw.core.MutableFrameFormat createDoubleFormat(int,int)>
<com.android.email.Preferences: java.lang.String getLegacyBackupPreference(android.content.Context)>
<com.android.internal.os.ZygoteConnection: java.io.FileDescriptor getFileDesciptor()>
<android.content.res.XmlBlock$Parser: java.lang.String getNamespace(java.lang.String)>
<android.view.ViewGroup$ChildListForAccessibility: android.view.View getChildAt(int)>
<com.android.email.ResourceHelper: int getAccountColorIndex(long)>
<android.os.SystemProperties: int getInt(java.lang.String,int)>
<android.renderscript.Element: android.renderscript.Element getSubElement(int)>
<android.view.View: int getScrollBarStyle()>
<com.android.org.bouncycastle.asn1.x509.SubjectPublicKeyInfo: com.android.org.bouncycastle.asn1.x509.SubjectPublicKeyInfo getInstance(java.lang.Object)>
<com.android.email.activity.MailboxFragmentAdapter: long getId(int)>
<android.graphics.Interpolator: int getValueCount()>
<com.android.phone.PhoneUtils: boolean getMute()>
<android.content.BroadcastReceiver: android.content.BroadcastReceiver$PendingResult getPendingResult()>
<android.os.IHardwareService$Stub: android.os.IBinder asBinder()>
<android.hardware.Camera$Parameters: java.lang.String getAntibanding()>
<android.media.videoeditor.VideoEditorImpl: android.media.videoeditor.MediaItem getMediaItem(java.lang.String)>
<com.android.deskclock.widget.multiwaveview.TargetDrawable: int getHeight()>
<com.android.internal.view.menu.MenuBuilder: java.lang.String getActionViewStatesKey()>
<android.widget.BaseExpandableListAdapter: int getGroupType(int)>
<com.android.mms.transaction.ReadRecTransaction: byte[] getPdu(java.lang.String)>
<android.app.SearchableInfo: android.app.SearchableInfo getActivityMetaData(android.content.Context,android.content.pm.ActivityInfo,int)>
<com.android.internal.widget.IRemoteViewsFactory$Stub$Proxy: long getItemId(int)>
<android.widget.Editor: android.widget.Editor$SelectionModifierCursorController getSelectionController()>
<android.os.Environment$UserEnvironment: java.io.File getExternalStorageAppObbDirectory(java.lang.String)>
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>
<com.android.mms.ui.MessageListAdapter: com.android.mms.ui.MessageItem getCachedMessageItem(java.lang.String,long,android.database.Cursor)>
<android.hardware.display.WifiDisplay: java.lang.String getFriendlyDisplayName()>
<com.android.mms.ui.DeliveryReportAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<android.widget.Scroller: float getCurrVelocity()>
<android.text.method.DateKeyListener: char[] getAcceptedChars()>
<android.media.audiofx.BassBoost: short getRoundedStrength()>
<android.text.method.ArrowKeyMovementMethod: android.text.method.MovementMethod getInstance()>
<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForRegion(java.lang.String)>
<android.widget.ExpandableListConnector: android.widget.ExpandableListConnector$PositionMetadata getUnflattenedPos(int)>
<android.security.KeyChain$KeyChainConnection: android.security.IKeyChainService getService()>
<android.graphics.Paint: int getTextRunCursor(java.lang.CharSequence,int,int,int,int,int)>
<android.webkit.WebSettingsClassic$AutoFillProfile: java.lang.String getFullName()>
<android.filterfw.core.GLFrame: java.nio.ByteBuffer getData()>
<android.widget.AbsSeekBar: int getKeyProgressIncrement()>
<android.widget.AbsListView: int getChoiceMode()>
<android.widget.TextView$Marquee: float getScroll()>
<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtype()>
<com.android.phone.OtaUtils: com.android.phone.OtaUtils$CdmaOtaInCallScreenUiState$State getCdmaOtaInCallScreenUiState()>
<com.android.mms.layout.HVGALayoutParameters: int getTextHeight()>
<android.webkit.Plugin: java.lang.String getName()>
<com.google.android.apps.lightcycle.sensor.OrientationEKF: double getHeadingDegrees()>
<com.android.launcher2.WallpaperChooserDialogFragment$ImageAdapter: int getCount()>
<com.android.mms.model.SlideModel: com.android.mms.model.TextModel getText()>
<com.android.mms.model.SmilHelper: org.w3c.dom.smil.SMILParElement addPar(org.w3c.dom.smil.SMILDocument)>
<com.android.wallpaper.grass.ScriptField_Vertex: android.renderscript.Element createElement(android.renderscript.RenderScript)>
<android.opengl.GLSurfaceView: int getDebugFlags()>
<android.view.inputmethod.InputBinding: int getUid()>
<com.android.launcher2.Cling: java.lang.String getDrawIdentifier()>
<android.app.ActivityManager: int getLauncherLargeIconDensity()>
<android.widget.ActivityChooserView$ActivityChooserViewAdapter: android.content.pm.ResolveInfo getDefaultActivity()>
<com.android.email.activity.ShortcutPickerFragment$MailboxShortcutPickerFragment: int getFilter()>
<android.webkit.WebHistoryItemClassic: android.graphics.Bitmap getFavicon()>
<android.view.TextureView: android.graphics.SurfaceTexture getSurfaceTexture()>
<android.view.ViewConfiguration: long getZoomControlsTimeout()>
<android.gesture.GestureLibrary: java.util.ArrayList recognize(android.gesture.Gesture)>
<com.android.exchange.EasSyncService: android.os.Bundle validateAccount(com.android.emailcommon.provider.HostAuth,android.content.Context)>
<com.android.videoeditor.service.VideoEditorProject: com.android.videoeditor.service.MovieMediaItem getInsertAfterMediaItem(long)>
<android.text.Layout: int getLineForVertical(int)>
<android.text.SpannableString: int getSpanStart(java.lang.Object)>
<com.android.launcher2.Workspace: float getChildrenOutlineAlpha()>
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice getInstalledPackages(int,java.lang.String,int)>
<android.view.LayoutInflater: android.view.LayoutInflater$Factory getFactory()>
<android.view.MotionEvent: float getYPrecision()>
<android.view.ViewRootImpl: android.view.ViewParent getParent()>
<com.android.internal.view.menu.ActionMenuPresenter: com.android.internal.view.menu.MenuView getMenuView(android.view.ViewGroup)>
<android.webkit.CacheManager$CacheResult: java.lang.String getExpiresString()>
<android.hardware.usb.UsbAccessory: java.lang.String getDescription()>
<com.android.inputmethod.latin.Utils: java.lang.String getStackTrace()>
<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewFpsRange()>
<android.renderscript.Element: android.renderscript.Element$DataType getDataType()>
<android.preference.ListPreference: java.lang.CharSequence getEntry()>
<com.android.ex.chips.SingleRecipientArrayAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<android.filterfw.core.Filter: android.filterfw.core.FrameFormat getInputFormat(java.lang.String)>
<com.android.videoeditor.util.MediaItemUtils: long getMinimumVideoItemDuration()>
<android.graphics.Paint: int getTextRunCursor(char[],int,int,int,int,int)>
<android.app.ContextImpl: java.lang.String getPackageCodePath()>
<android.content.ISyncStatusObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.content.ContentProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>
<android.content.res.Resources: android.content.res.XmlResourceParser loadXmlResourceParser(java.lang.String,int,int,java.lang.String)>
<android.preference.Preference: android.preference.PreferenceManager getPreferenceManager()>
<com.android.mms.ui.MessageListItem: com.android.mms.ui.MessageItem getMessageItem()>
<android.text.method.CharacterPickerDialog$OptionsAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<android.view.FocusFinder: int getWeightedDistanceFor(int,int)>
<android.text.format.DateFormat: java.text.DateFormat getTimeFormat(android.content.Context)>
<android.app.LoadedApk: android.app.Application getApplication()>
<android.webkit.WebViewClassic: android.webkit.WebViewClient getWebViewClient()>
<android.view.animation.Animation: boolean getTransformation(long,android.view.animation.Transformation,float)>
<android.preference.Preference: int getOrder()>
<android.view.InputEvent: int getSequenceNumber()>
<android.webkit.WebViewClassic: android.webkit.WebViewCore getWebViewCore()>
<android.widget.NumberPicker: float getBottomFadingEdgeStrength()>
<android.widget.CursorAdapter: android.database.Cursor runQueryOnBackgroundThread(java.lang.CharSequence)>
<com.android.mms.data.Conversation: android.net.Uri getUri(long)>
<android.app.ActivityManagerProxy: java.lang.String getPackageForToken(android.os.IBinder)>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int[],int,int,int,int,android.graphics.Bitmap$Config)>
<android.app.ContextImpl: java.lang.Object getSystemService(java.lang.String)>
<com.android.camera.Thumbnail: android.graphics.Bitmap createVideoThumbnailBitmap(java.lang.String,int)>
<android.widget.TextView: int getAccessibilityCursorPosition()>
<android.content.Intent: java.lang.String getStringExtra(java.lang.String)>
<com.android.server.input.PersistentDataStore$InputDeviceState: java.lang.String getCurrentKeyboardLayout()>
<com.android.email.widget.EmailWidget: int getViewTypeCount()>
<android.app.DownloadManager: android.database.Cursor query(android.app.DownloadManager$Query)>
<android.widget.PopupWindow: int getMaxAvailableHeight(android.view.View,int)>
<android.os.Message: android.os.Handler getTarget()>
<com.android.internal.policy.impl.GlobalActions$ToggleAction: android.view.View create(android.content.Context,android.view.View,android.view.ViewGroup,android.view.LayoutInflater)>
<com.android.email.mail.store.imap.ImapList: com.android.email.mail.store.imap.ImapString getKeyedStringOrEmpty(java.lang.String,boolean)>
<com.google.android.apps.lightcycle.camera.CameraUtility: com.google.android.apps.lightcycle.util.Size getPreviewSize()>
<android.content.res.Resources: android.content.res.AssetManager getAssets()>
<com.android.internal.policy.impl.keyguard.KeyguardAbsKeyInputView: int getWrongPasswordStringId()>
<com.android.internal.widget.ScrollingTabContainerView$TabAdapter: long getItemId(int)>
<com.android.mms.util.Recycler$SmsRecycler: android.database.Cursor getAllThreads(android.content.Context)>
<com.android.email.activity.MessageListItemCoordinates: int getWidth(android.view.View,boolean)>
<android.os.Bundle: byte getByte(java.lang.String)>
<com.android.internal.widget.multiwaveview.PointCloud$WaveManager: float getRadius()>
<com.android.server.pm.Installer: int getSizeInfo(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,android.content.pm.PackageStats)>
<android.view.Display: android.view.CompatibilityInfoHolder getCompatibilityInfo()>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: java.lang.String getId()>
<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<android.speech.tts.TtsEngines: android.speech.tts.TextToSpeech$EngineInfo getEngineInfo(java.lang.String)>
<android.widget.TabHost$ViewIdContentStrategy: android.view.View getContentView()>
<android.filterfw.core.SimpleFrameManager: android.filterfw.core.Frame newFrame(android.filterfw.core.FrameFormat)>
<com.android.emailcommon.internet.MimeBodyPart: java.lang.String getDisposition()>
<android.drm.mobile1.DrmConstraintInfo: int getCount()>
<android.widget.LinearLayout: android.graphics.drawable.Drawable getDividerDrawable()>
<android.graphics.Paint: android.graphics.Shader getShader()>
<android.app.LoadedApk: java.lang.String getDataDir()>
<android.hardware.SensorManager: int getSensors()>
<android.speech.tts.FileSynthesisCallback: int getMaxBufferSize()>
<android.os.storage.IObbActionListener$Stub: android.os.IBinder asBinder()>
<android.media.videoeditor.AudioTrack: java.lang.String getId()>
<android.widget.TextView: int getMinHeight()>
<android.view.InputDevice: android.view.InputDevice getDevice(int)>
<android.widget.PopupWindow: android.view.View getContentView()>
<android.content.Intent: android.os.Parcelable getParcelableExtra(java.lang.String)>
<com.android.launcher2.IconCache: android.graphics.drawable.Drawable getFullResIcon(android.content.res.Resources,int)>
<android.preference.PreferenceActivity$Header: java.lang.CharSequence getSummary(android.content.res.Resources)>
<com.android.internal.view.menu.MenuPopupHelper$MenuAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.org.bouncycastle.asn1.DERIA5String: com.android.org.bouncycastle.asn1.DERIA5String getInstance(java.lang.Object)>
<android.filterfw.core.Filter: android.filterfw.core.OutputPort getOutputPort(java.lang.String)>
<com.android.deskclock.stopwatch.StopwatchFragment$LapsListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityInteractionClient getInstanceForThread(long)>
<android.webkit.WebView$HitTestResult: java.lang.String getExtra()>
<com.android.videoeditor.widgets.AudioTrackView: android.media.videoeditor.WaveformData getWaveformData()>
<android.app.ActivityThread$ApplicationThread: android.os.Debug$MemoryInfo dumpMemInfo(java.io.FileDescriptor,boolean,boolean,java.lang.String[])>
<com.android.mms.model.SlideshowModel: com.android.mms.model.LayoutModel getLayout()>
<com.android.camera.Storage: long getAvailableSpace()>
<com.android.internal.widget.multiwaveview.GlowPadView: int getSuggestedMinimumHeight()>
<android.webkit.WebSettingsClassic$AutoFillProfile: java.lang.String getPhoneNumber()>
<com.android.mms.dom.smil.ElementParallelTimeContainerImpl: org.w3c.dom.NodeList getActiveChildrenAt(float)>
<android.preference.DialogPreference: android.view.View onCreateDialogView()>
<android.os.Bundle: double getDouble(java.lang.String)>
<com.android.exchange.adapter.Serializer: byte[] toByteArray()>
<android.hardware.Camera$Parameters: int getInt(java.lang.String)>
<android.widget.RemoteViewsAdapter: java.lang.Object getItem(int)>
<android.widget.GridLayout$Axis: int[] getLocations()>
<com.android.inputmethod.latin.ImfUtils: android.view.inputmethod.InputMethodInfo getInputMethodInfoOfThisIme(android.content.Context)>
<android.webkit.WebSettingsClassic: boolean getNavDump()>
<com.android.inputmethod.keyboard.KeyboardSwitcher: com.android.inputmethod.keyboard.KeyboardSwitcher getInstance()>
<com.android.server.sip.SipSessionGroup$SipSessionImpl: java.lang.String getCallId()>
<android.widget.TextView$CharWrapper: float getTextRunAdvances(int,int,int,int,int,float[],int,android.graphics.Paint,int)>
<android.widget.CursorAdapter: android.database.Cursor swapCursor(android.database.Cursor)>
<android.webkit.WebViewClassic$Factory: android.webkit.GeolocationPermissions getGeolocationPermissions()>
<com.android.camera.IconListPreference: int[] getImageIds()>
<android.opengl.GLUtils: int getType(android.graphics.Bitmap)>
<android.emoji.EmojiFactory: int getMinimumAndroidPua()>
<com.android.mms.model.MediaModel: int getMediaSize()>
<android.app.admin.DeviceAdminReceiver: android.content.ComponentName getWho(android.content.Context)>
<android.widget.ActivityChooserView$ActivityChooserViewAdapter: android.widget.ActivityChooserModel getDataModel()>
<com.android.launcher2.CellLayout: int getCellHeight()>
<android.accounts.AccountAuthenticatorCache: android.content.pm.RegisteredServicesCache$ServiceInfo getServiceInfo(android.accounts.AuthenticatorDescription,int)>
<com.android.server.wm.DisplayContent: android.view.DisplayInfo getDisplayInfo()>
<android.mtp.MtpObjectInfo: int getThumbPixWidth()>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordHistoryLength(android.content.ComponentName,int)>
<com.android.mms.MmsConfig: int getMaxTextLimit()>
<android.support.v4.view.VelocityTrackerCompat: float getYVelocity(android.view.VelocityTracker,int)>
<android.app.TaskStackBuilder: android.app.TaskStackBuilder addParentStack(android.content.ComponentName)>
<android.drm.mobile1.DrmRightsManager: android.drm.mobile1.DrmRights installRights(java.io.InputStream,int,java.lang.String)>
<android.view.InputQueue: android.view.InputChannel getInputChannel()>
<com.android.exchange.ExchangeService$AccountList: com.android.emailcommon.provider.Account getById(long)>
<android.view.accessibility.AccessibilityManager: java.util.List getEnabledAccessibilityServiceList(int)>
<com.android.deskclock.widget.multiwaveview.TargetDrawable$DrawableWithAlpha: float getAlpha()>
<android.provider.Telephony$Threads: long getOrCreateThreadId(android.content.Context,java.lang.String)>
<android.hardware.Sensor: int getVersion()>
<com.android.email.NotificationController: android.app.Notification createNewMessageNotification(long,long,android.database.Cursor,long,int,int)>
<android.app.IThumbnailReceiver$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.android.org.bouncycastle.asn1.x509.SubjectPublicKeyInfo: com.android.org.bouncycastle.asn1.x509.SubjectPublicKeyInfo getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)>
<android.widget.TableRow: int[] getColumnsWidths(int)>
<com.android.mms.model.LayoutModel: int getLayoutType()>
<android.view.InputDevice$MotionRange: float getFuzz()>
<android.content.res.AssetManager: java.lang.String[] getResourceStringArray(int)>
<android.os.CommonTimeConfig: long getMasterElectionGroupId()>
<android.text.method.PasswordTransformationMethod: android.text.method.PasswordTransformationMethod getInstance()>
<com.android.inputmethod.latin.InputPointers: int[] getYCoordinates()>
<android.graphics.drawable.ShapeDrawable: int getIntrinsicWidth()>
<android.app.ListActivity: long getSelectedItemId()>
<android.animation.KeyframeSet: java.lang.Object getValue(float)>
<com.android.camera.FocusOverlayManager: int getFocusState()>
<com.android.launcher2.Launcher: int[] getMinSpanForWidget(android.content.Context,android.appwidget.AppWidgetProviderInfo)>
<android.view.Display: java.lang.String getName()>
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerSession: android.view.textservice.SuggestionsInfo[] onGetSuggestionsMultiple(android.view.textservice.TextInfo[],int,boolean)>
<android.filterfw.core.GLFrame: android.graphics.Bitmap getBitmap()>
<android.os.DropBoxManager$Entry: java.lang.String getTag()>
<com.android.wallpaper.RenderScriptScene: android.renderscript.ScriptC getScript()>
<android.accounts.IAccountManager$Stub: android.accounts.IAccountManager asInterface(android.os.IBinder)>
<android.os.Parcel: byte[] marshall()>
<com.android.email.activity.UiUtilities: android.view.View getViewOrNull(android.app.Activity,int)>
<android.filterpacks.imageproc.BrightnessFilter: android.filterfw.core.Program getShaderProgram(android.filterfw.core.FilterContext)>
<android.os.Environment: java.io.File getEmulatedStorageSource(int)>
<android.widget.PopupMenu: android.view.Menu getMenu()>
<android.view.GLES20RecordingCanvas: android.view.GLES20RecordingCanvas getNextPoolable()>
<android.text.format.Time: java.lang.String getCurrentTimezone()>
<android.text.method.DigitsKeyListener: int getInputType()>
<com.android.internal.widget.ScrollingTabContainerView$TabAdapter: java.lang.Object getItem(int)>
<android.widget.AbsListView: android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()>
<android.provider.MediaStore: java.lang.String getVersion(android.content.Context)>
<android.widget.RemoteViewsAdapter$FixedSizeRemoteViewsCache: int[] getNextIndexToLoad()>
<android.provider.Settings$System: float getFloat(android.content.ContentResolver,java.lang.String,float)>
<android.renderscript.Mesh$Builder: android.renderscript.Type newType(android.renderscript.Element,int)>
<android.app.IUiModeManager$Stub$Proxy: int getCurrentModeType()>
<android.text.method.ScrollingMovementMethod: android.text.method.MovementMethod getInstance()>
<android.widget.TextView: float getShadowRadius()>
<android.widget.AutoCompleteTextView: int getListSelection()>
<android.filterfw.core.Frame: android.filterfw.core.Frame retain()>
<android.app.ApplicationPackageManager: java.util.List getPreferredPackages(int)>
<android.widget.Toast: float getHorizontalMargin()>
<com.android.server.wm.WindowState: android.graphics.Rect getGivenContentInsetsLw()>
<android.widget.Spinner: int getBaseline()>
<com.android.inputmethod.keyboard.PointerTracker: int getDistance(int,int,int,int)>
<android.view.InputDevice: java.util.List getMotionRanges()>
<com.android.inputmethod.latin.SettingsValues: android.view.inputmethod.InputMethodSubtype[] getAdditionalSubtypes()>
<android.content.ContentProvider$Transport: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)>
<com.google.android.apps.lightcycle.opengl.Sprite: int getWidth()>
<android.content.pm.ResolveInfo: int getIconResource()>
<com.android.server.sip.SipSessionGroup$SipSessionImpl: android.net.sip.SipProfile getLocalProfile()>
<com.android.mms.transaction.MessagingNotification$NotificationInfo: long getTime()>
<android.content.res.XmlBlock$Parser: int getStyleAttribute()>
<com.android.server.pm.PackageSettingBase: java.lang.String getInstallerPackageName()>
<com.android.inputmethod.latin.FileTransforms: java.io.InputStream getDecryptedStream(java.io.InputStream)>
<android.renderscript.ProgramStore: android.renderscript.ProgramStore$BlendSrcFunc getBlendSrcFunc()>
<android.preference.PreferenceActivity$Header: java.lang.CharSequence getTitle(android.content.res.Resources)>
<com.android.ex.chips.BaseRecipientAdapter: int getPhotoId()>
<android.app.TaskStackBuilder: android.content.Intent[] getIntents()>
<android.app.backup.IBackupManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()>
<android.widget.Spinner$DialogPopup: android.graphics.drawable.Drawable getBackground()>
<android.preference.DialogPreference: java.lang.CharSequence getPositiveButtonText()>
<android.text.Layout: int getLineBounds(int,android.graphics.Rect)>
<android.app.admin.DeviceAdminInfo: java.lang.String getTagForPolicy(int)>
<android.app.SearchableInfo$ActionKeyInfo: java.lang.String getSuggestActionMsgColumn()>
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>
<android.widget.TextView: int getRightPaddingOffset()>
<android.graphics.Paint: android.graphics.ColorFilter getColorFilter()>
<com.android.launcher2.AppsCustomizePagedView: int getPageForComponent(int)>
<android.renderscript.Script$FieldBase: android.renderscript.Element getElement()>
<com.android.internal.backup.IBackupTransport$Stub$Proxy: android.app.backup.RestoreSet[] getAvailableRestoreSets()>
<android.filterfw.core.SimpleFrame: java.nio.ByteBuffer getData()>
<android.test.IsolatedContext: java.io.File getFilesDir()>
<android.webkit.CallbackProxy$ResultTransport: java.lang.Object getResult()>
<com.android.internal.app.ActionBarImpl$TabImpl: java.lang.CharSequence getText()>
<android.graphics.Canvas: android.graphics.Matrix getMatrix()>
<com.android.internal.os.storage.ExternalStorageFormatter: android.os.storage.IMountService getMountService()>
<android.provider.CallLog$Calls: java.lang.String getLastOutgoingCall(android.content.Context)>
<android.sax.Element: android.sax.Element getChild(java.lang.String,java.lang.String)>
<com.android.launcher2.LauncherModel: android.content.ComponentName getComponentNameFromResolveInfo(android.content.pm.ResolveInfo)>
<com.android.inputmethod.latin.LatinIME$BatchInputUpdater: com.android.inputmethod.latin.LatinIME$BatchInputUpdater getInstance()>
<com.android.launcher2.AppWidgetResizeFrame: android.graphics.Rect getWidgetSizeRanges(com.android.launcher2.Launcher,int,int,android.graphics.Rect)>
<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.PhoneNumberUtil getInstance()>
<com.android.inputmethod.latin.SubtypeSwitcher: com.android.inputmethod.latin.SubtypeSwitcher getInstance()>
<android.hardware.Camera$Parameters: int getJpegThumbnailQuality()>
<android.app.IAlarmManager$Stub: android.os.IBinder asBinder()>
<com.android.providers.applications.ApplicationsProvider: android.content.pm.PackageManager getPackageManager()>
<com.android.deskclock.widget.multiwaveview.TargetDrawable: float getX()>
<com.android.deskclock.widget.multiwaveview.TargetDrawable: float getY()>
<android.view.ViewConfiguration: float getScrollFriction()>
<android.test.IsolatedContext: java.lang.Object getSystemService(java.lang.String)>
<android.app.Fragment: android.app.LoaderManager getLoaderManager()>
<com.android.videoeditor.service.MovieMediaItem: com.android.videoeditor.service.MovieTransition getEndTransition()>
<android.content.pm.ContainerEncryptionParams: javax.crypto.SecretKey getMacKey()>
<com.android.commands.monkey.MonkeyEvent: int getEventType()>
<com.android.systemui.recent.RecentTasksLoader: java.util.ArrayList getLoadedTasks()>
<android.view.View: java.util.ArrayList getTouchables()>
<com.android.internal.widget.multiwaveview.PointCloud: float getScale()>
<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>
<com.android.inputmethod.keyboard.internal.KeyboardIconsSet: int getIconId(java.lang.String)>
<com.android.internal.view.BaseSurfaceHolder: int getRequestedFormat()>
<android.widget.TextView: java.lang.CharSequence getText()>
<android.media.videoeditor.OverlayFrame: java.lang.String getBitmapImageFileName()>
<android.app.ContextImpl: android.content.res.AssetManager getAssets()>
<android.util.NtpTrustedTime: android.util.NtpTrustedTime getInstance(android.content.Context)>
<android.widget.ActivityChooserView$ActivityChooserViewAdapter: java.lang.Object getItem(int)>
<android.provider.Settings$Secure: long getLongForUser(android.content.ContentResolver,java.lang.String,int)>
<com.google.android.picasasync.UploadTaskEntry: long getUploadedTime()>
<android.app.ApplicationPackageManager: java.util.List getAllPermissionGroups(int)>
<android.preference.PreferenceActivity: android.preference.PreferenceScreen getPreferenceScreen()>
<com.android.inputmethod.latin.makedict.FusionDictionary$CharGroup: com.android.inputmethod.latin.makedict.FusionDictionary$WeightedString getShortcut(java.lang.String)>
<android.webkit.WebHistoryItemClassic: java.lang.String getTitle()>
<com.android.phone.EmergencyDialer: android.app.Dialog onCreateDialog(int)>
<android.content.ContentResolver: android.content.IContentProvider acquireExistingProvider(android.content.Context,java.lang.String)>
<android.widget.Editor$SelectionModifierCursorController: int getMinTouchOffset()>
<android.view.ViewGroup: android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()>
<com.android.internal.policy.PolicyManager: android.view.Window makeNewWindow(android.content.Context)>
<com.android.internal.view.menu.MenuBuilder: java.util.ArrayList getNonActionItems()>
<com.android.internal.util.TypedProperties: int getInt(java.lang.String)>
<android.renderscript.RenderScript: android.renderscript.RenderScript$RSErrorHandler getErrorHandler()>
<android.view.MotionEvent: float getPressure(int)>
<com.android.internal.net.VpnProfile: byte[] encode()>
<android.widget.ActivityChooserView$ActivityChooserViewAdapter: int getCount()>
<android.view.MotionEvent: long getEventTime()>
<android.app.WallpaperManager: android.graphics.Bitmap generateBitmap(android.content.Context,android.graphics.Bitmap,int,int)>
<android.text.format.Time: int getJulianDay(long,long)>
<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getApplicationLogo(android.content.pm.ApplicationInfo)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumLetters(android.content.ComponentName,int)>
<com.android.internal.policy.impl.keyguard.KeyguardWidgetFrame: int getContentAppWidgetId()>
<android.os.UserManager: int getUserSerialNumber(int)>
<android.media.videoeditor.MediaItem: android.media.videoeditor.Effect getEffect(java.lang.String)>
<android.renderscript.Matrix2f: float[] getArray()>
<com.android.videoeditor.service.VideoEditorProject: int getZoomLevel()>
<android.os.IRemoteCallback$Stub: android.os.IBinder asBinder()>
<android.animation.ObjectAnimator: java.lang.Object getTarget()>
<com.android.email.Preferences: boolean getInhibitGraphicsAcceleration()>
<android.os.Environment$UserEnvironment: java.io.File getMediaStorageDirectory()>
<android.graphics.drawable.DrawableContainer: int getIntrinsicHeight()>
<com.google.android.apps.lightcycle.panorama.MessageDisplay: com.google.android.apps.lightcycle.opengl.Sprite access$200(com.google.android.apps.lightcycle.panorama.MessageDisplay,android.graphics.Bitmap,float,float)>
<android.view.InputChannel: java.lang.String getName()>
<android.webkit.ZoomManager: float getTextWrapScale()>
<com.android.internal.policy.impl.PhoneWindowManager: android.media.IAudioService getAudioService()>
<com.android.internal.logging.AndroidHandler: int getAndroidLevel(java.util.logging.Level)>
<android.view.ViewGroup: android.view.View findViewByAccessibilityIdTraversal(int)>
<android.drm.mobile1.DrmRawContent: java.lang.String getContentType()>
<com.android.launcher2.CellLayout$LayoutParams: int getHeight()>
<android.text.style.StyleSpan: int getStyle()>
<android.view.KeyEvent: long getEventTimeNano()>
<com.android.mms.model.ImageModel: boolean getMediaResizable()>
<android.webkit.CacheManager$CacheResult: java.io.InputStream getInputStream()>
<com.android.deskclock.Utils: int getPressedColorId()>
<android.widget.AdapterViewAnimator: int getNumActiveViews()>
<android.renderscript.Matrix4f: float[] getArray()>
<com.android.launcher2.DragLayer: float getDescendantCoordRelativeToSelf(android.view.View,int[])>
<android.graphics.NinePatch: int getHeight()>
<com.android.internal.util.BitwiseInputStream: byte[] readByteArray(int)>
<com.android.launcher2.Launcher: android.view.View createShortcut(com.android.launcher2.ShortcutInfo)>
<com.android.inputmethod.latin.BinaryDictionaryGetter: java.lang.String getTempFileName(java.lang.String,android.content.Context)>
<com.android.launcher2.AppsCustomizePagedView: android.view.View getPageAt(int)>
<android.media.videoeditor.AudioTrack: long getBoundaryBeginTime()>
<android.filterfw.geometry.Quad: float getBoundingHeight()>
<android.os.Bundle: long[] getLongArray(java.lang.String)>
<com.android.email.mail.store.ImapStore: com.android.email.mail.Transport cloneTransport()>
<com.android.videoeditor.service.MovieAudioTrack: long getStartTime()>
<android.os.storage.StorageVolume: java.lang.String getPath()>
<com.android.org.bouncycastle.asn1.ASN1Set: com.android.org.bouncycastle.asn1.ASN1Encodable[] toArray()>
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.PermissionInfo getPermissionInfo(java.lang.String,int)>
<com.android.camera.CameraSettings: com.android.camera.PreferenceGroup getPreferenceGroup(int)>
<com.android.systemui.statusbar.phone.PanelView: float getExpandedFraction()>
<android.os.ParcelUuid: java.util.UUID getUuid()>
<com.android.org.bouncycastle.asn1.x500.AttributeTypeAndValue: com.android.org.bouncycastle.asn1.ASN1ObjectIdentifier getType()>
<android.renderscript.Matrix3f: float[] getArray()>
<android.widget.GridLayout: android.widget.GridLayout$Alignment getAlignment(int,boolean)>
<com.android.internal.policy.impl.keyguard.PagedView$10: float getInterpolation(float)>
<com.google.android.gms.common.internal.GmsClient: android.os.IInterface getService()>
<com.google.android.apps.lightcycle.sensor.SensorReader: com.google.android.apps.lightcycle.math.Vector3 getFilteredAcceleration()>
<com.android.inputmethod.accessibility.AccessibleKeyboardViewProxy: com.android.inputmethod.accessibility.AccessibleKeyboardViewProxy getInstance()>
<android.content.SyncQueue: java.util.Collection getOperations()>
<com.android.server.sip.SipSessionGroup$SipSessionImpl: android.net.sip.SipProfile getPeerProfile()>
<android.app.ApplicationPackageManager: java.util.List getInstalledPackages(int)>
<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>
<android.app.ActivityManager: java.util.List getRecentTasksForUser(int,int,int)>
<android.media.videoeditor.MediaVideoItem: android.media.videoeditor.MediaArtistNativeHelper$ClipSettings getVideoClipProperties()>
<android.os.StrictMode: int getThreadPolicyMask()>
<com.android.launcher2.ShortcutInfo: android.graphics.Bitmap getIcon(com.android.launcher2.IconCache)>
<com.android.mms.model.LayoutModel: com.android.mms.model.RegionModel getImageRegion()>
<android.widget.CursorTreeAdapter: android.database.Cursor getGroup(int)>
<android.filterfw.format.PrimitiveFormat: android.filterfw.core.MutableFrameFormat createInt16Format(int)>
<com.android.launcher2.PagedView: int getChildOffset(int)>
<com.android.camera.ActivityBase: com.android.gallery3d.app.GalleryActionBar getGalleryActionBar()>
<android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String)>
<com.android.mms.dom.smil.ElementParallelTimeContainerImpl: float getImplicitDuration()>
<android.support.v4.view.ViewConfigurationCompat: int getScaledPagingTouchSlop(android.view.ViewConfiguration)>
<android.content.res.TypedArray: java.lang.String getString(int)>
<android.view.accessibility.AccessibilityRecord: int getRemovedCount()>
<com.android.providers.downloads.DownloadInfo: java.util.Collection getHeaders()>
<android.mtp.MtpDevice: int[] getObjectHandles(int,int,int)>
<android.view.MotionEvent: long getHistoricalEventTimeNano(int)>
<com.android.server.accessibility.ScreenMagnifier$MagnificationController: float getScaledOffsetX()>
<com.android.server.accessibility.ScreenMagnifier$MagnificationController: float getScaledOffsetY()>
<android.text.MeasuredText: float addStyleRun(android.text.TextPaint,android.text.style.MetricAffectingSpan[],int,android.graphics.Paint$FontMetricsInt)>
<android.app.SearchableInfo$ActionKeyInfo: java.lang.String getQueryActionMsg()>
<com.android.videoeditor.service.MovieOverlay: int getType()>
<com.android.internal.app.ActionBarImpl$TabImpl: android.view.View getCustomView()>
<android.media.videoeditor.Transition: java.util.List isEffectandOverlayOverlapping(android.media.videoeditor.MediaItem,android.media.videoeditor.MediaArtistNativeHelper$ClipSettings,int)>
<android.content.pm.ApplicationInfo: android.content.pm.ApplicationInfo getApplicationInfo()>
<android.widget.Switch: int getSwitchPadding()>
<android.app.admin.DevicePolicyManager: int getPasswordMinimumLength(android.content.ComponentName)>
<android.webkit.WebView: android.webkit.WebBackForwardList restoreState(android.os.Bundle)>
<com.android.camera.drawable.TextDrawable: int getIntrinsicHeight()>
<android.content.pm.PathPermission: java.lang.String getReadPermission()>
<android.app.ActivityManagerProxy: int getRequestedOrientation(android.os.IBinder)>
<android.view.ViewConfiguration: long getGlobalActionKeyTimeout()>
<android.widget.TextView: java.lang.String getPrivateImeOptions()>
<com.android.inputmethod.compat.CompatUtils: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>
<android.app.Activity: java.lang.String getLocalClassName()>
<com.android.launcher2.InterruptibleInOutAnimator: android.animation.ValueAnimator getAnimator()>
<android.os.Bundle: byte[] getByteArray(java.lang.String)>
<android.app.ActivityManager: com.android.internal.os.PkgUsageStats[] getAllPackageUsageStats()>
<android.media.videoeditor.MediaItem: android.media.videoeditor.Transition getEndTransition()>
<android.graphics.drawable.BitmapDrawable: int getIntrinsicWidth()>
<com.android.providers.telephony.SmsProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<com.android.mms.MmsConfig: int getAliasMaxChars()>
<android.view.inputmethod.InputMethodInfo: java.lang.String getPackageName()>
<android.media.MediaRouter: android.media.MediaRouter$RouteCategory getCategoryAt(int)>
<android.view.View: int getLabelFor()>
<android.renderscript.Mesh: int getVertexAllocationCount()>
<com.android.emailcommon.provider.Account: java.lang.String getProtocol(android.content.Context)>
<android.app.Dialog: android.view.View getCurrentFocus()>
<com.android.mms.util.CacheManager: com.android.mms.util.BlobCache getCache(android.content.Context,java.lang.String,int,int,int)>
<android.content.ClipData: int getItemCount()>
<android.opengl.ManagedEGLContext: javax.microedition.khronos.egl.EGLContext getContext()>
<android.accessibilityservice.AccessibilityServiceInfo: java.lang.String getId()>
<com.android.launcher2.DragView: float getInitialScale()>
<android.view.ViewConfiguration: int getEdgeSlop()>
<com.android.internal.view.IInputContext$Stub$Proxy: void getTextBeforeCursor(int,int,int,com.android.internal.view.IInputContextCallback)>
<android.widget.ScrollView: float getTopFadingEdgeStrength()>
<android.content.pm.IPackageManager$Stub$Proxy: java.util.List queryContentProviders(java.lang.String,int,int)>
<android.app.PendingIntent: android.app.PendingIntent getActivities(android.content.Context,int,android.content.Intent[],int,android.os.Bundle)>
<android.webkit.WebStorage$Origin: long getUsage()>
<android.provider.Settings$System: long getLongForUser(android.content.ContentResolver,java.lang.String,long,int)>
<android.accounts.AbstractAccountAuthenticator: android.os.IBinder getIBinder()>
<android.content.pm.VerificationParams: android.content.pm.ManifestDigest getManifestDigest()>
<android.provider.Settings$Global: java.lang.String getBluetoothHeadsetPriorityKey(java.lang.String)>
<android.widget.NumberPicker$InputTextFilter: char[] getAcceptedChars()>
<android.content.ContentProviderClient: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)>
<com.android.i18n.phonenumbers.geocoding.MappingFileProvider: java.lang.String getFileName(int,java.lang.String,java.lang.String,java.lang.String)>
<android.app.admin.DevicePolicyManager: android.content.ComponentName setGlobalProxy(android.content.ComponentName,java.net.Proxy,java.util.List)>
<com.android.internal.widget.ScrollingTabContainerView$TabView: android.app.ActionBar$Tab getTab()>
<android.widget.RemoteViewsService$RemoteViewsFactoryAdapter: long getItemId(int)>
<com.android.inputmethod.latin.suggestions.MoreSuggestions$MoreSuggestionsParam: int getNumColumnInRow(int)>
<android.content.ContextWrapper: android.view.CompatibilityInfoHolder getCompatibilityInfo(int)>
<android.drm.DrmManagerClient: android.content.ContentValues getMetadata(java.lang.String)>
<android.webkit.WebSettingsClassic: boolean getLoadsImagesAutomatically()>
<android.accounts.AccountAuthenticatorCache: android.accounts.AuthenticatorDescription parseServiceAttributes(android.content.res.Resources,java.lang.String,android.util.AttributeSet)>
<android.view.inputmethod.InputMethodInfo: int getIsDefaultResourceId()>
<com.android.internal.widget.multiwaveview.GlowPadView: int getScaledSuggestedMinimumWidth()>
<com.android.videoeditor.LoadPreviewBitmapTask: android.graphics.Bitmap doInBackground(java.lang.Void[])>
<com.android.mms.transaction.DefaultRetryScheme: int getRetryLimit()>
<com.android.internal.policy.impl.keyguard.KeyguardHostView$7: android.content.Context getContext()>
<android.util.Singleton: java.lang.Object get()>
<com.android.internal.policy.impl.keyguard.PagedView: int getViewportWidth()>
<android.preference.Preference: java.lang.String getFragment()>
<com.android.launcher2.Launcher: int[] getSpanForWidget(android.content.Context,android.content.ComponentName,int,int)>
<android.content.res.AssetManager: boolean getThemeValue(int,int,android.util.TypedValue,boolean)>
<android.view.PointerIcon: float getHotSpotY()>
<android.view.PointerIcon: float getHotSpotX()>
<android.text.method.TimeKeyListener: int getInputType()>
<com.android.camera.CameraScreenNail: int getHeight()>
<com.android.wallpaper.grass.ScriptField_Blade: android.renderscript.Element createElement(android.renderscript.RenderScript)>
<com.android.ex.chips.BaseRecipientAdapter: long getItemId(int)>
<android.view.accessibility.AccessibilityInteractionClient: android.accessibilityservice.IAccessibilityServiceConnection getConnection(int)>
<android.hardware.Camera$Parameters: java.util.List getSupportedPictureSizes()>
<android.view.Display: int getMaximumSizeDimension()>
<com.android.inputmethod.keyboard.MoreKeysKeyboardView: com.android.inputmethod.keyboard.PointerTracker$DrawingProxy getDrawingProxy()>
<com.android.server.NativeDaemonConnectorException: java.lang.String getCmd()>
<com.android.internal.widget.WaveView: int getSuggestedMinimumWidth()>
<com.android.server.wm.WindowState: com.android.server.wm.WindowList getWindowList()>
<android.widget.AbsListView: boolean performLongPress(android.view.View,int,long)>
<android.webkit.WebViewClassic$SelectionHandleAlpha: int getTargetAlpha()>
<com.android.emailcommon.provider.Account: android.net.Uri save(android.content.Context)>
<android.filterfw.core.SerializedFrame: android.graphics.Bitmap getBitmap()>
<android.gesture.GestureLibrary: java.util.Set getGestureEntries()>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int[],int,int,android.graphics.Bitmap$Config)>
<android.content.ContentProvider: java.lang.String getReadPermission()>
<android.content.IOnPrimaryClipChangedListener$Stub: android.os.IBinder asBinder()>
<android.view.View: boolean getGlobalVisibleRect(android.graphics.Rect,android.graphics.Point)>
<com.android.email.widget.WidgetManager: long loadAccountIdPref(android.content.Context,int)>
<android.app.ActivityManager: java.util.List getRunningServices(int)>
<android.filterpacks.imageproc.ImageStitcher: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)>
<com.android.internal.widget.multiwaveview.PointCloud$GlowManager: float getRadius()>
<android.hardware.LegacySensorManager: int getSensors()>
<com.android.launcher2.CellLayout: android.view.View getChildAt(int,int)>
<android.app.Activity: android.content.ComponentName getComponentName()>
<com.android.phone.CdmaPhoneCallState: com.android.phone.CdmaPhoneCallState$PhoneCallState getPreviousCallState()>
<com.android.internal.view.menu.MenuItemImpl: java.lang.Runnable getCallback()>
<com.google.android.picasastore.PicasaStoreFacade: java.lang.String getAuthority()>
<android.hardware.LegacySensorManager: int getRotation()>
<android.webkit.WebSettingsClassic: boolean getUseFixedViewport()>
<com.google.android.apps.lightcycle.panorama.PhotoCollection: float[] getCameraToWorld(int)>
<android.drm.DrmManagerClient: android.content.ContentValues getConstraints(java.lang.String,int)>
<android.gesture.GestureStore: android.gesture.Learner getLearner()>
<com.android.systemui.recent.RecentTasksLoader: com.android.systemui.recent.TaskDescription createTaskDescription(int,int,android.content.Intent,android.content.ComponentName,java.lang.CharSequence)>
<com.android.inputmethod.keyboard.MainKeyboardView: int getPointerCount()>
<android.view.AccessibilityIterators$WordTextSegmentIterator: android.view.AccessibilityIterators$WordTextSegmentIterator getInstance(java.util.Locale)>
<android.util.LongSparseArray: java.lang.Object get(long)>
<android.widget.EditText: boolean getDefaultEditable()>
<android.hardware.SensorManager: float[] getOrientation(float[],float[])>
<com.android.server.display.LogicalDisplay: android.view.DisplayInfo getDisplayInfoLocked()>
<android.media.videoeditor.MediaProperties: int[] getSupportedVideoBitrates()>
<com.google.android.apps.lightcycle.LightCycleApp: com.google.android.apps.lightcycle.camera.CameraUtility getCameraUtility()>
<com.android.mms.model.ImageModel: android.graphics.Bitmap getBitmap(int,int)>
<android.content.res.XmlBlock$Parser: java.lang.String getPositionDescription()>
<android.webkit.WebViewCore: android.webkit.DeviceOrientationService getDeviceOrientationService()>
<android.app.Activity: android.view.Window getWindow()>
<android.media.videoeditor.MediaVideoItem: int getAudioBitrate()>
<com.android.mms.dom.DocumentImpl: java.lang.String getXmlVersion()>
<android.os.UserManager: android.os.UserHandle getUserForSerialNumber(long)>
<com.android.inputmethod.latin.RichInputConnection: java.lang.CharSequence getNthPreviousWord(java.lang.String,int)>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: java.util.List numberFormats()>
<android.text.DynamicLayout: int getEllipsisCount(int)>
<android.hardware.SystemSensorManager$ListenerDelegate: java.lang.Object getListener()>
<com.android.org.bouncycastle.asn1.ASN1Set: com.android.org.bouncycastle.asn1.ASN1Set getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)>
<com.android.videoeditor.widgets.ImageViewTouchBase: float getMaxZoom()>
<com.android.camera.ui.PieItem: float getSweep()>
<android.renderscript.ProgramVertexFixedFunction$Builder: android.renderscript.Type getConstantInputType(android.renderscript.RenderScript)>
<android.app.WallpaperManager$FastBitmapDrawable: int getOpacity()>
<android.widget.SearchView: java.lang.CharSequence getQuery()>
<android.view.inputmethod.InputMethodSubtype: int getNameResId()>
<com.android.org.bouncycastle.asn1.ASN1OutputStream: com.android.org.bouncycastle.asn1.ASN1OutputStream getDLSubStream()>
<android.widget.GridLayout$Alignment: android.widget.GridLayout$Bounds getBounds()>
<android.widget.Spinner: android.graphics.drawable.Drawable getPopupBackground()>
<android.widget.Toast: int getGravity()>
<android.content.Context: int getThemeResId()>
<android.view.View: float getAlpha()>
<android.webkit.WebSettings: int getMinimumLogicalFontSize()>
<com.android.launcher2.PagedView: float getScrollProgress(int,android.view.View,int)>
<android.app.PendingIntent: android.app.PendingIntent getBroadcastAsUser(android.content.Context,int,android.content.Intent,int,android.os.UserHandle)>
<android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>
<android.media.Metadata: double getDouble(int)>
<com.android.server.display.WifiDisplayController: android.hardware.display.WifiDisplay access$2200(android.net.wifi.p2p.WifiP2pDevice)>
<android.widget.ExpandableListPosition: long getPackedPosition()>
<com.android.inputmethod.keyboard.PointerTracker: com.android.inputmethod.keyboard.internal.GestureStrokeWithPreviewPoints getGestureStrokeWithPreviewPoints()>
<android.webkit.CacheManager: java.io.File getCacheFileBaseDir()>
<android.content.res.Resources: java.lang.String getResourcePackageName(int)>
<com.android.videoeditor.OverlayType: int getType()>
<android.view.View: int getSuggestedMinimumHeight()>
<com.android.mms.model.AudioModel: java.util.Map getExtras()>
<com.android.org.bouncycastle.asn1.x509.X509DefaultEntryConverter: com.android.org.bouncycastle.asn1.ASN1Primitive getConvertedValue(com.android.org.bouncycastle.asn1.ASN1ObjectIdentifier,java.lang.String)>
<android.widget.TextView: int getMinLines()>
<android.webkit.HTML5VideoViewProxy: android.content.Context getContext()>
<android.content.ContentValues: java.lang.Float getAsFloat(java.lang.String)>
<android.security.KeyStore: byte[] get(java.lang.String)>
<android.widget.TextView: android.text.method.TransformationMethod getTransformationMethod()>
<android.widget.AbsListView$RecycleBin: android.view.View getScrapView(int)>
<com.android.mms.transaction.TransactionSettings: java.lang.String getMmscUrl()>
<android.media.audiofx.AudioEffect: int getParameter(int[],int[])>
<com.android.inputmethod.keyboard.KeyDetector: int getKeyHysteresisDistanceSquared(boolean)>
<android.webkit.CallbackProxy: android.webkit.WebBackForwardListClient getWebBackForwardListClient()>
<android.webkit.CallbackProxy: android.webkit.WebChromeClient getWebChromeClient()>
<com.android.systemui.statusbar.tablet.TabletStatusBar: android.view.WindowManager$LayoutParams getSearchLayoutParams(android.view.ViewGroup$LayoutParams)>
<com.android.email.activity.AccountSelectorAdapter$CursorWithExtras: long getAccountId()>
<com.android.deskclock.stopwatch.StopwatchFragment$LapsListAdapter: long[] getLapTimes()>
<android.widget.TextView$Marquee: float getGhostOffset()>
<android.test.mock.MockContentResolver: android.content.IContentProvider acquireExistingProvider(android.content.Context,java.lang.String)>
<android.graphics.drawable.RotateDrawable: int getChangingConfigurations()>
<com.android.mms.dom.smil.SmilPlayer$TimelineEntry: org.w3c.dom.smil.ElementTime getElement()>
<com.android.inputmethod.keyboard.internal.KeySpecParser: int getIntValue(java.lang.String[],java.lang.String,int)>
<com.android.videoeditor.service.MovieAudioTrack: int getAudioSamplingFrequency()>
<android.app.ActivityOptions: java.lang.String getPackageName()>
<android.content.ContentProvider: android.content.IContentProvider getIContentProvider()>
<com.android.videoeditor.service.MovieTheme: com.android.videoeditor.service.MovieAudioTrack getAudioTrack()>
<com.android.ex.chips.RecipientEditTextView: android.text.style.ImageSpan getMoreChip()>
<com.android.inputmethod.latin.suggestions.MoreSuggestionsView: com.android.inputmethod.keyboard.KeyboardActionListener getKeyboardActionListener()>
<android.widget.TextView: float getLineSpacingExtra()>
<android.app.ContextImpl: java.io.File getCacheDir()>
<android.preference.PreferenceManager: android.preference.PreferenceScreen inflateFromIntent(android.content.Intent,android.preference.PreferenceScreen)>
<android.widget.ScrollBarDrawable: boolean getAlwaysDrawVerticalTrack()>
<com.android.videoeditor.service.MovieEffect: java.lang.String getId()>
<android.view.accessibility.IAccessibilityManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.google.android.gles_jni.EGLContextImpl: javax.microedition.khronos.opengles.GL getGL()>
<android.hardware.input.IInputManager$Stub$Proxy: android.view.InputDevice getInputDevice(int)>
<android.app.Activity: android.view.View getCurrentFocus()>
<com.android.launcher2.LauncherModel: com.android.launcher2.ShortcutInfo getShortcutInfo(android.content.pm.PackageManager,android.content.Intent,android.content.Context,android.database.Cursor,int,int,java.util.HashMap)>
<android.os.Bundle: java.util.ArrayList getIntegerArrayList(java.lang.String)>
<com.android.uiautomator.core.QueryController: java.lang.String getCurrentPackageName()>
<com.android.mms.ui.MessageListAdapter: android.database.Cursor getCursorForItem(com.android.mms.ui.MessageItem)>
<android.filterpacks.imageproc.ToRGBAFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)>
<android.mtp.MtpObjectInfo: int getImagePixDepth()>
<android.media.MediaRouter$RouteInfo: android.graphics.drawable.Drawable getIconDrawable()>
<android.view.ViewConfiguration: int getScaledScrollBarSize()>
<android.text.Layout: float getSpacingMultiplier()>
<android.renderscript.Type: int getCount()>
<com.android.phone.DTMFTwelveKeyDialer$DTMFKeyListener: char[] getAcceptedChars()>
<android.widget.AutoCompleteTextView: android.widget.ListAdapter getAdapter()>
<com.android.internal.policy.impl.IconUtilities: android.graphics.drawable.Drawable createIconDrawable(android.graphics.drawable.Drawable)>
<com.android.deskclock.timer.TimerFragment$TimersListAdapter: long getItemId(int)>
<com.android.server.accessibility.TouchExplorer$ReceivedPointerTracker: float getReceivedPointerDownY(int)>
<com.android.server.accessibility.TouchExplorer$ReceivedPointerTracker: float getReceivedPointerDownX(int)>
<android.app.LoadedApk: android.app.IServiceConnection getServiceDispatcher(android.content.ServiceConnection,android.content.Context,android.os.Handler,int)>
<android.widget.LinearLayout: android.view.View getVirtualChildAt(int)>
<android.os.CommonTimeConfig: java.net.InetSocketAddress getMasterElectionEndpoint()>
<android.webkit.WebViewClassic: java.lang.String getTitle()>
<com.android.inputmethod.keyboard.internal.GestureStrokeWithPreviewPoints: int getGestureStrokeId()>
<com.android.videoeditor.OverlaysAdapter: android.graphics.Bitmap loadImage(java.lang.Object)>
<com.android.mms.model.MediaModel: boolean getMediaResizable()>
<android.widget.AbsListView: android.graphics.drawable.Drawable getSelector()>
<com.android.ex.chips.BaseRecipientAdapter$DirectoryFilter: int getLimit()>
<com.android.internal.backup.LocalTransport: android.app.backup.RestoreSet[] getAvailableRestoreSets()>
<android.widget.ScrollView: int getMaxScrollAmount()>
<android.app.LoadedApk: java.lang.ClassLoader getClassLoader()>
<android.widget.AbsSpinner: int getChildHeight(android.view.View)>
<com.android.email.activity.UIControllerBase: com.android.email.activity.MessageListFragment getMessageListFragment()>
<android.hardware.Camera$Parameters: int getMinExposureCompensation()>
<com.android.server.sip.SipSessionGroup$MakeCallCommand: java.lang.String getSessionDescription()>
<android.app.ApplicationPackageManager: java.lang.String[] canonicalToCurrentPackageNames(java.lang.String[])>
<android.content.pm.IPackageManager$Stub$Proxy: java.util.List queryIntentServices(android.content.Intent,java.lang.String,int,int)>
<android.text.method.DigitsKeyListener: char[] getAcceptedChars()>
<com.android.exchange.EasResponse: int getStatus()>
<android.widget.TextView: java.lang.CharSequence getHint()>
<android.widget.ListPopupWindow: int getSoftInputMode()>
<android.webkit.WebSettingsClassic: boolean getLoadWithOverviewMode()>
<android.widget.CursorTreeAdapter: android.database.Cursor getCursor()>
<com.android.mms.MmsConfig: int getMinMessageCountPerThread()>
<com.android.internal.view.menu.MenuItemImpl: android.view.ActionProvider getActionProvider()>
<android.app.DialogFragment: int getTheme()>
<android.content.ClipData$Item: android.content.Intent getIntent()>
<android.filterfw.core.GLFrame: int[] getInts()>
<com.android.internal.util.MemInfoReader: long getFreeSize()>
<android.widget.ActivityChooserModel: int getHistoryMaxSize()>
<android.media.MediaRouter$RouteInfo: int getSupportedTypes()>
<android.graphics.YuvImage: int getHeight()>
<com.android.internal.os.ProcessStats: long[] getLastCpuSpeedTimes()>
<android.media.AudioTrack: int getAudioFormat()>
<android.text.method.TextKeyListener: android.text.method.TextKeyListener getInstance()>
<android.media.AudioTrack: float getMinVolume()>
<com.android.inputmethod.latin.suggestions.MoreSuggestionsView$2: com.android.inputmethod.keyboard.KeyDetector getKeyDetector()>
<android.graphics.drawable.LayerDrawable: android.graphics.drawable.Drawable getDrawable(int)>
<android.app.ApplicationLoaders: java.lang.ClassLoader getClassLoader(java.lang.String,java.lang.String,java.lang.ClassLoader)>
<com.android.internal.app.ActionBarImpl$TabImpl: java.lang.CharSequence getContentDescription()>
<com.android.mms.model.SlideshowModel: com.google.android.mms.pdu.PduBody getPduBody(android.content.Context,android.net.Uri)>
<android.renderscript.RSSurfaceView: android.renderscript.RenderScriptGL getRenderScriptGL()>
<android.preference.Preference: int getPersistedInt(int)>
<android.graphics.drawable.ScaleDrawable: int getIntrinsicWidth()>
<android.media.videoeditor.AudioTrack: int getAudioChannels()>
<android.content.res.TypedArray: android.graphics.drawable.Drawable getDrawable(int)>
<android.view.ViewGroup: android.view.animation.LayoutAnimationController getLayoutAnimation()>
<android.hardware.usb.IUsbManager$Stub$Proxy: android.hardware.usb.UsbAccessory getCurrentAccessory()>
<android.media.MediaRouter$RouteGroup: android.media.MediaRouter$RouteInfo getRouteAt(int)>
<android.app.ISearchManager$Stub$Proxy: java.util.List getSearchablesInGlobalSearch()>
<com.android.deskclock.timer.CountingTimerView$UnsignedTime: float calcTotalWidth(java.lang.String)>
<android.view.WindowManagerGlobal: android.view.IWindowSession getWindowSession(android.os.Looper)>
<android.mtp.MtpObjectInfo: int getImagePixWidth()>
<android.content.ContentResolver: android.content.IContentProvider acquireUnstableProvider(android.net.Uri)>
<com.android.launcher2.Workspace: android.animation.Animator getChangeStateAnimation(com.android.launcher2.Workspace$State,boolean)>
<android.webkit.ByteArrayBuilder: int getByteSize()>
<android.webkit.WebHistoryItemClassic: int getId()>
<android.view.KeyEvent: int getModifierMetaStateMask()>
<com.android.uiautomator.core.UiDevice: android.graphics.Point getDisplaySizeDp()>
<android.widget.SimpleCursorAdapter: android.widget.SimpleCursorAdapter$ViewBinder getViewBinder()>
<android.view.MotionEvent: int getFlags()>
<com.android.deskclock.worldclock.WorldClockAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<android.os.UserManager: android.content.pm.UserInfo getUserInfo(int)>
<com.android.camera.Storage: android.net.Uri addImage(android.content.ContentResolver,java.lang.String,long,android.location.Location,int,int,java.lang.String,int,int)>
<android.webkit.WebViewClassic$SelectionHandleAlpha: int getAlpha()>
<com.android.ex.chips.RecipientChip: com.android.ex.chips.RecipientEntry getEntry()>
<com.android.mms.dom.AttrImpl: boolean getSpecified()>
<android.widget.TextView: int getLeftPaddingOffset()>
<com.android.internal.policy.impl.keyguard.KeyguardHostView: long getUserActivityTimeout()>
<android.widget.GridLayout: android.widget.GridLayout$Alignment getAlignment(android.widget.GridLayout$Alignment,boolean)>
<com.android.mms.model.SlideModel: int getDuration()>
<android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>
<android.app.IActivityController$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.android.emailcommon.mail.PackedString: java.lang.String get(java.lang.String)>
<android.emoji.EmojiFactory: android.graphics.Bitmap getBitmapFromAndroidPua(int)>
<android.content.SyncStorageEngine: android.content.SyncStorageEngine$AuthorityInfo getOrCreateAuthority(android.accounts.Account,int,java.lang.String)>
<android.view.View: int getFadeHeight(boolean)>
<android.view.View: android.view.ContextMenu$ContextMenuInfo getContextMenuInfo()>
<android.graphics.drawable.DrawableContainer: int getIntrinsicWidth()>
<com.android.mms.MmsConfig: java.lang.String getUserAgent()>
<android.app.DownloadManager: java.lang.Long getMaxBytesOverMobile(android.content.Context)>
<com.android.org.bouncycastle.asn1.ASN1InputStream: int getLimit()>
<android.app.KeyguardManager: android.app.KeyguardManager$KeyguardLock newKeyguardLock(java.lang.String)>
<com.android.videoeditor.widgets.ProgressBar: com.android.videoeditor.widgets.ProgressBar getProgressBar(android.content.Context)>
<android.emoji.EmojiFactory: android.graphics.Bitmap getBitmapFromVendorSpecificSjis(char)>
<android.content.IIntentReceiver$Stub: android.os.IBinder asBinder()>
<android.os.Bundle: char[] getCharArray(java.lang.String)>
<android.app.ActivityThread: android.content.pm.IPackageManager getPackageManager()>
<android.view.Display: int getOrientation()>
<com.android.org.bouncycastle.asn1.ASN1Set: com.android.org.bouncycastle.asn1.ASN1SetParser parser()>
<android.media.videoeditor.MediaArtistNativeHelper: boolean getGeneratePreview()>
<com.android.server.accessibility.TouchExplorer$ReceivedPointerTracker: int getLastReceivedUpPointerId()>
<android.widget.AbsListView: android.os.Parcelable onSaveInstanceState()>
<android.media.audiofx.AudioEffect: int getParameter(byte[],byte[])>
<com.android.uiautomator.testrunner.UiAutomatorTestCase: android.os.Bundle getParams()>
<android.os.Environment$UserEnvironment: java.io.File getExternalStorageAndroidDataDir()>
<com.android.musicfx.seekbar.ProgressBar: android.graphics.drawable.Drawable getCurrentDrawable()>
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: int[] getAppWidgetIds(android.content.ComponentName)>
<android.widget.Editor$PositionListener: int getPositionX()>
<android.widget.Editor$PositionListener: int getPositionY()>
<com.android.org.bouncycastle.asn1.DefiniteLengthInputStream: int getRemaining()>
<com.android.providers.media.MediaProvider: int getDatabaseVersion(android.content.Context)>
<android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor getWallpaper(android.app.IWallpaperManagerCallback,android.os.Bundle)>
<com.android.camera.CameraSettings: int getMaxVideoDuration(android.content.Context)>
<android.filterfw.core.ShaderProgram: android.filterfw.core.GLEnvironment getGLEnvironment()>
<android.text.Layout: int getLineVisibleEnd(int)>
<android.support.v4.view.MotionEventCompat: int getPointerId(android.view.MotionEvent,int)>
<com.android.emailcommon.internet.MimeMessage: java.util.Date getSentDate()>
<android.widget.CursorTreeAdapter: int getGroupCount()>
<android.filterfw.core.InputPort: android.filterfw.core.OutputPort getSourcePort()>
<android.webkit.ZoomManager: float getScale()>
<android.widget.TextView: android.text.method.WordIterator getWordIterator()>
<android.webkit.HTML5VideoView: int getCurrentPosition()>
<android.app.ApplicationPackageManager: java.lang.String[] getPackagesForUid(int)>
<com.android.systemui.recent.RecentTasksLoader: com.android.systemui.recent.TaskDescription getFirstTask()>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: android.graphics.drawable.Drawable[] getChildren()>
<android.webkit.WebSettingsClassic: java.lang.String getStandardFontFamily()>
<android.media.videoeditor.VideoEditorProfile: int getExportProfile(int)>
<android.preference.PreferenceGroupAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.internal.content.PackageHelper: java.lang.String getSdFilesystem(java.lang.String)>
<android.view.View: int getHeight()>
<android.graphics.BitmapRegionDecoder: int getWidth()>
<android.media.videoeditor.VideoEditorProfile: int getExportLevel(int)>
<android.app.Fragment: boolean getUserVisibleHint()>
<com.android.systemui.statusbar.policy.NotificationRowLayout: android.view.View getChildAtPosition(android.view.MotionEvent)>
<android.text.Layout: int getOffsetToRightOf(int)>
<android.support.v4.view.PagerAdapter: android.os.Parcelable saveState()>
<android.util.EventLog$Event: int getTag()>
<android.content.pm.IPackageStatsObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.android.server.pm.PackageVerificationState: com.android.server.pm.PackageManagerService$InstallArgs getInstallArgs()>
<android.media.videoeditor.MediaVideoItem: int getFps()>
<com.android.internal.policy.impl.keyguard.KeyguardHostView$7: com.android.internal.policy.impl.keyguard.KeyguardSecurityCallback getCallback()>
<android.widget.ExpandableListConnector: android.widget.Filter getFilter()>
<android.content.Intent: android.content.Intent setClass(android.content.Context,java.lang.Class)>
<com.android.exchange.provider.ExchangeDirectoryProvider: android.database.Cursor buildGalResultCursor(java.lang.String[],com.android.exchange.provider.GalResult)>
<android.filterfw.core.CachedFrameManager: android.filterfw.core.Frame retainFrame(android.filterfw.core.Frame)>
<android.support.v4.view.VelocityTrackerCompat$HoneycombVelocityTrackerVersionImpl: float getYVelocity(android.view.VelocityTracker,int)>
<android.content.pm.PackageParser$Component: android.content.ComponentName getComponentName()>
<android.app.SharedPreferencesImpl: int getInt(java.lang.String,int)>
<com.android.email.mail.transport.DiscourseLogger: java.lang.String[] getLines()>
<android.content.Intent: int getIntExtra(java.lang.String,int)>
<com.android.org.bouncycastle.asn1.DERGeneralizedTime: java.lang.String getTime()>
<com.android.email.activity.MoveMessageToDialog: android.app.Dialog onCreateDialog(android.os.Bundle)>
<android.os.IUpdateLock$Stub: android.os.IBinder asBinder()>
<android.media.videoeditor.MediaImageItem: int getScaledHeight()>
<android.graphics.Paint: float getTextRunAdvances(java.lang.CharSequence,int,int,int,int,int,float[],int,int)>
<com.android.email.activity.AccountSelectorAdapter$CursorWithExtras: java.lang.String getAccountDisplayName()>
<com.android.internal.backup.IBackupTransport$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.android.mms.util.Recycler: com.android.mms.util.Recycler$MmsRecycler getMmsRecycler()>
<android.widget.PopupWindow: int getMaxAvailableHeight(android.view.View)>
<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>
<android.filterfw.core.KeyValueMap: java.lang.String getString(java.lang.String)>
<com.android.mms.data.Conversation: com.android.mms.data.Conversation get(android.content.Context,long,boolean)>
<com.android.server.AppWidgetServiceImpl: int[] getAppWidgetIds(com.android.server.AppWidgetServiceImpl$Provider)>
<com.android.internal.statusbar.StatusBarIconList: int getViewIndex(int)>
<com.android.email.mail.store.Pop3Store$Pop3Folder: com.android.emailcommon.mail.Folder$OpenMode getMode()>
<android.util.XmlPullAttributes: java.lang.String getIdAttribute()>
<android.view.IWindow$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.content.pm.ContainerEncryptionParams: byte[] getMacTag()>
<com.android.phone.PhoneGlobals: com.android.phone.PhoneGlobals getInstanceIfPrimary()>
<android.text.format.DateFormat: java.text.DateFormat getMediumDateFormat(android.content.Context)>
<android.hardware.Camera$Parameters: float getFocalLength()>
<android.widget.GridLayout: android.widget.GridLayout$LayoutParams getLayoutParams(android.view.View)>
<com.android.deskclock.TimerSetupView: int getLayoutId()>
<android.webkit.CookieSyncManager: android.webkit.CookieSyncManager getInstance()>
<android.text.StaticLayout: int getLineForVertical(int)>
<android.app.ActivityManagerProxy: android.content.Intent getIntentForIntentSender(android.content.IIntentSender)>
<android.widget.Spinner$DialogPopup: int getHorizontalOffset()>
<android.animation.ValueAnimator: float getDurationScale()>
<android.hardware.Sensor: java.lang.String getName()>
<android.speech.tts.TtsEngines: android.content.Intent getSettingsIntent(java.lang.String)>
<com.android.phone.PhoneUtils: java.lang.CharSequence getProviderLabel(android.content.Context,android.content.Intent)>
<com.android.internal.policy.impl.GlobalActions$MyAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<android.webkit.CookieManagerClassic: java.lang.String getCookie(android.net.WebAddress)>
<android.content.ContextWrapper: java.io.File getDatabasePath(java.lang.String)>
<com.android.server.pm.Settings: java.util.ArrayList getListOfIncompleteInstallPackagesLPr()>
<com.android.videoeditor.service.MovieAudioTrack: long getTimelineDuration()>
<android.view.ScaleGestureDetector: float getPreviousSpan()>
<com.android.email.Preferences: long getLastUsedAccountId()>
<android.app.admin.DevicePolicyManager: long getMaximumTimeToLock(android.content.ComponentName)>
<android.webkit.WebBackForwardList: android.webkit.WebHistoryItem getItemAtIndex(int)>
<com.android.commands.monkey.MonkeySourceScript: com.android.commands.monkey.MonkeyEvent getNextEvent()>
<com.android.inputmethod.latin.VibratorUtils: com.android.inputmethod.latin.VibratorUtils getInstance(android.content.Context)>
<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.DisplayDeviceInfo getDisplayDeviceInfoLocked()>
<com.android.wallpaper.galaxy.ScriptField_Particle: android.renderscript.Element createElement(android.renderscript.RenderScript)>
<android.content.BroadcastReceiver$PendingResult: android.os.Bundle getResultExtras(boolean)>
<com.android.commands.uiautomator.RunTestCommand: com.android.uiautomator.testrunner.UiAutomatorTestRunner getRunner()>
<android.media.videoeditor.MediaItem: int getRenderingMode()>
<com.android.phone.PhoneUtils: java.lang.String getCompactNameFromCallerInfo(com.android.internal.telephony.CallerInfo,android.content.Context)>
<android.view.GLES20Canvas: int getMaximumBitmapHeight()>
<com.android.org.bouncycastle.asn1.DERUTCTime: com.android.org.bouncycastle.asn1.ASN1UTCTime getInstance(java.lang.Object)>
<android.view.TextureView: android.graphics.Bitmap getBitmap(android.graphics.Bitmap)>
<android.content.Intent: java.io.Serializable getSerializableExtra(java.lang.String)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getMaximumFailedPasswordsForWipe(android.content.ComponentName,int)>
<android.app.SearchableInfo: int getVoiceLanguageId()>
<com.android.launcher2.CellLayout$ViewCluster: android.graphics.Rect getBoundingRect()>
<android.widget.AdapterViewAnimator: android.os.Parcelable onSaveInstanceState()>
<com.android.inputmethod.latin.ExpandableBinaryDictionary: java.util.ArrayList getSuggestions(com.android.inputmethod.latin.WordComposer,java.lang.CharSequence,com.android.inputmethod.keyboard.ProximityInfo)>
<android.widget.TextView: int getExtendedPaddingTop()>
<com.android.internal.database.SortCursor: java.lang.String[] getColumnNames()>
<android.widget.TextView: int getFadeHeight(boolean)>
<android.mtp.MtpStorage: java.lang.String getPath()>
<android.media.videoeditor.Transition: long getDuration()>
<com.google.android.mms.pdu.EncodedStringValue: java.lang.String getString()>
<android.app.IWallpaperManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.hardware.display.IDisplayManager$Stub$Proxy: android.hardware.display.WifiDisplayStatus getWifiDisplayStatus()>
<android.view.ViewConfiguration: int getScaledOverscrollDistance()>
<com.android.internal.database.SortCursor: long getLong(int)>
<android.app.ContextImpl: int getThemeResId()>
<android.app.SearchableInfo: android.content.ComponentName getSearchActivity()>
<android.os.storage.IMountShutdownObserver$Stub: android.os.IBinder asBinder()>
<android.view.IRotationWatcher$Stub: android.os.IBinder asBinder()>
<android.app.BackStackRecord: int getTransitionStyle()>
<android.view.MotionEvent: int getAction()>
<com.android.deskclock.widget.multiwaveview.TargetDrawable$DrawableWithAlpha: int getOpacity()>
<android.view.View: android.view.animation.Animation getAnimation()>
<android.widget.AccessibilityIterators$LineTextSegmentIterator: android.widget.AccessibilityIterators$LineTextSegmentIterator getInstance()>
<com.android.videoeditor.util.FileUtils: java.lang.String getAudioTrackFilename(android.content.Context,int)>
<android.webkit.WebSettings: int getDefaultFixedFontSize()>
<com.android.server.sip.SipSessionGroup: com.android.server.sip.SipSessionGroup$SipSessionImpl access$400(com.android.server.sip.SipSessionGroup,javax.sip.RequestEvent,android.net.sip.ISipSessionListener,javax.sip.ServerTransaction,int)>
<com.android.email.mail.store.imap.ImapList: com.android.email.mail.store.imap.ImapString getStringOrEmpty(int)>
<com.android.systemui.statusbar.phone.Ticker: java.util.ArrayList access$200(com.android.systemui.statusbar.phone.Ticker)>
<com.android.email.activity.UIControllerTwoPane$ActionBarControllerCallback: int getTitleMode()>
<com.android.camera.ListPreference: java.lang.String getKey()>
<android.view.GLES20Canvas: int getMaximumBitmapWidth()>
<android.hardware.display.WifiDisplayStatus: int getScanState()>
<android.view.ViewRootImpl: int getHostVisibility()>
<android.media.videoeditor.MediaVideoItem: int getVideoType()>
<com.android.systemui.statusbar.policy.DateView: int getSuggestedMinimumWidth()>
<com.android.internal.widget.multiwaveview.TargetDrawable$DrawableWithAlpha: float getAlpha()>
<com.android.internal.policy.impl.keyguard.PagedView: int getViewportHeight()>
<android.media.videoeditor.MediaArtistNativeHelper: int getMediaItemRenderingMode(int)>
<android.media.AudioManager: boolean isMusicActive()>
<android.text.BoringLayout: int getEllipsisStart(int)>
<android.animation.ValueAnimator: android.animation.TimeInterpolator getInterpolator()>
<android.widget.ScrollBarDrawable: int getOpacity()>
<android.webkit.WebSettingsClassic: boolean getUseWebViewBackgroundForOverscrollBackground()>
<com.android.email.activity.ShortcutPickerFragment$MailboxPickerLoader: android.database.Cursor loadInBackground()>
<android.content.BroadcastReceiver: android.os.IBinder peekService(android.content.Context,android.content.Intent)>
<android.media.videoeditor.MediaImageItem: int getScaledWidth()>
<com.android.server.input.PersistentDataStore: java.lang.String getCurrentKeyboardLayout(java.lang.String)>
<android.media.videoeditor.MediaItem: android.graphics.Bitmap[] getThumbnailList(int,int,long,long,int)>
<com.android.launcher2.CellLayout: com.android.launcher2.CellLayout$CellInfo getTag()>
<android.app.INotificationManager$Stub: android.os.IBinder asBinder()>
<com.android.internal.widget.multiwaveview.Ease$Linear$1: float getInterpolation(float)>
<android.preference.PreferenceGroup: int getPreferenceCount()>
<com.android.camera.CameraScreenNail: int getUncroppedRenderHeight()>
<android.speech.tts.BlockingAudioTrack: long getAudioLengthMs(int)>
<android.app.UiModeManager: int getNightMode()>
<android.hardware.usb.UsbAccessory: java.lang.String getManufacturer()>
<android.media.videoeditor.WaveformData: int getFramesCount()>
<android.webkit.MimeTypeMap: java.lang.String getFileExtensionFromUrl(java.lang.String)>
<android.view.animation.AnimationSet: long getDuration()>
<android.widget.RemoteViews: android.view.View apply(android.content.Context,android.view.ViewGroup,android.widget.RemoteViews$OnClickHandler)>
<android.media.MediaRouter$RouteInfo: android.view.Display getPresentationDisplay()>
<com.android.camera.FocusOverlayManager: java.lang.String getFocusMode()>
<android.widget.TextView: java.lang.CharSequence getTextForAccessibility()>
<android.hardware.input.KeyboardLayout: java.lang.String getCollection()>
<android.content.Intent: int getFlags()>
<android.view.IWindowSession$Stub$Proxy: void getDisplayFrame(android.view.IWindow,android.graphics.Rect)>
<android.widget.Switch: android.graphics.drawable.Drawable getTrackDrawable()>
<android.app.IWallpaperManager$Stub$Proxy: android.app.WallpaperInfo getWallpaperInfo()>
<com.android.commands.monkey.MonkeyMotionEvent: boolean getIntermediateNote()>
<android.content.BroadcastReceiver: int getResultCode()>
<android.os.Environment: java.io.File getDownloadCacheDirectory()>
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ProviderInfo getProviderInfo(android.content.ComponentName,int,int)>
<android.app.Dialog: android.app.Activity getOwnerActivity()>
<com.android.org.bouncycastle.asn1.DERObjectIdentifier: com.android.org.bouncycastle.asn1.ASN1ObjectIdentifier getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)>
<com.android.deskclock.AlarmClock$AlarmItemAdapter: int[] getSelectedAlarmsArray()>
<com.android.email.activity.AccountSelectorAdapter: long getAccountId(int)>
<com.android.videoeditor.service.VideoEditorProject: com.android.videoeditor.service.MovieMediaItem getLastMediaItem()>
<android.media.videoeditor.MediaArtistNativeHelper$Version: android.media.videoeditor.MediaArtistNativeHelper$Version getVersion()>
<android.filterpacks.imageproc.ToRGBFilter: android.filterfw.core.FrameFormat getConvertedFormat(android.filterfw.core.FrameFormat)>
<android.widget.TextView: int getBaseline()>
<com.android.inputmethod.latin.WordComposer: java.lang.CharSequence getAutoCorrectionOrNull()>
<com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.Set getSupportedRegions()>
<com.android.internal.view.InputConnectionWrapper: java.lang.CharSequence getSelectedText(int)>
<com.android.mms.model.MediaModel: com.android.mms.model.MediaModel$MediaAction getCurrentAction()>
<android.app.ContextImpl: java.io.File getObbDir()>
<android.app.Activity: android.app.FragmentManager getFragmentManager()>
<com.android.internal.widget.ActionBarContextView: java.lang.CharSequence getTitle()>
<android.content.ContentProvider$Transport: java.lang.String getType(android.net.Uri)>
<android.media.videoeditor.AudioTrack: int getVolume()>
<android.text.style.TextAppearanceSpan: android.content.res.ColorStateList getTextColor()>
<android.content.BroadcastReceiver: boolean getDebugUnregister()>
<android.preference.Preference: long getPersistedLong(long)>
<android.text.StaticLayout: int getLineTop(int)>
<android.app.LoadedApk$ReceiverDispatcher: java.lang.RuntimeException getUnregisterLocation()>
<android.hardware.usb.UsbInterface: int getInterfaceClass()>
<android.preference.Preference: java.lang.CharSequence getSummary()>
<android.provider.Settings$Global: java.lang.String getBluetoothA2dpSinkPriorityKey(java.lang.String)>
<com.android.internal.database.SortCursor: int getInt(int)>
<android.view.KeyEvent: long getEventTime()>
<com.android.internal.backup.IBackupTransport$Stub: android.os.IBinder asBinder()>
<android.app.AlertDialog: android.widget.ListView getListView()>
<android.view.LayoutInflater: android.view.View createViewFromTag(android.view.View,java.lang.String,android.util.AttributeSet)>
<android.graphics.Paint: float getFontSpacing()>
<android.media.ExifInterface: long getDateTime()>
<com.android.ex.chips.RecipientEditTextView: com.android.ex.chips.RecipientEntry access$2300(com.android.ex.chips.RecipientEditTextView,com.android.ex.chips.RecipientEntry)>
<android.webkit.WebSettingsClassic: boolean getBlockNetworkImage()>
<android.widget.Editor: android.widget.Editor$InsertionPointCursorController getInsertionController()>
<android.view.View: int getNextFocusRightId()>
<android.provider.Settings$Secure: long getLong(android.content.ContentResolver,java.lang.String,long)>
<com.android.org.bouncycastle.asn1.x509.AlgorithmIdentifier: com.android.org.bouncycastle.asn1.ASN1Encodable getParameters()>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getSharedCost()>
<android.webkit.WebHistoryItemClassic: java.lang.Object getCustomData()>
<android.media.videoeditor.MediaVideoItem: int getVolume()>
<android.view.GLES20Canvas: int getRenderer()>
<android.app.DownloadManager: java.lang.String getWhereClauseForIds(long[])>
<com.android.server.am.BroadcastQueue: com.android.server.am.BroadcastRecord getMatchingOrderedReceiver(android.os.IBinder)>
<android.media.videoeditor.MediaImageItem: android.graphics.Bitmap getThumbnail(int,int,long)>
<com.android.org.bouncycastle.asn1.DERApplicationSpecific: byte[] getContents()>
<android.view.KeyEvent: long getDownTime()>
<com.google.android.apps.lightcycle.panorama.LightCycleView: int getTotalPhotos()>
<android.content.Intent: android.content.Intent getSelector()>
<android.webkit.WebView: android.webkit.PluginList getPluginList()>
<android.content.ContextWrapper: android.content.res.AssetManager getAssets()>
<android.media.videoeditor.AudioTrack: long getStartTime()>
<android.os.UserManager: int getUserHandle(int)>
<android.os.Debug$MemoryInfo: int getTotalPrivateDirty()>
<android.app.ActivityManager$TaskThumbnails: android.graphics.Bitmap getSubThumbnail(int)>
<android.util.XmlPullAttributes: int getAttributeCount()>
<android.view.View: float getLeftFadingEdgeStrength()>
<android.widget.BaseExpandableListAdapter: int getChildTypeCount()>
<com.android.camera.FocusOverlayManager: boolean getAeAwbLock()>
<com.android.internal.statusbar.StatusBarIconList: java.lang.String getSlot(int)>
<android.util.XmlPullAttributes: java.lang.String getClassAttribute()>
<com.android.inputmethod.latin.RichInputConnection: int getCodePointBeforeCursor()>
<android.os.Bundle: java.util.ArrayList getStringArrayList(java.lang.String)>
<android.app.ContextImpl: android.content.res.Resources getResources()>
<android.widget.TimePicker$SavedState: int getMinute()>
<android.os.Build: java.lang.String getRadioVersion()>
<com.android.internal.app.IUsageStats$Stub: android.os.IBinder asBinder()>
<android.content.ContextWrapper: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>
<com.android.org.bouncycastle.asn1.BERTaggedObjectParser: com.android.org.bouncycastle.asn1.ASN1Encodable getObjectParser(int,boolean)>
<com.android.internal.util.StateMachine$LogRecords: com.android.internal.util.StateMachine$LogRec get(int)>
<android.widget.LinearLayout: int getBaseline()>
<android.webkit.ZoomManager: float getZoomOverviewScale()>
<android.view.CompatibilityInfoHolder: android.content.res.CompatibilityInfo get()>
<android.widget.CursorAdapter: java.lang.Object getItem(int)>
<android.app.DatePickerDialog: android.widget.DatePicker getDatePicker()>
<android.webkit.WebHistoryItem: java.lang.String getUrl()>
<android.animation.ValueAnimator: long getDuration()>
<android.view.accessibility.AccessibilityEvent: int getRecordCount()>
<android.widget.GridLayout: int getOrientation()>
<android.view.View: android.os.IBinder getWindowToken()>
<android.filterfw.core.FrameFormat: int getTarget()>
<android.widget.CursorTreeAdapter: long getGroupId(int)>
<com.android.phone.PhoneInterfaceManager: int getActivePhoneType()>
<android.media.MediaRouter: int getCategoryCount()>
<android.widget.RelativeLayout$LayoutParams: int[] getRules(int)>
<android.text.PackedObjectVector: java.lang.Object getValue(int,int)>
<android.webkit.CallbackProxy: android.webkit.WebViewClient getWebViewClient()>
<android.view.View: int getRawTextAlignment()>
<android.view.VelocityTracker$Estimator: float getXCoeff(int)>
<com.android.org.bouncycastle.asn1.x500.X500Name: com.android.org.bouncycastle.asn1.x500.RDN[] getRDNs()>
<com.android.server.NativeDaemonConnectorException: int getCode()>
<android.text.format.DateUtils: java.lang.String getStandaloneMonthString(int,int)>
<android.filterpacks.imageproc.FixedRotationFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)>
<android.content.Intent: char[] getCharArrayExtra(java.lang.String)>
<android.webkit.WebViewClassic: int getContentWidth()>
<android.media.audiofx.BassBoost: android.media.audiofx.BassBoost$Settings getProperties()>
<android.content.IClipboard$Stub$Proxy: android.content.ClipData getPrimaryClip(java.lang.String)>
<android.app.ContextImpl: int getWallpaperDesiredMinimumHeight()>
<com.android.internal.policy.impl.keyguard.PagedView: int getChildWidth(int)>
<com.android.launcher2.AppsCustomizePagedView: android.os.Bundle getDefaultOptionsForWidget(com.android.launcher2.Launcher,com.android.launcher2.PendingAddWidgetInfo)>
<android.widget.CursorTreeAdapter: android.database.Cursor runQueryOnBackgroundThread(java.lang.CharSequence)>
<android.text.style.MetricAffectingSpan$Passthrough: android.text.style.CharacterStyle getUnderlying()>
<com.android.uiautomator.core.QueryController: android.view.accessibility.AccessibilityNodeInfo getRootNode()>
<android.filterfw.core.GLFrameTimer: android.filterfw.core.StopWatchMap get()>
<android.view.accessibility.IAccessibilityInteractionConnection$Stub: android.os.IBinder asBinder()>
<com.android.camera.ActivityBase: android.content.Intent getResultData()>
<android.content.res.Resources: android.graphics.Movie getMovie(int)>
<com.android.internal.app.ActionBarImpl$TabImpl: java.lang.Object getTag()>
<android.app.ActivityOptions: int getAnimationType()>
<android.app.Activity: android.view.LayoutInflater getLayoutInflater()>
<android.appwidget.AppWidgetHostView: android.view.View getDefaultView()>
<com.android.server.display.DisplayAdapter: android.os.Handler getHandler()>
<com.android.launcher2.CellLayout$LayoutParams: int getY()>
<android.app.LoadedApk: java.lang.String getAppDir()>
<com.android.launcher2.CellLayout$LayoutParams: int getX()>
<com.android.phone.PhoneUtils: java.lang.String getInitialNumber(android.content.Intent)>
<android.accounts.ChooseAccountTypeActivity$AccountArrayAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<android.graphics.Paint: float getTextRunAdvances(char[],int,int,int,int,int,float[],int)>
<com.android.launcher2.PagedView: float distanceInfluenceForSnapDuration(float)>
<android.widget.HeaderViewListAdapter: int getItemViewType(int)>
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String[] getPackagesForUid(int)>
<com.google.android.mms.pdu.PduPersister: java.lang.String convertUriToPath(android.content.Context,android.net.Uri)>
<android.app.IThumbnailRetriever$Stub: android.os.IBinder asBinder()>
<com.android.launcher2.PagedView$ScrollInterpolator: float getInterpolation(float)>
<android.webkit.WebSettingsClassic: android.webkit.WebSettings$ZoomDensity getDefaultZoom()>
<android.app.DialogFragment: boolean getShowsDialog()>
<android.widget.Editor: android.text.method.WordIterator getWordIterator()>
<android.app.ActivityManagerProxy: int getFrontActivityScreenCompatMode()>
<com.android.camera.ui.Switch: int getCompoundPaddingRight()>
<com.android.internal.view.IInputMethodManager$Stub$Proxy: android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtype()>
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor: com.android.internal.telephony.IccCardConstants$State getSimState()>
<com.android.inputmethod.latin.InputPointers: int[] getPointerIds()>
<android.text.style.TextAppearanceSpan: int getTextStyle()>
<com.android.email.mail.store.imap.ImapSimpleString: java.io.InputStream getAsStream()>
<com.android.internal.app.ResolverActivity$ResolveListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<android.media.MediaRouter$Static: android.view.Display[] getAllPresentationDisplays()>
<com.android.inputmethod.keyboard.Key: int getDrawX()>
<android.net.sip.SipSession: java.lang.String getLocalIp()>
<android.app.WallpaperInfo: android.content.ComponentName getComponent()>
<android.view.LayoutInflater: android.content.Context getContext()>
<com.android.internal.widget.multiwaveview.TargetDrawable: int getResourceId()>
<com.android.providers.downloads.RealSystemFacade: java.lang.Long getMaxBytesOverMobile()>
<com.android.launcher2.PagedViewCellLayout: com.android.launcher2.PagedViewCellLayoutChildren getChildrenLayout()>
<com.android.i18n.phonenumbers.Phonemetadata$NumberFormat: java.lang.String getLeadingDigitsPattern(int)>
<com.android.email.MessageListContext: com.android.emailcommon.service.SearchParams getSearchParams()>
<android.view.View: int getFadeTop(boolean)>
<com.android.mms.data.WorkingMessage: com.android.mms.model.SlideshowModel getSlideshow()>
<com.android.mms.MmsApp: com.android.mms.util.PduLoaderManager getPduLoaderManager()>
<com.android.email.mail.store.ImapStore: android.content.Context getContext()>
<android.text.SpannableString: int getSpanEnd(java.lang.Object)>
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor: int getPhoneState()>
<com.android.launcher2.Workspace: com.android.launcher2.CellLayout getCurrentDropLayout()>
<com.android.videoeditor.VideoEditorActivity: com.android.videoeditor.widgets.AudioTrackLinearLayout getAudioTrackLayout()>
<android.graphics.Path: android.graphics.Path$FillType getFillType()>
<android.app.Activity: android.view.WindowManager getWindowManager()>
<com.android.org.bouncycastle.asn1.DEROctetStringParser: com.android.org.bouncycastle.asn1.ASN1Primitive getLoadedObject()>
<com.google.android.apps.lightcycle.camera.CameraApiProxyAndroidImpl$CameraProxyAndroidImpl: android.hardware.Camera$Parameters getParameters()>
<android.widget.AbsListView: int getLeftPaddingOffset()>
<android.filterfw.core.SimpleFrameManager: android.filterfw.core.Frame newBoundFrame(android.filterfw.core.FrameFormat,int,long)>
<android.app.ActivityOptions: int getCustomExitResId()>
<android.app.Fragment: android.view.LayoutInflater getLayoutInflater(android.os.Bundle)>
<com.android.mms.ui.UriImage: java.lang.String getContentType()>
<com.android.mms.util.SmileyParser: com.android.mms.util.SmileyParser getInstance()>
<android.media.videoeditor.MediaArtistNativeHelper: int getMediaItemFileType(int)>
<android.text.style.BackgroundColorSpan: int getSpanTypeId()>
<android.app.backup.IRestoreObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.text.SpannedString: java.lang.Object[] getSpans(int,int,java.lang.Class)>
<com.android.launcher2.PagedView: int getAssociatedUpperPageBound(int)>
<android.os.IPowerManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.filterfw.core.GraphRunner: android.filterfw.core.FilterContext getContext()>
<android.view.View: int getHorizontalScrollbarHeight()>
<android.mtp.MtpPropertyGroup: android.mtp.MtpPropertyList getPropertyList(int,int,int)>
<android.media.videoeditor.AudioTrack: long getTimelineDuration()>
<android.content.res.Resources: java.lang.CharSequence getText(int,java.lang.CharSequence)>
<android.view.View: float getBottomFadingEdgeStrength()>
<android.widget.ActivityChooserView$ActivityChooserViewAdapter: int getItemViewType(int)>
<android.widget.AbsListView: int getListPaddingTop()>
<com.android.email.activity.UIControllerOnePane: long getUIAccountId()>
<android.media.MediaRouter$RouteInfo: android.media.MediaRouter$RouteGroup getGroup()>
<android.widget.TextView: int getCurrentHintTextColor()>
<com.android.phone.PhoneUtils: com.android.internal.telephony.CallerInfo getCallerInfo(android.content.Context,com.android.internal.telephony.Connection)>
<android.app.backup.IRestoreSession$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.app.TaskStackBuilder: android.app.PendingIntent getPendingIntent(int,int)>
<android.app.admin.DevicePolicyManager: int getPasswordMinimumNonLetter(android.content.ComponentName)>
<android.webkit.WebSettingsClassic: java.lang.String getCursiveFontFamily()>
<android.view.View: float getRotation()>
<android.filterfw.core.SerializedFrame$DirectByteOutputStream: byte[] getByteArray()>
<com.android.phone.sip.SipSharedPreferences: java.lang.String getPrimaryAccount()>
<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: int getPositionForSection(int)>
<com.android.camera.ui.PieItem: float getStartAngle()>
<android.view.View: int getTextAlignment()>
<com.android.mms.dom.smil.ElementTimeImpl: int getEndConstraints()>
<android.view.KeyEvent: int getRepeatCount()>
<com.android.internal.widget.LockPatternUtils: int[] getAppWidgets()>
<android.widget.TextView$CharWrapper: float getTextRunAdvances(int,int,int,int,int,float[],int,android.graphics.Paint)>
<android.view.View: android.view.HardwareLayer getHardwareLayer()>
<com.android.internal.policy.impl.PhoneWindowManager: long[] getLongIntArray(android.content.res.Resources,int)>
<android.hardware.Camera$Parameters: java.util.List getSupportedFlashModes()>
<com.android.email.RecipientAdapter: int getDefaultPhotoResource()>
<android.text.method.TextKeyListener$NullKeyListener: android.text.method.TextKeyListener$NullKeyListener getInstance()>
<android.view.inputmethod.CompletionInfo: long getId()>
<com.android.mms.dom.NodeImpl: org.w3c.dom.NodeList getChildNodes()>
<com.android.mms.MmsConfig: int getAliasMinChars()>
<android.widget.Switch: int getThumbTextPadding()>
<android.filterfw.format.PrimitiveFormat: android.filterfw.core.MutableFrameFormat createInt32Format(int)>
<android.view.View: int getWidth()>
<android.view.Display: int getType()>
<android.os.CommonTimeConfig: int getPanicThreshold()>
<android.media.videoeditor.MediaArtistNativeHelper: android.media.videoeditor.MediaArtistNativeHelper$EffectSettings getEffectSettings(android.media.videoeditor.EffectColor)>
<com.google.android.apps.lightcycle.sensor.DeviceOrientationDetector: com.google.android.apps.lightcycle.sensor.DeviceOrientationDetector$DeviceOrientation getOrientation()>
<android.preference.DialogPreference: android.app.Dialog getDialog()>
<com.android.launcher2.InterruptibleInOutAnimator: java.lang.Object getTag()>
<android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri)>
<android.os.Environment: java.io.File getExternalStorageAppObbDirectory(java.lang.String)>
<android.text.style.RelativeSizeSpan: int getSpanTypeId()>
<com.android.org.bouncycastle.asn1.x500.X500Name: com.android.org.bouncycastle.asn1.ASN1ObjectIdentifier[] getAttributeTypes()>
<android.widget.NumberPicker: android.widget.NumberPicker$Formatter getTwoDigitFormatter()>
<android.widget.Toast: int getYOffset()>
<android.view.accessibility.AccessibilityNodeInfo: int getVirtualDescendantId(long)>
<android.app.BackStackRecord: java.lang.String getName()>
<android.hardware.Camera$Parameters: int getExposureCompensation()>
<android.filterpacks.performance.Throughput: int getTotalFrameCount()>
<android.app.ISearchManager$Stub$Proxy: android.content.ComponentName getAssistIntent(int)>
<android.view.ViewGroup: int getDescendantFocusability()>
<com.android.launcher2.LauncherModel: int getCellCountX()>
<com.android.launcher2.LauncherModel: int getCellCountY()>
<android.widget.Editor$ActionPopupWindow: int getVerticalLocalPosition(int)>
<android.widget.TextView: android.text.method.MovementMethod getMovementMethod()>
<android.text.style.SuggestionRangeSpan: int getSpanTypeId()>
<android.app.ContextImpl: android.content.ContentResolver getContentResolver()>
<android.text.BoringLayout: float getLineMax(int)>
<android.widget.AutoCompleteTextView: int getDropDownAnchor()>
<android.app.ActivityManagerProxy: java.util.List getTasks(int,int,android.app.IThumbnailReceiver)>
<android.preference.Preference: android.content.SharedPreferences getSharedPreferences()>
<com.android.internal.view.menu.ActionMenuItem: int getGroupId()>
<com.android.systemui.recent.RecentsHorizontalScrollView: int getVerticalFadingEdgeLength()>
<com.android.inputmethod.latin.InputPointers: int[] getXCoordinates()>
<android.view.ViewConfiguration: int getPressedStateDuration()>
<com.android.exchange.adapter.Search$SearchParser: int getTotalResults()>
<android.os.UserManager: int getMaxSupportedUsers()>
<android.media.audiofx.PresetReverb: short getPreset()>
<android.preference.Preference: java.lang.String getPersistedString(java.lang.String)>
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice getInstalledApplications(int,java.lang.String,int)>
<com.android.internal.view.menu.MenuBuilder: com.android.internal.view.menu.MenuBuilder getRootMenu()>
<com.android.email.activity.MessageListItemCoordinates: int getHeight(android.view.View,boolean)>
<android.view.accessibility.AccessibilityRecord: int getCurrentItemIndex()>
<android.widget.AbsListView: int getHeaderViewsCount()>
<android.content.ContentResolver: java.io.InputStream openInputStream(android.net.Uri)>
<android.media.audiofx.Equalizer: short getBandLevel(short)>
<android.media.videoeditor.VideoEditorProfile: android.media.videoeditor.VideoEditorProfile get()>
<android.app.ActivityManagerProxy: long[] getProcessPss(int[])>
<com.android.mms.dom.smil.SmilRegionElementImpl: java.lang.String getId()>
<android.media.AudioTrack: int getPositionNotificationPeriod()>
<android.widget.NumberPicker$AccessibilityNodeProviderImpl: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int)>
<com.google.android.gms.common.ConnectionResult: int getErrorCode()>
<android.content.res.TypedArray: float getFloat(int,float)>
<com.android.ex.chips.RecipientChip: long getContactId()>
<com.android.email.mail.store.Pop3Store$Pop3Folder: com.android.emailcommon.mail.Message[] getMessages(com.android.emailcommon.service.SearchParams,com.android.emailcommon.mail.Folder$MessageRetrievalListener)>
<android.media.videoeditor.MediaVideoItem: long getBoundaryBeginTime()>
<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getActivityIcon(android.content.ComponentName)>
<android.media.ExifInterface: long getGpsDateTime()>
<android.view.ViewConfiguration: int getHoverTapSlop()>
<android.webkit.WebViewClassic: int getContentHeight()>
<android.content.res.Resources: java.lang.String getQuantityString(int,int,java.lang.Object[])>
<com.android.launcher2.FolderIcon: com.android.launcher2.Folder getFolder()>
<android.os.storage.StorageManager: android.os.storage.StorageVolume getPrimaryVolume()>
<android.mtp.MtpObjectInfo: int getCompressedSize()>
<android.app.Fragment: android.app.FragmentManager getChildFragmentManager()>
<com.android.launcher2.Folder: java.util.ArrayList getItemsInReadingOrder()>
<com.android.internal.widget.ActionBarView: android.view.View getCustomNavigationView()>
<android.test.InstrumentationTestCase: android.app.Instrumentation getInstrumentation()>
<android.filterfw.core.FrameFormat: int getHeight()>
<android.view.View: android.view.ViewParent getParentForAccessibility()>
<android.widget.AbsListView: int getTopPaddingOffset()>
<com.android.email.widget.EmailWidgetLoader$WidgetCursor: int getMessageCount()>
<com.android.server.display.LogicalDisplay: int getDisplayIdLocked()>
<com.android.server.wm.DisplayContent: android.view.Display getDisplay()>
<com.android.org.bouncycastle.asn1.ASN1Object: com.android.org.bouncycastle.asn1.ASN1Primitive toASN1Object()>
<com.android.internal.util.StateMachine: java.lang.String getLogRecString(android.os.Message)>
<com.android.email.widget.EmailWidgetLoader$WidgetCursor: java.lang.String getAccountName()>
<com.android.email.mail.store.imap.ImapList: com.android.email.mail.store.imap.ImapString getKeyedStringOrEmpty(java.lang.String)>
<android.widget.TabHost$IntentContentStrategy: android.view.View getContentView()>
<android.content.res.XmlBlock$Parser: int getAttributeResourceValue(int,int)>
<com.android.systemui.recent.TaskDescription: android.graphics.drawable.Drawable getIcon()>
<com.android.ex.chips.RecipientChip: java.lang.CharSequence getOriginalText()>
<android.webkit.WebViewClassic: java.lang.String getUrl()>
<android.app.IThumbnailRetriever$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.android.camera.CameraSettings: java.lang.String getDefaultVideoQuality(int,java.lang.String)>
<android.graphics.drawable.DrawableContainer: android.graphics.Insets getLayoutInsets()>
<android.content.Intent: int[] getIntArrayExtra(java.lang.String)>
<android.os.DropBoxManager$Entry: long getTimeMillis()>
<com.android.phone.sip.SipProfileDb: java.util.List retrieveSipProfileList()>
<android.filterpacks.imageproc.ToRGBFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)>
<android.webkit.WebViewClassic$InvokeListBox$MyArrayListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<android.support.v4.view.accessibility.AccessibilityNodeProviderCompat: java.lang.Object getProvider()>
<android.graphics.drawable.ClipDrawable: int getIntrinsicWidth()>
<com.android.org.bouncycastle.asn1.ASN1OctetString: byte[] getOctets()>
<android.content.ContentResolver: java.lang.String getType(android.net.Uri)>
<com.android.mms.dom.AttrImpl: org.w3c.dom.Node getNextSibling()>
<com.android.email.widget.EmailWidget: long getItemId(int)>
<com.android.systemui.statusbar.StatusBarIconView: android.graphics.drawable.Drawable getIcon(android.content.Context,com.android.internal.statusbar.StatusBarIcon)>
<com.android.ex.chips.BaseRecipientAdapter: int getItemViewType(int)>
<android.media.videoeditor.Effect: long getDuration()>
<com.android.inputmethod.latin.UserHistoryDictionary: java.util.ArrayList getWordsInner(com.android.inputmethod.latin.WordComposer,java.lang.CharSequence,com.android.inputmethod.keyboard.ProximityInfo)>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: java.lang.String getInternationalPrefix()>
<com.google.android.picasasync.UploadTaskEntry: java.lang.String getAccount()>
<android.content.BroadcastReceiver$PendingResult: int getResultCode()>
<com.android.deskclock.stopwatch.Stopwatches: java.lang.String getShareTitle(android.content.Context)>
<android.media.videoeditor.VideoEditorImpl: java.lang.String getPath()>
<android.view.Surface: int getWidth()>
<android.app.ApplicationPackageManager: java.util.List queryContentProviders(java.lang.String,int,int)>
<android.os.StatFs: int getBlockCount()>
<android.animation.Keyframe$FloatKeyframe: float getFloatValue()>
<android.webkit.WebSettings: boolean getDisplayZoomControls()>
<android.app.DialogFragment: android.view.LayoutInflater getLayoutInflater(android.os.Bundle)>
<android.webkit.WebSettingsClassic: int getMinimumFontSize()>
<android.content.SyncStorageEngine: android.content.SyncStorageEngine getSingleton()>
<com.google.android.picasastore.SystemProperties: long getLong(java.lang.String,long)>
<com.android.mms.dom.smil.SmilMediaElementImpl$1: float getDur()>
<android.os.UserManager: android.content.pm.UserInfo createUser(java.lang.String,int)>
<android.widget.ListView: android.graphics.drawable.Drawable getDivider()>
<com.android.mms.layout.HVGALayoutParameters: int getHeight()>
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor: java.lang.CharSequence getTelephonySpn()>
<com.android.systemui.statusbar.policy.NotificationRowLayout: android.view.View getChildAtRawPosition(float,float)>
<android.app.SearchableInfo: int getImeOptions()>
<com.android.ex.chips.BaseRecipientAdapter: int getDefaultPhotoResource()>
<com.android.camera.ComboPreferences: long getLong(java.lang.String,long)>
<android.media.MediaPlayer: int getIntParameter(int)>
<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodClient getClient()>
<android.text.style.QuoteSpan: int getLeadingMargin(boolean)>
<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForNonGeographicalRegion(int)>
<android.widget.Editor$SelectionStartHandleView: int getHotspotX(android.graphics.drawable.Drawable,boolean)>
<android.view.TextureView: android.graphics.Bitmap getBitmap(int,int)>
<com.android.camera.CameraPreference: java.lang.String getTitle()>
<com.android.internal.app.ActionBarImpl$TabImpl: int getPosition()>
<android.os.RegistrantList: java.lang.Object get(int)>
<android.os.IUserManager$Stub$Proxy: android.graphics.Bitmap getUserIcon(int)>
<com.android.launcher2.CellLayout$LayoutParams: int getWidth()>
<com.android.server.pm.Settings: android.content.pm.VerifierDeviceIdentity getVerifierDeviceIdentityLPw()>
<android.app.WallpaperManager: android.graphics.drawable.Drawable getDrawable()>
<android.view.ViewConfiguration: int getMaximumDrawingCacheSize()>
<android.net.sip.SipSession: int getState()>
<android.graphics.Bitmap: byte[] getNinePatchChunk()>
<android.media.videoeditor.VideoEditorImpl: int getAspectRatio()>
<com.android.inputmethod.latin.RichInputConnection: java.lang.CharSequence getTextAfterCursor(int,int)>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc mergeFrom(com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc)>
<android.text.style.TypefaceSpan: java.lang.String getFamily()>
<com.android.internal.view.menu.MenuItemImpl: int getGroupId()>
<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: java.lang.String getRawInput()>
<android.os.storage.StorageManager: java.lang.String[] getVolumePaths()>
<com.android.internal.policy.impl.keyguard.SlidingChallengeLayout: int getMaxChallengeTop()>
<com.android.deskclock.Alarm: java.lang.String getLabelOrDefault(android.content.Context)>
<android.app.ActivityManagerProxy: boolean isUserRunning(int,boolean)>
<android.widget.ResourceCursorAdapter: android.view.View newView(android.content.Context,android.database.Cursor,android.view.ViewGroup)>
<android.hardware.display.WifiDisplayStatus: android.hardware.display.WifiDisplay[] getRememberedDisplays()>
<android.content.pm.IPackageStatsObserver$Stub: android.os.IBinder asBinder()>
<android.widget.AbsListView: int getListPaddingRight()>
<android.preference.EditTextPreference: android.widget.EditText getEditText()>
<android.mtp.MtpObjectInfo: int getThumbFormat()>
<android.content.BroadcastReceiver$PendingResult: int getSendingUserId()>
<android.view.accessibility.AccessibilityManager: android.view.accessibility.AccessibilityManager getInstance(android.content.Context)>
<android.media.videoeditor.MediaVideoItem: int getAudioType()>
<android.app.ApplicationPackageManager: java.lang.String getNameForUid(int)>
<android.hardware.Camera$Parameters: java.lang.String getColorEffect()>
<android.os.storage.IMountService$Stub$Proxy: int[] getStorageUsers(java.lang.String)>
<android.os.BatteryStats: long getRadioDataUptimeMs()>
<android.widget.TextView: float getLeftFadingEdgeStrength()>
<android.os.Environment: java.io.File getSystemSecureDirectory()>
<android.app.SearchManager: android.database.Cursor getSuggestions(android.app.SearchableInfo,java.lang.String,int)>
<android.app.ActivityManagerProxy: android.content.pm.UserInfo getCurrentUser()>
<android.os.MemoryFile: java.io.OutputStream getOutputStream()>
<android.hardware.Camera$Parameters: java.util.List getSupportedSceneModes()>
<android.text.SpannableStringBuilder: float getTextRunAdvances(int,int,int,int,int,float[],int,android.graphics.Paint,int)>
<com.android.mms.ui.MessageListAdapter: int getViewTypeCount()>
<android.app.DownloadManager$CursorTranslator: long getLong(int)>
<com.android.org.bouncycastle.asn1.LazyEncodedSequence: com.android.org.bouncycastle.asn1.ASN1Encodable getObjectAt(int)>
<com.android.server.AppWidgetServiceImpl: int[] getAppWidgetIds(android.content.ComponentName)>
<com.android.launcher2.DragLayer: float getLocationInDragLayer(android.view.View,int[])>
<android.content.IntentSender: android.content.IIntentSender getTarget()>
<android.text.SpannableStringBuilder: int getSpanEnd(java.lang.Object)>
<android.os.Bundle: double[] getDoubleArray(java.lang.String)>
<android.view.View: android.view.ViewParent getParent()>
<android.view.inputmethod.CompletionInfo: java.lang.CharSequence getText()>
<android.app.IUserSwitchObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.app.admin.DevicePolicyManager: android.content.ComponentName getGlobalProxyAdmin()>
<android.net.sip.SipSession: java.lang.String getCallId()>
<android.hardware.usb.UsbManager: android.hardware.usb.UsbAccessory[] getAccessoryList()>
<android.view.animation.LinearInterpolator: float getInterpolation(float)>
<com.android.exchange.ExchangeService: com.android.emailcommon.provider.Account getAccountById(long)>
<com.android.inputmethod.keyboard.KeyboardSwitcher: com.android.inputmethod.keyboard.Keyboard getKeyboard()>
<com.android.mms.model.LayoutModel: int getLayoutWidth()>
<com.android.internal.view.InputConnectionWrapper: java.lang.CharSequence getTextAfterCursor(int,int)>
<android.media.MediaRouter$RouteCategory: java.lang.CharSequence getName(android.content.Context)>
<android.widget.FastScroller: android.widget.SectionIndexer getSectionIndexer()>
<android.widget.ScrollView: float getBottomFadingEdgeStrength()>
<android.widget.AccessibilityIterators$PageTextSegmentIterator: android.widget.AccessibilityIterators$PageTextSegmentIterator getInstance()>
<android.text.DynamicLayout: int getTopPadding()>
<android.view.MotionEvent: int getToolType(int)>
<android.view.PointerIcon$1: android.view.PointerIcon createFromParcel(android.os.Parcel)>
<com.android.internal.os.ProcessStats: int getLastSystemTime()>
<android.webkit.WebBackForwardListClassic: android.webkit.WebHistoryItem getCurrentItem()>
<com.android.server.display.WifiDisplayAdapter$WifiDisplayDevice: com.android.server.display.DisplayDeviceInfo getDisplayDeviceInfoLocked()>
<com.android.internal.widget.multiwaveview.MultiWaveView: int getTargetPosition(int)>
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>
<android.filterpacks.imageproc.DrawRectFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)>
<android.widget.AbsListView: int getVerticalScrollbarWidth()>
<com.android.camera.ListPreference: java.lang.CharSequence[] getEntryValues()>
<android.text.SpannableStringBuilder: int getTextWidths(int,int,float[],android.graphics.Paint)>
<android.widget.Editor$InsertionHandleView: int getHotspotX(android.graphics.drawable.Drawable,boolean)>
<android.app.SearchableInfo: java.lang.String getSuggestPath()>
<android.widget.RemoteViews$SetPendingIntentTemplate: java.lang.String getActionName()>
<com.android.ex.variablespeed.SingleThreadedMediaPlayerProxy: int getDuration()>
<com.android.org.bouncycastle.asn1.ASN1InputStream: com.android.org.bouncycastle.asn1.ASN1Primitive buildObject(int,int,int)>
<com.android.internal.util.FastXmlSerializer: java.lang.String getName()>
<android.text.method.DigitsKeyListener: android.text.method.DigitsKeyListener getInstance()>
<android.app.WallpaperManager: int getDesiredMinimumWidth()>
<android.view.MotionEvent: float getTouchMajor(int)>
<android.graphics.drawable.StateListDrawable: int[] getStateSet(int)>
<com.android.deskclock.Alarms: android.content.CursorLoader getAlarmsCursorLoader(android.content.Context)>
<android.animation.ValueAnimator: long getStartDelay()>
<android.provider.Settings$System: long getLong(android.content.ContentResolver,java.lang.String,long)>
<com.android.email.activity.UIControllerBase: com.android.email.activity.MessageViewFragment getMessageViewFragment()>
<com.android.launcher2.DragLayer: float getDescendantRectRelativeToSelf(android.view.View,android.graphics.Rect)>
<com.android.server.wm.WindowState: android.graphics.Rect getContentFrameLw()>
<com.android.ex.chips.RecipientEditTextView: com.android.ex.chips.RecipientChip getLastChip()>
<com.android.camera.PanoramaModule: int getPreviewBufSize()>
<com.android.camera.CameraManager$CameraProxy: android.hardware.Camera getCamera()>
<com.android.email.widget.EmailWidgetLoader: android.database.Cursor loadInBackground()>
<android.sax.Children: android.sax.Element get(java.lang.String,java.lang.String)>
<android.os.IUpdateLock$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.android.internal.preference.YesNoPreference: boolean getValue()>
<android.view.View: android.view.ViewTreeObserver getViewTreeObserver()>
<android.os.AsyncTask: android.os.AsyncTask$Status getStatus()>
<android.view.inputmethod.InputMethodInfo: java.lang.String getId()>
<com.android.videoeditor.service.MovieEffect: long getDuration()>
<android.content.res.TypedArray: java.lang.String getNonConfigurationString(int,int)>
<android.mtp.MtpDeviceInfo: java.lang.String getSerialNumber()>
<android.content.ContextWrapper: java.io.File getExternalFilesDir(java.lang.String)>
<com.android.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter: int getId()>
<android.widget.Editor$SuggestionsPopupWindow: int getVerticalLocalPosition(int)>
<android.app.SearchableInfo: android.content.Context getProviderContext(android.content.Context,android.content.Context)>
<android.text.Layout: float measurePara(android.text.TextPaint,java.lang.CharSequence,int,int)>
<android.filterpacks.imageproc.BrightnessFilter: android.filterfw.core.Program getNativeProgram(android.filterfw.core.FilterContext)>
<android.os.UEventObserver: java.lang.String access$100()>
<com.android.email.mail.store.Pop3Store: com.android.emailcommon.mail.Folder getFolder(java.lang.String)>
<android.os.Binder: java.lang.String getInterfaceDescriptor()>
<android.webkit.WebSettings: int getDefaultFontSize()>
<com.android.email.mail.store.imap.ImapResponse: com.android.email.mail.store.imap.ImapString getAlertTextOrEmpty()>
<android.view.accessibility.AccessibilityManager: java.util.List getInstalledAccessibilityServiceList()>
<android.preference.PreferenceGroupAdapter: long getItemId(int)>
<android.app.admin.DevicePolicyManager: long getPasswordExpiration(android.content.ComponentName)>
<com.android.camera.ComboPreferences: android.content.SharedPreferences getGlobal()>
<com.android.systemui.statusbar.phone.QuickSettingsTileView: int getColumnSpan()>
<com.android.mms.dom.smil.SmilRegionElementImpl: java.lang.String getFit()>
<android.view.animation.Animation: void getInvalidateRegion(int,int,int,int,android.graphics.RectF,android.view.animation.Transformation)>
<com.android.commands.monkey.MonkeyTrackballEvent: java.lang.String getTypeLabel()>
<com.android.org.bouncycastle.jce.netscape.NetscapeCertRequest: java.lang.String getChallenge()>
<android.appwidget.AppWidgetHost: android.appwidget.AppWidgetHostView createView(android.content.Context,int,android.appwidget.AppWidgetProviderInfo)>
<android.view.inputmethod.InputConnectionWrapper: int getCursorCapsMode(int)>
<android.mtp.MtpStorage: long getMaxFileSize()>
<android.content.ContentProvider: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)>
<android.os.Debug: int getLoadedClassCount()>
<android.webkit.WebViewCore: android.webkit.WebViewInputDispatcher$WebKitCallbacks getInputDispatcherCallbacks()>
<android.app.SearchableInfo: boolean getVoiceSearchLaunchWebSearch()>
<com.android.org.bouncycastle.asn1.DERT61String: byte[] getOctets()>
<android.media.videoeditor.MediaProperties: int[] getSupportedVideoFileFormat()>
<android.media.videoeditor.Effect: android.media.videoeditor.MediaItem getMediaItem()>
<android.content.res.Resources: int[] getIntArray(int)>
<android.filterfw.format.PrimitiveFormat: android.filterfw.core.MutableFrameFormat createFloatFormat(int)>
<android.view.IInputFilterHost$Stub: android.os.IBinder asBinder()>
<com.android.mms.dom.AttrImpl: java.lang.String getName()>
<com.android.email.activity.ThreePaneLayout: int getPaneState()>
<com.android.launcher2.PagedViewCellLayout: int getCellCountX()>
<com.android.launcher2.PagedViewCellLayout: int getCellCountY()>
<android.animation.LayoutTransition: long getStartDelay(int)>
<com.android.videoeditor.service.MovieTheme: com.android.videoeditor.service.MovieTheme getTheme(android.content.Context,java.lang.String)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumNumeric(android.content.ComponentName,int)>
<android.widget.GridView: int getRequestedHorizontalSpacing()>
<android.view.animation.Animation: float resolveSize(int,float,int,int)>
<android.content.res.XmlBlock$Parser: java.lang.CharSequence getPooledString(int)>
<android.view.FocusFinder: android.view.View findNextFocusFromRect(android.view.ViewGroup,android.graphics.Rect,int)>
<com.android.server.accessibility.ScreenMagnifier$Viewport: android.graphics.Rect getBounds()>
<android.view.LayoutInflater: android.view.View onCreateView(java.lang.String,android.util.AttributeSet)>
<android.content.AbstractThreadedSyncAdapter: android.content.Context getContext()>
<com.android.videoeditor.widgets.OverlayLinearLayout: android.app.Dialog onCreateDialog(int,android.os.Bundle)>
<com.android.mms.ui.UriImage: java.lang.String getPath()>
<com.android.launcher2.PagedViewCellLayout: int getPageChildCount()>
<android.app.BackStackRecord: int getBreadCrumbTitleRes()>
<android.view.MotionEvent: float getAxisValue(int)>
<com.android.mms.model.RegionModel: java.lang.String getBackgroundColor()>
<android.support.v13.app.FragmentPagerAdapter: long getItemId(int)>
<android.util.LongSparseArray: java.lang.Object get(long,java.lang.Object)>
<android.view.KeyCharacterMap: char getMatch(int,char[])>
<com.android.server.am.ActivityStack: android.graphics.Bitmap getTaskTopThumbnailLocked(com.android.server.am.TaskRecord)>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getPager()>
<com.android.email.activity.MailboxFragmentAdapter: long getAccountId(int)>
<android.widget.BaseExpandableListAdapter: int getGroupTypeCount()>
<com.google.android.picasasync.UploadTaskEntry: java.lang.String getAuthTokenType()>
<android.preference.PreferenceManager: android.content.SharedPreferences getSharedPreferences()>
<com.android.email.activity.UIControllerSearchTwoPane: long getUIAccountId()>
<android.widget.TwoLineListItem: android.widget.TextView getText1()>
<android.widget.TwoLineListItem: android.widget.TextView getText2()>
<android.media.videoeditor.AudioTrack: int getDuckingThreshhold()>
<android.provider.Settings$System: long getLongForUser(android.content.ContentResolver,java.lang.String,int)>
<com.android.inputmethod.latin.ExpandableDictionary$NextHistoryWord: int getFrequency()>
<android.gesture.GestureStore: java.util.Set getGestureEntries()>
<android.animation.LayoutTransition: long getDuration(int)>
<com.android.mms.dom.smil.ElementSequentialTimeContainerImpl: float getDur()>
<android.content.Intent: java.lang.CharSequence[] getCharSequenceArrayExtra(java.lang.String)>
<android.accounts.IAccountAuthenticatorResponse$Stub: android.accounts.IAccountAuthenticatorResponse asInterface(android.os.IBinder)>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc: java.lang.String getPossibleNumberPattern()>
<android.widget.AbsListView: int getTranscriptMode()>
<android.os.Debug: int getGlobalFreedCount()>
<com.android.emailcommon.utility.Utility: java.lang.Long getFirstRowLong(android.content.Context,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,int,java.lang.Long)>
<com.android.ex.variablespeed.VariableSpeed: int getCurrentPosition()>
<android.app.SearchableInfo: int getVoicePromptTextId()>
<android.support.v4.view.MotionEventCompat$BaseMotionEventVersionImpl: int getPointerId(android.view.MotionEvent,int)>
<com.android.org.bouncycastle.asn1.DERUTCTime: java.lang.String getAdjustedTime()>
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreferredPreviewSizeForVideo()>
<com.android.mms.model.SlideshowModel: int getCurrentMessageSize()>
<android.view.View: int getLayoutDirection()>
<android.os.SystemProperties: java.lang.String get(java.lang.String)>
<com.android.org.bouncycastle.asn1.DERPrintableString: java.lang.String getString()>
<android.content.ContextWrapper: android.content.Context createPackageContext(java.lang.String,int)>
<android.webkit.WebSettingsClassic: boolean getUseDoubleTree()>
<com.android.org.bouncycastle.asn1.ASN1OctetString: java.lang.String toString()>
<android.os.storage.StorageManager: java.lang.String getVolumeState(java.lang.String)>
<android.graphics.drawable.ClipDrawable: int getOpacity()>
<android.graphics.Interpolator: int getKeyFrameCount()>
<com.android.emailcommon.provider.EmailContent$Body: com.android.emailcommon.provider.EmailContent$Body restoreBodyWithMessageId(android.content.Context,long)>
<android.content.res.TypedArray: int getLayoutDimension(int,int)>
<com.android.videoeditor.TransitionType: com.android.videoeditor.TransitionType[] getTransitions(android.content.Context)>
<android.webkit.WebHistoryItem: android.graphics.Bitmap getFavicon()>
<com.android.email.mail.store.imap.ImapUtility: java.lang.String[] getImapSequenceValues(java.lang.String)>
<com.android.deskclock.Alarms: boolean get24HourMode(android.content.Context)>
<com.android.videoeditor.service.MovieMediaItem: android.media.videoeditor.WaveformData getWaveformData()>
<android.os.Debug$MemoryInfo: int getTotalPss()>
<com.android.launcher2.CellLayout: int getDesiredHeight()>
<android.renderscript.ProgramVertexFixedFunction$Constants: android.renderscript.Allocation getAllocation()>
<android.filterfw.core.GLFrame: android.filterfw.core.GLEnvironment getGLEnvironment()>
<android.app.ActivityThread: android.app.Instrumentation getInstrumentation()>
<android.security.KeyStore: int getLastError()>
<com.android.deskclock.RepeatPreference: com.android.deskclock.Alarm$DaysOfWeek getDaysOfWeek()>
<com.android.uiautomator.testrunner.TestCaseCollector: java.util.List getTestCases()>
<com.android.inputmethod.latin.suggestions.MoreSuggestions$MoreSuggestionsParam: int getColumnNumber(int)>
<android.content.pm.IPackageManager$Stub: android.os.IBinder asBinder()>
<com.android.org.bouncycastle.util.io.pem.PemObject: java.lang.String getType()>
<android.content.ContentResolver: android.content.IContentService getContentService()>
<com.android.server.wm.DragState: int getDragLayerLw()>
<com.android.internal.view.menu.MenuItemImpl: android.view.SubMenu getSubMenu()>
<android.hardware.usb.UsbEndpoint: int getAttributes()>
<android.content.ContextWrapper: java.lang.ClassLoader getClassLoader()>
<android.graphics.drawable.DrawableContainer: android.graphics.drawable.Drawable$ConstantState getConstantState()>
<android.app.AlertDialog: android.widget.Button getButton(int)>
<android.webkit.WebHistoryItemClassic: java.lang.String getTouchIconUrl()>
<com.android.uiautomator.testrunner.UiAutomatorTestCase: com.android.uiautomator.core.UiDevice getUiDevice()>
<android.content.Intent: float getFloatExtra(java.lang.String,float)>
<android.app.ActivityOptions: int getCustomEnterResId()>
<android.media.videoeditor.MediaVideoItem: int getVideoBitrate()>
<android.webkit.CookieManagerClassic: java.lang.String getCookie(java.lang.String,boolean)>
<android.server.search.Searchables: java.util.ArrayList getSearchablesList()>
<android.app.admin.DevicePolicyManager: int getPasswordMaximumLength(int)>
<android.widget.GridView: int getColumnWidth()>
<com.android.ex.variablespeed.EngineParameters: int getDecodeBufferMaxSize()>
<com.android.internal.view.menu.MenuPopupHelper: int getId()>
<com.android.internal.view.menu.ListMenuItemView: com.android.internal.view.menu.MenuItemImpl getItemData()>
<com.android.internal.widget.multiwaveview.MultiWaveView: int getSuggestedMinimumHeight()>
<com.android.org.bouncycastle.asn1.DERExternal: com.android.org.bouncycastle.asn1.ASN1ObjectIdentifier getDirectReference()>
<android.widget.TextView: int getTotalPaddingStart()>
<com.android.mms.dom.NamedNodeMapImpl: org.w3c.dom.Node getNamedItemNS(java.lang.String,java.lang.String)>
<android.animation.PropertyValuesHolder: java.lang.String getPropertyName()>
<android.view.View: int getMeasuredState()>
<android.widget.AdapterViewAnimator: android.animation.ObjectAnimator getDefaultOutAnimation()>
<com.android.mms.dom.smil.SmilElementImpl: java.lang.String getId()>
<com.android.deskclock.DeskClock$TabsAdapter$TabInfo: int getPosition()>
<com.android.email.activity.setup.SetupData: com.android.emailcommon.provider.Account getAccount()>
<android.widget.AdapterView: long getItemIdAtPosition(int)>
<com.android.inputmethod.keyboard.MoreKeysKeyboard$MoreKeysKeyboardParams: int getDefaultKeyCoordX()>
<com.android.server.accessibility.ScreenMagnifier$DisplayProvider: android.view.DisplayInfo getDisplayInfo()>
<com.android.internal.widget.LockPatternView$SavedState: int getDisplayMode()>
<android.os.Bundle: java.lang.CharSequence getCharSequence(java.lang.String,java.lang.CharSequence)>
<android.os.Debug: java.lang.String getCallers(int)>
<android.hardware.display.WifiDisplayStatus$1: android.hardware.display.WifiDisplayStatus createFromParcel(android.os.Parcel)>
<android.text.method.ReplacementTransformationMethod$SpannedReplacementCharSequence: int getSpanEnd(java.lang.Object)>
<com.android.launcher2.ButtonDropTarget: android.graphics.Rect getIconRect(int,int,int,int)>
<android.hardware.usb.IUsbManager$Stub: android.os.IBinder asBinder()>
<com.android.internal.widget.multiwaveview.MultiWaveView: int getDirectionDescriptionsResourceId()>
<android.content.res.Resources: java.lang.String[] getStringArray(int)>
<android.animation.Keyframe: java.lang.Object clone()>
<android.graphics.Paint: android.graphics.Paint$Join getStrokeJoin()>
<android.widget.AdapterView: java.lang.Object getItemAtPosition(int)>
<android.text.method.DateKeyListener: android.text.method.DateKeyListener getInstance()>
<android.graphics.Paint: android.graphics.Paint$FontMetricsInt getFontMetricsInt()>
<android.webkit.CacheManager$CacheResult: java.lang.String getMimeType()>
<android.widget.ExpandableListConnector: int getViewTypeCount()>
<com.android.inputmethod.latin.ExpandableDictionary$NextHistoryWord: com.android.inputmethod.latin.UserHistoryForgettingCurveUtils$ForgettingCurveParams getFcParams()>
<android.media.videoeditor.OverlayFrame: int getResizedRGBSizeHeight()>
<android.app.ActivityThread: android.app.ContextImpl getSystemContext()>
<android.widget.RemoteViewsAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<android.widget.Editor$SelectionModifierCursorController: int getMaxTouchOffset()>
<android.hardware.SerialPort: java.lang.String getName()>
<android.media.videoeditor.EffectKenBurns: android.graphics.Rect getEndRect()>
<android.webkit.WebViewClassic: int getBaseLayer()>
<com.android.mms.MmsConfig: int getMaxSubjectLength()>
<com.android.providers.media.RingtonePickerActivity: android.database.Cursor access$200(com.android.providers.media.RingtonePickerActivity)>
<android.renderscript.ProgramVertexFixedFunction$Builder: android.renderscript.ProgramVertexFixedFunction create()>
<com.android.launcher2.AppsCustomizePagedView: int getPageContentWidth()>
<android.content.ContentProvider: android.os.ParcelFileDescriptor openPipeHelper(android.net.Uri,java.lang.String,android.os.Bundle,java.lang.Object,android.content.ContentProvider$PipeDataWriter)>
<android.app.ISearchManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.mtp.MtpStorageInfo: long getMaxCapacity()>
<android.webkit.WebViewClassic$Factory: android.webkit.WebStorage getWebStorage()>
<com.google.android.gms.panorama.internal.PanoramaClientImpl: java.lang.String getStartServiceAction()>
<android.provider.SyncStateContract$Helpers: byte[] get(android.content.ContentProviderClient,android.net.Uri,android.accounts.Account)>
<com.android.deskclock.AlarmAlert: int getLayoutResId()>
<com.android.email.mail.Store: com.android.email.mail.Store getInstance(com.android.emailcommon.provider.Account,android.content.Context)>
<android.content.ContextWrapper: java.io.File getDir(java.lang.String,int)>
<android.content.ClipData: android.content.ClipData$Item getItemAt(int)>
<android.content.Intent: java.lang.Object getExtra(java.lang.String,java.lang.Object)>
<android.graphics.drawable.RotateDrawable: int getIntrinsicHeight()>
<android.app.SearchableInfo: int getSuggestThreshold()>
<android.app.ApplicationPackageManager: android.content.pm.PermissionInfo getPermissionInfo(java.lang.String,int)>
<com.android.videoeditor.service.MovieMediaItem: com.android.videoeditor.service.MovieOverlay getOverlay()>
<com.android.inputmethod.accessibility.AccessibilityUtils: com.android.inputmethod.accessibility.AccessibilityUtils getInstance()>
<android.widget.TextView: android.text.style.URLSpan[] getUrls()>
<android.text.format.DateUtils: java.lang.String getMonthString(int,int)>
<android.widget.ListPopupWindow: int getAnimationStyle()>
<android.view.ViewConfiguration: int getScaledFadingEdgeLength()>
<android.view.animation.Animation: long getStartTime()>
<android.view.ViewConfiguration: int getScaledPagingTouchSlop()>
<com.android.internal.widget.ScrollingTabContainerView$TabAdapter: int getCount()>
<android.content.pm.IPackageManager$Stub$Proxy: int getComponentEnabledSetting(android.content.ComponentName,int)>
<android.graphics.drawable.LayerDrawable: int getChangingConfigurations()>
<com.android.deskclock.timer.TimerFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>
<android.widget.TableRow: int getNextLocationOffset(android.view.View)>
<android.content.ContentValues: java.lang.Double getAsDouble(java.lang.String)>
<android.content.ContextWrapper: android.content.res.Resources$Theme getTheme()>
<com.android.uiautomator.testrunner.UiAutomatorTestRunner: com.android.uiautomator.testrunner.UiAutomatorTestCaseFilter getTestCaseFilter()>
<android.hardware.usb.UsbAccessory: java.lang.String getModel()>
<android.widget.AbsListView: android.view.View obtainView(int,boolean[])>
<android.app.Fragment: android.os.Bundle getArguments()>
<android.media.MediaRouter$RouteInfo: int getPlaybackType()>
<com.android.internal.policy.impl.keyguard.KeyguardWidgetFrame: android.view.View getContent()>
<android.os.Message: long getWhen()>
<android.app.IProcessObserver$Stub: android.os.IBinder asBinder()>
<com.android.deskclock.widget.multiwaveview.PointCloud: int getAlphaForPoint(com.android.deskclock.widget.multiwaveview.PointCloud$Point)>
<android.media.videoeditor.MediaItem: java.util.List getAllOverlays()>
<com.android.org.bouncycastle.asn1.x509.X509Name: java.util.Vector getValues()>
<android.media.AudioSystem: int getNumStreamTypes()>
<com.google.android.apps.lightcycle.camera.TextureCameraPreview: com.google.android.apps.lightcycle.camera.CameraApiProxy$CameraProxy getCamera()>
<android.os.Message: android.os.Bundle getData()>
<com.android.deskclock.widget.multiwaveview.TargetDrawable: float getScaleY()>
<com.android.deskclock.widget.multiwaveview.TargetDrawable: float getScaleX()>
<android.view.MotionEvent: float getHistoricalTouchMajor(int)>
<com.android.org.bouncycastle.asn1.DERInteger: com.android.org.bouncycastle.asn1.ASN1Integer getInstance(java.lang.Object)>
<com.android.mms.ui.PresenterFactory: com.android.mms.ui.Presenter getPresenter(java.lang.String,android.content.Context,com.android.mms.ui.ViewInterface,com.android.mms.model.Model)>
<android.os.PowerManager: int getDefaultScreenBrightnessSetting()>
<com.google.android.picasasync.PhotoCollectorJson: java.util.Map getEntryFieldMap()>
<android.content.res.Resources: java.lang.String getResourceTypeName(int)>
<com.android.systemui.ExpandHelper$ViewScaler: float getHeight()>
<com.android.internal.view.menu.MenuItemImpl: java.lang.String getShortcutLabel()>
<android.content.res.Resources: int getDimensionPixelSize(int)>
<com.android.mms.util.Recycler$MmsRecycler: android.database.Cursor getAllThreads(android.content.Context)>
<com.android.launcher2.AppsCustomizeTabHost: java.lang.String getTabTagForContentType(com.android.launcher2.AppsCustomizePagedView$ContentType)>
<android.app.SharedPreferencesImpl: java.lang.String getString(java.lang.String,java.lang.String)>
<com.android.exchange.adapter.AccountSyncAdapter: java.lang.String getCollectionName()>
<com.android.email.activity.UIControllerTwoPane: int getLayoutId()>
<android.os.Debug: int getThreadAllocCount()>
<com.android.internal.view.menu.MenuItemImpl: android.graphics.drawable.Drawable getIcon()>
<com.android.mms.dom.smil.TimeImpl: double getOffset()>
<com.android.deskclock.widget.multiwaveview.PointCloud$GlowManager: float getY()>
<com.android.deskclock.widget.multiwaveview.PointCloud$GlowManager: float getX()>
<com.android.internal.view.menu.ActionMenuItem: char getNumericShortcut()>
<android.app.PendingIntent: android.content.IIntentSender getTarget()>
<com.android.i18n.phonenumbers.geocoding.FlyweightMapStorage: java.lang.String getDescription(int)>
<android.hardware.input.InputManager: android.view.InputDevice getInputDevice(int)>
<android.content.SyncManager: long access$3000()>
<android.text.style.RelativeSizeSpan: float getSizeChange()>
<android.widget.ViewAnimator: int getBaseline()>
<android.view.ViewDebug: long getViewInstanceCount()>
<com.google.android.picasasync.PicasaDatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>
<com.android.inputmethod.latin.ExpandableDictionary: java.util.ArrayList getWordsInner(com.android.inputmethod.latin.WordComposer,java.lang.CharSequence,com.android.inputmethod.keyboard.ProximityInfo)>
<android.media.MediaMetadataRetriever: android.graphics.Bitmap getFrameAtTime(long,int)>
<com.android.email.activity.MessagesAdapter$SearchCursorLoader: android.database.Cursor loadInBackground()>
<android.webkit.WebSettingsClassic: boolean getNeedInitialFocus()>
<com.android.internal.policy.impl.PhoneWindowManager: int finishPostLayoutPolicyLw()>
<android.webkit.WebSettingsClassic$AutoFillProfile: java.lang.String getCity()>
<com.android.emailcommon.utility.EmailAsyncTask$Tracker: int getTaskCountForTest()>
<android.app.Activity: android.content.ComponentName getCallingActivity()>
<android.os.storage.StorageManager: java.lang.String getMountedObbPath(java.lang.String)>
<com.android.camera.Util: int[] getRelativeLocation(android.view.View,android.view.View)>
<com.android.internal.policy.impl.PhoneWindowManager: int getNonDecorDisplayWidth(int,int,int)>
<android.filterfw.core.FrameFormat: int getBaseType()>
<android.media.videoeditor.VideoEditorImpl: android.media.videoeditor.AudioTrack getAudioTrack(java.lang.String)>
<android.graphics.NinePatch: int getDensity()>
<android.view.TextureView: android.graphics.Matrix getTransform(android.graphics.Matrix)>
<com.google.android.apps.lightcycle.panorama.LightCycleRenderer: com.google.android.apps.lightcycle.panorama.RenderedGui getRenderedGui()>
<com.android.org.bouncycastle.asn1.DERSequenceParser: com.android.org.bouncycastle.asn1.ASN1Primitive getLoadedObject()>
<com.android.org.bouncycastle.asn1.DERBitString: byte[] getBytes(int)>
<android.media.audiofx.AudioEffect: int getParameter(int,int[])>
<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getApplicationIcon(android.content.pm.ApplicationInfo)>
<android.content.res.XmlBlock$Parser: int getDepth()>
<com.android.mms.MmsApp: android.provider.SearchRecentSuggestions getRecentSuggestions()>
<com.android.server.AppWidgetServiceImpl: android.widget.RemoteViews getAppWidgetViews(int)>
<com.android.launcher2.SmoothPagedView: int getScrollMode()>
<android.filterpacks.performance.Throughput: int getPeriodTime()>
<android.widget.ProgressBar: int getProgress()>
<com.android.inputmethod.keyboard.MainKeyboardView: java.lang.String getFullDisplayName(android.view.inputmethod.InputMethodSubtype,android.content.res.Resources)>
<com.android.providers.applications.ApplicationsProvider: java.lang.String getType(android.net.Uri)>
<android.webkit.WebResourceResponse: java.lang.String getEncoding()>
<com.android.emailcommon.internet.MimeMessage: java.lang.String getMimeType()>
<android.view.ViewGroup$MarginLayoutParams: int getMarginStart()>
<android.widget.NumberPicker: java.lang.String[] getDisplayedValues()>
<android.hardware.usb.UsbRequest: android.hardware.usb.UsbEndpoint getEndpoint()>
<com.android.server.display.HeadlessDisplayAdapter$HeadlessDisplayDevice: com.android.server.display.DisplayDeviceInfo getDisplayDeviceInfoLocked()>
<android.preference.PreferenceManager: int getSharedPreferencesMode()>
<com.android.systemui.recent.RecentsVerticalScrollView: android.view.View getChildContentView(android.view.View)>
<android.graphics.YuvImage: int[] getStrides()>
<android.widget.TextView: int getLineCount()>
<android.view.CompatibilityInfoHolder: android.content.res.CompatibilityInfo getIfNeeded()>
<android.view.MotionEvent: float getY()>
<android.view.MotionEvent: float getX()>
<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber mergeFrom(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>
<android.content.ContextWrapper: java.io.File getObbDir()>
<com.android.mms.dom.NodeImpl: org.w3c.dom.Node getNextSibling()>
<android.media.IAudioRoutesObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.android.deskclock.timer.CountingTimerView$UnsignedTime: float getWidth()>
<android.webkit.WebSettingsClassic: int getCacheMode()>
<com.android.videoeditor.service.MovieMediaItem: long getAppTimelineDuration()>
<android.emoji.EmojiFactory: android.graphics.Bitmap getBitmapFromVendorSpecificPua(int)>
<android.widget.AbsListView: int getCheckedItemCount()>
<android.app.admin.DevicePolicyManager: int getPasswordMinimumSymbols(android.content.ComponentName,int)>
<com.google.android.picasasync.UploadTaskEntry: java.lang.String getUploadUrl()>
<android.app.ActivityManager: android.graphics.Bitmap getTaskTopThumbnail(int)>
<com.android.phone.PhoneInterfaceManager: int getDataActivity()>
<com.android.mms.TempFileProvider: java.lang.String getScrapPath(android.content.Context)>
<android.provider.Settings$NameValueCache: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)>
<android.view.animation.Animation: int getBackgroundColor()>
<android.webkit.ZoomManager: float getInvScale()>
<com.android.org.bouncycastle.asn1.LimitedInputStream: int getRemaining()>
<android.content.pm.IPackageManager$Stub$Proxy: int getApplicationEnabledSetting(java.lang.String,int)>
<android.text.style.QuoteSpan: int getColor()>
<android.filterfw.core.CachedFrameManager: android.filterfw.core.Frame newBoundFrame(android.filterfw.core.FrameFormat,int,long)>
<com.android.launcher2.AppsCustomizePagedView: int getAssociatedUpperPageBound(int)>
<android.view.DragEvent: boolean getResult()>
<android.widget.ResourceCursorAdapter: android.view.View newDropDownView(android.content.Context,android.database.Cursor,android.view.ViewGroup)>
<com.android.email.provider.EmailProvider: java.lang.String getType(android.net.Uri)>
<com.android.internal.widget.ActionBarView: android.widget.SpinnerAdapter getDropdownAdapter()>
<com.android.email.Preferences: com.android.email.Preferences getPreferences(android.content.Context)>
<com.android.launcher2.FolderIcon$FolderRingAnimator: float getInnerRingSize()>
<android.graphics.drawable.ScaleDrawable$ScaleState: int getChangingConfigurations()>
<android.content.IntentFilter: int getPriority()>
<com.android.providers.downloads.OpenHelper: android.content.Intent buildViewIntent(android.content.Context,long)>
<android.media.audiofx.Equalizer: short getNumberOfBands()>
<com.android.internal.util.State: java.lang.String getName()>
<android.drm.mobile1.DrmRights: android.drm.mobile1.DrmConstraintInfo getConstraint(int)>
<android.filterfw.core.FilterPort: java.lang.String toString()>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: java.lang.String getLeadingDigits()>
<android.view.View: android.graphics.Bitmap createSnapshot(android.graphics.Bitmap$Config,int,boolean)>
<com.android.server.sip.SipHelper: javax.sip.ServerTransaction getServerTransaction(javax.sip.RequestEvent)>
<android.view.View: int getWindowAttachCount()>
<com.android.emailcommon.provider.HostAuth: com.android.emailcommon.provider.HostAuth restoreHostAuthWithId(android.content.Context,long)>
<com.android.email.Preferences: int getTextZoom()>
<android.content.res.TypedArray: int getIndexCount()>
<android.text.style.TextAppearanceSpan: int getSpanTypeId()>
<android.widget.AutoCompleteTextView: int getThreshold()>
<android.app.Activity: java.lang.CharSequence getTitle()>
<android.view.MotionEvent: float getHistoricalPressure(int)>
<com.android.mms.dom.smil.SmilRegionElementImpl: int getTop()>
<com.android.uiautomator.core.UiDevice: int getDisplayWidth()>
<com.android.systemui.recent.RecentsVerticalScrollView: android.view.View getChildAtPosition(android.view.MotionEvent)>
<android.app.Dialog: android.content.Context getContext()>
<com.android.org.bouncycastle.asn1.ASN1Object: byte[] getEncoded(java.lang.String)>
<android.app.PendingIntent: int getCreatorUid()>
<android.widget.Editor$SuggestionsPopupWindow$SuggestionAdapter: java.lang.Object getItem(int)>
<com.android.internal.os.ProcessStats: int getLastSoftIrqTime()>
<android.media.videoeditor.AudioTrack: int getDuckedTrackVolume()>
<android.view.ViewConfiguration: int getHoverTapTimeout()>
<com.android.email.ResourceHelper: int getAccountColor(long)>
<android.widget.TextView: int getInputType()>
<android.media.videoeditor.MediaItem: java.lang.String getFilename()>
<android.graphics.Paint: int getTextRunCursor(java.lang.String,int,int,int,int,int)>
<android.provider.Settings$Secure: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)>
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: java.util.List getInstalledProviders(int)>
<android.view.KeyEvent: int getMaxKeyCode()>
<android.os.Bundle: java.lang.String getPairValue()>
<android.widget.CursorAdapter: android.database.Cursor getCursor()>
<com.android.email.mail.store.imap.ImapString: int getNumberOrZero()>
<android.view.InputDevice: java.lang.String getName()>
<android.graphics.drawable.GradientDrawable: int getOpacity()>
<android.view.ViewConfiguration: int getJumpTapTimeout()>
<com.android.videoeditor.service.MovieAudioTrack: int getAudioBitrate()>
<android.preference.PreferenceManager: android.preference.PreferenceFragment getFragment()>
<com.android.launcher2.PagedViewCellLayout: int getContentHeight()>
<android.animation.PropertyValuesHolder$FloatPropertyValuesHolder: java.lang.Object getAnimatedValue()>
<android.media.MediaRouter$RouteInfo: java.lang.CharSequence getName(android.content.Context)>
<android.app.LocalActivityManager: android.os.Bundle saveInstanceState()>
<com.android.uiautomator.core.QueryController: java.lang.String getLastTraversedText()>
<android.os.CommonTimeConfig: java.lang.String getInterfaceBinding()>
<com.android.systemui.statusbar.policy.NotificationRowLayout: android.view.View getChildAtPosition(float,float)>
<com.android.launcher2.PagedView: int getPageForView(android.view.View)>
<com.android.inputmethod.latin.spellcheck.SpellCheckerProximityInfo: int[] getProximityForScript(int)>
<android.content.res.XmlBlock$Parser: int getAttributeNameResource(int)>
<com.android.systemui.recent.RecentTasksLoader: android.graphics.Bitmap getDefaultIcon()>
<com.android.server.wm.WindowState: android.graphics.Rect getGivenVisibleInsetsLw()>
<android.text.style.LocaleSpan: java.util.Locale getLocale()>
<android.content.res.Resources: int getColor(int)>
<android.webkit.WebSettings: java.lang.String getSerifFontFamily()>
<android.content.res.TypedArray: android.content.res.Resources getResources()>
<android.graphics.Paint: android.graphics.Rasterizer getRasterizer()>
<com.android.videoeditor.service.MovieOverlay: long getDuration()>
<android.widget.AdapterView: java.lang.Object getSelectedItem()>
<com.android.internal.widget.multiwaveview.TargetDrawable: float getAlpha()>
<com.android.internal.view.IInputMethod$Stub: android.os.IBinder asBinder()>
<com.android.email.activity.ThreePaneLayout: com.android.email.activity.MessageCommandButtonView getMessageCommandButtons()>
<com.android.videoeditor.widgets.ImageViewTouchBase: android.graphics.Bitmap getImageBitmap()>
<android.media.AudioRecord: int getSampleRate()>
<android.app.admin.DevicePolicyManager: long getMaximumTimeToLock(android.content.ComponentName,int)>
<com.android.inputmethod.keyboard.internal.KeyboardIconsSet: java.lang.String getIconName(int)>
<com.android.email.activity.setup.DuplicateAccountDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)>
<android.app.Fragment: android.app.FragmentManager getFragmentManager()>
<android.widget.TextView: int getHighlightColor()>
<android.hardware.Camera$Parameters: int getZoom()>
<android.graphics.drawable.BitmapDrawable: int getIntrinsicHeight()>
<android.app.ContextImpl: int getUserId()>
<android.webkit.WebViewDatabase: android.webkit.WebViewDatabase getInstance(android.content.Context)>
<android.util.TypedValue: float getDimension(android.util.DisplayMetrics)>
<android.graphics.drawable.ShapeDrawable: android.graphics.drawable.shapes.Shape getShape()>
<android.media.videoeditor.MediaImageItem: int getGeneratedClipHeight()>
<android.view.ViewConfiguration: int getTouchSlop()>
<com.android.systemui.statusbar.phone.Ticker$Segment: java.lang.CharSequence getText()>
<android.accounts.IAccountAuthenticator$Stub: android.accounts.IAccountAuthenticator asInterface(android.os.IBinder)>
<android.app.DownloadManager: int markRowDeleted(long[])>
<com.android.email.activity.MailboxFragmentAdapter: long getAccountId(android.database.Cursor)>
<android.os.Parcel: byte[] createByteArray()>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.android.org.bouncycastle.asn1.x500.RDN: com.android.org.bouncycastle.asn1.x500.RDN getInstance(java.lang.Object)>
<android.graphics.drawable.ScaleDrawable: int getOpacity()>
<com.android.inputmethod.latin.RichInputConnection: com.android.inputmethod.latin.RichInputConnection$Range getWordRangeAtCursor(java.lang.String,int)>
<android.filterfw.geometry.Rectangle: float getWidth()>
<android.media.MediaRouter$RouteCategory: int getSupportedTypes()>
<com.android.server.pm.Settings: java.lang.Object getUserIdLPr(int)>
<com.android.org.bouncycastle.asn1.x509.SubjectPublicKeyInfo: com.android.org.bouncycastle.asn1.ASN1Primitive getPublicKey()>
<android.os.Environment$UserEnvironment: java.io.File getExternalStoragePublicDirectory(java.lang.String)>
<android.webkit.WebSettings: java.lang.String getPluginsPath()>
<com.android.org.bouncycastle.asn1.DERBoolean: com.android.org.bouncycastle.asn1.ASN1Boolean getInstance(java.lang.Object)>
<android.view.ActionMode: boolean getTitleOptionalHint()>
<android.app.IActivityController$Stub: android.os.IBinder asBinder()>
<android.webkit.WebSettings: android.webkit.WebSettings$PluginState getPluginState()>
<com.android.mms.model.LayoutModel: java.lang.String getBackgroundColor()>
<com.android.inputmethod.latin.SubtypeLocale: java.lang.String[] getPredefinedKeyboardLayoutSet()>
<android.media.AudioManager: int getMasterStreamType()>
<com.android.server.sip.SipSessionGroup$SipSessionImpl$2$1: java.lang.String getSipDomain()>
<com.android.mms.dom.smil.SmilRegionElementImpl: int getLeft()>
<android.media.videoeditor.MediaVideoItem: int getAspectRatio()>
<android.hardware.Camera$Parameters: int getJpegQuality()>
<com.android.mms.dom.events.EventImpl: boolean getBubbles()>
<android.os.UserManager: java.util.List getUsers(boolean)>
<com.android.internal.app.AlertController: int getIconAttributeResId(int)>
<com.google.android.picasasync.UploadsManager$UploadTask: com.google.android.picasasync.UploadTaskEntry getNextUpload()>
<android.hardware.display.DisplayManagerGlobal: android.view.Display getRealDisplay(int)>
<com.android.exchange.adapter.Search: int searchMessages(android.content.Context,long,com.android.emailcommon.service.SearchParams,long)>
<android.os.Bundle: double getDouble(java.lang.String,double)>
<android.webkit.WebSettings: boolean getUseWideViewPort()>
<android.webkit.CookieManagerClassic: java.lang.String getCookie(java.lang.String)>
<android.app.Instrumentation: android.os.Bundle getAllocCounts()>
<android.widget.AutoCompleteTextView: int getDropDownHorizontalOffset()>
<com.android.internal.view.IInputMethodManager$Stub$Proxy: android.view.inputmethod.InputMethodSubtype getLastInputMethodSubtype()>
<android.webkit.AccessibilityInjectorFallback$AccessibilityWebContentKeyBinding: int getKeyCode()>
<android.widget.ImageView: int getImageAlpha()>
<android.app.Activity: int getVolumeControlStream()>
<android.util.EventLog$Event: long getTimeNanos()>
<com.android.launcher2.LauncherApplication: com.android.launcher2.LauncherModel getModel()>
<android.view.IInputFilter$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.content.Intent: java.lang.String getPackage()>
<com.android.internal.widget.ScrollingTabContainerView$TabAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<android.app.SearchableInfo: java.lang.String getSuggestIntentData()>
<android.filterfw.core.Filter: java.util.Collection getInputPorts()>
<com.android.camera.ComboPreferences: int getInt(java.lang.String,int)>
<com.android.inputmethod.keyboard.PointerTracker: com.android.inputmethod.keyboard.Key getKeyOn(int,int)>
<com.android.mms.dom.smil.SmilPlayer$TimelineEntry: int getAction()>
<android.widget.ListView: int getMaxScrollAmount()>
<android.text.Layout$SpannedEllipsizer: int getSpanFlags(java.lang.Object)>
<com.android.exchange.utility.SimpleIcsWriter: byte[] getBytes()>
<android.filterfw.core.FrameFormat: int getSize()>
<android.content.res.AssetManager: java.lang.CharSequence[] getResourceTextArray(int)>
<android.media.videoeditor.MediaImageItem: int getHeight()>
<com.android.org.bouncycastle.asn1.DERObjectIdentifier: java.lang.String getId()>
<android.webkit.WebViewCore: android.content.Context getContext()>
<android.widget.AutoCompleteTextView: int getDropDownWidth()>
<android.graphics.drawable.AnimationDrawable: int getDuration(int)>
<com.android.videoeditor.util.ImageUtils: android.graphics.Bitmap buildOverlayBitmap(android.content.Context,android.graphics.Bitmap,int,java.lang.String,java.lang.String,int,int)>
<android.view.ViewGroup: int getChildDrawingOrder(int,int)>
<android.view.ContextThemeWrapper: android.content.res.Resources$Theme getTheme()>
<com.google.android.apps.lightcycle.opengl.Sphere: int getTextureId()>
<android.widget.DatePicker: long getMaxDate()>
<android.app.Activity: android.content.Intent getParentActivityIntent()>
<android.text.Layout: float getSecondaryHorizontal(int)>
<android.app.IUiModeManager$Stub$Proxy: int getNightMode()>
<com.android.mms.dom.ElementImpl: org.w3c.dom.Attr getAttributeNodeNS(java.lang.String,java.lang.String)>
<android.text.SpanSet: int getNextTransition(int,int)>
<android.widget.RemoteViews$SetRemoteViewsAdapterIntent: java.lang.String getActionName()>
<android.mtp.MtpObjectInfo: int getSequenceNumber()>
<android.widget.TextView: java.lang.CharSequence getTransformedText(int,int)>
<android.app.Fragment: android.view.View getView()>
<com.android.videoeditor.service.VideoEditorProject$Download: java.lang.String getMimeType()>
<android.app.ApplicationPackageManager: int getUidForSharedUser(java.lang.String)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getActiveAdmins(int)>
<com.android.launcher2.CellLayout: int getDesiredWidth()>
<android.view.View: android.view.IWindowSession getWindowSession()>
<com.android.launcher2.Workspace: android.graphics.Bitmap createDragBitmap(android.view.View,android.graphics.Canvas,int)>
<com.android.org.bouncycastle.asn1.x509.SubjectPublicKeyInfo: com.android.org.bouncycastle.asn1.DERBitString getPublicKeyData()>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getVoicemail()>
<android.text.method.LinkMovementMethod: android.text.method.MovementMethod getInstance()>
<com.android.mms.ui.UriImage: int getHeight()>
<com.android.email.activity.MessageViewFragmentBase: long getAccountId()>
<android.widget.AdapterView: int getFirstVisiblePosition()>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: java.lang.String getNationalPrefixForParsing()>
<com.android.mms.model.RegionModel: java.lang.String getRegionId()>
<com.android.musicfx.ControlPanelEffect: com.android.musicfx.ControlPanelEffect$ControlMode getControlMode(int)>
<com.android.mms.model.MediaModelFactory: com.android.mms.model.MediaModel getMediaModel(android.content.Context,org.w3c.dom.smil.SMILMediaElement,com.android.mms.model.LayoutModel,com.google.android.mms.pdu.PduBody)>
<android.content.IntentFilter: java.lang.String getAction(int)>
<android.renderscript.Sampler: android.renderscript.Sampler$Value getMagnification()>
<com.android.org.bouncycastle.asn1.DERUTF8String: com.android.org.bouncycastle.asn1.DERUTF8String getInstance(java.lang.Object)>
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>
<com.android.mms.dom.NodeImpl: java.lang.String getBaseURI()>
<com.android.internal.widget.IRemoteViewsFactory$Stub$Proxy: int getCount()>
<com.android.inputmethod.keyboard.internal.KeysCache: com.android.inputmethod.keyboard.Key get(com.android.inputmethod.keyboard.Key)>
<android.graphics.Bitmap: int[] getLayoutBounds()>
<com.android.camera.ui.OverlayRenderer: int getWidth()>
<android.graphics.drawable.ColorDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()>
<android.view.animation.GridLayoutAnimationController: long getDelayForView(android.view.View)>
<com.android.inputmethod.latin.ImfUtils: android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtype(android.content.Context,android.view.inputmethod.InputMethodSubtype)>
<android.provider.Settings$Global: long getLong(android.content.ContentResolver,java.lang.String)>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getMobile()>
<android.text.SpannableStringBuilder: int getSpanStart(java.lang.Object)>
<android.app.admin.DevicePolicyManager: int getPasswordMinimumNumeric(android.content.ComponentName)>
<android.text.method.ReplacementTransformationMethod$SpannedReplacementCharSequence: java.lang.Object[] getSpans(int,int,java.lang.Class)>
<android.text.method.SingleLineTransformationMethod: android.text.method.SingleLineTransformationMethod getInstance()>
<android.app.LoadedApk: java.lang.String getLibDir()>
<com.android.inputmethod.latin.WordComposer: com.android.inputmethod.latin.InputPointers getInputPointers()>
<android.widget.ExpandableListView: long getSelectedPosition()>
<com.android.internal.widget.multiwaveview.PointCloud: int getAlphaForPoint(com.android.internal.widget.multiwaveview.PointCloud$Point)>
<android.view.Choreographer: long getFrameDelay()>
<android.animation.AnimatorSet: long getStartDelay()>
<android.view.Choreographer: long getFrameTimeNanos()>
<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getDrawable(java.lang.String,int,android.content.pm.ApplicationInfo)>
<com.android.internal.widget.IRemoteViewsFactory$Stub$Proxy: int getViewTypeCount()>
<android.webkit.FindActionModeCallback: int getActionModeGlobalBottom()>
<android.os.Bundle: android.os.Bundle getBundle(java.lang.String)>
<com.android.ex.chips.RecipientEntry: int getEntryType()>
<android.view.ViewConfiguration: int getKeyRepeatTimeout()>
<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: int getSectionForPosition(int)>
<com.android.videoeditor.service.VideoEditorProject: java.lang.String getPath()>
<android.media.AudioManager: java.lang.String getProperty(java.lang.String)>
<com.android.mms.dom.NodeImpl: org.w3c.dom.Node getFirstChild()>
<com.android.email.Preferences: boolean getEnableStrictMode()>
<com.android.internal.policy.PolicyManager: android.view.LayoutInflater makeNewLayoutInflater(android.content.Context)>
<com.android.mms.MmsApp: android.telephony.TelephonyManager getTelephonyManager()>
<android.view.ViewConfiguration: int getTapTimeout()>
<android.media.IMediaScannerListener$Stub: android.os.IBinder asBinder()>
<com.android.deskclock.widget.multiwaveview.GlowPadView: int getTargetResourceId()>
<com.android.uiautomator.core.UiAutomatorBridge: com.android.uiautomator.core.InteractionController getInteractionController()>
<android.view.HardwareRenderer$GlRenderer: int getHeight()>
<android.animation.AnimatorSet: long getDuration()>
<android.text.SpannableStringBuilder: float getTextRunAdvances(int,int,int,int,int,float[],int,android.graphics.Paint)>
<com.android.launcher2.CellLayout: int getWidthGap()>
<com.android.server.ProcessMap: java.util.HashMap getMap()>
<android.filterpacks.videoproc.BackDropperFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)>
<com.android.internal.widget.ActionBarContextView: java.lang.CharSequence getSubtitle()>
<com.android.email.mail.transport.MailTransport: int getPort()>
<android.graphics.drawable.InsetDrawable: int getOpacity()>
<android.media.MediaFile: java.lang.String getMimeTypeForFormatCode(int)>
<com.android.internal.policy.impl.GlobalActions$SinglePressAction: android.view.View create(android.content.Context,android.view.View,android.view.ViewGroup,android.view.LayoutInflater)>
<android.preference.Preference: android.content.SharedPreferences$Editor getEditor()>
<com.android.deskclock.AlarmAlertFullScreen: int getLayoutResId()>
<android.os.Environment: java.io.File getLegacyExternalStorageDirectory()>
<android.content.Intent: java.util.Set getCategories()>
<com.android.org.bouncycastle.util.encoders.Base64: byte[] decode(java.lang.String)>
<android.view.MotionEvent: float getSize(int)>
<android.view.inputmethod.InputMethodInfo: android.content.ComponentName getComponent()>
<com.android.email.Preferences: int getAutoAdvanceDirection()>
<com.android.email.activity.UIControllerTwoPane$ActionBarControllerCallback: java.lang.String getSearchHint()>
<com.android.server.am.CompatModePackages: int getFrontActivityScreenCompatModeLocked()>
<com.android.server.pm.PackageSettingBase: int getInstallStatus()>
<android.widget.ImageView: int getBaseline()>
<android.text.BoringLayout: int getLineDescent(int)>
<android.os.Looper: android.os.MessageQueue getQueue()>
<android.app.ApplicationPackageManager: java.util.List getInstalledApplications(int)>
<com.android.server.display.DisplayDevice: java.lang.String getNameLocked()>
<android.widget.SimpleCursorAdapter: android.widget.SimpleCursorAdapter$CursorToStringConverter getCursorToStringConverter()>
<android.view.SurfaceView: android.view.SurfaceHolder getHolder()>
<com.android.musicfx.ControlPanelEffect: java.lang.Boolean getParameterBoolean(android.content.Context,java.lang.String,int,com.android.musicfx.ControlPanelEffect$Key)>
<android.webkit.PluginManager: java.lang.Class getPluginClass(java.lang.String,java.lang.String)>
<android.webkit.WebSettings: int getTextZoom()>
<android.media.AudioTrack: int getStreamType()>
<android.os.SystemService: android.os.SystemService$State getState(java.lang.String)>
<com.android.inputmethod.latin.ResizableIntArray: int getLength()>
<com.android.videoeditor.service.MovieMediaItem: long getAppBoundaryBeginTime()>
<android.widget.TextView: int getCompoundPaddingStart()>
<android.media.IRingtonePlayer$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.android.deskclock.widget.multiwaveview.PointCloud$WaveManager: float getRadius()>
<android.app.SearchableInfo: java.lang.String getSuggestAuthority()>
<com.android.deskclock.stopwatch.StopwatchFragment$ImageLabelAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.email.widget.WidgetManager: com.android.email.widget.EmailWidget getOrCreateWidget(android.content.Context,int)>
<com.android.mms.MmsConfig: int getMaxImageWidth()>
<com.android.mms.util.DownloadManager: com.android.mms.util.DownloadManager access$000()>
<com.android.internal.os.ProcessStats: int getLastIrqTime()>
<android.view.TextureView: android.view.HardwareLayer getHardwareLayer()>
<android.emoji.EmojiFactory: int getAndroidPuaFromVendorSpecificSjis(char)>
<android.filterfw.format.PrimitiveFormat: android.filterfw.core.MutableFrameFormat createInt16Format(int,int)>
<android.view.View: android.os.Handler getHandler()>
<com.android.videoeditor.util.MediaItemUtils: long getDefaultImageDuration()>
<android.webkit.AccessibilityInjectorFallback$AccessibilityWebContentKeyBinding: int getActionCount()>
<com.android.internal.policy.impl.keyguard.KeyguardWidgetFrame: android.os.Handler getWorkerHandler()>
<android.view.ScaleGestureDetector: float getPreviousSpanX()>
<android.view.ScaleGestureDetector: float getPreviousSpanY()>
<com.android.org.bouncycastle.asn1.DERExternalParser: com.android.org.bouncycastle.asn1.ASN1Primitive getLoadedObject()>
<android.webkit.WebViewClassic: float getScale()>
<android.text.Layout: java.lang.Object[] getParagraphSpans(android.text.Spanned,int,int,java.lang.Class)>
<com.android.ex.chips.RecipientEditTextView: int getViewWidth()>
<android.view.VelocityTracker: android.view.VelocityTracker getNextPoolable()>
<com.android.musicfx.seekbar.ProgressBar: int getMax()>
<com.android.email.activity.UIControllerOnePane$ActionBarControllerCallback: java.lang.String getMessageSubject()>
<android.view.ScaleGestureDetector: float getCurrentSpan()>
<android.media.videoeditor.AudioTrack: int getAudioType()>
<com.android.email.mail.store.ImapStore: com.android.emailcommon.mail.Folder getFolder(java.lang.String)>
<android.text.SpannableStringInternal: int getSpanStart(java.lang.Object)>
<com.android.email.activity.MessageList: long getAccountFromIntent(android.content.Context,android.content.Intent)>
<com.android.org.bouncycastle.asn1.DERSetParser: com.android.org.bouncycastle.asn1.ASN1Primitive getLoadedObject()>
<android.hardware.usb.UsbManager: java.util.HashMap getDeviceList()>
<android.emoji.EmojiFactory: int getVendorSpecificPuaFromAndroidPua(int)>
<android.content.ComponentName: java.lang.String getClassName()>
<android.view.ViewPropertyAnimator: long getStartDelay()>
<android.widget.ListPopupWindow: android.view.View getAnchorView()>
<com.android.inputmethod.latin.DebugSettingsActivity: android.content.Intent getIntent()>
<com.android.systemui.recent.TaskDescription: java.lang.CharSequence getLabel()>
<android.widget.ListView: long[] getCheckItemIds()>
<android.renderscript.ProgramStore: android.renderscript.ProgramStore$DepthFunc getDepthFunc()>
<android.media.videoeditor.OverlayFrame: int getResizedRGBSizeWidth()>
<android.accounts.IAccountManagerResponse$Stub: android.os.IBinder asBinder()>
<com.android.systemui.statusbar.BaseStatusBar: com.android.systemui.statusbar.BaseStatusBar$H createHandler()>
<android.webkit.WebSettingsClassic$AutoFillProfile: java.lang.String getCountry()>
<android.drm.DrmInfoRequest: int getInfoType()>
<android.app.IAlarmManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.app.admin.DeviceAdminInfo: android.content.pm.ActivityInfo getActivityInfo()>
<android.drm.DrmRights: java.lang.String getMimeType()>
<android.gesture.GestureStore: java.util.ArrayList recognize(android.gesture.Gesture)>
<android.view.accessibility.AccessibilityRecord: int getAddedCount()>
<android.os.IMessenger$Stub: android.os.IBinder asBinder()>
<android.content.SyncManager: long access$3700()>
<android.view.View: long getDrawingTime()>
<com.android.camera.ActivityBase: int getResultCode()>
<android.server.search.Searchables: java.util.ArrayList getGlobalSearchActivities()>
<com.android.videoeditor.service.MovieTheme: int getPreviewImageResId()>
<android.content.ContextWrapper: java.io.File getFilesDir()>
<android.filterfw.core.FrameFormat: java.lang.Object getMetaValue(java.lang.String)>
<android.animation.IntKeyframeSet: int getIntValue(float)>
<android.view.View: boolean draw(android.graphics.Canvas,android.view.ViewGroup,long)>
<com.android.server.accessibility.TouchExplorer$InjectedPointerTracker: android.view.MotionEvent getLastInjectedHoverEvent()>
<android.text.method.ReplacementTransformationMethod$SpannedReplacementCharSequence: int getSpanStart(java.lang.Object)>
<android.media.audiofx.PresetReverb: android.media.audiofx.PresetReverb$Settings getProperties()>
<com.android.internal.widget.LockPatternUtils: boolean getPowerButtonInstantlyLocks()>
<android.drm.mobile1.DrmRawContent: java.lang.String getRightsAddress()>
<com.android.email.activity.ShortcutPickerFragment$AccountShortcutPickerFragment: java.lang.String[] getFromColumns()>
<android.filterfw.core.InputPort: android.filterfw.core.FrameFormat getSourceFormat()>
<com.android.exchange.EasResponse: java.io.InputStream getInputStream()>
<com.android.email.activity.UIControllerTwoPane$ActionBarControllerCallback: java.lang.String getMessageSubject()>
<com.google.android.picasasync.PicasaApi: int getUploadedPhotos(com.google.android.picasasync.AlbumEntry,com.google.android.picasasync.PicasaApi$EntryHandler)>
<android.media.effect.FilterEffect: android.filterfw.core.Frame frameFromTexture(int,int,int)>
<android.media.ExifInterface: double getAltitude(double)>
<com.android.internal.os.ProcessStats: com.android.internal.os.ProcessStats$Stats getStats(int)>
<android.emoji.EmojiFactory: int getMaximumAndroidPua()>
<android.view.PointerIcon: android.view.PointerIcon getDefaultIcon(android.content.Context)>
<com.android.launcher2.LauncherAppWidgetHost: android.appwidget.AppWidgetHostView onCreateView(android.content.Context,int,android.appwidget.AppWidgetProviderInfo)>
<com.android.deskclock.worldclock.WorldClockAdapter: java.lang.Object getItem(int)>
<android.view.ViewGroup: int getLayoutMode()>
<android.content.res.XmlBlock$Parser: int getColumnNumber()>
<com.android.uiautomator.core.QueryController: int getPatternCount(com.android.uiautomator.core.UiSelector)>
<com.android.server.NativeDaemonEvent: java.lang.String getRawEvent()>
<com.android.systemui.statusbar.phone.PhoneStatusBar: android.view.View getStatusBarView()>
<android.view.inputmethod.InputConnectionWrapper: android.view.inputmethod.ExtractedText getExtractedText(android.view.inputmethod.ExtractedTextRequest,int)>
<android.text.style.SubscriptSpan: int getSpanTypeId()>
<com.android.internal.view.menu.MenuBuilder: com.android.internal.view.menu.MenuItemImpl getExpandedItem()>
<android.preference.PreferenceGroup: android.preference.Preference getPreference(int)>
<com.android.server.am.ActivityStack: android.app.ActivityManager$TaskThumbnails getTaskThumbnailsLocked(com.android.server.am.TaskRecord)>
<com.android.internal.os.PowerProfile: double getAveragePower(java.lang.String)>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc: java.lang.String getExampleNumber()>
<android.media.videoeditor.MediaProperties: int getSupportedMaxVolume()>
<com.android.mms.transaction.TransactionBundle: byte[] getPushData()>
<android.widget.TextView: android.text.method.KeyListener getKeyListener()>
<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getApplicationLogo(java.lang.String)>
<android.graphics.Paint: android.graphics.Paint$Align getTextAlign()>
<android.widget.NumberPicker: float getTopFadingEdgeStrength()>
<android.widget.Spinner: java.lang.CharSequence getPrompt()>
<com.android.providers.telephony.MmsSmsDatabaseHelper: com.android.providers.telephony.MmsSmsDatabaseHelper getInstance(android.content.Context)>
<com.android.inputmethod.latin.ExpandableBinaryDictionary: java.lang.String getFilenameWithLocale(java.lang.String,java.lang.String)>
<android.app.ActivityManagerProxy: java.lang.String getProviderMimeType(android.net.Uri,int)>
<android.filterfw.core.FrameFormat: int[] getDimensions()>
<com.android.email.provider.ContentCache: android.database.Cursor getCachedCursor(java.lang.String,java.lang.String[])>
<android.app.Activity: android.content.SharedPreferences getPreferences(int)>
<com.android.inputmethod.keyboard.MoreKeysKeyboard$MoreKeyDivider: android.graphics.drawable.Drawable getIcon(com.android.inputmethod.keyboard.internal.KeyboardIconsSet,int)>
<android.app.backup.FullBackupDataOutput: android.app.backup.BackupDataOutput getData()>
<com.android.deskclock.timer.TimerFragment$TimersListAdapter: int getCount()>
<android.media.videoeditor.OverlayFrame: int getOverlayFrameWidth()>
<com.android.inputmethod.keyboard.internal.KeyStylesSet$DeclaredKeyStyle: int getInt(android.content.res.TypedArray,int,int)>
<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: java.lang.String getDescriptionForNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,java.util.Locale)>
<com.google.android.apps.lightcycle.panorama.PanoramaFrameOverlay: boolean getDrawOutlineOnly()>
<android.content.ContentProviderProxy: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>
<com.android.launcher2.PagedView: java.lang.String getCurrentPageDescription()>
<android.widget.HeaderViewListAdapter: int getCount()>
<com.android.org.bouncycastle.asn1.ASN1Set: com.android.org.bouncycastle.asn1.ASN1Primitive toDLObject()>
<android.util.AtomicFile: java.io.File getBaseFile()>
<com.android.email.provider.ContentCache: android.database.Cursor get(java.lang.String)>
<android.appwidget.AppWidgetManager: android.appwidget.AppWidgetProviderInfo getAppWidgetInfo(int)>
<android.webkit.WebSettings: java.lang.String getStandardFontFamily()>
<com.android.emailcommon.internet.Rfc822Output: java.lang.String getHtmlBody(java.lang.String)>
<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getActivityLogo(android.content.Intent)>
<android.media.IAudioFocusDispatcher$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.view.View: int getTextDirection()>
<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String getNddPrefixForRegion(java.lang.String,boolean)>
<com.android.launcher2.FastBitmapDrawable: int getMinimumWidth()>
<android.content.res.XmlBlock$Parser: char[] getTextCharacters(int[])>
<android.webkit.WebViewClassic$Factory: java.lang.String getDefaultUserAgent(android.content.Context)>
<android.animation.ValueAnimator: long getFrameDelay()>
<android.os.Debug: java.lang.String[] getVmFeatureList()>
<android.content.Intent: android.content.ClipData getClipData()>
<android.text.DynamicLayout: int getEllipsisStart(int)>
<android.widget.LinearLayout: int getBaselineAlignedChildIndex()>
<android.hardware.display.WifiDisplay: java.lang.String getDeviceAlias()>
<android.support.v4.view.ViewPager: android.support.v4.view.PagerAdapter getAdapter()>
<com.android.launcher2.WallpaperChooserDialogFragment$WallpaperDrawable: int getOpacity()>
<android.webkit.WebView: java.lang.String[] getHttpAuthUsernamePassword(java.lang.String,java.lang.String)>
<android.app.ISearchManager$Stub$Proxy: java.util.List getGlobalSearchActivities()>
<com.android.org.bouncycastle.asn1.DefiniteLengthInputStream: byte[] toByteArray()>
<com.android.deskclock.stopwatch.StopwatchFragment$ImageLabelAdapter: com.android.deskclock.stopwatch.StopwatchFragment$ImageLabelAdapter getShowAllAdapter()>
<android.text.method.TextKeyListener: int getPrefs(android.content.Context)>
<android.webkit.WebView$PrivateAccess: float getHorizontalScrollFactor()>
<android.webkit.ZoomManager: float getDefaultScale()>
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>
<android.media.videoeditor.MediaItem: android.media.videoeditor.MediaArtistNativeHelper getNativeContext()>
<android.view.SurfaceView$4: android.graphics.Rect getSurfaceFrame()>
<android.filterfw.core.FrameFormat: int getNumberOfDimensions()>
<android.text.BoringLayout: int getLineTop(int)>
<android.app.WallpaperManager: android.app.WallpaperInfo getWallpaperInfo()>
<android.filterfw.core.Filter: int getSleepDelay()>
<android.widget.ProgressBar: android.graphics.drawable.Drawable getIndeterminateDrawable()>
<android.view.View: int getWindowSystemUiVisibility()>
<com.android.camera.CameraActivity: long getAutoFocusTime()>
<android.view.MotionEvent: float getHistoricalTouchMinor(int,int)>
<android.media.AudioManager: int getMode()>
<android.preference.ListPreference: java.lang.CharSequence[] getEntryValues()>
<com.android.phone.PhoneGlobals: boolean getRestoreMuteOnInCallResume()>
<com.android.videoeditor.service.MovieOverlay: java.lang.String getId()>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: int getChangingConfigurations()>
<android.widget.TextView: android.text.Layout getHintLayout()>
<com.android.mms.dom.smil.SmilParElementImpl: org.w3c.dom.NodeList getTimeChildren()>
<android.animation.LayoutTransition: android.animation.TimeInterpolator getInterpolator(int)>
<android.media.Metadata: int getInt(int)>
<android.content.BroadcastReceiver$PendingResult: java.lang.String getResultData()>
<com.android.mms.model.TextModel: java.lang.String getText()>
<android.text.style.TextAppearanceSpan: int getTextSize()>
<com.android.inputmethod.keyboard.ProximityInfo: long getNativeProximityInfo()>
<android.accounts.IAccountAuthenticatorResponse$Stub: android.os.IBinder asBinder()>
<android.view.accessibility.IAccessibilityManagerClient$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.media.videoeditor.MediaVideoItem: int getHeight()>
<android.view.DisplayInfo: int getNaturalHeight()>
<com.android.videoeditor.service.MovieAudioTrack: java.lang.String getFilename()>
<android.util.LruCache: java.lang.Object get(java.lang.Object)>
<android.app.AlertDialog$Builder: android.content.Context getContext()>
<android.media.MediaRouter$RouteCategory: java.util.List getRoutes(java.util.List)>
<android.widget.Scroller: int getDuration()>
<com.android.inputmethod.latin.SettingsValues: java.lang.String getPrefAdditionalSubtypes(android.content.SharedPreferences,android.content.res.Resources)>
<com.android.mms.util.DraftCache: boolean getSavingDraft()>
<com.android.org.bouncycastle.asn1.ASN1Exception: java.lang.Throwable getCause()>
<com.android.videoeditor.service.VideoEditorProject$Download: long getTime()>
<android.media.videoeditor.Transition: java.lang.String getFilename()>
<com.android.inputmethod.keyboard.ProximityInfo: com.android.inputmethod.keyboard.ProximityInfo createSpellCheckerProximityInfo(int[],int,int,int)>
<com.android.emailcommon.utility.Utility: java.lang.String[] getRowColumns(android.content.Context,android.net.Uri,long,java.lang.String[])>
<android.webkit.WebSettings: java.lang.String getFantasyFontFamily()>
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String getNameForUid(int)>
<com.android.emailcommon.internet.Rfc822Output: java.lang.String getHtmlAlternate(com.android.emailcommon.provider.EmailContent$Body,boolean)>
<com.android.server.am.ProviderMap: com.android.server.am.ContentProviderRecord getProviderByClass(android.content.ComponentName)>
<com.android.internal.policy.impl.PhoneWindowManager: android.view.animation.Animation createForceHideEnterAnimation(boolean)>
<android.filterfw.core.FilterContext: android.filterfw.core.Frame fetchFrame(java.lang.String)>
<android.webkit.WebChromeClient: android.graphics.Bitmap getDefaultVideoPoster()>
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser)>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: java.lang.String getNationalPrefix()>
<com.android.uiautomator.core.UiDevice: com.android.uiautomator.core.UiAutomatorBridge getAutomatorBridge()>
<android.media.videoeditor.Transition: android.media.videoeditor.MediaArtistNativeHelper$TransitionSettings getTransitionSettings()>
<com.android.camera.CameraHolder: int getNumberOfCameras()>
<android.webkit.WebViewClassic$Factory: android.webkit.WebIconDatabase getWebIconDatabase()>
<android.media.videoeditor.AudioTrack: java.lang.String getAudioWaveformFilename()>
<android.content.res.Resources: float getDimension(int)>
<android.filterpacks.imageproc.ImageSlicer: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)>
<android.view.IRotationWatcher$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.support.v4.app.TaskStackBuilder$TaskStackBuilderImplBase: android.app.PendingIntent getPendingIntent(android.content.Context,android.content.Intent[],int,int,android.os.Bundle)>
<com.android.internal.view.IInputMethodManager$Stub$Proxy: com.android.internal.view.InputBindResult windowGainedFocus(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,int,int,android.view.inputmethod.EditorInfo,com.android.internal.view.IInputContext)>
<android.text.style.URLSpan: java.lang.String getURL()>
<android.widget.FastScroller: java.lang.Object[] getSections()>
<android.content.Intent: java.util.ArrayList getCharSequenceArrayListExtra(java.lang.String)>
<com.android.inputmethod.latin.SubtypeLocale: java.util.Locale getSubtypeLocale(android.view.inputmethod.InputMethodSubtype)>
<android.content.SyncStorageEngine: int getIntColumn(android.database.Cursor,java.lang.String)>
<android.accounts.IAccountManagerResponse$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.view.GLES20Canvas: int saveLayerAlpha(android.graphics.RectF,int,int)>
<android.graphics.Bitmap: int getWidth()>
<android.widget.TextView: boolean getFreezesText()>
<com.android.inputmethod.compat.CompatUtils: java.lang.reflect.Field getField(java.lang.Class,java.lang.String)>
<com.android.videoeditor.service.MovieAudioTrack: long getDuration()>
<android.view.View: int getAccessibilityCursorPosition()>
<android.app.ActivityManager: java.util.List getProcessesInErrorState()>
<android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>
<android.media.MediaRouter$RouteInfo: java.lang.Object getTag()>
<android.mtp.MtpObjectInfo: java.lang.String getName()>
<com.android.launcher2.Workspace: java.util.ArrayList getAllShortcutAndWidgetContainers()>
<android.hardware.usb.UsbDevice: int getDeviceId()>
<com.android.org.bouncycastle.asn1.x500.AttributeTypeAndValue: com.android.org.bouncycastle.asn1.ASN1Encodable getValue()>
<android.webkit.WebSettingsClassic: boolean getAllowUniversalAccessFromFileURLs()>
<android.app.ActivityOptions: int getStartY()>
<android.app.ActivityOptions: int getStartX()>
<android.app.ActivityManagerProxy: int getLaunchedFromUid(android.os.IBinder)>
<com.android.email.activity.setup.AccountSettingsFragment$LoadAccountTask: java.lang.Object[] doInBackground(java.lang.Long[])>
<android.preference.PreferenceActivity$Header: java.lang.CharSequence getBreadCrumbShortTitle(android.content.res.Resources)>
<android.widget.RelativeLayout: int getGravity()>
<android.mtp.MtpDeviceInfo: java.lang.String getVersion()>
<com.android.inputmethod.latin.UserHistoryDictionary: com.android.inputmethod.latin.UserHistoryDictionary getInstance(android.content.Context,java.lang.String,android.content.SharedPreferences)>
<com.android.i18n.phonenumbers.RegexCache$LRUCache: java.lang.Object get(java.lang.Object)>
<android.app.Fragment: java.lang.String getString(int)>
<android.sax.RootElement: org.xml.sax.ContentHandler getContentHandler()>
<android.widget.PopupWindow: android.graphics.drawable.Drawable getBackground()>
<com.android.i18n.phonenumbers.Phonemetadata$NumberFormat: java.lang.String getFormat()>
<android.renderscript.Script$FieldBase: android.renderscript.Type getType()>
<android.app.LocalActivityManager: java.util.HashMap dispatchRetainNonConfigurationInstance()>
<android.app.admin.DevicePolicyManager: boolean getStorageEncryption(android.content.ComponentName)>
<android.hardware.Camera$Parameters: boolean getAutoWhiteBalanceLock()>
<android.widget.SearchView: android.widget.CursorAdapter getSuggestionsAdapter()>
<android.webkit.WebSettingsClassic: java.lang.String getFixedFontFamily()>
<android.graphics.Region: android.graphics.Path getBoundaryPath()>
<android.app.backup.BackupAgent: android.os.IBinder onBind()>
<android.support.v4.app.TaskStackBuilder: android.app.PendingIntent getPendingIntent(int,int,android.os.Bundle)>
<com.android.inputmethod.keyboard.PointerTracker: com.android.inputmethod.keyboard.Key getKey()>
<android.view.ViewGroup: android.view.animation.Animation$AnimationListener getLayoutAnimationListener()>
<android.hardware.usb.UsbEndpoint: int getEndpointNumber()>
<android.graphics.YuvImage: int getWidth()>
<android.content.res.CompatibilityInfo$Translator: android.graphics.Rect getTranslatedContentInsets(android.graphics.Rect)>
<com.android.mms.util.Recycler: int getMessageMaxLimit()>
<com.android.inputmethod.keyboard.MainKeyboardView: com.android.inputmethod.keyboard.PointerTracker$DrawingProxy getDrawingProxy()>
<android.hardware.usb.UsbEndpoint: int getInterval()>
<com.android.mms.MmsApp: java.lang.String getCurrentCountryIso()>
<android.app.ContextImpl: java.io.File getDir(java.lang.String,int)>
<android.provider.Settings$System: boolean getShowGTalkServiceStatusForUser(android.content.ContentResolver,int)>
<com.android.mms.dom.NamedNodeMapImpl: org.w3c.dom.Node getNamedItem(java.lang.String)>
<com.android.mms.dom.AttrImpl: short getNodeType()>
<com.android.mms.transaction.TransactionBundle: java.lang.String getUri()>
<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>
<android.media.audiofx.Equalizer: java.lang.String getPresetName(short)>
<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: int getCountryCode()>
<com.android.emailcommon.provider.EmailContent$Message: com.android.emailcommon.provider.EmailContent$Message restoreMessageWithId(android.content.Context,long)>
<android.provider.Settings$Secure: java.lang.String getString(android.content.ContentResolver,java.lang.String)>
<android.view.ViewGroup: android.view.View findFrontmostDroppableChildAt(float,float,android.graphics.PointF)>
<android.app.TaskStackBuilder: android.app.PendingIntent getPendingIntent(int,int,android.os.Bundle)>
<com.android.launcher2.IconCache: android.graphics.drawable.Drawable getFullResIcon(android.content.pm.ResolveInfo)>
<android.mtp.MtpObjectInfo: int getImagePixHeight()>
<android.widget.RemoteViews$ReflectionActionWithoutParams: java.lang.String getActionName()>
<com.android.server.wm.InputMonitor: int getPointerLayer()>
<android.webkit.WebView: float getScale()>
<android.media.videoeditor.WaveformData: short[] getFrameGains()>
<com.android.providers.downloads.StorageManager: com.android.providers.downloads.StorageManager getInstance(android.content.Context)>
<android.widget.CursorAdapter: long getItemId(int)>
<android.app.ContextImpl: android.content.Context createPackageContext(java.lang.String,int)>
<android.app.backup.BackupAgentHelper: android.app.backup.BackupHelperDispatcher getDispatcher()>
<android.webkit.WebViewClassic: android.view.View getZoomControls()>
<android.app.INotificationManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.mtp.MtpObjectInfo: long getDateModified()>
<android.webkit.CacheManager$CacheResult: java.lang.String getContentDisposition()>
<android.filterfw.core.Filter: java.lang.String getName()>
<android.webkit.WebViewDatabaseClassic: java.lang.String[] getUsernamePassword(java.lang.String)>
<com.android.email.view.CertificateSelector: java.lang.String getCertificate()>
<android.text.method.TextKeyListener: int getInputType()>
<com.android.server.sip.SipSessionGroup$SipSessionImpl: int getState()>
<android.content.res.Resources: android.content.res.ColorStateList loadColorStateList(android.util.TypedValue,int)>
<com.android.phone.InCallScreen: com.android.phone.InCallTouchUi getInCallTouchUi()>
<com.android.deskclock.widget.multiwaveview.Ease$Quint$2: float getInterpolation(float)>
<android.content.ContentProvider$Transport: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.ICancellationSignal)>
<com.android.deskclock.widget.multiwaveview.Ease$Quint$1: float getInterpolation(float)>
<android.content.pm.Signature: byte[] toByteArray()>
<com.android.deskclock.widget.multiwaveview.Ease$Quint$3: float getInterpolation(float)>
<com.android.server.NativeDaemonConnector: java.lang.String[] doListCommand(java.lang.String,int)>
<com.android.deskclock.stopwatch.StopwatchFragment$LapsListAdapter: java.lang.Object getItem(int)>
<android.security.KeyChain: java.security.cert.X509Certificate[] getCertificateChain(android.content.Context,java.lang.String)>
<com.android.mms.ui.MessageItem: com.android.mms.model.SlideshowModel getSlideshow()>
<com.android.mms.dom.smil.SmilRegionElementImpl: int getWidth()>
<com.android.internal.util.TypedProperties: double getDouble(java.lang.String)>
<com.android.internal.app.ActionBarImpl: android.app.ActionBar$Tab getSelectedTab()>
<android.widget.AbsSpinner: int getCount()>
<com.android.launcher2.Utilities: android.graphics.Bitmap createIconBitmap(android.graphics.Bitmap,android.content.Context)>
<com.android.email.widget.EmailWidget: int getCount()>
<com.android.inputmethod.latin.ResourceUtils: java.lang.String getDeviceOverrideValue(android.content.res.Resources,int,java.lang.String)>
<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>
<com.android.mms.dom.ElementImpl: java.lang.String getNodeName()>
<com.android.org.bouncycastle.asn1.DERGeneralString: com.android.org.bouncycastle.asn1.DERGeneralString getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)>
<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: java.lang.Object getItem(int)>
<android.app.backup.IBackupManager$Stub$Proxy: java.lang.String getCurrentTransport()>
<com.android.launcher2.CellLayout$ViewCluster: int[] getLeftEdge()>
<android.content.SyncManager: android.accounts.AccountAndUser[] access$2800()>
<com.android.inputmethod.latin.SubtypeLocale: java.lang.String getKeyboardLayoutSetDisplayName(java.lang.String)>
<android.view.inputmethod.InputMethodSubtype: int getIconResId()>
<android.widget.TableRow: int getLocationOffset(android.view.View)>
<android.graphics.drawable.ShapeDrawable: int getOpacity()>
<android.speech.tts.TtsEngines: java.util.List getEngines()>
<android.widget.Editor$SuggestionsPopupWindow: int getTextOffset()>
<android.app.admin.IDevicePolicyManager$Stub: android.os.IBinder asBinder()>
<com.android.email.activity.MessagesAdapter: java.util.Set getSelectedSet()>
<com.android.org.bouncycastle.asn1.BERTaggedObjectParser: com.android.org.bouncycastle.asn1.ASN1Primitive getLoadedObject()>
<android.graphics.drawable.AnimatedRotateDrawable: int getIntrinsicWidth()>
<android.webkit.WebView: android.view.View getZoomControls()>
<com.google.android.picasasync.UploadsManager: com.google.android.picasasync.UploadsManager getInstance(android.content.Context)>
<com.android.internal.util.StateMachine: com.android.internal.util.StateMachine$LogRec getLogRec(int)>
<android.webkit.WebViewClassic$FocusTransitionDrawable: float getProgress()>
<android.text.style.DynamicDrawableSpan: int getSize(android.graphics.Paint,java.lang.CharSequence,int,int,android.graphics.Paint$FontMetricsInt)>
<android.webkit.WebView$PrivateAccess: int getHorizontalScrollbarHeight()>
<android.drm.mobile1.DrmRawContent: int getRawType()>
<android.widget.ExpandableListView: long getSelectedId()>
<android.view.View: int getVerticalScrollbarWidth()>
<android.view.KeyCharacterMap: int getModifierBehavior()>
<com.android.mms.dom.NodeImpl: java.lang.String getNamespaceURI()>
<android.renderscript.Sampler: float getAnisotropy()>
<com.google.android.gms.panorama.internal.PanoramaClientImpl: android.os.IInterface createServiceInterface(android.os.IBinder)>
<android.widget.FrameLayout: boolean getMeasureAllChildren()>
<android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int)>
<android.speech.tts.SynthesisRequest: java.lang.String getLanguage()>
<android.os.storage.StorageVolume: android.os.UserHandle getOwner()>
<android.webkit.CertTool: java.lang.String getSignedPublicKey(android.content.Context,int,java.lang.String)>
<android.app.ApplicationPackageManager: java.util.List getInstalledPackages(int,int)>
<android.app.SearchableInfo: boolean getVoiceSearchEnabled()>
<android.graphics.Paint: android.graphics.Paint$FontMetrics getFontMetrics()>
<android.gesture.GestureStore: java.util.ArrayList getGestures(java.lang.String)>
<android.app.Instrumentation: android.content.Context getTargetContext()>
<android.speech.tts.TtsEngines: java.lang.String getDefaultEngine()>
<com.android.internal.app.IUsageStats$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.android.inputmethod.keyboard.MoreKeysKeyboardView: com.android.inputmethod.keyboard.PointerTracker$TimerProxy getTimerProxy()>
<android.preference.GenericInflater: java.lang.Object onCreateItem(java.lang.String,android.util.AttributeSet)>
<android.widget.TextView: int getCurrentTextColor()>
<com.android.email.MessagingExceptionStrings: java.lang.String getErrorString(android.content.Context,com.android.emailcommon.mail.MessagingException)>
<android.view.View: android.view.AccessibilityIterators$TextSegmentIterator getIteratorForGranularity(int)>
<com.android.email.mail.store.imap.ImapString: java.util.Date getDateOrNull()>
<android.app.admin.DeviceAdminInfo: java.lang.String getReceiverName()>
<android.app.PendingIntent: android.app.PendingIntent getActivity(android.content.Context,int,android.content.Intent,int)>
<com.android.org.bouncycastle.asn1.DERInteger: com.android.org.bouncycastle.asn1.ASN1Integer getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)>
<android.view.IWindowManager$Stub$Proxy: float getAnimationScale(int)>
<android.view.View$MeasureSpec: int getSize(int)>
<android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$1: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int)>
<android.view.inputmethod.BaseInputConnection: android.view.inputmethod.ExtractedText getExtractedText(android.view.inputmethod.ExtractedTextRequest,int)>
<android.provider.MediaStore$Images$Thumbnails: android.database.Cursor queryMiniThumbnail(android.content.ContentResolver,long,int,java.lang.String[])>
<android.app.ApplicationPackageManager: android.content.pm.ProviderInfo getProviderInfo(android.content.ComponentName,int)>
<android.widget.CursorTreeAdapter$MyCursorHelper: int getCount()>
<android.app.ActivityManagerProxy: android.content.ComponentName getActivityClassForToken(android.os.IBinder)>
<android.content.SyncStorageEngine: int getPendingOperationCount()>
<com.google.android.picasasync.PrefetchHelper: java.io.File getAlbumCover(long,java.lang.String)>
<com.android.launcher2.Folder: com.android.launcher2.DropTarget getDropTargetDelegate(com.android.launcher2.DropTarget$DragObject)>
<com.android.internal.app.IUsageStats$Stub$Proxy: com.android.internal.os.PkgUsageStats getPkgUsageStats(android.content.ComponentName)>
<com.android.ex.chips.BaseRecipientAdapter: int getQueryType()>
<android.filterfw.core.NativeProgram: java.lang.Object getHostValue(java.lang.String)>
<com.android.mms.dom.DocumentImpl: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>
<android.webkit.WebSettings: java.lang.String getSansSerifFontFamily()>
<android.renderscript.ProgramVertex: android.renderscript.Element getInput(int)>
<android.hardware.input.IInputManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.app.ReceiverRestrictedContext: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>
<android.webkit.WebViewClassic: int getPageBackgroundColor()>
<android.app.backup.IBackupManager$Stub$Proxy: android.content.Intent getConfigurationIntent(java.lang.String)>
<android.app.PendingIntent: android.app.PendingIntent getActivitiesAsUser(android.content.Context,int,android.content.Intent[],int,android.os.Bundle,android.os.UserHandle)>
<com.android.email.mail.store.ImapFolder: java.lang.String[] getSearchUids(java.util.List)>
<android.content.res.XmlBlock$Parser: java.lang.String getNamespace()>
<android.app.admin.DevicePolicyManager: int getPasswordMinimumLetters(android.content.ComponentName,int)>
<android.speech.tts.SynthesisRequest: int getPitch()>
<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.statusbar.IStatusBarService getStatusBarService()>
<android.view.MotionEvent: int getHistorySize()>
<android.text.format.DateFormat: java.text.DateFormat getLongDateFormat(android.content.Context)>
<android.os.Bundle: java.lang.ClassLoader getClassLoader()>
<android.view.ViewConfiguration: int getScaledDoubleTapTouchSlop()>
<android.content.Intent: java.lang.String getType()>
<com.android.launcher2.LauncherApplication: float getScreenDensity()>
<com.android.phone.OutgoingCallBroadcaster: android.app.Dialog onCreateDialog(int)>
<com.android.server.accessibility.TouchExplorer$ReceivedPointerTracker: float getLastReceivedUpPointerDownX()>
<com.android.server.accessibility.TouchExplorer$ReceivedPointerTracker: float getLastReceivedUpPointerDownY()>
<android.widget.TextView: android.view.AccessibilityIterators$TextSegmentIterator getIteratorForGranularity(int)>
<android.app.Activity: android.app.LoaderManager getLoaderManager()>
<android.widget.AdapterView: android.widget.AdapterView$OnItemLongClickListener getOnItemLongClickListener()>
<android.content.SyncStorageEngine: android.util.Pair getBackoff(android.accounts.Account,int,java.lang.String)>
<android.media.MediaSyncEvent: int getAudioSessionId()>
<android.widget.TextView: int getHorizontalOffsetForDrawables()>
<com.android.inputmethod.latin.spellcheck.DictionaryPool: com.android.inputmethod.latin.spellcheck.DictAndProximity poll(long,java.util.concurrent.TimeUnit)>
<android.webkit.WebSettings: boolean getBlockNetworkLoads()>
<android.hardware.SensorManager: float getAltitude(float,float)>
<com.android.deskclock.stopwatch.StopwatchFragment$LapsListAdapter: int getCount()>
<android.view.inputmethod.InputMethodInfo: android.content.pm.ServiceInfo getServiceInfo()>
<com.android.server.am.ProviderMap: com.android.server.am.ContentProviderRecord getProviderByClass(android.content.ComponentName,int)>
<android.appwidget.AppWidgetHostView: android.view.View getErrorView()>
<com.android.server.am.ActivityRecord$Token: long getKeyDispatchingTimeout()>
<com.android.internal.widget.DrawableHolder: android.graphics.drawable.BitmapDrawable getDrawable()>
<com.android.internal.view.menu.MenuBuilder: java.lang.CharSequence getHeaderTitle()>
<com.android.videoeditor.service.MovieOverlay: long getAppStartTime()>
<com.android.systemui.statusbar.NotificationData: com.android.systemui.statusbar.NotificationData$Entry get(int)>
<android.mtp.MtpStorageInfo: int getStorageId()>
<com.android.inputmethod.keyboard.internal.KeyStylesSet$DeclaredKeyStyle: int getFlag(android.content.res.TypedArray,int)>
<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: java.lang.String getDescriptionForValidNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,java.util.Locale)>
<com.android.email.activity.ThreePaneLayout: int getRightPaneId()>
<com.android.videoeditor.VideoEditorActivity: android.app.Dialog onCreateDialog(int,android.os.Bundle)>
<android.text.format.DateUtils: java.lang.String getAMPMString(int)>
<android.drm.mobile1.DrmRawContent: java.io.InputStream getContentInputStream(android.drm.mobile1.DrmRights)>
<android.content.pm.PackageManager: java.lang.String getDataDirForUser(int,java.lang.String)>
<android.view.ViewConfiguration: int getScrollBarFadeDuration()>
<android.os.StatFs: int getBlockSize()>
<com.android.providers.media.MediaProvider$DatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>
<android.view.WindowManager$LayoutParams: java.lang.CharSequence getTitle()>
<com.android.inputmethod.keyboard.KeyboardSwitcher: int getKeyboardShiftMode()>
<android.widget.HeaderViewListAdapter: android.widget.ListAdapter getWrappedAdapter()>
<com.android.internal.policy.impl.PhoneWindowManager: void getContentInsetHintLw(android.view.WindowManager$LayoutParams,android.graphics.Rect)>
<com.android.inputmethod.latin.DictionaryFactory: com.android.inputmethod.latin.DictionaryCollection createMainDictionaryFromManager(android.content.Context,java.util.Locale)>
<com.android.email.activity.UiUtilities: android.view.View getView(android.app.Activity,int)>
<android.view.KeyEvent: char getMatch(char[],int)>
<com.android.emailcommon.provider.Account: com.android.emailcommon.provider.Account restoreAccountWithId(android.content.Context,long)>
<com.android.mms.data.Conversation$Cache: com.android.mms.data.Conversation get(com.android.mms.data.ContactList)>
<android.widget.RadioGroup: int getCheckedRadioButtonId()>
<com.android.launcher2.CellLayout: float getBackgroundAlpha()>
<android.support.v4.view.MotionEventCompat: int getActionIndex(android.view.MotionEvent)>
<android.mtp.MtpObjectInfo: int getThumbCompressedSize()>
<android.widget.ExpandableListView: android.widget.Adapter getAdapter()>
<android.filterfw.core.FrameFormat: int getLength()>
<android.content.SyncStorageEngine: long getLongColumn(android.database.Cursor,java.lang.String)>
<com.android.camera.Thumbnail: android.graphics.Bitmap createVideoThumbnailBitmap(java.io.FileDescriptor,int)>
<com.android.internal.util.TypedProperties: long getLong(java.lang.String,long)>
<android.app.admin.DevicePolicyManager: int getStorageEncryptionStatus(int)>
<android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()>
<android.provider.MediaStore$Images$Media: android.database.Cursor query(android.content.ContentResolver,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<android.view.InputDevice: int getSources()>
<com.android.email.mail.store.ImapConnection: java.util.List executeSimpleCommand(java.lang.String,boolean)>
<android.graphics.drawable.NinePatchDrawable: int getChangingConfigurations()>
<android.media.videoeditor.MediaItem: boolean getRegenerateClip()>
<com.android.internal.backup.LocalTransport: int getRestoreData(android.os.ParcelFileDescriptor)>
<android.webkit.CacheManager$CacheResult: java.lang.String getLastModified()>
<com.android.deskclock.stopwatch.Stopwatches: java.lang.String getTimeText(long)>
<com.android.mms.dom.ElementImpl: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>
<android.view.HardwareLayer: android.view.DisplayList getDisplayList()>
<android.graphics.drawable.NinePatchDrawable$NinePatchState: int getChangingConfigurations()>
<android.view.View: int getBaseline()>
<com.android.internal.os.ProcessStats: long getCpuTimeForPid(int)>
<com.android.launcher2.Launcher: int getCurrentWorkspaceScreen()>
<com.google.android.picasasync.PrefetchHelper: com.google.android.picasasync.PrefetchHelper$CacheStats getCacheStatistics(int)>
<com.android.videoeditor.service.MovieOverlay: java.lang.String getSubtitle()>
<android.view.animation.AnimationSet: java.util.List getAnimations()>
<android.view.View: int getScrollBarDefaultDelayBeforeFade()>
<com.android.internal.widget.multiwaveview.TargetDrawable: float getPositionY()>
<com.android.internal.widget.multiwaveview.TargetDrawable: float getPositionX()>
<android.content.Intent: android.content.Intent getIntentOld(java.lang.String)>
<android.content.res.Resources: android.content.res.Resources getSystem()>
<android.os.Parcel: java.lang.Object readValue(java.lang.ClassLoader)>
<android.os.RemoteCallbackList: java.lang.Object getBroadcastCookie(int)>
<com.android.mms.util.RateController: com.android.mms.util.RateController getInstance()>
<android.view.accessibility.AccessibilityRecord: android.os.Parcelable getParcelableData()>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: java.lang.String getNationalPrefixTransformRule()>
<com.android.internal.policy.impl.PhoneFallbackEventHandler: android.telephony.TelephonyManager getTelephonyManager()>
<android.text.method.DateTimeKeyListener: android.text.method.DateTimeKeyListener getInstance()>
<com.android.internal.view.IInputMethodSession$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.hardware.Camera$Parameters: java.util.List getSupportedVideoSizes()>
<com.android.internal.policy.impl.keyguard.PagedView: int getPageNearestToCenterOfScreen()>
<android.app.SearchableInfo: int getVoiceMaxResults()>
<android.graphics.drawable.NinePatchDrawable: int getIntrinsicWidth()>
<android.app.Activity: java.lang.Object getLastNonConfigurationInstance()>
<android.app.Activity: java.lang.Object getSystemService(java.lang.String)>
<com.android.exchange.adapter.EmailSyncAdapter: java.lang.String getCollectionName()>
<com.android.email.Clock: long getTime()>
<com.android.phone.CallFeaturesSetting: android.app.Dialog onCreateDialog(int)>
<android.content.res.XmlBlock$Parser: java.lang.String getAttributePrefix(int)>
<android.support.v4.view.ViewPager: int getChildDrawingOrder(int,int)>
<android.view.VelocityTracker: float getYVelocity(int)>
<android.preference.GenericInflater: android.content.Context getContext()>
<android.hardware.Camera$Parameters: java.util.List getFocusAreas()>
<android.app.PendingIntent: android.app.PendingIntent getActivityAsUser(android.content.Context,int,android.content.Intent,int,android.os.Bundle,android.os.UserHandle)>
<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputContext getInputContext()>
<com.android.mms.util.ThumbnailManager: java.lang.String getTag()>
<com.android.server.AppWidgetService: android.appwidget.AppWidgetProviderInfo getAppWidgetInfo(int)>
<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<android.text.Layout: android.text.Layout$Alignment getParagraphAlignment(int)>
<com.android.email.mail.store.ExchangeStore: com.android.emailcommon.service.IEmailService getService()>
<com.android.ex.chips.BaseRecipientAdapter: android.widget.Filter getFilter()>
<android.content.Intent: float[] getFloatArrayExtra(java.lang.String)>
<android.content.pm.ConfigurationInfo: java.lang.String getGlEsVersion()>
<com.android.internal.policy.impl.PhoneWindowManager: android.view.View addStartingWindow(android.os.IBinder,java.lang.String,int,android.content.res.CompatibilityInfo,java.lang.CharSequence,int,int,int)>
<com.android.internal.util.MemInfoReader: long getTotalSize()>
<com.android.launcher2.AppsCustomizePagedView: android.view.View getContent()>
<com.android.server.accessibility.TouchExplorer$InjectedPointerTracker: int getInjectedPointersDown()>
<android.provider.MediaStore$Images$Thumbnails: android.graphics.Bitmap getThumbnail(android.content.ContentResolver,long,int,android.graphics.BitmapFactory$Options)>
<com.android.systemui.statusbar.policy.NotificationRowLayout: android.view.View getChildContentView(android.view.View)>
<android.filterfw.core.Frame: long getBindingId()>
<com.android.launcher2.LauncherModel: java.util.Comparator getAppNameComparator()>
<android.media.MediaScanner: android.media.MediaScanner$FileEntry makeEntryFor(java.lang.String)>
<com.android.camera.CameraActivity: com.android.camera.ShutterButton getShutterButton()>
<android.hardware.display.DisplayManager: android.hardware.display.WifiDisplayStatus getWifiDisplayStatus()>
<android.widget.AdapterViewAnimator: int getBaseline()>
<android.app.Activity: android.os.IBinder getActivityToken()>
<android.media.videoeditor.MediaImageItem: long getTimelineDuration()>
<android.hardware.ISerialManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.android.email.activity.setup.AccountSettingsFragment$DeleteAccountFragment: android.app.Dialog onCreateDialog(android.os.Bundle)>
<android.preference.Preference: boolean getPersistedBoolean(boolean)>
<com.android.org.bouncycastle.asn1.ASN1OctetString: com.android.org.bouncycastle.asn1.ASN1Primitive toDERObject()>
<com.android.uiautomator.core.UiSelector: com.android.uiautomator.core.UiSelector getPatternSelector()>
<android.filterpacks.imageproc.DrawOverlayFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)>
<android.app.PendingIntent: android.os.UserHandle getCreatorUserHandle()>
<com.android.mms.ui.MessageListAdapter: int getItemViewType(int)>
<android.content.ContextWrapper: android.content.ContentResolver getContentResolver()>
<com.android.videoeditor.service.VideoEditorProject: java.util.List getAudioTracks()>
<android.webkit.HTML5VideoView: int getDuration()>
<android.app.IWallpaperManager$Stub: android.os.IBinder asBinder()>
<com.android.email.activity.MessageFileView: com.android.email.activity.MessageFileViewFragment getFragment()>
<android.widget.HeaderViewListAdapter: android.widget.Filter getFilter()>
<com.android.email.provider.EmailProvider: android.database.Cursor mostRecentMessageQuery(android.net.Uri)>
<android.app.Activity: int getRequestedOrientation()>
<android.os.storage.IMountService$Stub$Proxy: android.os.storage.StorageVolume[] getVolumeList()>
<com.android.launcher2.Launcher: com.android.launcher2.DragController getDragController()>
<com.android.systemui.recent.RecentsScrollViewPerformanceHelper: int getVerticalFadingEdgeLengthCallback()>
<com.android.mms.model.TextModel: int getCharset()>
<com.android.launcher2.PagedView: int getChildWidth(int)>
<android.content.IClipboard$Stub: android.os.IBinder asBinder()>
<android.widget.Spinner$DropDownAdapter: java.lang.Object getItem(int)>
<android.os.Environment: java.io.File getMediaStorageDirectory()>
<android.media.videoeditor.MediaVideoItem: android.media.videoeditor.WaveformData getWaveformData()>
<android.gesture.GestureStroke: android.graphics.Path getPath()>
<android.widget.AdapterView: android.widget.AdapterView$OnItemClickListener getOnItemClickListener()>
<android.webkit.WebSettingsClassic: int getDoubleTapToastCount()>
<android.widget.Editor$SelectionStartHandleView: android.widget.Editor$ActionPopupWindow getActionPopupWindow()>
<com.android.org.bouncycastle.asn1.DERBMPString: com.android.org.bouncycastle.asn1.DERBMPString getInstance(java.lang.Object)>
<android.media.AudioTrack: int getPlayState()>
<com.android.systemui.statusbar.BaseStatusBar: android.view.View updateNotificationVetoButton(android.view.View,com.android.internal.statusbar.StatusBarNotification)>
<android.widget.LinearLayout: int getDividerPadding()>
<android.widget.ListView: boolean getItemsCanFocus()>
<android.drm.DrmManagerClient: java.lang.String getOriginalMimeType(java.lang.String)>
<com.android.server.wm.WindowState: android.view.IApplicationToken getAppToken()>
<com.android.email.SecurityPolicy: boolean wipeExpiredAccounts(android.content.Context,com.android.email.Controller)>
<android.provider.Settings$System: long getLong(android.content.ContentResolver,java.lang.String)>
<android.view.PointerIcon: android.graphics.Bitmap getBitmap()>
<com.android.mms.transaction.NotificationTransaction: byte[] getPdu(java.lang.String)>
<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: java.lang.String getDescriptionForNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,java.util.Locale,java.lang.String)>
<com.android.launcher2.LauncherModel: android.graphics.Bitmap getIconFromCursor(android.database.Cursor,int,android.content.Context)>
<android.hardware.Camera$Parameters: java.util.List getMeteringAreas()>
<android.graphics.drawable.GradientDrawable: int getIntrinsicWidth()>
<android.widget.ToggleButton: java.lang.CharSequence getTextOff()>
<android.content.pm.IPackageManager$Stub$Proxy: void getPackageSizeInfo(java.lang.String,int,android.content.pm.IPackageStatsObserver)>
<android.preference.Preference: android.graphics.drawable.Drawable getIcon()>
<android.app.ActivityThread: android.app.Application getApplication()>
<com.android.server.sip.SipSessionGroup$RegisterCommand: int getDuration()>
<android.app.LoaderManagerImpl: android.content.Loader getLoader(int)>
<android.webkit.WebViewClassic: int getTitleHeight()>
<com.android.providers.media.MediaProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<android.app.SearchManager: java.util.List getSearchablesInGlobalSearch()>
<android.app.ActivityManagerProxy: android.app.PendingIntent getRunningServiceControlPanel(android.content.ComponentName)>
<android.renderscript.RenderScriptGL: int getHeight()>
<android.content.res.AssetManager: android.content.res.AssetManager getSystem()>
<com.android.email.AttachmentInfo: android.content.Intent getAttachmentIntent(android.content.Context,long)>
<android.view.animation.Transformation: int getTransformationType()>
<android.media.videoeditor.Transition: long getMaximumDuration()>
<android.view.View: int getDrawingCacheQuality()>
<com.android.internal.util.FastXmlSerializer: java.lang.String getPrefix(java.lang.String,boolean)>
<com.android.launcher2.LauncherModel: java.util.ArrayList getItemsInLocalCoordinates(android.content.Context)>
<android.widget.Spinner$DropDownAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<android.app.WallpaperInfo: java.lang.String getPackageName()>
<android.media.videoeditor.OverlayFrame: int getOverlayFrameHeight()>
<android.appwidget.AppWidgetHost: android.appwidget.AppWidgetHostView onCreateView(android.content.Context,int,android.appwidget.AppWidgetProviderInfo)>
<android.hardware.SerialManager: java.lang.String[] getSerialPorts()>
<com.android.org.bouncycastle.asn1.DERBitString: int getPadBits(int)>
<com.android.mms.ui.IconListAdapter$IconListItem: int getResource()>
<android.animation.ObjectAnimator: java.lang.String getPropertyName()>
<android.content.pm.VerificationParams: int getOriginatingUid()>
<com.android.email.mail.store.imap.ImapList: com.android.email.mail.store.imap.ImapElement getElementOrNone(int)>
<com.android.org.bouncycastle.asn1.x509.AlgorithmIdentifier: com.android.org.bouncycastle.asn1.ASN1ObjectIdentifier getAlgorithm()>
<android.app.ApplicationPackageManager: int getPreferredActivities(java.util.List,java.util.List,java.lang.String)>
<android.text.Layout: float getSpacingAdd()>
<com.android.internal.view.IInputMethodManager$Stub$Proxy: java.util.List getInputMethodList()>
<android.view.animation.AnimationSet: long getStartTime()>
<android.media.IRemoteVolumeObserver$Stub: android.os.IBinder asBinder()>
<android.widget.Switch: int getCompoundPaddingLeft()>
<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: long getNationalNumber()>
<com.android.videoeditor.util.FileUtils: java.lang.String getSimpleName(java.lang.String)>
<com.android.server.PreferredComponent: java.lang.String getParseError()>
<android.widget.Editor$EasyEditPopupWindow: int getTextOffset()>
<android.text.Layout: float getLineRight(int)>
<com.android.server.display.DisplayDevice: com.android.server.display.DisplayAdapter getAdapterLocked()>
<android.app.ApplicationLoaders: android.app.ApplicationLoaders getDefault()>
<android.preference.PreferenceGroupAdapter: int getCount()>
<android.webkit.WebViewClassic: int getScaledNavSlop()>
<com.android.internal.view.menu.SubMenuBuilder: android.view.MenuItem getItem()>
<com.android.server.WiredAccessoryManager$WiredAccessoryObserver$UEventInfo: java.lang.String getDevPath()>
<android.graphics.drawable.GradientDrawable: int getIntrinsicHeight()>
<android.view.Display: int getWidth()>
<android.view.inputmethod.InputMethodInfo: android.view.inputmethod.InputMethodSubtype getSubtypeAt(int)>
<android.content.ContentValues: java.util.ArrayList getStringArrayList(java.lang.String)>
<android.app.LoadedApk: android.content.res.AssetManager getAssets(android.app.ActivityThread)>
<android.filterfw.core.FieldPort: java.lang.Object getTarget()>
<com.android.launcher2.IconCache: android.graphics.drawable.Drawable getFullResIcon(java.lang.String,int)>
<android.view.ViewGroup$ChildListForAccessibility: int getChildCount()>
<android.hardware.usb.UsbInterface: android.hardware.usb.UsbEndpoint getEndpoint(int)>
<com.android.mms.data.Conversation: long getThreadId()>
<android.graphics.drawable.RotateDrawable$RotateState: int getChangingConfigurations()>
<android.widget.ImageView: int getMaxWidth()>
<com.android.org.bouncycastle.asn1.DERVisibleString: java.lang.String getString()>
<android.app.ApplicationPackageManager: android.content.res.Resources getResourcesForActivity(android.content.ComponentName)>
<com.android.mms.MmsConfig: java.lang.String getUaProfTagName()>
<com.android.videoeditor.service.MovieMediaItem: java.lang.String getId()>
<android.app.SearchManager: android.content.Intent getAssistIntent(android.content.Context)>
<android.os.Environment: java.lang.String getExternalStorageState()>
<android.os.HandlerThread: android.os.Looper getLooper()>
<com.android.mms.dom.smil.ElementTimeImpl: short getFill()>
<com.android.videoeditor.OverlayType: com.android.videoeditor.OverlayType[] getOverlays(android.content.Context)>
<android.hardware.usb.UsbEndpoint: int getAddress()>
<com.android.deskclock.DeskClock$TabsAdapter: int getCount()>
<android.view.ViewRootImpl$ViewRootHandler: java.lang.String getMessageName(android.os.Message)>
<android.media.audiofx.AudioEffect: int getParameter(int[],short[])>
<android.widget.GridLayout$Axis: int getCount()>
<android.view.View: int getMeasuredHeightAndState()>
<android.accessibilityservice.IAccessibilityServiceConnection$Stub$Proxy: float findAccessibilityNodeInfoByAccessibilityId(int,long,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,long)>
<android.widget.FrameLayout: int getForegroundGravity()>
<com.android.inputmethod.keyboard.MainKeyboardView: java.lang.String getShortDisplayName(android.view.inputmethod.InputMethodSubtype)>
<android.hardware.usb.UsbInterface: int getInterfaceProtocol()>
<android.media.MediaPlayer: android.os.Parcel getParcelParameter(int)>
<android.widget.TextView: int getLineHeight()>
<android.text.Editable$Factory: android.text.Editable$Factory getInstance()>
<android.view.ViewConfiguration: int getScaledOverflingDistance()>
<android.os.IPowerManager$Stub: android.os.IBinder asBinder()>
<android.mtp.MtpStorageInfo: java.lang.String getVolumeIdentifier()>
<android.media.MediaFile: java.lang.String getFileTitle(java.lang.String)>
<android.view.MotionEvent: float getSize()>
<com.android.email.mail.Store: com.android.emailcommon.mail.Folder getFolder(java.lang.String)>
<com.android.internal.view.menu.BaseMenuPresenter: android.view.View getItemView(com.android.internal.view.menu.MenuItemImpl,android.view.View,android.view.ViewGroup)>
<android.app.ActivityOptions: int getStartWidth()>
<android.renderscript.RenderScript: android.content.Context getApplicationContext()>
<android.content.res.XmlBlock$Parser: int getAttributeCount()>
<com.android.email.Controller: java.util.Collection getResultCallbacksForTest()>
<com.android.videoeditor.service.MovieMediaItem: int getVolume()>
<com.android.inputmethod.latin.ImfUtils: java.lang.String getInputMethodIdOfThisIme(android.content.Context)>
<com.android.server.accessibility.ScreenMagnifier$MagnificationController: com.android.server.accessibility.ScreenMagnifier$MagnificationController$MagnificationSpec getAccessibilityTransformation()>
<android.app.admin.DevicePolicyManager: int getKeyguardDisabledFeatures(android.content.ComponentName)>
<android.view.ViewTreeObserver$CopyOnWriteArray$Access: java.lang.Object get(int)>
<android.widget.LinearLayout: float getWeightSum()>
<com.android.internal.util.FastXmlSerializer: java.lang.String getNamespace()>
<android.filterpacks.imageproc.AlphaBlendFilter: android.filterfw.core.Program getNativeProgram(android.filterfw.core.FilterContext)>
<android.filterfw.core.Frame: android.filterfw.core.FrameFormat getFormat()>
<com.android.videoeditor.service.VideoEditorProject: com.android.videoeditor.service.MovieEffect getEffect(java.lang.String,java.lang.String)>
<android.hardware.usb.UsbManager: java.lang.String getDefaultFunction()>
<android.renderscript.Element: java.lang.String getSubElementName(int)>
<com.android.mms.ui.IconListAdapter$IconListItem: java.lang.String getTitle()>
<android.os.IPermissionController$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.view.IWindowManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.widget.ListView$ArrowScrollFocusResult: int getAmountToScroll()>
<android.animation.AnimatorSet: java.util.ArrayList getChildAnimations()>
<com.android.inputmethod.latin.BinaryDictionaryGetter: java.util.ArrayList getDictionaryFiles(java.util.Locale,android.content.Context)>
<android.net.sip.SipSession: android.net.sip.SipProfile getLocalProfile()>
<android.speech.tts.PlaybackSynthesisCallback: int getMaxBufferSize()>
<com.android.inputmethod.latin.Utils$UsabilityStudyLogUtils: com.android.inputmethod.latin.Utils$UsabilityStudyLogUtils getInstance()>
<android.provider.MediaStore$Images$Thumbnails: android.graphics.Bitmap getThumbnail(android.content.ContentResolver,long,long,int,android.graphics.BitmapFactory$Options)>
<android.os.storage.IMountService$Stub$Proxy: java.lang.String getSecureContainerFilesystemPath(java.lang.String)>
<com.android.i18n.phonenumbers.geocoding.AreaCodeMapStorageStrategy: java.util.TreeSet getPossibleLengths()>
<com.android.launcher2.Workspace: com.android.launcher2.CellLayout getParentCellLayoutForView(android.view.View)>
<com.android.email.mail.store.imap.ImapResponseParser: java.lang.String readUntilEol()>
<com.android.internal.view.IInputContext$Stub$Proxy: void getExtractedText(android.view.inputmethod.ExtractedTextRequest,int,int,com.android.internal.view.IInputContextCallback)>
<com.android.systemui.statusbar.phone.PanelView: float getExpandedHeight()>
<android.graphics.Bitmap: int getScaledHeight(android.graphics.Canvas)>
<android.app.ActivityGroup: android.app.Activity getCurrentActivity()>
<android.widget.AutoCompleteTextView: android.widget.Filter getFilter()>
<android.app.admin.DevicePolicyManager: int getPasswordMinimumLowerCase(android.content.ComponentName)>
<android.widget.ImageView: boolean getCropToPadding()>
<com.android.internal.view.menu.MenuBuilder: android.view.MenuItem getItem(int)>
<com.android.providers.telephony.MmsProvider: java.lang.String getType(android.net.Uri)>
<android.media.MediaRouter: android.media.MediaRouter$RouteCategory getSystemAudioCategory()>
<android.os.Debug: java.lang.String getCaller()>
<android.preference.PreferenceManager: java.lang.String getSharedPreferencesName()>
<android.app.ApplicationPackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>
<android.os.PowerManager: int getMaximumScreenBrightnessSetting()>
<android.app.backup.IRestoreSession$Stub: android.os.IBinder asBinder()>
<android.text.method.DialerKeyListener: char[] getAcceptedChars()>
<android.view.ViewConfiguration: int getScrollBarSize()>
<com.android.mms.dom.smil.ElementTimeImpl: short getFillDefault()>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: android.content.ComponentName getGlobalProxyAdmin(int)>
<android.widget.ListPopupWindow: int getHeight()>
<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber getExampleNumber(java.lang.String)>
<android.content.IIntentReceiver$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.webkit.WebView: int getVisibleTitleHeight()>
<com.android.emailcommon.internet.BinaryTempFileBody: java.io.InputStream getInputStream()>
<com.android.mms.dom.NodeImpl: java.lang.String getPrefix()>
<android.media.videoeditor.OverlayFrame: java.lang.String getFilename()>
<android.view.animation.LayoutAnimationController: int getOrder()>
<com.android.email.mail.transport.MailTransport: java.io.InputStream getInputStream()>
<android.inputmethodservice.InputMethodService: int getMaxWidth()>
<android.webkit.MimeTypeMap: java.lang.String getMimeTypeFromExtension(java.lang.String)>
<android.os.Environment$UserEnvironment: java.io.File getExternalStorageObbDirectory()>
<com.android.org.bouncycastle.asn1.DEREnumerated: com.android.org.bouncycastle.asn1.ASN1Enumerated getInstance(java.lang.Object)>
<com.android.camera.CameraPreference: android.content.SharedPreferences getSharedPreferences()>
<android.app.IBackupAgent$Stub: android.os.IBinder asBinder()>
<android.graphics.ColorMatrix: float[] getArray()>
<com.android.videoeditor.service.VideoEditorProject: com.android.videoeditor.service.MovieMediaItem getFirstMediaItem()>
<android.content.ISyncAdapter$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.app.Activity: android.app.LoaderManagerImpl getLoaderManager(java.lang.String,boolean,boolean)>
<android.hardware.Camera$Parameters: java.util.List getZoomRatios()>
<com.android.providers.downloads.Helpers: java.lang.String getFullPath(java.lang.String,java.lang.String,int,java.io.File)>
<android.view.View: int getRight()>
<android.widget.AbsSeekBar: android.graphics.drawable.Drawable getThumb()>
<android.graphics.NinePatch: android.graphics.Region getTransparentRegion(android.graphics.Rect)>
<com.android.deskclock.widget.multiwaveview.PointCloud$GlowManager: float getRadius()>
<com.android.deskclock.TimePicker: int getHours()>
<android.drm.ProcessedData: java.lang.String getAccountId()>
<com.android.internal.view.WindowManagerPolicyThread: android.os.Looper getLooper()>
<com.android.org.bouncycastle.asn1.DERExternal: com.android.org.bouncycastle.asn1.ASN1Primitive getExternalContent()>
<com.android.ex.chips.BaseRecipientAdapter: java.util.List access$900(com.android.ex.chips.BaseRecipientAdapter)>
<android.filterfw.core.InputPort: java.lang.Object getTarget()>
<com.android.org.bouncycastle.asn1.DERApplicationSpecific: com.android.org.bouncycastle.asn1.ASN1Primitive getObject()>
<com.android.email.activity.setup.SetupData: com.android.email.activity.setup.SetupData getInstance()>
<android.app.IStopUserCallback$Stub: android.os.IBinder asBinder()>
<android.content.pm.IPackageDeleteObserver$Stub: android.os.IBinder asBinder()>
<android.text.style.CharacterStyle: android.text.style.CharacterStyle getUnderlying()>
<android.app.Dialog: android.view.LayoutInflater getLayoutInflater()>
<android.view.View: int getPaddingStart()>
<android.renderscript.Program: android.renderscript.Type getConstant(int)>
<android.widget.SimpleAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.musicfx.ControlPanelEffect: java.lang.String getParameterString(android.content.Context,java.lang.String,int,com.android.musicfx.ControlPanelEffect$Key,int)>
<com.android.phone.PhoneUtils: java.lang.String getPresentationString(android.content.Context,int)>
<android.view.View: int getTopPaddingOffset()>
<android.app.AppGlobals: android.app.Application getInitialApplication()>
<android.graphics.drawable.ClipDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()>
<com.android.email.mail.store.ImapStore: java.lang.String getImapId(android.content.Context,java.lang.String,java.lang.String,java.lang.String)>
<android.app.Activity: android.content.Intent getIntent()>
<android.drm.DrmManagerClient: java.lang.String getOriginalMimeType(android.net.Uri)>
<android.content.res.Resources: java.lang.CharSequence[] getTextArray(int)>
<android.app.ActivityThread: android.os.Looper getLooper()>
<android.provider.Settings$Secure: float getFloatForUser(android.content.ContentResolver,java.lang.String,float,int)>
<com.android.mms.dom.smil.ElementTimeImpl: float getDur()>
<android.app.ApplicationPackageManager: java.util.List queryIntentServicesAsUser(android.content.Intent,int,int)>
<android.renderscript.FieldPacker: byte[] getData()>
<android.webkit.WebIconDatabaseClassic: android.webkit.WebIconDatabaseClassic getInstance()>
<android.content.ContentResolver: android.content.ContentResolver$OpenResourceIdResult getResourceId(android.net.Uri)>
<com.android.inputmethod.keyboard.Key: int[] getCurrentDrawableState()>
<android.widget.TextView: android.content.res.ColorStateList getTextColors(android.content.Context,android.content.res.TypedArray)>
<android.os.Bundle: java.lang.Object get(java.lang.String)>
<android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateJellyBeanImpl: android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(java.lang.Object,android.view.View)>
<com.android.mms.dom.smil.parser.SmilContentHandler: org.w3c.dom.smil.SMILDocument getSmilDocument()>
<android.filterpacks.imageproc.GrainFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)>
<android.view.HardwareLayer: int getWidth()>
<android.widget.GridLayout$4: int getAlignmentValue(android.view.View,int,int)>
<com.android.mms.transaction.TransactionBundle: java.lang.String getProxyAddress()>
<com.android.mms.dom.smil.ElementTimeImpl: org.w3c.dom.smil.TimeList getEnd()>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getEmergency()>
<android.filterfw.core.Frame: long getTimestamp()>
<com.android.server.pm.PackageSettingBase: int getCurrentEnabledStateLPr(java.lang.String,int)>
<com.android.email.mail.store.ImapFolder: com.android.emailcommon.mail.Message getMessage(java.lang.String)>
<com.android.mms.dom.smil.SmilLayoutElementImpl: org.w3c.dom.smil.SMILRootLayoutElement getRootLayout()>
<android.webkit.WebView: java.lang.String getOriginalUrl()>
<android.content.IntentSender: java.lang.String getCreatorPackage()>
<android.graphics.drawable.AnimatedRotateDrawable: int getOpacity()>
<android.content.IntentFilter: java.lang.String getDataScheme(int)>
<com.android.inputmethod.latin.TargetApplicationGetter: android.content.pm.ApplicationInfo getCachedApplicationInfo(java.lang.String)>
<com.android.inputmethod.keyboard.internal.KeyboardRow: float getKeyX(android.content.res.TypedArray)>
<com.android.internal.util.StateMachine$LogRec: long getTime()>
<android.app.Dialog: android.app.ActionBar getActionBar()>
<com.android.videoeditor.service.MovieMediaItem: int getHeight()>
<com.android.mms.dom.smil.SmilParElementImpl: org.w3c.dom.smil.TimeList getEnd()>
<com.android.org.bouncycastle.asn1.DERBitString: com.android.org.bouncycastle.asn1.DERBitString getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)>
<com.android.org.bouncycastle.asn1.ASN1EncodableVector: com.android.org.bouncycastle.asn1.ASN1Encodable get(int)>
<com.android.internal.policy.impl.keyguard.KeyguardPasswordView: int getWrongPasswordStringId()>
<android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>
<android.webkit.CookieManager: java.lang.String getCookie(java.lang.String)>
<android.text.method.BaseMovementMethod: int getMovementMetaState(android.text.Spannable,android.view.KeyEvent)>
<android.preference.RingtonePreference: boolean getShowDefault()>
<android.speech.tts.TextToSpeechService$SpeechItem: int getCallerUid()>
<android.view.View: int getRightPaddingOffset()>
<com.android.internal.os.ProcessStats: int getLastUserTime()>
<com.android.mms.data.WorkingMessage: java.lang.CharSequence getText()>
<android.webkit.WebViewClassic: android.webkit.ViewManager getViewManager()>
<android.app.admin.DevicePolicyManager: android.app.admin.DeviceAdminInfo getAdminInfo(android.content.ComponentName)>
<android.webkit.Plugin: java.lang.String getDescription()>
<com.android.email.mail.store.Pop3Store$Pop3Folder: com.android.emailcommon.mail.Message[] getMessages(int,int,com.android.emailcommon.mail.Folder$MessageRetrievalListener)>
<com.android.i18n.phonenumbers.geocoding.FlyweightMapStorage: int getPrefix(int)>
<android.app.ISearchManager$Stub: android.os.IBinder asBinder()>
<android.text.method.CharacterPickerDialog$OptionsAdapter: int getCount()>
<android.widget.Switch: int getSwitchMinWidth()>
<android.opengl.GLSurfaceView: boolean getPreserveEGLContextOnPause()>
<android.content.CursorLoader: java.lang.String getSelection()>
<android.filterpacks.performance.Throughput: float getNanosPerPixel()>
<android.appwidget.AppWidgetManager: java.util.List getInstalledProviders()>
<android.content.Intent: boolean[] getBooleanArrayExtra(java.lang.String)>
<android.webkit.WebSettingsClassic$AutoFillProfile: java.lang.String getState()>
<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: java.lang.String getExtension()>
<com.android.internal.widget.IRemoteViewsFactory$Stub$Proxy: android.widget.RemoteViews getViewAt(int)>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: int getConstantMinimumHeight()>
<android.widget.TextView: int getMaxLines()>
<android.view.InputDevice$MotionRange: float getRange()>
<android.view.accessibility.AccessibilityManager: java.util.List getAccessibilityServiceList()>
<android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>
<android.widget.TabWidget: int getTabCount()>
<android.view.View: int getImportantForAccessibility()>
<android.webkit.WebViewClassic: int getViewHeight()>
<com.android.phone.PhoneGlobals: android.app.KeyguardManager getKeyguardManager()>
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getChild(int)>
<android.view.inputmethod.InputMethodInfo: java.lang.String getServiceName()>
<com.google.android.apps.lightcycle.LightCycleApp: java.lang.String getAppVersion()>
<android.os.Environment: java.io.File getDataDirectory()>
<android.hardware.Camera$Parameters: float getExposureCompensationStep()>
<com.android.mms.dom.DocumentImpl: boolean getStrictErrorChecking()>
<android.view.animation.LayoutAnimationController: float getDelay()>
<com.android.server.am.ActivityStack: com.android.server.am.TaskAccessInfo getTaskAccessInfoLocked(int,boolean)>
<com.android.internal.widget.IRemoteViewsFactory$Stub: android.os.IBinder asBinder()>
<com.android.deskclock.AlarmClock$AlarmItemAdapter: int[] getExpandedArray()>
<com.android.videoeditor.ProjectsActivity: android.app.Dialog onCreateDialog(int,android.os.Bundle)>
<android.graphics.Bitmap: int getScaledHeight(int)>
<android.view.Surface: int getHeight()>
<android.widget.TextView: int getTotalPaddingRight()>
<android.view.animation.Animation: boolean getDetachWallpaper()>
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getText()>
<com.android.email.activity.MessageListItemCoordinates: int getMode(android.content.Context,int,boolean)>
<android.content.res.Resources: int getInteger(int)>
<com.android.commands.monkey.MonkeySourceNetwork: com.android.commands.monkey.MonkeyEvent getNextEvent()>
<com.android.internal.policy.impl.keyguard.PagedView: int getPageForView(android.view.View)>
<android.webkit.WebViewClassic: android.net.http.SslCertificate getCertificate()>
<android.webkit.WebView: java.lang.String getTitle()>
<com.android.internal.policy.impl.keyguard.KeyguardWidgetPager: com.android.internal.policy.impl.keyguard.KeyguardWidgetFrame getWidgetPageAt(int)>
<android.support.v13.app.FragmentPagerAdapter: android.os.Parcelable saveState()>
<com.android.mms.model.RegionModel: int getWidth()>
<com.android.mms.dom.smil.SmilParElementImpl: float getDur()>
<android.app.Activity: android.view.MenuInflater getMenuInflater()>
<android.animation.ValueAnimator: int getRepeatCount()>
<android.filterfw.core.FrameFormat: int getBytesPerSample()>
<android.view.ViewConfiguration: int getMinimumFlingVelocity()>
<android.widget.ProgressBar: int getMax()>
<android.hardware.usb.UsbEndpoint: int getDirection()>
<android.widget.GridLayout$PackedMap: java.lang.Object getValue(int)>
<android.content.ContentProviderProxy: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.ICancellationSignal)>
<android.app.WallpaperManager$FastBitmapDrawable: int getIntrinsicWidth()>
<com.android.email.mail.store.Pop3Store$Pop3Folder: int getMessageCount()>
<android.preference.Preference: java.lang.String getDependency()>
<android.app.ContextImpl: java.io.File getExternalCacheDir()>
<com.android.email.Email: java.lang.String getMessageDecodeErrorString()>
<android.widget.Scroller: int getCurrX()>
<android.widget.Scroller: int getCurrY()>
<android.filterpacks.performance.Throughput: int getPeriodFrameCount()>
<android.webkit.HTML5VideoInline: android.graphics.SurfaceTexture getSurfaceTexture(int)>
<android.view.accessibility.IAccessibilityManager$Stub$Proxy: java.util.List getInstalledAccessibilityServiceList(int)>
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName,int,int)>
<com.android.inputmethod.keyboard.internal.KeyboardRow: int getKeyY()>
<android.os.ICancellationSignal$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.android.commands.monkey.MonkeyKeyEvent: int getKeyCode()>
<com.android.internal.util.BitwiseOutputStream: byte[] toByteArray()>
<android.widget.ListPopupWindow: java.lang.Object getSelectedItem()>
<com.android.systemui.statusbar.tablet.TabletStatusBar: int getStatusBarGravity()>
<android.view.LayoutInflater: android.view.View inflate(org.xmlpull.v1.XmlPullParser,android.view.ViewGroup,boolean)>
<android.text.SpannableStringInternal: int getSpanFlags(java.lang.Object)>
<android.media.AudioManager$FocusEventHandlerDelegate: android.os.Handler getHandler()>
<android.appwidget.AppWidgetHostView: android.appwidget.AppWidgetProviderInfo getAppWidgetInfo()>
<android.widget.AdapterViewAnimator: android.animation.ObjectAnimator getDefaultInAnimation()>
<android.app.WallpaperManager: java.lang.String access$200()>
<com.android.internal.policy.impl.keyguard.KeyguardAbsKeyInputView: com.android.internal.policy.impl.keyguard.KeyguardSecurityCallback getCallback()>
<android.hardware.usb.UsbEndpoint: int getMaxPacketSize()>
<android.app.IBackupAgent$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.provider.Settings$Secure: float getFloat(android.content.ContentResolver,java.lang.String,float)>
<com.android.videoeditor.service.VideoEditorProject: java.util.List getDownloads()>
<com.android.internal.view.ActionBarPolicy: com.android.internal.view.ActionBarPolicy get(android.content.Context)>
<android.widget.TextView: boolean getIncludeFontPadding()>
<com.android.internal.widget.AbsActionBarView: int getAnimatedVisibility()>
<android.ddm.DdmHandleAppName: java.lang.String getAppName()>
<android.graphics.Paint: java.util.Locale getTextLocale()>
<android.widget.AccessibilityIterators$LineTextSegmentIterator: int getLineEdgeIndex(int,int)>
<android.media.videoeditor.EffectKenBurns: android.graphics.Rect getStartRect()>
<com.android.mms.dom.DocumentImpl: java.lang.String getDocumentURI()>
<com.android.inputmethod.latin.DicTraverseSession: long getSession()>
<com.android.org.bouncycastle.asn1.ASN1OctetString: com.android.org.bouncycastle.asn1.ASN1OctetString getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)>
<android.view.View: int getAccessibilityViewId()>
<android.content.res.XmlBlock$Parser: java.lang.String getAttributeName(int)>
<com.android.emailcommon.utility.Utility: java.lang.Object getFirstRowColumn(android.content.Context,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,int,java.lang.Object,com.android.emailcommon.utility.Utility$CursorGetter)>
<android.content.pm.IPackageManager$Stub$Proxy: java.util.List getAllPermissionGroups(int)>
<android.webkit.WebViewInputDispatcher$TouchStream: android.view.MotionEvent getLastEvent()>
<android.content.IntentFilter: java.lang.String getCategory(int)>
<com.android.videoeditor.service.MovieEffect: int getType()>
<android.text.method.DialerKeyListener: android.text.method.DialerKeyListener getInstance()>
<android.app.admin.DevicePolicyManager: int getCurrentFailedPasswordAttempts()>
<android.view.MotionEvent: int getPointerCount()>
<com.android.videoeditor.service.VideoEditorProject: int getAspectRatio()>
<android.widget.ActivityChooserView: android.widget.ActivityChooserModel getDataModel()>
<android.view.MotionEvent: int getMetaState()>
<com.android.org.bouncycastle.asn1.x509.SubjectPublicKeyInfo: com.android.org.bouncycastle.asn1.x509.AlgorithmIdentifier getAlgorithm()>
<com.android.mms.MmsConfig: int getMaxMessageCountPerThread()>
<com.android.systemui.recent.RecentTasksLoader: android.graphics.Bitmap getDefaultThumbnail()>
<com.android.inputmethod.latin.ResourceUtils: float getDimensionOrFraction(android.content.res.TypedArray,int,int,float)>
<android.view.animation.LayoutAnimationController: android.view.animation.Animation getAnimationForView(android.view.View)>
<android.app.ActivityManager: android.content.pm.ConfigurationInfo getDeviceConfigurationInfo()>
<android.widget.ProgressBar: int getSecondaryProgress()>
<com.android.email.activity.MailboxListFragment: boolean getEnableHighlight()>
<android.content.pm.ContainerEncryptionParams: java.security.spec.AlgorithmParameterSpec getMacSpec()>
<com.android.mms.dom.DocumentImpl: org.w3c.dom.Element getElementById(java.lang.String)>
<com.android.internal.widget.IRemoteViewsFactory$Stub$Proxy: android.widget.RemoteViews getLoadingView()>
<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber getExampleNumberForNonGeoEntity(int)>
<com.android.launcher2.LauncherModel: android.graphics.Bitmap getFallbackIcon()>
<android.preference.Preference: boolean getShouldDisableView()>
<android.hardware.Camera: android.hardware.Camera$Parameters getEmptyParameters()>
<android.view.View: int getVerticalScrollbarPosition()>
<com.android.server.AppWidgetServiceImpl: int getUidForPackage(java.lang.String)>
<com.android.internal.view.IInputMethod$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.app.ApplicationPackageManager: java.util.List queryPermissionsByGroup(java.lang.String,int)>
<com.android.email.SecurityPolicy: com.android.emailcommon.provider.Policy getAggregatePolicy()>
<android.view.IWindowManager$Stub$Proxy: android.view.WindowInfo getWindowInfo(android.os.IBinder)>
<com.android.inputmethod.latin.ExpandableDictionary$NextStaticWord: int getFrequency()>
<com.android.camera.CameraManager: com.android.camera.CameraManager$CameraProxy cameraOpen(int)>
<com.android.exchange.adapter.MoveItemsParser: java.lang.String getNewServerId()>
<android.graphics.Paint: int getTextWidths(java.lang.String,float[])>
<android.media.effect.FilterEffect: android.filterfw.core.FilterContext getFilterContext()>
<com.android.email.mail.store.Pop3Store$Pop3Folder: com.android.emailcommon.mail.Flag[] getPermanentFlags()>
<com.android.internal.view.IInputMethodManager$Stub$Proxy: java.util.List getShortcutInputMethodsAndSubtypes()>
<android.widget.Toast: int getXOffset()>
<android.media.videoeditor.Overlay: android.media.videoeditor.MediaItem getMediaItem()>
<com.android.internal.util.TypedProperties: long getLong(java.lang.String)>
<android.app.ContextImpl: java.io.File getSharedPrefsFile(java.lang.String)>
<android.content.res.Resources: int getDimensionPixelOffset(int)>
<android.media.Ringtone: java.lang.String getTitle(android.content.Context)>
<android.view.HardwareRenderer$Gl20Renderer: int[] getConfig(boolean)>
<android.view.inputmethod.InputMethodManager: java.util.Map getShortcutInputMethodsAndSubtypes()>
<android.view.View: float getRightFadingEdgeStrength()>
<android.media.videoeditor.Effect: long getStartTime()>
<com.android.launcher2.Workspace: java.util.ArrayList getWorkspaceAndHotseatCellLayouts()>
<com.android.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter: com.android.internal.view.menu.MenuView getMenuView(android.view.ViewGroup)>
<com.android.videoeditor.service.MovieTheme: com.android.videoeditor.service.MovieOverlay getOverlay()>
<android.view.IWindowManager$Stub$Proxy: int getRotation()>
<com.google.android.picasasync.UploadsManager: com.google.android.picasasync.SyncTaskProvider getManualVideoUploadTaskProvider()>
<android.view.animation.Transformation: android.graphics.Matrix getMatrix()>
<android.preference.PreferenceScreen: android.widget.ListAdapter getRootAdapter()>
<android.view.MotionEvent: int getDeviceId()>
<android.widget.AdapterViewAnimator: int getWindowSize()>
<com.android.internal.widget.multiwaveview.PointCloud$GlowManager: float getAlpha()>
<android.app.ActivityManager: int getPackageScreenCompatMode(java.lang.String)>
<com.android.camera.MosaicFrameProcessor: byte[] getFinalMosaicNV21()>
<com.android.mms.dom.smil.SmilRegionElementImpl: int getHeight()>
<com.android.internal.view.BaseSurfaceHolder: int getRequestedWidth()>
<com.android.systemui.statusbar.phone.PhoneStatusBar: com.android.systemui.statusbar.GestureRecorder getGestureRecorder()>
<android.content.ContextWrapper: java.lang.String getPackageResourcePath()>
<com.android.org.bouncycastle.asn1.ASN1OctetString: com.android.org.bouncycastle.asn1.ASN1Primitive getLoadedObject()>
<android.hardware.usb.UsbAccessory: java.lang.String getVersion()>
<android.graphics.drawable.BitmapDrawable: int getGravity()>
<android.view.View: float getHorizontalScrollFactor()>
<android.view.AccessibilityIterators$ParagraphTextSegmentIterator: android.view.AccessibilityIterators$ParagraphTextSegmentIterator getInstance()>
<android.app.ITransientNotification$Stub: android.os.IBinder asBinder()>
<com.android.mms.data.Conversation: java.lang.String verifySingleRecipient(android.content.Context,long,java.lang.String)>
<android.widget.ActivityChooserView$ActivityChooserViewAdapter: int getActivityCount()>
<com.android.email.Preferences: int getOneTimeInitializationProgress()>
<android.hardware.SensorManager: void getRotationMatrixFromVector(float[],float[])>
<com.android.inputmethod.keyboard.internal.PointerTrackerQueue: com.android.inputmethod.keyboard.internal.PointerTrackerQueue$Element getOldestElement()>
<android.widget.Spinner$DropdownPopup: java.lang.CharSequence getHintText()>
<com.android.emailcommon.internet.MimeMultipart: java.lang.String getSubTypeForTest()>
<com.android.inputmethod.accessibility.KeyCodeDescriptionMapper: com.android.inputmethod.accessibility.KeyCodeDescriptionMapper getInstance()>
<android.text.style.StrikethroughSpan: int getSpanTypeId()>
<android.webkit.WebResourceResponse: java.lang.String getMimeType()>
<android.webkit.WebViewClassic$InvokeListBox$MyArrayListAdapter: long getItemId(int)>
<android.widget.ToggleButton: java.lang.CharSequence getTextOn()>
<android.webkit.WebViewFactory: android.webkit.WebViewFactoryProvider getProvider()>
<android.content.ContextWrapper: java.lang.String getPackageCodePath()>
<com.android.internal.policy.impl.PhoneWindowManager: int getSystemDecorRectLw(android.graphics.Rect)>
<com.android.deskclock.widget.multiwaveview.GlowPadView: int getSuggestedMinimumWidth()>
<android.widget.GridLayout: int getAlignmentMode()>
<android.webkit.WebSettings: boolean getUseDoubleTree()>
<com.android.uiautomator.core.UiSelector: java.lang.String getString(int)>
<android.view.ViewStub: int getInflatedId()>
<android.server.search.Searchables: android.app.SearchableInfo getSearchableInfo(android.content.ComponentName)>
<android.animation.ValueAnimator: int getCurrentAnimationsCount()>
<android.media.MediaRecorder: int getAudioSourceMax()>
<com.android.commands.svc.Svc$Command: java.lang.String name()>
<com.android.org.bouncycastle.asn1.ASN1OutputStream: com.android.org.bouncycastle.asn1.ASN1OutputStream getDERSubStream()>
<com.android.deskclock.DeskClock$TabsAdapter: android.app.Fragment getItem(int)>
<android.drm.DrmUtils$ExtendedMetadataParser: java.lang.String get(java.lang.String)>
<com.android.inputmethod.latin.ExpandableDictionary$NextHistoryWord: com.android.inputmethod.latin.ExpandableDictionary$Node getWordNode()>
<android.filterpacks.imageproc.Invert: android.filterfw.core.Program getShaderProgram(android.filterfw.core.FilterContext)>
<android.media.MediaRouter$RouteInfo: int getVolume()>
<com.android.mms.dom.NodeImpl: org.w3c.dom.Node getLastChild()>
<com.android.org.bouncycastle.asn1.DERApplicationSpecific: com.android.org.bouncycastle.asn1.DERApplicationSpecific getInstance(java.lang.Object)>
<android.speech.tts.TextToSpeech: java.util.Locale getLanguage()>
<android.webkit.HTML5VideoView: boolean getStartWhenPrepared()>
<com.android.org.bouncycastle.asn1.DERObjectIdentifier: byte[] getBody()>
<android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityInteractionClient getInstance()>
<android.hardware.Sensor: int getHandle()>
<android.security.KeyStore: android.security.KeyStore getInstance()>
<com.android.internal.view.menu.MenuItemImpl: android.content.Intent getIntent()>
<com.android.launcher2.Workspace: com.android.launcher2.DropTarget getDropTargetDelegate(com.android.launcher2.DropTarget$DragObject)>
<com.android.videoeditor.service.MovieTransition: int getAlphaMaskResId()>
<android.content.Intent: java.util.ArrayList getParcelableArrayListExtra(java.lang.String)>
<android.speech.tts.TextToSpeechService$SpeechItem: int getCallerPid()>
<android.content.ContentProvider$Transport: android.content.ContentProvider getContentProvider()>
<android.media.MediaRouter$RouteCategory: java.lang.CharSequence getName(android.content.res.Resources)>
<com.android.launcher2.BubbleTextView: int getPressedOrFocusedBackgroundPadding()>
<android.support.v4.os.ParcelableCompatCreatorHoneycombMR2: java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader)>
<com.android.internal.view.menu.MenuBuilder: android.content.res.Resources getResources()>
<android.drm.DrmEvent: java.lang.String getMessage()>
<android.drm.DrmSupportInfo: java.util.Iterator getMimeTypeIterator()>
<com.android.systemui.statusbar.BaseStatusBar: android.view.View$OnLongClickListener getNotificationLongClicker()>
<com.android.inputmethod.keyboard.internal.KeyboardTextsSet: java.lang.String getText(java.lang.String)>
<android.media.audiofx.BassBoost: boolean getStrengthSupported()>
<com.android.internal.widget.ActionBarView: java.lang.CharSequence getTitle()>
<com.android.mms.util.AddressUtils: java.lang.String getFrom(android.content.Context,android.net.Uri)>
<android.webkit.CertTool: java.lang.String getCertType(java.lang.String)>
<android.filterfw.core.VertexFrame: android.graphics.Bitmap getBitmap()>
<android.widget.ListPopupWindow: int getWidth()>
<com.android.email.activity.setup.EditQuickResponseDialog: android.app.Dialog onCreateDialog(android.os.Bundle)>
<android.view.inputmethod.InputConnectionWrapper: java.lang.CharSequence getTextBeforeCursor(int,int)>
<com.android.internal.widget.IRemoteViewsAdapterConnection$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.media.videoeditor.Overlay: java.lang.String getId()>
<android.widget.AbsListView: int getListPaddingBottom()>
<android.view.View$AccessibilityDelegate: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider(android.view.View)>
<com.android.videoeditor.widgets.MediaLinearLayout: int getSelectedViewPos()>
<com.android.launcher2.PagedView: android.view.View getScrollingIndicator()>
<com.android.server.power.DisplayPowerState: float getElectronBeamLevel()>
<android.app.ApplicationPackageManager: android.content.Intent getLaunchIntentForPackage(java.lang.String)>
<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber$CountryCodeSource getCountryCodeSource()>
<com.google.android.apps.lightcycle.storage.LocalFileStorageManager: com.google.android.apps.lightcycle.storage.LocalSessionStorage getLocalSessionStorage()>
<android.webkit.CacheManager$CacheResult: long getExpires()>
<com.android.email.mail.Store: android.os.Bundle autoDiscover(android.content.Context,java.lang.String,java.lang.String)>
<com.android.inputmethod.accessibility.AccessibilityEntityProvider: android.view.accessibility.AccessibilityEvent createAccessibilityEvent(com.android.inputmethod.keyboard.Key,int)>
<com.google.android.picasasync.UploadsDatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>
<android.content.Intent: android.graphics.Rect getSourceBounds()>
<android.text.StaticLayout: int getParagraphDirection(int)>
<android.app.admin.DevicePolicyManager: void getRemoveWarning(android.content.ComponentName,android.os.RemoteCallback)>
<android.widget.BaseExpandableListAdapter: int getChildType(int,int)>
<android.content.ISyncContext$Stub: android.os.IBinder asBinder()>
<com.google.android.apps.lightcycle.panorama.DeviceManager: float getCameraFieldOfViewDegrees(float)>
<com.google.android.picasasync.UploadTaskEntry: long getBytesUploaded()>
<android.widget.RelativeLayout$LayoutParams: int[] getRules()>
<com.android.videoeditor.TransitionType: int getType()>
<com.android.internal.statusbar.StatusBarNotification: int getUserId()>
<android.os.Environment$UserEnvironment: java.io.File getExternalStorageAppFilesDirectory(java.lang.String)>
<com.android.email.SecurityPolicy: com.android.emailcommon.provider.Policy computeAggregatePolicy()>
<android.view.ViewConfiguration: int getScaledMinimumFlingVelocity()>
<android.gesture.GestureStore: int getSequenceType()>
<com.android.mms.util.PduLoaderManager: java.lang.String getTag()>
<com.android.server.IntentResolverOld: java.util.Set filterSet()>
<android.view.ViewConfiguration: int getScaledTouchSlop()>
<android.security.KeyStore: byte[] sign(java.lang.String,byte[])>
<com.android.camera.ActivityBase$MyAppBridge: com.android.gallery3d.ui.ScreenNail getCameraScreenNail()>
<com.android.systemui.statusbar.phone.PanelHolder: int getChildDrawingOrder(int,int)>
<android.hardware.SystemSensorManager$ListenerDelegate: java.util.List getSensors()>
<android.content.Intent: android.content.Intent getIntent(java.lang.String)>
<android.graphics.YuvImage: byte[] getYuvData()>
<android.media.audiofx.Equalizer: android.media.audiofx.Equalizer$Settings getProperties()>
<android.widget.AutoCompleteTextView: android.widget.AdapterView$OnItemSelectedListener getItemSelectedListener()>
<com.android.providers.media.MediaThumbRequest: java.util.Comparator getComparator()>
<com.android.internal.policy.impl.GlobalActions$MyAdapter: int getCount()>
<com.android.launcher2.Workspace$WallpaperOffsetInterpolator: float getCurrY()>
<com.android.launcher2.Workspace$WallpaperOffsetInterpolator: float getCurrX()>
<com.android.systemui.recent.RecentsScrollViewPerformanceHelper: int getHorizontalFadingEdgeLengthCallback()>
<android.app.Instrumentation: android.app.Instrumentation$ActivityResult execStartActivity(android.content.Context,android.os.IBinder,android.os.IBinder,android.app.Activity,android.content.Intent,int,android.os.Bundle)>
<com.android.server.am.ProviderMap: com.android.server.am.ContentProviderRecord getProviderByName(java.lang.String)>
<android.provider.Settings$Bookmarks: java.lang.CharSequence getTitle(android.content.Context,android.database.Cursor)>
<android.text.style.BulletSpan: int getSpanTypeId()>
<android.util.EventLog: java.lang.String getTagName(int)>
<android.view.animation.GridLayoutAnimationController: int getDirectionPriority()>
<android.app.Instrumentation: android.content.ComponentName getComponentName()>
<android.media.IRemoteControlClient$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.os.Bundle: java.lang.String getString(java.lang.String)>
<android.app.ApplicationPackageManager: void getPackageSizeInfo(java.lang.String,int,android.content.pm.IPackageStatsObserver)>
<android.widget.RemoteViews$BitmapCache: android.graphics.Bitmap getBitmapForId(int)>
<com.android.inputmethod.latin.RichInputConnection: java.lang.CharSequence getWordBeforeCursorIfAtEndOfWord(com.android.inputmethod.latin.SettingsValues)>
<com.android.exchange.adapter.Parser: int getValueInt()>
<android.widget.TextView: int getMaxHeight()>
<android.hardware.input.IInputManager$Stub$Proxy: android.hardware.input.KeyboardLayout getKeyboardLayout(java.lang.String)>
<com.android.mms.dom.smil.SmilDocumentImpl: org.w3c.dom.NodeList getActiveChildrenAt(float)>
<android.media.RingtoneManager: int getDefaultType(android.net.Uri)>
<com.android.mms.MmsApp: com.android.mms.MmsApp getApplication()>
<com.android.mms.transaction.Transaction: byte[] getPdu(java.lang.String)>
<com.android.ex.chips.BaseRecipientAdapter: int getCount()>
<android.widget.CursorAdapter: android.widget.Filter getFilter()>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean getStorageEncryption(android.content.ComponentName,int)>
<android.text.SpannedString: int getSpanFlags(java.lang.Object)>
<com.android.videoeditor.util.StringUtils: java.lang.String getDurationAsString(android.content.Context,long)>
<android.widget.TextView: int getPaintFlags()>
<android.app.ActivityManagerProxy: android.app.IActivityManager$ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder)>
<com.android.camera.ui.PieItem: int getIntrinsicWidth()>
<com.android.org.bouncycastle.asn1.BEROctetStringParser: java.io.InputStream getOctetStream()>
<android.filterpacks.imageproc.SharpenFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)>
<com.android.launcher2.Launcher: int[] getSpanForWidget(android.content.Context,android.appwidget.AppWidgetProviderInfo)>
<com.android.launcher2.LauncherProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<com.android.mms.layout.HVGALayoutParameters: int getWidth()>
<android.widget.ImageView: android.graphics.Matrix getImageMatrix()>
<com.android.videoeditor.service.VideoEditorProject: java.util.List getMediaItems()>
<android.view.MotionEvent: float getHistoricalPressure(int,int)>
<com.android.mms.dom.smil.SmilPlayer: int getCurrentPosition()>
<android.content.Intent$FilterComparison: android.content.Intent getIntent()>
<com.google.android.apps.lightcycle.sensor.SensorReader: int getAzimuthInDeg()>
<android.os.Debug: int getGlobalAllocCount()>
<android.provider.Settings$Secure: float getFloat(android.content.ContentResolver,java.lang.String)>
<android.widget.NumberPicker: int getMaxValue()>
<android.media.MediaFile: android.media.MediaFile$MediaFileType getFileType(java.lang.String)>
<android.content.pm.IPackageManager$Stub$Proxy: java.util.List getPreferredPackages(int)>
<com.android.inputmethod.keyboard.ProximityInfo: com.android.inputmethod.keyboard.Key[] getNearestKeys(int,int)>
<android.text.style.TextAppearanceSpan: java.lang.String getFamily()>
<com.android.email.activity.setup.AccountSecurity$PasswordExpirationDialog: android.app.Dialog onCreateDialog(android.os.Bundle)>
<com.android.internal.os.AtomicFile: byte[] readFully()>
<android.hardware.usb.UsbDevice: java.lang.String getDeviceName(int)>
<com.android.camera.ComboPreferences: com.android.camera.ComboPreferences get(android.content.Context)>
<android.view.Display: int getRotation()>
<android.support.v4.content.LocalBroadcastManager: android.support.v4.content.LocalBroadcastManager getInstance(android.content.Context)>
<android.media.videoeditor.MediaVideoItem: int getAudioSamplingFrequency()>
<com.android.inputmethod.keyboard.internal.KeySpecParser: int getCode(java.lang.String,com.android.inputmethod.keyboard.internal.KeyboardCodesSet)>
<com.android.org.bouncycastle.asn1.DERApplicationSpecific: int getApplicationTag()>
<com.android.videoeditor.service.MovieOverlay: java.lang.String getTitle()>
<com.android.exchange.adapter.Parser: java.lang.String getValue()>
<android.webkit.WebView: int getContentWidth()>
<com.android.mms.model.MediaModel: byte[] getData()>
<com.android.org.bouncycastle.asn1.ASN1Sequence: com.android.org.bouncycastle.asn1.ASN1Primitive toDERObject()>
<android.webkit.WebStorageClassic: void getUsageForOrigin(java.lang.String,android.webkit.ValueCallback)>
<android.os.storage.IObbActionListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.view.InputDevice: android.view.InputDevice$MotionRange getMotionRange(int,int)>
<android.webkit.WebView: java.lang.String getUrl()>
<android.speech.tts.TextToSpeechService$SpeechItem: java.lang.String getUtteranceId()>
<android.app.ActivityManagerProxy: android.app.IActivityManager$ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,int,boolean)>
<com.android.inputmethod.keyboard.MainKeyboardView: java.lang.String getMiddleDisplayName(android.view.inputmethod.InputMethodSubtype)>
<android.widget.ViewAnimator: android.view.animation.Animation getOutAnimation()>
<android.content.Loader: android.content.Context getContext()>
<android.filterfw.core.NativeFrame: java.lang.Object getObjectValue()>
<android.os.Environment: java.io.File getExternalStorageDirectory()>
<android.filterfw.core.Frame: android.filterfw.core.FrameManager getFrameManager()>
<com.android.internal.statusbar.IStatusBar$Stub: android.os.IBinder asBinder()>
<android.view.View: int getLayerType()>
<android.widget.TimePicker: int getBaseline()>
<android.app.Fragment: boolean getRetainInstance()>
<android.hardware.usb.UsbRequest: java.lang.Object getClientData()>
<android.content.Intent: java.util.ArrayList getStringArrayListExtra(java.lang.String)>
<com.android.i18n.phonenumbers.geocoding.AreaCodeMapStorageStrategy: int getNumOfEntries()>
<com.google.android.apps.lightcycle.opengl.Shader: int getUniform(int,java.lang.String)>
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName,int,int)>
<android.text.StaticLayout: int getBottomPadding()>
<com.google.android.apps.lightcycle.opengl.GLTexture: int getIndex()>
<com.google.android.apps.lightcycle.panorama.PhotoCollection: int getNumFrames()>
<com.android.videoeditor.widgets.MediaItemView: android.view.View$DragShadowBuilder getShadowBuilder()>
<com.google.android.picasasync.UploadTaskEntry: java.lang.String getDisplayName()>
<android.webkit.PluginManager: java.lang.String getPluginsAPKName(java.lang.String)>
<com.android.internal.policy.impl.keyguard.KeyguardCircleFramedDrawable: float getScale()>
<com.android.email.activity.MailboxFragmentAdapter$CombinedMailboxLoader: android.database.Cursor loadInBackground()>
<android.view.inputmethod.InputConnectionWrapper: java.lang.CharSequence getSelectedText(int)>
<android.os.CountDownTimer: android.os.CountDownTimer start()>
<android.widget.CursorAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)>
<com.android.internal.util.MemInfoReader: long getCachedSize()>
<android.preference.PreferenceGroupAdapter: android.preference.Preference getItem(int)>
<android.app.ContextImpl: android.view.CompatibilityInfoHolder getCompatibilityInfo(int)>
<android.media.AudioManager: int getDevicesForStream(int)>
<com.android.musicfx.seekbar.ProgressBar: int getProgress()>
<com.android.launcher2.IconCache: android.graphics.Bitmap getIcon(android.content.ComponentName,android.content.pm.ResolveInfo,java.util.HashMap)>
<com.android.mms.data.WorkingMessage: com.android.mms.data.Conversation getConversation()>
<com.android.exchange.Eas: java.lang.Double getProtocolVersionDouble(java.lang.String)>
<android.app.LoadedApk: java.io.File getDataDirFile()>
<com.android.phone.PhoneGlobals: com.android.phone.PhoneGlobals getInstance()>
<android.content.ContentResolver: android.content.IContentProvider acquireProvider(android.net.Uri)>
<android.webkit.CookieManager: java.lang.String getCookie(android.net.WebAddress)>
<android.webkit.HTML5Audio$IsPrivateBrowsingEnabledGetter: boolean get()>
<android.content.CursorLoader: java.lang.String[] getProjection()>
<com.android.mms.dom.AttrImpl: org.w3c.dom.Node getParentNode()>
<com.android.mms.MmsConfig: int getDefaultSMSMessagesPerThread()>
<android.text.Layout: void getSelectionPath(int,int,android.graphics.Path)>
<com.android.systemui.statusbar.policy.CurrentUserTracker: int getCurrentUserId()>
<android.view.accessibility.AccessibilityNodeInfo: int getAccessibilityViewId(long)>
<com.android.org.bouncycastle.jce.netscape.NetscapeCertRequest: com.android.org.bouncycastle.asn1.x509.AlgorithmIdentifier getKeyAlgorithm()>
<com.android.mms.ui.MessageItem: int getMmsDownloadStatus()>
<android.webkit.WebSettingsClassic: android.webkit.WebSettings$PluginState getPluginState()>
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String getInstallerPackageName(java.lang.String)>
<com.android.videoeditor.widgets.OverlayView: int getState()>
<android.app.WallpaperInfo: java.lang.String getServiceName()>
<android.util.XmlPullAttributes: float getAttributeFloatValue(java.lang.String,java.lang.String,float)>
<android.util.SparseLongArray: long get(int)>
<android.webkit.CacheManager$CacheResult: java.lang.String getEncoding()>
<android.media.MediaPlayer$TrackInfo: int getTrackType()>
<com.android.email.activity.AccountSelectorAdapter$AccountsLoader: android.database.Cursor loadInBackground()>
<com.android.mms.dom.NodeImpl: org.w3c.dom.NamedNodeMap getAttributes()>
<android.view.DragEvent: android.content.ClipData getClipData()>
<android.preference.Preference: int getLayoutResource()>
<android.widget.TextView: android.graphics.drawable.Drawable[] getCompoundDrawablesRelative()>
<com.android.internal.view.InputConnectionWrapper: android.view.inputmethod.ExtractedText getExtractedText(android.view.inputmethod.ExtractedTextRequest,int)>
<android.app.admin.DevicePolicyManager: long getPasswordExpirationTimeout(android.content.ComponentName)>
<android.widget.Spinner$DropDownAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)>
<android.hardware.Camera$Parameters: java.util.List getSupportedFocusModes()>
<com.android.server.am.TransferPipe: android.os.ParcelFileDescriptor getReadFd()>
<android.widget.RemoteViews$Action: java.lang.String getUniqueKey()>
<com.android.internal.view.menu.BaseMenuPresenter: com.android.internal.view.menu.MenuView getMenuView(android.view.ViewGroup)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isAdminActive(android.content.ComponentName,int)>
<android.text.TextUtils: java.lang.CharSequence getReverse(java.lang.CharSequence,int,int)>
<android.view.PointerIcon: android.view.PointerIcon getSystemIcon(android.content.Context,int)>
<android.content.ClipData: android.content.ClipDescription getDescription()>
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor: int getFailedUnlockAttempts()>
<com.android.server.display.WifiDisplayAdapter: android.hardware.display.WifiDisplayStatus getWifiDisplayStatusLocked()>
<android.os.Environment: java.io.File getSecureDataDirectory()>
<android.app.ActionBar: android.content.Context getThemedContext()>
<com.android.email.activity.setup.AccountSettingsFragment: java.lang.String getTitleFromArgs(android.os.Bundle)>
<android.app.ActivityManagerProxy: java.util.List getServices(int,int)>
<com.android.org.bouncycastle.asn1.ASN1Primitive: com.android.org.bouncycastle.asn1.ASN1Primitive toASN1Primitive()>
<android.webkit.WebSettings: boolean getJavaScriptCanOpenWindowsAutomatically()>
<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: java.lang.Object[] getSections()>
<com.google.android.picasasync.UploadTaskEntry: int getUid()>
<android.content.pm.IPackageManager$Stub$Proxy: java.util.List queryInstrumentation(java.lang.String,int)>
<android.graphics.Paint: android.graphics.Paint$Cap getStrokeCap()>
<android.app.ActivityThread: android.content.res.Resources getTopLevelResources(java.lang.String,int,android.content.res.Configuration,android.content.res.CompatibilityInfo)>
<com.android.email.activity.MessageListFragment: long getAccountId()>
<android.preference.PreferenceManager: android.preference.PreferenceScreen createPreferenceScreen(android.content.Context)>
<android.view.View: float getRotationY()>
<android.view.View: float getRotationX()>
<com.android.videoeditor.VideoEditorActivity: com.android.videoeditor.widgets.MediaLinearLayout getMediaLayout()>
<com.android.mms.transaction.ReadRecTransaction: int getType()>
<com.android.inputmethod.keyboard.Key: int getDrawWidth()>
<com.android.launcher2.LauncherProvider: java.lang.String getType(android.net.Uri)>
<android.webkit.WebSettingsClassic: boolean getBuiltInZoomControls()>
<com.android.mms.util.DraftCache: com.android.mms.util.DraftCache getInstance()>
<android.filterfw.core.Scheduler: android.filterfw.core.FilterGraph getGraph()>
<com.android.mms.data.Conversation: long getOrCreateThreadId(android.content.Context,java.lang.String)>
<android.content.res.TypedArray: float getFraction(int,int,int,float)>
<android.app.Fragment: java.lang.CharSequence getText(int)>
<android.widget.TableRow: int getVirtualChildCount()>
<com.google.android.picasasync.UploadTaskEntry: android.net.Uri getUrl()>
<android.text.Layout$SpannedEllipsizer: java.lang.Object[] getSpans(int,int,java.lang.Class)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: long getPasswordExpiration(android.content.ComponentName,int)>
<com.android.launcher2.IconCache: android.graphics.drawable.Drawable getFullResDefaultActivityIcon()>
<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber getExampleNumberForType(java.lang.String,com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType)>
<android.webkit.AccessibilityInjectorFallback$AccessibilityWebContentKeyBinding: int getModifiers()>
<android.view.KeyCharacterMap: int get(int,int)>
<android.view.View: android.view.HardwareRenderer getHardwareRenderer()>
<com.android.internal.view.BaseSurfaceHolder: android.view.Surface getSurface()>
<com.android.mms.util.Recycler$SmsRecycler: long getThreadId(android.database.Cursor)>
<android.content.res.XmlBlock$Parser: int getAttributeUnsignedIntValue(int,int)>
<com.android.camera.Util: int getCameraOrientation(int)>
<com.android.ex.chips.RecipientAlternatesAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<android.content.IIntentSender$Stub: android.os.IBinder asBinder()>
<android.graphics.Bitmap: int getScaledWidth(int)>
<android.graphics.drawable.Drawable: int getLevel()>
<android.os.storage.StorageManager: android.os.storage.StorageVolume[] getVolumeList()>
<android.filterpacks.imageproc.NegativeFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)>
<com.android.mms.model.MediaModel: int getBegin()>
<com.android.internal.util.StateMachine: int getLogRecCount()>
<com.android.internal.widget.multiwaveview.MultiWaveView: int getTargetResourceId()>
<com.android.internal.policy.impl.keyguard.PagedView: int getPageNearestToPoint(float)>
<com.android.server.usb.UsbDeviceManager$UsbHandler: android.hardware.usb.UsbAccessory getCurrentAccessory()>
<com.android.email.mail.store.Pop3Store$Pop3Folder: com.android.emailcommon.mail.Message getMessage(java.lang.String)>
<com.android.mms.model.SlideshowModel: com.android.mms.model.SlideshowModel createFromPduBody(android.content.Context,com.google.android.mms.pdu.PduBody)>
<android.app.Instrumentation$ActivityResult: int getResultCode()>
<com.android.internal.net.VpnConfig: android.content.Intent getIntentForConfirmation()>
<com.android.launcher2.PagedView: int getPageCount()>
<com.android.camera.ListPreference: java.lang.String getValue()>
<android.widget.AutoCompleteTextView: int getDropDownAnimationStyle()>
<com.android.internal.view.menu.MenuPopupHelper: com.android.internal.view.menu.MenuView getMenuView(android.view.ViewGroup)>
<android.webkit.WebViewClassic: android.webkit.WebView$HitTestResult getHitTestResult()>
<android.app.IThumbnailReceiver$Stub: android.os.IBinder asBinder()>
<com.android.musicfx.ControlPanelEffect: int[] getParameterIntArray(android.content.Context,java.lang.String,int,com.android.musicfx.ControlPanelEffect$Key)>
<android.widget.GridView: int getStretchMode()>
<android.widget.TextView: int getBottomPaddingOffset()>
<android.os.Bundle: android.os.Parcelable[] getParcelableArray(java.lang.String)>
<com.android.org.bouncycastle.asn1.DERBoolean: com.android.org.bouncycastle.asn1.ASN1Boolean getInstance(boolean)>
<com.android.email.provider.ContentCache$CounterMap: int getCount(java.lang.Object)>
<android.emoji.EmojiFactory: java.lang.String getVendorSpecificPuaFromAndroidPua(java.lang.String)>
<com.android.mms.dom.smil.ElementTimeImpl: int getBeginConstraints()>
<com.android.inputmethod.keyboard.MoreKeysKeyboardView: com.android.inputmethod.keyboard.KeyboardActionListener getKeyboardActionListener()>
<com.android.emailcommon.internet.MimeMultipart: java.lang.String getContentType()>
<android.webkit.WebSettingsClassic: java.lang.String getSansSerifFontFamily()>
<com.android.internal.util.StateMachine$LogRec: long getWhat()>
<android.widget.CheckedTextView: android.graphics.drawable.Drawable getCheckMarkDrawable()>
<android.widget.TextView: int getImeActionId()>
<android.media.MediaRouter$RouteInfo: int getVolumeHandling()>
<com.android.videoeditor.service.MovieMediaItem: int getAppRenderingMode()>
<com.android.inputmethod.latin.suggestions.MoreSuggestionsView$2: com.android.inputmethod.keyboard.PointerTracker$DrawingProxy getDrawingProxy()>
<android.drm.DrmManagerClient: java.lang.String[] getAvailableDrmEngines()>
<com.android.emailcommon.TrafficFlags: int getSmtpFlags(android.content.Context,com.android.emailcommon.provider.Account)>
<android.widget.CursorTreeAdapter$MyCursorHelper: android.database.Cursor getCursor()>
<com.android.internal.app.ActionBarImpl: int getNavigationItemCount()>
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: android.appwidget.AppWidgetProviderInfo getAppWidgetInfo(int)>
<android.view.accessibility.AccessibilityEvent: long getEventTime()>
<com.google.android.picasasync.UploadTaskEntry: int getPercentageUploaded()>
<android.widget.AdapterViewAnimator: android.widget.FrameLayout getFrameForChild()>
<android.widget.AbsListView: long[] getCheckedItemIds()>
<com.google.android.picasastore.PicasaStoreFacade: com.google.android.picasastore.PicasaStoreFacade get(android.content.Context)>
<android.webkit.JsResult: boolean getResult()>
<android.hardware.Camera$Parameters: boolean getVideoStabilization()>
<com.android.phone.PhoneGlobals: com.android.internal.telephony.Phone getPhone()>
<android.animation.FloatKeyframeSet: java.lang.Object getValue(float)>
<com.android.videoeditor.service.VideoEditorProject: com.android.videoeditor.service.MovieMediaItem getNextMediaItem(long)>
<com.google.android.apps.lightcycle.panorama.LightCycleView: android.hardware.Camera$PreviewCallback getPreviewCallback()>
<android.webkit.WebSettings: boolean getSaveFormData()>
<com.android.server.IntentResolver: java.util.Set filterSet()>
<android.app.ActivityManager: java.util.List getRecentTasks(int,int)>
<com.android.email.mail.Store: java.lang.Class getSettingActivityClass()>
<com.android.mms.transaction.MessagingNotification: long getThreadId(android.content.Context,android.net.Uri)>
<android.view.Display: int getDisplayId()>
<com.google.android.picasasync.PicasaDatabaseHelper: java.lang.String getRealAlbumId(java.lang.String,java.lang.String)>
<com.android.org.bouncycastle.asn1.DERBitString: com.android.org.bouncycastle.asn1.DERBitString getInstance(java.lang.Object)>
<android.content.IClipboard$Stub$Proxy: android.content.ClipDescription getPrimaryClipDescription()>
<com.android.commands.monkey.MonkeySourceNetworkViews$QueryViewCommand: com.android.commands.monkey.MonkeySourceNetwork$MonkeyCommandReturn translateCommand(java.util.List,com.android.commands.monkey.MonkeySourceNetwork$CommandQueue)>
<android.widget.ScrollBarDrawable: boolean getAlwaysDrawHorizontalTrack()>
<com.android.launcher2.LauncherModel: java.util.ArrayList getWorkspaceShortcutItemInfosWithIntent(android.content.Intent)>
<com.android.internal.database.SortCursor: double getDouble(int)>
<android.view.View: int getVisibility()>
<com.android.phone.PhoneGlobals: android.content.Intent createInCallIntent(boolean)>
<android.preference.Preference: android.content.Context getContext()>
<android.media.videoeditor.TransitionAlpha: int getRGBFileWidth()>
<com.android.emailcommon.internet.BinaryTempFileBody: java.io.OutputStream getOutputStream()>
<android.view.View: android.graphics.Matrix getMatrix()>
<android.graphics.drawable.DrawableContainer: android.graphics.drawable.Drawable getCurrent()>
<android.view.ViewConfiguration: int getDoubleTapTimeout()>
<com.android.email.activity.AccountSelectorAdapter: java.lang.String getDisplayName(android.database.Cursor)>
<android.widget.AbsSpinner: android.view.View getSelectedView()>
<com.android.internal.app.IBatteryStats$Stub$Proxy: long getAwakeTimePlugged()>
<com.android.commands.monkey.MonkeySourceRandom: java.lang.String getKeyName(int)>
<android.os.Bundle: boolean[] getBooleanArray(java.lang.String)>
<com.android.mms.transaction.HttpUtils: java.lang.String getCurrentAcceptLanguage(java.util.Locale)>
<android.view.accessibility.AccessibilityNodeInfo: int getMovementGranularities()>
<android.content.res.XmlBlock$Parser: java.lang.String getName()>
<android.graphics.drawable.Drawable: int getChangingConfigurations()>
<android.util.NtpTrustedTime: long getCachedNtpTimeReference()>
<com.android.email.FolderProperties: com.android.email.FolderProperties getInstance(android.content.Context)>
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String[] currentToCanonicalPackageNames(java.lang.String[])>
<com.android.internal.content.PackageHelper: java.lang.String getSdDir(java.lang.String)>
<com.android.inputmethod.latin.InputPointers: int[] getTimes()>
<android.content.ContentProviderClient: android.content.ContentProvider getLocalContentProvider()>
<com.android.mms.dom.AttrImpl: org.w3c.dom.TypeInfo getSchemaTypeInfo()>
<com.google.android.picasasync.UploadTaskEntry: java.lang.String getAlbumTitle()>
<android.media.videoeditor.MediaImageItem: java.lang.String getDecodedImageFileName()>
<android.drm.DrmSupportInfo: java.lang.String getDescription()>
<com.android.camera.CameraActivity: com.android.camera.CameraScreenNail getCameraScreenNail()>
<android.view.DisplayInfo: int getNaturalWidth()>
<android.app.WallpaperInfo: android.content.pm.ServiceInfo getServiceInfo()>
<android.hardware.display.IDisplayManagerCallback$Stub: android.os.IBinder asBinder()>
<com.android.ex.variablespeed.VariableSpeed: int getDuration()>
<com.android.inputmethod.keyboard.MainKeyboardView: com.android.inputmethod.keyboard.KeyDetector getKeyDetector()>
<android.app.ActivityThread: android.content.Intent getIntentBeingBroadcast()>
<android.media.MediaRouter$RouteGroup: java.lang.CharSequence getName(android.content.res.Resources)>
<com.android.internal.view.menu.MenuItemImpl: java.lang.CharSequence getTitleCondensed()>
<com.android.internal.widget.EditableInputConnection: android.text.Editable getEditable()>
<com.android.ex.variablespeed.EngineParameters: int getDecodeBufferInitialSize()>
<com.android.internal.view.InputConnectionWrapper: java.lang.CharSequence getTextBeforeCursor(int,int)>
<android.security.KeyStore: byte[] getPubkey(java.lang.String)>
<android.graphics.Bitmap: int getRowBytes()>
<com.google.android.apps.lightcycle.panorama.DeviceManager: float getOpenGlMinFieldOfViewDegrees()>
<android.animation.Keyframe$IntKeyframe: java.lang.Object getValue()>
<android.graphics.drawable.InsetDrawable: int getChangingConfigurations()>
<android.view.Surface: int getGenerationId()>
<android.content.ContextWrapper: java.lang.Object getSystemService(java.lang.String)>
<com.android.inputmethod.latin.SuggestedWords: java.util.ArrayList getTypedWordAndPreviousSuggestions(java.lang.CharSequence,com.android.inputmethod.latin.SuggestedWords)>
<com.android.internal.view.menu.MenuBuilder: android.graphics.drawable.Drawable getHeaderIcon()>
<android.view.accessibility.AccessibilityNodeInfoCache: android.view.accessibility.AccessibilityNodeInfo get(long)>
<com.android.mms.dom.NodeImpl: java.lang.Object getFeature(java.lang.String,java.lang.String)>
<android.app.IUserSwitchObserver$Stub: android.os.IBinder asBinder()>
<android.content.res.XmlBlock$Parser: int getLineNumber()>
<com.android.internal.widget.LockPatternView: int getSuggestedMinimumWidth()>
<android.view.KeyCharacterMap: char getNumber(int)>
<android.app.ContextImpl$15: java.lang.Object createStaticService()>
<com.android.email.SecurityPolicy: com.android.email.SecurityPolicy getInstance(android.content.Context)>
<com.android.phone.PhoneInterfaceManager: int getCdmaEriIconMode()>
<android.app.Instrumentation$ActivityMonitor: android.content.IntentFilter getFilter()>
<android.renderscript.Matrix2f: float get(int,int)>
<android.widget.AbsListView: int getCheckedItemPosition()>
<android.widget.AbsListView: int getListPaddingLeft()>
<android.speech.tts.TextToSpeech: java.util.Set getFeatures(java.util.Locale)>
<com.android.server.wm.WindowState: android.graphics.Rect getVisibleFrameLw()>
<com.android.launcher2.AppsCustomizePagedView: int getAssociatedLowerPageBound(int)>
<com.android.server.display.DisplayAdapter: java.lang.String getName()>
<android.mtp.MtpDevice: long getStorageId(int)>
<android.app.Instrumentation$ActivityMonitor: android.app.Activity getLastActivity()>
<com.android.internal.policy.impl.keyguard.KeyguardActivityLauncher: java.lang.String access$300()>
<android.app.ISearchManager$Stub$Proxy: android.app.SearchableInfo getSearchableInfo(android.content.ComponentName)>
<com.android.internal.widget.multiwaveview.GlowPadView: int getTargetPosition(int)>
<android.widget.RemoteViews: int getLayoutId()>
<android.view.View: android.view.TouchDelegate getTouchDelegate()>
<android.text.SpannableString: java.lang.Object[] getSpans(int,int,java.lang.Class)>
<com.android.launcher2.Folder: android.view.View getEditTextRegion()>
<android.webkit.JsPromptResult: java.lang.String getStringResult()>
<com.android.email.activity.setup.SetupData: java.lang.String getPassword()>
<android.webkit.WebViewClassic: int getViewHeightWithTitle()>
<android.renderscript.Matrix3f: float get(int,int)>
<android.provider.Settings$System: java.lang.String getString(android.content.ContentResolver,java.lang.String)>
<android.text.style.LocaleSpan: int getSpanTypeId()>
<android.preference.PreferenceManager: android.content.SharedPreferences$Editor getEditor()>
<android.preference.Preference: float getPersistedFloat(float)>
<android.os.Debug: int getGlobalClassInitTime()>
<com.android.server.pm.PackageSettingBase: java.util.HashSet getDisabledComponents(int)>
<android.graphics.drawable.NinePatchDrawable: int getMinimumHeight()>
<android.hardware.display.DisplayManagerGlobal: android.hardware.display.DisplayManagerGlobal getInstance()>
<android.content.res.AssetFileDescriptor: long getLength()>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumLength(android.content.ComponentName,int)>
<android.content.Intent: java.lang.Object getExtra(java.lang.String)>
<android.preference.PreferenceManager: android.preference.PreferenceScreen getPreferenceScreen()>
<android.os.Looper: android.os.Looper getMainLooper()>
<android.webkit.WebSettings: int getCacheMode()>
<android.filterfw.core.Filter: int getNumberOfInputs()>
<android.app.BackStackRecord: java.lang.CharSequence getBreadCrumbShortTitle()>
<android.renderscript.Matrix4f: float get(int,int)>
<android.hardware.Camera$Parameters: java.util.List getSupportedWhiteBalance()>
<com.android.server.display.DisplayAdapter: android.content.Context getContext()>
<com.android.common.widget.CompositeCursorAdapter: int getPartitionCount()>
<android.content.pm.ParceledListSlice: android.os.Parcelable populateList(java.util.List,android.os.Parcelable$Creator)>
<com.android.camera.ui.PieItem: android.graphics.Path getPath()>
<com.android.internal.widget.multiwaveview.Ease$Quart$3: float getInterpolation(float)>
<android.filterfw.core.NativeFrame: java.nio.ByteBuffer getData()>
<android.app.BackStackRecord: int getBreadCrumbShortTitleRes()>
<android.text.Annotation: int getSpanTypeId()>
<android.drm.DrmManagerClient: int getDrmObjectType(android.net.Uri,java.lang.String)>
<com.android.server.accessibility.TouchExplorer$ReceivedPointerTracker: int getActivePointers()>
<android.app.ApplicationPackageManager: java.util.List queryIntentActivities(android.content.Intent,int)>
<com.android.internal.widget.multiwaveview.Ease$Quart$2: float getInterpolation(float)>
<com.android.internal.app.ActionBarImpl$ActionModeImpl: java.lang.CharSequence getTitle()>
<com.android.internal.widget.multiwaveview.Ease$Quart$1: float getInterpolation(float)>
<com.android.server.AttributeCache: com.android.server.AttributeCache$Entry get(int,java.lang.String,int,int[])>
<android.content.pm.IPackageManager$Stub$Proxy: java.util.List getPersistentApplications(int)>
<android.app.PendingIntent: android.content.IntentSender getIntentSender()>
<com.android.email.activity.UIControllerTwoPane: long getUIAccountId()>
<com.android.exchange.EasResponse: int getLength()>
<android.widget.LinearLayout: int getLocationOffset(android.view.View)>
<android.webkit.AccessibilityInjectorFallback$AccessibilityWebContentKeyBinding: int getSecondArgument(int)>
<android.animation.Keyframe$ObjectKeyframe: java.lang.Object getValue()>
<android.view.VelocityTracker: float getYVelocity()>
<android.app.Fragment: android.app.Fragment getTargetFragment()>
<android.support.v4.view.ViewPager: int getCurrentItem()>
<com.android.inputmethod.latin.suggestions.MoreSuggestionsView: com.android.inputmethod.keyboard.KeyDetector getKeyDetector()>
<android.view.View: java.util.ArrayList getFocusables(int)>
<com.android.mms.dom.smil.SmilMediaElementImpl: org.w3c.dom.smil.TimeList getBegin()>
<android.view.Display: int getPixelFormat()>
<android.view.Window: android.content.res.TypedArray getWindowStyle()>
<com.android.i18n.phonenumbers.AsYouTypeFormatter: int getRememberedPosition()>
<android.drm.DrmEvent: int getType()>
<com.android.org.bouncycastle.asn1.DERInteger: java.math.BigInteger getPositiveValue()>
<android.widget.TextView: android.view.ActionMode$Callback getCustomSelectionActionModeCallback()>
<com.android.mms.ui.ManageSimMessages: android.database.Cursor access$102(com.android.mms.ui.ManageSimMessages,android.database.Cursor)>
<android.text.style.SpellCheckSpan: int getSpanTypeId()>
<com.android.i18n.phonenumbers.Phonemetadata$NumberFormat: java.lang.String getPattern()>
<com.android.camera.PreferenceGroup: com.android.camera.CameraPreference get(int)>
<android.widget.ProgressBar$RefreshData: android.widget.ProgressBar$RefreshData getNextPoolable()>
<com.android.videoeditor.service.MovieMediaItem: java.lang.String getFilename()>
<android.media.ExifInterface: double getAttributeDouble(java.lang.String,double)>
<com.android.videoeditor.util.MediaItemUtils: long getMinimumMediaItemDuration(com.android.videoeditor.service.MovieMediaItem)>
<android.os.Debug: int getGlobalClassInitCount()>
<com.android.mms.MmsConfig: int getHttpSocketTimeout()>
<com.android.internal.view.IInputMethodManager$Stub: android.os.IBinder asBinder()>
<android.text.Layout: float getLineWidth(int)>
<android.widget.OverScroller: float getCurrVelocity()>
<android.widget.TextView: int getAutoLinkMask()>
<android.mtp.MtpObjectInfo: long getDateCreated()>
<com.android.org.bouncycastle.asn1.x500.X500Name: com.android.org.bouncycastle.asn1.x500.RDN[] getRDNs(com.android.org.bouncycastle.asn1.ASN1ObjectIdentifier)>
<android.graphics.drawable.AnimatedRotateDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()>
<com.android.internal.view.BaseSurfaceHolder: android.graphics.Canvas lockCanvas()>
<android.widget.DatePicker: boolean getSpinnersShown()>
<android.graphics.drawable.InsetDrawable: int getIntrinsicHeight()>
<android.media.videoeditor.MediaArtistNativeHelper: int getSlideSettingsDirection(int)>
<com.android.emailcommon.TrafficFlags: int getAttachmentFlags(android.content.Context,com.android.emailcommon.provider.Account)>
<android.webkit.WebSettingsClassic$AutoFillProfile: java.lang.String getCompanyName()>
<android.media.AudioRecord: int getChannelConfiguration()>
<com.android.mms.util.ThumbnailManager: android.graphics.Bitmap access$300()>
<android.content.res.Resources: java.lang.String getString(int,java.lang.Object[])>
<com.android.internal.policy.impl.keyguard.PagedView$ScrollInterpolator: float getInterpolation(float)>
<com.android.email.MessagingController: com.android.email.MessagingController getInstance(android.content.Context,com.android.email.Controller)>
<android.mtp.MtpObjectInfo: int getProtectionStatus()>
<android.drm.DrmRights: java.lang.String getAccountId()>
<android.view.VelocityTracker$Estimator: float getYCoeff(int)>
<com.android.org.bouncycastle.asn1.ASN1TaggedObject: com.android.org.bouncycastle.asn1.ASN1Encodable getObjectParser(int,boolean)>
<android.content.ContextWrapper: java.io.File getExternalCacheDir()>
<android.text.SpannableStringBuilder: int getTextRunCursor(int,int,int,int,int,android.graphics.Paint)>
<android.view.ViewRootImpl: android.view.ViewRootImpl$RunQueue getRunQueue()>
<android.text.style.ImageSpan: java.lang.String getSource()>
<android.widget.Spinner: int getDropDownVerticalOffset()>
<android.view.WindowOrientationListener$SensorEventListenerImpl: int getProposedRotation()>
<com.android.ex.chips.BaseRecipientAdapter: int getDisplayNameId()>
<android.renderscript.Mesh: android.renderscript.Allocation getVertexAllocation(int)>
<com.android.email.mail.store.imap.ImapTempFileLiteral: java.lang.String getString()>
<com.android.server.wm.DisplayContent: int getDisplayId()>
<com.android.launcher2.CellLayout: com.android.launcher2.ShortcutAndWidgetContainer getShortcutsAndWidgets()>
<com.android.inputmethod.keyboard.internal.KeyStylesSet$EmptyKeyStyle: java.lang.String getString(android.content.res.TypedArray,int)>
<com.android.server.accessibility.ScreenMagnifier$Viewport$ViewportWindow: int getAlpha()>
<com.android.providers.settings.SettingsHelper: byte[] getLocaleData()>
<com.android.internal.util.StateMachine: java.lang.String getName()>
<android.content.pm.PackageParser: int getParseError()>
<com.android.internal.policy.impl.keyguard.PagedView: int getNextPage()>
<android.os.storage.IMountServiceListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.android.mms.util.SendingProgressTokenManager: long get(java.lang.Object)>
<android.widget.TextView: float getRightFadingEdgeStrength()>
<android.widget.FrameLayout: android.graphics.drawable.Drawable getForeground()>
<android.filterfw.core.SimpleFrameManager: android.filterfw.core.Frame retainFrame(android.filterfw.core.Frame)>
<android.text.format.DateFormat: java.text.DateFormat getDateFormatForSetting(android.content.Context,java.lang.String)>
<com.android.common.widget.CompositeCursorAdapter: android.database.Cursor getCursor(int)>
<android.app.SearchableInfo: java.lang.String getSuggestPackage()>
<com.google.android.picasastore.FIFEUtil: java.lang.String getImageUrlOptions(java.lang.String)>
<android.media.videoeditor.VideoEditorImpl: java.util.List getAllMediaItems()>
<android.widget.GridLayout$5: int getGravityOffset(android.view.View,int)>
<android.widget.RemoteViews$ViewPaddingAction: java.lang.String getActionName()>
<android.widget.NumberPicker: int getSolidColor()>
<android.graphics.Bitmap: int getGenerationId()>
<android.widget.GridLayout$3: int getGravityOffset(android.view.View,int)>
<android.widget.GridLayout$4: int getGravityOffset(android.view.View,int)>
<android.os.MemoryFile: java.io.FileDescriptor getFileDescriptor()>
<android.media.AudioTrack: int getNativeFrameCount()>
<android.app.Instrumentation: android.app.Instrumentation$ActivityResult execStartActivity(android.content.Context,android.os.IBinder,android.os.IBinder,android.app.Fragment,android.content.Intent,int,android.os.Bundle)>
<android.widget.TextView: android.text.Layout getLayout()>
<android.filterfw.core.FrameManager: android.filterfw.core.Frame duplicateFrameToTarget(android.filterfw.core.Frame,int)>
<android.graphics.drawable.StateListDrawable: int getStateCount()>
<com.android.launcher2.Hotseat: int getCellYFromOrder(int)>
<com.android.internal.policy.impl.keyguard.PagedView: int getCurrentPage()>
<android.view.animation.CycleInterpolator: float getInterpolation(float)>
<com.android.systemui.statusbar.phone.PhoneStatusBar$FastColorDrawable: int getOpacity()>
<android.text.method.MetaKeyKeyListener: int getMetaState(long)>
<android.appwidget.AppWidgetManager: android.os.Bundle getAppWidgetOptions(int)>
<com.android.videoeditor.service.MovieMediaItem: int getAppVolume()>
<com.android.email.activity.setup.AccountSettings$LoginWarningDialog: android.app.Dialog onCreateDialog(android.os.Bundle)>
<android.app.ActivityManagerProxy: long inputDispatchingTimedOut(int,boolean)>
<android.webkit.WebSettings: java.lang.String getDatabasePath()>
<android.inputmethodservice.Keyboard: int getKeyWidth()>
<android.widget.GridLayout$Bounds: int getOffset(android.widget.GridLayout,android.view.View,android.widget.GridLayout$Alignment,int,boolean)>
<com.android.server.am.UriPermissionOwner: android.os.Binder getExternalTokenLocked()>
<com.android.mms.transaction.TransactionSettings: java.lang.String getProxyAddress()>
<com.android.org.bouncycastle.asn1.DERApplicationSpecific: com.android.org.bouncycastle.asn1.ASN1Primitive getObject(int)>
<com.android.ex.chips.BaseRecipientAdapter: int getItemLayout()>
<android.view.View: android.graphics.Bitmap getDrawingCache(boolean)>
<android.os.UserManager: long getSerialNumberForUser(android.os.UserHandle)>
<com.android.mms.dom.smil.SmilRegionElementImpl: java.lang.String getBackgroundColor()>
<android.text.method.CharacterPickerDialog$OptionsAdapter: java.lang.Object getItem(int)>
<com.android.internal.os.IResultReceiver$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.android.mms.util.ThumbnailManager: android.graphics.Bitmap access$200()>
<com.android.mms.dom.smil.SmilDocumentImpl$1: org.w3c.dom.smil.ElementTime getParentElementTime()>
<android.media.videoeditor.MediaImageItem: int getGeneratedClipWidth()>
<android.filterfw.core.SerializedFrame: int[] getInts()>
<com.android.server.accessibility.TouchExplorer$ReceivedPointerTracker: int getPrimaryActivePointerId()>
<android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>
<com.android.internal.util.StateMachine: java.lang.String getWhatToString(int)>
<android.media.effect.FilterEffect: java.lang.String getName()>
<android.widget.PopupWindow: int getMaxAvailableHeight(android.view.View,int,boolean)>
<com.android.providers.downloads.DownloadProvider$SqlSelection: java.lang.String getSelection()>
<android.graphics.drawable.RotateDrawable: int getOpacity()>
<com.android.emailcommon.mail.PackedString$Builder: java.lang.String get(java.lang.String)>
<com.android.videoeditor.service.MovieMediaItem: int getWidth()>
<android.media.videoeditor.MediaItem: android.media.videoeditor.Transition getBeginTransition()>
<android.graphics.drawable.StateListDrawable: int getStateDrawableIndex(int[])>
<android.widget.RemoteViews$SetOnClickFillInIntent: java.lang.String getActionName()>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: long getMaximumTimeToLock(android.content.ComponentName,int)>
<android.security.KeyStore: long getmtime(java.lang.String)>
<android.drm.DrmInfo: java.lang.Object get(java.lang.String)>
<com.android.email.FolderProperties: java.lang.String getDisplayName(int,long,java.lang.String)>
<android.view.MotionEvent: float getHistoricalTouchMinor(int)>
<android.widget.ArrayAdapter: int getCount()>
<com.android.org.bouncycastle.asn1.BERSetParser: com.android.org.bouncycastle.asn1.ASN1Primitive getLoadedObject()>
<com.android.inputmethod.latin.makedict.FusionDictionary$CharGroup: com.android.inputmethod.latin.makedict.FusionDictionary$WeightedString getBigram(java.lang.String)>
<android.renderscript.ProgramStore: android.renderscript.ProgramStore$BlendDstFunc getBlendDstFunc()>
<android.text.DynamicLayout: int[] getBlockEndLines()>
<android.app.backup.IBackupManager$Stub: android.os.IBinder asBinder()>
<com.android.musicfx.seekbar.AbsSeekBar: int getThumbOffset()>
<android.os.storage.StorageVolume: int getDescriptionId()>
<com.android.internal.policy.impl.keyguard.KeyguardMultiUserAvatar: android.content.pm.UserInfo getUserInfo()>
<com.android.mms.data.Conversation: java.lang.String getRecipients(android.net.Uri)>
<android.app.UiModeManager: int getCurrentModeType()>
<com.android.inputmethod.keyboard.PointerTracker: com.android.inputmethod.keyboard.PointerTracker getPointerTracker(int,com.android.inputmethod.keyboard.PointerTracker$KeyEventHandler)>
<com.android.camera.CameraManager$CameraProxy: android.hardware.Camera$Parameters getParameters()>
<com.android.internal.policy.impl.keyguard.PagedView: float getMaxScrollProgress()>
<android.graphics.drawable.BitmapDrawable: android.graphics.Paint getPaint()>
<android.app.IWallpaperManager$Stub$Proxy: int getHeightHint()>
<android.filterfw.core.FrameFormat: java.lang.Class getObjectClass()>
<android.opengl.GLSurfaceView$GLThread: int getRenderMode()>
<com.android.email.mail.store.imap.ImapResponse: com.android.email.mail.store.imap.ImapString getStatusResponseTextOrEmpty()>
<android.media.audiofx.AudioEffect: byte[] concatArrays(byte[][])>
<com.android.internal.database.SortCursor: float getFloat(int)>
<android.app.ActivityThread: android.app.LoadedApk getPackageInfo(android.content.pm.ApplicationInfo,android.content.res.CompatibilityInfo,int)>
<android.content.Intent: byte getByteExtra(java.lang.String,byte)>
<android.widget.AbsListView$RecycleBin: android.view.View getTransientStateView(int)>
<android.filterfw.core.Filter: int getNumberOfOutputs()>
<android.view.ViewPropertyAnimator: long getDuration()>
<android.speech.tts.TtsEngines: java.lang.String getHighestRankedEngineName()>
<com.android.deskclock.AlarmClock$AlarmItemAdapter: int getViewTypeCount()>
<com.android.email.mail.store.imap.ImapList: com.android.email.mail.store.imap.ImapList getKeyedListOrEmpty(java.lang.String,boolean)>
<android.animation.ValueAnimator: android.animation.PropertyValuesHolder[] getValues()>
<android.app.ActivityManagerProxy: android.content.ComponentName getCallingActivity(android.os.IBinder)>
<com.android.org.bouncycastle.asn1.DERObjectIdentifier: com.android.org.bouncycastle.asn1.ASN1ObjectIdentifier getInstance(java.lang.Object)>
<com.android.internal.policy.impl.keyguard.KeyguardSelectorView$3: com.android.internal.widget.LockPatternUtils getLockPatternUtils()>
<com.android.emailcommon.internet.MimeMessage: java.io.InputStream getInputStream()>
<android.media.videoeditor.MediaVideoItem: android.graphics.Bitmap getThumbnail(int,int,long)>
<android.graphics.drawable.LayerDrawable: int getId(int)>
<com.android.launcher2.Utilities: android.graphics.Bitmap createIconBitmap(android.graphics.drawable.Drawable,android.content.Context)>
<android.app.TaskStackBuilder: int getIntentCount()>
<android.widget.ListView: int getHeaderViewsCount()>
<android.os.DropBoxManager$Entry: java.lang.String getText(int)>
<android.animation.Animator: java.util.ArrayList getListeners()>
<android.animation.FloatKeyframeSet: float getFloatValue(float)>
<com.android.email.activity.AccountSelectorAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<android.os.Environment: java.io.File getExternalStorageAppCacheDirectory(java.lang.String)>
<android.view.View: android.os.IBinder getApplicationWindowToken()>
<com.android.inputmethod.latin.ResizableIntArray: int[] getPrimitiveArray()>
<android.content.pm.ContainerEncryptionParams: javax.crypto.SecretKey getEncryptionKey()>
<com.android.server.accessibility.ScreenMagnifier$Viewport$ViewportWindow: android.graphics.Rect getBounds()>
<android.content.pm.LabeledIntent: java.lang.CharSequence getNonLocalizedLabel()>
<com.android.inputmethod.keyboard.Keyboard: com.android.inputmethod.keyboard.Key getKey(int)>
<com.android.camera.ui.PieItem: int getInnerRadius()>
<android.webkit.CookieManager: java.lang.Object clone()>
<android.media.AudioManager: int getMasterMaxVolume()>
<android.content.ContentValues: java.lang.Short getAsShort(java.lang.String)>
<android.graphics.Paint: float getTextRunAdvances(java.lang.String,int,int,int,int,int,float[],int,int)>
<com.android.camera.ComboPreferences: java.util.Map getAll()>
<android.os.Bundle: java.lang.String[] getStringArray(java.lang.String)>
<android.preference.PreferenceManager: android.content.Context getContext()>
<android.app.ContextImpl: java.io.File getDatabasePath(java.lang.String)>
<com.android.ex.chips.RecipientAlternatesAdapter: long getItemId(int)>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int)>
<com.android.internal.widget.multiwaveview.MultiWaveView: int getTargetDescriptionsResourceId()>
<android.widget.AbsSpinner: android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()>
<com.android.camera.Util: int getDisplayOrientation(int,int)>
<com.android.org.bouncycastle.jce.netscape.NetscapeCertRequest: com.android.org.bouncycastle.asn1.x509.AlgorithmIdentifier getSigningAlgorithm()>
<android.app.ActivityManagerProxy: java.util.List getRecentTasks(int,int,int)>
<android.media.videoeditor.MediaImageItem: java.lang.String getScaledImageFileName()>
<android.media.audiofx.AudioEffect: int getId()>
<android.os.Debug$MemoryInfo: java.lang.String getOtherLabel(int)>
<com.android.internal.policy.impl.ShortcutManager: android.content.Intent getIntent(android.view.KeyCharacterMap,int,int)>
<android.hardware.display.IDisplayManager$Stub$Proxy: android.view.DisplayInfo getDisplayInfo(int)>
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable getCurrent()>
<android.webkit.JniUtil: android.content.Context getContext()>
<android.hardware.usb.UsbDeviceConnection: byte[] getRawDescriptors()>
<com.android.ex.variablespeed.EngineParameters: float getWindowDuration()>
<com.android.internal.widget.LockPatternView: int getSuggestedMinimumHeight()>
<com.android.server.accessibility.TouchExplorer$ReceivedPointerTracker: int getActivePointerCount()>
<android.text.Layout: long getLineRangeForDraw(android.graphics.Canvas)>
<android.view.ViewGroup: android.graphics.Bitmap createSnapshot(android.graphics.Bitmap$Config,int,boolean)>
<android.gesture.Gesture: android.graphics.Bitmap toBitmap(int,int,int,int)>
<com.android.deskclock.TimePicker: int getMinutes()>
<android.view.View: int getTop()>
<com.android.internal.util.TypedProperties: int getStringInfo(java.lang.String)>
<com.android.org.bouncycastle.asn1.x509.AlgorithmIdentifier: com.android.org.bouncycastle.asn1.x509.AlgorithmIdentifier getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)>
<android.appwidget.AppWidgetManager: java.util.List getInstalledProviders(int)>
<com.android.org.bouncycastle.asn1.BEROctetString: java.util.Enumeration getObjects()>
<android.content.res.AssetManager: java.lang.CharSequence getPooledString(int,int)>
<android.view.MotionEvent: float getToolMajor(int)>
<com.android.email.Preferences: boolean getEnableExchangeFileLogging()>
<com.android.emailcommon.utility.Utility: java.lang.Integer getFirstRowInt(android.content.Context,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,int,java.lang.Integer)>
<android.text.Layout: int getLineEnd(int)>
<com.android.camera.ui.PieRenderer$LinearAnimation: float getValue()>
<android.text.Layout: java.lang.CharSequence getText()>
<android.animation.Keyframe: java.lang.Class getType()>
<android.view.View: java.lang.Object getTag()>
<android.app.ApplicationPackageManager: android.content.pm.PermissionGroupInfo getPermissionGroupInfo(java.lang.String,int)>
<com.android.mms.model.MediaModel: int getSeekTo()>
<android.webkit.WebViewClassic: java.lang.String getOriginalUrl()>
<android.content.ContextWrapper: android.content.Context createPackageContextAsUser(java.lang.String,int,android.os.UserHandle)>
<com.android.i18n.phonenumbers.geocoding.DefaultMapStorage: int getPrefix(int)>
<android.view.IDisplayContentChangeListener$Stub: android.os.IBinder asBinder()>
<com.android.mms.dom.ElementImpl: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>
<android.widget.FastScroller: int getWidth()>
<com.android.systemui.statusbar.tablet.TabletStatusBar: int getStatusBarHeight()>
<android.view.View: float getVerticalScrollFactor()>
<com.android.org.bouncycastle.asn1.DEREnumerated: com.android.org.bouncycastle.asn1.DEREnumerated getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)>
<com.android.internal.widget.DrawableHolder: int getHeight()>
<com.google.android.picasasync.UploadTaskEntry: com.android.gallery3d.common.Fingerprint getFingerprint()>
<com.google.android.picasasync.PicasaDatabaseHelper: java.lang.String getUserAccount(long)>
<com.google.android.apps.lightcycle.math.Matrix3x3d: double get(int,int)>
<android.support.v4.os.ParcelableCompat$CompatCreator: java.lang.Object createFromParcel(android.os.Parcel)>
<com.android.server.pm.Settings: java.lang.String getInstallerPackageNameLPr(java.lang.String)>
<com.android.videoeditor.service.MovieEffect: long getStartTime()>
<android.widget.AbsListView: int getDistance(android.graphics.Rect,android.graphics.Rect,int)>
<com.android.videoeditor.service.MovieAudioTrack: int getAudioType()>
<android.preference.PreferenceManager: int getNextRequestCode()>
<com.android.mms.model.RegionMediaModel: com.android.mms.model.RegionModel getRegion()>
<android.content.ContentValues: byte[] getAsByteArray(java.lang.String)>
<android.app.ActivityManagerProxy: boolean getPackageAskScreenCompat(java.lang.String)>
<android.media.videoeditor.MediaVideoItem: int getVideoLevel()>
<android.mtp.MtpObjectInfo: int getFormat()>
<com.android.mms.dom.smil.TimeImpl: boolean getResolved()>
<android.view.Gravity: int getAbsoluteGravity(int,int)>
<android.content.CursorLoader: java.lang.String getSortOrder()>
<android.content.ContentProviderClient: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>
<android.media.MediaRouter$UserRouteInfo: android.media.RemoteControlClient getRemoteControlClient()>
<com.android.launcher2.PagedView: int getAssociatedLowerPageBound(int)>
<com.android.ex.variablespeed.EngineParameters: int getAudioStreamType()>
<android.view.MotionEvent: float getToolMinor(int)>
<com.android.internal.widget.multiwaveview.TargetDrawable$DrawableWithAlpha: int getOpacity()>
<com.android.launcher2.Workspace$ZoomInInterpolator: float getInterpolation(float)>
<android.widget.CursorTreeAdapter: int getChildrenCount(int)>
<android.text.method.Touch: int getInitialScrollY(android.widget.TextView,android.text.Spannable)>
<android.text.method.Touch: int getInitialScrollX(android.widget.TextView,android.text.Spannable)>
<android.os.Environment: java.io.File getExternalStorageAndroidDataDir()>
<com.android.email.ResourceHelper: int getAccountColorId(long)>
<android.view.accessibility.AccessibilityEvent: int getMovementGranularity()>
<android.widget.CompoundButton: android.os.Parcelable onSaveInstanceState()>
<com.android.mms.transaction.RetrieveTransaction: int getType()>
<android.hardware.Sensor: int getType()>
<android.text.DynamicLayout: android.text.Layout$Directions getLineDirections(int)>
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ProviderInfo resolveContentProvider(java.lang.String,int,int)>
<com.android.inputmethod.latin.SuggestedWords: java.lang.String getWord(int)>
<android.os.PowerManager: int getMinimumScreenBrightnessSetting()>
<android.webkit.WebStorage$Origin: java.lang.String getOrigin()>
<com.android.org.bouncycastle.asn1.DERGeneralString: com.android.org.bouncycastle.asn1.DERGeneralString getInstance(java.lang.Object)>
<com.android.uiautomator.core.UiDevice: java.lang.String getLastTraversedText()>
<com.android.videoeditor.service.MovieAudioTrack: int getVolume()>
<com.android.internal.widget.LockPatternUtils: int getCurrentUser()>
<com.android.email.provider.ContentCache$CachedCursor: android.database.CursorWindow getWindow()>
<android.view.inputmethod.InputMethodManager: java.util.List getEnabledInputMethodList()>
<com.android.org.bouncycastle.asn1.DERExternal: int getEncoding()>
<com.android.email.activity.MessageListItemCoordinates: int getHeight(android.content.Context,int)>
<android.widget.DatePicker: boolean getCalendarViewShown()>
<android.view.animation.AnimationUtils: android.view.animation.LayoutAnimationController loadLayoutAnimation(android.content.Context,int)>
<android.content.pm.ContainerEncryptionParams: long getDataEnd()>
<com.android.mms.MmsConfig: java.lang.String getEmailGateway()>
<android.view.GLES20Canvas: int getDisplayList(int)>
<android.os.Bundle: float getFloat(java.lang.String,float)>
<android.provider.Settings$Bookmarks: java.lang.CharSequence getLabelForFolder(android.content.res.Resources,java.lang.String)>
<android.app.ActivityManagerProxy: int[] getRunningUserIds()>
<com.android.emailcommon.internet.MimeMessage: java.lang.String getDisposition()>
<android.view.IInputFilter$Stub: android.os.IBinder asBinder()>
<android.view.View: int getBottomPaddingOffset()>
<android.filterpacks.imageproc.BlendFilter: android.filterfw.core.Program getNativeProgram(android.filterfw.core.FilterContext)>
<android.content.BroadcastReceiver: android.os.Bundle getResultExtras(boolean)>
<com.android.videoeditor.TransitionType: java.lang.String getName()>
<com.android.inputmethod.latin.ExpandableDictionary$NextStaticWord: com.android.inputmethod.latin.UserHistoryForgettingCurveUtils$ForgettingCurveParams getFcParams()>
<android.app.DialogFragment: android.app.Dialog getDialog()>
<com.android.videoeditor.ProjectPickerAdapter: long getItemId(int)>
<android.filterpacks.imageproc.ToRGBAFilter: android.filterfw.core.FrameFormat getConvertedFormat(android.filterfw.core.FrameFormat)>
<com.android.org.bouncycastle.asn1.DERUTCTime: java.lang.String getTime()>
<android.app.ContextImpl: android.app.ContextImpl getImpl(android.content.Context)>
<android.app.ContextImpl: android.content.pm.ApplicationInfo getApplicationInfo()>
<com.android.mms.ui.RecipientsEditor: android.view.ContextMenu$ContextMenuInfo getContextMenuInfo()>
<android.gesture.GestureLibrary: android.gesture.Learner getLearner()>
<android.widget.CursorTreeAdapter: android.widget.FilterQueryProvider getFilterQueryProvider()>
<android.media.audiofx.AudioEffect: boolean getEnabled()>
<com.android.launcher2.PagedViewGridLayout: int getPageChildCount()>
<com.android.email.provider.EmailProvider: android.database.sqlite.SQLiteDatabase getReadableDatabase(android.content.Context)>
<android.text.Annotation: java.lang.String getKey()>
<android.content.res.StringBlock: java.lang.CharSequence get(int)>
<android.view.animation.Animation: android.view.animation.Animation clone()>
<android.view.Surface$CompatibleCanvas: int getWidth()>
<android.app.ApplicationPackageManager: int[] getPackageGids(java.lang.String)>
<android.view.animation.AnticipateInterpolator: float getInterpolation(float)>
<android.app.ActivityManager: java.util.List getRunningTasks(int,int,android.app.IThumbnailReceiver)>
<android.view.MotionEvent: long getDownTime()>
<android.view.Window: android.view.WindowManager getWindowManager()>
<android.widget.ActivityChooserModel: int getActivityCount()>
<android.mtp.MtpDevice: android.mtp.MtpObjectInfo getObjectInfo(int)>
<com.android.org.bouncycastle.asn1.ASN1Set: com.android.org.bouncycastle.asn1.ASN1Set getInstance(java.lang.Object)>
<android.text.method.DigitsKeyListener: android.text.method.DigitsKeyListener getInstance(boolean,boolean)>
<android.widget.ActivityChooserView$ActivityChooserViewAdapter: int getMaxActivityCount()>
<android.hardware.SensorManager: void getQuaternionFromVector(float[],float[])>
<com.android.email.mail.store.imap.ImapTempFileLiteral: java.io.InputStream getAsStream()>
<com.android.mms.dom.ElementImpl: org.w3c.dom.NodeList getElementsByTagNameNS(java.lang.String,java.lang.String)>
<com.android.camera.FocusOverlayManager: java.util.List getFocusAreas()>
<android.media.AudioService$SetModeDeathHandler: int getPid()>
<android.media.AudioTrack: int getSampleRate()>
<com.android.deskclock.widget.multiwaveview.GlowPadView: int getTargetDescriptionsResourceId()>
<com.android.mms.ui.Presenter: com.android.mms.ui.ViewInterface getView()>
<android.net.sip.SimpleSessionDescription$Media: java.lang.String[] getBandwidthTypes()>
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getParent()>
<com.android.internal.util.FastXmlSerializer: java.lang.Object getProperty(java.lang.String)>
<android.preference.DialogPreference: android.graphics.drawable.Drawable getDialogIcon()>
<com.android.server.accessibility.TouchExplorer$InjectedPointerTracker: android.view.MotionEvent getLastInjectedHoverEventForClick()>
<com.android.phone.PhoneGlobals: android.content.Intent createPhoneEndIntentUsingCallOrigin()>
<android.widget.TextView: int getSelectionEnd()>
<android.view.animation.BounceInterpolator: float getInterpolation(float)>
<android.widget.ArrayAdapter: android.content.Context getContext()>
<android.view.animation.LayoutAnimationController: long getDelayForView(android.view.View)>
<android.animation.PropertyValuesHolder: java.lang.String getMethodName(java.lang.String,java.lang.String)>
<com.android.email.activity.MessageOrderManager: long getCurrentMessageId()>
<android.graphics.drawable.GradientDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()>
<android.view.WindowOrientationListener: int getProposedRotation()>
<android.view.View: int getPaddingLeft()>
<com.android.musicfx.ControlPanelEffect: int getParameterInt(android.content.Context,java.lang.String,int,java.lang.String)>
<android.media.DecoderCapabilities: java.util.List getVideoDecoders()>
<com.android.email.provider.EmailProvider: android.database.Cursor notificationQuery(android.net.Uri)>
<android.filterfw.format.ImageFormat: android.filterfw.core.MutableFrameFormat create(int,int)>
<android.filterfw.core.Filter: android.filterfw.core.InputPort getInputPort(java.lang.String)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumUpperCase(android.content.ComponentName,int)>
<android.media.AudioRecord: int getAudioFormat()>
<android.media.DecoderCapabilities: java.util.List getAudioDecoders()>
<com.android.launcher2.DragView: android.graphics.Rect getDragRegion()>
<android.view.View: int getRawLayoutDirection()>
<com.android.launcher2.BubbleTextView: android.graphics.Bitmap getPressedOrFocusedBackground()>
<android.renderscript.Mesh$Builder: int getCurrentVertexTypeIndex()>
<android.webkit.CacheManager: java.io.File access$000()>
<android.webkit.AccessibilityInjectorFallback$AccessibilityWebContentKeyBinding: int getActionCode(int)>
<android.preference.Preference: long getId()>
<android.widget.EditText: android.text.method.MovementMethod getDefaultMovementMethod()>
<android.view.ScaleGestureDetector: float getCurrentSpanY()>
<android.view.ScaleGestureDetector: float getCurrentSpanX()>
<com.android.mms.dom.NodeImpl: org.w3c.dom.Node getPreviousSibling()>
<com.android.server.accessibility.TouchExplorer$InjectedPointerTracker: long getLastInjectedDownEventTime()>
<com.android.internal.app.ActionBarImpl: int getNavigationMode()>
<android.media.videoeditor.Transition: android.media.videoeditor.MediaItem getBeforeMediaItem()>
<com.android.org.bouncycastle.asn1.ASN1Set: java.util.Enumeration getObjects()>
<com.android.videoeditor.service.VideoEditorProject: java.lang.String getTheme()>
<android.widget.TextView: int getMinWidth()>
<com.android.inputmethod.latin.Dictionary: int getFrequency(java.lang.CharSequence)>
<com.android.org.bouncycastle.asn1.BEROctetString: byte[] getOctets()>
<android.view.IWindowSession$Stub: android.os.IBinder asBinder()>
<android.appwidget.AppWidgetManager: android.appwidget.AppWidgetManager getInstance(android.content.Context)>
<com.android.uiautomator.core.UiDevice: java.lang.String getCurrentActivityName()>
<com.android.ex.chips.RecipientChip: java.lang.CharSequence getValue()>
<com.android.videoeditor.service.MovieTransition: int getSlidingDirection()>
<android.content.Intent: double[] getDoubleArrayExtra(java.lang.String)>
<android.hardware.input.InputManager: android.hardware.input.KeyboardLayout getKeyboardLayout(java.lang.String)>
<android.app.ContextImpl: android.os.IBinder getActivityToken()>
<android.widget.ActivityChooserView$ActivityChooserViewAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<android.content.Intent: android.os.Bundle getBundleExtra(java.lang.String)>
<android.os.Debug: int getGlobalExternalAllocCount()>
<android.widget.TextView: int getSelectionStart()>
<android.accounts.IAccountManager$Stub: android.os.IBinder asBinder()>
<android.app.SharedPreferencesImpl: java.util.Map getAll()>
<com.android.inputmethod.keyboard.PointerTracker: int getLastY()>
<com.android.inputmethod.keyboard.PointerTracker: int getLastX()>
<android.renderscript.Program: int getConstantCount()>
<android.content.ClipData$Item: java.lang.CharSequence getText()>
<android.app.ActivityGroup: android.app.LocalActivityManager getLocalActivityManager()>
<android.hardware.display.WifiDisplay: java.lang.String getDeviceName()>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: android.graphics.Rect getConstantPadding()>
<com.android.inputmethod.latin.Suggest: com.android.inputmethod.latin.SuggestedWords getSuggestedWords(com.android.inputmethod.latin.WordComposer,java.lang.CharSequence,com.android.inputmethod.keyboard.ProximityInfo,boolean,int)>
<com.android.videoeditor.widgets.AudioTrackLinearLayout: android.app.Dialog onCreateDialog(int,android.os.Bundle)>
<android.media.audiofx.Equalizer: short[] getBandLevelRange()>
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>
<android.widget.GridView: int getVerticalSpacing()>
<android.app.LocalActivityManager: java.lang.String getCurrentId()>
<com.google.android.picasasync.UploadTaskEntry: long getBytesTotal()>
<com.android.launcher2.DragController: long getLastGestureUpTime()>
<com.android.inputmethod.latin.SuggestedWords: com.android.inputmethod.latin.SuggestedWords$SuggestedWordInfo getInfo(int)>
<com.android.mms.transaction.TransactionBundle: int getTransactionType()>
<android.preference.PreferenceManager: android.preference.PreferenceManager$OnPreferenceTreeClickListener getOnPreferenceTreeClickListener()>
<android.hardware.display.WifiDisplayStatus: android.hardware.display.WifiDisplay[] getAvailableDisplays()>
<android.text.DynamicLayout: int getParagraphDirection(int)>
<android.util.AtomicFile: byte[] readFully()>
<com.android.mms.model.LayoutModel: int getLayoutHeight()>
<android.graphics.drawable.AnimatedRotateDrawable: int getChangingConfigurations()>
<com.android.internal.policy.impl.keyguard.KeyguardSecurityModel: com.android.internal.policy.impl.keyguard.KeyguardSecurityModel$SecurityMode getAlternateFor(com.android.internal.policy.impl.keyguard.KeyguardSecurityModel$SecurityMode)>
<com.android.launcher2.LauncherApplication: com.android.launcher2.LauncherProvider getLauncherProvider()>
<com.android.mms.model.RegionModel: int getHeight()>
<android.media.audiofx.Virtualizer: short getRoundedStrength()>
<com.android.camera.IconListPreference: int[] getLargeIconIds()>
<com.android.org.bouncycastle.asn1.ASN1TaggedObject: java.lang.String toString()>
<android.view.inputmethod.BaseInputConnection: int getCursorCapsMode(int)>
<android.view.HardwareLayer: int getHeight()>
<com.android.camera.ui.PieItem: java.util.List getItems()>
<android.content.Intent: java.util.ArrayList getIntegerArrayListExtra(java.lang.String)>
<com.android.internal.app.ActionBarImpl: android.app.ActionBar$Tab getTabAt(int)>
<android.webkit.HTML5VideoFullScreen: int getBufferPercentage()>
<com.android.exchange.adapter.ItemOperationsParser: int getStatusCode()>
<com.android.org.bouncycastle.asn1.ASN1Sequence: java.util.Enumeration getObjects()>
<com.android.internal.widget.multiwaveview.GlowPadView: int getTargetResourceId()>
<android.support.v4.app.TaskStackBuilderHoneycomb: android.app.PendingIntent getActivitiesPendingIntent(android.content.Context,int,android.content.Intent[],int)>
<com.android.org.bouncycastle.asn1.x509.AlgorithmIdentifier: com.android.org.bouncycastle.asn1.x509.AlgorithmIdentifier getInstance(java.lang.Object)>
<com.android.inputmethod.latin.ExpandableDictionary: java.util.ArrayList getSuggestions(com.android.inputmethod.latin.WordComposer,java.lang.CharSequence,com.android.inputmethod.keyboard.ProximityInfo)>
<android.view.View: android.view.View getRootView()>
<android.app.Instrumentation$ActivityMonitor: int getHits()>
<android.preference.GenericInflater: android.preference.GenericInflater$Factory getFactory()>
<com.android.internal.policy.impl.keyguard.SlidingChallengeLayout: int getBouncerAnimationDuration()>
<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createUser(java.lang.String,int)>
<com.android.mms.dom.DocumentImpl: org.w3c.dom.DOMImplementation getImplementation()>
<com.android.email.FixedLengthInputStream: int getLength()>
<android.webkit.MimeTypeMap: java.lang.String getExtensionFromMimeType(java.lang.String)>
<android.preference.PreferenceFragment: android.preference.PreferenceManager getPreferenceManager()>
<com.android.email.FolderProperties: java.lang.String getDisplayName(android.database.Cursor)>
<android.view.accessibility.AccessibilityRecord: int getMaxScrollX()>
<android.view.accessibility.AccessibilityRecord: int getMaxScrollY()>
<android.webkit.Plugin: java.lang.String getPath()>
<android.filterfw.core.VertexFrame: int[] getInts()>
<android.text.method.WordIterator: int getEnd(int)>
<android.widget.RemoteViews$SetEmptyView: java.lang.String getActionName()>
<com.android.phone.CallNotifier: boolean getVoicePrivacyState()>
<com.android.internal.util.TypedProperties: int getInt(java.lang.String,int)>
<android.app.ActivityManagerProxy: android.app.ActivityManager$TaskThumbnails getTaskThumbnails(int)>
<android.content.ContentProviderNative: android.os.IBinder asBinder()>
<com.android.mms.MmsConfig: java.lang.String getUaProfUrl()>
<android.text.method.PasswordTransformationMethod: java.lang.CharSequence getTransformation(java.lang.CharSequence,android.view.View)>
<com.android.camera.IconListPreference: int getSingleIcon()>
<android.app.admin.DevicePolicyManager: int getPasswordMinimumNonLetter(android.content.ComponentName,int)>
<com.android.server.wm.WindowState: int getDisplayId()>
<android.mtp.MtpObjectInfo: int getAssociationType()>
<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>
<android.speech.tts.TextToSpeech: java.lang.String getCurrentEngine()>
<android.hardware.display.WifiDisplay: java.lang.String getDeviceAddress()>
<com.android.org.bouncycastle.asn1.ASN1ParsingException: java.lang.Throwable getCause()>
<android.webkit.WebViewDatabaseClassic: android.webkit.WebViewDatabaseClassic getInstance(android.content.Context)>
<android.media.AudioTrack: int getState()>
<com.android.mms.data.WorkingMessage: java.lang.String getWorkingRecipients()>
<com.android.phone.PhoneGlobals: android.bluetooth.IBluetoothHeadsetPhone getBluetoothPhoneService()>
<android.webkit.CallbackProxy: android.webkit.WebBackForwardListClassic getBackForwardList()>
<android.media.MediaScanner$WplHandler: org.xml.sax.ContentHandler getContentHandler()>
<com.android.providers.downloads.DownloadHandler: long getCurrentSpeed(long)>
<com.android.server.wm.WindowState: long getInputDispatchingTimeoutNanos()>
<com.android.deskclock.widget.multiwaveview.Ease$Sine$3: float getInterpolation(float)>
<android.media.TimedText: java.lang.String getText()>
<com.android.email.activity.UIControllerOnePane$ActionBarControllerCallback: int getTitleMode()>
<com.android.deskclock.widget.multiwaveview.Ease$Sine$2: float getInterpolation(float)>
<com.android.deskclock.widget.multiwaveview.Ease$Sine$1: float getInterpolation(float)>
<com.android.launcher2.Launcher: com.android.launcher2.DragLayer getDragLayer()>
<android.mtp.MtpObjectInfo: java.lang.String getKeywords()>
<android.media.videoeditor.OverlayFrame: android.graphics.Bitmap getBitmap()>
<android.content.SyncAdapterType: java.lang.String getSettingsActivity()>
<com.android.email.provider.ContentCache$CachedCursor: int getPosition()>
<com.android.inputmethod.latin.suggestions.MoreSuggestionsView$2: com.android.inputmethod.keyboard.PointerTracker$TimerProxy getTimerProxy()>
<com.android.systemui.statusbar.phone.PhoneStatusBar: com.android.systemui.statusbar.phone.PhoneStatusBarView makeStatusBarView()>
<android.content.pm.ContainerEncryptionParams: java.lang.String getEncryptionAlgorithm()>
<com.android.inputmethod.keyboard.KeyboardView: float getLabelWidth(java.lang.String,android.graphics.Paint)>
<android.os.ISchedulingPolicyService$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.widget.TextView: int getCompoundPaddingEnd()>
<android.hardware.usb.IUsbManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.android.email.mail.store.ImapFolder: int getMessageCount()>
<android.graphics.Bitmap: int getScaledWidth(android.util.DisplayMetrics)>
<android.view.GLES20Canvas: int getSaveCount()>
<android.view.InputDevice: android.os.Vibrator getVibrator()>
<com.android.email.activity.setup.SetupData: com.android.emailcommon.provider.Policy getPolicy()>
<com.android.email.ResourceHelper: android.graphics.Paint getAccountColorPaint(long)>
<android.view.MotionEvent: float getPressure()>
<com.android.ex.chips.RecipientEditTextView: com.android.ex.chips.RecipientChip[] getSortedRecipients()>
<com.android.inputmethod.latin.SettingsActivity: android.content.Intent getIntent()>
<com.android.launcher2.LauncherApplication: java.lang.String getSharedPreferencesKey()>
<com.android.mms.model.SlideModel: com.android.mms.model.ImageModel getImage()>
<android.view.KeyEvent: int getUnicodeChar(int)>
<android.os.storage.IMountService$Stub: android.os.IBinder asBinder()>
<android.hardware.display.WifiDisplayStatus: int getActiveDisplayState()>
<android.app.ContextImpl: android.os.Looper getMainLooper()>
<android.view.ContextThemeWrapper: android.content.res.Resources getResources()>
<com.android.launcher2.WallpaperChooserDialogFragment$ImageAdapter: java.lang.Object getItem(int)>
<android.app.ActivityOptions: int getStartHeight()>
<com.android.org.bouncycastle.asn1.DERUTCTime: com.android.org.bouncycastle.asn1.ASN1UTCTime getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)>
<android.webkit.CacheManager$CacheResult: java.lang.String getLocalPath()>
<android.app.LoadedApk: android.content.IIntentReceiver getReceiverDispatcher(android.content.BroadcastReceiver,android.content.Context,android.os.Handler,android.app.Instrumentation,boolean)>
<android.filterpacks.imageproc.ColorTemperatureFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)>
<android.view.inputmethod.InputMethodInfo: java.lang.String getSettingsActivity()>
<android.view.accessibility.AccessibilityRecord: int getWindowId()>
<android.content.ContentValues: java.lang.Boolean getAsBoolean(java.lang.String)>
<android.view.KeyCharacterMap: int getKeyboardType()>
<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getActivityLogo(android.content.ComponentName)>
<android.provider.MediaStore$Images$Media: android.database.Cursor query(android.content.ContentResolver,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String)>
<com.android.internal.util.TypedProperties: double getDouble(java.lang.String,double)>
<android.content.res.TypedArray: int getIndex(int)>
<android.widget.ActivityChooserView$ActivityChooserViewAdapter: int getHistorySize()>
<android.preference.ListPreference: java.lang.CharSequence[] getEntries()>
<android.view.LayoutInflater: android.view.LayoutInflater$Factory2 getFactory2()>
<android.widget.ListView$ArrowScrollFocusResult: int getSelectedPosition()>
<com.android.inputmethod.latin.Utils: java.lang.String getDebugInfo(com.android.inputmethod.latin.SuggestedWords,int)>
<android.view.Window: int getForcedWindowFlags()>
<android.filterpacks.imageproc.AutoFixFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)>
<android.support.v4.view.MotionEventCompat: int getPointerCount(android.view.MotionEvent)>
<android.content.res.AssetFileDescriptor: long getStartOffset()>
<android.gesture.GestureStore: int getOrientationStyle()>
<com.google.android.picasasync.SyncTask: java.lang.String toString()>
<com.android.videoeditor.OverlaysAdapter: int getCount()>
<android.webkit.WebSettings: boolean getAllowContentAccess()>
<android.content.Intent: android.os.IBinder getIBinderExtra(java.lang.String)>
<com.android.internal.view.menu.MenuBuilder: android.view.SubMenu addSubMenu(int,int,int,java.lang.CharSequence)>
<com.android.internal.view.menu.MenuItemImpl: int getOrder()>
<android.text.style.ImageSpan: android.graphics.drawable.Drawable getDrawable()>
<android.media.MiniThumbFile: byte[] getMiniThumbFromFile(long,byte[])>
<android.view.accessibility.IAccessibilityManager$Stub: android.os.IBinder asBinder()>
<com.android.org.bouncycastle.util.io.pem.PemWriter: int getOutputSize(com.android.org.bouncycastle.util.io.pem.PemObject)>
<android.content.Intent: java.lang.String getAction()>
<android.os.Message: java.lang.Runnable getCallback()>
<com.google.android.picasasync.PicasaSyncHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>
<com.android.launcher2.CellLayout$ViewCluster: int[] getRightEdge()>
<android.opengl.GLSurfaceView: int getRenderMode()>
<com.android.org.bouncycastle.asn1.DERBoolean: com.android.org.bouncycastle.asn1.DERBoolean getInstance(byte[])>
<android.widget.CompoundButton: int getHorizontalOffsetForDrawables()>
<android.graphics.drawable.DrawableContainer: int getMinimumWidth()>
<com.android.mms.ui.RecipientsEditor: java.util.List getNumbers()>
<android.webkit.CacheManager: android.webkit.CacheManager$CacheResult getCacheFile(java.lang.String,long,java.util.Map)>
<com.android.server.accessibility.TouchExplorer$ReceivedPointerTracker: int getReceivedPointerDownCount()>
<android.view.MotionEvent: float getHistoricalToolMinor(int,int)>
<com.android.camera.CameraActivity: long getShutterLag()>
<com.android.ex.chips.BaseRecipientAdapter: java.util.List access$400(com.android.ex.chips.BaseRecipientAdapter,boolean,java.util.LinkedHashMap,java.util.List,java.util.Set)>
<android.os.IRemoteCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.media.MediaPlayer: java.lang.String getStringParameter(int)>
<com.android.videoeditor.service.VideoEditorProject: com.android.videoeditor.service.MovieMediaItem getMediaItem(java.lang.String)>
<android.widget.ExpandableListConnector: int getItemViewType(int)>
<android.speech.tts.ITextToSpeechCallback$Stub: android.os.IBinder asBinder()>
<android.app.FragmentManagerImpl: java.util.ArrayList retainNonConfig()>
<android.view.inputmethod.InputMethodSubtype: java.lang.String getExtraValueOf(java.lang.String)>
<android.widget.Switch: java.lang.CharSequence getTextOn()>
<com.android.launcher2.PagedViewCellLayout: int getWidthBeforeFirstLayout()>
<android.webkit.WebIconDatabase: android.webkit.WebIconDatabase getInstance()>
<android.graphics.Canvas: android.graphics.Rect getClipBounds()>
<android.view.MotionEvent: float getRawY()>
<android.view.MotionEvent: float getRawX()>
<com.android.inputmethod.latin.suggestions.MoreSuggestions$MoreSuggestionsParam: int getX(int)>
<com.android.inputmethod.latin.suggestions.MoreSuggestions$MoreSuggestionsParam: int getY(int)>
<android.app.DownloadManager: java.lang.String[] getWhereArgsForIds(long[])>
<android.app.ActivityManager: int getFrontActivityScreenCompatMode()>
<android.app.BackStackRecord: java.lang.CharSequence getBreadCrumbTitle()>
<com.android.phone.SipCallOptionHandler: android.app.Dialog onCreateDialog(int)>
<com.android.mms.dom.smil.SmilMediaElementImpl$1: org.w3c.dom.smil.ElementTime getParentElementTime()>
<com.android.systemui.screenshot.GlobalScreenshot$10: float getInterpolation(float)>
<com.android.mms.ui.MessageUtils: java.lang.String getMessageDetails(android.content.Context,android.database.Cursor,int)>
<android.view.ViewGroup: android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)>
<android.app.Dialog: android.view.Window getWindow()>
<android.media.MediaRouter$RouteInfo: int getVolumeMax()>
<android.media.videoeditor.MediaArtistNativeHelper: int getVideoCodecType(int)>
<com.android.videoeditor.service.VideoEditorProject$Download: java.lang.String getMediaUri()>
<com.android.org.bouncycastle.asn1.DERIA5String: byte[] getOctets()>
<android.filterpacks.base.FrameBranch: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)>
<android.view.IOnKeyguardExitResult$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.filterfw.core.VertexFrame: java.nio.ByteBuffer getData()>
<android.widget.FastScroller: int getState()>
<android.hardware.input.IInputManager$Stub$Proxy: android.hardware.input.KeyboardLayout[] getKeyboardLayouts()>
<com.android.exchange.adapter.Parser: byte[] getValueBytes()>
<com.android.launcher2.FolderIcon: com.android.launcher2.FolderInfo getFolderInfo()>
<android.app.admin.DevicePolicyManager: java.util.List getActiveAdmins()>
<android.text.style.EasyEditSpan: int getSpanTypeId()>
<com.android.internal.policy.impl.keyguard.KeyguardPasswordView: int getPasswordTextViewId()>
<android.webkit.WebSettings: boolean getBuiltInZoomControls()>
<com.android.emailcommon.utility.AttachmentUtilities: java.io.File getAttachmentFilename(android.content.Context,long,long)>
<android.text.format.Time: int getActualMaximum(int)>
<android.media.MediaRouter$RouteInfo: java.lang.CharSequence getStatus()>
<com.android.email.mail.store.imap.ImapList: com.android.email.mail.store.imap.ImapList getListOrEmpty(int)>
<android.webkit.CallbackProxy$UploadFileMessageData: java.lang.String getCapture()>
<android.app.ActivityManagerNative: android.os.IBinder asBinder()>
<android.content.res.Resources: android.graphics.drawable.Drawable loadDrawable(android.util.TypedValue,int)>
<android.media.videoeditor.MediaVideoItem: int getFileType()>
<com.android.providers.downloads.DrmConvertSession: byte[] convert(byte[],int)>
<android.view.MotionEvent: float getHistoricalTouchMajor(int,int)>
<android.widget.Spinner: int getDropDownHorizontalOffset()>
<android.os.storage.IMountService$Stub$Proxy: java.lang.String[] getSecureContainerList()>
<android.content.Intent: short[] getShortArrayExtra(java.lang.String)>
<com.android.server.AppWidgetService: android.widget.RemoteViews getAppWidgetViews(int)>
<com.android.inputmethod.keyboard.KeyboardView: com.android.inputmethod.keyboard.Keyboard getKeyboard()>
<com.android.email.activity.UIControllerBase: long getMessageId()>
<android.emoji.EmojiFactory: int getAndroidPuaFromVendorSpecificPua(int)>
<com.android.uiautomator.core.UiDevice: java.lang.String getProductName()>
<android.webkit.CacheManager$CacheResult: java.io.OutputStream getOutputStream()>
<android.os.Parcel: java.lang.CharSequence readCharSequence()>
<com.android.server.AppWidgetService: android.os.Bundle getAppWidgetOptions(int)>
<com.android.videoeditor.BaseAdapterWithImages: java.util.List access$100(com.android.videoeditor.BaseAdapterWithImages)>
<android.media.ThumbnailUtils: android.graphics.Bitmap createVideoThumbnail(java.lang.String,int)>
<com.android.org.bouncycastle.asn1.BERSequenceParser: com.android.org.bouncycastle.asn1.ASN1Primitive getLoadedObject()>
<android.media.videoeditor.EffectColor: int getType()>
<com.android.email.Preferences: boolean getForceOneMinuteRefresh()>
<android.view.accessibility.IAccessibilityInteractionConnectionCallback$Stub: android.os.IBinder asBinder()>
<com.android.email.mail.store.imap.ImapMemoryLiteral: java.lang.String getString()>
<com.android.internal.policy.impl.keyguard.KeyguardSecurityViewFlipper: com.android.internal.policy.impl.keyguard.KeyguardSecurityCallback getCallback()>
<android.webkit.L10nUtils: java.lang.String getLocalisedString(int)>
<android.view.ViewDebug: long getViewRootImplCount()>
<android.webkit.WebSettings: java.lang.String getFixedFontFamily()>
<android.webkit.Plugin: java.lang.String getFileName()>
<com.android.server.connectivity.Tethering: int getLastTetherError(java.lang.String)>
<android.widget.GridLayout$Spec: int getFlexibility()>
<android.widget.HorizontalScrollView: float getLeftFadingEdgeStrength()>
<com.android.mms.dom.AttrImpl: java.lang.String getNodeName()>
<android.hardware.input.InputManager: int[] getInputDeviceIds()>
<android.graphics.Paint: int getTextWidths(char[],int,int,float[])>
<android.mtp.MtpDevice: int[] getStorageIds()>
<com.android.systemui.statusbar.phone.PhoneStatusBar: int getStatusBarHeight()>
<android.view.IWindowManager$Stub$Proxy: int getPreferredOptionsPanelGravity()>
<com.android.inputmethod.keyboard.internal.KeyboardRow: float getKeyWidth(android.content.res.TypedArray,float)>
<android.os.Environment$UserEnvironment: java.io.File getExternalStorageAppDataDirectory(java.lang.String)>
<com.android.internal.view.menu.BaseMenuPresenter: int getId()>
<com.android.launcher2.Utilities: android.graphics.Bitmap resampleIconBitmap(android.graphics.Bitmap,android.content.Context)>
<com.android.email.mail.store.ImapFolder: com.android.emailcommon.mail.Flag[] getPermanentFlags()>
<android.app.ActivityThread: android.content.res.Resources getTopLevelResources(java.lang.String,int,android.content.res.Configuration,android.app.LoadedApk)>
<android.hardware.Sensor: java.lang.String getVendor()>
<com.android.email.activity.MessagesAdapter$SearchResultsCursor: int getResultsCount()>
<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getActivityIcon(android.content.Intent)>
<com.android.emailcommon.utility.EmailAsyncTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])>
<android.media.IAudioFocusDispatcher$Stub: android.os.IBinder asBinder()>
<com.google.android.picasasync.PicasaDatabaseHelper: com.google.android.picasasync.AlbumEntry getAlbumEntry(java.lang.String,java.lang.String)>
<android.graphics.drawable.RotateDrawable: int getIntrinsicWidth()>
<com.android.deskclock.Alarms: com.android.deskclock.Alarm getAlarm(android.content.ContentResolver,int)>
<android.graphics.Typeface: int getStyle()>
<android.mtp.MtpDevice: int getDeviceId()>
<android.drm.DrmUtils: byte[] readBytes(java.io.File)>
<android.view.animation.AccelerateDecelerateInterpolator: float getInterpolation(float)>
<android.view.inputmethod.InputMethodSubtype: java.lang.CharSequence getDisplayName(android.content.Context,java.lang.String,android.content.pm.ApplicationInfo)>
<android.view.InputDevice: int getKeyboardType()>
<com.android.emailcommon.utility.Utility: com.android.emailcommon.provider.Account findExistingAccount(android.content.Context,long,java.lang.String,java.lang.String)>
<com.android.org.bouncycastle.asn1.DERGeneralString: java.lang.String getString()>
<android.drm.DrmUtils: android.drm.DrmUtils$ExtendedMetadataParser getExtendedMetadataParser(byte[])>
<android.widget.AdapterViewAnimator: android.animation.ObjectAnimator getOutAnimation()>
<android.view.View: android.graphics.Bitmap getDrawingCache()>
<android.provider.MediaStore$Images$Thumbnails: android.database.Cursor query(android.content.ContentResolver,android.net.Uri,java.lang.String[])>
<android.os.Bundle: java.io.Serializable getSerializable(java.lang.String)>
<com.android.mms.dom.DocumentImpl: boolean getXmlStandalone()>
<com.android.mms.ui.SlideshowActivity$SmilPlayerController: int getDuration()>
<com.android.internal.view.menu.MenuPopupHelper$MenuAdapter: int getCount()>
<com.android.camera.SoundClips: com.android.camera.SoundClips$Player getPlayer(android.content.Context)>
<android.view.HardwareRenderer: android.view.HardwareRenderer createGlRenderer(int,boolean)>
<com.android.org.bouncycastle.asn1.ASN1Sequence: com.android.org.bouncycastle.asn1.ASN1Encodable[] toArray()>
<android.webkit.DateSorter: int getIndex(long)>
<com.android.server.AppWidgetServiceImpl: java.util.List getInstalledProviders(int)>
<com.android.inputmethod.latin.SubtypeSwitcher: android.view.inputmethod.InputMethodSubtype getCurrentSubtype()>
<com.android.server.am.CompatModePackages: java.util.HashMap getPackages()>
<android.util.TimeUtils: java.util.ArrayList getTimeZonesWithUniqueOffsets(java.lang.String)>
<android.content.pm.IPackageMoveObserver$Stub: android.os.IBinder asBinder()>
<android.webkit.WebViewClassic$FocusTransitionDrawable: int getOpacity()>
<android.app.Activity: android.view.View onCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet)>
<android.view.IApplicationToken$Stub$Proxy: long getKeyDispatchingTimeout()>
<android.provider.Settings$Global: float getFloat(android.content.ContentResolver,java.lang.String)>
<com.android.phone.BluetoothPhoneService$3: java.lang.String getSubscriberNumber()>
<com.android.inputmethod.latin.SuggestedWords: com.android.inputmethod.latin.SuggestedWords$SuggestedWordInfo getWordInfo(int)>
<com.android.camera.Util: android.hardware.Camera$Size getOptimalPreviewSize(android.app.Activity,java.util.List,double)>
<android.text.method.ReplacementTransformationMethod: java.lang.CharSequence getTransformation(java.lang.CharSequence,android.view.View)>
<android.util.TypedValue: float getFraction(float,float)>
<com.android.mms.dom.smil.SmilRegionMediaElementImpl: org.w3c.dom.smil.SMILRegionElement getRegion()>
<com.android.org.bouncycastle.asn1.DERIA5String: java.lang.String getString()>
<android.text.Layout: float getLineMax(int)>
<android.content.pm.LabeledIntent: int getIconResource()>
<android.media.audiofx.Equalizer: int[] getBandFreqRange(short)>
<android.support.v4.view.MotionEventCompat$BaseMotionEventVersionImpl: float getX(android.view.MotionEvent,int)>
<android.support.v4.view.MotionEventCompat$BaseMotionEventVersionImpl: float getY(android.view.MotionEvent,int)>
<com.android.deskclock.worldclock.WorldClockAdapter: int getCount()>
<android.app.SearchableInfo: java.lang.String getSuggestSelection()>
<android.hardware.SensorManager: float getInclination(float[])>
<android.view.View: int[] getDrawableState()>
<android.widget.GridView: android.widget.Adapter getAdapter()>
<android.support.v4.view.ViewPager$2: float getInterpolation(float)>
<com.android.internal.view.BaseSurfaceHolder: int getRequestedType()>
<com.android.internal.app.ActionBarImpl$ActionModeImpl: android.view.MenuInflater getMenuInflater()>
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor: java.lang.CharSequence getTelephonyPlmn()>
<com.android.internal.widget.ActionBarView: int getDisplayOptions()>
<android.graphics.drawable.ColorDrawable$ColorState: int getChangingConfigurations()>
<com.android.videoeditor.service.MovieMediaItem: com.android.videoeditor.service.MovieTransition getBeginTransition()>
<android.widget.SearchView: int getMaxWidth()>
<com.android.email.FolderProperties: java.lang.String getDisplayName(com.android.emailcommon.provider.Mailbox)>
<android.hardware.Camera$Parameters: int getMaxZoom()>
<com.android.systemui.statusbar.phone.PhoneStatusBar: int getStatusBarGravity()>
<android.widget.AdapterView: android.view.View getEmptyView()>
<android.text.method.SingleLineTransformationMethod: char[] getReplacement()>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getNoInternationalDialling()>
<android.webkit.WebSettingsClassic: boolean getJavaScriptCanOpenWindowsAutomatically()>
<com.android.videoeditor.widgets.ThumbnailCache: android.graphics.Bitmap get(com.android.videoeditor.widgets.ThumbnailKey)>
<com.android.server.display.PersistentDataStore: android.hardware.display.WifiDisplay[] getRememberedWifiDisplays()>
<android.app.ActivityManager: java.util.List getRunningExternalApplications()>
<android.filterpacks.imageproc.DuotoneFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)>
<android.os.Parcel: java.util.ArrayList createTypedArrayList(android.os.Parcelable$Creator)>
<com.android.videoeditor.service.MovieTransition: java.lang.String getAlphaMaskFilename()>
<android.drm.DrmInfo: byte[] getData()>
<android.filterfw.core.AsyncRunner: android.filterfw.core.FilterGraph getGraph()>
<com.android.videoeditor.service.MovieAudioTrack: long getAppStartTime()>
<android.widget.AbsListView: int getFooterViewsCount()>
<android.provider.Settings$Secure: float getFloatForUser(android.content.ContentResolver,java.lang.String,int)>
<com.android.deskclock.Alarm$DaysOfWeek: int getNextAlarm(java.util.Calendar)>
<android.view.IApplicationToken$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.text.style.TabStopSpan$Standard: int getTabStop()>
<android.app.ApplicationPackageManager: android.content.pm.FeatureInfo[] getSystemAvailableFeatures()>
<com.android.ex.chips.BaseRecipientAdapter: java.util.List access$600(com.android.ex.chips.BaseRecipientAdapter,android.database.Cursor)>
<android.app.ActivityManagerProxy: int getUidForIntentSender(android.content.IIntentSender)>
<com.android.launcher2.IconCache: android.graphics.Bitmap getIcon(android.content.Intent)>
<android.media.MediaPlayer: android.media.MediaPlayer$TrackInfo[] getTrackInfo()>
<android.os.IMessenger$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.android.videoeditor.service.MovieOverlay: long getStartTime()>
<android.drm.DrmInfo: java.lang.String getMimeType()>
<android.filterpacks.imageproc.FisheyeFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)>
<android.view.ViewRootImpl: android.view.View getAccessibilityFocusedHost()>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getVoip()>
<android.view.View: int getRawTextDirection()>
<com.android.email.activity.MessagesAdapter$MessagesCursorLoader: android.database.Cursor loadInBackground()>
<android.os.CommonTimeConfig: boolean getAutoDisable()>
<com.android.inputmethod.latin.SubtypeLocale: java.lang.String getSubtypeLocaleDisplayName(java.lang.String)>
<android.hardware.Camera$Parameters: java.lang.String getWhiteBalance()>
<android.hardware.display.DisplayManager: android.view.Display[] getDisplays(java.lang.String)>
<com.android.systemui.statusbar.phone.NavigationBarView: android.view.View getRecentsButton()>
<android.widget.ProgressBar: android.view.animation.Interpolator getInterpolator()>
<android.view.IDisplayContentChangeListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.mtp.MtpDevice: byte[] getObject(int,int)>
<android.util.XmlPullAttributes: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>
<android.widget.RemoteViews$BitmapCache: int getBitmapId(android.graphics.Bitmap)>
<android.app.admin.DevicePolicyManager: int getPasswordHistoryLength(android.content.ComponentName,int)>
<android.media.AudioService$ScoClient: int getPid()>
<com.google.android.apps.lightcycle.camera.NullSurfaceCameraPreview: float getReportedHorizontalFovDegrees()>
<com.android.videoeditor.service.MovieEffect: android.graphics.Rect getEndRect()>
<android.app.ActivityThread: android.app.LoadedApk getPackageInfo(java.lang.String,android.content.res.CompatibilityInfo,int)>
<com.android.videoeditor.service.VideoEditorProject: long getLastSaved()>
<android.view.ViewStub: int getLayoutResource()>
<com.android.mms.ui.UriImage: byte[] getResizedImageData(int,int,int,int,int,android.net.Uri,android.content.Context)>
<com.android.internal.database.SortCursor: java.lang.String getString(int)>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: java.lang.String getPreferredExtnPrefix()>
<com.android.camera.MosaicPreviewRenderer: android.graphics.SurfaceTexture getInputSurfaceTexture()>
<android.hardware.input.KeyboardLayout: java.lang.String getLabel()>
<com.android.email.activity.ShortcutPickerFragment$MailboxShortcutPickerFragment: java.lang.String[] getFromColumns()>
<android.webkit.WebSettingsClassic: int getDefaultFixedFontSize()>
<android.renderscript.Element: int getBytesSize()>
<android.filterfw.core.Filter: java.lang.String getFilterClassName()>
<android.os.storage.IMountService$Stub$Proxy: java.lang.String getSecureContainerPath(java.lang.String)>
<android.app.ContextImpl: android.graphics.drawable.Drawable getWallpaper()>
<android.preference.Preference: java.util.Set getPersistedStringSet(java.util.Set)>
<com.android.musicfx.seekbar.ProgressBar: android.graphics.drawable.shapes.Shape getDrawableShape()>
<com.android.email.activity.MessageViewFragmentBase: com.android.emailcommon.provider.EmailContent$Message getMessage()>
<com.android.inputmethod.latin.ExpandableDictionary: com.android.inputmethod.latin.ExpandableDictionary$NextWord getBigramWord(java.lang.String,java.lang.String)>
<com.android.email.VendorPolicyLoader: java.lang.String getImapIdValues(java.lang.String,java.lang.String,java.lang.String)>
<android.os.Debug$MemoryInfo: int getOtherSharedDirty(int)>
<com.android.deskclock.DigitalClock$AmPm: java.lang.CharSequence getAmPmText()>
<android.content.IntentFilter: android.os.PatternMatcher getDataPath(int)>
<com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.Set getSupportedGlobalNetworkCallingCodes()>
<android.text.method.HideReturnsTransformationMethod: char[] getOriginal()>
<android.view.View: int getMeasuredWidthAndState()>
<android.gesture.GestureLibrary: int getSequenceType()>
<android.widget.DatePicker: int getMonth()>
<com.android.videoeditor.service.MovieOverlay: java.lang.Class getAttributeType(java.lang.String)>
<android.app.ContextImpl: java.io.File getFileStreamPath(java.lang.String)>
<com.android.inputmethod.keyboard.internal.TouchPositionCorrection: int getRows()>
<com.android.org.bouncycastle.asn1.x500.X500Name: com.android.org.bouncycastle.asn1.x500.X500Name getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)>
<android.server.search.Searchables: java.util.ArrayList getSearchablesInGlobalSearchList()>
<android.webkit.CertTool: java.lang.String[] getKeyStrengthList()>
<android.content.res.Resources: java.lang.String getQuantityString(int,int)>
<com.android.internal.app.AlertController$AlertParams$1: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<android.graphics.drawable.LayerDrawable: int getOpacity()>
<com.android.videoeditor.service.IntentPool: android.content.Intent get()>
<android.widget.AutoCompleteTextView: java.lang.CharSequence getCompletionHint()>
<com.android.launcher2.PagedViewCellLayout: android.view.View getChildOnPageAt(int)>
<android.filterfw.format.ImageFormat: android.filterfw.core.MutableFrameFormat create(int,int,int,int)>
<android.os.storage.StorageVolume: int getStorageId()>
<com.google.android.apps.lightcycle.sensor.SensorReader: float[] getAndResetGyroData()>
<android.os.WorkSource: android.os.WorkSource addReturningNewbs(android.os.WorkSource)>
<android.widget.ExpandableListConnector: long getItemId(int)>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getGeneralDesc()>
<android.renderscript.Sampler: android.renderscript.Sampler$Value getMinification()>
<android.app.WallpaperManager: android.graphics.drawable.Drawable peekDrawable()>
<android.media.videoeditor.MediaVideoItem: int getVideoProfile()>
<android.app.Activity: java.lang.String getCallingPackage()>
<android.drm.DrmManagerClient: android.content.ContentValues getConstraints(android.net.Uri,int)>
<android.media.videoeditor.MediaArtistNativeHelper: boolean getAudioflag()>
<com.android.wallpaper.RenderScriptWallpaper: android.service.wallpaper.WallpaperService$Engine onCreateEngine()>
<android.view.DragEvent: java.lang.Object getLocalState()>
<com.android.videoeditor.service.MovieTheme: com.android.videoeditor.service.MovieTransition getBeginTransition()>
<android.webkit.AccessibilityInjectorFallback$AccessibilityWebContentKeyBinding: int getAction(int)>
<android.app.ActivityThread: android.util.DisplayMetrics getDisplayMetricsLocked(int,android.content.res.CompatibilityInfo)>
<com.android.email.activity.setup.AccountSecurity$SecurityNeededDialog: android.app.Dialog onCreateDialog(android.os.Bundle)>
<android.content.res.XmlBlock$Parser: int getNamespaceCount(int)>
<android.app.backup.BackupDataInput: int getDataSize()>
<com.android.org.bouncycastle.util.io.pem.PemHeader: java.lang.String getValue()>
<android.os.IPermissionController$Stub: android.os.IBinder asBinder()>
<com.android.email.mail.store.ImapStore$ImapException: java.lang.String getAlertText()>
<com.android.commands.monkey.MonkeyKeyEvent: long getDownTime()>
<com.android.phone.PhoneGlobals: android.app.PendingIntent getCallBackPendingIntent(android.content.Context,java.lang.String)>
<android.security.SystemKeyStore: android.security.SystemKeyStore getInstance()>
<com.android.email.ResourceHelper: com.android.email.ResourceHelper getInstance(android.content.Context)>
<com.android.mms.dom.smil.TimeListImpl: int getLength()>
<com.android.org.bouncycastle.asn1.DERInteger: java.math.BigInteger getValue()>
<android.view.animation.Transformation: float getAlpha()>
<com.android.mms.MmsConfig: int getMinimumSlideElementDuration()>
<android.provider.Settings$System: int getInt(android.content.ContentResolver,java.lang.String)>
<com.android.org.bouncycastle.asn1.x509.X509Name: java.util.Vector getValues(com.android.org.bouncycastle.asn1.ASN1ObjectIdentifier)>
<android.preference.PreferenceActivity: android.preference.PreferenceManager getPreferenceManager()>
<com.android.mms.dom.smil.SmilParElementImpl$1: org.w3c.dom.smil.TimeList getBegin()>
<android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>
<android.preference.EditTextPreference: java.lang.String getText()>
<android.webkit.WebSettingsClassic: int getDoubleTapZoom()>
<com.android.emailcommon.provider.Policy: com.android.emailcommon.provider.Policy restorePolicyWithId(android.content.Context,long)>
<android.animation.Keyframe: android.animation.TimeInterpolator getInterpolator()>
<android.widget.HeaderViewListAdapter: int getFootersCount()>
<com.android.camera.PhotoModule: byte[] access$4802(com.android.camera.PhotoModule,byte[])>
<android.media.AudioTrack: int getAudioSessionId()>
<android.os.storage.StorageVolume: int getMtpReserveSpace()>
<android.media.videoeditor.MediaArtistNativeHelper: java.lang.String getProjectAudioTrackPCMFilePath()>
<com.android.internal.policy.impl.keyguard.PagedView: int getScaledMeasuredWidth(android.view.View)>
<android.media.videoeditor.MediaItem: java.util.List getAllEffects()>
<android.view.accessibility.AccessibilityRecord: java.lang.CharSequence getBeforeText()>
<com.android.org.bouncycastle.asn1.x500.AttributeTypeAndValue: com.android.org.bouncycastle.asn1.x500.AttributeTypeAndValue getInstance(java.lang.Object)>
<com.android.inputmethod.latin.WordComposer: int getCodeAt(int)>
<android.view.animation.Animation: android.view.animation.Interpolator getInterpolator()>
<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: int getCount()>
<android.app.Instrumentation: android.content.Context getContext()>
<com.android.internal.view.IInputContext$Stub: android.os.IBinder asBinder()>
<android.view.accessibility.AccessibilityEvent: int getEventType()>
<android.content.Intent: short getShortExtra(java.lang.String,short)>
<android.os.CommonTimeConfig: int getMasterAnnounceInterval()>
<android.graphics.drawable.Drawable: android.graphics.Rect getBounds()>
<com.android.inputmethod.keyboard.internal.KeyboardRow: int getDefaultKeyLabelFlags()>
<android.filterfw.core.Filter: int getNumberOfConnectedOutputs()>
<android.os.storage.StorageVolume: long getMaxFileSize()>
<com.android.internal.widget.multiwaveview.Ease$Cubic$3: float getInterpolation(float)>
<com.android.internal.widget.multiwaveview.Ease$Cubic$2: float getInterpolation(float)>
<com.android.internal.widget.multiwaveview.Ease$Cubic$1: float getInterpolation(float)>
<android.view.KeyEvent: int getDeviceId()>
<com.android.email.activity.UiUtilities: android.view.View getViewOrNull(android.view.View,int)>
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat: java.lang.Object getInfo()>
<com.google.android.apps.lightcycle.util.UiUtil: com.google.android.apps.lightcycle.util.Size getDrawableDimensions(android.content.Context,int)>
<com.android.launcher2.DragLayer$LayoutParams: int getX()>
<com.android.launcher2.DragLayer$LayoutParams: int getY()>
<com.android.inputmethod.latin.suggestions.MoreSuggestionsView: com.android.inputmethod.keyboard.PointerTracker$TimerProxy getTimerProxy()>
<android.hardware.Camera$Parameters: java.util.List getSupportedJpegThumbnailSizes()>
<com.android.launcher2.PagedView: int getRelativeChildOffset(int)>
<android.webkit.WebSettingsClassic: boolean getMediaPlaybackRequiresUserGesture()>
<android.widget.RemoteViews$ViewGroupAction: java.lang.String getActionName()>
<android.graphics.drawable.Drawable: int getMinimumWidth()>
<com.android.launcher2.Launcher: com.android.launcher2.LauncherAppWidgetHost getAppWidgetHost()>
<android.graphics.Paint: android.graphics.Paint$Style getStyle()>
<com.android.systemui.recent.RecentsHorizontalScrollView: android.view.View getChildAtPosition(android.view.MotionEvent)>
<android.inputmethodservice.KeyboardView$SwipeTracker: float getXVelocity()>
<android.media.MediaScanner$MyMediaScannerClient: java.lang.String getGenreName(java.lang.String)>
<android.widget.TimePicker$SavedState: int getHour()>
<android.os.storage.StorageManager: android.os.storage.StorageVolume getPrimaryVolume(android.os.storage.StorageVolume[])>
<android.widget.Spinner$DialogPopup: java.lang.CharSequence getHintText()>
<com.android.mms.dom.NamedNodeMapImpl: int getLength()>
<android.app.SearchableInfo: int getSettingsDescriptionId()>
<com.android.mms.widget.MmsWidgetService$MmsFactory: int getCount()>
<android.webkit.CookieManager: java.lang.String getCookie(java.lang.String,boolean)>
<android.content.ContentValues: java.lang.Object get(java.lang.String)>
<com.android.emailcommon.internet.MimeMessage: com.android.emailcommon.mail.Body getBody()>
<android.text.method.HideReturnsTransformationMethod: android.text.method.HideReturnsTransformationMethod getInstance()>
<com.android.email.activity.AccountSelectorAdapter$CursorWithExtras: int getAccountCount()>
<android.webkit.WebViewCore: float getFixedDisplayDensity(android.content.Context)>
<com.android.i18n.phonenumbers.Phonemetadata$NumberFormat: java.lang.String getDomesticCarrierCodeFormattingRule()>
<com.android.email.mail.Sender: java.lang.Class getSettingActivityClass()>
<com.android.internal.policy.impl.keyguard.KeyguardMessageArea: java.lang.String getOwnerInfo()>
<android.view.View: int getPaddingRight()>
<android.widget.ViewSwitcher: android.view.View getNextView()>
<com.android.internal.view.menu.SubMenuBuilder: com.android.internal.view.menu.MenuBuilder getRootMenu()>
<android.media.videoeditor.MediaItem: java.lang.String getGeneratedImageClip()>
<com.android.launcher2.CellLayout: boolean getIsDragOverlapping()>
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: java.util.ArrayList getSuggestions(com.android.inputmethod.latin.WordComposer,java.lang.CharSequence,com.android.inputmethod.keyboard.ProximityInfo)>
<com.android.email.activity.ThreePaneLayout: com.android.email.activity.MessageCommandButtonView getInMessageCommandButtons()>
<com.android.systemui.statusbar.tablet.NotificationPanel: android.view.View getClearButton()>
<android.webkit.ByteArrayBuilder: android.webkit.ByteArrayBuilder$Chunk getFirstChunk()>
<com.android.server.am.ActivityStack: java.util.ArrayList processStoppingActivitiesLocked(boolean)>
<android.app.SearchableInfo: java.lang.String getSuggestIntentAction()>
<android.media.videoeditor.VideoEditorImpl: java.util.List getAllAudioTracks()>
<com.android.internal.view.menu.MenuBuilder: boolean getOptionalIconsVisible()>
<android.media.videoeditor.EffectColor: int getColor()>
<android.speech.tts.TextToSpeechService$SpeechItem: java.lang.Object getCallerIdentity()>
<android.text.SpannedString: int getSpanStart(java.lang.Object)>
<com.android.email.activity.AccountSelectorAdapter: int getViewTypeCount()>
<com.android.launcher2.Hotseat: com.android.launcher2.CellLayout getLayout()>
<android.content.ClipDescription: int getMimeTypeCount()>
<com.android.mms.util.ImageCacheService: com.android.mms.util.ImageCacheService$ImageData getImageData(java.lang.String,int)>
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String[] getSystemSharedLibraryNames()>
<com.android.server.NativeDaemonEvent: int getCmdNumber()>
<com.android.org.bouncycastle.asn1.DERNumericString: byte[] getOctets()>
<com.android.inputmethod.compat.SuggestionSpanUtils: java.lang.CharSequence getTextWithSuggestionSpan(android.content.Context,java.lang.CharSequence,com.android.inputmethod.latin.SuggestedWords,boolean)>
<com.android.inputmethod.latin.Suggest: java.util.concurrent.ConcurrentHashMap getUnigramDictionaries()>
<android.util.TimeUtils: java.util.ArrayList getTimeZones(java.lang.String)>
<android.view.View: int getPaddingTop()>
<com.android.email.LegacyConversions: com.android.emailcommon.mail.Message makeMessage(android.content.Context,com.android.emailcommon.provider.EmailContent$Message)>
<com.android.mms.dom.smil.ElementParallelTimeContainerImpl: float getDur()>
<com.android.mms.dom.smil.SmilParElementImpl$1: org.w3c.dom.NodeList getTimeChildren()>
<android.view.InputDevice: int getGeneration()>
<android.app.IInstrumentationWatcher$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.graphics.Paint: float getTextRunAdvances(java.lang.String,int,int,int,int,int,float[],int)>
<android.app.ExpandableListActivity: android.widget.ExpandableListAdapter getExpandableListAdapter()>
<android.view.accessibility.IAccessibilityInteractionConnection$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.graphics.drawable.DrawableContainer: int getChangingConfigurations()>
<android.widget.RemoteViewsAdapter: android.content.Intent getRemoteViewsServiceIntent()>
<android.widget.RemoteViewsAdapter$FixedSizeRemoteViewsCache: android.widget.RemoteViews getRemoteViewsAt(int)>
<android.view.animation.AccelerateInterpolator: float getInterpolation(float)>
<com.android.providers.userdictionary.UserDictionaryProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<com.android.commands.monkey.MonkeySourceRandomScript: com.android.commands.monkey.MonkeyEvent getNextEvent()>
<android.widget.ExpandableListView: long getPackedPositionForChild(int,int)>
<android.graphics.drawable.Drawable: int getIntrinsicHeight()>
<android.media.Metadata: long getLong(int)>
<android.widget.TextView: android.graphics.drawable.Drawable[] getCompoundDrawables()>
<android.provider.Telephony$Threads: long getOrCreateThreadId(android.content.Context,java.util.Set)>
<android.hardware.Camera$Parameters: java.util.List getSupportedPictureFormats()>
<com.android.camera.ListPreference: java.lang.CharSequence[] getEntries()>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumLowerCase(android.content.ComponentName,int)>
<android.media.videoeditor.MediaVideoItem: java.lang.String getAudioWaveformFilename()>
<android.filterfw.core.FilterPort: android.filterfw.core.FrameFormat getPortFormat()>
<android.app.DownloadManager$Query: android.database.Cursor runQuery(android.content.ContentResolver,java.lang.String[],android.net.Uri)>
<android.renderscript.Sampler: android.renderscript.Sampler$Value getWrapT()>
<android.renderscript.Sampler: android.renderscript.Sampler$Value getWrapS()>
<android.text.StaticLayout: int getLineCount()>
<android.webkit.URLUtil: byte[] decode(byte[])>
<android.media.MediaMetadataRetriever: android.graphics.Bitmap getFrameAtTime()>
<com.android.mms.dom.smil.SmilDocumentImpl: float getDur()>
<com.android.launcher2.PagedView: android.view.View getPageAt(int)>
<com.android.deskclock.SettingsActivity: java.lang.CharSequence[][] getAllTimezones()>
<com.android.server.accessibility.ScreenMagnifier$MagnificationController: android.graphics.Rect getMagnifiedRegionBounds()>
<com.android.mms.dom.smil.TimeImpl: short getTimeType()>
<com.android.mms.data.WorkingMessage: android.net.Uri access$1300(com.google.android.mms.pdu.PduPersister,com.google.android.mms.pdu.SendReq,com.android.mms.model.SlideshowModel,android.net.Uri,android.content.Context,java.util.HashMap)>
<com.android.launcher2.ShortcutAndWidgetContainer: android.view.View getChildAt(int,int)>
<com.android.email.activity.Welcome: android.content.Intent createAccountShortcutIntent(android.content.Context,java.lang.String,long)>
<android.os.Bundle: float[] getFloatArray(java.lang.String)>
<com.android.internal.policy.impl.keyguard.KeyguardStatusView: int getAppWidgetId()>
<android.view.ViewGroup: java.util.ArrayList access$400(android.view.ViewGroup)>
<android.app.SearchManager: android.content.ComponentName getWebSearchActivity()>
<android.widget.TabHost$TabSpec: java.lang.String getTag()>
<com.android.launcher2.FolderIcon$FolderRingAnimator: float getOuterRingSize()>
<android.graphics.Bitmap: int getPixel(int,int)>
<com.android.internal.os.ProcessStats: int getLastIoWaitTime()>
<com.android.internal.view.menu.MenuItemImpl: int getOrdering()>
<android.app.ApplicationPackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int,int)>
<android.graphics.drawable.AnimationDrawable: int getNumberOfFrames()>
<com.android.exchange.adapter.EmailSyncAdapter$EasEmailSyncParser: java.lang.String getMimeTypeFromFileName(java.lang.String)>
<android.text.Spannable$Factory: android.text.Spannable$Factory getInstance()>
<com.android.inputmethod.keyboard.internal.TouchPositionCorrection: float getRadius(int)>
<android.filterfw.core.SyncRunner: java.lang.Exception getError()>
<android.app.SearchableInfo: int getInputType()>
<android.view.ViewConfiguration: int getFadingEdgeLength()>
<com.android.mms.dom.smil.SmilDocumentImpl: org.w3c.dom.smil.TimeList getEnd()>
<com.google.android.picasastore.PicasaStoreFacade: java.io.File getCacheFile(long,java.lang.String)>
<android.app.backup.BackupDataInput: java.lang.String getKey()>
<android.filterfw.core.Frame: int getCapacity()>
<android.media.AudioRecord: int getAudioSessionId()>
<android.os.IUserManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.drm.ProcessedData: byte[] getData()>
<android.app.admin.DevicePolicyManager: int getStorageEncryptionStatus()>
<com.android.email.activity.MailboxMoveToAdapter$MailboxMoveToLoader: android.database.Cursor loadInBackground()>
<com.android.inputmethod.keyboard.internal.KeyboardRow: float getDefaultKeyWidth()>
<android.text.SpannableString: int getSpanFlags(java.lang.Object)>
<android.content.pm.IPackageMoveObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.hardware.usb.UsbDevice: int getVendorId()>
<com.google.android.apps.lightcycle.panorama.LightCycleRenderer: com.google.android.apps.lightcycle.panorama.Pano2dPreviewOverlay getPanoPreview2d()>
<android.widget.TextView: int getImeOptions()>
<android.server.search.Searchables: android.content.ComponentName getWebSearchActivity()>
<com.google.android.apps.lightcycle.util.AnalyticsHelper: com.google.android.apps.lightcycle.util.AnalyticsHelper getInstance(android.content.Context)>
<android.media.AudioManager: int getStreamMaxVolume(int)>
<android.media.RemoteControlClient: int getIntPlaybackInformation(int)>
<com.android.internal.content.PackageHelper: android.os.storage.IMountService getMountService()>
<com.android.launcher2.SmoothPagedView$OvershootInterpolator: float getInterpolation(float)>
<android.provider.Settings$System: int getInt(android.content.ContentResolver,java.lang.String,int)>
<com.android.internal.view.BaseSurfaceHolder: android.graphics.Rect getSurfaceFrame()>
<android.app.SharedPreferencesImpl: float getFloat(java.lang.String,float)>
<android.widget.TextView: android.text.method.MovementMethod getDefaultMovementMethod()>
<android.view.Display: int getFlags()>
<com.android.server.wm.WindowState: int getSurfaceLayer()>
<android.os.Bundle: java.lang.CharSequence getCharSequence(java.lang.String)>
<com.android.inputmethod.latin.LocaleUtils$RunInLocale: java.lang.Object runInLocale(android.content.res.Resources,java.util.Locale)>
<android.view.inputmethod.InputMethodSubtype: java.lang.String getLocale()>
<android.graphics.Canvas: int getMaximumBitmapWidth()>
<android.content.res.TypedArray: float getDimension(int,float)>
<com.android.deskclock.timer.TimerFragment$TimersListAdapter: java.lang.Object getItem(int)>
<android.graphics.drawable.ClipDrawable: int getIntrinsicHeight()>
<android.hardware.display.DisplayManager: android.view.Display[] getDisplays()>
<android.widget.RemoteViewsAdapter: int getItemViewType(int)>
<android.hardware.display.IDisplayManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.animation.AnimatorSet$Builder: android.animation.AnimatorSet$Builder after(long)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: long getAwakeTimeBattery()>
<com.android.internal.widget.LockPatternView$Cell: int getColumn()>
<com.android.internal.view.IInputContext$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.filterpacks.imageproc.SepiaFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)>
<android.text.DynamicLayout: int getLineStart(int)>
<com.android.internal.policy.impl.keyguard.PagedView: android.view.View getScrollingIndicator()>
<android.text.style.MetricAffectingSpan: android.text.style.CharacterStyle getUnderlying()>
<com.android.mms.ui.RecipientsEditor$RecipientsEditorTokenizer: java.util.List getNumbers()>
<com.android.internal.view.menu.ActionMenuItem: android.graphics.drawable.Drawable getIcon()>
<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>
<com.android.org.bouncycastle.asn1.x509.AlgorithmIdentifier: com.android.org.bouncycastle.asn1.ASN1ObjectIdentifier getObjectId()>
<android.widget.VideoView: int getBufferPercentage()>
<android.view.ViewConfiguration: int getDoubleTapSlop()>
<com.android.internal.policy.impl.keyguard.KeyguardWidgetPager: int getWidgetToResetOnPageFadeOut()>
<com.android.org.bouncycastle.asn1.DERBitString: int getPadBits()>
<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams getAttrs()>
<android.filterfw.core.FrameFormat: int getDepth()>
<android.text.SpannedString: int getSpanEnd(java.lang.Object)>
<android.content.ContextWrapper: android.content.Context getBaseContext()>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$NumberFormat getIntlNumberFormat(int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getKeyguardDisabledFeatures(android.content.ComponentName,int)>
<com.android.videoeditor.OverlaysAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.inputmethod.compat.InputMethodManagerCompatWrapper: android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtype()>
<android.hardware.input.InputManager: boolean[] deviceHasKeys(int[])>
<com.android.camera.drawable.TextDrawable: int getIntrinsicWidth()>
<com.google.android.picasasync.SyncState: int getState(android.database.sqlite.SQLiteDatabase,java.lang.String)>
<android.media.videoeditor.MediaVideoItem: int getAudioChannels()>
<com.android.systemui.statusbar.phone.PhoneStatusBar: android.view.WindowManager$LayoutParams getSearchLayoutParams(android.view.ViewGroup$LayoutParams)>
<android.content.res.Resources: android.content.res.CompatibilityInfo getCompatibilityInfo()>
<android.content.res.AssetManager$AssetInputStream: int getAssetInt()>
<android.hardware.input.IInputManager$Stub$Proxy: java.lang.String[] getKeyboardLayoutsForInputDevice(java.lang.String)>
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: android.os.Bundle getAppWidgetOptions(int)>
<android.view.DragEvent: int getAction()>
<android.filterfw.core.ShaderProgram: java.lang.Object getHostValue(java.lang.String)>
<android.os.Handler: android.os.IMessenger getIMessenger()>
<android.view.inputmethod.InputMethodSubtype: java.lang.String getMode()>
<com.android.email.provider.ContentCache: com.android.email.provider.ContentCache$CacheToken getCacheToken(java.lang.String)>
<com.android.launcher2.Folder: com.android.launcher2.FolderInfo getInfo()>
<android.app.ContextImpl: android.content.Context createPackageContextAsUser(java.lang.String,int,android.os.UserHandle)>
<android.content.ContextWrapper: android.content.Context getApplicationContext()>
<android.app.LoadedApk$ReceiverDispatcher: android.app.IntentReceiverLeaked getLocation()>
<android.os.Debug$MemoryInfo: int getTotalSharedDirty()>
<android.view.MotionEvent$PointerCoords: float getAxisValue(int)>
<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.PhoneNumberUtil getInstance(java.lang.String,java.util.Map)>
<com.android.deskclock.widget.multiwaveview.PointCloud$GlowManager: float getAlpha()>
<android.widget.ZoomButtonsController: android.view.ViewGroup getContainer()>
<android.view.View: float getY()>
<android.view.View: float getX()>
<com.android.videoeditor.service.MovieAudioTrack: int getRawResourceId()>
<android.text.style.QuoteSpan: int getSpanTypeId()>
<com.android.org.bouncycastle.asn1.ASN1OctetString: com.android.org.bouncycastle.asn1.ASN1Primitive toDLObject()>
<android.text.method.TimeKeyListener: android.text.method.TimeKeyListener getInstance()>
<android.view.inputmethod.BaseInputConnection: android.text.Editable getEditable()>
<android.content.Intent: long[] getLongArrayExtra(java.lang.String)>
<com.android.mms.transaction.RetryScheduler: com.android.mms.transaction.RetryScheduler getInstance(android.content.Context)>
<android.widget.ListPopupWindow: int getVerticalOffset()>
<android.media.videoeditor.MediaArtistNativeHelper: android.graphics.Bitmap getPixels(java.lang.String,int,int,long,int)>
<com.android.mms.dom.smil.SmilDocumentImpl: short getFill()>
<android.webkit.WebViewCore: android.webkit.DeviceMotionService getDeviceMotionService()>
<android.renderscript.Program: int getTextureCount()>
<android.os.UserManager: java.lang.String getUserName()>
<com.android.org.bouncycastle.util.encoders.Base64: byte[] decode(byte[])>
<android.webkit.WebSettingsClassic: boolean getAllowFileAccess()>
<com.android.launcher2.Folder: java.util.ArrayList getItemsInReadingOrder(boolean)>
<com.google.android.picasasync.UploadTaskEntry: java.lang.String getRequestTemplate()>
<com.android.inputmethod.latin.spellcheck.DictionaryPool$1: java.util.ArrayList getSuggestions(com.android.inputmethod.latin.WordComposer,java.lang.CharSequence,com.android.inputmethod.keyboard.ProximityInfo)>
<android.widget.EdgeEffect: android.graphics.Rect getBounds(boolean)>
<com.android.camera.ComboPreferences: android.content.SharedPreferences getLocal()>
<com.android.mms.dom.DocumentImpl: short getNodeType()>
<android.content.res.Resources: android.content.res.XmlResourceParser getXml(int)>
<android.os.Bundle: android.os.IBinder getIBinder(java.lang.String)>
<android.widget.AbsListView: int getRightPaddingOffset()>
<android.app.ActivityManagerProxy: int getTaskForActivity(android.os.IBinder,boolean)>
<com.android.launcher2.CellLayout: int getCellWidth()>
<com.android.server.am.ProviderMap: com.android.server.am.ContentProviderRecord getProviderByName(java.lang.String,int)>
<android.widget.RemoteViewsAdapter$FixedSizeRemoteViewsCache: android.widget.RemoteViewsAdapter$RemoteViewsMetaData getMetaData()>
<android.view.animation.Animation: long getDuration()>
<com.android.org.bouncycastle.asn1.ASN1TaggedObject: com.android.org.bouncycastle.asn1.ASN1TaggedObject getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)>
<com.android.launcher2.Folder: android.view.View getItemAt(int)>
<android.widget.Chronometer: long getBase()>
<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>
<android.media.videoeditor.MediaImageItem: void getThumbnailList(int,int,long,long,int,int[],android.media.videoeditor.MediaItem$GetThumbnailListCallback)>
<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.telephony.ITelephony getTelephonyService()>
<com.android.internal.app.ActionBarImpl: int getTabCount()>
<com.android.emailcommon.mail.Multipart: com.android.emailcommon.mail.BodyPart getBodyPart(int)>
<com.android.internal.view.BaseSurfaceHolder: int getRequestedHeight()>
<android.app.ContextImpl: android.content.Context getApplicationContext()>
<android.view.MotionEvent: float getHistoricalAxisValue(int,int,int)>
<android.widget.AdapterView: int getCount()>
<com.android.internal.statusbar.IStatusBar$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.android.videoeditor.service.MovieOverlay: java.lang.String getSubtitle(android.os.Bundle)>
<android.text.format.DateUtils: java.lang.CharSequence getRelativeTimeSpanString(android.content.Context,long)>
<android.content.Context: java.lang.CharSequence getText(int)>
<com.android.videoeditor.service.VideoEditorProject$Download: java.lang.String getFilename()>
<android.app.DownloadManager$CursorTranslator: java.lang.String getString(int)>
<android.app.ActivityManagerProxy: android.content.pm.ConfigurationInfo getDeviceConfigurationInfo()>
<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageArchiveInfo(java.lang.String,int)>
<com.android.internal.app.ActionBarImpl$ActionModeImpl: java.lang.CharSequence getSubtitle()>
<android.graphics.drawable.BitmapDrawable: int getChangingConfigurations()>
<com.android.deskclock.widget.swipeablelistview.LogTag: java.lang.String getLogTag()>
<android.app.DownloadManager$Request: android.app.DownloadManager$Request addRequestHeader(java.lang.String,java.lang.String)>
<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager getInstance(android.content.Context)>
<com.android.internal.widget.multiwaveview.TargetDrawable: int getWidth()>
<com.android.server.AppWidgetServiceImpl: int[] getAppWidgetIds(com.android.server.AppWidgetServiceImpl$Host)>
<android.content.AsyncTaskLoader: java.lang.Object onLoadInBackground()>
<android.test.IsolatedContext: java.util.List getAndClearBroadcastIntents()>
<android.hardware.Camera$Parameters: int getMaxNumFocusAreas()>
<android.drm.DrmManagerClient: int getDrmObjectType(java.lang.String,java.lang.String)>
<com.android.org.bouncycastle.asn1.DERUTF8String: com.android.org.bouncycastle.asn1.DERUTF8String getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)>
<android.widget.TextView: int getTotalPaddingTop()>
<com.android.mms.ui.UriImage: com.google.android.mms.pdu.PduPart getResizedImageAsPart(int,int,int)>
<android.text.style.ForegroundColorSpan: int getSpanTypeId()>
<android.widget.ArrayAdapter: int getPosition(java.lang.Object)>
<android.view.MotionEvent: long getHistoricalEventTime(int)>
<android.view.ViewConfiguration: int getScaledDoubleTapSlop()>
<android.view.accessibility.AccessibilityRecord: int getItemCount()>
<android.view.inputmethod.CorrectionInfo: java.lang.CharSequence getNewText()>
<android.media.audiofx.Equalizer: short getCurrentPreset()>
<android.text.SpannableStringBuilder: java.lang.Object[] getSpans(int,int,java.lang.Class)>
<com.android.internal.view.menu.ActionMenuItem: java.lang.CharSequence getTitleCondensed()>
<android.text.Layout: android.text.TextPaint getPaint()>
<com.android.phone.EditPhoneNumberPreference: java.lang.String getStringValue()>
<android.widget.TextView: int getCompoundPaddingBottom()>
<com.android.org.bouncycastle.asn1.DERVisibleString: com.android.org.bouncycastle.asn1.DERVisibleString getInstance(java.lang.Object)>
<android.support.v4.app.TaskStackBuilder: android.app.PendingIntent getPendingIntent(int,int)>
<android.widget.RemoteViews$TextViewSizeAction: java.lang.String getActionName()>
<com.android.phone.PhoneGlobals: com.android.internal.telephony.PhoneConstants$State getPhoneState()>
<com.android.inputmethod.latin.suggestions.SuggestionStripView$SuggestionStripViewParams: int getMaxMoreSuggestionsRow()>
<android.graphics.YuvImage: int getYuvFormat()>
<com.android.systemui.statusbar.phone.NavigationBarView: android.view.View getBackButton()>
<android.view.animation.GridLayoutAnimationController: float getColumnDelay()>
<android.view.HardwareRenderer$GlRenderer: int getWidth()>
<android.app.Fragment: android.app.Activity getActivity()>
<com.android.inputmethod.compat.SuggestionsInfoCompatUtils: int getValueOf_RESULT_ATTR_HAS_RECOMMENDED_SUGGESTIONS()>
<android.view.inputmethod.CompletionInfo: int getPosition()>
<android.provider.MediaStore$Images$Media: android.database.Cursor query(android.content.ContentResolver,android.net.Uri,java.lang.String[])>
<com.android.camera.Storage: android.net.Uri newImage(android.content.ContentResolver,java.lang.String,long,int,int)>
<android.hardware.usb.UsbAccessory: java.lang.String getSerial()>
<com.android.mms.ui.MessageListItem$5: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.i18n.phonenumbers.geocoding.AreaCodeMap: com.android.i18n.phonenumbers.geocoding.AreaCodeMapStorageStrategy getAreaCodeMapStorage()>
<android.provider.MediaStore$Video$Thumbnails: android.graphics.Bitmap getThumbnail(android.content.ContentResolver,long,long,int,android.graphics.BitmapFactory$Options)>
<android.renderscript.Element: int getSubElementOffsetBytes(int)>
<android.view.MotionEvent: float getOrientation(int)>
<android.widget.CompoundButton: int getCompoundPaddingLeft()>
<android.animation.PropertyValuesHolder$IntPropertyValuesHolder: java.lang.Object getAnimatedValue()>
<android.view.IWindowManager$Stub$Proxy: int getPendingAppTransition()>
<android.widget.RemoteViews$TextViewDrawableAction: java.lang.String getActionName()>
<com.android.videoeditor.VideoEditorActivity: com.android.videoeditor.widgets.OverlayLinearLayout getOverlayLayout()>
<com.android.mms.MmsConfig: java.lang.String getHttpParams()>
<com.android.email.mail.store.imap.ImapResponse: com.android.email.mail.store.imap.ImapString getResponseCodeOrEmpty()>
<com.google.android.gms.common.internal.GmsClient: android.content.Context getContext()>
<android.widget.BaseAdapter: int getItemViewType(int)>
<android.animation.ValueAnimator: long getCurrentPlayTime()>
<com.android.server.usb.UsbDeviceManager: android.hardware.usb.UsbAccessory getCurrentAccessory()>
<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getDefaultActivityIcon()>
<android.content.res.CompatibilityInfo: android.content.res.CompatibilityInfo$Translator getTranslator()>
<android.text.Layout: int getParagraphRight(int)>
<android.media.MediaRouter: android.media.MediaRouter$RouteInfo getRouteAt(int)>
<com.android.camera.ui.PieItem: int getOuterRadius()>
<android.opengl.GLException: int getError()>
<android.app.ContextImpl: java.io.File getFilesDir()>
<com.android.internal.widget.WaveView: int getSuggestedMinimumHeight()>
<com.android.launcher2.PagedView: int getScaledMeasuredWidth(android.view.View)>
<android.view.ViewRootImpl: android.view.WindowLeaked getLocation()>
<android.widget.ActivityChooserModel: android.widget.ActivityChooserModel get(android.content.Context,java.lang.String)>
<android.text.style.ForegroundColorSpan: int getForegroundColor()>
<android.view.inputmethod.BaseInputConnection: java.lang.CharSequence getTextBeforeCursor(int,int)>
<com.android.email.Preferences: boolean getEnableDebugLogging()>
<com.android.org.bouncycastle.asn1.DERGeneralString: byte[] getOctets()>
<android.app.FragmentManager: android.app.FragmentTransaction openTransaction()>
<com.android.videoeditor.AlertDialogs: android.app.AlertDialog createAlert(android.content.Context,java.lang.String,int,java.lang.String,java.lang.String,android.content.DialogInterface$OnClickListener,java.lang.String,android.content.DialogInterface$OnClickListener,android.content.DialogInterface$OnCancelListener,boolean)>
<com.android.videoeditor.TransitionsAdapter: int getCount()>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumSymbols(android.content.ComponentName,int)>
<android.graphics.drawable.RotateDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()>
<com.android.internal.policy.impl.keyguard.KeyguardWidgetPager: float getAlphaForPage(int,int,boolean)>
<com.android.server.input.PersistentDataStore$InputDeviceState: java.lang.String[] getKeyboardLayouts()>
<com.android.mms.ui.MessagingPreferenceActivity: android.app.Dialog onCreateDialog(int)>
<android.text.format.Time: int getWeeksSinceEpochFromJulianDay(int,int)>
<com.android.internal.view.WindowManagerPolicyThread: java.lang.Thread getThread()>
<android.content.res.TypedArray: int getColor(int,int)>
<com.android.launcher2.AppsCustomizeTabHost: int getDescendantFocusability()>
<com.android.org.bouncycastle.asn1.DERBMPString: com.android.org.bouncycastle.asn1.DERBMPString getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)>
<com.android.internal.util.TypedProperties: byte getByte(java.lang.String,byte)>
<android.graphics.drawable.ColorDrawable: int getChangingConfigurations()>
<com.android.commands.monkey.MonkeyTouchEvent: java.lang.String getTypeLabel()>
<com.android.mms.dom.AttrImpl: org.w3c.dom.Element getOwnerElement()>
<com.android.internal.content.PackageMonitor: int getChangingUserId()>
<android.view.ViewRootImpl: android.view.ViewParent getParentForAccessibility()>
<android.widget.AutoCompleteTextView: android.widget.AdapterView$OnItemSelectedListener getOnItemSelectedListener()>
<android.widget.TableRow: int getChildrenSkipCount(android.view.View,int)>
<android.view.IWindowManager$Stub$Proxy: int getAppOrientation(android.view.IApplicationToken)>
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.InstrumentationInfo getInstrumentationInfo(android.content.ComponentName,int)>
<android.webkit.ZoomManager: float getReadingLevelScale()>
<com.android.deskclock.AlarmClock$AlarmItemAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<android.text.style.LeadingMarginSpan$Standard: int getSpanTypeId()>
<com.android.systemui.recent.RecentsPanelView$TaskDescriptionAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.server.AppWidgetServiceImpl: android.os.Bundle getAppWidgetOptions(int)>
<android.webkit.WebViewClassic: int getHistoryPictureWidth()>
<android.filterfw.format.ImageFormat: android.filterfw.core.MutableFrameFormat create(int)>
<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo getUserInfo(int)>
<android.media.audiofx.Virtualizer: boolean getStrengthSupported()>
<android.filterpacks.imageproc.CrossProcessFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)>
<android.app.backup.IFullBackupRestoreObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.android.emailcommon.provider.EmailContent$Attachment: com.android.emailcommon.provider.EmailContent$Attachment restoreAttachmentWithId(android.content.Context,long)>
<com.android.inputmethod.keyboard.PointerTracker: long getDownTime()>
<android.view.ViewGroup: android.view.View getFocusedChild()>
<com.android.mms.data.Conversation: com.android.mms.data.Conversation get(android.content.Context,android.net.Uri,boolean)>
<com.android.internal.view.menu.MenuItemImpl: java.lang.CharSequence getTitleForItemView(com.android.internal.view.menu.MenuView$ItemView)>
<android.util.NtpTrustedTime: long getCacheCertainty()>
<android.app.admin.DevicePolicyManager: int getPasswordMinimumLowerCase(android.content.ComponentName,int)>
<com.android.videoeditor.TransitionsAdapter: java.lang.Object getItem(int)>
<android.widget.TextView: int getTotalPaddingEnd()>
<android.app.SearchableInfo$ActionKeyInfo: int getKeyCode()>
<android.webkit.CacheManager$CacheResult: long getContentLength()>
<com.android.commands.monkey.MonkeySourceNetworkViews$GetViewsWithTextCommand: com.android.commands.monkey.MonkeySourceNetwork$MonkeyCommandReturn translateCommand(java.util.List,com.android.commands.monkey.MonkeySourceNetwork$CommandQueue)>
<android.app.ContextImpl: java.lang.ClassLoader getClassLoader()>
<com.android.org.bouncycastle.util.io.pem.PemObject: java.util.List getHeaders()>
<com.android.mms.dom.ElementImpl: org.w3c.dom.TypeInfo getSchemaTypeInfo()>
<android.content.res.AssetManager: java.lang.CharSequence getResourceText(int)>
<com.android.mms.dom.smil.SmilDocumentImpl: org.w3c.dom.smil.TimeList getBegin()>
<com.android.camera.CameraScreenNail: int getUncroppedRenderWidth()>
<android.security.SystemKeyStore: byte[] retrieveKey(java.lang.String)>
<android.app.FragmentManagerImpl: android.app.FragmentManager$BackStackEntry getBackStackEntryAt(int)>
<android.filterpacks.imageproc.ToGrayFilter: android.filterfw.core.Program getShaderProgram(android.filterfw.core.FilterContext)>
<android.webkit.HTML5VideoViewProxy: android.webkit.WebViewClassic getWebView()>
<android.webkit.WebSettingsClassic: int getMinimumLogicalFontSize()>
<com.android.org.bouncycastle.asn1.ASN1TaggedObject: com.android.org.bouncycastle.asn1.ASN1TaggedObject getInstance(java.lang.Object)>
<com.android.mms.ui.IconListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<android.app.ContextImpl: android.content.Context getReceiverRestrictedContext()>
<com.android.org.bouncycastle.asn1.DERGeneralizedTime: java.util.Date getDate()>
<android.widget.AutoCompleteTextView: android.widget.AdapterView$OnItemClickListener getItemClickListener()>
<com.android.internal.os.RuntimeInit: android.os.IBinder getApplicationObject()>
<com.android.org.bouncycastle.asn1.DERPrintableString: com.android.org.bouncycastle.asn1.DERPrintableString getInstance(java.lang.Object)>
<android.renderscript.RenderScript: android.renderscript.RenderScript$RSMessageHandler getMessageHandler()>
<android.app.ISearchManager$Stub$Proxy: android.content.ComponentName getWebSearchActivity()>
<android.renderscript.Element: int getSubElementArraySize(int)>
<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType getNumberType(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>
<com.android.camera.CameraHolder: android.hardware.Camera$CameraInfo[] getCameraInfo()>
<android.mtp.MtpObjectInfo: int getStorageId()>
<android.speech.IRecognitionListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.app.ProgressDialog: int getMax()>
<com.android.mms.model.SlideshowModel: com.android.mms.model.SlideshowModel createFromMessageUri(android.content.Context,android.net.Uri)>
<com.android.camera.ui.RenderOverlay: int getWindowPositionY()>
<com.android.camera.ui.RenderOverlay: int getWindowPositionX()>
<android.text.style.BulletSpan: int getLeadingMargin(boolean)>
<android.os.Environment: java.io.File getExternalStorageAppFilesDirectory(java.lang.String)>
<com.android.server.wm.WindowState: com.android.server.wm.MagnificationSpec getWindowMagnificationSpecLocked()>
<android.widget.ListPopupWindow: android.view.View getSelectedView()>
<android.content.res.AssetManager: java.lang.CharSequence getResourceBagText(int,int)>
<android.media.IRemoteControlDisplay$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.app.Activity: int getTaskId()>
<com.android.internal.app.ActionBarImpl: java.lang.CharSequence getSubtitle()>
<com.android.email.activity.MailboxFragmentAdapter: int getViewTypeCount()>
<android.text.format.Time: int getJulianMondayFromWeeksSinceEpoch(int)>
<android.widget.Spinner$DropDownAdapter: int getViewTypeCount()>
<com.android.mms.dom.smil.SmilDocumentImpl: org.w3c.dom.smil.SMILLayoutElement getLayout()>
<android.app.Fragment: int getId()>
<android.webkit.WebViewClassic: float getZoomOverviewScale()>
<com.android.internal.view.IInputContext$Stub$Proxy: void getSelectedText(int,int,com.android.internal.view.IInputContextCallback)>
<android.content.ContentProvider: int bulkInsert(android.net.Uri,android.content.ContentValues[])>
<android.view.View$MeasureSpec: int getMode(int)>
<android.media.MediaMetadataRetriever: android.graphics.Bitmap getFrameAtTime(long)>
<android.util.XmlPullAttributes: java.lang.String getPositionDescription()>
<com.android.launcher2.DragLayer: int getChildDrawingOrder(int,int)>
<android.media.MediaRouter$RouteGroup: int getRouteCount()>
<android.view.ViewRootImpl: android.view.accessibility.AccessibilityNodeInfo getAccessibilityFocusedVirtualView()>
<android.view.KeyEvent: int getMetaState()>
<android.os.storage.IMountService$Stub$Proxy: int getEncryptionState()>
<com.android.launcher2.AppsCustomizeTabHost: com.android.launcher2.AppsCustomizePagedView$ContentType getContentTypeForTabTag(java.lang.String)>
<com.android.internal.util.StateMachine: android.os.Handler getHandler()>
<com.android.internal.widget.SlidingTab$Slider: int getTabWidth()>
<android.filterfw.core.Filter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)>
<android.widget.RemoteViewsAdapter$FixedSizeRemoteViewsCache: android.widget.RemoteViewsAdapter$RemoteViewsMetaData getTemporaryMetaData()>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: int getConstantWidth()>
<com.android.uiautomator.core.UiDevice: com.android.uiautomator.core.UiDevice getInstance()>
<android.content.res.Resources: java.lang.String getResourceEntryName(int)>
<com.android.launcher2.Workspace$ZoomOutInterpolator: float getInterpolation(float)>
<android.content.pm.PackageItemInfo: android.content.pm.ApplicationInfo getApplicationInfo()>
<com.android.org.bouncycastle.asn1.ASN1OctetString: java.io.InputStream getOctetStream()>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc: java.lang.String getNationalNumberPattern()>
<com.android.launcher2.Workspace: android.animation.Animator getChangeStateAnimation(com.android.launcher2.Workspace$State,boolean,int)>
<android.hardware.SensorManager$SensorEventPool: android.hardware.SensorEvent getFromPool()>
<android.media.videoeditor.MediaArtistNativeHelper: int getFrameRate(int)>
<android.widget.CursorTreeAdapter$MyCursorHelper: android.database.Cursor moveTo(int)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.os.Binder: android.os.UserHandle getCallingUserHandle()>
<android.accounts.Account: java.lang.String toString()>
<android.view.View: android.graphics.Insets getOpticalInsets()>
<android.content.res.Resources: java.lang.String getString(int)>
<android.webkit.ViewManager: android.webkit.ViewManager$ChildView createView()>
<android.webkit.WebSettingsClassic: java.lang.String getProperty(java.lang.String)>
<com.android.internal.app.ResolverActivity: android.graphics.drawable.Drawable loadIconForResolveInfo(android.content.pm.ResolveInfo)>
<com.android.internal.database.SortCursor: short getShort(int)>
<android.app.Activity: android.app.Activity getParent()>
<com.android.launcher2.SearchDropTargetBar: android.graphics.Rect getSearchBarBounds()>
<android.app.WallpaperManager: android.graphics.drawable.Drawable getFastDrawable()>
<android.view.IWindowManager$Stub$Proxy: android.graphics.Bitmap screenshotApplications(android.os.IBinder,int,int,int)>
<android.media.videoeditor.VideoEditorImpl: android.media.videoeditor.Transition getTransition(java.lang.String)>
<android.view.accessibility.AccessibilityNodeInfo: int getChildCount()>
<android.view.View: int getId()>
<android.content.res.ColorStateList: int getDefaultColor()>
<com.android.systemui.recent.RecentsPanelView$TaskDescriptionAdapter: java.lang.Object getItem(int)>
<com.android.mms.util.DownloadManager: boolean getAutoDownloadState(android.content.SharedPreferences)>
<android.text.StaticLayout: int getLineDescent(int)>
<android.filterpacks.imageproc.Invert: android.filterfw.core.Program getNativeProgram(android.filterfw.core.FilterContext)>
<android.hardware.display.IDisplayManager$Stub: android.os.IBinder asBinder()>
<android.filterfw.core.FilterGraph: java.util.Set getFilters()>
<android.media.AudioManager: int getRingerMode()>
<com.android.internal.policy.impl.PhoneWindowManager: int getMaxWallpaperLayer()>
<com.android.uiautomator.core.UiSelector: com.android.uiautomator.core.UiSelector getContainerSelector()>
<com.android.videoeditor.ProjectPickerAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.ex.chips.BaseRecipientAdapter: java.lang.Object getItem(int)>
<android.webkit.WebViewCore: android.webkit.BrowserFrame getBrowserFrame()>
<com.android.deskclock.AlarmClock$AlarmItemAdapter: android.os.Bundle getPreviousDaysOfWeekMap()>
<android.graphics.Paint: android.graphics.PathEffect getPathEffect()>
<android.os.Debug: int getGlobalAllocSize()>
<android.app.ActivityManager: java.util.List getRunningTasks(int)>
<com.android.videoeditor.service.MovieOverlay: java.lang.String getTitle(android.os.Bundle)>
<android.view.View: int getMeasuredWidth()>
<android.widget.ExpandableListConnector: java.util.ArrayList getExpandedGroupMetadataList()>
<android.app.ContextImpl: android.content.res.Resources$Theme getTheme()>
<com.android.internal.os.IResultReceiver$Stub: android.os.IBinder asBinder()>
<android.text.SpannableStringInternal: int getSpanEnd(java.lang.Object)>
<android.webkit.WebSettings: boolean getUseWebViewBackgroundForOverscrollBackground()>
<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String getNationalSignificantNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>
<com.android.internal.policy.impl.keyguard.KeyguardHostView$7: com.android.internal.widget.LockPatternUtils getLockPatternUtils()>
<android.view.animation.DecelerateInterpolator: float getInterpolation(float)>
<android.os.IUserManager$Stub: android.os.IBinder asBinder()>
<android.content.ContextWrapper: int getWallpaperDesiredMinimumHeight()>
<com.android.systemui.recent.RecentTasksLoader: com.android.systemui.recent.RecentTasksLoader getInstance(android.content.Context)>
<com.android.phone.EditPhoneNumberPreference: java.lang.CharSequence getSummaryOn()>
<com.android.providers.downloads.DownloadInfo: java.lang.String getLogMessageForNetworkError(int)>
<com.android.org.bouncycastle.asn1.ASN1StreamParser: com.android.org.bouncycastle.asn1.ASN1Primitive readTaggedObject(boolean,int)>
<android.media.ExifInterface: byte[] getThumbnail()>
<com.android.internal.policy.impl.PhoneFallbackEventHandler: android.app.SearchManager getSearchManager()>
<android.webkit.WebViewClassic: android.webkit.WebView getWebView()>
<com.android.email.FolderProperties: int getMessageCount(int,int,int)>
<android.filterfw.core.SyncRunner: android.filterfw.core.FilterGraph getGraph()>
<android.widget.ListView: android.graphics.drawable.Drawable getOverscrollHeader()>
<android.media.AudioManager: int getRouting(int)>
<android.app.backup.IBackupManager$Stub$Proxy: java.lang.String getDestinationString(java.lang.String)>
<android.text.style.AbsoluteSizeSpan: boolean getDip()>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void getRemoveWarning(android.content.ComponentName,android.os.RemoteCallback,int)>
<android.view.View: android.content.res.Resources getResources()>
<android.widget.ExpandableListView: long getExpandableListPosition(int)>
<android.app.LocalActivityManager: android.view.Window destroyActivity(java.lang.String,boolean)>
<android.app.ContextImpl: int getWallpaperDesiredMinimumWidth()>
<com.android.launcher2.Workspace: com.android.launcher2.Folder getOpenFolder()>
<android.app.ActivityThread: int getIntCoreSetting(java.lang.String,int)>
<android.view.inputmethod.InputMethodInfo: int getSubtypeCount()>
<android.content.pm.ActivityInfo: int getThemeResource()>
<com.android.email.activity.AccountSelectorAdapter: long getId(int)>
<android.filterfw.core.NativeFrame: android.graphics.Bitmap getBitmap()>
<android.app.Instrumentation$ActivityMonitor: android.app.Instrumentation$ActivityResult getResult()>
<android.mtp.MtpObjectInfo: int getParent()>
<android.webkit.WebHistoryItemClassic: java.lang.String getUrl()>
<android.media.RingtoneManager: boolean getStopPreviousRingtone()>
<com.android.internal.app.LocalePicker$LocaleInfo: java.util.Locale getLocale()>
<android.animation.Keyframe$IntKeyframe: int getIntValue()>
<com.android.internal.statusbar.StatusBarIconList: int getSlotIndex(java.lang.String)>
<android.util.SparseArray: java.lang.Object get(int,java.lang.Object)>
<android.app.ApplicationPackageManager: java.util.List queryInstrumentation(java.lang.String,int)>
<com.android.org.bouncycastle.asn1.ASN1TaggedObject: com.android.org.bouncycastle.asn1.ASN1Primitive toDLObject()>
<android.animation.IntKeyframeSet: java.lang.Object getValue(float)>
<com.android.videoeditor.TransitionsAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>
<android.support.v4.app.NotificationCompat$Style: android.app.Notification build()>
<android.text.Layout: int getEllipsizedWidth()>
<com.android.internal.policy.impl.keyguard.KeyguardWidgetFrame: int getSmallFrameHeight()>
<android.webkit.WebViewClassic$Factory: android.webkit.WebViewDatabase getWebViewDatabase(android.content.Context)>
<android.content.OperationApplicationException: int getNumSuccessfulYieldPoints()>
<com.google.android.picasasync.UploadTaskEntry: java.lang.Throwable getError()>
<android.graphics.drawable.BitmapDrawable: int getOpacity()>
<android.view.View: int getNextFocusForwardId()>
<android.os.storage.StorageManager: boolean isObbMounted(java.lang.String)>
<android.drm.DrmEvent: java.lang.Object getAttribute(java.lang.String)>
<com.android.mms.data.RecipientIdCache: java.lang.String getSingleAddressFromCanonicalAddressInDb(android.content.Context,java.lang.String)>
<com.android.email.mail.store.ImapFolder: com.android.emailcommon.mail.Message[] getMessages(com.android.emailcommon.service.SearchParams,com.android.emailcommon.mail.Folder$MessageRetrievalListener)>
<com.android.ex.variablespeed.SingleThreadedMediaPlayerProxy: int getCurrentPosition()>
<android.webkit.CallbackProxy$UploadFile: android.net.Uri getResult()>
<android.media.videoeditor.AudioTrack: int getAudioSamplingFrequency()>
<com.android.internal.app.ActionBarImpl: int getSelectedNavigationIndex()>
<com.android.inputmethod.latin.Suggest: com.android.inputmethod.latin.Dictionary getMainDictionary()>
<android.drm.DrmEvent: int getUniqueId()>
<com.android.server.wm.DisplayContent: com.android.server.wm.WindowList getWindowList()>
<android.widget.AbsListView: float getTopFadingEdgeStrength()>
<com.android.server.wm.WindowState: android.graphics.Rect getFrameLw()>
<android.graphics.drawable.ShapeDrawable: int getIntrinsicHeight()>
<android.widget.VideoView: int getCurrentPosition()>
<android.server.search.Searchables: android.content.ComponentName getGlobalSearchActivity()>
<android.filterfw.io.GraphReader: android.filterfw.core.FilterGraph readGraphResource(android.content.Context,int)>
<android.graphics.NinePatch: int getWidth()>
<android.webkit.WebSettingsClassic: boolean getUseWideViewPort()>
<android.webkit.ZoomManager: float getMinZoomScale()>
<android.webkit.WebSettings: boolean getMediaPlaybackRequiresUserGesture()>
<android.view.ViewGroup: boolean getChildVisibleRect(android.view.View,android.graphics.Rect,android.graphics.Point)>
<com.android.email.activity.MessageCompose: android.content.Intent getMessageComposeIntent(android.content.Context,long)>
<com.android.mms.dom.DocumentImpl: java.lang.String getInputEncoding()>
<android.filterfw.core.GLFrame: int getTextureId()>
<android.filterfw.core.FrameFormat: int getWidth()>
<android.animation.ValueAnimator: java.lang.Object getAnimatedValue(java.lang.String)>
<android.text.DynamicLayout: int[] getBlockIndices()>
<android.view.View: android.graphics.Matrix getInverseMatrix()>
<android.content.res.TypedArray: android.content.res.ColorStateList getColorStateList(int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordQuality(android.content.ComponentName,int)>
<com.android.videoeditor.widgets.ImageViewTouchBase: float getScale()>
<android.view.inputmethod.InputBinding: android.view.inputmethod.InputConnection getConnection()>
<android.widget.HeaderViewListAdapter: long getItemId(int)>
<android.media.AudioManager: int getLastAudibleStreamVolume(int)>
<android.util.EventLog$Event: java.lang.Object getData()>
<android.text.method.QwertyKeyListener: android.text.method.QwertyKeyListener getInstance(boolean,android.text.method.TextKeyListener$Capitalize)>
<com.android.internal.policy.impl.keyguard.PagedView: float distanceInfluenceForSnapDuration(float)>
<com.android.deskclock.widget.multiwaveview.GlowPadView: int getDirectionDescriptionsResourceId()>
<com.android.commands.monkey.MonkeyMotionEvent: int getAction()>
<android.widget.PopupWindow: int getWindowLayoutType()>
<android.content.res.TypedArray: java.lang.String getNonResourceString(int)>
<com.android.mms.transaction.Transaction: java.lang.String toString()>
<android.app.ActivityManager: android.os.Debug$MemoryInfo[] getProcessMemoryInfo(int[])>
<com.android.email.activity.MessageCompose$ActionSpinnerAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.mms.ui.MessageUtils: java.lang.String getLocalNumber()>
<com.android.mms.util.Recycler$MmsRecycler: int getMessageLimit(android.content.Context)>
<android.view.KeyEvent: java.lang.String getCharacters()>
<android.widget.TextView: float getTextScaleX()>
<android.hardware.Camera$Parameters: java.lang.String getFlashMode()>
<android.app.ActivityThread: android.content.res.Configuration getConfiguration()>
<com.android.mms.transaction.NotificationTransaction: int getType()>
<android.view.accessibility.AccessibilityRecord: int getToIndex()>
<com.android.emailcommon.internet.TextBody: java.io.InputStream getInputStream()>
<android.hardware.Sensor: float getMaximumRange()>
<android.content.ContentResolver: java.io.OutputStream openOutputStream(android.net.Uri,java.lang.String)>
<android.widget.GridLayout: boolean getUseDefaultMargins()>
<android.view.ViewRootImpl$2: android.graphics.Rect getSurfaceFrame()>
<android.webkit.WebSettingsClassic$AutoFillProfile: int getUniqueId()>
<com.android.internal.widget.IRemoteViewsAdapterConnection$Stub: android.os.IBinder asBinder()>
<android.app.ActivityManager: android.app.PendingIntent getRunningServiceControlPanel(android.content.ComponentName)>
<android.filterpacks.imageproc.SaturateFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)>
<com.android.internal.widget.LockPatternUtils: java.lang.String getNextAlarm()>
<com.android.org.bouncycastle.asn1.ASN1Primitive: com.android.org.bouncycastle.asn1.ASN1Primitive toDERObject()>
<android.filterfw.core.VertexFrame: java.lang.Object getObjectValue()>
<android.webkit.WebSettingsClassic: android.webkit.WebSettings$LayoutAlgorithm getLayoutAlgorithm()>
<android.app.PendingIntent: android.app.PendingIntent getService(android.content.Context,int,android.content.Intent,int)>
<android.content.pm.IPackageManager$Stub$Proxy: java.util.List queryPermissionsByGroup(java.lang.String,int)>
<android.view.accessibility.IAccessibilityManagerClient$Stub: android.os.IBinder asBinder()>
<com.android.mms.model.RegionModel: int getLeft()>
<android.graphics.drawable.Drawable: android.graphics.Region getTransparentRegion()>
<android.widget.TextView: int getMinEms()>
<com.android.inputmethod.keyboard.Key: int getMoreKeyLabelFlags()>
<android.widget.ImageView: android.graphics.ColorFilter getColorFilter()>
<android.net.sip.SimpleSessionDescription$Media: int getBandwidth(java.lang.String)>
<android.widget.TextView: android.graphics.Typeface getTypeface()>
<com.android.internal.util.StateMachine$LogRec: com.android.internal.util.State getState()>
<android.mtp.MtpDeviceInfo: java.lang.String getModel()>
<android.view.View: int getLeft()>
<android.webkit.WebViewCore$AutoFillData: java.lang.String getPreviewString()>
<com.android.mms.ui.MessageItem: long getMessageId()>
<android.widget.Switch: int getCompoundPaddingRight()>
<com.android.commands.monkey.MonkeySourceNetwork$MonkeyCommandReturn: java.lang.String getMessage()>
<android.text.method.ReplacementTransformationMethod$SpannedReplacementCharSequence: int getSpanFlags(java.lang.Object)>
<com.android.inputmethod.compat.CompatUtils: java.lang.reflect.Constructor getConstructor(java.lang.Class,java.lang.Class[])>
<android.text.method.MultiTapKeyListener: int getInputType()>
<com.android.org.bouncycastle.asn1.DERBitString: java.lang.String getString()>
<android.graphics.Paint: android.graphics.Xfermode getXfermode()>
<android.sax.Element: android.sax.Element getChild(java.lang.String)>
<android.os.Parcel: java.lang.Object[] readTypedArray(android.os.Parcelable$Creator)>
<android.content.res.CompatibilityInfo$Translator: android.graphics.Rect getTranslatedVisibleInsets(android.graphics.Rect)>
<com.google.android.apps.lightcycle.opengl.DrawableGL: com.google.android.apps.lightcycle.opengl.Shader getShader()>
<com.android.org.bouncycastle.asn1.DERT61String: java.lang.String getString()>
<android.widget.RelativeLayout$DependencyGraph$Node: android.widget.RelativeLayout$DependencyGraph$Node getNextPoolable()>
<android.app.ActivityManager: android.app.ActivityManager$TaskThumbnails getTaskThumbnails(int)>
<android.graphics.drawable.AnimationDrawable: android.graphics.drawable.Drawable getFrame(int)>
<android.widget.GridView: int getRequestedColumnWidth()>
<android.provider.Settings: java.lang.String getGTalkDeviceId(long)>
<android.view.View: int getDrawingCacheBackgroundColor()>
<android.widget.TextView: int getLineAtCoordinate(float)>
<com.android.commands.monkey.MonkeySourceNetwork$CommandQueueImpl: com.android.commands.monkey.MonkeyEvent getNextQueuedEvent()>
<android.media.RemoteControlClient: int getRcseId()>
<com.android.server.PackageManagerBackupAgent: java.util.Set getRestoredPackages()>
<android.content.SyncManager: java.lang.String formatTime(long)>
<android.text.style.SuggestionSpan: int getSpanTypeId()>
<com.android.org.bouncycastle.asn1.ASN1Set: com.android.org.bouncycastle.asn1.ASN1Primitive toDERObject()>
<com.android.internal.app.ActionBarImpl: java.lang.CharSequence getTitle()>
<android.content.pm.ContainerEncryptionParams: long getAuthenticatedDataStart()>
<android.hardware.SensorManager: boolean getRotationMatrix(float[],float[],float[],float[])>
<android.graphics.drawable.RotateDrawable: android.graphics.drawable.Drawable getDrawable()>
<android.view.ViewConfiguration: long getSendRecurringAccessibilityEventsInterval()>
<android.widget.GridLayout: int getColumnCount()>
<com.android.email.activity.UIControllerOnePane: int getLayoutId()>
<android.widget.TextView: int getMaxWidth()>
<com.android.launcher2.LauncherModel: int getCellLayoutChildId(long,int,int,int,int,int)>
<com.android.phone.PhoneInterfaceManager: boolean isDataConnectivityPossible()>
<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewFrameRates()>
<android.os.storage.StorageManager: java.util.List access$000(android.os.storage.StorageManager)>
<com.google.android.apps.lightcycle.storage.LocalFileStorageManager: java.io.File getSessionBaseDirectory()>
<com.android.internal.view.menu.MenuPopupHelper$MenuAdapter: long getItemId(int)>
<android.app.ActivityThread: android.app.Activity getActivity(android.os.IBinder)>
<android.widget.AdapterView: long getSelectedItemId()>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: java.lang.String getPreferredInternationalPrefix()>
<android.graphics.Paint: float getTextRunAdvances(char[],int,int,int,int,int,float[],int,int)>
<android.view.animation.LayoutAnimationController: android.view.animation.Interpolator getInterpolator()>
<android.webkit.WebView: android.webkit.WebSettings getSettings()>
<com.android.email.activity.MailboxFragmentAdapter: long getId(android.database.Cursor)>
<com.android.common.widget.CompositeCursorAdapter: com.android.common.widget.CompositeCursorAdapter$Partition getPartition(int)>
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getPackageName()>
<com.android.inputmethod.keyboard.internal.KeyStylesSet$DeclaredKeyStyle: java.lang.String getString(android.content.res.TypedArray,int)>
<android.app.ApplicationPackageManager: java.lang.String[] getSystemSharedLibraryNames()>
<com.android.internal.util.XmlUtils: java.util.ArrayList readListXml(java.io.InputStream)>
<com.android.mms.dom.smil.SmilDocumentImpl: org.w3c.dom.smil.SMILElement getBody()>
<android.widget.AdapterView: android.widget.AdapterView$OnItemSelectedListener getOnItemSelectedListener()>
<android.content.res.Resources: android.content.res.XmlResourceParser loadXmlResourceParser(int,java.lang.String)>
<android.app.DownloadManager: java.lang.String getMimeTypeForDownloadedFile(long)>
<com.google.android.picasasync.AlbumCollectorJson: java.util.Map getEntryFieldMap()>
<com.android.uiautomator.core.UiSelector: com.android.uiautomator.core.UiSelector getChildSelector()>
<android.os.Environment: java.io.File getEmulatedStorageObbSource()>
<android.os.Bundle: java.lang.String getString(java.lang.String,java.lang.String)>
<com.android.ex.variablespeed.EngineParameters: int getMaxPlayBufferCount()>
<android.os.Debug: int getThreadExternalAllocCount()>
<android.text.util.Rfc822Token: java.lang.String getComment()>
<android.media.MediaPlayer: android.media.Metadata getMetadata(boolean,boolean)>
<android.os.Looper: java.lang.Thread getThread()>
<android.drm.DrmRights: byte[] getData()>
<android.app.ApplicationPackageManager: android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName,int)>
<com.android.internal.widget.LockPatternUtils: int getFallbackAppWidgetId()>
<android.media.IAudioRoutesObserver$Stub: android.os.IBinder asBinder()>
<com.android.mms.dom.smil.SmilDocumentImpl$1: org.w3c.dom.NodeList getTimeChildren()>
<android.os.Bundle: short getShort(java.lang.String)>
<android.media.AudioManager: int getLastAudibleMasterVolume()>
<com.android.launcher2.PagedView: int getPageNearestToCenterOfScreen()>
<android.widget.PopupWindow: int getAnimationStyle()>
<android.app.ApplicationPackageManager: android.content.res.Resources getResourcesForApplication(android.content.pm.ApplicationInfo)>
<android.graphics.drawable.TransitionDrawable$TransitionState: int getChangingConfigurations()>
<android.text.BoringLayout: int getEllipsisCount(int)>
<com.android.commands.monkey.MonkeyKeyEvent: long getEventTime()>
<android.hardware.usb.UsbManager: android.hardware.usb.UsbDeviceConnection openDevice(android.hardware.usb.UsbDevice)>
<android.accessibilityservice.IAccessibilityServiceConnection$Stub$Proxy: float findAccessibilityNodeInfoByViewId(int,long,int,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,long)>
<android.view.MotionEvent: long getEventTimeNano()>
<android.app.Activity: int getTitleColor()>
<android.content.pm.FeatureInfo: java.lang.String getGlEsVersion()>
<android.widget.ViewAnimator: boolean getAnimateFirstView()>
<android.os.Environment$UserEnvironment: java.io.File getExternalStorageAppCacheDirectory(java.lang.String)>
<android.text.style.SuggestionSpan: int getUnderlineColor()>
<com.android.internal.app.ActionBarImpl: int getHeight()>
<com.android.providers.downloads.DownloadProvider$SqlSelection: java.lang.String[] getParameters()>
<android.view.MotionEvent: float getHistoricalOrientation(int)>
<android.app.WallpaperManager$FastBitmapDrawable: int getMinimumHeight()>
<android.view.MotionEvent: float getHistoricalToolMinor(int)>
<android.widget.Spinner: int getDropDownWidth()>
<android.webkit.WebViewClassic: android.graphics.Rect sendOurVisibleRect()>
<android.media.AudioSystem: java.lang.String getDeviceName(int)>
<com.android.musicfx.seekbar.ProgressBar: android.graphics.drawable.Drawable getProgressDrawable()>
<android.media.audiofx.Equalizer: short getNumberOfPresets()>
<android.view.MotionEvent: float getTouchMinor(int)>
<android.app.admin.DevicePolicyManager: int getMaximumFailedPasswordsForWipe(android.content.ComponentName)>
<com.android.org.bouncycastle.asn1.x509.X509Name: com.android.org.bouncycastle.asn1.x509.X509Name getInstance(java.lang.Object)>
<android.media.MediaFile: java.lang.String getMimeTypeForFile(java.lang.String)>
<android.app.SearchableInfo: int getHintId()>
<android.media.MediaRouter: android.media.MediaRouter$RouteInfo getSelectedRoute(int)>
<com.google.android.apps.lightcycle.panorama.PanoramaFrameOverlay: int getTextureId()>
<android.media.videoeditor.MediaImageItem: long getDuration()>
<com.android.launcher2.LauncherModel: com.android.launcher2.ShortcutInfo getShortcutInfo(android.content.pm.PackageManager,android.content.Intent,android.content.Context)>
<com.android.email.activity.MessagesAdapter$MessagesCursorLoader: android.database.Cursor wrapCursor(android.database.Cursor,boolean,com.android.emailcommon.provider.Account,com.android.emailcommon.provider.Mailbox,boolean,boolean,int)>
<com.android.server.display.LogicalDisplay: com.android.server.display.DisplayDevice getPrimaryDisplayDeviceLocked()>
<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String getRegionCodeForCountryCode(int)>
<com.android.launcher2.Hotseat: int getOrderInHotseat(int,int)>
<com.android.phone.InCallUiState: com.android.phone.Constants$CallStatusCode getPendingCallStatusCode()>
<android.text.format.DateUtils: java.lang.String getDayOfWeekString(int,int)>
<android.view.inputmethod.InputBinding: android.os.IBinder getConnectionToken()>
<com.android.videoeditor.service.VideoEditorProject: java.util.ArrayList getUniqueAspectRatiosList()>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getFixedLine()>
<com.google.android.picasasync.UploadsManager: com.google.android.picasasync.UploadsDatabaseHelper getUploadsDatabaseHelper()>
<com.android.videoeditor.OverlayType: java.lang.String getName()>
<com.android.inputmethod.latin.SettingsValues: java.lang.String getInputAttributesDebugString()>
<android.content.pm.ComponentInfo: int getIconResource()>
<com.android.launcher2.SearchDropTargetBar: int getTransitionInDuration()>
<com.android.mms.MmsApp: com.android.mms.util.ThumbnailManager getThumbnailManager()>
<android.filterpacks.imageproc.SimpleImageFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)>
<com.android.email.NotificationController: com.android.email.NotificationController getInstance(android.content.Context)>
<android.app.IProcessObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.google.android.picasasync.UploadsDatabaseHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()>
<android.view.MotionEvent: float getHistoricalX(int,int)>
<android.view.MotionEvent: float getHistoricalY(int,int)>
<android.widget.ListView: int getDividerHeight()>
<com.android.deskclock.timer.CountingTimerView: java.lang.String getTimeString()>
<android.drm.DrmSupportInfo: java.util.Iterator getFileSuffixIterator()>
<com.android.videoeditor.service.ApiService$IntentProcessor: java.util.Iterator getIntentQueueIterator()>
<android.filterpacks.imageproc.VignetteFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)>
<com.android.email.mail.store.ImapFolder: java.lang.String getName()>
<android.app.ActivityManagerProxy: android.os.Debug$MemoryInfo[] getProcessMemoryInfo(int[])>
<android.text.style.SuggestionSpan: int getFlags()>
<android.widget.TableRow: android.view.View getVirtualChildAt(int)>
<android.content.res.XmlBlock$Parser: float getAttributeFloatValue(java.lang.String,java.lang.String,float)>
<com.android.mms.data.Conversation$Cache: com.android.mms.data.Conversation get(long)>
<android.app.ListFragment: long getSelectedItemId()>
<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>
<android.media.videoeditor.TransitionAlpha: int getBlendingPercent()>
<android.view.View: int getScrollBarFadeDuration()>
<android.widget.DatePicker: android.widget.CalendarView getCalendarView()>
<android.filterpacks.performance.Throughput: float getFramesPerSecond()>
<android.app.WallpaperManager: android.graphics.drawable.Drawable peekFastDrawable()>
<android.os.UEventObserver$UEvent: java.lang.String get(java.lang.String,java.lang.String)>
<android.text.method.SingleLineTransformationMethod: char[] getOriginal()>
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor: com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor getInstance(android.content.Context)>
<android.app.backup.BackupManager: android.app.backup.RestoreSession beginRestoreSession()>
<android.media.AudioManager: int getVibrateSetting(int)>
<android.app.ListFragment: int getSelectedItemPosition()>
<android.support.v4.view.AccessibilityDelegateCompat: java.lang.Object getBridge()>
<com.android.inputmethod.latin.suggestions.MoreSuggestionsView$2: com.android.inputmethod.keyboard.KeyboardActionListener getKeyboardActionListener()>
<android.util.SparseLongArray: long get(int,long)>
<android.filterfw.core.FilterSurfaceView: android.filterfw.core.GLEnvironment getGLEnv()>
<android.content.res.Resources: android.content.res.Configuration getConfiguration()>
<android.app.backup.IRestoreSession$Stub$Proxy: int getAvailableRestoreSets(android.app.backup.IRestoreObserver)>
<com.android.internal.widget.multiwaveview.PointCloud$GlowManager: float getY()>
<com.android.internal.widget.multiwaveview.PointCloud$GlowManager: float getX()>
<android.webkit.WebSettings: boolean getNavDump()>
<android.text.method.DateKeyListener: int getInputType()>
<android.webkit.WebViewClassic: java.lang.String[] getHttpAuthUsernamePassword(java.lang.String,java.lang.String)>
<com.android.server.am.TransferPipe: android.os.ParcelFileDescriptor getWriteFd()>
<android.text.StaticLayout: int getEllipsisCount(int)>
<com.android.launcher2.FastBitmapDrawable: int getIntrinsicHeight()>
<com.android.mms.dom.smil.SmilPlayer: int getDuration()>
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: android.widget.RemoteViews getAppWidgetViews(int)>
<android.view.View: java.lang.CharSequence getIterableTextForAccessibility()>
<com.android.internal.statusbar.StatusBarIconList: com.android.internal.statusbar.StatusBarIcon getIcon(int)>
<android.hardware.Camera$Parameters: int getPreviewFrameRate()>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumNonLetter(android.content.ComponentName,int)>
<android.view.MotionEvent: float getAxisValue(int,int)>
<android.view.InputDevice$MotionRange: int getSource()>
<android.gesture.Gesture: java.util.ArrayList getStrokes()>
<com.android.ex.chips.RecipientEntry: java.lang.String getDisplayName()>
<android.media.videoeditor.MediaArtistNativeHelper: int getVideoTransitionBehaviour(int)>
<android.widget.TextView: int getCompoundPaddingTop()>
<com.android.launcher2.LauncherModel: com.android.launcher2.FolderInfo getFolderById(android.content.Context,java.util.HashMap,long)>
<android.content.ContextWrapper: android.content.Context createDisplayContext(android.view.Display)>
<android.media.IRingtonePlayer$Stub: android.os.IBinder asBinder()>
<android.text.format.DateUtils: java.lang.CharSequence getRelativeTimeSpanString(long,long,long)>
<com.android.server.am.ActivityRecord: long getKeyDispatchingTimeout()>
<android.view.MotionEvent: float getHistoricalSize(int)>
<android.content.ContentResolver: android.os.Bundle call(android.net.Uri,java.lang.String,java.lang.String,android.os.Bundle)>
<android.webkit.WebView: android.webkit.WebViewProvider getWebViewProvider()>
<android.content.CursorEntityIterator: android.content.Entity next()>
<com.android.internal.policy.impl.keyguard.KeyguardWidgetPager: int getWidgetPageIndex(android.view.View)>
<android.content.ContentProvider: java.lang.String getWritePermission()>
<android.renderscript.ProgramVertex: int getInputCount()>
<android.os.IUserManager$Stub$Proxy: java.util.List getUsers(boolean)>
<com.android.inputmethod.keyboard.internal.KeyboardCodesSet: int getCode(java.lang.String)>
<com.android.exchange.provider.ExchangeDirectoryProvider: java.lang.String getType(android.net.Uri)>
<android.content.IntentSender: int getCreatorUid()>
<android.graphics.drawable.AnimatedRotateDrawable$AnimatedRotateState: int getChangingConfigurations()>
<android.view.View: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo()>
<android.text.BoringLayout: android.text.Layout$Directions getLineDirections(int)>
<com.android.providers.downloads.DownloadHandler: com.android.providers.downloads.DownloadHandler getInstance()>
<android.webkit.WebSettings: boolean getBlockNetworkImage()>
<android.widget.NumberPicker$InputTextFilter: int getInputType()>
<com.android.email.mail.store.ImapFolder: com.android.emailcommon.mail.Message[] getMessages(int,int,com.android.emailcommon.mail.Folder$MessageRetrievalListener)>
<com.android.ex.chips.RecipientEntry: int getDestinationType()>
<com.android.phone.PhoneInterfaceManager: int disableApnType(java.lang.String)>
<android.view.View: int getMeasuredHeight()>
<android.os.PatternMatcher: int getType()>
<android.text.method.AllCapsTransformationMethod: java.lang.CharSequence getTransformation(java.lang.CharSequence,android.view.View)>
<com.android.launcher2.WeakReferenceThreadLocal: java.lang.Object get()>
<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: java.lang.String getDescriptionForValidNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,java.util.Locale,java.lang.String)>
<com.android.phone.Ringer$Worker: android.os.Looper getLooper()>
<android.text.Layout: int getHeight()>
<android.content.ContextWrapper: java.io.File getFileStreamPath(java.lang.String)>
<com.android.mms.transaction.Transaction: com.android.mms.transaction.TransactionState getState()>
<com.android.server.IntentResolverOld: java.util.Iterator filterIterator()>
<com.android.internal.view.menu.SubMenuBuilder: android.view.Menu getParentMenu()>
<android.graphics.drawable.ShapeDrawable: int getChangingConfigurations()>
<com.android.internal.widget.ScrollingTabContainerView: com.android.internal.widget.ScrollingTabContainerView$TabView access$300(com.android.internal.widget.ScrollingTabContainerView,android.app.ActionBar$Tab,boolean)>
<android.text.method.WordIterator: int getBeginning(int)>
<android.os.storage.StorageVolume: java.io.File getPathFile()>
<android.os.StatFs: int getFreeBlocks()>
<android.webkit.WebViewClassic$PrivateHandler: android.os.Looper getUiLooper()>
<android.util.SparseIntArray: int get(int)>
<android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)>
<com.android.org.bouncycastle.asn1.ASN1Sequence: java.lang.String toString()>
<com.android.uiautomator.core.UiAutomatorBridge: com.android.uiautomator.core.QueryController getQueryController()>
<com.android.systemui.statusbar.phone.PanelView$FlingTracker: float getYVelocity()>
<com.android.email.mail.store.imap.ImapList: com.android.email.mail.store.imap.ImapElement getKeyedElementOrNull(java.lang.String,boolean)>
<com.android.internal.policy.PolicyManager: android.view.FallbackEventHandler makeNewFallbackEventHandler(android.content.Context)>
<android.content.pm.LabeledIntent: java.lang.String getSourcePackage()>
<android.renderscript.Program$BaseProgramBuilder: int getCurrentConstantIndex()>
<android.text.Layout: float getPrimaryHorizontal(int)>
<android.webkit.WebViewClassic: android.graphics.Bitmap getFavicon()>
<com.android.internal.util.TypedProperties: java.lang.String getString(java.lang.String,java.lang.String)>
<com.android.email.activity.ShortcutPickerFragment$AccountPickerLoader: android.database.Cursor loadInBackground()>
<com.android.org.bouncycastle.asn1.x500.X500Name: com.android.org.bouncycastle.asn1.x500.X500NameStyle getDefaultStyle()>
<com.android.mms.util.Recycler: com.android.mms.util.Recycler$SmsRecycler getSmsRecycler()>
<android.widget.ScrollBarDrawable: int getSize(boolean)>
<android.view.ContextThemeWrapper: java.lang.Object getSystemService(java.lang.String)>
<com.android.inputmethod.latin.ExpandableDictionary: android.content.Context getContext()>
<com.android.internal.policy.impl.PhoneFallbackEventHandler: android.app.KeyguardManager getKeyguardManager()>
<android.webkit.WebView: android.net.http.SslCertificate getCertificate()>
<com.android.internal.view.menu.MenuBuilder: java.util.ArrayList getActionItems()>
<android.media.videoeditor.MediaArtistNativeHelper: int getAudioCodecType(int)>
<com.android.inputmethod.latin.LatinIME: int getCurrentAutoCapsState()>
<android.widget.AutoCompleteTextView: int getDropDownHeight()>
<com.android.camera.MosaicFrameProcessor: int createMosaic(boolean)>
<com.android.exchange.adapter.GalParser: com.android.exchange.provider.GalResult getGalResult()>
<com.android.internal.os.ProcessStats: float getTotalCpuPercent()>
<android.preference.SeekBarDialogPreference: android.widget.SeekBar getSeekBar(android.view.View)>
<com.android.launcher2.AppsCustomizeTabHost: android.view.View getContent()>
<com.android.mms.dom.NodeImpl: org.w3c.dom.Node getParentNode()>
<android.text.DynamicLayout: int getEllipsizedWidth()>
<android.preference.PreferenceManager: android.app.Activity getActivity()>
<com.android.camera.CameraActivity: long getShutterToPictureDisplayedTime()>
<android.speech.tts.SynthesisRequest: android.os.Bundle getParams()>
<com.android.internal.policy.impl.keyguard.PagedView: android.view.View getPageAt(int)>
<com.android.org.bouncycastle.asn1.ASN1Primitive: com.android.org.bouncycastle.asn1.ASN1Primitive toDLObject()>
<android.text.DynamicLayout: int getLineTop(int)>
<android.text.BoringLayout: int getBottomPadding()>
<com.android.internal.util.TypedProperties: float getFloat(java.lang.String,float)>
<com.android.internal.widget.EditableInputConnection: android.view.inputmethod.ExtractedText getExtractedText(android.view.inputmethod.ExtractedTextRequest,int)>
<android.filterpacks.imageproc.ContrastFilter: android.filterfw.core.Program getShaderProgram(android.filterfw.core.FilterContext)>
<android.webkit.WebSettingsClassic: java.lang.String getDefaultTextEncodingName()>
<android.app.ActivityThread: android.app.LoadedApk getPackageInfoNoCheck(android.content.pm.ApplicationInfo,android.content.res.CompatibilityInfo)>
<android.opengl.GLUtils: int getInternalFormat(android.graphics.Bitmap)>
<com.android.i18n.phonenumbers.Phonemetadata$NumberFormat: java.lang.String getNationalPrefixFormattingRule()>
<android.widget.TabWidget: int getChildDrawingOrder(int,int)>
<android.media.AudioTrack: int getChannelCount()>
<android.webkit.WebViewClassic: android.webkit.WebViewProvider$ScrollDelegate getScrollDelegate()>
<com.android.mms.model.SlideshowModel: int getTotalMessageSize()>
<android.hardware.display.DisplayManagerGlobal: android.view.DisplayInfo getDisplayInfo(int)>
<android.media.videoeditor.MediaVideoItem: long getDuration()>
<android.speech.tts.PlaybackQueueItem: android.speech.tts.TextToSpeechService$UtteranceProgressDispatcher getDispatcher()>
<android.filterfw.core.SerializedFrame$DirectByteOutputStream: int getSize()>
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ResolveInfo resolveService(android.content.Intent,java.lang.String,int,int)>
<com.android.emailcommon.internet.MimeBodyPart: com.android.emailcommon.mail.Body getBody()>
<android.app.ContextImpl: java.lang.String getPackageName()>
<com.android.launcher2.FocusOnlyTabWidget: int getChildTabIndex(android.view.View)>
<android.view.MotionEvent: float getXPrecision()>
<com.android.internal.policy.impl.keyguard.PagedView: int getChildOffset(int)>
<com.google.android.picasastore.PicasaStoreFacade: java.io.File getCacheDirectory()>
<android.widget.BaseAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)>
<com.android.mms.MmsConfig: int getRecipientLimit()>
<com.android.emailcommon.provider.EmailContent$Attachment: com.android.emailcommon.provider.EmailContent$Attachment[] restoreAttachmentsWithMessageId(android.content.Context,long)>
<android.view.inputmethod.InputMethodManager: java.util.List getInputMethodList()>
<com.android.launcher2.AppsCustomizePagedView: int getSaveInstanceStateIndex()>
<android.preference.Preference: android.os.Bundle getExtras()>
<android.app.ApplicationPackageManager: java.lang.CharSequence getApplicationLabel(android.content.pm.ApplicationInfo)>
<android.graphics.drawable.NinePatchDrawable: android.graphics.Paint getPaint()>
<android.appwidget.AppWidgetHostView: int getAppWidgetId()>
<com.android.mms.ui.ManageSimMessages: android.database.Cursor access$100(com.android.mms.ui.ManageSimMessages)>
<com.android.internal.policy.impl.keyguard.KeyguardWidgetPager: float getOutlineAlphaForPage(int,int,boolean)>
<android.os.StatFs: int getAvailableBlocks()>
<android.view.textservice.SpellCheckerInfo: java.lang.String getId()>
<android.content.ContentProvider$Transport: java.lang.String getProviderName()>
<android.content.Intent: android.content.ComponentName getComponent()>
<android.widget.TextView: int getCompoundDrawablePadding()>
<android.content.ContentProviderClient: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>
<com.android.inputmethod.keyboard.MoreKeysKeyboard$MoreKeysKeyboardParams: int getColumnPos(int)>
<android.widget.NumberPicker: boolean getWrapSelectorWheel()>
<com.android.inputmethod.latin.AdditionalSubtype: android.view.inputmethod.InputMethodSubtype createAdditionalSubtype(java.lang.String)>
<android.view.ViewGroup: android.view.View focusSearch(android.view.View,int)>
<com.android.common.widget.CompositeCursorAdapter: int getCount()>
<android.widget.EditText: android.text.Editable getText()>
<android.widget.ArrayAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)>
<com.android.mms.ui.SlideshowActivity$SmilPlayerController: int getBufferPercentage()>
<com.android.internal.view.IInputMethodCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.android.deskclock.timer.TimerObj: long getTimesupTime()>
<com.android.uiautomator.core.UiSelector: int getInt(int)>
<android.text.method.DateTimeKeyListener: int getInputType()>
<android.app.admin.DevicePolicyManager: boolean getCameraDisabled(android.content.ComponentName)>
<com.android.org.bouncycastle.asn1.DERPrintableString: byte[] getOctets()>
<com.android.server.sip.SipSessionGroup: android.net.sip.SipProfile getLocalProfile()>
<com.android.systemui.recent.RecentsVerticalScrollView: int getHorizontalFadingEdgeLength()>
<android.view.accessibility.AccessibilityRecord: long getSourceNodeId()>
<android.widget.TextView: java.util.Locale getTextLocale()>
<android.support.v4.view.MotionEventCompat$BaseMotionEventVersionImpl: int getPointerCount(android.view.MotionEvent)>
<com.android.internal.widget.LockPatternUtils: android.app.admin.DevicePolicyManager getDevicePolicyManager()>
<android.widget.TabWidget: android.view.View getChildTabViewAt(int)>
<android.app.ActivityManagerProxy: int getPackageScreenCompatMode(java.lang.String)>
<com.google.android.apps.lightcycle.sensor.SensorReader: int getNumGyroSamples()>
<android.os.UserManager: int getUserHandle()>
<android.media.ExifInterface: int getAttributeInt(java.lang.String,int)>
<android.media.MediaRouter$RouteInfo: int getStatusCode()>
<android.view.KeyEvent: int getScanCode()>
<android.text.Layout: int getWidth()>
<android.webkit.WebHistoryItem: android.webkit.WebHistoryItem clone()>
<android.content.res.Resources: android.graphics.drawable.Drawable getDrawableForDensity(int,int)>
<android.content.pm.LabeledIntent: int getLabelResource()>
<com.android.systemui.recent.RecentsPanelView$TaskDescriptionAdapter: long getItemId(int)>
<android.app.ContextImpl: android.content.pm.PackageManager getPackageManager()>
<com.android.email.activity.ThreePaneLayout: int getLeftPaneId()>
<android.content.ContextWrapper: android.graphics.drawable.Drawable getWallpaper()>
<com.android.internal.policy.impl.keyguard.PagedView: int getViewportOffsetX()>
<com.android.internal.policy.impl.keyguard.PagedView: int getViewportOffsetY()>
<android.graphics.drawable.NinePatchDrawable: int getIntrinsicHeight()>
<android.view.KeyEvent: char getMatch(char[])>
<android.media.videoeditor.MediaItem: java.lang.String getId()>
<android.widget.DatePicker: long getMinDate()>
<android.app.ApplicationErrorReport: android.content.ComponentName getErrorReportReceiver(android.content.Context,java.lang.String,int)>
<com.android.emailcommon.internet.MimeHeader: java.lang.String[] getHeader(java.lang.String)>
<com.android.server.wm.ScreenRotationAnimation: android.view.animation.Transformation getEnterTransformation()>
<com.android.mms.dom.smil.SmilRootLayoutElementImpl: java.lang.String getBackgroundColor()>
<com.android.server.accessibility.TouchExplorer$InjectedPointerTracker: int getInjectedPointerDownCount()>
<com.android.phone.InCallUiState: com.android.phone.InCallUiState$ProgressIndicationType getProgressIndication()>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getPersonalNumber()>
<android.graphics.drawable.ShapeDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()>
<android.view.View: android.view.KeyEvent$DispatcherState getKeyDispatcherState()>
<com.android.mms.transaction.SendTransaction: int getType()>
<android.view.GLES20DisplayList: int getSize()>
<com.android.org.bouncycastle.asn1.DERVisibleString: byte[] getOctets()>
<com.android.phone.CallLogAsync: android.os.AsyncTask getLastOutgoingCall(com.android.phone.CallLogAsync$GetLastOutgoingCallArgs)>
<android.view.ViewRootImpl: android.view.AccessibilityInteractionController getAccessibilityInteractionController()>
<com.android.mms.dom.smil.ElementTimeImpl: org.w3c.dom.smil.TimeList getBegin()>
<com.android.mms.transaction.Transaction: int getServiceId()>
<android.webkit.WebViewDatabaseClassic: java.lang.String[] getHttpAuthUsernamePassword(java.lang.String,java.lang.String)>
<com.android.inputmethod.keyboard.PointerTracker$TimeRecorder: long getLastLetterTypingTime()>
<com.android.phone.CallNotifier: boolean getIsCdmaRedialCall()>
<android.widget.RelativeLayout: int getBaseline()>
<com.android.systemui.statusbar.BaseStatusBar: com.android.systemui.statusbar.StatusBarIconView addNotificationViews(android.os.IBinder,com.android.internal.statusbar.StatusBarNotification)>
<android.os.ParcelFileDescriptor: int getFd()>
<android.media.videoeditor.MediaItem: android.media.videoeditor.MediaArtistNativeHelper$ClipSettings getClipSettings()>
<android.text.style.SuggestionSpan: java.lang.String getNotificationTargetClassName()>
<com.android.org.bouncycastle.asn1.ASN1OctetString: com.android.org.bouncycastle.asn1.ASN1OctetStringParser parser()>
<android.webkit.WebBackForwardListClassic: int getCurrentIndex()>
<android.widget.ExpandableListConnector: int getCount()>
<android.speech.tts.TextToSpeech: java.util.List getEngines()>
<com.google.android.apps.lightcycle.opengl.DeviceOrientedSprite: android.graphics.PointF getPosition()>
<com.android.camera.ComboPreferences: java.lang.String getString(java.lang.String,java.lang.String)>
<android.text.style.URLSpan: int getSpanTypeId()>
<com.android.internal.view.menu.MenuItemImpl: android.view.View getActionView()>
<android.content.ClipData: android.graphics.Bitmap getIcon()>
<android.content.Intent: java.lang.CharSequence getCharSequenceExtra(java.lang.String)>
<android.content.res.Resources: java.lang.CharSequence getQuantityText(int,int)>
<android.view.KeyEvent: int getKeyboardDevice()>
<android.provider.MediaStore$Images$Media: android.graphics.Bitmap getBitmap(android.content.ContentResolver,android.net.Uri)>
<android.view.MotionEvent: float getToolMajor()>
<android.media.audiofx.AudioEffect: int getParameter(int[],byte[])>
<com.android.mms.ui.SlideshowEditActivity$SlideListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<android.content.ClipboardManager: android.content.ClipData getPrimaryClip()>
<android.text.BoringLayout: int getHeight()>
<com.android.videoeditor.service.VideoEditorProject: com.android.videoeditor.service.MovieAudioTrack getAudioTrack(java.lang.String)>
<android.drm.DrmInfoRequest: java.lang.Object get(java.lang.String)>
<com.android.videoeditor.service.MovieMediaItem: long getAppBoundaryEndTime()>
<com.android.internal.view.IInputContextCallback$Stub: android.os.IBinder asBinder()>
<android.filterfw.core.KeyValueMap: float getFloat(java.lang.String)>
<android.app.ActivityManagerProxy: android.graphics.Bitmap getTaskTopThumbnail(int)>
<android.app.ContextImpl: java.io.File getExternalFilesDir(java.lang.String)>
<com.android.videoeditor.widgets.ProgressBar: int getHeight()>
<android.media.MediaRouter: android.media.MediaRouter$RouteInfo getSystemAudioRoute()>
<android.view.View: int getHorizontalFadingEdgeLength()>
<android.graphics.Canvas: int getDensity()>
<com.google.android.apps.lightcycle.sensor.OrientationEKF: double[] getGLMatrix()>
<android.widget.AbsListView: java.lang.CharSequence getTextFilter()>
<android.hardware.SensorManager: java.util.List getSensorList(int)>
<com.android.videoeditor.service.MovieTransition: java.lang.Class getTypeClass()>
<android.media.videoeditor.Transition: int getBehavior()>
<com.android.mms.dom.smil.SmilDocumentImpl: org.w3c.dom.smil.SMILElement getHead()>
<com.android.videoeditor.service.VideoEditorProject: java.lang.String getName()>
<android.view.accessibility.AccessibilityRecord: int getFromIndex()>
<com.android.launcher2.IconCache: android.graphics.drawable.Drawable getFullResIcon(android.content.pm.ActivityInfo)>
<android.util.Property: java.lang.String getName()>
<android.view.inputmethod.CorrectionInfo: java.lang.CharSequence getOldText()>
<com.android.internal.util.FastXmlSerializer: int getDepth()>
<android.os.ISchedulingPolicyService$Stub: android.os.IBinder asBinder()>
<com.android.org.bouncycastle.asn1.DERNumericString: java.lang.String getString()>
<android.media.videoeditor.MediaVideoItem: long getTimelineDuration()>
<android.webkit.WebViewFragment: android.webkit.WebView getWebView()>
<android.app.WallpaperManager$FastBitmapDrawable: int getIntrinsicHeight()>
<com.android.org.bouncycastle.asn1.DERGeneralizedTime: com.android.org.bouncycastle.asn1.ASN1GeneralizedTime getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)>
<android.view.GLES20DisplayList: int getNativeDisplayList()>
<com.android.internal.view.menu.ActionMenuItem: int getItemId()>
<android.os.CommonTimeUtils: java.lang.String transactGetString(int,java.lang.String)>
<com.android.launcher2.CellLayout: float getChildrenScale()>
<com.android.internal.app.ActionBarImpl$ActionModeImpl: android.view.View getCustomView()>
<com.android.inputmethod.latin.UserHistoryForgettingCurveUtils$ForgettingCurveParams: byte getFc()>
<android.preference.RingtonePreference: int getRingtoneType()>
<android.widget.TextView: int getFadeTop(boolean)>
<android.emoji.EmojiFactory: int getVendorSpecificSjisFromAndroidPua(int)>
<android.media.videoeditor.AudioTrack: java.lang.String getFilename()>
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getClassName()>
<com.android.emailcommon.utility.AttachmentUtilities: java.io.File getAttachmentDirectory(android.content.Context,long)>
<com.android.inputmethod.latin.ResizableIntArray: int get(int)>
<com.android.inputmethod.keyboard.MoreKeysKeyboard$MoreKeysKeyboardParams: int getX(int,int)>
<android.app.ApplicationPackageManager: android.content.pm.ProviderInfo resolveContentProvider(java.lang.String,int)>
<android.view.WindowManagerGlobal: android.view.WindowManagerGlobal getInstance()>
<com.android.mms.dom.ElementImpl: short getNodeType()>
<android.app.backup.BackupManager: int requestRestore(android.app.backup.RestoreObserver)>
<android.widget.TextView: android.text.Editable getEditableText()>
<android.view.SurfaceView$4: android.view.Surface getSurface()>
<android.view.View: int getSolidColor()>
<android.webkit.WebViewClassic: int getBlockLeftEdge(int,int,float)>
<com.android.internal.policy.impl.keyguard.KeyguardActivityLauncher: com.android.internal.policy.impl.keyguard.KeyguardActivityLauncher$CameraWidgetInfo getCameraWidgetInfo()>
<android.text.Layout: int getParagraphLeft(int)>
<com.android.camera.Util: android.hardware.Camera$Size getOptimalVideoSnapshotPictureSize(java.util.List,double)>
<android.webkit.WebBackForwardList: int getCurrentIndex()>
<android.filterpacks.imageproc.DocumentaryFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)>
<android.widget.BaseAdapter: int getViewTypeCount()>
<com.android.videoeditor.widgets.HorizontalScrollView: float getRightFadingEdgeStrength()>
<android.app.backup.RestoreSession: int getAvailableRestoreSets(android.app.backup.RestoreObserver)>
<com.android.server.NativeDaemonEvent: java.lang.String getField(int)>
<android.view.KeyEvent: int getModifiers()>
<android.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)>
<android.graphics.drawable.GradientDrawable: android.graphics.drawable.GradientDrawable$Orientation getOrientation()>
<com.android.launcher2.Launcher: com.android.launcher2.Hotseat getHotseat()>
<android.speech.tts.SynthesisRequest: int getSpeechRate()>
<android.view.accessibility.IAccessibilityInteractionConnectionCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.android.emailcommon.internet.MimeBodyPart: java.lang.String getContentType()>
<android.media.AudioManager: java.lang.String getParameters(java.lang.String)>
<com.android.org.bouncycastle.asn1.DERExternal: com.android.org.bouncycastle.asn1.ASN1Integer getIndirectReference()>
<com.android.providers.media.MediaProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)>
<com.google.android.picasasync.UploadsManager: com.google.android.picasasync.SyncTaskProvider getManualPhotoUploadTaskProvider()>
<com.android.internal.view.menu.MenuPopupHelper$MenuAdapter: com.android.internal.view.menu.MenuItemImpl getItem(int)>
<android.text.TextLine: int getOffsetToLeftRightOf(int,boolean)>
<android.hardware.usb.UsbInterface: int getInterfaceSubclass()>
<android.preference.PreferenceManager: long getNextId()>
<com.android.phone.PhoneInterfaceManager: int getLteOnCdmaMode()>
<android.text.style.BackgroundColorSpan: int getBackgroundColor()>
<android.widget.FastScroller$ScrollFade: int getAlpha()>
<com.android.server.display.OverlayDisplayAdapter$OverlayDisplayDevice: com.android.server.display.DisplayDeviceInfo getDisplayDeviceInfoLocked()>
<com.android.mms.transaction.MessagingNotification: long getSmsThreadId(android.content.Context,android.net.Uri)>
<android.webkit.ZoomControlExternal: android.webkit.ZoomControlExternal$ExtendedZoomControls getControls()>
<com.android.org.bouncycastle.asn1.ASN1Sequence: com.android.org.bouncycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>
<android.widget.ViewAnimator: int getDisplayedChild()>
<com.android.internal.widget.SlidingTab$Slider: int getTabHeight()>
<android.speech.tts.SynthesisRequest: java.lang.String getCountry()>
<android.text.Layout: int getLineAscent(int)>
<android.widget.CursorTreeAdapter: long getChildId(int,int)>
<android.webkit.WebViewClassic: int getProgress()>
<com.android.email.activity.setup.AccountServerBaseFragment: android.os.Bundle getSettingsModeArgs()>
<android.text.BoringLayout: int getEllipsizedWidth()>
<android.hardware.input.IInputManager$Stub$Proxy: int[] getInputDeviceIds()>
<com.android.org.bouncycastle.asn1.DERNumericString: com.android.org.bouncycastle.asn1.DERNumericString getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)>
<android.view.IApplicationToken$Stub: android.os.IBinder asBinder()>
<android.webkit.CookieSyncManager: android.webkit.CookieSyncManager createInstance(android.content.Context)>
<com.android.deskclock.Utils: int getGrayColorId()>
<com.android.org.bouncycastle.asn1.DERVisibleString: com.android.org.bouncycastle.asn1.DERVisibleString getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)>
<com.google.android.apps.lightcycle.sensor.SensorReader: float getImuOrientationDegrees()>
<android.media.videoeditor.MediaProperties: int[] getSupportedVideoCodecs()>
<android.hardware.Camera$Parameters: java.util.List getSupportedColorEffects()>
<android.os.UserManager: android.graphics.Bitmap getUserIcon(int)>
<android.os.IUserManager$Stub$Proxy: int getUserHandle(int)>
<android.view.MotionEvent: int getActionMasked()>
<com.android.inputmethod.accessibility.KeyCodeDescriptionMapper: java.lang.String getDescriptionForKey(android.content.Context,com.android.inputmethod.keyboard.Keyboard,com.android.inputmethod.keyboard.Key,boolean)>
<android.content.ContextWrapper: java.io.File getSharedPrefsFile(java.lang.String)>
<com.android.inputmethod.keyboard.Key: int getAltCode()>
<android.filterfw.format.PrimitiveFormat: android.filterfw.core.MutableFrameFormat createDoubleFormat(int)>
<android.app.LoadedApk: android.content.res.Resources getResources(android.app.ActivityThread)>
<android.view.Window: android.content.Context getContext()>
<android.view.View: int getPaddingEnd()>
<android.app.Dialog: int getVolumeControlStream()>
<android.media.videoeditor.TransitionSliding: int getDirection()>
<android.widget.AdapterViewAnimator: android.view.View getCurrentView()>
<com.android.systemui.ExpandHelper$ViewScaler: int getNaturalHeight(int)>
<com.android.camera.FocusOverlayManager: java.util.List getMeteringAreas()>
<com.android.mms.layout.LayoutManager: com.android.mms.layout.LayoutParameters getLayoutParameters()>
<android.view.IWindow$Stub: android.os.IBinder asBinder()>
<android.filterfw.core.FilterSurfaceView: int getSurfaceId()>
<android.webkit.CacheManager: android.webkit.CacheManager$CacheResult getCacheFile(java.lang.String,java.util.Map)>
<android.view.View$AttachInfo$InvalidateInfo: android.view.View$AttachInfo$InvalidateInfo getNextPoolable()>
<android.content.ContentProviderProxy: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)>
<android.view.PointerIcon: android.view.PointerIcon load(android.content.Context)>
<android.view.animation.Animation: int getRepeatMode()>
<com.android.org.bouncycastle.asn1.DERExternal: com.android.org.bouncycastle.asn1.ASN1Primitive getDataValueDescriptor()>
<android.os.storage.StorageVolume: java.lang.String getDescription(android.content.Context)>
<com.android.emailcommon.internet.MimeMultipart: java.io.InputStream getInputStream()>
<com.android.email.VendorPolicyLoader: android.os.Bundle getPolicy(java.lang.String,android.os.Bundle)>
<com.android.videoeditor.service.MovieTransition: long getAppDuration()>
<android.webkit.WebSettings: java.lang.String getDefaultTextEncodingName()>
<android.webkit.WebView: int getProgress()>
<com.android.internal.view.menu.MenuItemImpl: android.view.ContextMenu$ContextMenuInfo getMenuInfo()>
<android.widget.ExpandableListConnector: java.lang.Object getItem(int)>
<com.android.internal.widget.LockPatternView$Cell: int getRow()>
<com.android.internal.app.ActionBarImpl: android.view.View getCustomView()>
<com.android.deskclock.widget.swipeablelistview.SwipeableListView: android.view.View getChildContentView(android.view.View)>
<android.mtp.MtpStorage: int getStorageId()>
<android.preference.PreferenceGroupAdapter: int getItemViewType(int)>
<android.widget.AbsListView: android.view.View getSelectedView()>
<android.text.style.ScaleXSpan: float getScaleX()>
<android.filterfw.core.SimpleFrame: java.lang.Object getObjectValue()>
<android.content.ComponentName: java.lang.String getShortClassName()>
<android.hardware.usb.UsbInterface: int getEndpointCount()>
<android.widget.TextView: java.lang.CharSequence getIterableTextForAccessibility()>
<android.view.ActionMode: java.lang.Object getTag()>
<android.graphics.drawable.NinePatchDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()>
<android.widget.SimpleCursorAdapter: int getStringConversionColumn()>
<android.view.MotionEvent: float getHistoricalToolMajor(int)>
<android.widget.RemoteViewsAdapter$RemoteViewsMetaData: android.widget.RemoteViewsAdapter$RemoteViewsFrameLayout access$1900(android.widget.RemoteViewsAdapter$RemoteViewsMetaData,int,android.view.View,android.view.ViewGroup,java.lang.Object,android.view.LayoutInflater,android.widget.RemoteViews$OnClickHandler)>
<android.webkit.WebBackForwardListClassic: android.webkit.WebHistoryItem getItemAtIndex(int)>
<com.android.mms.dom.smil.SmilMediaElementImpl: java.lang.String getSrc()>
<android.mtp.MtpStorage: long getReserveSpace()>
<android.util.XmlPullAttributes: java.lang.String getAttributeName(int)>
<com.android.launcher2.Launcher: com.android.launcher2.Workspace getWorkspace()>
<android.webkit.DateSorter: long getBoundary(int)>
<android.hardware.input.InputManager: android.view.InputDevice getInputDeviceByDescriptor(java.lang.String)>
<android.view.TextureView: int getLayerType()>
<com.android.internal.policy.impl.PhoneWindowManager: int getNonDecorDisplayHeight(int,int,int)>
<android.text.style.UnderlineSpan: int getSpanTypeId()>
<android.app.SearchableInfo: int getIconId()>
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$Callback getCallback()>
<android.view.MotionEvent: float getHistoricalOrientation(int,int)>
<com.android.server.WiredAccessoryManager$WiredAccessoryObserver$UEventInfo: java.lang.String getDevName()>
<com.google.android.picasasync.UploadTaskEntry: android.content.ComponentName getComponentName()>
<android.webkit.WebViewClassic: android.webkit.WebChromeClient getWebChromeClient()>
<android.view.PointerIcon: int getStyle()>
<com.android.email.activity.UIControllerBase: com.android.email.activity.MessageOrderManager getMessageOrderManager()>
<android.animation.Keyframe: float getFraction()>
<android.text.style.AlignmentSpan$Standard: int getSpanTypeId()>
<android.filterfw.core.FrameFormat: int getValuesPerSample()>
<android.content.ContentValues: java.lang.Byte getAsByte(java.lang.String)>
<android.app.Activity: java.util.HashMap getLastNonConfigurationChildInstances()>
<com.android.server.power.DisplayPowerState: int getScreenBrightness()>
<com.android.internal.os.PowerProfile: double getBatteryCapacity()>
<android.widget.TextView: int getMaxEms()>
<android.app.IWallpaperManager$Stub$Proxy: int getWidthHint()>
<android.webkit.PluginManager: java.lang.String[] getPluginDirectories()>
<com.android.inputmethod.compat.CompatUtils: java.lang.Object getFieldValue(java.lang.Object,java.lang.Object,java.lang.reflect.Field)>
<android.view.inputmethod.InputConnectionWrapper: java.lang.CharSequence getTextAfterCursor(int,int)>
<android.app.ActivityOptions: android.graphics.Bitmap getThumbnail()>
<android.content.Intent: java.lang.String[] getStringArrayExtra(java.lang.String)>
<android.text.SpannableStringInternal: java.lang.Object[] getSpans(int,int,java.lang.Class)>
<android.content.AsyncQueryHandler: android.os.Handler createHandler(android.os.Looper)>
<android.app.ContextImpl: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>
<android.content.ContextWrapper: int getThemeResId()>
<android.media.AudioRecord: int getNotificationMarkerPosition()>
<android.content.res.XmlBlock$Parser: java.lang.String getClassAttribute()>
<com.android.internal.widget.multiwaveview.PointCloud$WaveManager: float getAlpha()>
<com.android.internal.backup.IBackupTransport$Stub$Proxy: android.content.Intent configurationIntent()>
<android.media.RingtoneManager: boolean getIncludeDrm()>
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.FeatureInfo[] getSystemAvailableFeatures()>
<android.util.NtpTrustedTime: long getCacheAge()>
<android.filterfw.core.InputPort: android.filterfw.core.Filter getSourceFilter()>
<android.widget.BaseExpandableListAdapter: long getCombinedGroupId(long)>
<android.graphics.Bitmap: int getScaledWidth(android.graphics.Canvas)>
<com.android.email.activity.MailboxFinder: com.android.email.Controller$Result getControllerResultsForTest()>
<android.view.TextureView: android.view.TextureView$SurfaceTextureListener getSurfaceTextureListener()>
<com.android.systemui.recent.RecentsVerticalScrollView: int getVerticalFadingEdgeLength()>
<com.android.mms.transaction.TransactionSettings: int getProxyPort()>
<com.android.internal.app.ActionBarImpl$TabImpl: android.app.ActionBar$TabListener getCallback()>
<android.content.res.TypedArray: int getLayoutDimension(int,java.lang.String)>
<android.app.ApplicationPackageManager: android.content.res.XmlResourceParser getXml(java.lang.String,int,android.content.pm.ApplicationInfo)>
<com.android.inputmethod.keyboard.KeyDetector: int getTouchX(int)>
<com.android.inputmethod.keyboard.KeyDetector: int getTouchY(int)>
<com.android.org.bouncycastle.asn1.x509.SubjectPublicKeyInfo: com.android.org.bouncycastle.asn1.x509.AlgorithmIdentifier getAlgorithmId()>
<com.android.mms.transaction.RetrieveTransaction: byte[] getPdu(java.lang.String)>
<android.net.sip.SipSession: android.net.sip.SipProfile getPeerProfile()>
<com.android.mms.model.ContentRestrictionFactory: com.android.mms.model.ContentRestriction getContentRestriction()>
<android.os.ICancellationSignal$Stub: android.os.IBinder asBinder()>
<android.widget.Scroller: int getStartY()>
<android.widget.Scroller: int getStartX()>
<android.widget.TimePicker: java.lang.Integer getCurrentMinute()>
<android.text.Layout: int getLineForOffset(int)>
<android.view.IWindowManager$Stub$Proxy: void getVisibleWindowsForDisplay(int,java.util.List)>
<android.widget.AdapterViewAnimator: android.view.View getSelectedView()>
<android.media.videoeditor.MediaImageItem: int getAspectRatio()>
<android.widget.TextView: android.content.res.ColorStateList getTextColors()>
<android.filterfw.core.Frame: int getBindingType()>
<com.android.videoeditor.service.VideoEditorProject: com.android.videoeditor.service.MovieMediaItem getNextMediaItem(java.lang.String)>
<com.google.android.picasasync.PicasaFacade: java.lang.String getAuthority()>
<com.android.phone.PhoneGlobals: android.app.PendingIntent getSendSmsFromNotificationPendingIntent(android.content.Context,java.lang.String)>
<android.preference.TwoStatePreference: boolean getDisableDependentsState()>
<com.android.camera.ui.PieItem: int getIntrinsicHeight()>
<android.filterpacks.imageproc.AlphaBlendFilter: android.filterfw.core.Program getShaderProgram(android.filterfw.core.FilterContext)>
<android.webkit.WebViewCore: android.webkit.WebViewClassic getWebViewClassic()>
<android.preference.Preference: java.lang.StringBuilder getFilterableStringBuilder()>
<android.media.TimedText: android.graphics.Rect getBounds()>
<android.view.View: float getTranslationY()>
<android.view.View: float getTranslationX()>
<com.android.mms.data.RecipientIdCache: java.util.List getAddresses(java.lang.String)>
<android.view.inputmethod.BaseInputConnection: java.lang.CharSequence getTextAfterCursor(int,int)>
<com.android.systemui.screenshot.GlobalScreenshot$5: float getInterpolation(float)>
<com.android.systemui.screenshot.GlobalScreenshot$4: float getInterpolation(float)>
<com.android.inputmethod.latin.LogEntries$DeviceInfoEntry: com.android.inputmethod.latin.LogEntries$DeviceInfoEntry getInstance(long,android.content.Context)>
<android.content.ClipDescription: java.lang.CharSequence getLabel()>
<android.app.PendingIntent: java.lang.String getTargetPackage()>
<com.android.launcher2.LauncherAppWidgetHostView: int getDescendantFocusability()>
<android.widget.GridView: int getNumColumns()>
<android.text.Layout$SpannedEllipsizer: int getSpanStart(java.lang.Object)>
<android.widget.AdapterViewAnimator: android.widget.Adapter getAdapter()>
<android.net.Credentials: int getUid()>
<android.app.ActivityManagerProxy: android.content.res.Configuration getConfiguration()>
<android.content.res.XmlBlock$Parser: java.lang.Object getProperty(java.lang.String)>
<android.widget.TextView: android.os.Bundle getInputExtras(boolean)>
<com.android.internal.app.ActionBarImpl$TabImpl: android.graphics.drawable.Drawable getIcon()>
<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.PhoneNumberUtil$MatchType isNumberMatch(java.lang.String,java.lang.String)>
<android.hardware.usb.UsbDevice: int getDeviceSubclass()>
<com.android.server.sip.SipSessionGroup$SipSessionImpl: java.lang.String getLocalIp()>
<com.android.ex.chips.RecipientEntry: long getContactId()>
<android.graphics.Canvas: int getMaximumBitmapHeight()>
<com.android.mms.data.WorkingMessage: java.lang.CharSequence getSubject()>
<android.webkit.PluginManager: android.webkit.PluginManager getInstance(android.content.Context)>
<com.android.phone.EditPhoneNumberPreference: java.lang.String getRawPhoneNumber()>
<android.text.PackedIntVector: int getValue(int,int)>
<android.os.Debug: int getGlobalExternalAllocSize()>
<android.content.ClipData$Item: java.lang.String getHtmlText()>
<android.support.v4.view.VelocityTrackerCompat: float getXVelocity(android.view.VelocityTracker,int)>
<android.app.ApplicationPackageManager: java.lang.CharSequence getText(java.lang.String,int,android.content.pm.ApplicationInfo)>
<com.android.internal.view.menu.MenuItemImpl: char getAlphabeticShortcut()>
<com.android.providers.downloads.DownloadDrmHelper: java.lang.String getOriginalMimeType(android.content.Context,java.lang.String,java.lang.String)>
<com.android.mms.ui.RecipientListActivity$RecipientListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<android.support.v4.app.TaskStackBuilder$TaskStackBuilderImplHoneycomb: android.app.PendingIntent getPendingIntent(android.content.Context,android.content.Intent[],int,int,android.os.Bundle)>
<com.android.internal.view.menu.MenuBuilder: java.util.ArrayList getVisibleItems()>
<com.android.deskclock.widget.multiwaveview.TargetDrawable: float getAlpha()>
<android.filterpacks.imageproc.FillLightFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)>
<com.android.deskclock.widget.multiwaveview.PointCloud$WaveManager: float getAlpha()>
<android.view.View: int getOverScrollMode()>
<android.os.AsyncTask: java.lang.Object get(long,java.util.concurrent.TimeUnit)>
<com.android.internal.widget.multiwaveview.GlowPadView: int getDirectionDescriptionsResourceId()>
<android.widget.ExpandableListView: long getPackedPositionForGroup(int)>
<com.android.launcher2.CellLayout: int getHeightGap()>
<android.widget.ListPopupWindow: int getHorizontalOffset()>
<com.google.android.apps.lightcycle.sensor.SensorReader: double getHeadingDegrees()>
<android.graphics.drawable.ColorDrawable: int getOpacity()>
<com.android.mms.data.Conversation: java.lang.String getSnippet()>
<android.renderscript.Script$FieldBase: android.renderscript.Allocation getAllocation()>
<com.android.launcher2.PagedView: int getNextPage()>
<android.speech.tts.TextToSpeech: java.lang.String getDefaultEngine()>
<android.widget.NumberPicker: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()>
<com.android.inputmethod.latin.ResourceUtils: float getFraction(android.content.res.TypedArray,int,float)>
<android.content.res.XmlBlock$Parser: java.lang.String getAttributeNamespace(int)>
<com.android.internal.policy.impl.keyguard.KeyguardCircleFramedDrawable: int getOpacity()>
<com.android.phone.PhoneInterfaceManager: java.util.List getNeighboringCellInfo()>
<android.content.res.TypedArray: java.lang.CharSequence getText(int)>
<android.app.PendingIntent: android.app.PendingIntent getActivities(android.content.Context,int,android.content.Intent[],int)>
<android.view.View$DragShadowBuilder: android.view.View getView()>
<android.webkit.WebSettingsClassic: java.lang.String getDefaultUserAgentForLocale(android.content.Context,java.util.Locale)>
<android.app.ListFragment: android.widget.ListAdapter getListAdapter()>
<com.android.email.activity.UIControllerTwoPane$ActionBarControllerCallback: long getUIAccountId()>
<android.support.v4.view.PagerAdapter: float getPageWidth(int)>
<com.android.email.FolderProperties: int getMessageCount(android.database.Cursor)>
<com.android.phone.PhoneInterfaceManager: int getCdmaEriIconIndex()>
<com.android.inputmethod.latin.UserHistoryForgettingCurveUtils$ForgettingCurveParams: int getFrequency()>
<com.android.emailcommon.internet.MimeMessage: java.lang.String getFirstHeader(java.lang.String)>
<android.widget.AbsListView: float getBottomFadingEdgeStrength()>
<android.view.Window: android.view.Window getContainer()>
<com.android.inputmethod.latin.RichInputConnection: java.lang.CharSequence getTextBeforeCursor(int,int)>
<android.widget.TextView: int getLineBounds(int,android.graphics.Rect)>
<android.media.videoeditor.Transition: android.media.videoeditor.MediaItem getAfterMediaItem()>
<android.widget.LinearLayout: int getNextLocationOffset(android.view.View)>
<android.view.accessibility.AccessibilityInteractionClient: java.util.List findAccessibilityNodeInfosByText(int,int,long,java.lang.String)>
<com.android.internal.os.RuntimeInit$1: java.lang.String getId()>
<android.renderscript.RenderScript: android.renderscript.RenderScript create(android.content.Context)>
<com.google.android.picasasync.UploadTaskEntry: java.lang.String getCaption()>
<android.filterfw.core.FrameFormat: int getDimension(int)>
<com.android.inputmethod.keyboard.MainKeyboardView: com.android.inputmethod.keyboard.PointerTracker$TimerProxy getTimerProxy()>
<com.android.internal.widget.ActionBarView: java.lang.CharSequence getSubtitle()>
<android.renderscript.BaseObj: java.lang.String getName()>
<android.widget.CursorTreeAdapter: android.database.Cursor getChild(int,int)>
<com.android.email.mail.Sender: com.android.email.mail.Sender getInstance(android.content.Context,com.android.emailcommon.provider.Account)>
<com.android.org.bouncycastle.asn1.ASN1TaggedObject: com.android.org.bouncycastle.asn1.ASN1Primitive toDERObject()>
<android.filterfw.core.OutputPort: android.filterfw.core.InputPort getBasePort()>
<com.android.camera.ui.OverlayRenderer: int getHeight()>
<android.media.ExifInterface: java.lang.String getAttribute(java.lang.String)>
<android.view.WindowManagerImpl: android.view.Display getDefaultDisplay()>
<com.android.camera.ComboPreferences: float getFloat(java.lang.String,float)>
<android.media.audiofx.Equalizer: int getCenterFreq(short)>
<com.android.launcher2.DragLayer: android.view.View getAnimatedView()>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int,android.graphics.Matrix,boolean)>
<com.android.inputmethod.keyboard.Key: java.lang.String getOutputText()>
<com.google.android.apps.lightcycle.opengl.Shader: int getAttribute(int,java.lang.String)>
<android.widget.AbsListView: int getSolidColor()>
<com.android.mms.MmsConfig: int getDefaultMMSMessagesPerThread()>
<android.widget.ExpandableListView: android.widget.ExpandableListAdapter getExpandableListAdapter()>
<com.android.internal.widget.multiwaveview.TargetDrawable: float getScaleY()>
<android.widget.DatePicker: int getYear()>
<com.android.internal.widget.multiwaveview.TargetDrawable: float getScaleX()>
<android.os.DropBoxManager$Entry: java.io.InputStream getInputStream()>
<com.android.launcher2.Workspace$ZInterpolator: float getInterpolation(float)>
<android.hardware.input.InputManager: java.lang.String[] getKeyboardLayoutsForInputDevice(java.lang.String)>
<android.view.ViewConfiguration: int getScaledMaximumFlingVelocity()>
<com.android.internal.policy.impl.keyguard.KeyguardWidgetPager: long getUserActivityTimeout()>
<android.widget.GridView: int getGravity()>
<com.android.email.activity.MessagesAdapter$SearchCursorLoader: android.database.Cursor wrapCursor(android.database.Cursor,boolean,com.android.emailcommon.provider.Account,com.android.emailcommon.provider.Mailbox,boolean,boolean,int)>
<com.android.email.Preferences: java.lang.String getDeviceUID()>
<android.inputmethodservice.InputMethodService: int getCandidatesHiddenVisibility()>
<android.provider.Settings$Secure: int getInt(android.content.ContentResolver,java.lang.String)>
<android.content.CursorLoader: java.lang.String[] getSelectionArgs()>
<com.android.videoeditor.service.MovieTheme: java.lang.String getId()>
<android.webkit.HTML5VideoView: int getCurrentState()>
<android.os.IVibratorService$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.app.admin.DevicePolicyManager: int getPasswordMinimumUpperCase(android.content.ComponentName,int)>
<android.content.res.ColorStateList: android.content.res.ColorStateList createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser)>
<com.android.emailcommon.internet.MimeMessage: java.lang.String getContentType()>
<android.os.Messenger: android.os.IBinder getBinder()>
<android.view.View: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()>
<android.renderscript.RenderScriptGL: int getWidth()>
<android.provider.Settings$Secure: int getInt(android.content.ContentResolver,java.lang.String,int)>
<android.media.AudioManager: int getMasterVolume()>
<android.content.IIntentSender$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.android.ex.chips.RecipientEntry: java.lang.String getDestination()>
<com.android.inputmethod.latin.AdditionalSubtype: android.view.inputmethod.InputMethodSubtype[] createAdditionalSubtypesArray(java.lang.String)>
<android.graphics.drawable.shapes.Shape: android.graphics.drawable.shapes.Shape clone()>
<android.util.TimeUtils: java.util.TimeZone getTimeZone(int,boolean,long,java.lang.String)>
<com.android.phone.PhoneGlobals: android.os.UpdateLock getUpdateLock()>
<android.widget.ListPopupWindow: int getInputMethodMode()>
<com.android.org.bouncycastle.asn1.DERUniversalString: com.android.org.bouncycastle.asn1.DERUniversalString getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)>
<com.android.systemui.statusbar.phone.NavigationBarView: android.view.View getSearchLight()>
<android.view.Choreographer: long getFrameTime()>
<android.webkit.WebView: android.webkit.WebBackForwardList saveState(android.os.Bundle)>
<android.widget.RemoteViewsAdapter$FixedSizeRemoteViewsCache: android.widget.RemoteViewsAdapter$RemoteViewsIndexMetaData getMetaDataAt(int)>
<com.android.ex.chips.RecipientEditTextView: android.graphics.drawable.Drawable getChipBackground(com.android.ex.chips.RecipientEntry)>
<android.gesture.Gesture: int getStrokesCount()>
<com.android.emailcommon.internet.MimeUtility: java.lang.String getHeaderParameter(java.lang.String,java.lang.String)>
<android.webkit.WebSettings: java.lang.String getCursiveFontFamily()>
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String[] canonicalToCurrentPackageNames(java.lang.String[])>
<android.webkit.ZoomManager: float getInvDefaultScale()>
<com.android.mms.dom.events.EventImpl: int getSeekTo()>
<com.android.deskclock.Utils: java.lang.String getCityName(com.android.deskclock.worldclock.CityObj,com.android.deskclock.worldclock.CityObj)>
<com.android.inputmethod.keyboard.MainKeyboardView: int getAltCodeKeyWhileTypingAnimAlpha()>
<com.android.musicfx.ControlPanelEffect: java.lang.String getParameterString(android.content.Context,java.lang.String,int,java.lang.String)>
<android.content.pm.ContainerEncryptionParams: java.security.spec.AlgorithmParameterSpec getEncryptionSpec()>
<com.android.internal.app.AlertController: android.widget.ListView getListView()>
<android.widget.HeaderViewListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<android.mtp.MtpDevice: android.mtp.MtpDeviceInfo getDeviceInfo()>
<android.mtp.MtpObjectInfo: int getObjectHandle()>
<com.android.internal.policy.impl.GlobalActions$MyAdapter: com.android.internal.policy.impl.GlobalActions$Action getItem(int)>
<android.graphics.drawable.DrawableContainer: int getOpacity()>
<android.view.KeyEvent: int getKeyCode()>
<com.android.inputmethod.keyboard.MoreKeysKeyboardView: com.android.inputmethod.keyboard.KeyDetector getKeyDetector()>
<com.android.internal.view.menu.ActionMenuItem: android.content.Intent getIntent()>
<android.view.View: int getWindowVisibility()>
<android.webkit.WebHistoryItemClassic: byte[] getFlattenedData()>
<android.content.ContentProviderOperation: android.content.ContentProviderResult apply(android.content.ContentProvider,android.content.ContentProviderResult[],int)>
<com.android.launcher2.AppsCustomizePagedView: java.lang.String getCurrentPageDescription()>
<com.android.deskclock.stopwatch.StopwatchFragment$LapsListAdapter: long getItemId(int)>
<android.graphics.drawable.DrawableContainer: int getMinimumHeight()>
<android.widget.ViewAnimator: android.view.animation.Animation getInAnimation()>
<android.widget.OverScroller: int getStartX()>
<android.widget.OverScroller: int getStartY()>
<android.view.inputmethod.InputMethodSubtype: java.lang.String getExtraValue()>
<android.text.Layout: float getLineLeft(int)>
<com.android.internal.policy.impl.PhoneWindowManager: boolean isMusicActive()>
<android.app.IWallpaperManagerCallback$Stub: android.os.IBinder asBinder()>
<android.app.ApplicationPackageManager: android.content.pm.InstrumentationInfo getInstrumentationInfo(android.content.ComponentName,int)>
<com.android.i18n.phonenumbers.geocoding.DefaultMapStorage: java.lang.String getDescription(int)>
<android.widget.PopupWindow: int getInputMethodMode()>
<android.os.DropBoxManager: boolean isTagEnabled(java.lang.String)>
<android.content.res.AssetFileDescriptor: android.os.ParcelFileDescriptor getParcelFileDescriptor()>
<com.android.phone.InCallTouchUi: int getTouchUiHeight()>
<com.android.org.bouncycastle.asn1.x509.X509NameEntryConverter: com.android.org.bouncycastle.asn1.ASN1Primitive convertHexEncoded(java.lang.String,int)>
<android.view.accessibility.AccessibilityRecord: java.lang.CharSequence getContentDescription()>
<com.android.org.bouncycastle.asn1.BERTaggedObjectParser: int getTagNo()>
<com.android.internal.policy.impl.keyguard.KeyguardViewStateManager: int getTransportState()>
<android.app.ISearchManager$Stub$Proxy: android.content.ComponentName getGlobalSearchActivity()>
<android.widget.Editor$ActionPopupWindow: int getTextOffset()>
<android.view.MotionEvent: int getPointerId(int)>
<android.net.sip.ISipSession$Stub$Proxy: java.lang.String getCallId()>
<com.android.internal.policy.impl.keyguard.PagedView: float[] mapPointFromParentToView(android.view.View,float,float)>
<com.android.internal.os.ProcessStats: int getLastIdleTime()>
<com.android.server.am.UriPermissionOwner$ExternalToken: com.android.server.am.UriPermissionOwner getOwner()>
<com.android.mms.model.SlideModel: com.android.mms.model.VideoModel getVideo()>
<com.android.ex.variablespeed.EngineParameters: int getTargetFrames()>
<android.hardware.Camera$Parameters: int getPreviewFormat()>
<android.widget.TabHost: android.view.View getCurrentTabView()>
<android.view.KeyEvent: int getSource()>
<android.webkit.WebSettingsClassic: boolean getShowVisualIndicator()>
<com.android.camera.ui.PieItem: float getCenter()>
<android.media.MediaRouter$RouteInfo: android.media.MediaRouter$RouteCategory getCategory()>
<com.android.server.accessibility.TouchExplorer$ReceivedPointerTracker: long getReceivedPointerDownTime(int)>
<android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int)>
<android.widget.TextView: android.content.res.ColorStateList getHintTextColors()>
<android.content.pm.UserInfo: android.os.UserHandle getUserHandle()>
<com.android.inputmethod.accessibility.AccessibleKeyboardViewProxy: android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(android.view.View)>
<com.android.providers.downloads.DownloadProvider: java.lang.String getType(android.net.Uri)>
<com.android.internal.view.IInputMethodClient$Stub: android.os.IBinder asBinder()>
<android.app.IWallpaperManagerCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.os.Bundle: int getInt(java.lang.String)>
<android.app.backup.BackupDataInputStream: java.lang.String getKey()>
<android.widget.AbsSpinner: android.os.Parcelable onSaveInstanceState()>
<com.android.launcher2.Workspace: android.view.View getContent()>
<com.google.android.apps.lightcycle.panorama.MessageDisplay: android.graphics.Bitmap access$100(com.google.android.apps.lightcycle.panorama.MessageDisplay,java.lang.String,int,android.graphics.Typeface,float[])>
<android.filterfw.core.CachedFrameManager: android.filterfw.core.Frame releaseFrame(android.filterfw.core.Frame)>
<com.google.android.apps.lightcycle.panorama.VideoFrameProcessor: float[] getRotationEstimate()>
<android.content.res.Resources: float getFraction(int,int,int)>
<android.net.Credentials: int getPid()>
<com.android.mms.ui.UriImage: int getWidth()>
<android.content.Intent: java.lang.String getDataString()>
<android.media.videoeditor.MediaVideoItem: int getWidth()>
<android.view.View: float getScaleY()>
<android.view.View: float getScaleX()>
<com.android.mms.layout.HVGALayoutParameters: int getImageHeight()>
<android.view.KeyEvent: int getUnicodeChar()>
<android.webkit.WebSettings: int getUserAgent()>
<android.view.View: java.lang.Object getTag(int)>
<android.widget.Editor$SuggestionsPopupWindow$SuggestionAdapter: long getItemId(int)>
<android.widget.GridLayout$Axis: int[] getTrailingMargins()>
<android.content.ContextWrapper: android.content.Context createConfigurationContext(android.content.res.Configuration)>
<com.android.server.sip.SipSessionGroup$MakeCallCommand: int getTimeout()>
<com.android.systemui.statusbar.phone.PanelView$FlingTracker: float getXVelocity()>
<android.widget.ActivityChooserModel: android.content.pm.ResolveInfo getActivity(int)>
<android.os.Environment: java.io.File getRootDirectory()>
<com.android.providers.downloads.RealSystemFacade: java.lang.Long getRecommendedMaxBytesOverMobile()>
<android.content.pm.IPackageManager$Stub$Proxy: int getInstallLocation()>
<android.widget.ListPopupWindow: android.graphics.drawable.Drawable getBackground()>
<android.view.ViewConfiguration: int getScrollDefaultDelay()>
<com.android.i18n.phonenumbers.PhoneNumberUtil: int getCountryCodeForRegion(java.lang.String)>
<android.filterpacks.imageproc.BlackWhiteFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)>
<android.gesture.Learner: java.util.ArrayList getInstances()>
<com.android.mms.dom.DocumentImpl: org.w3c.dom.DOMConfiguration getDomConfig()>
<com.android.inputmethod.latin.Dictionary: java.util.ArrayList getSuggestionsWithSessionId(com.android.inputmethod.latin.WordComposer,java.lang.CharSequence,com.android.inputmethod.keyboard.ProximityInfo,int)>
<android.filterpacks.imageproc.LomoishFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)>
<com.android.videoeditor.widgets.HorizontalScrollView: float getLeftFadingEdgeStrength()>
<android.text.format.DateUtils: java.lang.CharSequence getRelativeTimeSpanString(long,long,long,int)>
<android.drm.mobile1.DrmRightsManager: android.drm.mobile1.DrmRightsManager getInstance()>
<android.view.ScaleGestureDetector: float getFocusX()>
<android.view.ScaleGestureDetector: float getFocusY()>
<android.widget.ProgressBar: android.graphics.drawable.Drawable getCurrentDrawable()>
<com.android.email.ControllerResultUiThreadWrapper: com.android.email.Controller$Result getWrappee()>
<android.os.MemoryFile: java.io.InputStream getInputStream()>
<com.android.mms.ui.AttachmentTypeSelectorAdapter$AttachmentListItem: int getCommand()>
<com.android.ex.chips.BaseRecipientAdapter: int getDestinationTypeId()>
<android.app.backup.RestoreSession: int restoreAll(long,android.app.backup.RestoreObserver)>
<android.webkit.WebSettings: boolean getLoadsImagesAutomatically()>
<android.widget.SuggestionsAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.launcher2.PagedViewGridLayout: android.view.View getChildOnPageAt(int)>
<com.android.inputmethod.keyboard.internal.KeySpecParser: java.lang.String getOutputText(java.lang.String)>
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getLabeledBy()>
<android.view.TextureView: android.graphics.Bitmap getBitmap()>
<android.animation.LayoutTransition: java.util.List getTransitionListeners()>
<com.android.server.NativeDaemonEvent: java.lang.String getMessage()>
<android.app.SharedPreferencesImpl: long getLong(java.lang.String,long)>
<android.content.SyncStatusInfo: int getLastFailureMesgAsInt(int)>
<android.view.MotionEvent: float getHistoricalAxisValue(int,int)>
<android.app.admin.DevicePolicyManager: boolean isAdminActive(android.content.ComponentName)>
<com.android.internal.widget.DrawableHolder: float getY()>
<com.android.internal.widget.DrawableHolder: float getX()>
<android.webkit.MimeTypeMap: android.webkit.MimeTypeMap getSingleton()>
<android.provider.Settings$Global: java.lang.String getString(android.content.ContentResolver,java.lang.String)>
<android.graphics.drawable.LayerDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()>
<android.support.v4.view.AccessibilityDelegateCompatJellyBean$1: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider(android.view.View)>
<android.filterfw.core.FilterFunction: android.filterfw.core.FilterContext getContext()>
<android.app.SearchableInfo: int getLabelId()>
<android.app.backup.IRestoreObserver$Stub: android.os.IBinder asBinder()>
<com.android.org.bouncycastle.asn1.DERT61String: com.android.org.bouncycastle.asn1.DERT61String getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)>
<android.widget.RemoteViews: java.lang.String getPackage()>
<com.android.launcher2.ShortcutInfo: java.lang.String getPackageName()>
<android.graphics.drawable.ScaleDrawable: android.graphics.drawable.Drawable getDrawable()>
<com.android.exchange.adapter.ProvisionParser: com.android.emailcommon.provider.Policy getPolicy()>
<com.android.videoeditor.util.FileUtils: java.io.File getProjectsRootDir(android.content.Context)>
<android.view.MotionEvent: float getToolMinor()>
<com.android.internal.os.ProcessStats: com.android.internal.os.ProcessStats$Stats getWorkingStats(int)>
<com.android.org.bouncycastle.util.io.pem.PemGenerationException: java.lang.Throwable getCause()>
<android.text.BoringLayout: int getLineCount()>
<com.android.internal.content.PackageMonitor: java.lang.String getPackageName(android.content.Intent)>
<com.android.internal.os.PowerProfile: double getAveragePower(java.lang.String,int)>
<android.webkit.WebSettingsClassic$AutoFillProfile: java.lang.String getZipCode()>
<android.widget.ActivityChooserModel: int getActivityIndex(android.content.pm.ResolveInfo)>
<android.graphics.drawable.ScaleDrawable: int getIntrinsicHeight()>
<android.view.InputEvent: android.view.InputDevice getDevice()>
<android.view.animation.Animation: boolean getTransformation(long,android.view.animation.Transformation)>
<android.media.videoeditor.AudioTrack: long getDuration()>
<com.android.deskclock.widget.multiwaveview.GlowPadView: int getTargetPosition(int)>
<android.app.DownloadManager: long getActiveNetworkWarningBytes(android.content.Context)>
<com.android.ex.chips.RecipientEditTextView: android.text.Spannable getSpannable()>
<com.google.android.picasasync.UploadTaskEntry: java.lang.String getAlbumId()>
<android.webkit.WebBackForwardList: android.webkit.WebBackForwardList clone()>
<android.content.pm.IPackageManager$Stub$Proxy: int getPreferredActivities(java.util.List,java.util.List,java.lang.String)>
<android.app.AppGlobals: java.lang.String getInitialPackage()>
<com.android.email.mail.store.ImapFolder: com.android.emailcommon.mail.Folder$OpenMode getMode()>
<com.android.launcher2.PagedViewCellLayout: int getContentWidth()>
<android.view.View: int getMinimumHeight()>
<com.android.mms.model.RegionModel: int getTop()>
<com.google.android.picasastore.PicasaStoreFacade: java.io.File getAlbumCoverCacheFile(long,java.lang.String,java.lang.String)>
<com.android.inputmethod.latin.SubtypeLocale: java.lang.String getSubtypeDisplayName(android.view.inputmethod.InputMethodSubtype,android.content.res.Resources)>
<com.android.mms.model.MediaModel: java.lang.String getSrc()>
<com.android.emailcommon.internet.MimeBodyPart: java.lang.String getMimeType()>
<com.android.mms.data.Conversation: com.android.mms.data.ContactList getRecipients()>
<com.android.mms.ui.LayoutSelectorAdapter: java.util.List getData(android.content.Context)>
<android.support.v4.view.VelocityTrackerCompat$HoneycombVelocityTrackerVersionImpl: float getXVelocity(android.view.VelocityTracker,int)>
<android.content.pm.IPackageDeleteObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.android.internal.os.PowerProfile: int getNumSpeedSteps()>
<android.provider.Settings$Global: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)>
<android.webkit.WebHistoryItemClassic: java.lang.String getOriginalUrl()>
<android.content.BroadcastReceiver: java.lang.String getResultData()>
<android.widget.AdapterView: int getLastVisiblePosition()>
<android.hardware.usb.UsbEndpoint: int getType()>
<com.android.launcher2.WallpaperChooserDialogFragment$ImageAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.internal.app.LocalePicker$LocaleInfo: java.lang.String getLabel()>
<android.hardware.Camera$Parameters: int getPictureFormat()>
<android.hardware.Camera$Parameters: int getMaxNumDetectedFaces()>
<com.android.emailcommon.mail.Message: java.lang.String toString()>
<android.hardware.usb.UsbDevice: int getDeviceProtocol()>
<android.app.FragmentManagerImpl: int getBackStackEntryCount()>
<com.android.mms.util.ImageCacheService: byte[] getBytes(java.lang.String)>
<com.android.videoeditor.service.MovieMediaItem: com.android.videoeditor.service.MovieEffect getEffect()>
<android.webkit.WebSettingsClassic: java.lang.String getDatabasePath()>
<com.android.mms.dom.DocumentImpl: org.w3c.dom.DocumentFragment createDocumentFragment()>
<com.android.email.activity.UIControllerBase: java.lang.String getSearchHint()>
<android.text.method.DialerKeyListener: int getInputType()>
<com.android.email.widget.EmailWidget: android.widget.RemoteViews getLoadingView()>
<android.webkit.WebSettingsClassic: java.lang.String getFantasyFontFamily()>
<android.widget.Editor$SuggestionsPopupWindow$SuggestionAdapter: int getCount()>
<com.android.mms.MmsConfig: int getSmsToMmsTextThreshold()>
<android.graphics.drawable.ColorDrawable: int getColor()>
<android.filterfw.core.SerializedFrame$DirectByteOutputStream: android.filterfw.core.SerializedFrame$DirectByteInputStream getInputStream()>
<com.android.videoeditor.service.VideoEditorProject: com.android.videoeditor.service.MovieTransition getTransition(java.lang.String)>
<com.android.mms.model.MediaModel: java.lang.String getContentType()>
<com.android.email.activity.ThreePaneLayout: int getMiddlePaneId()>
<com.android.internal.widget.multiwaveview.TargetDrawable: float getY()>
<com.android.internal.widget.multiwaveview.TargetDrawable: float getX()>
<com.android.mms.util.BlobCache: byte[] lookup(long)>
<com.android.org.bouncycastle.asn1.DERIA5String: com.android.org.bouncycastle.asn1.DERIA5String getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)>
<com.android.internal.policy.impl.keyguard.PagedView: float getBoundedScrollProgress(int,android.view.View,int)>
<android.widget.CursorTreeAdapter: android.view.View getChildView(int,int,boolean,android.view.View,android.view.ViewGroup)>
<com.android.mms.model.SmilHelper: org.w3c.dom.smil.SMILDocument getDocument(com.android.mms.model.SlideshowModel)>
<android.view.KeyCharacterMap: char getMatch(int,char[],int)>
<android.media.MediaRouter: int getRouteCountStatic()>
<android.renderscript.Type: android.renderscript.Element getElement()>
<android.media.IRemoteControlClient$Stub: android.os.IBinder asBinder()>
<com.android.camera.ComboPreferences: boolean getBoolean(java.lang.String,boolean)>
<android.app.admin.DevicePolicyManager: int getPasswordMinimumUpperCase(android.content.ComponentName)>
<android.widget.Scroller: int getFinalY()>
<android.widget.Scroller: int getFinalX()>
<android.security.KeyChain: java.security.PrivateKey getPrivateKey(android.content.Context,java.lang.String)>
<android.media.Metadata: byte[] getByteArray(int)>
<android.drm.ProcessedData: java.lang.String getSubscriptionId()>
<android.accounts.IAccountManagerResponse$Stub: android.accounts.IAccountManagerResponse asInterface(android.os.IBinder)>
<android.webkit.WebViewClassic: android.webkit.PluginList getPluginList()>
<android.app.LocalActivityManager: android.app.Activity getCurrentActivity()>
<com.android.launcher2.Workspace: int getDescendantFocusability()>
<com.android.exchange.adapter.ProvisionParser: boolean getRemoteWipe()>
<com.android.ex.chips.RecipientAlternatesAdapter: java.util.HashMap getMatchingRecipients(android.content.Context,java.util.ArrayList)>
<android.content.IntentFilter: java.lang.String getDataType(int)>
<android.media.videoeditor.TransitionAlpha: java.lang.String getPNGMaskFilename()>
<com.google.android.picasastore.HttpUtils: org.apache.http.conn.ClientConnectionManager getConnectionManager()>
<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: long getItemId(int)>
<com.android.inputmethod.latin.DictionaryCollection: java.util.ArrayList getSuggestions(com.android.inputmethod.latin.WordComposer,java.lang.CharSequence,com.android.inputmethod.keyboard.ProximityInfo)>
<android.view.LayoutInflater: android.view.View onCreateView(android.view.View,java.lang.String,android.util.AttributeSet)>
<android.media.Metadata: java.util.Date getDate(int)>
<android.hardware.Camera$Parameters: int getMaxNumMeteringAreas()>
<com.android.uiautomator.core.UiDevice: int getDisplayHeight()>
<com.android.ex.chips.BaseRecipientAdapter: int getDestinationId()>
<android.drm.DrmInfoRequest: java.lang.String getMimeType()>
<com.android.deskclock.widget.multiwaveview.TargetDrawable: int getResourceId()>
<android.util.Property: java.lang.Class getType()>
<com.android.deskclock.widget.multiwaveview.PointCloud: float getScale()>
<com.android.i18n.phonenumbers.RegexCache: java.util.regex.Pattern getPatternForRegex(java.lang.String)>
<com.android.server.wm.WindowState: android.graphics.Rect getDisplayFrameLw()>
<com.android.videoeditor.service.MovieTransition: long getDuration()>
<android.media.AudioRecord: int getChannelCount()>
<android.util.SparseArray: java.lang.Object get(int)>
<com.android.mms.dom.smil.SmilPlayer: com.android.mms.dom.smil.SmilPlayer getPlayer()>
<com.android.videoeditor.service.VideoEditorProject: com.android.videoeditor.service.MovieMediaItem getPreviousMediaItem(java.lang.String)>
<android.preference.DialogPreference: java.lang.CharSequence getDialogMessage()>
<android.text.format.DateFormat: char[] getDateFormatOrder(android.content.Context)>
<com.android.server.accessibility.TouchExplorer$ReceivedPointerTracker: android.view.MotionEvent getLastReceivedEvent()>
<android.graphics.drawable.InsetDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()>
<com.android.exchange.EasSyncService: boolean getValidateRedirect(com.android.exchange.EasResponse,com.android.emailcommon.provider.HostAuth)>
<android.content.ClipboardManager: java.lang.CharSequence getText()>
<android.webkit.PluginList: java.util.List getList()>
<com.android.common.widget.CompositeCursorAdapter: android.content.Context getContext()>
<android.widget.OverScroller: int getDuration()>
<com.android.server.am.ProcessRecord: java.lang.String[] getPackageList()>
<com.android.org.bouncycastle.asn1.ASN1OctetString: com.android.org.bouncycastle.asn1.ASN1OctetString getInstance(java.lang.Object)>
<android.app.FragmentManagerImpl: android.app.Fragment getFragment(android.os.Bundle,java.lang.String)>
<android.content.CursorLoader: android.database.Cursor loadInBackground()>
<android.widget.ListPopupWindow: int getSelectedItemPosition()>
<android.filterfw.core.FrameFormat: int getDimensionCount()>
<com.android.launcher2.Hotseat: int getCellXFromOrder(int)>
<android.media.IMediaScannerListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.android.inputmethod.keyboard.internal.KeyStylesSet: com.android.inputmethod.keyboard.internal.KeyStyle getKeyStyle(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser)>
<com.google.android.apps.lightcycle.camera.TextureCameraPreview: float getReportedHorizontalFovDegrees()>
<com.android.systemui.recent.RecentTasksLoader: com.android.systemui.recent.TaskDescription loadFirstTask()>
<com.android.mms.dom.NodeImpl: java.lang.String getNodeValue()>
<android.os.storage.IMountService$Stub$Proxy: java.lang.String getVolumeState(java.lang.String)>
<android.webkit.WebSettingsClassic: boolean getDisplayZoomControls()>
<com.android.email.activity.setup.AccountCheckSettingsFragment$SecurityRequiredDialog: android.app.Dialog onCreateDialog(android.os.Bundle)>
<com.android.internal.widget.AbsActionBarView: int getContentHeight()>
<com.android.commands.monkey.MonkeySourceNetworkVars$StaticVarGetter: java.lang.String get()>
<com.android.emailcommon.internet.MimeBodyPart: java.lang.String[] getHeader(java.lang.String)>
<android.text.util.Rfc822Token: java.lang.String getAddress()>
<com.google.android.picasasync.PicasaDatabaseHelper: com.google.android.picasasync.PicasaDatabaseHelper get(android.content.Context)>
<android.provider.Settings$System: float getFloat(android.content.ContentResolver,java.lang.String)>
<com.android.org.bouncycastle.asn1.DERUTCTime: java.util.Date getAdjustedDate()>
<android.content.ContentProvider: android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle)>
<android.os.Handler: java.lang.String getMessageName(android.os.Message)>
<android.content.res.TypedArray: java.lang.String getPositionDescription()>
<android.webkit.CacheManager$CacheResult: java.lang.String getLocation()>
<com.android.org.bouncycastle.asn1.DERUniversalString: byte[] getOctets()>
<android.widget.Editor$EasyEditPopupWindow: int getVerticalLocalPosition(int)>
<com.android.inputmethod.latin.FileTransforms: java.io.InputStream getUncompressedStream(java.io.InputStream)>
<com.google.android.apps.lightcycle.camera.NullSurfaceCameraPreview: com.google.android.apps.lightcycle.util.Size getPhotoSize()>
<android.service.wallpaper.WallpaperService$Engine: int getDesiredMinimumWidth()>
<com.android.videoeditor.service.MovieMediaItem: long getBoundaryBeginTime()>
<com.android.internal.view.menu.ActionMenuItem: android.view.ContextMenu$ContextMenuInfo getMenuInfo()>
<android.preference.Preference: java.lang.String getKey()>
<android.widget.RemoteViews$MemoryUsageCounter: int getMemoryUsage()>
<com.android.providers.downloads.StorageManager: java.io.File getDownloadDataDirectory()>
<android.text.BoringLayout: int getParagraphDirection(int)>
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreviewSize()>
<android.app.admin.DevicePolicyManager: int getPasswordHistoryLength(android.content.ComponentName)>
<android.content.res.XmlBlock$Parser: java.lang.String getInputEncoding()>
<com.android.server.am.ServiceRecord: int getLastStartId()>
<com.android.internal.widget.ActionBarView: int getNavigationMode()>
<com.android.mms.model.MediaModel: android.net.Uri getUri()>
<com.android.emailcommon.internet.Rfc822Output: java.lang.String getNextBoundary()>
<com.android.inputmethod.latin.SuggestedWords: java.util.ArrayList getFromApplicationSpecifiedCompletions(android.view.inputmethod.CompletionInfo[])>
<android.media.videoeditor.MediaProperties: android.util.Pair[] getSupportedResolutions(int)>
<android.app.Notification$Style: android.widget.RemoteViews getStandardView(int)>
<com.android.email.activity.MailboxFragmentAdapter$MailboxFragmentLoader: android.database.Cursor loadInBackground()>
<com.android.launcher2.FastBitmapDrawable: android.graphics.Bitmap getBitmap()>
<android.media.videoeditor.AudioTrack: long getBoundaryEndTime()>
<android.webkit.WebSettingsClassic: java.lang.String getSerifFontFamily()>
<android.content.res.Resources: int getIdentifier(java.lang.String,java.lang.String,java.lang.String)>
<android.app.LoadedApk: java.lang.String getPackageName()>
<android.text.style.TextAppearanceSpan: android.content.res.ColorStateList getLinkTextColor()>
<com.android.mms.util.SimpleCache: java.lang.Object get(java.lang.Object)>
<com.android.phone.PhoneInterfaceManager: java.lang.String getCdmaEriText()>
<android.preference.PreferenceActivity: android.preference.PreferenceActivity$Header onGetNewHeader()>
<com.android.server.pm.PackageSettingBase: java.util.HashSet getEnabledComponents(int)>
<android.filterfw.core.KeyValueMap: int getInt(java.lang.String)>
<android.content.res.Resources: java.lang.String getResourceName(int)>
<com.android.inputmethod.latin.BinaryDictionaryGetter: java.lang.String getCacheFileName(java.lang.String,java.lang.String,android.content.Context)>
<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.AsYouTypeFormatter getAsYouTypeFormatter(java.lang.String)>
<android.app.ActivityManager: boolean getPackageAskScreenCompat(java.lang.String)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: byte[] getStatistics()>
<android.content.res.XmlBlock$Parser: java.lang.String getNamespacePrefix(int)>
<android.content.Intent: double getDoubleExtra(java.lang.String,double)>
<android.filterpacks.imageproc.RedEyeFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)>
<com.android.mms.data.Conversation: android.net.Uri getUri()>
<com.android.server.NativeDaemonEvent: int getCode()>
<android.webkit.WebSettingsClassic: java.lang.String getUserAgentString()>
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,android.net.Uri)>
<com.android.inputmethod.latin.SubtypeLocale: java.lang.String getKeyboardLayoutSetDisplayName(android.view.inputmethod.InputMethodSubtype)>
<com.android.systemui.recent.RecentTasksLoader: android.graphics.drawable.Drawable getFullResDefaultActivityIcon()>
<android.app.SearchableInfo: android.content.Context getActivityContext(android.content.Context)>
<android.media.videoeditor.Overlay: long getStartTime()>
<android.support.v4.os.ParcelableCompatCreatorHoneycombMR2: java.lang.Object createFromParcel(android.os.Parcel)>
<android.widget.Spinner$DropDownAdapter: long getItemId(int)>
<com.android.internal.os.BinderInternal: long getLastGcTime()>
<android.widget.AbsSpinner: android.widget.Adapter getAdapter()>
<com.android.internal.policy.impl.keyguard.PagedView: int getRelativeChildOffset(int)>
<android.content.ContentResolver: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)>
<com.android.mms.model.SlideModel: com.android.mms.model.MediaModel get(int)>
<com.android.inputmethod.keyboard.MainKeyboardView: com.android.inputmethod.keyboard.KeyboardActionListener getKeyboardActionListener()>
<android.widget.TextView: int getCompoundPaddingRight()>
<com.android.internal.policy.impl.keyguard.KeyguardSelectorView$3: android.content.Context getContext()>
<android.opengl.GLUtils: java.lang.String getEGLErrorString(int)>
<com.android.uiautomator.core.AccessibilityNodeInfoHelper: android.graphics.Rect getVisibleBoundsInScreen(android.view.accessibility.AccessibilityNodeInfo)>
<android.view.AbsSavedState: android.os.Parcelable getSuperState()>
<com.android.videoeditor.service.VideoEditorProject: long getMediaItemBeginTime(java.lang.String)>
<android.os.Parcel: java.io.Serializable readSerializable()>
<com.android.email.activity.UiUtilities: android.view.View getView(android.view.View,int)>
<android.os.Environment: java.io.File getExternalStorageAppDataDirectory(java.lang.String)>
<android.webkit.WebViewClassic: int getVisibleTitleHeight()>
<android.accounts.IAccountAuthenticator$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.android.videoeditor.service.MovieAudioTrack: int getAudioChannels()>
<android.app.ProgressDialog: int getProgress()>
<android.app.Activity: int getChangingConfigurations()>
<com.android.mms.transaction.TransactionBundle: java.lang.String getMmscUrl()>
<android.webkit.WebSettingsClassic: int getTextZoom()>
<android.app.ActivityOptions: android.os.IRemoteCallback getOnAnimationStartListener()>
<android.widget.ListPopupWindow: long getSelectedItemId()>
<com.android.internal.widget.multiwaveview.GlowPadView: int getSuggestedMinimumWidth()>
<com.android.org.bouncycastle.asn1.DEROctetStringParser: java.io.InputStream getOctetStream()>
<android.view.KeyCharacterMap: char getDisplayLabel(int)>
<android.graphics.drawable.ScaleDrawable: int getChangingConfigurations()>
<com.android.server.pm.Settings: com.android.server.pm.PackageSetting getDisabledSystemPkgLPr(java.lang.String)>
<android.webkit.WebSettingsClassic: int getDefaultFontSize()>
<com.android.internal.policy.impl.GlobalActions$MyAdapter: long getItemId(int)>
<android.content.Intent: android.os.Parcelable[] getParcelableArrayExtra(java.lang.String)>
<com.android.server.accessibility.TouchExplorer$ReceivedPointerTracker: long getLastReceivedUpPointerDownTime()>
<android.app.ActivityThread: java.lang.String getProfileFilePath()>
<com.android.mms.dom.NodeImpl: java.lang.String getLocalName()>
<android.os.storage.StorageManager$ObbListenerDelegate: android.os.storage.OnObbStateChangeListener getListener()>
<com.android.camera.ui.PopupManager: com.android.camera.ui.PopupManager getInstance(android.content.Context)>
<android.filterpacks.imageproc.ImageCombineFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)>
<com.android.commands.monkey.MonkeySourceNetworkVars$10: java.lang.String get()>
<android.webkit.WebViewClassic$PrivateHandler: android.content.Context getContext()>
<android.widget.ListView: int getFooterViewsCount()>
<android.graphics.BitmapRegionDecoder: int getHeight()>
<android.app.Instrumentation: android.os.Bundle getBinderCounts()>
<com.android.mms.drm.DrmUtils: java.lang.String getConvertExtension(java.lang.String)>
<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor: boolean getMaxBiometricUnlockAttemptsReached()>
<android.widget.AdapterView: int getPositionForView(android.view.View)>
<com.android.videoeditor.service.VideoEditorProject: java.lang.String getLastMediaItemId()>
<android.widget.RemoteViewsAdapter: long getItemId(int)>
<android.webkit.HTML5VideoView: int getTextureName()>
<android.content.ComponentName: java.lang.String getPackageName()>
<android.animation.PropertyValuesHolder: java.lang.Object getAnimatedValue()>
<android.text.StaticLayout: int getTopPadding()>
<android.app.ApplicationErrorReport: android.content.ComponentName getErrorReportReceiver(android.content.pm.PackageManager,java.lang.String,java.lang.String)>
<android.text.style.LeadingMarginSpan$Standard: int getLeadingMargin(boolean)>
<com.android.camera.CameraHolder: int getBackCameraId()>
<android.app.ApplicationPackageManager: android.content.res.Resources getResourcesForApplicationAsUser(java.lang.String,int)>
<android.filterfw.geometry.Rectangle: float getHeight()>
<com.android.videoeditor.util.StringUtils: java.lang.String getTimestampAsString(android.content.Context,long)>
<android.app.IUiModeManager$Stub: android.os.IBinder asBinder()>
<android.drm.mobile1.DrmConstraintInfo: java.util.Date getStartDate()>
<android.filterpacks.videosrc.CameraSource: android.hardware.Camera$Parameters getCameraParameters()>
<android.webkit.WebSettings: android.webkit.WebSettings$ZoomDensity getDefaultZoom()>
<android.webkit.HTML5VideoView: int getVideoLayerId()>
<android.graphics.Bitmap: int getScaledHeight(android.util.DisplayMetrics)>
<android.webkit.WebSettings: java.lang.String getDefaultUserAgent(android.content.Context)>
<android.preference.PreferenceScreen: android.app.Dialog getDialog()>
<com.android.email.mail.transport.MailTransport: java.io.OutputStream getOutputStream()>
<com.google.android.picasasync.UploadsManager: long addManualUpload(com.google.android.picasasync.UploadTaskEntry)>
<com.google.android.apps.lightcycle.camera.CameraUtility: java.lang.String getFlashMode(com.google.android.apps.lightcycle.camera.CameraApiProxy$CameraProxy)>
<android.app.admin.DevicePolicyManager: int getPasswordQuality(android.content.ComponentName)>
<android.webkit.WebViewClassic: android.webkit.WebSettings getSettings()>
<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewSizes()>
<com.android.emailcommon.mail.Multipart: java.lang.String getContentType()>
<android.graphics.Canvas: javax.microedition.khronos.opengles.GL getGL()>
<com.android.email.provider.ContentCache$CacheToken: java.lang.String getId()>
<com.android.email.mail.store.imap.ImapString$1: java.lang.String getString()>
<android.widget.GridView: int getHorizontalSpacing()>
<android.app.ListActivity: android.widget.ListView getListView()>
<android.app.ApplicationPackageManager: java.lang.String[] currentToCanonicalPackageNames(java.lang.String[])>
<android.media.RingtoneManager: int getRingtonePosition(android.net.Uri)>
<com.android.inputmethod.latin.Utils: java.lang.String getStackTrace(int)>
<android.hardware.display.WifiDisplayStatus: android.hardware.display.WifiDisplay getActiveDisplay()>
<com.android.inputmethod.latin.suggestions.SuggestionStripView: com.android.inputmethod.latin.SuggestedWords getSuggestions()>
<com.android.email.activity.MessageListFragment: com.android.email.MessageListContext getListContext()>
<android.widget.Spinner: int getGravity()>
<android.drm.mobile1.DrmRawContent: int getContentLength(android.drm.mobile1.DrmRights)>
<com.android.inputmethod.keyboard.Keyboard: com.android.inputmethod.keyboard.Key[] getNearestKeys(int,int)>
<com.android.email.mail.store.imap.ImapMemoryLiteral: java.io.InputStream getAsStream()>
<com.android.mms.transaction.Transaction: com.android.mms.transaction.TransactionSettings getConnectionSettings()>
<android.content.res.TypedArray: int getInteger(int,int)>
<android.app.ProgressDialog: int getSecondaryProgress()>
<android.widget.ImageView: boolean getBaselineAlignBottom()>
<com.android.ex.chips.RecipientChip: long getDataId()>
<android.os.Registrant: android.os.Handler getHandler()>
<com.google.android.gms.common.internal.GmsClient: java.util.ArrayList access$100(com.google.android.gms.common.internal.GmsClient)>
<com.android.videoeditor.service.MovieTransition: int getAlphaMaskBlendingPercent()>
<android.view.ContextThemeWrapper: int getThemeResId()>
<android.text.SpannableStringBuilder: android.text.InputFilter[] getFilters()>
<android.hardware.input.InputManager: android.hardware.input.InputManager getInstance()>
<android.filterfw.core.FilterGraph: android.filterfw.core.Filter getFilter(java.lang.String)>
<android.view.KeyCharacterMap: android.view.KeyCharacterMap$FallbackAction getFallbackAction(int,int)>
<android.text.method.TextKeyListener$NullKeyListener: int getInputType()>
<android.webkit.WebBackForwardList: android.webkit.WebHistoryItem getCurrentItem()>
<com.android.internal.widget.DrawableHolder: float getAlpha()>
<android.graphics.SurfaceTexture: long getTimestamp()>
<android.graphics.drawable.StateListDrawable: android.graphics.drawable.StateListDrawable$StateListState getStateListState()>
<android.view.ViewGroup: boolean getChildStaticTransformation(android.view.View,android.view.animation.Transformation)>
<android.widget.TextView: int getVerticalOffset(boolean)>
<android.widget.TextView: int getMarqueeRepeatLimit()>
<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getNumberDescByType(com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata,com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType)>
<com.android.camera.ListPreference: java.lang.String getEntry()>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getStorageEncryptionStatus(int)>
<com.android.mms.ui.AttachmentTypeSelectorAdapter: java.util.List getData(int,android.content.Context)>
<android.os.Debug: int getThreadExternalAllocSize()>
<com.android.server.input.PersistentDataStore: java.lang.String[] getKeyboardLayouts(java.lang.String)>
<android.app.ApplicationPackageManager: android.content.res.Resources getResourcesForApplication(java.lang.String)>
<android.webkit.HTML5VideoView: boolean getReadyToUseSurfTex()>
<com.android.internal.widget.DrawableHolder: int getWidth()>
<android.app.ActivityThread: android.content.res.Configuration applyConfigCompatMainThread(int,android.content.res.Configuration,android.content.res.CompatibilityInfo)>
<android.text.Layout: int getLineBaseline(int)>
<com.android.internal.widget.SizeAdaptiveLayout: android.view.View getModestyPanel()>
<android.widget.ActivityChooserView$ActivityChooserViewAdapter: int getViewTypeCount()>
<android.view.inputmethod.CorrectionInfo: int getOffset()>
<com.android.providers.downloads.RealSystemFacade: android.net.NetworkInfo getActiveNetworkInfo(int)>
<android.app.ActivityManagerProxy: java.util.List getRunningExternalApplications()>
<android.view.AccessibilityIterators$AbstractTextSegmentIterator: int[] getRange(int,int)>
<com.android.email.activity.setup.AccountSettingsEditQuickResponsesFragment$ArrayAdapterWithButtons: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<android.text.Layout: android.text.Layout$Alignment getAlignment()>
<android.view.View: int getLeftPaddingOffset()>
<com.android.internal.view.menu.MenuBuilder: int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,android.view.MenuItem[])>
<android.media.AudioTrack$NativeEventHandlerDelegate: android.os.Handler getHandler()>
<com.google.android.apps.lightcycle.storage.StorageManagerFactory: com.google.android.apps.lightcycle.storage.StorageManager getStorageManager()>
<android.net.Credentials: int getGid()>
<android.content.res.AssetManager: boolean getResourceValue(int,int,android.util.TypedValue,boolean)>
<android.graphics.Paint: android.graphics.MaskFilter getMaskFilter()>
<android.view.ViewGroup: int getChildCount()>
<com.android.systemui.statusbar.NotificationData$Entry: android.view.View getLargeView()>
<android.widget.TabHost: java.lang.String getCurrentTabTag()>
<com.android.deskclock.TimePicker: int getLayoutId()>
<android.view.View: float getPivotY()>
<android.view.View: float getPivotX()>
<com.android.org.bouncycastle.asn1.ASN1StreamParser: com.android.org.bouncycastle.asn1.ASN1Encodable readObject()>
<com.android.inputmethod.latin.UserHistoryDictionaryBigramList: java.util.HashMap getBigrams(java.lang.String)>
<android.os.IVibratorService$Stub: android.os.IBinder asBinder()>
<com.android.internal.app.LocalePicker$1: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.camera.CameraScreenNail: int getWidth()>
<com.android.mms.ui.Presenter: com.android.mms.model.Model getModel()>
<com.android.inputmethod.keyboard.internal.TouchPositionCorrection: float getX(int)>
<com.android.internal.policy.impl.keyguard.KeyguardViewStateManager: boolean isBouncing()>
<com.android.inputmethod.keyboard.internal.TouchPositionCorrection: float getY(int)>
<com.android.phone.CallTime: long getCallDuration(com.android.internal.telephony.Call)>
<com.android.systemui.recent.TaskDescription: android.graphics.Bitmap getThumbnail()>
<com.android.exchange.provider.GalResult$GalData: java.lang.String get(java.lang.String)>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int,int,android.graphics.Bitmap$Config)>
<com.android.inputmethod.latin.suggestions.MoreSuggestions$MoreSuggestionsParam: int getWidth(int)>
<com.android.org.bouncycastle.asn1.DERPrintableString: com.android.org.bouncycastle.asn1.DERPrintableString getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)>
<android.graphics.Bitmap: int getHeight()>
<com.android.ex.chips.RecipientAlternatesAdapter: java.util.HashMap getMatchingRecipients(android.content.Context,java.util.ArrayList,int)>
<com.android.videoeditor.service.VideoEditorProject: com.android.videoeditor.service.MovieMediaItem getPreviousMediaItem(long)>
<com.android.videoeditor.service.VideoEditorProject: com.android.videoeditor.service.MovieMediaItem getPreviousMediaItem(com.android.videoeditor.service.MovieTransition)>
<android.app.Instrumentation$ActivityResult: android.content.Intent getResultData()>
<android.view.ViewGroup: android.view.View getChildAt(int)>
<android.app.ApplicationPackageManager: int getComponentEnabledSetting(android.content.ComponentName)>
<android.support.v4.view.AccessibilityDelegateCompat: android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(android.view.View)>
<android.provider.Settings$Secure: long getLong(android.content.ContentResolver,java.lang.String)>
<android.view.View: java.lang.CharSequence getContentDescription()>
<android.text.method.DigitsKeyListener: android.text.method.DigitsKeyListener getInstance(java.lang.String)>
<com.google.android.picasasync.PicasaApi: int getAlbums(com.google.android.picasasync.UserEntry,com.google.android.picasasync.PicasaApi$EntryHandler)>
<android.media.MediaRouter$RouteInfo: java.lang.CharSequence getName()>
<android.content.res.XmlBlock$Parser: int getAttributeIntValue(int,int)>
<android.preference.ListPreference: java.lang.String getValue()>
<com.android.internal.view.menu.ActionMenuItem: android.view.View getActionView()>
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.PermissionGroupInfo getPermissionGroupInfo(java.lang.String,int)>
<android.media.videoeditor.WaveformData: int getFrameDuration()>
<com.google.android.gms.common.internal.GmsClient: java.util.ArrayList access$200(com.google.android.gms.common.internal.GmsClient)>
<android.speech.tts.ITextToSpeechCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.android.email.provider.ContentCache: java.util.Map getSnapshot()>
<com.android.server.IntentResolver: java.lang.Object newResult(android.content.IntentFilter,int,int)>
<android.media.videoeditor.MediaImageItem: int getWidth()>
<android.support.v4.view.PagerAdapter: java.lang.CharSequence getPageTitle(int)>
<com.android.emailcommon.provider.EmailContent: android.net.Uri save(android.content.Context)>
<android.hardware.Camera$Parameters: float getHorizontalViewAngle()>
<android.widget.AbsListView: int getBottomPaddingOffset()>
<android.widget.RemoteViews$BitmapReflectionAction: java.lang.String getActionName()>
<com.android.inputmethod.keyboard.internal.KeyboardRow: int getDefaultBackgroundType()>
<android.text.Layout: void getCursorPath(int,android.graphics.Path,java.lang.CharSequence)>
<android.view.View: android.content.Context getContext()>
<android.animation.ValueAnimator: float getAnimatedFraction()>
<com.android.internal.widget.LockPatternView$SavedState: java.lang.String getSerializedPattern()>
<android.content.res.TypedArray: int getResourceId(int,int)>
<android.filterfw.core.NativeFrame: int[] getInts()>
<android.content.pm.IPackageManager$Stub$Proxy: java.util.List queryIntentActivities(android.content.Intent,java.lang.String,int,int)>
<android.view.View: int getNextFocusUpId()>
<android.view.View: android.view.View$OnFocusChangeListener getOnFocusChangeListener()>
<com.android.internal.content.PackageMonitor: android.os.Handler getRegisteredHandler()>
<android.view.textservice.SpellCheckerSubtype: int getNameResId()>
<android.graphics.drawable.Drawable: int getIntrinsicWidth()>
<android.view.ViewGroup: int getChildMeasureSpec(int,int,int)>
<com.android.mms.data.Conversation$Cache: com.android.mms.data.Conversation$Cache getInstance()>
<com.android.i18n.phonenumbers.Phonemetadata$NumberFormat: java.util.List leadingDigitPatterns()>
<com.android.org.bouncycastle.asn1.x500.RDN: com.android.org.bouncycastle.asn1.x500.AttributeTypeAndValue getFirst()>
<android.graphics.drawable.LayerDrawable$LayerState: int getChangingConfigurations()>
<android.app.IUiModeManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.android.server.pm.PackageSettingBase: int getEnabled(int)>
<android.text.DynamicLayout: int getLineCount()>
<android.webkit.WebSettingsClassic$AutoFillProfile: java.lang.String getEmailAddress()>
<com.android.launcher2.CellLayout$ViewCluster: int[] getEdge(int)>
<com.google.android.picasasync.PicasaSyncHelper: com.google.android.picasasync.PicasaSyncHelper getInstance(android.content.Context)>
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromStream(java.io.InputStream,java.lang.String)>
<android.media.videoeditor.MediaArtistNativeHelper: int getFileType(int)>
<android.graphics.drawable.ShapeDrawable: android.graphics.Paint getPaint()>
<com.android.systemui.statusbar.phone.PhoneStatusBar: android.animation.Animator startDelay(int,android.animation.Animator)>
<com.android.internal.view.menu.ActionMenuView: int getWindowAnimations()>
<com.android.mms.dom.smil.SmilMediaElementImpl: org.w3c.dom.smil.TimeList getEnd()>
<com.android.camera.ui.PieRenderer: int getSize()>
<android.view.ViewConfiguration: int getScaledWindowTouchSlop()>
<com.android.videoeditor.service.MovieAudioTrack: android.media.videoeditor.WaveformData getWaveformData()>
<android.webkit.AccessibilityInjectorFallback$AccessibilityWebContentKeyBinding: int getFirstArgument(int)>
<com.android.org.bouncycastle.asn1.DERUniversalString: java.lang.String getString()>
<android.view.View: int getNextFocusDownId()>
<com.android.mms.dom.smil.SmilMediaElementImpl: float getDur()>
<android.media.AudioManager: boolean isMicrophoneMute()>
<com.android.inputmethod.latin.suggestions.MoreSuggestions$Divider: android.graphics.drawable.Drawable getIcon(com.android.inputmethod.keyboard.internal.KeyboardIconsSet,int)>
<android.app.admin.DevicePolicyManager: boolean getCameraDisabled(android.content.ComponentName,int)>
<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder getInstance()>
<com.android.ex.chips.RecipientAlternatesAdapter: com.android.ex.chips.RecipientEntry getRecipientEntry(int)>
<com.android.server.IntentResolver: java.util.Iterator filterIterator()>
<com.android.inputmethod.keyboard.Keyboard: com.android.inputmethod.keyboard.ProximityInfo getProximityInfo()>
<android.content.SyncStorageEngine: android.content.SyncStatusInfo getStatusByAccountAndAuthority(android.accounts.Account,int,java.lang.String)>
<android.widget.TextView: java.lang.CharSequence getImeActionLabel()>
<com.android.email.activity.MessageViewFragmentBase$LoadAttachmentsTask: com.android.emailcommon.provider.EmailContent$Attachment[] doInBackground(java.lang.Long[])>
<com.android.deskclock.Utils$ScreensaverMoveSaverRunnable$1: float getInterpolation(float)>
<android.widget.Chronometer: java.lang.String getFormat()>
<android.widget.SearchView: java.lang.CharSequence getQueryHint()>
<com.android.internal.view.IInputMethodManager$Stub$Proxy: java.util.List getEnabledInputMethodSubtypeList(android.view.inputmethod.InputMethodInfo,boolean)>
<com.android.videoeditor.service.MovieAudioTrack: int getAppVolume()>
<android.webkit.WebSettings: android.webkit.WebSettings$TextSize getTextSize()>
<android.media.CamcorderProfile: android.media.CamcorderProfile get(int,int)>
<com.android.mms.dom.NodeImpl: java.lang.String getTextContent()>
<android.app.Instrumentation: android.app.Instrumentation$ActivityResult execStartActivity(android.content.Context,android.os.IBinder,android.os.IBinder,android.app.Activity,android.content.Intent,int,android.os.Bundle,android.os.UserHandle)>
<com.android.providers.downloads.DownloadProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<com.android.exchange.adapter.AbstractSyncAdapter: android.content.ContentProviderResult[] safeExecute(java.lang.String,java.util.ArrayList)>
<com.android.internal.policy.impl.keyguard.KeyguardWidgetFrame: float getBackgroundAlphaMultiplier()>
<android.media.AudioManager: int getStreamVolume(int)>
<com.android.inputmethod.keyboard.KeyboardLayoutSet: com.android.inputmethod.keyboard.Keyboard getKeyboard(int)>
<com.android.internal.app.ResolverActivity$ResolveListAdapter: java.lang.Object getItem(int)>
<android.graphics.drawable.ClipDrawable: int getChangingConfigurations()>
<com.google.android.apps.lightcycle.sensor.DeviceOrientationDetector: int getDisplayInitialOrientationDegrees()>
<com.android.internal.database.SortCursor: byte[] getBlob(int)>
<com.android.deskclock.stopwatch.StopwatchFragment$ImageLabelAdapter: java.lang.String getClassName(int)>
<android.os.Bundle: java.util.ArrayList getParcelableArrayList(java.lang.String)>
<com.android.ex.chips.BaseRecipientAdapter: java.util.List access$902(com.android.ex.chips.BaseRecipientAdapter,java.util.List)>
<android.webkit.WebViewClassic: int getViewWidth()>
<com.android.internal.app.IBatteryStats$Stub: android.os.IBinder asBinder()>
<android.filterfw.core.Frame: android.filterfw.core.Frame release()>
<android.app.Fragment: android.content.res.Resources getResources()>
<android.app.ActivityManager: java.util.List getRunningAppProcesses()>
<android.os.CommonTimeConfig: byte getMasterElectionPriority()>
<com.android.internal.view.menu.MenuItemImpl: int getItemId()>
<android.view.KeyEvent: android.view.KeyCharacterMap getKeyCharacterMap()>
<android.webkit.WebView$HitTestResult: int getType()>
<com.android.launcher2.DragView: android.graphics.Point getDragVisualizeOffset()>
<android.widget.AbsListView: android.view.ContextMenu$ContextMenuInfo createContextMenuInfo(android.view.View,int,long)>
<android.media.MediaMetadataRetriever: byte[] getEmbeddedPicture()>
<com.android.server.usb.UsbDeviceManager: java.lang.String access$400()>
<android.app.Fragment: android.app.Fragment getParentFragment()>
<android.content.ContentValues: java.lang.Integer getAsInteger(java.lang.String)>
<com.android.internal.view.menu.ActionMenuItem: android.view.ActionProvider getActionProvider()>
<android.webkit.WebSettingsClassic$AutoFillProfile: java.lang.String getAddressLine2()>
<android.webkit.WebSettingsClassic$AutoFillProfile: java.lang.String getAddressLine1()>
<com.android.org.bouncycastle.asn1.ASN1Set: com.android.org.bouncycastle.asn1.ASN1Encodable getObjectAt(int)>
<android.app.ActivityManager: int getCurrentUser()>
<android.os.PowerManager: boolean isWakeLockLevelSupported(int)>
<android.content.Intent: android.net.Uri getData()>
<android.media.AudioTrack: int getPlaybackHeadPosition()>
<android.sax.Children: android.sax.Element getOrCreate(android.sax.Element,java.lang.String,java.lang.String)>
<android.app.admin.DevicePolicyManager: int getPasswordQuality(android.content.ComponentName,int)>
<android.view.ViewGroup: android.view.View findFocus()>
<android.widget.OverScroller: int getFinalX()>
<android.widget.OverScroller: int getFinalY()>
<android.app.ApplicationPackageManager: android.content.pm.ResolveInfo resolveService(android.content.Intent,int)>
<android.app.ApplicationPackageManager: java.util.List queryIntentServices(android.content.Intent,int)>
<com.android.videoeditor.service.MovieTheme: int getPreviewMovieResId()>
<com.android.mms.model.SlideModel: com.android.mms.model.AudioModel getAudio()>
<android.text.method.QwertyKeyListener: android.text.method.QwertyKeyListener getInstanceForFullKeyboard()>
<com.android.emailcommon.TempDirectory: java.io.File getTempDirectory()>
<com.android.mms.MmsConfig: int getMaxImageHeight()>
<android.animation.LayoutTransition: long getStagger(int)>
<android.graphics.drawable.Drawable: int[] getState()>
<com.android.launcher2.ButtonDropTarget: com.android.launcher2.DropTarget getDropTargetDelegate(com.android.launcher2.DropTarget$DragObject)>
<com.android.exchange.AbstractSyncService: android.os.Bundle validate(java.lang.Class,com.android.emailcommon.provider.HostAuth,android.content.Context)>
<com.android.internal.widget.IRemoteViewsFactory$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.os.Bundle: java.lang.Byte getByte(java.lang.String,byte)>
<android.drm.mobile1.DrmRightsManager: java.util.List getRightsList()>
<android.renderscript.Program$BaseProgramBuilder: int getCurrentTextureIndex()>
<android.webkit.WebSettingsClassic: boolean getBlockNetworkLoads()>
<android.app.ITransientNotification$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.android.deskclock.timer.CountingTimerView$UnsignedTime: float getLabelWidth()>
<android.graphics.Canvas: android.graphics.DrawFilter getDrawFilter()>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: java.util.List intlNumberFormats()>
<com.android.inputmethod.latin.ResourceUtils: float getFraction(android.content.res.TypedArray,int)>
<android.view.GLES20Canvas: android.graphics.DrawFilter getDrawFilter()>
<android.widget.SimpleAdapter: android.widget.Filter getFilter()>
<android.widget.Chronometer: android.widget.Chronometer$OnChronometerTickListener getOnChronometerTickListener()>
<com.android.videoeditor.widgets.MediaLinearLayout: android.app.Dialog onCreateDialog(int,android.os.Bundle)>
<com.android.mms.MmsApp: android.drm.DrmManagerClient getDrmManagerClient()>
<com.android.email.VendorPolicyLoader: com.android.email.VendorPolicyLoader getInstance(android.content.Context)>
<com.android.server.display.PersistentDataStore: android.hardware.display.WifiDisplay getRememberedWifiDisplay(java.lang.String)>
<com.android.commands.monkey.MonkeySourceNetworkVars$3: java.lang.String get()>
<com.android.commands.monkey.MonkeySourceNetworkVars$4: java.lang.String get()>
<com.android.commands.monkey.MonkeySourceNetworkVars$5: java.lang.String get()>
<com.android.commands.monkey.MonkeySourceNetworkVars$1: java.lang.String get()>
<com.android.commands.monkey.MonkeySourceNetworkVars$2: java.lang.String get()>
<com.android.commands.monkey.MonkeySourceNetworkVars$8: java.lang.String get()>
<com.android.commands.monkey.MonkeySourceNetworkVars$9: java.lang.String get()>
<android.graphics.drawable.ScaleDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()>
<com.android.org.bouncycastle.asn1.DEREnumerated: java.math.BigInteger getValue()>
<com.android.commands.monkey.MonkeySourceNetworkVars$6: java.lang.String get()>
<android.support.v4.view.PagerAdapter: int getItemPosition(java.lang.Object)>
<com.android.commands.monkey.MonkeySourceNetworkVars$7: java.lang.String get()>
<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>
<android.view.ViewGroup: android.animation.LayoutTransition getLayoutTransition()>
<android.graphics.drawable.NinePatchDrawable: int getMinimumWidth()>
<android.widget.Switch: android.graphics.drawable.Drawable getThumbDrawable()>
<com.android.server.PackageManagerBackupAgent: com.android.server.PackageManagerBackupAgent$Metadata getRestoredMetadata(java.lang.String)>
<android.view.Window: int getFeatures()>
<com.android.internal.view.IInputMethodClient$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.google.android.picasasync.UploadTaskEntry: java.lang.String getMimeType()>
<android.support.v4.view.VelocityTrackerCompat$BaseVelocityTrackerVersionImpl: float getYVelocity(android.view.VelocityTracker,int)>
<android.filterpacks.imageproc.BitmapOverlayFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)>
<android.widget.CursorTreeAdapter: android.view.View getGroupView(int,boolean,android.view.View,android.view.ViewGroup)>
<com.google.android.picasasync.UploadTaskEntry: com.google.android.picasasync.UploadTaskEntry createNew(android.content.ContentValues,int)>
<com.android.launcher2.CellLayout: float getDistanceFromCell(float,float,int[])>
<android.hardware.SensorManager: void getAngleChange(float[],float[],float[])>
<android.graphics.Region: android.graphics.Rect getBounds()>
<com.android.mms.model.LayoutModel: java.util.ArrayList getRegions()>
<android.view.ViewGroup: int getPersistentDrawingCache()>
<android.app.ListActivity: int getSelectedItemPosition()>
<android.widget.VideoView: int getDuration()>
<android.renderscript.Mesh: int getPrimitiveCount()>
<com.android.org.bouncycastle.asn1.ASN1TaggedObject: com.android.org.bouncycastle.asn1.ASN1Primitive getObject()>
<com.google.android.apps.lightcycle.panorama.DeviceManager: float getOpenGlDefaultFieldOfViewDegrees()>
<android.hardware.input.InputManager: android.hardware.input.KeyboardLayout[] getKeyboardLayouts()>
<android.provider.MediaStore$InternalThumbnails: android.graphics.Bitmap getThumbnail(android.content.ContentResolver,long,long,int,android.graphics.BitmapFactory$Options,android.net.Uri,boolean)>
<android.app.admin.DevicePolicyManager: int getPasswordMinimumLetters(android.content.ComponentName)>
<android.text.style.SuggestionSpan: java.lang.String[] getSuggestions()>
<com.android.videoeditor.service.MovieOverlay: long getAppDuration()>
<com.android.server.wm.WindowState: int getSystemUiVisibility()>
<com.android.server.accessibility.ScreenMagnifier$MagnificationController: float getMagnifiedRegionCenterX()>
<com.android.server.accessibility.ScreenMagnifier$MagnificationController: float getMagnifiedRegionCenterY()>
<com.android.mms.model.SlideModel: int getSlideSize()>
<com.android.email.NotificationController: android.text.SpannableString getNewMessageTitle(java.lang.String,int)>
<android.view.IInputFilterHost$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.content.ContentValues: java.lang.Long getAsLong(java.lang.String)>
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.PackageCleanItem nextPackageToClean(android.content.pm.PackageCleanItem)>
<com.android.org.bouncycastle.asn1.DERBoolean: com.android.org.bouncycastle.asn1.DERBoolean getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)>
<android.media.videoeditor.Overlay: java.util.Map getUserAttributes()>
<com.android.mms.dom.smil.SmilDocumentImpl: org.w3c.dom.Element getDocumentElement()>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: long getPasswordExpirationTimeout(android.content.ComponentName,int)>
<android.app.LoadedApk: android.content.pm.ApplicationInfo getApplicationInfo()>
<com.android.internal.net.VpnConfig: android.app.PendingIntent getIntentForStatusPanel(android.content.Context,com.android.internal.net.VpnConfig)>
<android.view.View: float getCameraDistance()>
<com.android.org.bouncycastle.asn1.ASN1TaggedObject: com.android.org.bouncycastle.asn1.ASN1Primitive getLoadedObject()>
<com.android.internal.app.IUsageStats$Stub$Proxy: com.android.internal.os.PkgUsageStats[] getAllPkgUsageStats()>
<android.content.ContextWrapper: java.io.File getCacheDir()>
<android.view.ViewRootImpl$2: android.view.Surface getSurface()>
<com.android.ex.chips.RecipientEntry: java.lang.String getDestinationLabel()>
<com.android.inputmethod.latin.spellcheck.AndroidWordLevelSpellCheckerSession$SuggestionsCache: com.android.inputmethod.latin.spellcheck.AndroidWordLevelSpellCheckerSession$SuggestionsParams getSuggestionsFromCache(java.lang.String,java.lang.String)>
<com.android.inputmethod.latin.BinaryDictionary: java.util.ArrayList getSuggestions(com.android.inputmethod.latin.WordComposer,java.lang.CharSequence,com.android.inputmethod.keyboard.ProximityInfo)>
<android.renderscript.BaseObj: int getID(android.renderscript.RenderScript)>
<com.android.internal.app.ResolverActivity: android.graphics.drawable.Drawable getIcon(android.content.res.Resources,int)>
<android.support.v4.view.MotionEventCompat$EclairMotionEventVersionImpl: float getX(android.view.MotionEvent,int)>
<android.mtp.MtpObjectInfo: int getAssociationDesc()>
<android.support.v4.view.MotionEventCompat$EclairMotionEventVersionImpl: float getY(android.view.MotionEvent,int)>
<android.app.SearchableInfo$ActionKeyInfo: java.lang.String getSuggestActionMsg()>
<com.android.org.bouncycastle.util.io.pem.PemHeader: java.lang.String getName()>
<com.android.internal.widget.multiwaveview.GlowPadView: int getScaledSuggestedMinimumHeight()>
<android.media.videoeditor.AudioTrack: int getAudioBitrate()>
<com.android.phone.PhoneInterfaceManager: int getCallState()>
<android.widget.Spinner$DropDownAdapter: int getCount()>
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getLabelFor()>
<android.app.IThumbnailRetriever$Stub$Proxy: android.graphics.Bitmap getThumbnail(int)>
<android.media.IRemoteVolumeObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.view.KeyEvent: char getNumber()>
<android.graphics.drawable.BitmapDrawable: android.graphics.Shader$TileMode getTileModeY()>
<android.graphics.drawable.BitmapDrawable: android.graphics.Shader$TileMode getTileModeX()>
<android.media.videoeditor.VideoEditorImpl: java.util.List getAllTransitions()>
<com.android.email.activity.UIControllerBase: long getActualAccountId()>
<android.content.Entity: java.util.ArrayList getSubValues()>
<android.widget.LinearLayout: int getChildrenSkipCount(android.view.View,int)>
<com.android.phone.sip.SipSharedPreferences: java.lang.String getSipCallOption()>
<android.graphics.Paint: int getTextWidths(java.lang.CharSequence,int,int,float[])>
<com.android.org.bouncycastle.asn1.ASN1Sequence$1: com.android.org.bouncycastle.asn1.ASN1Primitive getLoadedObject()>
<android.net.sip.SimpleSessionDescription: int getBandwidth(java.lang.String)>
<android.os.UserManager: java.util.List getUsers()>
<com.android.mms.MmsConfig: int getMaxMessageSize()>
<com.android.internal.policy.impl.PhoneWindowManager: int getAboveUniverseLayer()>
<android.preference.ListPreference: java.lang.CharSequence getSummary()>
<com.android.internal.view.BaseSurfaceHolder: android.view.SurfaceHolder$Callback[] getCallbacks()>
<android.os.Environment: java.io.File getUserSystemDirectory(int)>
<android.media.MediaRouter$RouteInfo: java.lang.CharSequence getName(android.content.res.Resources)>
<com.google.android.apps.lightcycle.sensor.SensorReader: float getAngularVelocitySquaredRad()>
<com.google.android.apps.lightcycle.storage.LocalFileStorageManager: java.io.File getPanoDirectory()>
<android.widget.TabHost$FactoryContentStrategy: android.view.View getContentView()>
<com.android.mms.data.Conversation: int getMessageCount()>
<com.android.launcher2.ButtonDropTarget: android.graphics.drawable.Drawable getCurrentDrawable()>
<android.os.PatternMatcher: java.lang.String getPath()>
<android.widget.TimePicker: java.lang.Integer getCurrentHour()>
<android.view.KeyEvent: int getAction()>
<com.google.android.apps.lightcycle.sensor.SensorReader: boolean getEkfEnabled()>
<com.android.providers.settings.SettingsBackupAgent: void onRestoreFile(android.os.ParcelFileDescriptor,long,int,java.lang.String,java.lang.String,long,long)>
<com.android.internal.policy.impl.keyguard.KeyguardWidgetFrame: float getContentAlpha()>
<android.app.ActivityManagerProxy: int getProcessLimit()>
<android.os.storage.IMountServiceListener$Stub: android.os.IBinder asBinder()>
<android.util.XmlPullAttributes: int getStyleAttribute()>
<android.view.View: android.view.DisplayList getDisplayList()>
<android.filterfw.core.FilterFactory: android.filterfw.core.Filter createFilterByClassName(java.lang.String,java.lang.String)>
<com.android.email.NotificationController$NotificationThread: android.os.Looper getLooper()>
<com.android.emailcommon.mail.Address: java.lang.String getAddress()>
<android.widget.ViewAnimator: android.view.View getCurrentView()>
<android.view.IWindowManager$Stub$Proxy: android.os.IBinder getFocusedWindowToken()>
<com.android.launcher2.Workspace: java.lang.String getCurrentPageDescription()>
<com.android.deskclock.widget.multiwaveview.GlowPadView: int getSuggestedMinimumHeight()>
<android.graphics.drawable.ColorDrawable: int getAlpha()>
<android.content.ContextWrapper: android.content.pm.PackageManager getPackageManager()>
<android.widget.PopupWindow: int getWidth()>
<com.android.internal.util.TypedProperties: float getFloat(java.lang.String)>
<com.android.mms.dom.smil.SmilDocumentImpl: org.w3c.dom.NodeList getTimeChildren()>
<com.android.internal.view.InputConnectionWrapper: int getCursorCapsMode(int)>
<com.android.org.bouncycastle.asn1.x500.X500Name: com.android.org.bouncycastle.asn1.x500.X500Name getInstance(java.lang.Object)>
<com.android.mms.data.Conversation: long getDate()>
<com.android.email.activity.MessageList: android.content.Intent createFroyoIntent(android.content.Context,com.android.emailcommon.provider.Account)>
<com.android.camera.drawable.TextDrawable: int getOpacity()>
<android.view.accessibility.AccessibilityEvent: java.lang.CharSequence getPackageName()>
<android.text.method.QwertyKeyListener: int getInputType()>
<android.webkit.WebView: android.graphics.Bitmap getFavicon()>
<android.text.method.MetaKeyKeyListener: int getMetaState(long,int)>
<android.content.pm.ContainerEncryptionParams: long getEncryptedDataStart()>
<android.app.ContextImpl: java.lang.String getPackageResourcePath()>
<android.text.format.DateUtils: java.lang.CharSequence getRelativeTimeSpanString(android.content.Context,long,boolean)>
<com.google.android.gms.panorama.internal.PanoramaClientImpl: java.lang.String getServiceDescriptor()>
<android.content.Loader: java.lang.String toString()>
<com.android.deskclock.widget.multiwaveview.TargetDrawable: int getWidth()>
<android.graphics.Paint: int getTextWidths(java.lang.String,int,int,float[])>
<com.android.internal.policy.impl.keyguard.KeyguardWidgetPager$ZInterpolator: float getInterpolation(float)>
<android.app.BackStackRecord: int getTransition()>
<android.view.inputmethod.InputMethodManager: java.util.List getEnabledInputMethodSubtypeList(android.view.inputmethod.InputMethodInfo,boolean)>
<android.webkit.WebSettingsClassic: java.lang.String getPluginsPath()>
<android.view.KeyEvent: char getDisplayLabel()>
<android.preference.Preference: android.preference.Preference$OnPreferenceClickListener getOnPreferenceClickListener()>
<com.android.inputmethod.keyboard.KeyboardSwitcher: com.android.inputmethod.keyboard.MainKeyboardView getMainKeyboardView()>
<android.view.IOnKeyguardExitResult$Stub: android.os.IBinder asBinder()>
<android.view.Surface: android.os.IBinder getBuiltInDisplay(int)>
<com.android.launcher2.FolderIcon: boolean getTextVisible()>
<android.media.videoeditor.MediaVideoItem: long getBoundaryEndTime()>
<android.view.MotionEvent: float getHistoricalY(int)>
<android.view.MotionEvent: float getHistoricalX(int)>
<android.text.method.MultiTapKeyListener: android.text.method.MultiTapKeyListener getInstance(boolean,android.text.method.TextKeyListener$Capitalize)>
<android.text.format.DateFormat: java.text.DateFormat getDateFormat(android.content.Context)>
<com.android.internal.policy.impl.PhoneWindowManager: int getConfigDisplayWidth(int,int,int)>
<com.android.videoeditor.service.IntentPool: android.content.Intent get(android.content.Context,java.lang.Class)>
<com.android.ex.variablespeed.EngineParameters: int getStartPositionMillis()>
<android.media.MediaRouter$RouteCategory: java.lang.CharSequence getName()>
<android.preference.PreferenceActivity$HeaderAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.inputmethod.latin.suggestions.SuggestionStripView$SuggestionStripViewParams: java.lang.CharSequence getAddToDictionaryWord()>
<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewFormats()>
<android.app.WallpaperManager$FastBitmapDrawable: int getMinimumWidth()>
<android.app.ContextImpl$20: java.lang.Object getService(android.app.ContextImpl)>
<android.drm.DrmInfo: int getInfoType()>
<android.media.videoeditor.Effect: java.lang.String getId()>
<com.android.launcher2.PagedView: int getCurrentPage()>
<com.android.mms.dom.smil.SmilPlayer$TimelineEntry: double getOffsetTime()>
<com.android.mms.dom.ElementImpl: java.lang.String getAttribute(java.lang.String)>
<android.app.WallpaperManager: int getDesiredMinimumHeight()>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: int getConstantMinimumWidth()>
<com.android.musicfx.ControlPanelEffect: int getParameterInt(android.content.Context,java.lang.String,int,com.android.musicfx.ControlPanelEffect$Key)>
<com.android.launcher2.CellLayout$ViewCluster: int[] getTopEdge()>
<android.util.TimeUtils: java.lang.String getTimeZoneDatabaseVersion()>
<com.android.server.pm.Settings: com.android.server.pm.PackageSetting getPackageLPw(android.content.pm.PackageParser$Package,com.android.server.pm.PackageSetting,java.lang.String,com.android.server.pm.SharedUserSetting,java.io.File,java.io.File,java.lang.String,int,android.os.UserHandle,boolean)>
<com.android.org.bouncycastle.asn1.ASN1Null: com.android.org.bouncycastle.asn1.ASN1Null getInstance(java.lang.Object)>
<android.media.videoeditor.TransitionAlpha: java.lang.String getMaskFilename()>
<com.android.camera.CameraHolder: int getFrontCameraId()>
<com.android.email.activity.MailboxFragmentAdapter: int getItemViewType(int)>
<android.os.StrictMode$AndroidBlockGuardPolicy: int getPolicyMask()>
<android.webkit.WebSettingsClassic: boolean getSaveFormData()>
<com.android.inputmethod.keyboard.internal.KeyboardRow: float getKeyWidth(android.content.res.TypedArray)>
<com.android.server.am.CoreSettingsObserver: android.os.Bundle getCoreSettingsLocked()>
<android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>
<android.view.KeyEvent: int getFlags()>
<com.android.mms.transaction.SmsReceiver: com.android.mms.transaction.SmsReceiver getInstance()>
<android.filterfw.geometry.Quad: float getBoundingWidth()>
<android.content.pm.ComponentInfo: android.content.pm.ApplicationInfo getApplicationInfo()>
<android.os.StrictMode: android.os.StrictMode$ThreadPolicy getThreadPolicy()>
<android.text.method.HideReturnsTransformationMethod: char[] getReplacement()>
<android.hardware.usb.IUsbManager$Stub$Proxy: android.os.ParcelFileDescriptor openAccessory(android.hardware.usb.UsbAccessory)>
<android.view.FocusFinder: android.view.FocusFinder getInstance()>
<android.webkit.WebSettings: boolean getAllowFileAccess()>
<com.android.internal.util.StateMachine: int getLogRecSize()>
<com.android.videoeditor.service.MovieAudioTrack: java.lang.String getId()>
<android.inputmethodservice.Keyboard: int getMinWidth()>
<com.android.inputmethod.latin.suggestions.MoreSuggestionsView: com.android.inputmethod.keyboard.PointerTracker$DrawingProxy getDrawingProxy()>
<android.content.res.TypedArray: int getInt(int,int)>
<android.filterfw.core.FrameManager: android.filterfw.core.FilterContext getContext()>
<android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int)>
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.widget.ImageView: int getMaxHeight()>
<android.app.PendingIntent: android.app.PendingIntent getActivity(android.content.Context,int,android.content.Intent,int,android.os.Bundle)>
<android.view.ViewConfiguration: int getLongPressTimeout()>
<com.android.internal.widget.ActionBarView$HomeView: int getStartOffset()>
<com.android.videoeditor.service.MovieAudioTrack: long getBoundaryBeginTime()>
<android.filterpacks.imageproc.BlendFilter: android.filterfw.core.Program getShaderProgram(android.filterfw.core.FilterContext)>
<android.view.IWindowManager$Stub$Proxy: float getWindowCompatibilityScale(android.os.IBinder)>
<android.app.Activity: android.app.Application getApplication()>
<com.android.org.bouncycastle.asn1.ASN1Null: java.lang.String toString()>
<android.view.GLES20TextureLayer: android.view.HardwareCanvas getCanvas()>
<android.webkit.WebViewClassic: android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo)>
<com.android.emailcommon.mail.Folder: java.lang.String toString()>
<android.app.SearchManager: android.app.SearchableInfo getSearchableInfo(android.content.ComponentName)>
<com.android.internal.widget.multiwaveview.Ease$Quad$1: float getInterpolation(float)>
<com.android.internal.widget.multiwaveview.Ease$Quad$2: float getInterpolation(float)>
<android.webkit.WebSettingsClassic: int getUserAgent()>
<com.android.internal.policy.impl.keyguard.PagedView: float getScrollProgress(int,android.view.View,int)>
<com.android.internal.widget.multiwaveview.Ease$Quad$3: float getInterpolation(float)>
<com.google.android.apps.lightcycle.sensor.SensorReader: float[] getFilterOutput()>
<com.android.uiautomator.core.QueryController: android.view.accessibility.AccessibilityNodeInfo getAccessibilityRootNode()>
<android.widget.TabHost: android.widget.FrameLayout getTabContentView()>
<com.android.launcher2.Workspace: float getBackgroundAlpha()>
<android.view.accessibility.AccessibilityNodeInfo: android.util.SparseLongArray getChildNodeIds()>
<android.mtp.MtpDeviceInfo: java.lang.String getManufacturer()>
<android.view.View: int getScrollY()>
<android.view.View: int getScrollX()>
<android.view.accessibility.AccessibilityRecord: int getScrollY()>
<android.view.accessibility.AccessibilityRecord: int getScrollX()>
<android.filterfw.format.PrimitiveFormat: android.filterfw.core.MutableFrameFormat createInt32Format(int,int)>
<android.webkit.WebChromeClient: android.view.View getVideoLoadingProgressView()>
<android.filterpacks.imageproc.ToGrayFilter: android.filterfw.core.Program getNativeProgram(android.filterfw.core.FilterContext)>
<android.webkit.WebView$WebViewTransport: android.webkit.WebView getWebView()>
<com.android.deskclock.AlarmClock$AlarmItemAdapter: int getSelectedItemsNum()>
<android.drm.mobile1.DrmConstraintInfo: java.util.Date getEndDate()>
<android.preference.PreferenceManager: android.content.SharedPreferences getDefaultSharedPreferences(android.content.Context)>
<android.speech.tts.SynthesisRequest: java.lang.String getVariant()>
<com.android.mms.util.Recycler$MmsRecycler: long getThreadId(android.database.Cursor)>
<android.widget.Spinner$DropDownAdapter: int getItemViewType(int)>
<com.google.android.picasasync.PrefetchHelper$PrefetchContext: int getDownloadFailCount()>
<com.android.ex.chips.BaseRecipientAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<android.view.GLES20Canvas: int getHeight()>
<android.graphics.drawable.Drawable: int getLayoutDirection()>
<android.media.videoeditor.MediaProperties: int[] getAllSupportedAspectRatios()>
<android.content.ContextWrapper: android.os.Looper getMainLooper()>
<android.hardware.Sensor: int getMinDelay()>
<android.os.Debug: int getGlobalExternalFreedSize()>
<com.google.android.picasasync.PicasaSyncHelper: java.util.ArrayList getUsers()>
<android.app.ActivityManager: void getMyMemoryState(android.app.ActivityManager$RunningAppProcessInfo)>
<android.app.TaskStackBuilder: android.app.PendingIntent getPendingIntent(int,int,android.os.Bundle,android.os.UserHandle)>
<android.hardware.Sensor: float getResolution()>
<android.app.ExpandableListActivity: long getSelectedPosition()>
<android.view.MotionEvent: int getEdgeFlags()>
<com.android.org.bouncycastle.asn1.DERBitString: byte[] getBytes()>
<com.android.ex.variablespeed.EngineParameters: float getInitialRate()>
<com.android.mms.dom.ElementImpl: org.w3c.dom.Attr getAttributeNode(java.lang.String)>
<android.widget.TextView: float getShadowDx()>
<android.widget.TextView: float getShadowDy()>
<com.android.emailcommon.utility.Utility: java.lang.String[] getRowColumns(android.content.Context,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[])>
<com.android.mms.ui.ChipsRecipientAdapter: int getItemLayout()>
<android.app.admin.DevicePolicyManager: int getPasswordMinimumNumeric(android.content.ComponentName,int)>
<android.widget.TextView: int getExtendedPaddingBottom()>
<android.widget.ImageView: boolean getAdjustViewBounds()>
<android.filterfw.core.FrameManager: android.filterfw.core.GLEnvironment getGLEnvironment()>
<com.android.email.provider.EmailProvider: android.database.sqlite.SQLiteDatabase getDatabase(android.content.Context)>
<android.widget.TextView: java.util.Locale getTextServicesLocale()>
<com.android.mms.MmsConfig: int getMaxSizeScaleForPendingMmsAllowed()>
<android.widget.TextView: float getTextSize()>
<com.android.mms.widget.MmsWidgetService$MmsFactory: int getViewTypeCount()>
<com.android.mms.data.WorkingMessage: com.android.mms.data.WorkingMessage loadDraft(com.android.mms.ui.ComposeMessageActivity,com.android.mms.data.Conversation,java.lang.Runnable)>
<android.content.IntentFilter: android.content.IntentFilter$AuthorityEntry getDataAuthority(int)>
<android.media.AudioTrack: int getPlaybackRate()>
<android.content.pm.IPackageManager$Stub$Proxy: int getUidForSharedUser(java.lang.String)>
<android.app.PendingIntent: java.lang.String getCreatorPackage()>
<com.android.mms.ui.DeliveryReportActivity$MmsReportRequest: java.lang.String getRecipient()>
<android.provider.MediaStore$Video$Thumbnails: android.graphics.Bitmap getThumbnail(android.content.ContentResolver,long,int,android.graphics.BitmapFactory$Options)>
<com.android.mms.ui.RecipientsEditor: int getRecipientCount()>
<android.view.ScaleGestureDetector: long getTimeDelta()>
<android.animation.Keyframe$FloatKeyframe: java.lang.Object getValue()>
<android.widget.NumberPicker: int getValue()>
<android.view.MotionEvent: float getTouchMinor()>
<android.view.LayoutInflater: android.view.LayoutInflater$Filter getFilter()>
<android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityNodeInfo getRootInActiveWindow(int)>
<android.widget.HorizontalScrollView: int getMaxScrollAmount()>
<android.app.SearchManager: android.database.Cursor getSuggestions(android.app.SearchableInfo,java.lang.String)>
<android.view.animation.Animation: float getScaleFactor()>
<android.provider.Telephony$Mms: java.lang.String getMessageBoxName(int)>
<android.media.MiniThumbFile: long getMagic(long)>
<android.content.IntentSender: android.os.UserHandle getCreatorUserHandle()>
<android.view.InputDevice: android.view.KeyCharacterMap getKeyCharacterMap()>
<android.os.Environment$UserEnvironment: java.io.File getExternalStorageDirectory()>
<android.preference.RingtonePreference: boolean getShowSilent()>
<android.view.ScaleGestureDetector: float getScaleFactor()>
<com.android.mms.dom.DocumentImpl: org.w3c.dom.DocumentType getDoctype()>
<android.os.Bundle: boolean getBoolean(java.lang.String,boolean)>
<android.media.MediaRouter$RouteInfo: int getPlaybackStream()>
<com.android.mms.transaction.TransactionState: int getState()>
<android.webkit.CallbackProxy: int getProgress()>
<com.android.mms.util.Recycler$SmsRecycler: int getMessageLimit(android.content.Context)>
<android.view.Display: int getHeight()>
<android.content.pm.VerificationParams: int getInstallerUid()>
<android.hardware.input.InputManager: int getPointerSpeed(android.content.Context)>
<android.widget.TabHost: int getCurrentTab()>
<android.filterpacks.imageproc.TintFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)>
<android.webkit.CacheManager$CacheResult: int getHttpStatusCode()>
<android.webkit.WebViewClassic: int getHeight()>
<com.android.mms.model.SmilHelper: org.w3c.dom.smil.SMILDocument getDocument(com.google.android.mms.pdu.PduBody)>
<android.animation.ValueAnimator: int getRepeatMode()>
<com.android.email.activity.setup.AccountCheckSettingsFragment$ErrorDialog: android.app.Dialog onCreateDialog(android.os.Bundle)>
<android.appwidget.AppWidgetHost: int[] getAppWidgetIds()>
<com.android.internal.policy.impl.keyguard.PagedView: int getChildIndexForRelativeOffset(int)>
<android.widget.ZoomButtonsController: android.view.View getZoomControls()>
<android.view.animation.AnimationUtils: android.view.animation.Animation loadAnimation(android.content.Context,int)>
<com.android.email.SecurityPolicy: android.app.admin.DevicePolicyManager getDPM()>
<android.text.DynamicLayout: int getBottomPadding()>
<com.android.email.mail.store.imap.ImapString: byte[] access$000()>
<com.android.launcher2.LauncherViewPropertyAnimator: long getDuration()>
<com.android.emailcommon.provider.EmailContent: com.android.emailcommon.provider.EmailContent getContent(android.database.Cursor,java.lang.Class)>
<com.android.soundrecorder.Recorder: int getMaxAmplitude()>
<com.android.deskclock.widget.multiwaveview.TargetDrawable: float getPositionX()>
<com.android.deskclock.widget.multiwaveview.TargetDrawable: float getPositionY()>
<android.drm.mobile1.DrmConstraintInfo: long getInterval()>
<android.app.admin.DevicePolicyManager: int getPasswordMinimumLength(android.content.ComponentName,int)>
<com.google.android.apps.lightcycle.xmp.XmpUtil: com.adobe.xmp.XMPMeta createXMPMeta()>
<com.android.internal.view.menu.ActionMenuItem: char getAlphabeticShortcut()>
<android.view.DragEvent: android.content.ClipDescription getClipDescription()>
<com.android.internal.app.ActionBarImpl: int getDisplayOptions()>
<com.android.internal.backup.LocalTransport: long getCurrentRestoreSet()>
<android.view.Display: java.lang.String getAddress()>
<com.android.internal.view.menu.MenuItemImpl: java.lang.CharSequence getTitle()>
<android.content.res.Resources: android.content.res.XmlResourceParser getAnimation(int)>
<android.view.View: android.graphics.drawable.Drawable getBackground()>
<android.view.animation.LayoutAnimationController: android.view.animation.Animation getAnimation()>
<android.widget.TextView$Marquee: float getMaxFadeScroll()>
<com.android.videoeditor.service.VideoEditorProject: long getProjectDuration()>
<com.android.email.Preferences: android.content.SharedPreferences getSharedPreferences(android.content.Context)>
<android.view.AccessibilityInteractionController$PrivateHandler: java.lang.String getMessageName(android.os.Message)>
<com.android.email.activity.InsertQuickResponseDialog: android.app.Dialog onCreateDialog(android.os.Bundle)>
<android.text.format.DateUtils: java.lang.CharSequence getRelativeDateTimeString(android.content.Context,long,long,long,int)>
<com.android.internal.util.StateMachine$LogRec: com.android.internal.util.State getOriginalState()>
<com.android.internal.policy.impl.keyguard.PagedView: float[] mapPointFromViewToParent(android.view.View,float,float)>
<android.filterfw.core.FilterFunction: android.filterfw.core.Filter getFilter()>
<android.widget.SimpleAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)>
<android.app.ApplicationPackageManager: android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName,int)>
<android.text.style.AbsoluteSizeSpan: int getSize()>
<android.view.animation.AnimationUtils: android.view.animation.Interpolator loadInterpolator(android.content.Context,int)>
<android.webkit.WebBackForwardListClassic: boolean getClearPending()>
<android.os.Parcel: android.os.Parcelable readParcelable(java.lang.ClassLoader)>
<android.app.IInstrumentationWatcher$Stub: android.os.IBinder asBinder()>
<android.widget.SimpleAdapter: long getItemId(int)>
<android.widget.AbsSeekBar: int getThumbOffset()>
<android.drm.DrmManagerClient: android.content.ContentValues getMetadata(android.net.Uri)>
<android.renderscript.Element: int getSubElementCount()>
<com.android.email.activity.setup.SetupData: java.lang.String getUsername()>
<android.media.videoeditor.VideoEditorImpl: long getDuration()>
<android.filterpacks.imageproc.PosterizeFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)>
<android.widget.TextView: int getCompoundPaddingLeft()>
<com.android.internal.backup.IBackupTransport$Stub$Proxy: long getCurrentRestoreSet()>
<android.text.util.Rfc822Token: java.lang.String getName()>
<android.widget.TextView: android.content.res.ColorStateList getLinkTextColors()>
<android.provider.Settings$Global: float getFloat(android.content.ContentResolver,java.lang.String,float)>
<android.os.Environment: java.io.File getExternalStoragePublicDirectory(java.lang.String)>
<android.webkit.WebHistoryItem: java.lang.String getTitle()>
<android.webkit.PluginManager: java.lang.String getPluginSharedDataDirectory()>
<android.provider.Settings$System: float getFloatForUser(android.content.ContentResolver,java.lang.String,int)>
<android.accessibilityservice.AccessibilityService: android.accessibilityservice.AccessibilityServiceInfo getServiceInfo()>
<android.opengl.EGLObjectHandle: int getHandle()>
<android.filterfw.core.SimpleFrame: int[] getInts()>
<android.hardware.Camera$Parameters: java.lang.String getSceneMode()>
<android.text.method.CharacterPickerDialog$OptionsAdapter: long getItemId(int)>
<com.android.systemui.statusbar.phone.Ticker$Segment: android.text.StaticLayout getLayout(java.lang.CharSequence)>
<com.android.internal.util.StateMachine: com.android.internal.util.IState getCurrentState()>
<android.webkit.WebView: android.webkit.WebView$HitTestResult getHitTestResult()>
<android.preference.Preference: android.content.Intent getIntent()>
<com.android.camera.ComboPreferences: java.util.Set getStringSet(java.lang.String,java.util.Set)>
<android.app.SearchableInfo: int getVoiceLanguageModeId()>
<android.view.animation.OvershootInterpolator: float getInterpolation(float)>
<com.android.inputmethod.keyboard.MoreKeysKeyboard: int getDefaultCoordX()>
<com.android.server.sip.SipSessionGroup$MakeCallCommand: android.net.sip.SipProfile getPeerProfile()>
<com.android.internal.widget.multiwaveview.MultiWaveView: int getSuggestedMinimumWidth()>
<android.content.pm.IPackageManager$Stub$Proxy: java.util.List queryIntentActivityOptions(android.content.ComponentName,android.content.Intent[],java.lang.String[],android.content.Intent,java.lang.String,int,int)>
<android.view.ViewRootImpl: android.view.View getView()>
<com.android.phone.PhoneGlobals: android.app.Activity getPUKEntryActivity()>
<com.android.deskclock.timer.TimerFragment: com.android.deskclock.timer.TimerFragment$TimersListAdapter createAdapter(android.content.Context,android.content.SharedPreferences)>
<com.android.mms.dom.smil.TimeImpl: double getResolvedOffset()>
<com.android.internal.app.ResolverActivity$ResolveListAdapter: long getItemId(int)>
<android.app.ApplicationPackageManager: android.content.pm.VerifierDeviceIdentity getVerifierDeviceIdentity()>
<com.android.org.bouncycastle.asn1.ASN1Sequence: com.android.org.bouncycastle.asn1.ASN1Primitive toDLObject()>
<android.webkit.WebViewClassic: android.webkit.WebBackForwardListClient getWebBackForwardListClient()>
<android.content.ISyncContext$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.content.BroadcastReceiver$PendingResult: boolean getAbortBroadcast()>
<android.content.res.XmlBlock$Parser: java.lang.String getPrefix()>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: int getConstantHeight()>
<android.graphics.Bitmap: int getDefaultDensity()>
<com.android.videoeditor.service.MovieMediaItem: long getBoundaryEndTime()>
<com.android.email.widget.EmailWidget: android.widget.RemoteViews getViewAt(int)>
<android.hardware.input.IInputManager$Stub: android.os.IBinder asBinder()>
<com.android.phone.CdmaPhoneCallState: boolean getAddCallMenuStateAfterCallWaiting()>
<com.android.exchange.ExchangeService: java.lang.String getDeviceId(android.content.Context)>
<android.widget.ExpandableListConnector: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.android.org.bouncycastle.asn1.x509.X509Name: com.android.org.bouncycastle.asn1.x509.X509Name getInstance(com.android.org.bouncycastle.asn1.ASN1TaggedObject,boolean)>
<com.android.email.mail.store.ImapFolder: com.android.emailcommon.mail.Message[] getMessages(java.lang.String[],com.android.emailcommon.mail.Folder$MessageRetrievalListener)>
<android.graphics.Paint: float getTextRunAdvances(java.lang.CharSequence,int,int,int,int,int,float[],int)>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int[],int,int,android.graphics.Bitmap$Config)>
<com.android.server.NativeDaemonConnector: java.util.ArrayList doCommand(java.lang.String)>
<android.view.accessibility.AccessibilityEvent: int getAction()>
<com.android.deskclock.widget.multiwaveview.Ease$Quart$3: float getInterpolation(float)>
<android.app.admin.DevicePolicyManager: int getMaximumFailedPasswordsForWipe(android.content.ComponentName,int)>
<android.webkit.WebStorage$Origin: long getQuota()>
<android.filterfw.format.PrimitiveFormat: android.filterfw.core.MutableFrameFormat createByteFormat(int)>
<com.android.videoeditor.service.MovieMediaItem: int getAspectRatio()>
<android.app.ActivityManager: int getLargeMemoryClass()>
<android.view.MotionEvent: float getOrientation()>
<android.os.Bundle: int[] getIntArray(java.lang.String)>
<com.android.internal.policy.impl.keyguard.SlidingChallengeLayout$2: float getInterpolation(float)>
<android.view.InputDevice: java.lang.String getDescriptor()>
<com.android.server.AppWidgetService: int[] getAppWidgetIds(android.content.ComponentName)>
<com.android.internal.policy.impl.keyguard.SlidingChallengeLayout$3: float getInterpolation(float)>
<android.widget.CursorAdapter: int getCount()>
<com.android.deskclock.widget.multiwaveview.Ease$Quart$2: float getInterpolation(float)>
<com.android.deskclock.widget.multiwaveview.Ease$Quart$1: float getInterpolation(float)>
<android.hardware.usb.UsbDevice: android.hardware.usb.UsbInterface getInterface(int)>
<android.net.LocalSocketAddress$Namespace: int getId()>
<android.widget.SimpleAdapter: int getCount()>
<android.view.animation.Animation: boolean getFillAfter()>
<android.app.LoadedApk: java.lang.String getResDir()>
<com.android.org.bouncycastle.asn1.ASN1InputStream: com.android.org.bouncycastle.asn1.ASN1EncodableVector buildEncodableVector()>
<com.android.launcher2.WallpaperChooserDialogFragment$ImageAdapter: long getItemId(int)>
<android.net.sip.SimpleSessionDescription$Fields: java.lang.String[] getBandwidthTypes()>
<android.widget.ActivityChooserModel: android.content.pm.ResolveInfo getDefaultActivity()>
<android.widget.BaseExpandableListAdapter: long getCombinedChildId(long,long)>
<com.android.videoeditor.service.MovieTransition: java.lang.String getId()>
<com.android.mms.dom.smil.ElementSequentialTimeContainerImpl: org.w3c.dom.NodeList getActiveChildrenAt(float)>
<android.hardware.display.IDisplayManagerCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.preference.PreferenceGroupAdapter: int getViewTypeCount()>
<com.android.mms.model.LayoutModel: com.android.mms.model.RegionModel getTextRegion()>
<android.accounts.IAccountManager$Stub$Proxy: android.accounts.AuthenticatorDescription[] getAuthenticatorTypes()>
<android.filterfw.core.Frame: int getRefCount()>
<android.widget.ExpandableListConnector: android.widget.ExpandableListAdapter getAdapter()>
<android.renderscript.Mesh: android.renderscript.Mesh$Primitive getPrimitive(int)>
<android.filterfw.core.NativeBuffer: int getElementSize()>
<com.google.android.gms.panorama.internal.IPanoramaCallbacks$Stub: android.os.IBinder asBinder()>
<android.app.SearchManager: android.content.Intent getAssistIntent(android.content.Context,int)>
<android.webkit.WebSettingsClassic: android.webkit.WebSettingsClassic$AutoFillProfile getAutoFillProfile()>
<com.android.camera.CameraActivity: long getJpegCallbackFinishTime()>
<android.content.Intent: android.os.Bundle getExtras()>
<android.media.AudioRecord: int getAudioSource()>
<com.android.internal.view.menu.MenuBuilder: android.view.View getHeaderView()>
<android.hardware.usb.UsbDevice: java.lang.String getDeviceName()>
<android.emoji.EmojiFactory: java.lang.String getAndroidPuaFromVendorSpecificPua(java.lang.String)>
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>
<android.util.EventLog$Event: int getThreadId()>
<com.android.exchange.adapter.MoveItemsParser: int getStatusCode()>
<com.google.android.mms.util.DownloadDrmHelper: java.lang.String getOriginalMimeType(android.content.Context,java.lang.String,java.lang.String)>
<android.view.animation.Animation: boolean getFillBefore()>
<android.app.SearchManager: java.util.List getGlobalSearchActivities()>
<android.os.Debug$MemoryInfo: int getOtherPrivateDirty(int)>
<com.android.email.SecurityPolicy: int getInactiveReasons(com.android.emailcommon.provider.Policy)>
<com.android.exchange.provider.ExchangeDirectoryProvider: long getAccountIdByName(android.content.Context,java.lang.String)>
<android.widget.ExpandableListConnector: android.widget.ExpandableListConnector$PositionMetadata getFlattenedPos(android.widget.ExpandableListPosition)>
<android.webkit.WebStorageClassic: void getQuotaForOrigin(java.lang.String,android.webkit.ValueCallback)>
<android.preference.Preference: int getWidgetLayoutResource()>
<android.os.storage.IMountService$Stub$Proxy: java.lang.String getMountedObbPath(java.lang.String)>
<com.android.mms.widget.MmsWidgetService$MmsFactory: android.widget.RemoteViews getViewAt(int)>
<android.preference.PreferenceFragment: android.widget.ListView getListView()>
<android.preference.DialogPreference: int getDialogLayoutResource()>
<android.widget.AdapterViewAnimator: android.view.ViewGroup$LayoutParams createOrReuseLayoutParams(android.view.View)>
<android.view.VelocityTracker: float getXVelocity()>
<android.app.ApplicationPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>
<com.android.inputmethod.keyboard.internal.KeySpecParser: java.lang.String getLabel(java.lang.String)>
<android.view.animation.Animation: long computeDurationHint()>
<com.android.phone.sip.SipSharedPreferences: int getProfilesCount()>
<android.content.res.XmlBlock$Parser: java.lang.String getIdAttribute()>
<com.android.launcher2.FastBitmapDrawable: int getIntrinsicWidth()>
<com.android.launcher2.Workspace: android.view.View getViewForTag(java.lang.Object)>
<android.preference.TwoStatePreference: java.lang.CharSequence getSummaryOff()>
<android.app.DownloadManager: java.lang.Long getRecommendedMaxBytesOverMobile(android.content.Context)>
<android.filterfw.core.NativeFrame: int getCapacity()>
<com.android.mms.dom.smil.SmilLayoutElementImpl: org.w3c.dom.NodeList getRegions()>
<com.google.android.apps.lightcycle.sensor.SensorReader: float getAccelInPlaneRotationRadians()>
<com.android.internal.policy.impl.keyguard.PagedView: int getPageCount()>
<android.renderscript.Element: int getVectorSize()>
<android.media.AudioTrack: int getNotificationMarkerPosition()>
<com.android.videoeditor.service.MovieTheme: com.android.videoeditor.service.MovieTransition getMidTransition()>
<android.graphics.drawable.ClipDrawable$ClipState: int getChangingConfigurations()>
<android.os.RemoteCallbackList: int getRegisteredCallbackCount()>
<android.filterfw.core.SerializedFrame: java.lang.Object getObjectValue()>
<com.android.mms.transaction.SendTransaction: byte[] getPdu(java.lang.String)>
<android.os.Bundle: char getChar(java.lang.String,char)>
<com.android.org.bouncycastle.util.encoders.Hex: byte[] decode(byte[])>
<android.content.res.XmlBlock$Parser: java.lang.String getAttributeType(int)>
<android.webkit.WebBackForwardList: int getSize()>
<android.os.IHardwareService$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.os.UserManager: int getUserCount()>
<com.android.videoeditor.service.MovieMediaItem: long getDuration()>
<com.android.videoeditor.BaseAdapterWithImages: long getItemId(int)>
<android.view.accessibility.AccessibilityRecord: android.view.accessibility.AccessibilityNodeInfo getSource()>
<android.graphics.drawable.StateListDrawable: android.graphics.drawable.Drawable getStateDrawable(int)>
<com.android.mms.widget.MmsWidgetService$MmsFactory: long getItemId(int)>
<android.view.View: int getNextFocusLeftId()>
<com.android.ex.chips.RecipientEntry: long getDataId()>
<android.view.View: int getMinimumWidth()>
<android.webkit.WebViewCore$AutoFillData: int getQueryId()>
<android.text.format.DateUtils: java.lang.CharSequence getRelativeTimeSpanString(long)>
<android.widget.ArrayAdapter: long getItemId(int)>
<com.android.internal.policy.impl.PhoneWindowManager: int getConfigDisplayHeight(int,int,int)>
<com.android.org.bouncycastle.asn1.ASN1Sequence: com.android.org.bouncycastle.asn1.ASN1SequenceParser parser()>
<android.hardware.display.DisplayManager: android.view.Display getDisplay(int)>
<android.view.InputDevice: android.view.InputDevice$MotionRange getMotionRange(int)>
<android.view.ScaleGestureDetector: long getEventTime()>
<android.content.res.XmlBlock$Parser: int getEventType()>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadataCollection: java.util.List getMetadataList()>
<android.app.LoadedApk$ReceiverDispatcher: android.content.IIntentReceiver getIIntentReceiver()>
<android.widget.SearchView: int getInputType()>
<android.webkit.WebViewClassic: int getScrollX()>
<android.webkit.WebViewClassic: int getScrollY()>
<android.graphics.Bitmap: int getDensity()>
<android.util.XmlPullAttributes: int getAttributeNameResource(int)>
<android.os.HandlerThread: int getThreadId()>
<android.media.audiofx.AudioEffect: int getParameter(int,byte[])>
<com.android.internal.policy.impl.keyguard.KeyguardSelectorView: com.android.internal.policy.impl.keyguard.KeyguardSecurityCallback getCallback()>
<android.text.DynamicLayout: int getNumberOfBlocks()>
<com.android.systemui.usb.UsbStorageActivity: android.app.Dialog onCreateDialog(int,android.os.Bundle)>
<com.android.uiautomator.core.UiDevice: int getDisplayRotation()>
<android.text.Layout: int getOffsetToLeftOf(int)>
<android.widget.Editor$SelectionEndHandleView: int getHotspotX(android.graphics.drawable.Drawable,boolean)>
<android.widget.TabHost: android.widget.TabWidget getTabWidget()>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getUan()>
<android.webkit.WebViewCore: android.webkit.WebSettingsClassic getSettings()>
<android.view.View: android.view.ViewRootImpl getViewRootImpl()>
<com.android.mms.model.RegionModel: java.lang.String getFit()>
<android.widget.CompoundButton: int getCompoundPaddingRight()>
<android.view.MotionEvent: int getButtonState()>
<com.android.internal.view.ActionBarPolicy: int getMaxActionButtons()>
<com.android.server.accessibility.ScreenMagnifier$MagnificationController: float getScale()>
<com.android.email.activity.UIControllerSearchTwoPane: int getLayoutId()>
<android.hardware.ISerialManager$Stub$Proxy: java.lang.String[] getSerialPorts()>
<com.android.org.bouncycastle.asn1.LazyEncodedSequence: java.util.Enumeration getObjects()>
<android.widget.Spinner$DialogPopup: int getVerticalOffset()>
<android.os.NullVibrator: android.os.NullVibrator getInstance()>
<android.app.admin.DeviceAdminInfo: java.lang.String getPackageName()>
<android.os.storage.IMountService$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.android.camera.CameraScreenNail: float getAlpha()>
<com.android.internal.database.SortCursor: int getType(int)>
<android.os.Bundle: char getChar(java.lang.String)>
<com.android.email.RecipientAdapter: int getItemLayout()>
<android.hardware.usb.UsbInterface: int getId()>
<com.android.uiautomator.core.UiSelector: int getInstance()>
<com.android.uiautomator.core.Tracer: com.android.uiautomator.core.Tracer getInstance()>
<com.android.mms.data.Conversation: com.android.mms.data.Conversation get(android.content.Context,com.android.mms.data.ContactList,boolean)>
<android.gesture.Gesture: float getLength()>
<android.content.ClipboardManager: android.content.ClipDescription getPrimaryClipDescription()>
<android.text.Annotation: java.lang.String getValue()>
<android.app.ActivityManagerProxy: java.lang.String getCallingPackage(android.os.IBinder)>
<com.android.email.mail.store.imap.ImapList: com.android.email.mail.store.imap.ImapList getKeyedListOrEmpty(java.lang.String)>
<com.android.email.mail.transport.MailTransport: java.net.InetAddress getLocalAddress()>
<android.text.style.SuggestionSpan: java.lang.String getLocale()>
<android.view.ViewGroup$MarginLayoutParams: int getLayoutDirection()>
<com.android.internal.view.IInputContextCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.android.internal.appwidget.IAppWidgetHost$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<com.android.camera.CameraActivity: long getCaptureStartTime()>
<android.graphics.drawable.Drawable: boolean getPadding(android.graphics.Rect)>
<android.media.MediaPlayer$TrackInfo: java.lang.String getLanguage()>
<com.android.commands.uiautomator.Launcher$Command: java.lang.String name()>
<com.android.mms.dom.AttrImpl: java.lang.String getValue()>
<android.filterfw.core.OutputPort: android.filterfw.core.InputPort getTargetPort()>
<com.android.org.bouncycastle.asn1.DERBMPString: java.lang.String getString()>
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable mutate()>
<android.os.Bundle: long getLong(java.lang.String)>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getTollFree()>
<android.preference.PreferenceActivity: android.widget.Button getNextButton()>
<com.android.email.activity.ThreePaneLayout: int getVisiblePanes()>
<android.webkit.CookieManager: android.webkit.CookieManager getInstance()>
<android.app.LoaderManagerImpl: android.content.Loader restartLoader(int,android.os.Bundle,android.app.LoaderManager$LoaderCallbacks)>
<com.android.commands.monkey.MonkeySourceNetworkViews$GetChildren: com.android.commands.monkey.MonkeySourceNetwork$MonkeyCommandReturn query(android.view.accessibility.AccessibilityNodeInfo,java.util.List)>
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ResolveInfo resolveIntent(android.content.Intent,java.lang.String,int,int)>
<android.widget.RemoteViews$ReflectionAction: java.lang.String getActionName()>
<com.android.mms.dom.AttrImpl: org.w3c.dom.Node getPreviousSibling()>
<android.view.AccessibilityIterators$CharacterTextSegmentIterator: android.view.AccessibilityIterators$CharacterTextSegmentIterator getInstance(java.util.Locale)>
<android.widget.AutoCompleteTextView: android.graphics.drawable.Drawable getDropDownBackground()>
<android.util.ReflectiveProperty: java.lang.Object get(java.lang.Object)>
<android.security.IKeyChainAliasCallback$Stub: android.os.IBinder asBinder()>
<android.os.DropBoxManager: android.os.DropBoxManager$Entry getNextEntry(java.lang.String,long)>
<android.app.admin.DevicePolicyManager: int getKeyguardDisabledFeatures(android.content.ComponentName,int)>
<android.graphics.drawable.NinePatchDrawable: android.graphics.Insets getLayoutInsets()>
<com.android.internal.view.IInputMethodManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.gesture.GestureLibrary: java.util.ArrayList getGestures(java.lang.String)>
<android.content.res.Resources: android.content.res.TypedArray obtainTypedArray(int)>
<android.app.Notification$Builder: android.app.Notification getNotification()>
<android.view.IWindowManager$Stub: android.os.IBinder asBinder()>
<android.security.IKeyChainAliasCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
<android.view.ViewGroup$ChildListForAccessibility: int getChildIndex(android.view.View)>
<android.view.InputDevice: int getId()>
<android.os.Debug: int getThreadAllocSize()>
<android.preference.VolumePreference$SeekBarVolumizer: android.widget.SeekBar getSeekBar()>
<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager getInstance(android.os.Looper)>
<android.app.BackStackRecord: int getId()>
<android.os.Bundle: float getFloat(java.lang.String)>
<android.os.Debug: int getGlobalFreedSize()>
<android.os.UEventObserver$UEvent: java.lang.String get(java.lang.String)>
<android.view.inputmethod.BaseInputConnection: java.lang.CharSequence getSelectedText(int)>
<android.speech.IRecognitionListener$Stub: android.os.IBinder asBinder()>
<com.android.providers.userdictionary.UserDictionaryProvider: java.lang.String getType(android.net.Uri)>
<android.app.ListFragment: android.widget.ListView getListView()>
<com.android.systemui.recent.RecentsPanelView$TaskDescriptionAdapter: int getCount()>
<android.os.Bundle: android.util.SparseArray getSparseParcelableArray(java.lang.String)>
<android.gesture.Gesture: long getID()>
<android.widget.CursorAdapter: android.widget.FilterQueryProvider getFilterQueryProvider()>
<android.widget.SearchView: int getImeOptions()>
<android.widget.LinearLayout: int getDividerWidth()>
<android.hardware.Camera$Parameters: java.util.List getSupportedAntibanding()>
<android.mtp.MtpStorage: java.lang.String getDescription()>
<android.media.videoeditor.VideoEditorImpl: android.media.videoeditor.MediaArtistNativeHelper getNativeContext()>
<com.android.internal.app.ResolverActivity$ResolveListAdapter: int getCount()>
<android.renderscript.Type: int getX()>
<android.view.Surface$CompatibleCanvas: int getHeight()>
<android.content.SyncStorageEngine: android.content.SyncStorageEngine$DayStats[] getDayStatistics()>
<com.android.systemui.statusbar.phone.PanelHolder: int getPanelIndex(com.android.systemui.statusbar.phone.PanelView)>
<android.widget.TextView: int getShadowColor()>
<com.android.ex.variablespeed.EngineParameters: float getWindowOverlapDuration()>
<android.text.Layout: int getLineBottom(int)>
<com.android.deskclock.stopwatch.StopwatchFragment$ImageLabelAdapter: java.lang.String getPackageName(int)>
<android.renderscript.Type: int getZ()>
<android.renderscript.Type: int getY()>
<android.graphics.Paint: int getTextGlyphs(java.lang.String,int,int,int,int,int,char[])>
<android.app.ApplicationPackageManager: java.util.List queryIntentActivityOptions(android.content.ComponentName,android.content.Intent[],android.content.Intent,int)>
<android.webkit.WebSettings: int getMinimumFontSize()>
<android.animation.LayoutTransition: android.animation.Animator getAnimator(int)>
<android.content.ContextWrapper: java.lang.String getPackageName()>
<android.text.Layout: int getOffsetForHorizontal(int,float)>
<android.content.res.CompatibilityInfo$Translator: android.graphics.Region getTranslatedTouchableArea(android.graphics.Region)>
<android.os.Environment: java.io.File getExternalStorageAppMediaDirectory(java.lang.String)>
<com.android.launcher2.FastBitmapDrawable: int getMinimumHeight()>
<android.webkit.WebViewClassic: float getDefaultZoomScale()>
<com.android.internal.app.AlertController: android.widget.Button getButton(int)>
<com.android.internal.widget.LockPatternUtils: long getLockoutAttemptDeadline()>
<android.graphics.Paint: int getBidiFlags()>
<android.mtp.MtpDevice: java.lang.String getDeviceName()>
<android.hardware.display.DisplayManagerGlobal: android.hardware.display.WifiDisplayStatus getWifiDisplayStatus()>
<com.android.mms.dom.ElementImpl: org.w3c.dom.NamedNodeMap getAttributes()>
<android.content.Intent: java.lang.String getScheme()>
<com.android.deskclock.worldclock.WorldClockAdapter: long getItemId(int)>
<com.android.mms.widget.MmsWidgetService$MmsFactory: android.widget.RemoteViews getLoadingView()>
<android.widget.ImageView: android.graphics.drawable.Drawable getDrawable()>
<android.media.videoeditor.MediaArtistNativeHelper: java.lang.String getProjectPath()>
<android.widget.GridLayout$Axis: int[] getLeadingMargins()>
<com.android.i18n.phonenumbers.NumberParseException: com.android.i18n.phonenumbers.NumberParseException$ErrorType getErrorType()>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getCurrentFailedPasswordAttempts(int)>
<android.view.ViewStub: android.view.LayoutInflater getLayoutInflater()>
<com.android.emailcommon.internet.MimeHeader: java.lang.String getFirstHeader(java.lang.String)>
<android.app.ActivityThread: java.lang.String getProcessName()>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isActivePasswordSufficient(int)>
<android.hardware.Sensor: float getPower()>
<android.graphics.drawable.InsetDrawable$InsetState: int getChangingConfigurations()>
<com.android.internal.util.TypedProperties: java.lang.Object get(java.lang.Object)>
<android.app.ActivityManagerProxy: android.content.IIntentSender getIntentSender(int,java.lang.String,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int,android.os.Bundle,int)>
<com.android.internal.util.TypedProperties: short getShort(java.lang.String)>
<android.os.DropBoxManager$Entry: int getFlags()>
<com.android.internal.os.AtomicFile: java.io.File getBaseFile()>
<com.android.internal.widget.SizeAdaptiveLayout: android.animation.Animator getTransitionAnimation()>
<com.android.uiautomator.core.UiSelector: boolean getBoolean(int)>
<android.widget.AbsSpinner: int getChildWidth(android.view.View)>
<com.android.emailcommon.provider.Policy: android.net.Uri save(android.content.Context)>
<android.view.HardwareRenderer: boolean initializeIfNeeded(int,int,android.view.Surface)>
<android.os.Debug: int getGlobalExternalFreedCount()>
<android.view.ViewGroup$MarginLayoutParams: int getMarginEnd()>
<android.app.ApplicationPackageManager: int getApplicationEnabledSetting(java.lang.String)>
<android.appwidget.AppWidgetManager: int[] getAppWidgetIds(android.content.ComponentName)>
<android.media.MediaRouter: int getRouteCount()>
<android.graphics.drawable.AnimatedRotateDrawable: int getIntrinsicHeight()>
<android.graphics.drawable.ShapeDrawable: android.graphics.drawable.ShapeDrawable$ShaderFactory getShaderFactory()>
<com.android.launcher2.PagedViewGridLayout: int getCellCountY()>
<com.android.launcher2.PagedViewGridLayout: int getCellCountX()>
<com.android.internal.widget.DrawableHolder: float getScaleY()>
<com.android.internal.widget.DrawableHolder: float getScaleX()>
<com.android.launcher2.FocusOnlyTabWidget: android.view.View getSelectedTab()>
<com.android.email.mail.store.imap.ImapUtility: java.lang.String[] getImapRangeValues(java.lang.String)>
<android.view.ViewConfiguration: int getScaledEdgeSlop()>
<android.text.DynamicLayout: int getLineDescent(int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean getCameraDisabled(android.content.ComponentName,int)>
<android.media.IRemoteControlDisplay$Stub: android.os.IBinder asBinder()>
<android.widget.AbsSpinner$RecycleBin: android.view.View get(int)>
<com.android.inputmethod.latin.ImfUtils: android.view.inputmethod.InputMethodManager getInputMethodManager(android.content.Context)>
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getContentDescription()>
<com.android.systemui.statusbar.phone.PhoneStatusBar: android.animation.Animator interpolator(android.animation.TimeInterpolator,android.animation.Animator)>
<com.android.systemui.recent.RecentTasksLoader: android.graphics.drawable.Drawable getFullResIcon(android.content.res.Resources,int)>
<android.filterpacks.imageproc.FlipFilter: android.filterfw.core.FrameFormat getOutputFormat(java.lang.String,android.filterfw.core.FrameFormat)>
<com.android.launcher2.LauncherAppWidgetHostView: android.view.View getErrorView()>
<com.android.email.activity.setup.SetupData: int getFlowMode()>
<com.google.android.apps.lightcycle.panorama.DeviceManager: float getOpenGlMaxFieldOfViewDegrees()>
<com.android.launcher2.Launcher: com.android.launcher2.SearchDropTargetBar getSearchBar()>
<android.app.ExpandableListActivity: long getSelectedId()>
<android.app.NotificationManager: android.app.INotificationManager getService()>
<android.os.Debug$MemoryInfo: int getOtherPss(int)>
<com.android.mms.transaction.TransactionState: android.net.Uri getContentUri()>
<com.android.videoeditor.service.VideoEditorProject: int getMediaItemCount()>
<android.renderscript.Program: java.lang.String getTextureName(int)>
<com.android.inputmethod.latin.SubtypeLocale: java.lang.String getKeyboardLayoutSetName(android.view.inputmethod.InputMethodSubtype)>
<android.text.style.CharacterStyle$Passthrough: android.text.style.CharacterStyle getUnderlying()>
<android.speech.tts.SynthesisRequest: java.lang.String getText()>
<android.widget.HeaderViewListAdapter: int getHeadersCount()>
<com.android.internal.policy.impl.keyguard.PagedView: float maxOverScroll()>
<com.android.internal.policy.impl.keyguard.SlidingChallengeLayout$1: java.lang.Float get(com.android.internal.policy.impl.keyguard.SlidingChallengeLayout)>
<android.app.ActivityThread: android.app.LoadedApk getPackageInfo(java.lang.String,android.content.res.CompatibilityInfo,int,int)>
<com.android.internal.widget.multiwaveview.Ease$Quint$1: float getInterpolation(float)>
<com.android.internal.widget.multiwaveview.Ease$Quint$2: float getInterpolation(float)>
<com.android.internal.widget.multiwaveview.Ease$Quint$3: float getInterpolation(float)>
<com.android.email.activity.UIControllerOnePane$ActionBarControllerCallback: java.lang.String getSearchHint()>
<com.android.internal.app.ActionBarImpl$ActionModeImpl: android.view.Menu getMenu()>
<android.widget.Switch: java.lang.CharSequence getTextOff()>
<android.graphics.drawable.GradientDrawable: int getChangingConfigurations()>
<android.webkit.CallbackProxy$UploadFileMessageData: android.webkit.CallbackProxy$UploadFile getUploadFile()>
<android.graphics.drawable.shapes.Shape: float getHeight()>
<com.android.launcher2.CellLayout$ViewCluster: int[] getBottomEdge()>
<com.android.internal.view.ActionBarPolicy: int getStackedTabMaxWidth()>
<android.view.MotionEvent: int getPointerIdBits()>
<android.net.sip.SipProfile: int getCallingUid()>
<android.net.sip.SimpleSessionDescription$Fields: int getBandwidth(java.lang.String)>
<com.android.videoeditor.util.ImageUtils: android.graphics.Bitmap scaleImage(java.lang.String,int,int,int)>
<android.widget.HorizontalScrollView: float getRightFadingEdgeStrength()>
<com.google.android.picasasync.PicasaFacade: com.google.android.picasasync.PicasaFacade get(android.content.Context)>
<android.media.audiofx.AudioEffect: android.media.audiofx.AudioEffect$Descriptor getDescriptor()>
<android.widget.HeaderViewListAdapter: int getViewTypeCount()>
<android.app.backup.IFullBackupRestoreObserver$Stub: android.os.IBinder asBinder()>
<android.filterfw.core.AsyncRunner: java.lang.Exception getError()>
<android.widget.RemoteViews$SetDrawableParameters: java.lang.String getActionName()>
<android.webkit.ZoomManager: android.view.View getExternalZoomPicker()>
<android.graphics.drawable.GradientDrawable$GradientState: int getChangingConfigurations()>
<com.android.phone.PhoneInterfaceManager: java.util.List getAllCellInfo()>
<android.app.ContextImpl: android.content.Context getOuterContext()>
<android.view.Window: android.view.WindowManager$LayoutParams getAttributes()>
<android.widget.ExpandableListView: int getFlatListPosition(long)>
<android.view.DragEvent: float getY()>
<android.view.DragEvent: float getX()>
<android.widget.CursorTreeAdapter: android.widget.Filter getFilter()>
<android.text.SpannableStringBuilder: int getSpanFlags(java.lang.Object)>
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.VerifierDeviceIdentity getVerifierDeviceIdentity()>
<com.android.internal.policy.impl.keyguard.KeyguardSecurityContainer: com.android.internal.policy.impl.keyguard.KeyguardSecurityViewFlipper getFlipper()>
<android.webkit.WebSyncManager: java.lang.Object clone()>
<com.android.internal.database.SortCursor: int getCount()>
<com.android.internal.util.StateMachine: android.os.Message getCurrentMessage()>
<android.view.GLES20Canvas: int saveLayerAlpha(float,float,float,float,int,int)>
<com.android.mms.dom.smil.SmilRootLayoutElementImpl: int getHeight()>
<android.widget.Toast: int getDuration()>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: int getEnterFadeDuration()>
<android.hardware.usb.UsbDevice: int getInterfaceCount()>
<android.text.StaticLayout: int getEllipsisStart(int)>
<android.drm.DrmUtils: byte[] readBytes(java.lang.String)>
<android.view.accessibility.AccessibilityManager: android.view.accessibility.IAccessibilityManagerClient getClient()>
<com.android.mms.layout.LayoutManager: com.android.mms.layout.LayoutManager getInstance()>
<android.content.res.XmlBlock$Parser: float getAttributeFloatValue(int,float)>
<android.view.MotionEvent: float getHistoricalSize(int,int)>
<com.android.camera.ActivityBase: com.android.gallery3d.ui.ScreenNail reuseCameraScreenNail(boolean)>
<com.android.internal.view.ActionBarPolicy: int getTabContainerHeight()>
<com.android.phone.PhoneInterfaceManager: int getDataState()>
<com.android.internal.view.menu.ActionMenuItem: java.lang.CharSequence getTitle()>
<android.view.View: android.view.View$AccessibilityDelegate getAccessibilityDelegate()>
<android.webkit.WebSettingsClassic: boolean getAllowFileAccessFromFileURLs()>
<com.android.inputmethod.latin.ExpandableDictionary$NextStaticWord: com.android.inputmethod.latin.ExpandableDictionary$Node getWordNode()>
<com.android.emailcommon.provider.EmailContent: com.android.emailcommon.provider.EmailContent restoreContentWithId(android.content.Context,java.lang.Class,android.net.Uri,java.lang.String[],long)>
<com.android.internal.util.TypedProperties: java.lang.String getString(java.lang.String)>
<android.app.SearchableInfo: int getSearchButtonText()>
<com.android.systemui.statusbar.tablet.TabletStatusBar: android.view.View getStatusBarView()>
<android.content.ContentProvider: android.os.ParcelFileDescriptor openFileHelper(android.net.Uri,java.lang.String)>
<android.provider.Settings$Global: java.lang.String getBluetoothInputDevicePriorityKey(java.lang.String)>
<android.widget.SuggestionsAdapter: int getQueryRefinement()>
<com.android.deskclock.Alarm$DaysOfWeek: boolean[] getBooleanArray()>
<com.android.email.NotificationController: int getRingerMode()>
<android.security.Credentials: android.security.Credentials getInstance()>
<com.android.org.bouncycastle.asn1.x509.X509Name: java.util.Vector getOIDs()>
<android.preference.TwoStatePreference: java.lang.CharSequence getSummaryOn()>
<android.util.Log: java.lang.String getStackTraceString(java.lang.Throwable)>
<com.android.inputmethod.keyboard.Key: int getMoreKeysColumn()>
<android.renderscript.ProgramRaster: android.renderscript.ProgramRaster$CullMode getCullMode()>
<android.filterfw.core.VertexFrame: float[] getFloats()>
<android.preference.VolumePreference$SavedState: android.preference.VolumePreference$VolumeStore getVolumeStore()>
<android.hardware.display.IDisplayManager$Stub$Proxy: int[] getDisplayIds()>
<com.android.server.accessibility.ScreenMagnifier$DisplayProvider: android.view.Display getDisplay()>
