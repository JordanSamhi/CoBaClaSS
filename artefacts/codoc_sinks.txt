<android.os.IBinder$DeathRecipient: void binderDied(android.os.IBinder)> -> _SINK_
<android.ddm.DdmHandleNativeHeap: void connected()> -> _SINK_
<java.io.ObjectOutputStream: void writeChars(java.lang.String)> -> _SINK_
<android.app.PendingIntent: android.app.PendingIntent getActivities(android.content.Context,int,android.content.Intent[],int,android.os.Bundle)> -> _SINK_
<android.os.Message: android.os.Message obtain(android.os.Message)> -> _SINK_
<java.io.PrintStream: java.io.PrintStream printf(java.util.Locale,java.lang.String,java.lang.Object[])> -> _SINK_
<android.widget.AdapterView: void addView(android.view.View)> -> _SINK_
<android.content.Context: void startActivityForResult(java.lang.String,android.content.Intent,int,android.os.Bundle)> -> _SINK_
<android.database.DatabaseUtils: void cursorStringToContentValues(android.database.Cursor,java.lang.String,android.content.ContentValues,java.lang.String)> -> _SINK_
<android.content.BroadcastReceiver$PendingResult: void setResultData(java.lang.String)> -> _SINK_
<android.os.Messenger: void send(android.os.Message)> -> _SINK_
<android.util.proto.ProtoUtils: void toDuration(android.util.proto.ProtoOutputStream,long,long,long)> -> _SINK_
<android.os.FileUtils: void stringToFile(java.io.File,java.lang.String)> -> _SINK_
<android.app.AppOpsManager: int noteOpNoThrow(int,int,java.lang.String)> -> _SINK_
<java.io.PrintStream: void print(java.lang.String)> -> _SINK_
<android.os.HidlMemoryUtil: android.os.HidlMemory byteArrayToHidlMemory(byte[])> -> _SINK_
<android.app.Notification: void addFieldsFromContext(android.content.Context,android.app.Notification)> -> _SINK_
<android.os.UpdateEngine: void applyPayload(android.content.res.AssetFileDescriptor,java.lang.String[])> -> _SINK_
<android.app.Activity: void startActivityForResultAsUser(android.content.Intent,int,android.os.Bundle,android.os.UserHandle)> -> _SINK_
<android.content.ContextWrapper: java.io.File getDir(java.lang.String,int)> -> _SINK_
<android.database.DatabaseUtils: void dumpCurrentRow(android.database.Cursor)> -> _SINK_
<java.lang.Runtime: java.lang.Process exec(java.lang.String,java.lang.String[],java.io.File)> -> _SINK_
<android.media.MediaRouter2Manager$Callback: void onSessionUpdated(android.media.RoutingSessionInfo)> -> _SINK_
<android.widget.SeekBar: void onInitializeAccessibilityNodeInfoInternal(android.view.accessibility.AccessibilityNodeInfo)> -> _SINK_
<android.view.inputmethod.InputMethodManager: int dispatchInputEvent(android.view.InputEvent,java.lang.Object,android.view.inputmethod.InputMethodManager$FinishedInputEventCallback,android.os.Handler)> -> _SINK_
<android.app.UiAutomation: android.os.ParcelFileDescriptor[] executeShellCommandRw(java.lang.String)> -> _SINK_
<android.net.Uri: void checkFileUriExposed(java.lang.String)> -> _SINK_
<android.media.tv.tuner.dvr.DvrRecorder: long write(long)> -> _SINK_
<android.app.admin.SecurityLog$SecurityEvent: boolean eventEquals(android.app.admin.SecurityLog$SecurityEvent)> -> _SINK_
<com.android.internal.telephony.gsm.SmsMessage: com.android.internal.telephony.GsmAlphabet$TextEncodingDetails calculateLength(java.lang.CharSequence,boolean)> -> _SINK_
<android.speech.tts.TtsEngines: android.content.Intent getSettingsIntent(java.lang.String)> -> _SINK_
<android.hardware.face.FaceManager$EnrollmentCallback: void onEnrollmentHelp(int,java.lang.CharSequence)> -> _SINK_
<android.location.SettingInjectorService: void onStart(android.content.Intent,int)> -> _SINK_
<android.app.admin.SystemUpdatePolicy: void validateAgainstPreviousFreezePeriod(java.time.LocalDate,java.time.LocalDate,java.time.LocalDate)> -> _SINK_
<android.os.Debug: void dumpHprofData(java.lang.String)> -> _SINK_
<android.app.ActivityManager: void broadcastStickyIntent(android.content.Intent,int,int)> -> _SINK_
<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)> -> _SINK_
<android.database.sqlite.SQLiteConnection: long executeForLong(java.lang.String,java.lang.Object[],android.os.CancellationSignal)> -> _SINK_
<android.app.ApplicationExitInfo: void setDescription(java.lang.String)> -> _SINK_
<java.io.DataOutputStream: void write(byte[],int,int)> -> _SINK_
<android.telecom.InCallAdapter: void deflectCall(java.lang.String,android.net.Uri)> -> _SINK_
<android.util.jar.StrictJarManifest: void write(java.io.OutputStream)> -> _SINK_
<android.net.DnsResolver: void rawQuery(android.net.Network,java.lang.String,int,int,int,java.util.concurrent.Executor,android.os.CancellationSignal,android.net.DnsResolver$Callback)> -> _SINK_
<java.lang.StringBuilder: java.lang.StringBuilder insert(int,float)> -> _SINK_
<android.service.notification.NotificationAssistantService: void onSuggestedReplySent(java.lang.String,java.lang.CharSequence,int)> -> _SINK_
<com.android.internal.telephony.SmsHeader: byte[] toByteArray(com.android.internal.telephony.SmsHeader)> -> _SINK_
<java.util.logging.Logger: void setResourceBundle(java.util.ResourceBundle)> -> _SINK_
<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.util.function.Supplier)> -> _SINK_
<java.io.DataOutputStream: void write(int)> -> _SINK_
<android.app.Notification$Builder: android.app.Notification$Builder setRemoteInputHistory(java.lang.CharSequence[])> -> _SINK_
<android.app.Dialog: boolean takeCancelAndDismissListeners(java.lang.String,android.content.DialogInterface$OnCancelListener,android.content.DialogInterface$OnDismissListener)> -> _SINK_
<android.app.role.RoleManager: android.content.Intent createRequestRoleIntent(java.lang.String)> -> _SINK_
<android.app.Activity: void startActivityAsUser(android.content.Intent,android.os.Bundle,android.os.UserHandle)> -> _SINK_
<android.database.sqlite.SQLiteConnection: long executeForLastInsertedRowId(java.lang.String,java.lang.Object[],android.os.CancellationSignal)> -> _SINK_
<android.os.storage.StorageManager: void format(java.lang.String)> -> _SINK_
<android.telecom.Voicemail: android.telecom.Voicemail$Builder createForInsertion(long,java.lang.String)> -> _SINK_
<android.media.midi.MidiSender: void connect(android.media.midi.MidiReceiver)> -> _SINK_
<android.content.Intent: void dumpDebug(android.util.proto.ProtoOutputStream,long)> -> _SINK_
<android.widget.CheckedTextView: void onInitializeAccessibilityNodeInfoInternal(android.view.accessibility.AccessibilityNodeInfo)> -> _SINK_
<java.lang.Runtime: java.lang.Process exec(java.lang.String[])> -> _SINK_
<android.graphics.pdf.PdfEditor: void write(android.os.ParcelFileDescriptor)> -> _SINK_
<android.media.tv.TvRecordingClient: void sendAppPrivateCommand(java.lang.String,android.os.Bundle)> -> _SINK_
<android.util.TimeUtils: void dumpTime(java.io.PrintWriter,long)> -> _SINK_
<javax.crypto.Cipher: void updateAAD(java.nio.ByteBuffer)> -> _SINK_
<android.app.AlarmManager: void set(int,long,long,long,android.app.AlarmManager$OnAlarmListener,android.os.Handler,android.os.WorkSource)> -> _SINK_
<android.app.ApplicationErrorReport$AnrInfo: void dump(android.util.Printer,java.lang.String)> -> _SINK_
<android.view.ViewGroup: void onInitializeAccessibilityNodeInfoInternal(android.view.accessibility.AccessibilityNodeInfo)> -> _SINK_
<android.os.AsyncTask: void execute(java.lang.Runnable)> -> _SINK_
<android.os.Handler: void removeEqualMessages(int,java.lang.Object)> -> _SINK_
<android.app.Notification$CarExtender$Builder: android.app.Notification$CarExtender$Builder addMessage(java.lang.String)> -> _SINK_
<android.os.Handler: void removeCallbacksAndEqualMessages(java.lang.Object)> -> _SINK_
<android.telephony.ims.ImsCallSession$Listener: void callSessionRttMessageReceived(java.lang.String)> -> _SINK_
<java.io.PrintStream: void print(char)> -> _SINK_
<android.os.Vibrator: boolean setAlwaysOnEffect(int,java.lang.String,int,android.os.VibrationEffect,android.media.AudioAttributes)> -> _SINK_
<android.telephony.ims.compat.stub.ImsCallSessionImplBase: void sendDtmf(char,android.os.Message)> -> _SINK_
<java.io.PrintStream: void print(int)> -> _SINK_
<android.telecom.InCallAdapter: void rejectCall(java.lang.String,int)> -> _SINK_
<android.os.SystemVibrator: void vibrate(int,java.lang.String,android.os.VibrationEffect,java.lang.String,android.media.AudioAttributes)> -> _SINK_
<android.media.MediaRouter: void selectRoute(int,android.media.MediaRouter$RouteInfo)> -> _SINK_
<android.window.TaskEmbedder: void startActivity(android.app.PendingIntent,android.content.Intent,android.app.ActivityOptions)> -> _SINK_
<com.android.internal.util.StateMachine$LogRec: void update(com.android.internal.util.StateMachine,android.os.Message,java.lang.String,com.android.internal.util.IState,com.android.internal.util.IState,com.android.internal.util.IState)> -> _SINK_
<android.telephony.ims.ImsCallSession$Listener: void callSessionResumeReceived(android.telephony.ims.ImsCallSession,android.telephony.ims.ImsCallProfile)> -> _SINK_
<com.android.internal.telephony.cdma.SmsMessage: com.android.internal.telephony.cdma.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,java.lang.String,boolean,com.android.internal.telephony.SmsHeader,int)> -> _SINK_
<android.app.AlarmManager$AlarmClockInfo: void dumpDebug(android.util.proto.ProtoOutputStream,long)> -> _SINK_
<android.telecom.Call: void reject(boolean,java.lang.String)> -> _SINK_
<android.content.ContextWrapper: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory,android.database.DatabaseErrorHandler)> -> _SINK_
<com.android.internal.util.StateMachine: android.os.Message obtainMessage(int)> -> _SINK_
<android.provider.Telephony$Sms$Intents: android.telephony.SmsMessage[] getMessagesFromIntent(android.content.Intent)> -> _SINK_
<android.service.voice.VoiceInteractionSession: void onTaskFinished(android.content.Intent,int)> -> _SINK_
<java.io.ObjectOutputStream: void writeUTF(java.lang.String)> -> _SINK_
<android.widget.AdapterView: void removeView(android.view.View)> -> _SINK_
<java.util.logging.Logger: void info(java.lang.String)> -> _SINK_
<android.provider.Telephony$Sms$Draft: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)> -> _SINK_
<java.util.logging.Logger: void logrb(java.util.logging.Level,java.lang.String,java.lang.String,java.util.ResourceBundle,java.lang.String,java.lang.Throwable)> -> _SINK_
<java.util.logging.Logger: void logrb(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.telephony.ims.stub.ImsSmsImplBase: void acknowledgeSms(int,int,int)> -> _SINK_
<android.telephony.ims.feature.ImsFeature: void initialize(android.content.Context,int)> -> _SINK_
<android.content.ContextWrapper: void sendOrderedBroadcast(android.content.Intent,java.lang.String,int,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> -> _SINK_
<java.io.RandomAccessFile: void writeBytes(java.lang.String)> -> _SINK_
<android.app.NotificationChannel: void writeXmlForBackup(org.xmlpull.v1.XmlSerializer,android.content.Context)> -> _SINK_
<javax.crypto.Cipher: void updateAAD(byte[],int,int)> -> _SINK_
<android.os.BatteryStats: void dumpCheckinLocked(android.content.Context,java.io.PrintWriter,int,int,boolean)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[])> -> _SINK_
<android.security.keystore.ArrayUtils: int copy(byte[],int,byte[],int,int)> -> _SINK_
<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.CharSequence)> -> _SINK_
<android.net.ProxyInfo: android.net.ProxyInfo buildDirectProxy(java.lang.String,int)> -> _SINK_
<android.app.ApplicationPackageManager: boolean isSignedByExactly(java.lang.String,android.content.pm.KeySet)> -> _SINK_
<android.telephony.SmsMessage: int[] calculateLength(java.lang.String,boolean)> -> _SINK_
<android.telecom.Connection$RttTextStream: void write(java.lang.String)> -> _SINK_
<com.android.internal.os.WrapperInit: void main(java.lang.String[])> -> _SINK_
<android.content.Intent: android.content.Intent makeMainSelectorActivity(java.lang.String,java.lang.String)> -> _SINK_
<android.net.Network: void bindSocket(java.io.FileDescriptor)> -> _SINK_
<android.net.Network: void bindSocket(java.net.DatagramSocket)> -> _SINK_
<android.media.MediaCodec: void configure(android.media.MediaFormat,android.view.Surface,int,android.media.MediaDescrambler)> -> _SINK_
<android.os.FileBridge$FileBridgeOutputStream: void write(byte[],int,int)> -> _SINK_
<android.app.Instrumentation: android.app.Instrumentation$ActivityResult execStartActivity(android.content.Context,android.os.IBinder,android.os.IBinder,java.lang.String,android.content.Intent,int,android.os.Bundle,android.os.UserHandle)> -> _SINK_
<android.content.ContextWrapper: boolean moveDatabaseFrom(android.content.Context,java.lang.String)> -> _SINK_
<android.view.textclassifier.TextLanguage$Builder: android.view.textclassifier.TextLanguage$Builder setExtras(android.os.Bundle)> -> _SINK_
<android.app.backup.BackupDataOutput: int writeEntityData(byte[],int)> -> _SINK_
<android.util.EventLog$Event: android.util.EventLog$Event withNewData(java.lang.Object)> -> _SINK_
<java.util.logging.Logger: void logrb(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)> -> _SINK_
<android.content.ComponentName: void appendShortString(java.lang.StringBuilder)> -> _SINK_
<android.os.Trace: void traceBegin(long,java.lang.String)> -> _SINK_
<android.app.Notification: void setBubbleMetadata(android.app.Notification$BubbleMetadata)> -> _SINK_
<android.app.Notification$BubbleMetadata$Builder: android.app.Notification$BubbleMetadata$Builder setDeleteIntent(android.app.PendingIntent)> -> _SINK_
<com.android.internal.util.FastPrintWriter: void println()> -> _SINK_
<android.provider.CalendarContract$CalendarAlerts: android.net.Uri insert(android.content.ContentResolver,long,long,long,long,int)> -> _SINK_
<android.net.util.SocketUtils: java.net.SocketAddress makeNetlinkSocketAddress(int,int)> -> _SINK_
<android.content.ContentProvider: int getUserIdFromAuthority(java.lang.String,int)> -> _SINK_
<android.bluetooth.BluetoothHeadsetClient: boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice)> -> _SINK_
<android.preference.PreferenceFragment: void onActivityResult(int,int,android.content.Intent)> -> _SINK_
<android.database.DatabaseUtils: void cursorIntToContentValues(android.database.Cursor,java.lang.String,android.content.ContentValues,java.lang.String)> -> _SINK_
<com.android.internal.util.FastPrintWriter: void write(java.lang.String,int,int)> -> _SINK_
<android.media.tv.TvInputManager$Session: int dispatchInputEvent(android.view.InputEvent,java.lang.Object,android.media.tv.TvInputManager$Session$FinishedInputEventCallback,android.os.Handler)> -> _SINK_
<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object[])> -> _SINK_
<android.content.IntentFilter: void addMimeGroup(java.lang.String)> -> _SINK_
<android.app.slice.SliceProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> -> _SINK_
<android.telephony.SmsMessage: int[] calculateLength(java.lang.String,boolean,int)> -> _SINK_
<android.app.Activity: void startActivityForResultAsUser(android.content.Intent,int,android.os.UserHandle)> -> _SINK_
<android.app.servertransaction.ClientTransaction: void schedule()> -> _SINK_
<android.provider.Settings: boolean isCallingPackageAllowedToPerformAppOpsProtectedOperation(android.content.Context,int,java.lang.String,boolean,int,java.lang.String[],boolean)> -> _SINK_
<android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildQueryString(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.telecom.Call: void deflect(android.net.Uri)> -> _SINK_
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,float)> -> _SINK_
<android.ddm.DdmHandleHeap: void connected()> -> _SINK_
<android.app.backup.BackupAgent: void attach(android.content.Context)> -> _SINK_
<android.os.SystemVibrator: boolean setAlwaysOnEffect(int,java.lang.String,int,android.os.VibrationEffect,android.media.AudioAttributes)> -> _SINK_
<android.app.Notification$MessagingStyle: android.app.Notification$MessagingStyle addHistoricMessage(android.app.Notification$MessagingStyle$Message)> -> _SINK_
<android.service.notification.ScheduleCalendar: void setSchedule(android.service.notification.ZenModeConfig$ScheduleInfo)> -> _SINK_
<java.lang.StringBuilder: java.lang.StringBuilder insert(int,int)> -> _SINK_
<android.app.admin.DelegatedAdminReceiver: void onNetworkLogsAvailable(android.content.Context,android.content.Intent,long,int)> -> _SINK_
<com.android.internal.util.WakeupMessage: void schedule(long)> -> _SINK_
<android.telephony.MmsManager: void downloadMultimediaMessage(int,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent,long)> -> _SINK_
<android.view.textservice.SpellCheckerSession: void getSentenceSuggestions(android.view.textservice.TextInfo[],int)> -> _SINK_
<android.app.ApplicationPackageManager: void freeStorage(java.lang.String,long,android.content.IntentSender)> -> _SINK_
<com.android.internal.util.AsyncChannel: void connect(android.content.Context,android.os.Handler,java.lang.Class)> -> _SINK_
<android.view.SurfaceControl: void setDisplayPowerMode(android.os.IBinder,int)> -> _SINK_
<android.view.textclassifier.TextClassifier$EntityConfig: android.view.textclassifier.TextClassifier$EntityConfig create(java.util.Collection,java.util.Collection,java.util.Collection)> -> _SINK_
<android.app.UiAutomation: android.os.ParcelFileDescriptor executeShellCommand(java.lang.String)> -> _SINK_
<android.widget.Chronometer: void setFormat(java.lang.String)> -> _SINK_
<java.net.DatagramSocket: void connect(java.net.InetAddress,int)> -> _SINK_
<android.app.InstantAppResolverService: void onGetInstantAppResolveInfo(android.content.Intent,int[],android.os.UserHandle,java.lang.String,android.app.InstantAppResolverService$InstantAppResolutionCallback)> -> _SINK_
<android.provider.Telephony$Sms: boolean moveMessageToFolder(android.content.Context,android.net.Uri,int,int)> -> _SINK_
<android.telephony.SubscriptionManager: void putPhoneIdAndSubIdExtra(android.content.Intent,int)> -> _SINK_
<android.app.ApplicationPackageManager: void setHarmfulAppWarning(java.lang.String,java.lang.CharSequence)> -> _SINK_
<android.view.InputQueue: void dispose(boolean)> -> _SINK_
<android.hardware.face.Face: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<java.net.DatagramSocket: void setTrafficClass(int)> -> _SINK_
<android.telephony.CellIdentity: void setOperatorAlphaLong(java.lang.String)> -> _SINK_
<com.android.internal.util.AsyncChannel: void sendMessage(int,java.lang.Object)> -> _SINK_
<android.app.Notification$Builder: android.app.Notification$Builder setChannelId(java.lang.String)> -> _SINK_
<java.io.PrintWriter: void write(char[])> -> _SINK_
<android.webkit.WebChromeClient: void onProgressChanged(android.webkit.WebView,int)> -> _SINK_
<android.media.tv.TvInputManager$SessionCallback: void onSessionEvent(android.media.tv.TvInputManager$Session,java.lang.String,android.os.Bundle)> -> _SINK_
<android.text.Layout: void drawBackground(android.graphics.Canvas,android.graphics.Path,android.graphics.Paint,int,int,int)> -> _SINK_
<java.util.logging.Logger: void finest(java.lang.String)> -> _SINK_
<android.media.MediaDrm: byte[] signRSA(byte[],java.lang.String,byte[],byte[])> -> _SINK_
<android.nfc.cardemulation.NfcFCardEmulation: boolean isValidSystemCode(java.lang.String)> -> _SINK_
<android.telephony.mbms.vendor.MbmsDownloadServiceBase: int resetDownloadKnowledge(android.telephony.mbms.DownloadRequest)> -> _SINK_
<android.provider.Telephony$Sms$Outbox: android.net.Uri addMessage(int,android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean,long)> -> _SINK_
<android.util.Slog: int wtf(java.lang.String,java.lang.Throwable)> -> _SINK_
<android.app.ApplicationPackageManager: void grantRuntimePermission(java.lang.String,java.lang.String,android.os.UserHandle)> -> _SINK_
<android.telecom.RemoteConnection: void playDtmfTone(char)> -> _SINK_
<android.app.Instrumentation: void execStartActivities(android.content.Context,android.os.IBinder,android.os.IBinder,android.app.Activity,android.content.Intent[],android.os.Bundle)> -> _SINK_
<android.database.DatabaseUtils: void cursorIntToContentValues(android.database.Cursor,java.lang.String,android.content.ContentValues)> -> _SINK_
<android.util.proto.EncodedBuffer: void dumpByteString(java.lang.String,java.lang.String,byte[])> -> _SINK_
<android.content.Intent: boolean migrateExtraStreamToClipData(android.content.Context)> -> _SINK_
<android.app.ApplicationErrorReport$BatteryInfo: void dump(android.util.Printer,java.lang.String)> -> _SINK_
<android.app.DialogFragment: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.app.DownloadManager: long addCompletedDownload(java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String,long,boolean,boolean,android.net.Uri,android.net.Uri)> -> _SINK_
<android.telecom.CallerInfoAsyncQuery$CallerInfoAsyncQueryHandler$CallerInfoWorkerHandler: void handleMessage(android.os.Message)> -> _SINK_
<android.content.AsyncQueryHandler$WorkerHandler: void handleMessage(android.os.Message)> -> _SINK_
<android.hardware.camera2.impl.CameraCaptureSessionImpl: int captureBurstRequests(java.util.List,java.util.concurrent.Executor,android.hardware.camera2.CameraCaptureSession$CaptureCallback)> -> _SINK_
<android.widget.HorizontalScrollView: void onInitializeAccessibilityNodeInfoInternal(android.view.accessibility.AccessibilityNodeInfo)> -> _SINK_
<android.graphics.HardwareRenderer: void dumpProfileInfo(java.io.FileDescriptor,int)> -> _SINK_
<android.app.backup.RestoreSession: int restorePackage(java.lang.String,android.app.backup.RestoreObserver,android.app.backup.BackupManagerMonitor)> -> _SINK_
<java.io.DataOutputStream: void writeBytes(java.lang.String)> -> _SINK_
<android.telecom.Call$RttCall: void write(java.lang.String)> -> _SINK_
<android.app.ApplicationPackageManager: java.lang.String[] setPackagesSuspended(java.lang.String[],boolean,android.os.PersistableBundle,android.os.PersistableBundle,java.lang.String)> -> _SINK_
<java.io.PrintWriter: void print(char)> -> _SINK_
<android.widget.ProgressBar: void onInitializeAccessibilityNodeInfoInternal(android.view.accessibility.AccessibilityNodeInfo)> -> _SINK_
<android.bluetooth.BluetoothHealth: boolean connectChannelToSource(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)> -> _SINK_
<android.media.midi.MidiReceiver: void send(byte[],int,int,long)> -> _SINK_
<android.provider.Contacts$ContactMethods: void addPostalLocation(android.content.Context,long,double,double)> -> _SINK_
<android.app.ApplicationPackageManager: boolean shouldTraceGrant(java.lang.String,java.lang.String,int)> -> _SINK_
<android.provider.DocumentsProvider: java.lang.String createDocument(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.database.DatabaseUtils: void cursorStringToContentValuesIfPresent(android.database.Cursor,android.content.ContentValues,java.lang.String)> -> _SINK_
<android.content.ContextWrapper: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler,int)> -> _SINK_
<com.android.internal.os.LoggingPrintStream: void println(int)> -> _SINK_
<android.media.midi.MidiInputPort: void onSend(byte[],int,int,long)> -> _SINK_
<android.content.Intent: void fixUris(int)> -> _SINK_
<android.content.ClipData$Item: void dumpDebug(android.util.proto.ProtoOutputStream,long)> -> _SINK_
<android.os.TestLooperManager: boolean hasMessages(android.os.Handler,java.lang.Object,java.lang.Runnable)> -> _SINK_
<android.provider.Telephony$Sms: android.net.Uri addMessageToUri(android.content.ContentResolver,android.net.Uri,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean,boolean,long)> -> _SINK_
<android.util.Slog: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
<android.telephony.TelephonyManager: java.util.List getCarrierPackageNamesForIntent(android.content.Intent)> -> _SINK_
<android.preference.PreferenceActivity: void addPreferencesFromIntent(android.content.Intent)> -> _SINK_
<java.lang.StringBuffer: java.lang.StringBuffer delete(int,int)> -> _SINK_
<android.ddm.DdmHandleHello: void sendWAIT(int)> -> _SINK_
<com.android.internal.util.FastPrintWriter: void print(java.lang.String)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String,java.lang.Object[])> -> _SINK_
<android.telephony.mbms.vendor.MbmsGroupCallServiceBase: int startGroupCall(int,long,java.util.List,java.util.List,android.telephony.mbms.GroupCallCallback)> -> _SINK_
<android.database.DatabaseUtils: void cursorFloatToContentValuesIfPresent(android.database.Cursor,android.content.ContentValues,java.lang.String)> -> _SINK_
<android.telephony.ims.stub.ImsSmsImplBase: void onSmsReceived(int,java.lang.String,byte[])> -> _SINK_
<android.bluetooth.BluetoothHeadsetClient: boolean holdCall(android.bluetooth.BluetoothDevice)> -> _SINK_
<android.view.WindowManagerGlobal: void closeAll(android.os.IBinder,java.lang.String,java.lang.String)> -> _SINK_
<android.content.ComponentName: void appendShortString(java.lang.StringBuilder,java.lang.String,java.lang.String)> -> _SINK_
<java.io.DataOutputStream: void writeByte(int)> -> _SINK_
<android.app.ApplicationPackageManager: void revokeRuntimePermission(java.lang.String,java.lang.String,android.os.UserHandle)> -> _SINK_
<android.os.HwParcel: void writeInt64Vector(java.util.ArrayList)> -> _SINK_
<android.app.ApplicationPackageManager: void setUpdateAvailable(java.lang.String,boolean)> -> _SINK_
<android.app.ActivityManager: void noteAlarmStart(android.app.PendingIntent,android.os.WorkSource,int,java.lang.String)> -> _SINK_
<android.database.sqlite.SQLiteQueryBuilder: int delete(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String[])> -> _SINK_
<android.graphics.fonts.FontFamily$Builder: android.graphics.fonts.FontFamily build(java.lang.String,int,boolean)> -> _SINK_
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)> -> _SINK_
<android.os.UpdateEngine: void applyPayload(java.lang.String,long,long,java.lang.String[])> -> _SINK_
<android.os.RecoverySystem: void rebootPromptAndWipeUserData(android.content.Context,java.lang.String)> -> _SINK_
<android.util.Slog: int wtf(java.lang.String,java.lang.String)> -> _SINK_
<android.app.ApplicationErrorReport$RunningServiceInfo: void dump(android.util.Printer,java.lang.String)> -> _SINK_
<com.android.internal.util.IndentingPrintWriter: void write(int)> -> _SINK_
<android.telephony.mbms.vendor.MbmsDownloadServiceBase: int cancelDownload(android.telephony.mbms.DownloadRequest)> -> _SINK_
<android.view.View: void encode(android.view.ViewHierarchyEncoder)> -> _SINK_
<android.widget.TextClock: void setContentDescriptionFormat12Hour(java.lang.CharSequence)> -> _SINK_
<java.util.Properties: void storeToXML(java.io.OutputStream,java.lang.String)> -> _SINK_
<android.app.DialogFragment: int show(android.app.FragmentTransaction,java.lang.String)> -> _SINK_
<android.metrics.MetricsReader: void read(long)> -> _SINK_
<java.io.OutputStreamWriter: void write(int)> -> _SINK_
<android.telecom.Call: void sendCallEvent(java.lang.String,android.os.Bundle)> -> _SINK_
<android.content.Context: void startActivityAsUser(android.content.Intent,android.os.UserHandle)> -> _SINK_
<com.android.internal.logging.MetricsLogger: void action(android.metrics.LogMaker)> -> _SINK_
<android.view.textclassifier.TextClassification: android.app.PendingIntent createPendingIntent(android.content.Context,android.content.Intent,int)> -> _SINK_
<android.telephony.mbms.vendor.MbmsDownloadServiceBase: int addProgressListener(android.telephony.mbms.DownloadRequest,android.telephony.mbms.DownloadProgressListener)> -> _SINK_
<android.hardware.camera2.legacy.CaptureCollector: android.util.Pair previewCaptured(long)> -> _SINK_
<android.hardware.display.BrightnessCorrection: void saveToXml(org.xmlpull.v1.XmlSerializer)> -> _SINK_
<android.util.proto.ProtoOutputStream: void write(long,byte[])> -> _SINK_
<android.app.AppOpsManager: void setUserRestriction(int,boolean,android.os.IBinder,java.lang.String[])> -> _SINK_
<android.database.sqlite.SQLiteConnection: android.os.ParcelFileDescriptor executeForBlobFileDescriptor(java.lang.String,java.lang.Object[],android.os.CancellationSignal)> -> _SINK_
<android.content.pm.ActivityInfo: void dump(android.util.Printer,java.lang.String,int)> -> _SINK_
<android.net.NattKeepalivePacketData: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.database.DatabaseUtils: void readExceptionFromParcel(android.os.Parcel)> -> _SINK_
<android.app.Activity: void startActivity(android.content.Intent)> -> _SINK_
<android.provider.Settings$Secure: void getCloneToManagedProfileSettings(java.util.Set)> -> _SINK_
<android.telephony.ims.ImsCallSession: void sendRttMessage(java.lang.String)> -> _SINK_
<android.content.Intent: void saveToXml(org.xmlpull.v1.XmlSerializer)> -> _SINK_
<android.telecom.CallerInfo: void setPhoneNumber(java.lang.String)> -> _SINK_
<android.telecom.InCallAdapter: void sendCallEvent(java.lang.String,java.lang.String,int,android.os.Bundle)> -> _SINK_
<android.app.ApplicationErrorReport$CrashInfo: void dump(android.util.Printer,java.lang.String)> -> _SINK_
<android.app.backup.BackupTransport: int performBackup(android.content.pm.PackageInfo,android.os.ParcelFileDescriptor,int)> -> _SINK_
<com.android.internal.util.FastPrintWriter: void print(char[])> -> _SINK_
<android.app.Instrumentation: android.app.Activity newActivity(java.lang.ClassLoader,java.lang.String,android.content.Intent)> -> _SINK_
<android.telephony.MbmsDownloadSession: void cancelDownload(android.telephony.mbms.DownloadRequest)> -> _SINK_
<android.view.ViewGroup$MarginLayoutParams: void onDebugDraw(android.view.View,android.graphics.Canvas,android.graphics.Paint)> -> _SINK_
<android.webkit.WebChromeClient$FileChooserParams: android.net.Uri[] parseResult(int,android.content.Intent)> -> _SINK_
<android.media.midi.MidiOutputPort: void onConnect(android.media.midi.MidiReceiver)> -> _SINK_
<com.android.internal.telephony.GsmAlphabet: byte[] stringToGsm7BitPacked(java.lang.String,int,int)> -> _SINK_
<android.os.RecoverySystem: void installPackage(android.content.Context,java.io.File,boolean)> -> _SINK_
<android.telephony.mbms.vendor.MbmsDownloadServiceBase: int removeProgressListener(android.telephony.mbms.DownloadRequest,android.telephony.mbms.DownloadProgressListener)> -> _SINK_
<android.service.voice.VoiceInteractionSession: void onRequestAbortVoice(android.service.voice.VoiceInteractionSession$AbortVoiceRequest)> -> _SINK_
<android.os.Parcel: void setClassCookie(java.lang.Class,java.lang.Object)> -> _SINK_
<java.lang.StringBuilder: java.lang.StringBuilder insert(int,double)> -> _SINK_
<android.telephony.CellInfoCdma: void setCellSignalStrength(android.telephony.CellSignalStrengthCdma)> -> _SINK_
<android.content.pm.PackageParser: int computeTargetSdkVersion(int,java.lang.String,java.lang.String[],java.lang.String[])> -> _SINK_
<android.content.ContentProvider: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<java.security.MessageDigest: void update(byte)> -> _SINK_
<android.nfc.cardemulation.NfcFServiceInfo: void dumpDebug(android.util.proto.ProtoOutputStream)> -> _SINK_
<android.telephony.ServiceState: void setCssIndicator(int)> -> _SINK_
<android.content.res.Configuration: void dumpDebug(android.util.proto.ProtoOutputStream,long)> -> _SINK_
<com.android.internal.telephony.cdma.sms.BearerData: byte[] encode(com.android.internal.telephony.cdma.sms.BearerData)> -> _SINK_
<android.content.ContextWrapper: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)> -> _SINK_
<java.util.logging.Logger: void finer(java.util.function.Supplier)> -> _SINK_
<java.io.PrintWriter: void print(char[])> -> _SINK_
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.Object)> -> _SINK_
<android.content.ContextWrapper: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> -> _SINK_
<android.app.Vr2dDisplayProperties: void dump(java.io.PrintWriter,java.lang.String)> -> _SINK_
<android.telephony.SubscriptionInfo: android.graphics.Bitmap createIconBitmap(android.content.Context)> -> _SINK_
<android.app.ActivityManager: void dumpPackageState(java.io.FileDescriptor,java.lang.String)> -> _SINK_
<android.app.ActivityThread: void handleSendResult(android.os.IBinder,java.util.List,java.lang.String)> -> _SINK_
<android.app.Fragment: void startActivityForResultAsUser(android.content.Intent,int,android.os.Bundle,android.os.UserHandle)> -> _SINK_
<java.lang.StringBuffer: java.lang.StringBuffer deleteCharAt(int)> -> _SINK_
<com.android.internal.util.AsyncChannel: int connectSrcHandlerToPackageSync(android.content.Context,android.os.Handler,java.lang.String,java.lang.String)> -> _SINK_
<android.content.AsyncQueryHandler: void handleMessage(android.os.Message)> -> _SINK_
<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction reparentChildren(android.view.SurfaceControl,android.view.SurfaceControl)> -> _SINK_
<java.util.logging.Logger: void config(java.lang.String)> -> _SINK_
<android.app.AppOpsManager$HistoricalOps: void merge(android.app.AppOpsManager$HistoricalOps)> -> _SINK_
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.CharSequence)> -> _SINK_
<android.os.Handler: android.os.Message obtainMessage(int,int,int)> -> _SINK_
<android.content.ContextWrapper: android.content.ComponentName startForegroundServiceAsUser(android.content.Intent,android.os.UserHandle)> -> _SINK_
<android.content.pm.SuspendDialogInfo$Builder: android.content.pm.SuspendDialogInfo$Builder setMessage(int)> -> _SINK_
<android.media.MediaCodecInfo$VideoCapabilities: android.media.MediaCodecInfo$VideoCapabilities create(android.media.MediaFormat,android.media.MediaCodecInfo$CodecCapabilities)> -> _SINK_
<android.telephony.mbms.vendor.MbmsGroupCallServiceBase: int initialize(android.telephony.mbms.MbmsGroupCallSessionCallback,int)> -> _SINK_
<java.io.BufferedOutputStream: void write(int)> -> _SINK_
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor open(java.io.File,int,android.os.Handler,android.os.ParcelFileDescriptor$OnCloseListener)> -> _SINK_
<android.telecom.RemoteConnection: void registerCallback(android.telecom.RemoteConnection$Callback,android.os.Handler)> -> _SINK_
<android.provider.Telephony$Sms$Sent: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)> -> _SINK_
<com.android.internal.os.LoggingPrintStream: void print(java.lang.String)> -> _SINK_
<android.os.HwParcel: void writeStringVector(java.util.ArrayList)> -> _SINK_
<android.provider.SearchRecentSuggestions: void saveRecentQuery(java.lang.String,java.lang.String)> -> _SINK_
<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.Object)> -> _SINK_
<java.nio.file.FileSystemException: java.lang.String getOtherFile()> -> _SINK_
<android.app.InstantAppResolverService: void onGetInstantAppIntentFilter(android.content.Intent,int[],android.os.UserHandle,java.lang.String,android.app.InstantAppResolverService$InstantAppResolutionCallback)> -> _SINK_
<android.database.sqlite.SQLiteSession: long executeForLastInsertedRowId(java.lang.String,java.lang.Object[],int,android.os.CancellationSignal)> -> _SINK_
<android.database.sqlite.SQLiteSession: int executeForChangedRowCount(java.lang.String,java.lang.Object[],int,android.os.CancellationSignal)> -> _SINK_
<android.app.slice.SliceProvider: android.app.PendingIntent createPermissionIntent(android.content.Context,android.net.Uri,java.lang.String)> -> _SINK_
<android.os.Debug: void dumpHprofData(java.lang.String,java.io.FileDescriptor)> -> _SINK_
<android.widget.TextView: void setAccessibilitySelection(int,int)> -> _SINK_
<android.app.slice.SliceProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> -> _SINK_
<android.view.DisplayInfo: void dumpDebug(android.util.proto.ProtoOutputStream,long)> -> _SINK_
<java.nio.file.Files: java.nio.file.Path walkFileTree(java.nio.file.Path,java.nio.file.FileVisitor)> -> _SINK_
<android.media.MediaScannerConnection: void scanFile(android.content.Context,java.lang.String[],java.lang.String[],android.media.MediaScannerConnection$OnScanCompletedListener)> -> _SINK_
<android.app.Instrumentation: int execStartActivitiesAsUser(android.content.Context,android.os.IBinder,android.os.IBinder,android.app.Activity,android.content.Intent[],android.os.Bundle,int)> -> _SINK_
<java.io.DataOutputStream: void writeChars(java.lang.String)> -> _SINK_
<android.hardware.location.NanoApp: void setName(java.lang.String)> -> _SINK_
<android.telephony.mbms.MbmsTempFileProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> -> _SINK_
<android.os.Handler: android.os.Message obtainMessage(int)> -> _SINK_
<com.android.internal.content.FileSystemProvider: android.os.ParcelFileDescriptor openDocument(java.lang.String,java.lang.String,android.os.CancellationSignal)> -> _SINK_
<android.app.DialogFragment: void onAttach(android.content.Context)> -> _SINK_
<java.nio.file.Files: java.nio.file.Path readSymbolicLink(java.nio.file.Path)> -> _SINK_
<android.media.AudioSystem: void setRecordingCallback(android.media.AudioSystem$AudioRecordingCallback)> -> _SINK_
<android.os.storage.CrateInfo: void readFromParcel(android.os.Parcel)> -> _SINK_
<android.os.TestLooperManager: void recycle(android.os.Message)> -> _SINK_
<android.media.browse.MediaBrowser$SubscriptionCallback: void onChildrenLoaded(java.lang.String,java.util.List,android.os.Bundle)> -> _SINK_
<android.media.MediaRouter2$RoutingController: void setVolume(int)> -> _SINK_
<android.os.Parcel: void readException(int,java.lang.String)> -> _SINK_
<java.io.ObjectOutputStream: void write(byte[])> -> _SINK_
<android.media.MediaRouter2$TransferCallback: void onTransferFailure(android.media.MediaRoute2Info)> -> _SINK_
<android.net.NetworkProvider: void setProviderId(int)> -> _SINK_
<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.Throwable,java.util.function.Supplier)> -> _SINK_
<android.os.FileUtils: void stringToFile(java.lang.String,java.lang.String)> -> _SINK_
<java.io.DataOutputStream: void writeInt(int)> -> _SINK_
<android.telephony.ims.ImsCallSession: void transfer(android.telephony.ims.ImsCallSession)> -> _SINK_
<android.os.HwParcel: void writeInt8Vector(java.util.ArrayList)> -> _SINK_
<java.io.ByteArrayOutputStream: void writeTo(java.io.OutputStream)> -> _SINK_
<android.text.Layout: void drawText(android.graphics.Canvas,int,int)> -> _SINK_
<android.telecom.Phone: void requestBluetoothAudio(java.lang.String)> -> _SINK_
<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setOverrideScalingMode(android.view.SurfaceControl,int)> -> _SINK_
<android.app.AlarmManager: void setExact(int,long,java.lang.String,android.app.AlarmManager$OnAlarmListener,android.os.Handler)> -> _SINK_
<com.android.internal.util.AsyncChannel: void connect(com.android.internal.util.AsyncService,android.os.Messenger)> -> _SINK_
<android.bluetooth.BluetoothHeadsetClient: boolean terminateCall(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHeadsetClientCall)> -> _SINK_
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.CharSequence,int,int)> -> _SINK_
<android.app.Application$ActivityLifecycleCallbacks: void onActivityPreCreated(android.app.Activity,android.os.Bundle)> -> _SINK_
<android.provider.VoicemailContract$Voicemails: android.net.Uri insert(android.content.Context,android.telecom.Voicemail)> -> _SINK_
<android.content.ContextWrapper: void removeStickyBroadcast(android.content.Intent)> -> _SINK_
<android.app.Notification$MessagingStyle: android.app.Notification$MessagingStyle addMessage(java.lang.CharSequence,long,java.lang.CharSequence)> -> _SINK_
<android.database.sqlite.SQLiteConnection: void execute(java.lang.String,java.lang.Object[],android.os.CancellationSignal)> -> _SINK_
<android.bluetooth.BluetoothPbapClient: boolean connect(android.bluetooth.BluetoothDevice)> -> _SINK_
<java.net.DatagramPacket: void setData(byte[],int,int)> -> _SINK_
<android.app.AppOpsManager: int noteOpNoThrow(int,int,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.telephony.ims.compat.feature.MMTelFeature: int startSession(android.app.PendingIntent,com.android.ims.internal.IImsRegistrationListener)> -> _SINK_
<android.content.BroadcastReceiver: android.os.IBinder peekService(android.content.Context,android.content.Intent)> -> _SINK_
<android.content.Context: android.content.Intent registerReceiverForAllUsers(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)> -> _SINK_
<android.drm.DrmManagerClient: int saveRights(android.drm.DrmRights,java.lang.String,java.lang.String)> -> _SINK_
<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String,java.security.Provider)> -> _SINK_
<android.app.Notification$Builder: android.app.Notification$Builder setCategory(java.lang.String)> -> _SINK_
<android.telephony.CellSignalStrengthGsm: void updateLevel(android.os.PersistableBundle,android.telephony.ServiceState)> -> _SINK_
<android.util.Slog: void wtfQuiet(java.lang.String,java.lang.String)> -> _SINK_
<android.app.Instrumentation: void callActivityOnNewIntent(android.app.Activity,android.content.Intent)> -> _SINK_
<com.android.internal.infra.AbstractSinglePendingRequestRemoteService: void dump(java.lang.String,java.io.PrintWriter)> -> _SINK_
<android.app.slice.SliceQuery: android.app.slice.SliceItem find(android.app.slice.Slice,java.lang.String,java.lang.String[],java.lang.String[])> -> _SINK_
<java.net.DatagramSocket: void connect(java.net.SocketAddress)> -> _SINK_
<android.util.JsonReader: void skipValue()> -> _SINK_
<java.io.FileOutputStream: void write(byte[],int,int)> -> _SINK_
<android.bluetooth.BluetoothGattCallback: void onDescriptorRead(android.bluetooth.BluetoothGatt,android.bluetooth.BluetoothGattDescriptor,int)> -> _SINK_
<com.android.internal.util.FastPrintWriter: void write(java.lang.String)> -> _SINK_
<android.content.ContentProviderClient: int update(android.net.Uri,android.content.ContentValues,android.os.Bundle)> -> _SINK_
<android.content.Intent: void setLaunchToken(java.lang.String)> -> _SINK_
<android.service.voice.VoiceInteractionSession: void onRequestPickOption(android.service.voice.VoiceInteractionSession$PickOptionRequest)> -> _SINK_
<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item setTimestamp(long)> -> _SINK_
<android.os.Parcel$ReadWriteHelper: void writeString8(android.os.Parcel,java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.os.Bundle includeSqlSelectionArgs(android.os.Bundle,java.lang.String,java.lang.String[])> -> _SINK_
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,char[],int,int)> -> _SINK_
<com.android.internal.util.StateMachine: android.os.Message obtainMessage(int,int)> -> _SINK_
<android.app.PendingIntent: void writePendingIntentOrNullToParcel(android.app.PendingIntent,android.os.Parcel)> -> _SINK_
<java.security.MessageDigest: void update(byte[])> -> _SINK_
<android.app.admin.DeviceAdminReceiver: java.lang.CharSequence onDisableRequested(android.content.Context,android.content.Intent)> -> _SINK_
<android.app.ApplicationPackageManager: boolean isSignedBy(java.lang.String,android.content.pm.KeySet)> -> _SINK_
<com.android.internal.util.GrowingArrayUtils: int[] insert(int[],int,int,int)> -> _SINK_
<android.content.pm.parsing.component.ParsedIntentInfo$StringPairListParceler: void parcel(java.util.List,android.os.Parcel,int)> -> _SINK_
<android.media.tv.TvView: void sendAppPrivateCommand(java.lang.String,android.os.Bundle)> -> _SINK_
<android.app.Activity: void startActivities(android.content.Intent[],android.os.Bundle)> -> _SINK_
<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)> -> _SINK_
<com.android.internal.os.LoggingPrintStream: void println(char[])> -> _SINK_
<android.provider.Contacts$People: void setPhotoData(android.content.ContentResolver,android.net.Uri,byte[])> -> _SINK_
<android.media.MediaCodecInfo$EncoderCapabilities: android.media.MediaCodecInfo$EncoderCapabilities create(android.media.MediaFormat,android.media.MediaCodecInfo$CodecCapabilities)> -> _SINK_
<java.net.ServerSocket: void bind(java.net.SocketAddress)> -> _SINK_
<android.service.notification.NotifyingApp: android.service.notification.NotifyingApp setPackage(java.lang.String)> -> _SINK_
<java.util.zip.DeflaterOutputStream: void write(int)> -> _SINK_
<android.net.Uri: void writeToParcel(android.os.Parcel,android.net.Uri)> -> _SINK_
<android.app.InstantAppResolverService: void onGetInstantAppIntentFilter(android.content.pm.InstantAppRequestInfo,android.app.InstantAppResolverService$InstantAppResolutionCallback)> -> _SINK_
<android.provider.Settings$System: void getCloneToManagedProfileSettings(java.util.Set)> -> _SINK_
<android.media.MediaCodec: void configure(android.media.MediaFormat,android.view.Surface,android.media.MediaCrypto,int)> -> _SINK_
<org.xml.sax.helpers.DefaultHandler: void characters(char[],int,int)> -> _SINK_
<android.provider.DocumentsProvider: android.content.IntentSender createWebLinkIntent(java.lang.String,android.os.Bundle)> -> _SINK_
<android.preference.PreferenceFragment: void addPreferencesFromIntent(android.content.Intent)> -> _SINK_
<android.os.HidlMemoryUtil: android.os.HidlMemory byteListToHidlMemory(java.util.List)> -> _SINK_
<android.telecom.InCallAdapter: void rejectCall(java.lang.String,boolean,java.lang.String)> -> _SINK_
<android.bluetooth.le.BluetoothLeScanner: void flushPendingScanResults(android.bluetooth.le.ScanCallback)> -> _SINK_
<android.os.storage.StorageManager: void benchmark(java.lang.String,android.os.IVoldTaskListener)> -> _SINK_
<java.util.logging.Logger: void exiting(java.lang.String,java.lang.String,java.lang.Object)> -> _SINK_
<android.os.storage.StorageManager: void registerListener(android.os.storage.StorageEventListener)> -> _SINK_
<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl$Counter: void writeCounterToParcel(android.os.Parcel,com.android.internal.os.BatteryStatsImpl$Counter)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: long replaceOrThrow(java.lang.String,java.lang.String,android.content.ContentValues)> -> _SINK_
<com.android.ims.internal.uce.presence.PresResInstanceInfo: void setReason(java.lang.String)> -> _SINK_
<android.database.DatabaseUtils: void cursorRowToContentValues(android.database.Cursor,android.content.ContentValues)> -> _SINK_
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,double)> -> _SINK_
<android.os.Handler: void removeMessages(int)> -> _SINK_
<android.os.BinderProxy: void dumpAsync(java.io.FileDescriptor,java.lang.String[])> -> _SINK_
<android.media.tv.tuner.Descrambler: int removePid(int,int,android.media.tv.tuner.filter.Filter)> -> _SINK_
<android.app.InstantAppResolverService: void onGetInstantAppIntentFilter(android.content.Intent,int[],java.lang.String,android.app.InstantAppResolverService$InstantAppResolutionCallback)> -> _SINK_
<com.android.internal.util.AsyncChannel: int connectSync(android.content.Context,android.os.Handler,android.os.Messenger)> -> _SINK_
<java.util.logging.Logger: void finer(java.lang.String)> -> _SINK_
<android.app.timezone.RulesUpdaterContract: void sendBroadcast(android.content.Context,java.lang.String,byte[])> -> _SINK_
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,char[])> -> _SINK_
<com.android.internal.util.AsyncChannel: android.os.Message sendMessageSynchronously(int,int,int,java.lang.Object)> -> _SINK_
<com.android.internal.os.LoggingPrintStream: java.io.PrintStream printf(java.util.Locale,java.lang.String,java.lang.Object[])> -> _SINK_
<android.app.SystemServiceRegistry: void registerStaticService(java.lang.String,java.lang.Class,android.app.SystemServiceRegistry$StaticServiceProducerWithoutBinder)> -> _SINK_
<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentStopped(android.app.FragmentManager,android.app.Fragment)> -> _SINK_
<com.android.internal.infra.AbstractMultiplePendingRequestsRemoteService: void dump(java.lang.String,java.io.PrintWriter)> -> _SINK_
<android.provider.ContactsContract$QuickContact: android.content.Intent composeQuickContactsIntent(android.content.Context,android.graphics.Rect,android.net.Uri,int,java.lang.String[])> -> _SINK_
<android.app.InstantAppResolverService: void onGetInstantAppIntentFilter(int[],java.lang.String,android.app.InstantAppResolverService$InstantAppResolutionCallback)> -> _SINK_
<java.util.concurrent.ScheduledThreadPoolExecutor: void execute(java.lang.Runnable)> -> _SINK_
<android.content.ContextWrapper: boolean moveSharedPreferencesFrom(android.content.Context,java.lang.String)> -> _SINK_
<android.app.Notification: void lightenPayload()> -> _SINK_
<android.net.NetworkStatsHistory: void recordHistory(android.net.NetworkStatsHistory,long,long)> -> _SINK_
<android.view.animation.AnimationSet: void initializeInvalidateRegion(int,int,int,int)> -> _SINK_
<java.io.PrintWriter: void print(java.lang.Object)> -> _SINK_
<android.database.DatabaseUtils: void cursorStringToContentValues(android.database.Cursor,java.lang.String,android.content.ContentValues)> -> _SINK_
<android.bluetooth.BluetoothHeadsetClient: boolean acceptCall(android.bluetooth.BluetoothDevice,int)> -> _SINK_
<android.net.NetworkCapabilities: void dumpDebug(android.util.proto.ProtoOutputStream,long)> -> _SINK_
<com.android.internal.telephony.GsmAlphabet: void stringToGsm8BitUnpackedField(java.lang.String,byte[],int,int)> -> _SINK_
<android.app.ApplicationExitInfo: void dump(java.io.PrintWriter,java.lang.String,java.lang.String,android.icu.text.SimpleDateFormat)> -> _SINK_
<android.app.backup.BackupAgent: void onFullBackup(android.app.backup.FullBackupDataOutput)> -> _SINK_
<android.app.Instrumentation: void callActivityOnCreate(android.app.Activity,android.os.Bundle)> -> _SINK_
<android.widget.AdapterView: void onInitializeAccessibilityNodeInfoInternal(android.view.accessibility.AccessibilityNodeInfo)> -> _SINK_
<java.io.PrintStream: void write(byte[],int,int)> -> _SINK_
<android.app.ActivityManager: void noteAlarmFinish(android.app.PendingIntent,android.os.WorkSource,int,java.lang.String)> -> _SINK_
<java.io.RandomAccessFile: void write(int)> -> _SINK_
<android.media.tv.TvInputManager$Session: void sendAppPrivateCommand(java.lang.String,android.os.Bundle)> -> _SINK_
<android.os.RemoteCallbackList: int beginBroadcast()> -> _SINK_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[],android.os.CancellationSignal)> -> _SINK_
<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])> -> _SINK_
<android.database.DatabaseUtils: int executeUpdateDelete(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.Object[])> -> _SINK_
<java.io.PrintWriter: java.io.PrintWriter printf(java.util.Locale,java.lang.String,java.lang.Object[])> -> _SINK_
<android.telecom.Call: void postDialContinue(boolean)> -> _SINK_
<android.content.ContextWrapper: void startActivityAsUser(android.content.Intent,android.os.Bundle,android.os.UserHandle)> -> _SINK_
<com.android.internal.telephony.gsm.SmsMessage: com.android.internal.telephony.gsm.SmsMessage createFromEfRecord(int,byte[])> -> _SINK_
<android.app.WindowConfiguration: void dumpDebug(android.util.proto.ProtoOutputStream,long)> -> _SINK_
<android.database.sqlite.SQLiteDebug: void dump(android.util.Printer,java.lang.String[],boolean)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: int executeSql(java.lang.String,java.lang.Object[])> -> _SINK_
<android.database.sqlite.SQLiteConnection: void prepare(java.lang.String,android.database.sqlite.SQLiteStatementInfo)> -> _SINK_
<android.provider.Telephony$Sms: android.net.Uri addMessageToUri(int,android.content.ContentResolver,android.net.Uri,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean,boolean)> -> _SINK_
<android.telephony.SmsManager: java.lang.String createAppSpecificSmsToken(android.app.PendingIntent)> -> _SINK_
<android.service.autofill.AutofillService: void onConnected()> -> _SINK_
<android.hardware.Camera: void setErrorCallback(android.hardware.Camera$ErrorCallback)> -> _SINK_
<android.service.restrictions.RestrictionsReceiver: void onReceive(android.content.Context,android.content.Intent)> -> _SINK_
<android.content.res.ObbScanner: android.content.res.ObbInfo getObbInfo(java.lang.String)> -> _SINK_
<android.telephony.SmsMessage: int[] calculateLength(java.lang.CharSequence,boolean,int)> -> _SINK_
<java.io.BufferedWriter: void write(int)> -> _SINK_
<android.window.TaskEmbedder: void startActivity(android.content.Intent)> -> _SINK_
<android.widget.AdapterView: void addView(android.view.View,android.view.ViewGroup$LayoutParams)> -> _SINK_
<android.renderscript.RenderScript: void sendMessage(int,int[])> -> _SINK_
<android.app.Fragment: void startIntentSenderForResult(android.content.IntentSender,int,android.content.Intent,int,int,int,android.os.Bundle)> -> _SINK_
<java.io.PrintWriter: void print(java.lang.String)> -> _SINK_
<com.android.internal.telephony.SmsApplication: android.content.ComponentName getDefaultSendToApplication(android.content.Context,boolean)> -> _SINK_
<android.telephony.mbms.MbmsTempFileProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> -> _SINK_
<android.app.NotificationManager: void notifyAsPackage(java.lang.String,java.lang.String,int,android.app.Notification)> -> _SINK_
<android.content.Intent: android.content.Intent makeMainActivity(android.content.ComponentName)> -> _SINK_
<android.telephony.VisualVoicemailService: void setSmsFilterSettings(android.content.Context,android.telecom.PhoneAccountHandle,android.telephony.VisualVoicemailSmsFilterSettings)> -> _SINK_
<android.media.MediaPlayer$OnSeekCompleteListener: void onSeekComplete(android.media.MediaPlayer)> -> _SINK_
<com.android.internal.os.LoggingPrintStream: void write(byte[],int,int)> -> _SINK_
<com.android.internal.util.AsyncChannel: void connect(android.content.Context,android.os.Handler,android.os.Handler)> -> _SINK_
<android.app.ApplicationErrorReport: void dump(android.util.Printer,java.lang.String)> -> _SINK_
<android.app.ActivityManager: void broadcastStickyIntent(android.content.Intent,int)> -> _SINK_
<android.app.ActivityManager: void setPackageAskScreenCompat(java.lang.String,boolean)> -> _SINK_
<java.io.Writer: void write(java.lang.String,int,int)> -> _SINK_
<android.service.voice.VoiceInteractionSession: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.telephony.ServiceState: void fillInNotifierBundle(android.os.Bundle)> -> _SINK_
<android.app.ActivityOptions: void abort(android.app.ActivityOptions)> -> _SINK_
<android.telecom.Call: void registerCallback(android.telecom.Call$Callback,android.os.Handler)> -> _SINK_
<android.util.proto.ProtoOutputStream: void dump(java.lang.String)> -> _SINK_
<java.util.Properties: void save(java.io.OutputStream,java.lang.String)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)> -> _SINK_
<android.telephony.TelephonyManager: java.util.List getCarrierPackageNamesForIntentAndPhone(android.content.Intent,int)> -> _SINK_
<java.io.ObjectOutputStream: void defaultWriteObject()> -> _SINK_
<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char[])> -> _SINK_
<android.util.Slog: int wtfStack(java.lang.String,java.lang.String)> -> _SINK_
<android.bluetooth.BluetoothHidDevice: boolean reportError(android.bluetooth.BluetoothDevice,byte)> -> _SINK_
<com.android.internal.util.StateMachine: void deferMessage(android.os.Message)> -> _SINK_
<android.database.sqlite.SQLiteConnection: java.lang.String executeForString(java.lang.String,java.lang.Object[],android.os.CancellationSignal)> -> _SINK_
<android.content.ContextWrapper: android.content.ComponentName startServiceAsUser(android.content.Intent,android.os.UserHandle)> -> _SINK_
<android.app.Activity: void startIntentSenderFromChild(android.app.Activity,android.content.IntentSender,int,android.content.Intent,int,int,int)> -> _SINK_
<android.app.ApplicationExitInfo: void writeToProto(android.util.proto.ProtoOutputStream,long)> -> _SINK_
<android.os.Environment: java.io.File getDataAppDirectory(java.lang.String)> -> _SINK_
<android.hardware.location.ContextHubMessage: void setVersion(int)> -> _SINK_
<android.widget.Toast: android.widget.Toast makeText(android.content.Context,java.lang.CharSequence,int)> -> _SINK_
<android.app.Instrumentation: void callActivityOnNewIntent(android.app.Activity,com.android.internal.content.ReferrerIntent)> -> _SINK_
<java.io.FileOutputStream: void write(byte[])> -> _SINK_
<android.app.Activity: boolean onMenuItemSelected(int,android.view.MenuItem)> -> _SINK_
<android.telephony.SmsMessage: android.telephony.SmsMessage createFromPdu(byte[],java.lang.String)> -> _SINK_
<com.android.internal.util.FastPrintWriter: void print(int)> -> _SINK_
<android.content.Intent: void dumpDebug(android.util.proto.ProtoOutputStream)> -> _SINK_
<android.net.EthernetManager: void setConfiguration(java.lang.String,android.net.IpConfiguration)> -> _SINK_
<java.util.zip.GZIPOutputStream: void write(byte[],int,int)> -> _SINK_
<com.android.internal.telephony.SmsMessageBase: boolean isEmailAddress(java.lang.String)> -> _SINK_
<java.io.FilterOutputStream: void write(int)> -> _SINK_
<java.io.ObjectOutputStream: void writeUnshared(java.lang.Object)> -> _SINK_
<android.app.slice.SliceQuery: java.util.List findAll(android.app.slice.SliceItem,java.lang.String,java.lang.String[],java.lang.String[])> -> _SINK_
<android.hardware.camera2.impl.CameraOfflineSessionImpl: int captureBurstRequests(java.util.List,java.util.concurrent.Executor,android.hardware.camera2.CameraCaptureSession$CaptureCallback)> -> _SINK_
<android.bluetooth.BluetoothHidDevice: boolean replyReport(android.bluetooth.BluetoothDevice,byte,byte,byte[])> -> _SINK_
<android.view.ImeInsetsSourceConsumer: void setControl(android.view.InsetsSourceControl,int[],int[])> -> _SINK_
<android.os.Trace: void traceCounter(long,java.lang.String,int)> -> _SINK_
<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.CharSequence,int,int)> -> _SINK_
<java.io.PrintStream: void print(java.lang.Object)> -> _SINK_
<java.util.logging.Logger: void throwing(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,char)> -> _SINK_
<android.os.Handler: void removeMessages(int,java.lang.Object)> -> _SINK_
<android.telephony.CellSignalStrengthWcdma: void updateLevel(android.os.PersistableBundle,android.telephony.ServiceState)> -> _SINK_
<android.service.notification.NotificationAssistantService: void onNotificationRemoved(android.service.notification.StatusBarNotification,android.service.notification.NotificationListenerService$RankingMap,android.service.notification.NotificationStats,int)> -> _SINK_
<android.telephony.ims.ImsCallSession: void sendUssd(java.lang.String)> -> _SINK_
<android.hardware.Camera$Parameters: void setGpsTimestamp(long)> -> _SINK_
<android.hardware.biometrics.BiometricPrompt$AuthenticationCallback: void onAuthenticationError(int,java.lang.CharSequence)> -> _SINK_
<android.net.DnsResolver: void rawQuery(android.net.Network,byte[],int,java.util.concurrent.Executor,android.os.CancellationSignal,android.net.DnsResolver$Callback)> -> _SINK_
<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)> -> _SINK_
<android.widget.ScrollView: void onInitializeAccessibilityNodeInfoInternal(android.view.accessibility.AccessibilityNodeInfo)> -> _SINK_
<com.android.internal.infra.RemoteStream: com.android.internal.infra.AndroidFuture sendBytes(com.android.internal.util.FunctionalUtils$ThrowingConsumer,com.android.internal.util.FunctionalUtils$ThrowingConsumer)> -> _SINK_
<android.bluetooth.BluetoothHeadsetClient: boolean connectAudio(android.bluetooth.BluetoothDevice)> -> _SINK_
<android.telephony.ims.ProvisioningManager$Callback: void onProvisioningStringChanged(int,java.lang.String)> -> _SINK_
<com.android.internal.os.LoggingPrintStream: void print(java.lang.Object)> -> _SINK_
<android.telephony.TelephonyManager: void sendUssdRequest(java.lang.String,android.telephony.TelephonyManager$UssdResponseCallback,android.os.Handler)> -> _SINK_
<android.view.autofill.AutofillPopupWindow: void update(android.view.View,int,int,int,int,android.graphics.Rect)> -> _SINK_
<android.content.Loader: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<java.io.CharArrayWriter: void writeTo(java.io.Writer)> -> _SINK_
<java.util.logging.Logger: void severe(java.util.function.Supplier)> -> _SINK_
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper)> -> _SINK_
<android.provider.Telephony$Threads: long getOrCreateThreadId(android.content.Context,java.lang.String)> -> _SINK_
<java.io.Console: java.io.Console format(java.lang.String,java.lang.Object[])> -> _SINK_
<android.app.Notification$Builder: android.app.Notification$Builder setDeleteIntent(android.app.PendingIntent)> -> _SINK_
<java.io.StringWriter: void write(java.lang.String)> -> _SINK_
<android.service.notification.NotificationListenerService$Ranking: void populate(android.service.notification.NotificationListenerService$Ranking)> -> _SINK_
<android.inputmethodservice.MultiClientInputMethodServiceDelegate: android.os.IBinder onBind(android.content.Intent)> -> _SINK_
<android.app.Activity: void startIntentSenderForResult(android.content.IntentSender,int,android.content.Intent,int,int,int,android.os.Bundle)> -> _SINK_
<java.lang.StringBuilder: java.lang.StringBuilder insert(int,long)> -> _SINK_
<android.content.ContextWrapper: void sendStickyBroadcast(android.content.Intent)> -> _SINK_
<android.app.slice.SliceQuery: android.app.slice.SliceItem find(android.app.slice.SliceItem,java.lang.String,java.lang.String[],java.lang.String[])> -> _SINK_
<android.database.DatabaseUtils: void cursorStringToInsertHelper(android.database.Cursor,java.lang.String,android.database.DatabaseUtils$InsertHelper,int)> -> _SINK_
<android.content.IntentFilter: android.content.IntentFilter create(java.lang.String,java.lang.String)> -> _SINK_
<android.media.RemoteControlClient: void unregisterWithSession(android.media.session.MediaSessionLegacyHelper)> -> _SINK_
<com.android.internal.util.GrowingArrayUtils: int[] append(int[],int,int)> -> _SINK_
<android.app.Activity: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.widget.AdapterView: void addView(android.view.View,int)> -> _SINK_
<java.io.RandomAccessFile: void writeLong(long)> -> _SINK_
<android.telephony.CellBroadcastService$ICellBroadcastServiceWrapper: void handleCdmaScpMessage(int,java.util.List,java.lang.String,android.os.RemoteCallback)> -> _SINK_
<android.app.AlarmManager: void setIdleUntil(int,long,java.lang.String,android.app.AlarmManager$OnAlarmListener,android.os.Handler)> -> _SINK_
<android.app.blob.BlobStoreManager$Session: void allowPackageAccess(java.lang.String,byte[])> -> _SINK_
<android.provider.DocumentsContract: android.content.IntentSender createWebLinkIntent(android.content.ContentResolver,android.net.Uri,android.os.Bundle)> -> _SINK_
<android.content.ContentResolver: android.net.Uri insert(android.net.Uri,android.content.ContentValues,android.os.Bundle)> -> _SINK_
<android.preference.EditTextPreference: void setText(java.lang.String)> -> _SINK_
<android.provider.Telephony$Sms: android.net.Uri addMessageToUri(int,android.content.ContentResolver,android.net.Uri,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean,boolean,long)> -> _SINK_
<java.io.Writer: void write(java.lang.String)> -> _SINK_
<android.app.usage.NetworkStatsManager: android.app.usage.NetworkStats$Bucket querySummaryForDevice(android.net.NetworkTemplate,long,long)> -> _SINK_
<com.android.internal.view.menu.ListMenuItemView: void onInitializeAccessibilityNodeInfoInternal(android.view.accessibility.AccessibilityNodeInfo)> -> _SINK_
<android.telecom.RemoteConference: void registerCallback(android.telecom.RemoteConference$Callback,android.os.Handler)> -> _SINK_
<android.view.autofill.AutofillManager: void unregisterCallback(android.view.autofill.AutofillManager$AutofillCallback)> -> _SINK_
<android.service.voice.VoiceInteractionSession: void onCancelRequest(android.service.voice.VoiceInteractionSession$Request)> -> _SINK_
<android.provider.Telephony$Sms$Inbox: android.net.Uri addMessage(int,android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean)> -> _SINK_
<android.net.nsd.NsdServiceInfo: void setServiceType(java.lang.String)> -> _SINK_
<android.provider.CalendarContract$CalendarAlerts: void scheduleAlarm(android.content.Context,android.app.AlarmManager,long)> -> _SINK_
<android.service.carrier.CarrierMessagingServiceWrapper$CarrierMessagingCallbackWrapper: void onSendMultipartSmsComplete(int,int[])> -> _SINK_
<android.nfc.cardemulation.NfcFCardEmulation: boolean isValidNfcid2(java.lang.String)> -> _SINK_
<android.telecom.Call: void enterBackgroundAudioProcessing()> -> _SINK_
<android.view.textclassifier.TextLanguage$Request$Builder: android.view.textclassifier.TextLanguage$Request$Builder setExtras(android.os.Bundle)> -> _SINK_
<android.media.MediaCodecInfo$AudioCapabilities: android.media.MediaCodecInfo$AudioCapabilities create(android.media.MediaFormat,android.media.MediaCodecInfo$CodecCapabilities)> -> _SINK_
<android.content.BroadcastReceiver: void setResultData(java.lang.String)> -> _SINK_
<android.telecom.InCallAdapter: void requestBluetoothAudio(java.lang.String)> -> _SINK_
<android.app.TaskStackBuilder: void startActivities(android.os.Bundle)> -> _SINK_
<android.bluetooth.BluetoothHeadsetClient: boolean explicitCallTransfer(android.bluetooth.BluetoothDevice)> -> _SINK_
<android.telecom.Call: void registerCallback(android.telecom.Call$Callback)> -> _SINK_
<android.content.AsyncTaskLoader: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.app.AlarmManager: void set(int,long,long,long,java.lang.String,android.app.AlarmManager$OnAlarmListener,android.os.Handler,android.os.WorkSource)> -> _SINK_
<com.android.internal.util.AsyncChannel: void replyToMessage(android.os.Message,android.os.Message)> -> _SINK_
<com.android.internal.print.DumpUtils: void writePrintAttributes(android.content.Context,com.android.internal.util.dump.DualDumpOutputStream,java.lang.String,long,android.print.PrintAttributes)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: void execPerConnectionSQL(java.lang.String,java.lang.Object[])> -> _SINK_
<android.view.View: void setAccessibilitySelection(int,int)> -> _SINK_
<android.database.sqlite.SQLiteSession: long executeForLong(java.lang.String,java.lang.Object[],int,android.os.CancellationSignal)> -> _SINK_
<android.provider.Telephony$Sms$Draft: android.net.Uri addMessage(int,android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)> -> _SINK_
<android.telecom.RemoteConnection$VideoProvider: void registerCallback(android.telecom.RemoteConnection$VideoProvider$Callback)> -> _SINK_
<android.widget.CompoundButton: void onInitializeAccessibilityNodeInfoInternal(android.view.accessibility.AccessibilityNodeInfo)> -> _SINK_
<android.telephony.ims.stub.ImsSmsImplBase: void onSmsStatusReportReceived(int,java.lang.String,byte[])> -> _SINK_
<android.telecom.ConnectionService: void conferenceRemoteConnections(android.telecom.RemoteConnection,android.telecom.RemoteConnection)> -> _SINK_
<android.widget.StackView: void onInitializeAccessibilityNodeInfoInternal(android.view.accessibility.AccessibilityNodeInfo)> -> _SINK_
<android.widget.AbsSeekBar: void onInitializeAccessibilityNodeInfoInternal(android.view.accessibility.AccessibilityNodeInfo)> -> _SINK_
<android.app.Activity: void startActivityAsUser(android.content.Intent,android.os.UserHandle)> -> _SINK_
<com.android.internal.print.DumpUtils: void writePrintJobInfo(android.content.Context,com.android.internal.util.dump.DualDumpOutputStream,java.lang.String,long,android.print.PrintJobInfo)> -> _SINK_
<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)> -> _SINK_
<android.bluetooth.BluetoothHeadsetClient: boolean sendDTMF(android.bluetooth.BluetoothDevice,byte)> -> _SINK_
<android.widget.ListView: void onInitializeAccessibilityNodeInfoInternal(android.view.accessibility.AccessibilityNodeInfo)> -> _SINK_
<android.app.Fragment: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<java.util.logging.LogRecord: void setParameters(java.lang.Object[])> -> _SINK_
<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)> -> _SINK_
<java.lang.StringBuffer: void getChars(int,int,char[],int)> -> _SINK_
<android.telephony.ims.ImsCallSession: void extendToConference(java.lang.String[])> -> _SINK_
<android.net.http.HttpResponseCache: java.net.CacheRequest put(java.net.URI,java.net.URLConnection)> -> _SINK_
<android.content.ContextWrapper: void sendBroadcastAsUserMultiplePermissions(android.content.Intent,android.os.UserHandle,java.lang.String[])> -> _SINK_
<android.net.util.SocketUtils: void bindSocketToInterface(java.io.FileDescriptor,java.lang.String)> -> _SINK_
<android.app.Fragment: void startActivityForResult(android.content.Intent,int,android.os.Bundle)> -> _SINK_
<android.bluetooth.BluetoothHeadsetClientCall: void setNumber(java.lang.String)> -> _SINK_
<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char)> -> _SINK_
<android.content.ContentProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues,android.os.Bundle)> -> _SINK_
<android.app.PendingIntent: void dumpDebug(android.util.proto.ProtoOutputStream,long)> -> _SINK_
<java.io.OutputStreamWriter: void write(char[],int,int)> -> _SINK_
<android.media.MediaExtractor: void setDataSource(android.content.Context,android.net.Uri,java.util.Map)> -> _SINK_
<android.telecom.Logging.Session$Info: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.app.NotificationManager: void notify(java.lang.String,int,android.app.Notification)> -> _SINK_
<android.telephony.ims.stub.ImsCallSessionImplBase: void extendToConference(java.lang.String[])> -> _SINK_
<java.io.DataOutputStream: void writeUTF(java.lang.String)> -> _SINK_
<android.media.AudioSystem: void setErrorCallback(android.media.AudioSystem$ErrorCallback)> -> _SINK_
<android.database.sqlite.SQLiteSession: android.os.ParcelFileDescriptor executeForBlobFileDescriptor(java.lang.String,java.lang.Object[],int,android.os.CancellationSignal)> -> _SINK_
<android.location.SettingInjectorService: void refreshSettings(android.content.Context)> -> _SINK_
<android.hardware.location.ContextHubMessage: void setMsgData(byte[])> -> _SINK_
<android.database.sqlite.SQLiteConnection: int executeForChangedRowCount(java.lang.String,java.lang.Object[],android.os.CancellationSignal)> -> _SINK_
<java.io.DataOutputStream: void flush()> -> _SINK_
<android.media.MediaPlayer: void addTimedTextSource(java.lang.String,java.lang.String)> -> _SINK_
<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)> -> _SINK_
<android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.app.PendingIntent)> -> _SINK_
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)> -> _SINK_
<java.util.logging.Logger: void info(java.util.function.Supplier)> -> _SINK_
<android.telephony.mbms.vendor.MbmsStreamingServiceBase: int startStreaming(int,java.lang.String,android.telephony.mbms.StreamingServiceCallback)> -> _SINK_
<java.util.logging.Logger: void warning(java.lang.String)> -> _SINK_
<android.appwidget.AppWidgetHostView: void onInitializeAccessibilityNodeInfoInternal(android.view.accessibility.AccessibilityNodeInfo)> -> _SINK_
<java.io.DataOutputStream: void writeShort(int)> -> _SINK_
<java.io.PrintStream: void print(char[])> -> _SINK_
<com.android.internal.midi.MidiDispatcher: void onSend(byte[],int,int,long)> -> _SINK_
<android.app.Instrumentation: void callApplicationOnCreate(android.app.Application)> -> _SINK_
<android.media.Utils: java.io.File getUniqueExternalFile(android.content.Context,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.android.internal.telephony.GsmAlphabet: int findGsmSeptetLimitIndex(java.lang.String,int,int,int,int)> -> _SINK_
<com.android.internal.app.procstats.ProcessStats: void dumpDebug(android.util.proto.ProtoOutputStream,long,int)> -> _SINK_
<java.io.BufferedWriter: void newLine()> -> _SINK_
<com.android.internal.os.LoggingPrintStream: void print(int)> -> _SINK_
<android.app.Instrumentation: void callActivityOnCreate(android.app.Activity,android.os.Bundle,android.os.PersistableBundle)> -> _SINK_
<java.security.Provider: void load(java.io.InputStream)> -> _SINK_
<android.view.InputFilter: void sendInputEvent(android.view.InputEvent,int)> -> _SINK_
<android.view.SurfaceControl: void setOverrideScalingMode(int)> -> _SINK_
<android.view.textclassifier.TextLinks$TextLinkSpan: void onClick(android.view.View,int)> -> _SINK_
<android.content.ContentProviderClient: void releaseQuietly(android.content.ContentProviderClient)> -> _SINK_
<android.service.notification.ScheduleCalendar: void maybeSetNextAlarm(long,long)> -> _SINK_
<android.os.BinderProxy: void dump(java.io.FileDescriptor,java.lang.String[])> -> _SINK_
<android.app.ActivityManagerNative: void broadcastStickyIntent(android.content.Intent,java.lang.String,int)> -> _SINK_
<android.view.textclassifier.SelectionEvent: android.view.textclassifier.SelectionEvent setStart(int)> -> _SINK_
<android.view.ViewGroup$LayoutParams: void onDebugDraw(android.view.View,android.graphics.Canvas,android.graphics.Paint)> -> _SINK_
<android.os.FileUtils: java.lang.String trimFilename(java.lang.String,int)> -> _SINK_
<android.view.autofill.AutofillId: boolean equalsIgnoreSession(android.view.autofill.AutofillId)> -> _SINK_
<android.content.ContextWrapper: void sendOrderedBroadcast(android.content.Intent,int,java.lang.String,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,java.lang.String,android.os.Bundle,android.os.Bundle)> -> _SINK_
<android.telephony.euicc.EuiccManager: void startResolutionActivity(android.app.Activity,int,android.content.Intent,android.app.PendingIntent)> -> _SINK_
<android.os.storage.StorageVolume: android.content.Intent createAccessIntent(java.lang.String)> -> _SINK_
<android.provider.Telephony$Sms: android.net.Uri addMessageToUri(android.content.ContentResolver,android.net.Uri,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean,boolean)> -> _SINK_
<android.net.util.SocketUtils: java.net.SocketAddress makePacketSocketAddress(int,byte[])> -> _SINK_
<android.content.ClipData: android.content.ClipData newIntent(java.lang.CharSequence,android.content.Intent)> -> _SINK_
<android.os.Message: android.os.Message obtain(android.os.Handler,java.lang.Runnable)> -> _SINK_
<android.media.MediaRouter2Manager: void setSessionVolume(android.media.RoutingSessionInfo,int)> -> _SINK_
<android.view.RenderNodeAnimator: void setTarget(android.view.View)> -> _SINK_
<android.app.KeyguardManager: android.content.Intent createConfirmFactoryResetCredentialIntent(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)> -> _SINK_
<android.content.ContextWrapper: void startActivityAsUser(android.content.Intent,android.os.UserHandle)> -> _SINK_
<android.content.ClipDescription: void dumpDebug(android.util.proto.ProtoOutputStream,long)> -> _SINK_
<com.android.internal.util.AsyncChannel: android.os.Message sendMessageSynchronously(android.os.Message)> -> _SINK_
<android.telephony.ims.ImsCallSession$Listener: void callSessionInviteParticipantsRequestDelivered(android.telephony.ims.ImsCallSession)> -> _SINK_
<android.app.Instrumentation: android.app.Instrumentation$ActivityResult execStartActivity(android.content.Context,android.os.IBinder,android.os.IBinder,java.lang.String,android.content.Intent,int,android.os.Bundle)> -> _SINK_
<android.os.WorkSource: void set(int,java.lang.String)> -> _SINK_
<com.android.internal.os.BatteryStatsImpl: void writeSummaryToParcel(android.os.Parcel,boolean)> -> _SINK_
<com.android.internal.util.FileRotator: void rewriteActive(com.android.internal.util.FileRotator$Rewriter,long)> -> _SINK_
<android.widget.ShareActionProvider: void setShareIntent(android.content.Intent)> -> _SINK_
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,int)> -> _SINK_
<android.os.WorkSource: void dumpDebug(android.util.proto.ProtoOutputStream,long)> -> _SINK_
<android.content.res.Configuration: void readFromProto(android.util.proto.ProtoInputStream,long)> -> _SINK_
<java.io.RandomAccessFile: void writeUTF(java.lang.String)> -> _SINK_
<android.database.DatabaseUtils: void cursorLongToContentValuesIfPresent(android.database.Cursor,android.content.ContentValues,java.lang.String)> -> _SINK_
<android.database.DatabaseUtils: void cursorLongToContentValues(android.database.Cursor,java.lang.String,android.content.ContentValues)> -> _SINK_
<android.content.ContentProvider: int bulkInsert(android.net.Uri,android.content.ContentValues[])> -> _SINK_
<android.service.voice.VoiceInteractionSession: void startVoiceActivity(android.content.Intent)> -> _SINK_
<android.os.Binder: void dump(java.io.FileDescriptor,java.lang.String[])> -> _SINK_
<android.widget.RatingBar: void onInitializeAccessibilityNodeInfoInternal(android.view.accessibility.AccessibilityNodeInfo)> -> _SINK_
<java.io.FileOutputStream: void write(int)> -> _SINK_
<com.android.internal.infra.RemoteStream: com.android.internal.infra.AndroidFuture sendBytes(com.android.internal.util.FunctionalUtils$ThrowingConsumer,com.android.internal.util.FunctionalUtils$ThrowingFunction)> -> _SINK_
<android.view.SurfaceControl: void dumpDebug(android.util.proto.ProtoOutputStream,long)> -> _SINK_
<android.telephony.CellInfoWcdma: void setCellSignalStrength(android.telephony.CellSignalStrengthWcdma)> -> _SINK_
<android.content.res.Resources$Theme: void encode(android.view.ViewHierarchyEncoder)> -> _SINK_
<java.util.logging.Logger: void log(java.util.logging.Level,java.util.function.Supplier)> -> _SINK_
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,long)> -> _SINK_
<com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)> -> _SINK_
<android.telephony.mbms.vendor.MbmsDownloadServiceBase: int addStatusListener(android.telephony.mbms.DownloadRequest,android.telephony.mbms.DownloadStatusListener)> -> _SINK_
<android.hardware.location.ContextHubClientCallback: void onMessageFromNanoApp(android.hardware.location.ContextHubClient,android.hardware.location.NanoAppMessage)> -> _SINK_
<android.widget.TextClock: void setContentDescriptionFormat24Hour(java.lang.CharSequence)> -> _SINK_
<android.net.nsd.NsdServiceInfo: void setAttribute(java.lang.String,byte[])> -> _SINK_
<java.lang.StringBuffer: java.lang.StringBuffer replace(int,int,java.lang.String)> -> _SINK_
<android.graphics.Rect: void dumpDebug(android.util.proto.ProtoOutputStream,long)> -> _SINK_
<android.widget.AbsListView: void onInitializeAccessibilityNodeInfoInternal(android.view.accessibility.AccessibilityNodeInfo)> -> _SINK_
<android.print.PrintDocumentAdapter: void onFinish()> -> _SINK_
<com.android.internal.telephony.cdma.SmsMessage: com.android.internal.telephony.cdma.SmsMessage createFromEfRecord(int,byte[])> -> _SINK_
<com.android.internal.os.LoggingPrintStream: void print(char[])> -> _SINK_
<android.inputmethodservice.InputMethodService$InputMethodSessionImpl: void appPrivateCommand(java.lang.String,android.os.Bundle)> -> _SINK_
<android.widget.ToastPresenter: android.view.View getTextToastView(android.content.Context,java.lang.CharSequence)> -> _SINK_
<android.preference.PreferenceActivity: void finishPreferencePanel(android.app.Fragment,int,android.content.Intent)> -> _SINK_
<android.service.notification.NotificationListenerService$Ranking: void populate(java.lang.String,int,boolean,int,int,int,java.lang.CharSequence,java.lang.String,android.app.NotificationChannel,java.util.ArrayList,java.util.ArrayList,boolean,int,boolean,long,boolean,java.util.ArrayList,java.util.ArrayList,boolean,boolean,boolean,android.content.pm.ShortcutInfo,boolean)> -> _SINK_
<android.provider.Telephony$Sms$Outbox: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean,long)> -> _SINK_
<java.lang.Runtime: java.lang.Process exec(java.lang.String[],java.lang.String[])> -> _SINK_
<android.window.TaskEmbedder: void setForwardedInsets(android.graphics.Insets)> -> _SINK_
<java.io.RandomAccessFile: void writeChars(java.lang.String)> -> _SINK_
<android.media.MediaRecorder: void setOutputFile(java.io.FileDescriptor)> -> _SINK_
<java.lang.Runtime: java.lang.Process exec(java.lang.String)> -> _SINK_
<android.database.sqlite.SQLiteConnection: void dump(android.util.Printer,boolean)> -> _SINK_
<android.os.Bundle: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.service.autofill.UserData: void dumpConstraints(java.lang.String,java.io.PrintWriter)> -> _SINK_
<android.telecom.ConnectionService: void addExistingConnection(android.telecom.PhoneAccountHandle,android.telecom.Connection)> -> _SINK_
<android.content.BroadcastReceiver$PendingResult: void sendFinished(android.app.IActivityManager)> -> _SINK_
<android.os.Looper: void dump(android.util.Printer,java.lang.String)> -> _SINK_
<android.provider.Telephony$Sms$Inbox: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean)> -> _SINK_
<javax.crypto.Cipher: void updateAAD(byte[])> -> _SINK_
<android.media.audiopolicy.AudioMix: boolean isRoutedToDevice(int,java.lang.String)> -> _SINK_
<android.view.contentcapture.ContentCaptureManager: void onActivityCreated(android.os.IBinder,android.content.ComponentName)> -> _SINK_
<android.content.ClipData: void dumpDebug(android.util.proto.ProtoOutputStream,long)> -> _SINK_
<android.service.euicc.EuiccService: void dump(java.io.PrintWriter)> -> _SINK_
<android.content.pm.ProviderInfo: void dump(android.util.Printer,java.lang.String,int)> -> _SINK_
<java.lang.Runtime: java.lang.Process exec(java.lang.String[],java.lang.String[],java.io.File)> -> _SINK_
<javax.crypto.Mac: void update(byte[])> -> _SINK_
<android.bluetooth.BluetoothHeadsetClient: boolean rejectCall(android.bluetooth.BluetoothDevice)> -> _SINK_
<android.os.HidlMemoryUtil: android.os.HidlMemory sharedMemoryToHidlMemory(android.os.SharedMemory)> -> _SINK_
<android.app.backup.BackupDataOutput: void setKeyPrefix(java.lang.String)> -> _SINK_
<android.bluetooth.BluetoothHeadsetClient: boolean startVoiceRecognition(android.bluetooth.BluetoothDevice)> -> _SINK_
<java.io.PrintWriter: void print(int)> -> _SINK_
<android.net.metrics.IpConnectivityLog: boolean log(int,int[],android.net.metrics.IpConnectivityLog$Event)> -> _SINK_
<java.net.Socket: void setTrafficClass(int)> -> _SINK_
<android.media.AudioManager$OnAudioPortUpdateListener: void onAudioPatchListUpdate(android.media.AudioPatch[])> -> _SINK_
<android.window.TaskEmbedder: void startActivity(android.content.Intent,android.os.UserHandle)> -> _SINK_
<android.content.ContextWrapper: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String)> -> _SINK_
<android.widget.Gallery: void onInitializeAccessibilityNodeInfoInternal(android.view.accessibility.AccessibilityNodeInfo)> -> _SINK_
<android.telephony.ims.stub.ImsCallSessionImplBase: void sendRttMessage(java.lang.String)> -> _SINK_
<android.content.CursorLoader: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_
<android.content.pm.ApplicationInfo: void dump(android.util.Printer,java.lang.String,int)> -> _SINK_
<android.database.sqlite.SQLiteSession: java.lang.String executeForString(java.lang.String,java.lang.Object[],int,android.os.CancellationSignal)> -> _SINK_
<android.content.ContentResolver: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> -> _SINK_
<android.view.inputmethod.InputMethod: void onCreateInlineSuggestionsRequest(com.android.internal.view.InlineSuggestionsRequestInfo,com.android.internal.view.IInlineSuggestionsRequestCallback)> -> _SINK_
<android.net.NetworkStats: void dump(java.lang.String,java.io.PrintWriter)> -> _SINK_
<android.telephony.MbmsDownloadSession: android.telephony.MbmsDownloadSession create(android.content.Context,java.util.concurrent.Executor,int,android.telephony.mbms.MbmsDownloadSessionCallback)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: long replace(java.lang.String,java.lang.String,android.content.ContentValues)> -> _SINK_
<android.inputmethodservice.InputMethodService: void onExtractedDeleteText(int,int)> -> _SINK_
<android.os.PersistableBundle: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.provider.Settings$Secure: void getMovedToGlobalSettings(java.util.Set)> -> _SINK_
<android.net.Network: void bindSocket(java.net.Socket)> -> _SINK_
<android.nfc.NfcAdapter: void setNdefPushMessageCallback(android.nfc.NfcAdapter$CreateNdefMessageCallback,android.app.Activity,android.app.Activity[])> -> _SINK_
<java.util.logging.Logger: void finest(java.util.function.Supplier)> -> _SINK_
<android.telephony.SmsMessage: byte[] getSubmitPduEncodedMessage(boolean,java.lang.String,java.lang.String,int,int,int,int,int,int)> -> _SINK_
<android.telecom.RemoteConnection: void registerCallback(android.telecom.RemoteConnection$Callback)> -> _SINK_
<android.content.pm.ShortcutInfo: android.content.Intent setIntentExtras(android.content.Intent,android.os.PersistableBundle)> -> _SINK_
<android.app.AlarmManager: void setAlarmClock(android.app.AlarmManager$AlarmClockInfo,android.app.PendingIntent)> -> _SINK_
<android.widget.Spinner: void onInitializeAccessibilityNodeInfoInternal(android.view.accessibility.AccessibilityNodeInfo)> -> _SINK_
<android.service.carrier.CarrierMessagingServiceWrapper$CarrierMessagingCallbackWrapper: void onSendMmsComplete(int,byte[])> -> _SINK_
<android.media.MediaCodec: void setParameters(android.os.Bundle)> -> _SINK_
<android.provider.VoicemailContract$Voicemails: int insert(android.content.Context,java.util.List)> -> _SINK_
<com.android.internal.util.State: void enter()> -> _SINK_
<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char[],int,int)> -> _SINK_
<android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent,android.app.PendingIntent$OnFinished,android.os.Handler,java.lang.String,android.os.Bundle)> -> _SINK_
<java.nio.file.spi.FileSystemProvider: java.nio.file.Path readSymbolicLink(java.nio.file.Path)> -> _SINK_
<android.telephony.ims.stub.ImsSmsImplBase: void onSmsStatusReportReceived(int,int,java.lang.String,byte[])> -> _SINK_
<android.telephony.mbms.vendor.MbmsDownloadServiceBase: int addStatusListener(android.telephony.mbms.DownloadRequest,android.telephony.mbms.IDownloadStatusListener)> -> _SINK_
<android.os.ResultReceiver: void send(int,android.os.Bundle)> -> _SINK_
<android.app.Activity: void startIntentSenderFromChild(android.app.Activity,android.content.IntentSender,int,android.content.Intent,int,int,int,android.os.Bundle)> -> _SINK_
<android.app.ApplicationPackageManager: android.content.Intent getLaunchIntentForPackage(java.lang.String)> -> _SINK_
<java.util.logging.Logger: void severe(java.lang.String)> -> _SINK_
<android.telephony.mbms.vendor.MbmsDownloadServiceBase: int removeStatusListener(android.telephony.mbms.DownloadRequest,android.telephony.mbms.IDownloadStatusListener)> -> _SINK_
<android.telephony.SmsManager: void injectSmsPdu(byte[],java.lang.String,android.app.PendingIntent)> -> _SINK_
<android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildUnionQuery(java.lang.String[],java.lang.String,java.lang.String)> -> _SINK_
<android.database.DatabaseUtils: void cursorLongToContentValues(android.database.Cursor,java.lang.String,android.content.ContentValues,java.lang.String)> -> _SINK_
<android.widget.GridView: void onInitializeAccessibilityNodeInfoInternal(android.view.accessibility.AccessibilityNodeInfo)> -> _SINK_
<android.content.pm.PackageManager: java.lang.String[] setPackagesSuspended(java.lang.String[],boolean,android.os.PersistableBundle,android.os.PersistableBundle,java.lang.String)> -> _SINK_
<android.content.ContextWrapper: void setAutofillClient(android.view.autofill.AutofillManager$AutofillClient)> -> _SINK_
<java.security.KeyStore: java.security.KeyStore$Entry getEntry(java.lang.String,java.security.KeyStore$ProtectionParameter)> -> _SINK_
<android.telephony.ims.stub.ImsUtImplBase: int updateCallForward(int,int,java.lang.String,int,int)> -> _SINK_
<android.net.util.SocketUtils: java.net.SocketAddress makePacketSocketAddress(int,int)> -> _SINK_
<java.lang.Runtime: java.lang.Process exec(java.lang.String,java.lang.String[])> -> _SINK_
<android.telephony.ims.ProvisioningManager$Callback: void setExecutor(java.util.concurrent.Executor)> -> _SINK_
<android.inputmethodservice.InputMethodService$InputMethodSessionImpl: void updateSelection(int,int,int,int,int,int)> -> _SINK_
<android.content.Context: void startActivityAsUser(android.content.Intent,android.os.Bundle,android.os.UserHandle)> -> _SINK_
<android.app.AppOpsManager: int noteProxyOp(int,java.lang.String,int,java.lang.String,java.lang.String)> -> _SINK_
<android.os.Parcel: void writeInterfaceToken(java.lang.String)> -> _SINK_
<android.content.ContextWrapper: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,int)> -> _SINK_
<android.app.ActivityManagerNative: void broadcastStickyIntent(android.content.Intent,java.lang.String,int,int)> -> _SINK_
<java.util.logging.Logger: void entering(java.lang.String,java.lang.String,java.lang.Object)> -> _SINK_
<android.database.sqlite.SQLiteSession: void execute(java.lang.String,java.lang.Object[],int,android.os.CancellationSignal)> -> _SINK_
<com.android.internal.os.LoggingPrintStream: void println(java.lang.Object)> -> _SINK_
<android.webkit.WebResourceResponse: void setData(java.io.InputStream)> -> _SINK_
<android.app.Notification$MessagingStyle$Message: android.app.Notification$MessagingStyle$Message setData(java.lang.String,android.net.Uri)> -> _SINK_
<android.media.session.MediaController$TransportControls: void sendCustomAction(java.lang.String,android.os.Bundle)> -> _SINK_
<android.graphics.Point: void dumpDebug(android.util.proto.ProtoOutputStream,long)> -> _SINK_
<java.util.logging.Logger: void fine(java.util.function.Supplier)> -> _SINK_
<android.app.Instrumentation: android.app.Activity startActivitySync(android.content.Intent,android.os.Bundle)> -> _SINK_
<android.app.AlarmManager: void setWindow(int,long,long,java.lang.String,android.app.AlarmManager$OnAlarmListener,android.os.Handler)> -> _SINK_
<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setInputWindowInfo(android.view.SurfaceControl,android.view.InputWindowHandle)> -> _SINK_
<android.net.IpSecAlgorithm: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.internal.util.GrowingArrayUtils: long[] insert(long[],int,int,long)> -> _SINK_
<android.provider.Settings$System: void getNonLegacyMovedKeys(java.util.HashSet)> -> _SINK_
<android.media.AudioManager: boolean setAdditionalOutputDeviceDelay(android.media.AudioDeviceInfo,long)> -> _SINK_
<android.content.ContentProvider: android.net.Uri rejectInsert(android.net.Uri,android.content.ContentValues)> -> _SINK_
<android.telecom.RemoteConference: void registerCallback(android.telecom.RemoteConference$Callback)> -> _SINK_
<android.app.backup.BackupObserver: void onResult(java.lang.String,int)> -> _SINK_
<android.widget.TextView: void onInitializeAccessibilityNodeInfoInternal(android.view.accessibility.AccessibilityNodeInfo)> -> _SINK_
<android.content.pm.PackageInstaller$Session: void addFile(int,java.lang.String,long,byte[],byte[])> -> _SINK_
<android.app.ApplicationExitInfo: void setReason(int)> -> _SINK_
<android.view.textclassifier.TextClassification$Builder: android.view.textclassifier.TextClassification$Builder addActions(java.util.Collection)> -> _SINK_
<android.net.VpnService: android.os.IBinder onBind(android.content.Intent)> -> _SINK_
<com.android.internal.content.SelectionBuilder: int update(android.database.sqlite.SQLiteDatabase,java.lang.String,android.content.ContentValues)> -> _SINK_
<android.app.usage.UsageStatsManager: void reportChooserSelection(java.lang.String,int,java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.service.notification.NotificationListenerService: void onNotificationRemoved(android.service.notification.StatusBarNotification,android.service.notification.NotificationListenerService$RankingMap,android.service.notification.NotificationStats,int)> -> _SINK_
<android.app.InstantAppResolverService: void onGetInstantAppResolveInfo(android.content.Intent,int[],java.lang.String,android.app.InstantAppResolverService$InstantAppResolutionCallback)> -> _SINK_
<android.telephony.SmsManager: java.lang.String createAppSpecificSmsTokenWithPackageInfo(java.lang.String,android.app.PendingIntent)> -> _SINK_
<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)> -> _SINK_
<android.telephony.mbms.StreamingServiceCallback: void onError(int,java.lang.String)> -> _SINK_
<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
<android.bluetooth.BluetoothSap: boolean connect(android.bluetooth.BluetoothDevice)> -> _SINK_
<android.telephony.SubscriptionManager: void putPhoneIdAndSubIdExtra(android.content.Intent,int,int)> -> _SINK_
<android.content.ContextWrapper: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int,android.os.Bundle)> -> _SINK_
<java.io.PrintWriter: void write(java.lang.String)> -> _SINK_
<java.util.logging.Logger: void config(java.util.function.Supplier)> -> _SINK_
<android.telephony.SmsManager: void downloadMultimediaMessage(android.content.Context,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent)> -> _SINK_
<android.inputmethodservice.InputMethodService: void onExtractedReplaceText(int,int,java.lang.CharSequence)> -> _SINK_
<android.telecom.Connection: void onReject(java.lang.String)> -> _SINK_
<com.android.internal.app.procstats.SysMemUsageTable: void mergeStats(com.android.internal.app.procstats.SysMemUsageTable)> -> _SINK_
<android.app.DialogFragment: void showAllowingStateLoss(android.app.FragmentManager,java.lang.String)> -> _SINK_
<android.content.ContextWrapper: void startActivities(android.content.Intent[])> -> _SINK_
<android.app.Notification$MessagingStyle: android.app.Notification$MessagingStyle addMessage(java.lang.CharSequence,long,android.app.Person)> -> _SINK_
<android.content.pm.parsing.component.ParsedIntentInfo$ListParceler: void parcel(java.util.List,android.os.Parcel,int)> -> _SINK_
<java.util.logging.Logger: void fine(java.lang.String)> -> _SINK_
<android.app.RemoteInput: void addResultsToIntent(android.app.RemoteInput[],android.content.Intent,android.os.Bundle)> -> _SINK_
<com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])> -> _SINK_
<java.nio.file.Files: java.util.stream.Stream list(java.nio.file.Path)> -> _SINK_
<java.util.logging.Logger: void logrb(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Object[])> -> _SINK_
<android.media.tv.TvInputInfo: android.media.tv.TvInputInfo createTvInputInfo(android.content.Context,android.content.pm.ResolveInfo,android.media.tv.TvInputHardwareInfo,java.lang.String,android.net.Uri)> -> _SINK_
<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.view.ViewGroup: void captureTransitioningViews(java.util.List)> -> _SINK_
<java.lang.StringBuilder: java.lang.StringBuilder replace(int,int,java.lang.String)> -> _SINK_
<android.telephony.SmsMessage: android.telephony.SmsMessage createFromEfRecord(int,byte[])> -> _SINK_
<android.content.ContextWrapper: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,android.os.Bundle)> -> _SINK_
<android.hardware.camera2.DngCreator: void writeInputStream(java.io.OutputStream,android.util.Size,java.io.InputStream,long)> -> _SINK_
<android.content.ContentProviderClient: void closeQuietly(android.content.ContentProviderClient)> -> _SINK_
<android.app.AppOpsManager$HistoricalOps: void clearHistory(int,java.lang.String)> -> _SINK_
<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Object[])> -> _SINK_
<android.telephony.CellInfoTdscdma: void setCellSignalStrength(android.telephony.CellSignalStrengthTdscdma)> -> _SINK_
<android.app.Notification$MessagingStyle: android.app.Notification$MessagingStyle addMessage(android.app.Notification$MessagingStyle$Message)> -> _SINK_
<android.security.KeyStore: boolean onUserPasswordChanged(int,java.lang.String)> -> _SINK_
<android.content.ContextWrapper: void startActivityForResult(java.lang.String,android.content.Intent,int,android.os.Bundle)> -> _SINK_
<android.app.role.RoleControllerManager: void isApplicationVisibleForRole(java.lang.String,java.lang.String,java.util.concurrent.Executor,java.util.function.Consumer)> -> _SINK_
<android.bluetooth.BluetoothHeadsetClient: boolean disconnectAudio(android.bluetooth.BluetoothDevice)> -> _SINK_
<android.provider.Settings$System: void getMovedToGlobalSettings(java.util.Set)> -> _SINK_
<android.content.ContextWrapper: void sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,int,android.os.Bundle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> -> _SINK_
<android.app.AlarmManager: void set(int,long,java.lang.String,android.app.AlarmManager$OnAlarmListener,android.os.Handler)> -> _SINK_
<java.io.ObjectOutputStream: void writeBytes(java.lang.String)> -> _SINK_
<android.app.NotificationManager$Policy: void dumpDebug(android.util.proto.ProtoOutputStream,long)> -> _SINK_
<java.util.logging.Logger: void logrb(java.util.logging.Level,java.lang.String,java.lang.String,java.util.ResourceBundle,java.lang.String,java.lang.Object[])> -> _SINK_
<android.telephony.CellInfoGsm: void setCellSignalStrength(android.telephony.CellSignalStrengthGsm)> -> _SINK_
<android.app.InstantAppResolverService: void onGetInstantAppResolveInfo(int[],java.lang.String,android.app.InstantAppResolverService$InstantAppResolutionCallback)> -> _SINK_
<android.app.contentsuggestions.ContentSuggestionsManager: void provideContextImage(android.graphics.Bitmap,android.os.Bundle)> -> _SINK_
<android.app.Activity: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int,android.os.Bundle)> -> _SINK_
<android.media.AudioSystem: void setDynamicPolicyCallback(android.media.AudioSystem$DynamicPolicyCallback)> -> _SINK_
<android.media.MediaMetadataRetriever: void setDataSource(android.media.MediaDataSource)> -> _SINK_
<android.telephony.mbms.vendor.MbmsDownloadServiceBase: int download(android.telephony.mbms.DownloadRequest)> -> _SINK_
<android.media.tv.tuner.Descrambler: int addPid(int,int,android.media.tv.tuner.filter.Filter)> -> _SINK_
<android.os.BaseBundle: void dumpStats(com.android.internal.util.IndentingPrintWriter,java.lang.String,java.lang.Object)> -> _SINK_
<android.view.textclassifier.SelectionEvent: android.view.textclassifier.SelectionEvent setSmartStart(int)> -> _SINK_
<android.telecom.RemoteConnection: void postDialContinue(boolean)> -> _SINK_
<android.os.Bundle: void dumpDebug(android.util.proto.ProtoOutputStream,long)> -> _SINK_
<android.os.HwParcel: void writeInt32Vector(java.util.ArrayList)> -> _SINK_
<android.util.PathParser: android.graphics.Path createPathFromPathData(java.lang.String)> -> _SINK_
<com.android.internal.util.AsyncChannel: android.os.Message sendMessageSynchronously(int,java.lang.Object)> -> _SINK_
<android.os.PowerManager$WakeLock: void dumpDebug(android.util.proto.ProtoOutputStream,long)> -> _SINK_
<android.content.ContentResolver: int bulkInsert(android.net.Uri,android.content.ContentValues[])> -> _SINK_
<android.app.SearchManager: void triggerSearch(java.lang.String,android.content.ComponentName,android.os.Bundle)> -> _SINK_
<android.telephony.SmsMessage: android.telephony.SmsMessage createFromPdu(byte[])> -> _SINK_
<com.android.internal.util.AsyncChannel: void sendMessage(int,int,int,java.lang.Object)> -> _SINK_
<android.provider.ContactsContract$Directory: void notifyDirectoryChange(android.content.ContentResolver)> -> _SINK_
<com.android.internal.util.FastPrintWriter: void print(long)> -> _SINK_
<android.service.autofill.UserData: void dump(java.lang.String,java.io.PrintWriter)> -> _SINK_
<java.io.OutputStream: void write(byte[])> -> _SINK_
<com.android.internal.os.LoggingPrintStream: java.io.PrintStream format(java.lang.String,java.lang.Object[])> -> _SINK_
<android.os.BinderProxy: void shellCommand(java.io.FileDescriptor,java.io.FileDescriptor,java.io.FileDescriptor,java.lang.String[],android.os.ShellCallback,android.os.ResultReceiver)> -> _SINK_
<android.provider.Browser: void sendString(android.content.Context,java.lang.String,java.lang.String)> -> _SINK_
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor[] createReliablePipe()> -> _SINK_
<android.app.DownloadManager: long addCompletedDownload(java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String,long,boolean,boolean)> -> _SINK_
<android.app.Notification$TvExtender: android.app.Notification$TvExtender setContentIntent(android.app.PendingIntent)> -> _SINK_
<android.provider.Telephony$Sms$Sent: android.net.Uri addMessage(int,android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)> -> _SINK_
<android.content.ContentResolver: java.io.InputStream openInputStream(android.net.Uri)> -> _SINK_
<android.net.Proxy: void setHttpProxySystemProperty(java.lang.String,java.lang.String,java.lang.String,android.net.Uri)> -> _SINK_
<android.telephony.AnomalyReporter: void reportAnomaly(java.util.UUID,java.lang.String)> -> _SINK_
<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.Throwable,java.util.function.Supplier)> -> _SINK_
<android.content.AsyncQueryHandler: void startQuery(int,java.lang.Object,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.app.ActivityThread: void handleNewIntent(android.os.IBinder,java.util.List)> -> _SINK_
<android.telephony.SmsMessage: int[] calculateLength(java.lang.CharSequence,boolean)> -> _SINK_
<android.app.Activity: void triggerSearch(java.lang.String,android.os.Bundle)> -> _SINK_
<java.util.logging.Logger: void logrb(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
<com.android.internal.widget.ResolverDrawerLayout: void onInitializeAccessibilityNodeInfoInternal(android.view.accessibility.AccessibilityNodeInfo)> -> _SINK_
<android.app.assist.AssistStructure$ViewNode: void setWebDomain(java.lang.String)> -> _SINK_
<com.android.internal.os.LoggingPrintStream: void print(char)> -> _SINK_
<android.net.lowpan.LowpanManager: void registerCallback(android.net.lowpan.LowpanManager$Callback)> -> _SINK_
<android.nfc.NdefMessage: void dumpDebug(android.util.proto.ProtoOutputStream)> -> _SINK_
<android.telephony.ims.stub.RcsCapabilityExchange: void initialize(android.telephony.ims.feature.RcsFeature)> -> _SINK_
<com.android.internal.os.LoggingPrintStream: void print(boolean)> -> _SINK_
<android.os.PersistableBundle: void dumpDebug(android.util.proto.ProtoOutputStream,long)> -> _SINK_
<com.android.internal.os.LoggingPrintStream: java.io.PrintStream format(java.util.Locale,java.lang.String,java.lang.Object[])> -> _SINK_
<android.telecom.ParcelableCall: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.os.health.TimerStat: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<java.util.logging.Logger: void entering(java.lang.String,java.lang.String,java.lang.Object[])> -> _SINK_
<android.telephony.ims.ImsSsData: void setCallForwardingInfo(android.telephony.ims.ImsCallForwardInfo[])> -> _SINK_
<android.os.DropBoxManager: void addText(java.lang.String,java.lang.String)> -> _SINK_
<com.android.internal.telephony.GsmAlphabet: byte[] stringToGsm7BitPackedWithHeader(java.lang.String,byte[],int,int)> -> _SINK_
