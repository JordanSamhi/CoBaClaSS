<android.text.format.DateUtils: java.lang.String getDayOfWeekString(int,int)> -> _SOURCE_
<android.app.admin.DevicePolicyEventLogger: int getInt()> -> _SOURCE_
<android.telephony.ims.ImsSsInfo: java.lang.String getIncomingCommunicationBarringNumber()> -> _SOURCE_
<android.app.WindowConfiguration: java.lang.String windowingModeToString(int)> -> _SOURCE_
<android.service.notification.NotificationListenerService$Ranking: boolean matchesInterruptionFilter()> -> _SOURCE_
<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager forContext(android.content.Context)> -> _SOURCE_
<android.media.audiofx.EnvironmentalReverb: short getRoomHFLevel()> -> _SOURCE_
<android.hardware.radio.RadioManager$AmBandDescriptor: java.lang.String toString()> -> _SOURCE_
<android.app.Person: android.graphics.drawable.Icon getIcon()> -> _SOURCE_
<java.time.temporal.TemporalQueries: java.time.temporal.TemporalQuery zone()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long computeBatteryScreenOffUptime(long,int)> -> _SOURCE_
<android.database.CursorWindow: float getFloat(int,int)> -> _SOURCE_
<com.android.internal.os.BatteryStatsHistory: void readFromParcel(android.os.Parcel)> -> _SOURCE_
<android.view.WindowInsets: java.lang.String toString()> -> _SOURCE_
<android.app.assist.AssistStructure$ViewNode: java.lang.String getTextIdEntry()> -> _SOURCE_
<android.provider.Settings$Global: java.lang.String getString(android.content.ContentResolver,java.lang.String)> -> _SOURCE_
<android.view.accessibility.AccessibilityRecord: boolean isChecked()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: int getDischargeCurrentLevel()> -> _SOURCE_
<android.app.prediction.AppTarget: android.content.pm.ShortcutInfo getShortcutInfo()> -> _SOURCE_
<android.media.tv.tuner.Tuner: int getAvSyncHwId(android.media.tv.tuner.filter.Filter)> -> _SOURCE_
<android.telecom.Conference: android.os.Bundle getExtras()> -> _SOURCE_
<android.content.res.Resources: java.lang.String getLastResourceResolution()> -> _SOURCE_
<android.app.NotificationChannel: android.media.AudioAttributes getAudioAttributes()> -> _SOURCE_
<android.hardware.soundtrigger.SoundTrigger$KeyphraseSoundModel: android.hardware.soundtrigger.SoundTrigger$KeyphraseSoundModel readFromParcel(android.os.Parcel)> -> _SOURCE_
<android.media.tv.tuner.frontend.FrontendStatus: int getHierarchy()> -> _SOURCE_
<java.text.DateFormatSymbols: java.lang.String getLocalPatternChars()> -> _SOURCE_
<android.os.LocaleList: int getFirstMatchIndexWithEnglishSupported(java.lang.String[])> -> _SOURCE_
<android.bluetooth.BluetoothDevice: boolean isEncrypted()> -> _SOURCE_
<android.webkit.CacheManager$CacheResult: int getHttpStatusCode()> -> _SOURCE_
<android.location.Address: java.lang.String toString()> -> _SOURCE_
<android.bluetooth.le.ScanResult: java.lang.String toString()> -> _SOURCE_
<android.telecom.InCallService: android.os.IBinder onBind(android.content.Intent)> -> _SOURCE_
<android.print.PrintAttributes$Margins: java.lang.String toString()> -> _SOURCE_
<android.content.pm.SharedLibraryInfo: java.lang.String toString()> -> _SOURCE_
<android.app.ApplicationPackageManager: int[] getPackageGids(java.lang.String)> -> _SOURCE_
<android.app.FragmentHostCallback: void onDump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SOURCE_
<android.media.AudioRecord: android.os.PersistableBundle getMetrics()> -> _SOURCE_
<android.webkit.CacheManager$CacheResult: java.lang.String getMimeType()> -> _SOURCE_
<android.speech.SpeechRecognizer: boolean isRecognitionAvailable(android.content.Context)> -> _SOURCE_
<android.gesture.GestureOverlayView: android.graphics.Paint getGesturePaint()> -> _SOURCE_
<java.time.ZonedDateTime: int getHour()> -> _SOURCE_
<android.telephony.CellIdentityNr: long getNci()> -> _SOURCE_
<android.view.textclassifier.TextSelection$Request$Builder: android.view.textclassifier.TextSelection$Request build()> -> _SOURCE_
<android.hardware.location.NanoAppInstanceInfo: int getHandle()> -> _SOURCE_
<java.time.chrono.IsoChronology: java.lang.String getId()> -> _SOURCE_
<android.telephony.data.DataProfile: java.lang.String toString()> -> _SOURCE_
<android.hardware.location.GeofenceHardwareRequest: int getNotificationResponsiveness()> -> _SOURCE_
<java.lang.invoke.MethodType: java.lang.invoke.MethodType generic()> -> _SOURCE_
<android.content.res.ApkAssets: android.content.om.OverlayableInfo getOverlayableInfo(java.lang.String)> -> _SOURCE_
<android.content.pm.LauncherActivityInfo: android.content.pm.ApplicationInfo getApplicationInfo()> -> _SOURCE_
<java.security.cert.CertPathValidatorException: java.security.cert.CertPath getCertPath()> -> _SOURCE_
<android.service.dreams.Sandman: void startDreamWhenDockedIfAppropriate(android.content.Context)> -> _SOURCE_
<android.telephony.CellSignalStrength: int getNumSignalStrengthLevels()> -> _SOURCE_
<com.android.internal.os.KernelSingleUidTimeReader: long[] computeDelta(int,long[])> -> _SOURCE_
<android.os.CoolingDevice: int getType()> -> _SOURCE_
<android.telephony.data.ApnSetting: java.util.List getApnTypes()> -> _SOURCE_
<android.net.Ikev2VpnProfile: java.security.cert.X509Certificate getServerRootCaCert()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String[] getIsimPcscf()> -> _SOURCE_
<android.preference.PreferenceManager: boolean isStorageDeviceProtected()> -> _SOURCE_
<android.net.TrafficStats: long getLoopbackTxPackets()> -> _SOURCE_
<android.os.PowerManager: int getLastShutdownReason()> -> _SOURCE_
<android.graphics.HardwareRenderer: void trimMemory(int)> -> _SOURCE_
<android.hardware.SensorManager: boolean isDynamicSensorDiscoverySupported()> -> _SOURCE_
<android.os.Debug$InstructionCount: int globalMethodInvocations()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: long getMaximumTimeToLock(android.content.ComponentName,int)> -> _SOURCE_
<android.media.RingtoneManager: android.net.Uri getValidRingtoneUri(android.content.Context)> -> _SOURCE_
<android.content.pm.ApplicationInfo: int getHiddenApiEnforcementPolicy()> -> _SOURCE_
<android.view.MotionEvent: int getButtonState()> -> _SOURCE_
<android.net.ConnectivityManager: java.lang.String[] getTetheredDhcpRanges()> -> _SOURCE_
<android.drm.DrmManagerClient: android.drm.DrmConvertedStatus closeConvertSession(int)> -> _SOURCE_
<android.widget.TextView: java.lang.CharSequence getImeActionLabel()> -> _SOURCE_
<com.android.internal.telephony.SmsHeader: java.lang.String toString()> -> _SOURCE_
<android.media.AudioSystem: int getPlatformType(android.content.Context)> -> _SOURCE_
<android.content.ContentQueryMap: void requery()> -> _SOURCE_
<android.telephony.SubscriptionManager: boolean isActiveSubId(int)> -> _SOURCE_
<java.nio.channels.spi.SelectorProvider: java.nio.channels.Channel inheritedChannel()> -> _SOURCE_
<android.widget.Toolbar: com.android.internal.widget.DecorToolbar getWrapper()> -> _SOURCE_
<com.android.internal.policy.PhoneWindow: android.view.View getCurrentFocus()> -> _SOURCE_
<android.telephony.ims.feature.CapabilityChangeRequest$CapabilityPair: java.lang.String toString()> -> _SOURCE_
<android.media.audiofx.EnvironmentalReverb: int getDecayTime()> -> _SOURCE_
<android.app.NotificationManager: void disallowAssistantAdjustment(java.lang.String)> -> _SOURCE_
<android.content.BroadcastReceiver: int getSendingUserId()> -> _SOURCE_
<android.app.ApplicationPackageManager: void getPackageSizeInfoAsUser(java.lang.String,int,android.content.pm.IPackageStatsObserver)> -> _SOURCE_
<android.hardware.Camera$Parameters: void setGpsAltitude(double)> -> _SOURCE_
<com.android.internal.widget.RecyclerView: boolean isAttachedToWindow()> -> _SOURCE_
<android.bluetooth.BluetoothA2dpSink: boolean isAudioPlaying(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.util.List getInstalledModules(int)> -> _SOURCE_
<android.view.ViewConfiguration: int getHoverTooltipHideShortTimeout()> -> _SOURCE_
<android.media.MediaRouter$SimpleCallback: void onRouteGrouped(android.media.MediaRouter,android.media.MediaRouter$RouteInfo,android.media.MediaRouter$RouteGroup,int)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: android.util.SparseArray getSensorStats()> -> _SOURCE_
<com.android.internal.util.StateMachine$LogRec: com.android.internal.util.IState getState()> -> _SOURCE_
<java.util.zip.Inflater: int getRemaining()> -> _SOURCE_
<android.content.om.OverlayInfo: java.lang.String getTargetPackageName()> -> _SOURCE_
<android.net.TrafficStats: long getUidUdpTxBytes(int)> -> _SOURCE_
<android.media.midi.MidiDeviceInfo: java.lang.String toString()> -> _SOURCE_
<android.renderscript.ProgramStore: android.renderscript.ProgramStore BLEND_NONE_DEPTH_NONE(android.renderscript.RenderScript)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: java.lang.String getEndPlatformVersion()> -> _SOURCE_
<java.net.URLConnection: java.lang.String getHeaderFieldKey(int)> -> _SOURCE_
<android.media.tv.tuner.dvr.DvrRecorder: int configure(android.media.tv.tuner.dvr.DvrSettings)> -> _SOURCE_
<android.renderscript.Byte3: byte length()> -> _SOURCE_
<android.hardware.location.NanoAppState: long getNanoAppId()> -> _SOURCE_
<com.android.server.usage.AppStandbyInternal$AppIdleStateChangeListener: void onParoleStateChanged(boolean)> -> _SOURCE_
<android.telephony.data.DataProfile: int getMaxConnectionsTime()> -> _SOURCE_
<android.view.InputDevice$MotionRange: int getAxis()> -> _SOURCE_
<android.view.Window: android.transition.Scene getContentScene()> -> _SOURCE_
<android.media.MediaRoute2Info: android.net.Uri getIconUri()> -> _SOURCE_
<android.telecom.ConnectionRequest: android.telecom.PhoneAccountHandle getAccountHandle()> -> _SOURCE_
<android.hardware.display.BrightnessCorrection: android.hardware.display.BrightnessCorrection loadFromXml(org.xmlpull.v1.XmlPullParser)> -> _SOURCE_
<android.net.RouteInfo: android.net.RouteInfo makeHostRoute(java.net.InetAddress,java.lang.String)> -> _SOURCE_
<android.telephony.ServiceState: boolean getDataRoaming()> -> _SOURCE_
<com.android.internal.app.AbstractMultiProfilePagerAdapter: java.lang.CharSequence getPageTitle(int)> -> _SOURCE_
<android.telephony.SmsCbMessage: android.telephony.SmsCbMessage createFromCursor(android.database.Cursor)> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec: boolean isCriticalToDeviceEncryption()> -> _SOURCE_
<android.text.style.SpellCheckSpan: int getSpanTypeIdInternal()> -> _SOURCE_
<android.media.VolumeProvider: java.lang.String getVolumeControlId()> -> _SOURCE_
<android.os.UserManager: java.util.List getUserProfiles()> -> _SOURCE_
<android.os.BasicShellCommandHandler: int getRemainingArgsCount()> -> _SOURCE_
<android.provider.CallLog$Calls: boolean shouldHaveSharedCallLogEntries(android.content.Context,android.os.UserManager,int)> -> _SOURCE_
<android.net.NetworkUtils: boolean isWeaklyValidatedHostname(java.lang.String)> -> _SOURCE_
<android.accessibilityservice.AccessibilityShortcutInfo: android.content.pm.ActivityInfo getActivityInfo()> -> _SOURCE_
<android.view.inputmethod.InputMethodInfo: android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager)> -> _SOURCE_
<android.media.audiopolicy.AudioPolicy: boolean isTestFocusPolicy()> -> _SOURCE_
<android.media.AudioDeviceInfo: int convertDeviceTypeToInternalDevice(int)> -> _SOURCE_
<android.location.GnssClock: boolean hasDriftUncertaintyNanosPerSecond()> -> _SOURCE_
<android.telephony.ims.ImsCallProfile: void updateMediaProfile(android.telephony.ims.ImsCallProfile)> -> _SOURCE_
<java.util.Base64: java.util.Base64$Encoder getMimeEncoder()> -> _SOURCE_
<com.android.internal.content.om.OverlayConfig$IdmapInvocation: java.lang.String toString()> -> _SOURCE_
<android.service.storage.ExternalStorageService: android.os.IBinder onBind(android.content.Intent)> -> _SOURCE_
<android.telephony.ServiceState: java.lang.String getVoiceOperatorAlphaShort()> -> _SOURCE_
<android.provider.ContactsContract$ProfileSyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)> -> _SOURCE_
<android.net.LinkAddress: int getScope()> -> _SOURCE_
<android.content.ContentProvider: int getUserIdFromAuthority(java.lang.String)> -> _SOURCE_
<android.os.connectivity.CellularBatteryStats: long getNumBytesRx()> -> _SOURCE_
<android.os.connectivity.CellularBatteryStats: long getTxTimeMillis(int)> -> _SOURCE_
<android.telecom.VideoCallImpl: void setCamera(java.lang.String)> -> _SOURCE_
<android.renderscript.Mesh$Builder: int getCurrentIndexSetIndex()> -> _SOURCE_
<android.telephony.mbms.vendor.VendorUtils: android.content.ComponentName getAppReceiverFromPackageName(android.content.Context,java.lang.String)> -> _SOURCE_
<android.net.TrafficStats: void incrementOperationCount(int)> -> _SOURCE_
<android.os.AppZygote: android.os.ChildZygoteProcess getProcess()> -> _SOURCE_
<android.telephony.SmsCbMessage: int getSubscriptionId()> -> _SOURCE_
<android.media.tv.TvTrackInfo: float getVideoFrameRate()> -> _SOURCE_
<android.content.Context: android.os.Handler getMainThreadHandler()> -> _SOURCE_
<android.net.Ikev2VpnProfile: boolean hasAeadAlgorithms(java.util.List)> -> _SOURCE_
<android.app.TaskInfo: android.content.res.Configuration getConfiguration()> -> _SOURCE_
<android.view.KeyEvent: int getId()> -> _SOURCE_
<javax.net.ssl.SSLContext: javax.net.ssl.SSLSessionContext getClientSessionContext()> -> _SOURCE_
<android.hardware.camera2.CaptureFailure: int getSequenceId()> -> _SOURCE_
<android.bluetooth.BluetoothDevice: void invalidateBluetoothGetBondStateCache()> -> _SOURCE_
<android.accessibilityservice.AccessibilityGestureEvent: int getDisplayId()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: long getPasswordExpiration(android.content.ComponentName)> -> _SOURCE_
<android.telephony.SmsManager: boolean copyMessageToIcc(byte[],byte[],int)> -> _SOURCE_
<android.telecom.Call$Details: boolean can(int)> -> _SOURCE_
<com.android.internal.widget.ViewPager: com.android.internal.widget.PagerAdapter getAdapter()> -> _SOURCE_
<com.android.internal.infra.RemoteStream: com.android.internal.infra.AndroidFuture receiveBytes(com.android.internal.util.FunctionalUtils$ThrowingConsumer)> -> _SOURCE_
<android.media.MediaScannerConnection: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> -> _SOURCE_
<android.view.View: int getAutofillType()> -> _SOURCE_
<android.renderscript.Font: android.renderscript.Font createFromResource(android.renderscript.RenderScript,android.content.res.Resources,int,float)> -> _SOURCE_
<java.util.jar.JarFile: java.util.Enumeration entries()> -> _SOURCE_
<java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()> -> _SOURCE_
<android.telephony.TelephonyManager: int getVoiceMessageCount()> -> _SOURCE_
<android.content.pm.LauncherApps: android.os.ParcelFileDescriptor getShortcutIconFd(android.content.pm.ShortcutInfo)> -> _SOURCE_
<android.util.KeyValueListParser: long getLong(java.lang.String,long)> -> _SOURCE_
<android.os.PowerManager: boolean isScreenOn()> -> _SOURCE_
<com.android.internal.util.TypedProperties: int getStringInfo(java.lang.String)> -> _SOURCE_
<android.provider.Settings: boolean isCallingPackageAllowedToDrawOverlays(android.content.Context,int,java.lang.String,boolean)> -> _SOURCE_
<android.content.ClipDescription: java.lang.String[] filterMimeTypes(java.lang.String)> -> _SOURCE_
<android.view.ThreadedRenderer: android.graphics.RenderNode getRootNode()> -> _SOURCE_
<android.telephony.data.ApnSetting: int getMvnoTypeIntFromString(java.lang.String)> -> _SOURCE_
<android.net.netstats.provider.NetworkStatsProvider: void notifyAlertReached()> -> _SOURCE_
<android.view.textclassifier.TextClassifierEvent$TextSelectionEvent: int getRelativeSuggestedWordStartIndex()> -> _SOURCE_
<java.security.AlgorithmParameters: java.lang.String getAlgorithm()> -> _SOURCE_
<android.util.DebugUtils: void buildShortClassTag(java.lang.Object,java.lang.StringBuilder)> -> _SOURCE_
<android.util.proto.ProtoInputStream: java.lang.String dumpDebugData()> -> _SOURCE_
<com.android.internal.util.MessageUtils: android.util.SparseArray findMessageNames(java.lang.Class[],java.lang.String[])> -> _SOURCE_
<android.app.ApplicationPackageManager: java.util.List queryContentProviders(java.lang.String,int,int,java.lang.String)> -> _SOURCE_
<com.android.internal.app.MessageSamplingConfig: int getAcceptableLeftDistance()> -> _SOURCE_
<android.app.NotificationManager: boolean isNotificationPolicyAccessGranted()> -> _SOURCE_
<android.telephony.CellIdentityWcdma: android.telephony.ClosedSubscriberGroupInfo getClosedSubscriberGroupInfo()> -> _SOURCE_
<android.telecom.Conference: void onHold()> -> _SOURCE_
<android.os.Environment$UserEnvironment: java.io.File[] buildExternalStorageAndroidObbDirs()> -> _SOURCE_
<android.os.storage.VolumeInfo: java.io.File getInternalPathForUser(int)> -> _SOURCE_
<android.telephony.NetworkRegistrationInfo: java.lang.String getRegisteredPlmn()> -> _SOURCE_
<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])> -> _SOURCE_
<java.net.URI: java.lang.String getRawUserInfo()> -> _SOURCE_
<android.util.EventLog$Event: byte[] getBytes()> -> _SOURCE_
<java.nio.charset.UnsupportedCharsetException: java.lang.String getCharsetName()> -> _SOURCE_
<android.telephony.ims.stub.ImsConfigImplBase$ImsConfigStub: int setConfigString(int,java.lang.String)> -> _SOURCE_
<android.view.animation.BaseInterpolator: int getChangingConfiguration()> -> _SOURCE_
<android.net.UrlQuerySanitizer: java.util.List getParameterList()> -> _SOURCE_
<android.telecom.CallerInfoAsyncQuery: android.telecom.CallerInfoAsyncQuery startQuery(int,android.content.Context,android.net.Uri,android.telecom.CallerInfoAsyncQuery$OnQueryCompleteListener,java.lang.Object)> -> _SOURCE_
<android.content.ContentProvider: java.lang.String getCallingPackage()> -> _SOURCE_
<android.widget.DatePicker: long getMinDate()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long getWifiActiveTime(long,int)> -> _SOURCE_
<android.app.FragmentController: boolean execPendingActions()> -> _SOURCE_
<com.android.ims.internal.uce.common.CapInfo: boolean isGeoSmsSupported()> -> _SOURCE_
<android.media.RoutingSessionInfo$Builder: android.media.RoutingSessionInfo$Builder clearSelectedRoutes()> -> _SOURCE_
<java.security.cert.X509CRL: javax.security.auth.x500.X500Principal getIssuerX500Principal()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: java.util.Map getSyncedTables()> -> _SOURCE_
<android.telephony.BarringInfo$BarringServiceInfo: boolean isConditionallyBarred()> -> _SOURCE_
<android.telephony.data.DataCallResponse: int getMtuV6()> -> _SOURCE_
<android.media.MediaDrm$CertificateRequest: byte[] getData()> -> _SOURCE_
<android.service.oemlock.OemLockManager: boolean isDeviceOemUnlocked()> -> _SOURCE_
<android.webkit.WebChromeClient: void onReceivedIcon(android.webkit.WebView,android.graphics.Bitmap)> -> _SOURCE_
<android.location.GpsMeasurement: boolean hasPseudorangeInMeters()> -> _SOURCE_
<android.app.slice.SliceProvider: android.app.slice.Slice createPermissionSlice(android.content.Context,android.net.Uri,java.lang.String)> -> _SOURCE_
<android.media.AudioTrack: android.media.PlaybackParams getPlaybackParams()> -> _SOURCE_
<android.app.backup.BackupManager: boolean isBackupServiceActive(android.os.UserHandle)> -> _SOURCE_
<android.view.inputmethod.InlineSuggestionsRequest: java.lang.String toString()> -> _SOURCE_
<android.view.textservice.TextInfo: java.lang.String getText()> -> _SOURCE_
<android.telecom.Conference: void onStopDtmfTone()> -> _SOURCE_
<android.view.inputmethod.InputContentInfo: android.net.Uri getLinkUri()> -> _SOURCE_
<android.service.notification.StatusBarNotification: android.app.Notification getNotification()> -> _SOURCE_
<com.android.internal.os.KernelCpuThreadReader$Injector: int getUidForPid(int)> -> _SOURCE_
<android.accounts.AccountManager: boolean someUserHasAccount(android.accounts.Account)> -> _SOURCE_
<android.app.ApplicationPackageManager: android.content.pm.PackageInfo getPackageInfo(android.content.pm.VersionedPackage,int)> -> _SOURCE_
<java.util.jar.JarInputStream: java.util.zip.ZipEntry getNextEntry()> -> _SOURCE_
<android.preference.PreferenceGroup: int getPreferenceCount()> -> _SOURCE_
<android.service.carrier.CarrierIdentifier: java.lang.String toString()> -> _SOURCE_
<android.media.AudioManager: boolean isStreamAffectedByRingerMode(int)> -> _SOURCE_
<android.os.StatFs: long getTotalBytes()> -> _SOURCE_
<android.database.sqlite.SQLiteGlobal: int releaseMemory()> -> _SOURCE_
<java.time.ZoneOffset: java.time.zone.ZoneRules getRules()> -> _SOURCE_
<android.app.ActivityOptions: int getStartX()> -> _SOURCE_
<java.net.MulticastSocket: java.net.InetAddress getInterface()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getSimOperatorNameForPhone(int)> -> _SOURCE_
<java.nio.charset.CoderResult: java.lang.String toString()> -> _SOURCE_
<android.telecom.ParcelableCall: int getCallDirection()> -> _SOURCE_
<android.media.audiofx.Visualizer: int getCaptureSize()> -> _SOURCE_
<android.app.ActivityManager: boolean isInLockTaskMode()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long getGpsSignalQualityTime(int,long,int)> -> _SOURCE_
<android.os.Bundle: java.lang.CharSequence getCharSequence(java.lang.String)> -> _SOURCE_
<android.net.IpPrefix: int getPrefixLength()> -> _SOURCE_
<android.service.autofill.augmented.FillRequest: java.lang.String toString()> -> _SOURCE_
<java.security.KeyStore: int size()> -> _SOURCE_
<android.animation.PropertyValuesHolder: java.lang.String getPropertyName()> -> _SOURCE_
<android.accessibilityservice.AccessibilityServiceInfo: boolean getCanRetrieveWindowContent()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getBasebandVersion()> -> _SOURCE_
<android.telephony.ims.ImsSsData$Builder: android.telephony.ims.ImsSsData$Builder setCallForwardingInfo(java.util.List)> -> _SOURCE_
<android.media.tv.tuner.frontend.IsdbsFrontendSettings: int getStreamId()> -> _SOURCE_
<java.security.Signature: java.security.Signature getInstance(java.lang.String,java.security.Provider)> -> _SOURCE_
<android.graphics.Path: long readOnlyNI()> -> _SOURCE_
<android.app.admin.DeviceAdminReceiver: void onUserAdded(android.content.Context,android.content.Intent,android.os.UserHandle)> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getError()> -> _SOURCE_
<android.telephony.ims.ImsCallProfile: boolean isVideoPaused()> -> _SOURCE_
<javax.net.ssl.SSLSocket: javax.net.ssl.SSLParameters getSSLParameters()> -> _SOURCE_
<android.telephony.TelephonyManager: void setCarrierTestOverride(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.service.carrier.CarrierIdentifier: java.lang.String getMcc()> -> _SOURCE_
<java.util.logging.LogManager: java.util.logging.LogManager getLogManager()> -> _SOURCE_
<android.media.AudioManager: boolean isBluetoothScoAvailableOffCall()> -> _SOURCE_
<android.app.FragmentController: void dumpLoaders(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SOURCE_
<android.media.tv.tuner.dvr.DvrPlayback: int flush()> -> _SOURCE_
<android.media.tv.TvInputInfo: java.lang.CharSequence loadLabel(android.content.Context)> -> _SOURCE_
<android.os.Environment: java.io.File getDataUserDeDirectory(java.lang.String)> -> _SOURCE_
<android.hardware.camera2.CaptureRequest: java.lang.String getLogicalCameraId()> -> _SOURCE_
<android.view.InsetsState: java.lang.String toString()> -> _SOURCE_
<android.media.AudioManager: java.util.List getActiveRecordingConfigurations()> -> _SOURCE_
<android.os.storage.StorageManager: java.util.List getDisks()> -> _SOURCE_
<android.os.image.DynamicSystemClient: void start(android.net.Uri,long)> -> _SOURCE_
<android.telephony.UiccAccessRule: java.lang.String toString()> -> _SOURCE_
<android.hardware.Camera$Parameters: int getZoom()> -> _SOURCE_
<android.media.MediaFormat: java.lang.Number getNumber(java.lang.String,java.lang.Number)> -> _SOURCE_
<android.content.pm.VersionedPackage: java.lang.String getPackageName()> -> _SOURCE_
<java.time.zone.ZoneRulesProvider: java.util.Set getAvailableZoneIds()> -> _SOURCE_
<android.media.MicrophoneInfo: int getId()> -> _SOURCE_
<android.service.euicc.GetDefaultDownloadableSubscriptionListResult: java.util.List getDownloadableSubscriptions()> -> _SOURCE_
<android.net.CaptivePortalData: android.net.Uri getVenueInfoUrl()> -> _SOURCE_
<java.util.concurrent.ThreadPoolExecutor: java.lang.String toString()> -> _SOURCE_
<android.os.IBinder: android.os.IBinder getExtension()> -> _SOURCE_
<com.android.internal.app.WindowDecorActionBar: java.lang.CharSequence getTitle()> -> _SOURCE_
<javax.security.cert.Certificate: int hashCode()> -> _SOURCE_
<android.speech.RecognitionService: void onDestroy()> -> _SOURCE_
<android.os.health.HealthStats: int getStatsKeyCount()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.util.List getIntentFilterVerifications(java.lang.String)> -> _SOURCE_
<com.android.internal.view.FloatingActionMode: android.view.Menu getMenu()> -> _SOURCE_
<java.security.Provider$Service: java.lang.String toString()> -> _SOURCE_
<android.graphics.drawable.AdaptiveIconDrawable: void clearMutated()> -> _SOURCE_
<android.net.UrlQuerySanitizer: android.net.UrlQuerySanitizer$ValueSanitizer getUrlLegal()> -> _SOURCE_
<android.content.BroadcastReceiver$PendingResult: int getResultCode()> -> _SOURCE_
<android.telephony.data.DataCallResponse: int getCause()> -> _SOURCE_
<android.net.Ikev2VpnProfile: int getMaxMtu()> -> _SOURCE_
<android.app.WindowConfiguration: void setDisplayWindowingMode(int)> -> _SOURCE_
<android.content.pm.SharedLibraryInfo: java.util.List getDependencies()> -> _SOURCE_
<java.util.Locale: java.lang.String[] getISOLanguages()> -> _SOURCE_
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)> -> _SOURCE_
<android.media.AudioDeviceInfo: int[] getChannelMasks()> -> _SOURCE_
<android.content.BroadcastReceiver: android.content.BroadcastReceiver$PendingResult goAsync()> -> _SOURCE_
<android.graphics.Path: boolean isInverseFillType()> -> _SOURCE_
<android.net.NetworkStatsHistory: java.lang.String toString()> -> _SOURCE_
<android.provider.SearchIndexablesProvider: android.database.Cursor querySiteMapPairs()> -> _SOURCE_
<android.view.KeyEvent: int getMaxKeyCode()> -> _SOURCE_
<android.media.MediaRouter2Manager: java.util.List getRoutingSessions(java.lang.String)> -> _SOURCE_
<android.webkit.UrlInterceptRegistry: android.webkit.CacheManager$CacheResult getSurrogate(java.lang.String,java.util.Map)> -> _SOURCE_
<android.location.GpsMeasurement: boolean hasCarrierPhase()> -> _SOURCE_
<com.android.internal.telephony.cdma.sms.BearerData: java.lang.String toString()> -> _SOURCE_
<android.print.PrintAttributes$MediaSize: android.util.ArraySet getAllPredefinedSizes()> -> _SOURCE_
<android.bluetooth.BluetoothActivityEnergyInfo: int getBluetoothStackState()> -> _SOURCE_
<android.net.NetworkStats: long getElapsedRealtimeAge()> -> _SOURCE_
<android.text.util.Rfc822Tokenizer: void tokenize(java.lang.CharSequence,java.util.Collection)> -> _SOURCE_
<android.net.LinkProperties: boolean hasIpv4PcscfServer()> -> _SOURCE_
<java.nio.charset.MalformedInputException: java.lang.String getMessage()> -> _SOURCE_
<android.content.Intent: java.lang.String getScheme()> -> _SOURCE_
<android.os.health.HealthStats: int getStatsKeyAt(int)> -> _SOURCE_
<android.telephony.SubscriptionPlan: long getDataUsageBytes()> -> _SOURCE_
<java.nio.charset.Charset: java.lang.String name()> -> _SOURCE_
<android.media.MediaFile: boolean isAudioFileType(int)> -> _SOURCE_
<android.telephony.PackageChangeReceiver: void onPackageRemoved(java.lang.String)> -> _SOURCE_
<android.content.ContentResolver: int getIsSyncableAsUser(android.accounts.Account,java.lang.String,int)> -> _SOURCE_
<android.view.View: int getScrollCaptureHint()> -> _SOURCE_
<android.media.MediaRouter$RouteInfo: int getPlaybackType()> -> _SOURCE_
<android.widget.PopupWindow: boolean isOutsideTouchable()> -> _SOURCE_
<android.app.NotificationChannelGroup: void writeXml(org.xmlpull.v1.XmlSerializer)> -> _SOURCE_
<java.security.cert.CertPathValidatorException: int getIndex()> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing$BandStage: java.lang.String toString()> -> _SOURCE_
<android.content.pm.PackageInstaller$SessionInfo: boolean isStagedSessionFailed()> -> _SOURCE_
<java.util.IntSummaryStatistics: int getMax()> -> _SOURCE_
<android.telephony.CellIdentity: java.lang.CharSequence getOperatorAlphaLong()> -> _SOURCE_
<android.graphics.pdf.PdfDocument$PageInfo: int getPageNumber()> -> _SOURCE_
<android.app.ApplicationPackageManager: void setApplicationCategoryHint(java.lang.String,int)> -> _SOURCE_
<android.app.admin.SystemUpdatePolicy: int getInstallWindowStart()> -> _SOURCE_
<android.util.NtpTrustedTime$TimeResult: long getAgeMillis()> -> _SOURCE_
<android.view.View: boolean hasTransientState()> -> _SOURCE_
<com.android.internal.telephony.cdma.SmsMessage: int getProtocolIdentifier()> -> _SOURCE_
<android.location.Address: java.util.Locale getLocale()> -> _SOURCE_
<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder createRecurringDaily(java.time.ZonedDateTime)> -> _SOURCE_
<android.print.PrintAttributes$Margins: int getLeftMils()> -> _SOURCE_
<android.view.FrameStats: int getFrameCount()> -> _SOURCE_
<android.media.audiopolicy.AudioProductStrategy: java.util.List getAudioProductStrategies()> -> _SOURCE_
<android.hardware.hdmi.HdmiControlServiceWrapper: void askRemoteDeviceToBecomeActiveSource(int)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: int getWifiSignalStrengthCount(int,int)> -> _SOURCE_
<android.telephony.CellIdentityGsm: int getChannelNumber()> -> _SOURCE_
<android.content.ContentResolver: java.lang.String getAttributionTag()> -> _SOURCE_
<android.hardware.hdmi.HdmiControlServiceWrapper: void stopOneTouchRecord(int)> -> _SOURCE_
<android.app.ApplicationPackageManager: boolean isAutoRevokeWhitelisted()> -> _SOURCE_
<com.android.internal.os.RpmStats: com.android.internal.os.RpmStats$PowerStateSubsystem getSubsystem(java.lang.String)> -> _SOURCE_
<android.net.ConnectivityManager: int tether(java.lang.String)> -> _SOURCE_
<android.graphics.Matrix: java.lang.String toString()> -> _SOURCE_
<android.view.Display: java.lang.String getName()> -> _SOURCE_
<com.android.internal.telephony.cdma.SmsMessage: void createPdu()> -> _SOURCE_
<android.telephony.ims.ImsMmTelManager: void registerMmTelCapabilityCallback(java.util.concurrent.Executor,android.telephony.ims.ImsMmTelManager$CapabilityCallback)> -> _SOURCE_
<android.app.WallpaperManager: int getWallpaperIdForUser(int,int)> -> _SOURCE_
<android.bluetooth.BluetoothHeadset: boolean getAudioRouteAllowed()> -> _SOURCE_
<android.view.textclassifier.TextClassification: java.lang.CharSequence getLabel()> -> _SOURCE_
<android.app.NotificationChannel: boolean shouldShowLights()> -> _SOURCE_
<android.app.slice.SliceSpec: java.lang.String toString()> -> _SOURCE_
<java.util.UUID: java.util.UUID randomUUID()> -> _SOURCE_
<android.os.BaseBundle: int getInt(java.lang.String)> -> _SOURCE_
<android.net.TelephonyNetworkSpecifier$Builder: android.net.TelephonyNetworkSpecifier build()> -> _SOURCE_
<android.media.tv.tuner.frontend.FrontendStatus$Atsc3PlpTuningInfo: int getUec()> -> _SOURCE_
<android.telephony.mbms.StreamingService: android.telephony.mbms.StreamingServiceInfo getInfo()> -> _SOURCE_
<android.media.AudioManager: java.util.List getHwOffloadEncodingFormatsSupportedForA2DP()> -> _SOURCE_
<android.app.AlarmManager: android.app.AlarmManager$AlarmClockInfo getNextAlarmClock()> -> _SOURCE_
<android.telephony.data.ApnSetting: int getProfileId()> -> _SOURCE_
<android.view.VerifiedInputEvent: int getDisplayId()> -> _SOURCE_
<android.database.sqlite.SQLiteProgram: int getUniqueId()> -> _SOURCE_
<android.companion.BluetoothDeviceFilter: java.util.regex.Pattern getNamePattern()> -> _SOURCE_
<android.app.ActivityOptions: boolean disallowEnterPictureInPictureWhileLaunching()> -> _SOURCE_
<android.hardware.radio.ProgramSelector: android.hardware.radio.ProgramSelector$Identifier[] getAllIds(int)> -> _SOURCE_
<java.net.URI: java.lang.String getScheme()> -> _SOURCE_
<android.os.Bundle: android.util.SizeF getSizeF(java.lang.String)> -> _SOURCE_
<android.content.UriPermission: long getPersistedTime()> -> _SOURCE_
<android.app.ActivityOptions: int getSplitScreenCreateMode()> -> _SOURCE_
<com.android.internal.telephony.uicc.asn1.Asn1Node: java.util.List getChildren(int)> -> _SOURCE_
<android.permission.PermissionManager: java.util.List getSplitPermissions()> -> _SOURCE_
<android.location.LocationManager: boolean isProviderPackage(java.lang.String)> -> _SOURCE_
<android.hardware.display.AmbientDisplayConfiguration: boolean pickupGestureEnabled(int)> -> _SOURCE_
<android.telephony.cdma.CdmaSmsCbProgramData: int getAlertOption()> -> _SOURCE_
<android.view.Display$HdrCapabilities: java.lang.String toString()> -> _SOURCE_
<android.content.pm.ShortcutInfo: boolean hasIconFile()> -> _SOURCE_
<android.app.admin.DevicePolicyEventLogger: int getEventId()> -> _SOURCE_
<android.os.SystemClock: java.time.Clock currentGnssTimeClock()> -> _SOURCE_
<android.media.tv.tuner.frontend.FrontendStatus: int getSnr()> -> _SOURCE_
<android.media.AudioPort: int[] samplingRates()> -> _SOURCE_
<android.os.storage.StorageVolume: android.content.Intent createOpenDocumentTreeIntent()> -> _SOURCE_
<android.bluetooth.BluetoothGattIncludedService: java.util.UUID getUuid()> -> _SOURCE_
<android.hardware.display.DeviceProductInfo: java.lang.String getManufacturerPnpId()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean getAutoTimeZoneEnabled(android.content.ComponentName)> -> _SOURCE_
<android.hardware.radio.RadioMetadata: java.lang.String getString(java.lang.String)> -> _SOURCE_
<android.app.SearchableInfo: android.content.Context getProviderContext(android.content.Context,android.content.Context)> -> _SOURCE_
<android.view.InputDevice: android.hardware.input.InputDeviceIdentifier getIdentifier()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.lang.String getDefaultBrowserPackageNameAsUser(int)> -> _SOURCE_
<java.security.cert.Certificate: java.lang.String getType()> -> _SOURCE_
<android.hardware.camera2.CameraManager$AvailabilityCallback: void onCameraAvailable(java.lang.String)> -> _SOURCE_
<android.app.NotificationChannel: java.lang.String getGroup()> -> _SOURCE_
<com.android.internal.os.BatteryStatsHelper: void smearScreenBatterySipper(java.util.List,com.android.internal.os.BatterySipper)> -> _SOURCE_
<android.service.watchdog.ExplicitHealthCheckService$PackageConfig: java.lang.String getPackageName()> -> _SOURCE_
<android.bluetooth.BluetoothCodecConfig: boolean hasSingleChannelMode()> -> _SOURCE_
<android.location.GpsClock: double getDriftUncertaintyInNsPerSec()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: void clearDeviceOwnerApp(java.lang.String)> -> _SOURCE_
<java.nio.channels.SelectionKey: java.lang.Object attachment()> -> _SOURCE_
<android.app.ActivityManager: android.content.pm.ConfigurationInfo getDeviceConfigurationInfo()> -> _SOURCE_
<java.time.chrono.MinguoChronology: java.lang.String getId()> -> _SOURCE_
<java.security.spec.PKCS8EncodedKeySpec: java.lang.String getFormat()> -> _SOURCE_
<android.telephony.ims.stub.ImsCallSessionImplBase: void hold(android.telephony.ims.ImsStreamMediaProfile)> -> _SOURCE_
<android.app.VoiceInteractor$Prompt: java.lang.String toString()> -> _SOURCE_
<android.service.autofill.BatchUpdates: java.util.ArrayList getTransformations()> -> _SOURCE_
<android.hardware.soundtrigger.SoundTrigger$RecognitionEvent: java.lang.String toString()> -> _SOURCE_
<android.app.PropertyInvalidatedCache: java.lang.String cacheName()> -> _SOURCE_
<android.telephony.emergency.EmergencyNumber: int getEmergencyServiceCategoryBitmask()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: void updateKernelWakelocksLocked()> -> _SOURCE_
<javax.net.ssl.SNIServerName: java.lang.String toString()> -> _SOURCE_
<android.os.BaseBundle: int size()> -> _SOURCE_
<com.android.internal.os.BinderInternal: long getLastGcTime()> -> _SOURCE_
<android.widget.CursorTreeAdapter: void notifyDataSetChanged()> -> _SOURCE_
<android.media.MediaDescription$Builder: android.media.MediaDescription build()> -> _SOURCE_
<android.util.proto.ProtoStream: int getOffsetFromToken(long)> -> _SOURCE_
<android.location.LocationManager: java.lang.String[] getIgnoreSettingsWhitelist()> -> _SOURCE_
<android.graphics.Paint: void getTextBounds(java.lang.String,int,int,android.graphics.Rect)> -> _SOURCE_
<java.time.ZonedDateTime: java.time.LocalTime toLocalTime()> -> _SOURCE_
<android.text.style.UnderlineSpan: int getSpanTypeIdInternal()> -> _SOURCE_
<android.preference.PreferenceActivity$Header: java.lang.CharSequence getSummary(android.content.res.Resources)> -> _SOURCE_
<com.android.internal.telephony.cdma.SmsMessage: com.android.internal.telephony.cdma.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,java.lang.String,boolean,com.android.internal.telephony.SmsHeader)> -> _SOURCE_
<android.graphics.Bitmap: int getByteCount()> -> _SOURCE_
<android.app.Notification$TvExtender: android.app.PendingIntent getContentIntent()> -> _SOURCE_
<android.content.ContentResolver: android.content.ContentProviderClient acquireContentProviderClient(android.net.Uri)> -> _SOURCE_
<android.content.pm.CrossProfileApps: android.graphics.drawable.Drawable getProfileSwitchingIconDrawable(android.os.UserHandle)> -> _SOURCE_
<android.os.Message: void setData(android.os.Bundle)> -> _SOURCE_
<android.media.AudioPlaybackConfiguration: android.media.PlayerProxy getPlayerProxy()> -> _SOURCE_
<android.app.Activity: android.app.LoaderManager getLoaderManager()> -> _SOURCE_
<android.media.session.MediaSession: void notifyRemoteVolumeChanged(android.media.VolumeProvider)> -> _SOURCE_
<android.util.KeyValueListParser$FloatValue: float getDefaultValue()> -> _SOURCE_
<android.service.notification.ZenModeConfig: void writeXml(org.xmlpull.v1.XmlSerializer,java.lang.Integer)> -> _SOURCE_
<android.renderscript.Mesh: int getVertexAllocationCount()> -> _SOURCE_
<android.hardware.hdmi.HdmiControlManager: void powerOffDevice(android.hardware.hdmi.HdmiDeviceInfo)> -> _SOURCE_
<android.service.notification.StatusBarNotification: android.service.notification.StatusBarNotification cloneLight()> -> _SOURCE_
<java.util.zip.CheckedInputStream: java.util.zip.Checksum getChecksum()> -> _SOURCE_
<android.media.MediaDescription: java.lang.String toString()> -> _SOURCE_
<java.time.ZoneId: java.time.ZoneId systemDefault()> -> _SOURCE_
<com.android.internal.widget.LockscreenCredential: com.android.internal.widget.LockscreenCredential duplicate()> -> _SOURCE_
<android.database.sqlite.SQLiteQueryBuilder: java.util.Collection getProjectionGreylist()> -> _SOURCE_
<java.time.format.DateTimeParseException: java.lang.String getParsedString()> -> _SOURCE_
<android.os.UserManager: boolean isGuestUser(int)> -> _SOURCE_
<android.app.Notification$Action: boolean isContextual()> -> _SOURCE_
<android.app.Activity: void showDialog(int)> -> _SOURCE_
<android.telecom.TelecomManager: boolean endCall()> -> _SOURCE_
<android.security.keystore.KeyInfo: java.lang.String[] getDigests()> -> _SOURCE_
<java.lang.reflect.Array: char getChar(java.lang.Object,int)> -> _SOURCE_
<android.widget.SimpleCursorAdapter: int getStringConversionColumn()> -> _SOURCE_
<java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()> -> _SOURCE_
<android.print.PrintManager: android.graphics.drawable.Icon getCustomPrinterIcon(android.print.PrinterId)> -> _SOURCE_
<android.view.SurfaceControl$DesiredDisplayConfigSpecs: java.lang.String toString()> -> _SOURCE_
<android.content.ContentProvider: android.net.Uri getUriWithoutUserId(android.net.Uri)> -> _SOURCE_
<android.app.job.JobInfo: android.os.PersistableBundle getExtras()> -> _SOURCE_
<android.provider.SearchIndexablesProvider: android.database.Cursor queryDynamicRawData(java.lang.String[])> -> _SOURCE_
<java.util.LinkedList: int size()> -> _SOURCE_
<java.util.Locale: java.lang.String getISO3Language()> -> _SOURCE_
<android.preference.TwoStatePreference: java.lang.CharSequence getSummaryOff()> -> _SOURCE_
<android.app.ApplicationExitInfo: long getRss()> -> _SOURCE_
<android.media.tv.TvRecordingClient$RecordingCallback: void onError(int)> -> _SOURCE_
<android.media.AudioFocusInfo: int getFlags()> -> _SOURCE_
<android.location.GpsMeasurement: int getBitNumber()> -> _SOURCE_
<android.view.textclassifier.TextClassificationManager: android.view.textclassifier.TextClassifier getTextClassifier(int)> -> _SOURCE_
<android.content.ContextWrapper: java.lang.String[] databaseList()> -> _SOURCE_
<android.database.sqlite.SQLiteSession: boolean hasConnection()> -> _SOURCE_
<android.database.sqlite.SQLiteQueryBuilder: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.media.tv.tuner.frontend.IsdbsFrontendSettings: int getType()> -> _SOURCE_
<android.widget.ScrollView: boolean isFillViewport()> -> _SOURCE_
<android.media.browse.MediaBrowser$SubscriptionCallback: void onError(java.lang.String)> -> _SOURCE_
<android.hardware.radio.RadioTuner$Callback: void onParametersUpdated(java.util.Map)> -> _SOURCE_
<android.telephony.CellSignalStrengthCdma: int getEvdoDbm()> -> _SOURCE_
<android.os.storage.StorageManager: boolean isEncrypted()> -> _SOURCE_
<android.net.NetworkPolicyManager: boolean isProcStateAllowedWhileOnRestrictBackground(int)> -> _SOURCE_
<java.net.Inet6Address: java.net.NetworkInterface getScopedInterface()> -> _SOURCE_
<android.util.KeyValueListParser: java.lang.String getString(java.lang.String,java.lang.String)> -> _SOURCE_
<android.preference.MultiSelectListPreference: java.util.Set getValues()> -> _SOURCE_
<android.app.Fragment: android.content.res.Resources getResources()> -> _SOURCE_
<java.lang.invoke.MethodHandles$Lookup: java.lang.invoke.MethodHandle unreflect(java.lang.reflect.Method)> -> _SOURCE_
<android.metrics.LogMaker: int getCategory()> -> _SOURCE_
<android.net.WifiLinkQualityInfo: long getTxBad()> -> _SOURCE_
<android.os.Handler: void handleMessage(android.os.Message)> -> _SOURCE_
<android.media.MediaCodecInfo$VideoCapabilities: android.util.Range getSupportedHeights()> -> _SOURCE_
<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder createRecurringWeekly(java.time.ZonedDateTime)> -> _SOURCE_
<android.service.trust.TrustAgentService: void onEscrowTokenStateReceived(long,int)> -> _SOURCE_
<android.media.tv.tuner.Tuner: java.util.List getFrontendIds()> -> _SOURCE_
<android.telephony.TelephonyManager: java.util.List getDevicePolicyOverrideApns(android.content.Context)> -> _SOURCE_
<android.app.job.JobWorkItem: void bumpDeliveryCount()> -> _SOURCE_
<java.net.CookieManager: java.net.CookieStore getCookieStore()> -> _SOURCE_
<android.os.Environment: java.io.File[] buildExternalStorageAndroidObbDirs()> -> _SOURCE_
<java.security.spec.MGF1ParameterSpec: java.lang.String getDigestAlgorithm()> -> _SOURCE_
<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getApplicationLogo(java.lang.String)> -> _SOURCE_
<android.telephony.ims.stub.ImsCallSessionImplBase: com.android.ims.internal.IImsVideoCallProvider getVideoCallProvider()> -> _SOURCE_
<java.util.jar.Attributes: java.util.Set keySet()> -> _SOURCE_
<android.hardware.face.FaceManager: void enroll(int,byte[],android.os.CancellationSignal,android.hardware.face.FaceManager$EnrollmentCallback,int[])> -> _SOURCE_
<android.content.pm.DataLoaderParams: android.content.pm.DataLoaderParams forStreaming(android.content.ComponentName,java.lang.String)> -> _SOURCE_
<android.os.image.DynamicSystemClient: void start(android.net.Uri,long,long)> -> _SOURCE_
<android.media.tv.tuner.frontend.DvbsCodeRate$Builder: android.media.tv.tuner.frontend.DvbsCodeRate build()> -> _SOURCE_
<java.nio.file.FileSystems: java.nio.file.FileSystem getFileSystem(java.net.URI)> -> _SOURCE_
<android.hardware.Sensor: int getFifoMaxEventCount()> -> _SOURCE_
<android.telephony.mbms.FileInfo: android.net.Uri getUri()> -> _SOURCE_
<android.hardware.input.InputManager: android.hardware.input.KeyboardLayout[] getKeyboardLayouts()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.lang.String[] getLockTaskPackages(android.content.ComponentName)> -> _SOURCE_
<android.content.ContentProvider: java.lang.String getAuthorityWithoutUserId(java.lang.String)> -> _SOURCE_
<android.view.View: int getScrollBarFadeDuration()> -> _SOURCE_
<android.app.WallpaperManager: android.graphics.drawable.Drawable peekDrawable()> -> _SOURCE_
<com.android.internal.telephony.SmsApplication: boolean shouldWriteMessageForPackage(java.lang.String,android.content.Context)> -> _SOURCE_
<android.view.MotionEvent: long getEventTime()> -> _SOURCE_
<android.hardware.camera2.legacy.RequestHolder: long getFrameNumber()> -> _SOURCE_
<android.telephony.data.ApnSetting: int getWaitTime()> -> _SOURCE_
<android.app.Notification$Action$Builder: android.os.Bundle getExtras()> -> _SOURCE_
<android.security.KeyChain: boolean isBoundKeyAlgorithm(java.lang.String)> -> _SOURCE_
<android.net.RouteInfo: boolean isDefaultRoute()> -> _SOURCE_
<android.app.Notification: java.lang.String toString()> -> _SOURCE_
<android.app.WallpaperInfo: java.lang.String toString()> -> _SOURCE_
<android.renderscript.Short3: short length()> -> _SOURCE_
<javax.crypto.KeyAgreement: javax.crypto.KeyAgreement getInstance(java.lang.String,java.security.Provider)> -> _SOURCE_
<android.app.RemoteAction: android.app.PendingIntent getActionIntent()> -> _SOURCE_
<android.net.CaptivePortalData: java.lang.String toString()> -> _SOURCE_
<android.bluetooth.BluetoothSap: int getConnectionPolicy(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<android.telephony.PhoneNumberUtils: java.lang.String cdmaCheckAndProcessPlusCodeForSms(java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.gsm.GsmSmsAddress: boolean isNetworkSpecific()> -> _SOURCE_
<java.time.chrono.Chronology: java.time.chrono.Chronology of(java.lang.String)> -> _SOURCE_
<android.media.soundtrigger.SoundTriggerManager$Model: java.util.UUID getVendorUuid()> -> _SOURCE_
<android.telecom.Connection: boolean getAudioModeIsVoip()> -> _SOURCE_
<java.net.InetAddress: java.lang.String toString()> -> _SOURCE_
<android.content.om.OverlayInfo: java.lang.String getTargetOverlayableName()> -> _SOURCE_
<android.media.effect.EffectFactory: boolean isEffectSupported(java.lang.String)> -> _SOURCE_
<android.content.integrity.AppInstallMetadata: java.lang.String toString()> -> _SOURCE_
<android.hardware.display.DisplayManagerGlobal: android.hardware.display.DisplayManagerGlobal getInstance()> -> _SOURCE_
<android.app.backup.BackupManager: int requestRestore(android.app.backup.RestoreObserver,android.app.backup.BackupManagerMonitor)> -> _SOURCE_
<android.media.tv.TvInputManager: android.os.ParcelFileDescriptor openDvbDevice(android.media.tv.DvbDeviceInfo,int)> -> _SOURCE_
<android.media.tv.tuner.dvr.DvrRecorder: long write(byte[],long,long)> -> _SOURCE_
<android.os.storage.StorageManager: boolean isBlockEncrypting()> -> _SOURCE_
<android.service.autofill.FillResponse: int getFlags()> -> _SOURCE_
<com.android.internal.content.SelectionBuilder: java.lang.String getSelection()> -> _SOURCE_
<java.io.DataInputStream: int readUnsignedByte()> -> _SOURCE_
<android.view.inputmethod.InputMethodInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)> -> _SOURCE_
<android.content.AsyncTaskLoader: boolean isLoadInBackgroundCanceled()> -> _SOURCE_
<android.view.autofill.AutofillManager: java.lang.String getUserDataId()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isFactoryResetProtectionPolicySupported()> -> _SOURCE_
<android.app.admin.DevicePolicyKeyguardService: android.os.IBinder onBind(android.content.Intent)> -> _SOURCE_
<android.webkit.WebViewDelegate: android.app.Application getApplication()> -> _SOURCE_
<com.android.internal.app.procstats.SparseMappingTable: int getIndexFromKey(int)> -> _SOURCE_
<java.net.URLConnection: java.io.OutputStream getOutputStream()> -> _SOURCE_
<com.android.internal.telephony.gsm.SmsBroadcastConfigInfo: java.lang.String toString()> -> _SOURCE_
<java.util.logging.Level: java.lang.String getResourceBundleName()> -> _SOURCE_
<android.app.StatusBarManager$DisableInfo: boolean areAllComponentsEnabled()> -> _SOURCE_
<android.media.AudioSystem: java.lang.String getDeviceName(int)> -> _SOURCE_
<android.app.admin.DeviceAdminReceiver: java.lang.String onChoosePrivateKeyAlias(android.content.Context,android.content.Intent,int,android.net.Uri,java.lang.String)> -> _SOURCE_
<android.view.contentcapture.ContentCaptureEvent: void dump(java.io.PrintWriter)> -> _SOURCE_
<android.hardware.camera2.legacy.CaptureCollector: void failNextPreview()> -> _SOURCE_
<android.telephony.SubscriptionManager: boolean isValidSubscriptionId(int)> -> _SOURCE_
<android.telephony.SignalStrength: int getWcdmaDbm()> -> _SOURCE_
<android.media.AudioPlaybackConfiguration: java.lang.String toString()> -> _SOURCE_
<android.widget.TextView: android.text.InputFilter[] getFilters()> -> _SOURCE_
<org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] getDNSSubjectAlts(java.security.cert.X509Certificate)> -> _SOURCE_
<android.hardware.location.GeofenceHardwareRequest: int getUnknownTimer()> -> _SOURCE_
<javax.net.ssl.SSLEngine: javax.net.ssl.SSLSession getHandshakeSession()> -> _SOURCE_
<com.android.internal.telephony.OperatorInfo: java.lang.String toString()> -> _SOURCE_
<android.view.KeyEvent: int getDisplayId()> -> _SOURCE_
<android.provider.BrowserContract$Bookmarks: android.net.Uri buildFolderUri(long)> -> _SOURCE_
<android.net.http.SslError: android.net.http.SslError SslErrorFromChromiumErrorCode(int,android.net.http.SslCertificate,java.lang.String)> -> _SOURCE_
<android.hardware.display.AmbientBrightnessDayStats: java.time.LocalDate getLocalDate()> -> _SOURCE_
<android.widget.AbsListView: java.lang.CharSequence getTextFilter()> -> _SOURCE_
<android.os.storage.StorageManager: java.util.UUID getUuidForPath(java.io.File)> -> _SOURCE_
<android.media.MediaRouter$UserRouteInfo: void setVolume(int)> -> _SOURCE_
<android.hardware.Camera$Parameters: java.lang.String getSceneMode()> -> _SOURCE_
<android.hardware.HardwareBuffer: long getUsage()> -> _SOURCE_
<android.app.admin.SystemUpdatePolicy: int getPolicyType()> -> _SOURCE_
<android.media.audiofx.AutomaticGainControl: android.media.audiofx.AutomaticGainControl create(int)> -> _SOURCE_
<com.android.ims.internal.uce.presence.PresServiceInfo: int getMediaType()> -> _SOURCE_
<android.telecom.ConnectionService: void connectionServiceFocusReleased()> -> _SOURCE_
<android.os.Parcel: boolean hasReadWriteHelper()> -> _SOURCE_
<android.app.Activity: android.view.autofill.AutofillManager$AutofillClient getAutofillClient()> -> _SOURCE_
<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.lang.String toString()> -> _SOURCE_
<android.app.servertransaction.BaseClientRequest: void preExecute(android.app.ClientTransactionHandler,android.os.IBinder)> -> _SOURCE_
<android.app.PendingIntent: android.app.PendingIntent getActivities(android.content.Context,int,android.content.Intent[],int)> -> _SOURCE_
<android.webkit.WebChromeClient: android.view.View getVideoLoadingProgressView()> -> _SOURCE_
<android.media.MediaCodec: java.nio.ByteBuffer[] getOutputBuffers()> -> _SOURCE_
<android.app.job.JobInfo: int getConstraintFlags()> -> _SOURCE_
<android.content.integrity.AtomicFormula$LongAtomicFormula: boolean isInstallerFormula()> -> _SOURCE_
<android.view.textclassifier.ExtrasUtils: android.content.Intent getActionIntent(android.os.Bundle)> -> _SOURCE_
<android.content.pm.DataLoaderParams: int getType()> -> _SOURCE_
<android.media.tv.TvInputInfo: android.content.ComponentName getComponent()> -> _SOURCE_
<android.bluetooth.BluetoothCodecConfig: boolean isMandatoryCodec()> -> _SOURCE_
<android.app.ActivityOptions: int getLaunchActivityType()> -> _SOURCE_
<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String,java.lang.String)> -> _SOURCE_
<android.telephony.TelephonyManager: void setSimStateForPhone(int,java.lang.String)> -> _SOURCE_
<android.text.PrecomputedText$Params: android.text.TextDirectionHeuristic getTextDirection()> -> _SOURCE_
<android.bluetooth.BluetoothHeadsetClient: java.util.List getCurrentCalls(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<java.text.DateFormat: java.util.Calendar getCalendar()> -> _SOURCE_
<com.android.internal.util.CollectionUtils: java.util.List filter(java.util.List,java.lang.Class)> -> _SOURCE_
<java.security.cert.PKIXBuilderParameters: java.lang.String toString()> -> _SOURCE_
<android.content.ContextWrapper: android.content.pm.ApplicationInfo getApplicationInfo()> -> _SOURCE_
<android.webkit.WebViewFactory: android.webkit.IWebViewUpdateService getUpdateService()> -> _SOURCE_
<android.hardware.camera2.legacy.LegacyCameraDevice: int configureOutputs(android.util.SparseArray)> -> _SOURCE_
<java.security.KeyStore$PasswordProtection: java.security.spec.AlgorithmParameterSpec getProtectionParameters()> -> _SOURCE_
<android.media.AudioPlaybackConfiguration: int getPlayerInterfaceId()> -> _SOURCE_
<android.hardware.SerialManager: android.hardware.SerialPort openSerialPort(java.lang.String,int)> -> _SOURCE_
<android.app.job.JobWorkItem: int getDeliveryCount()> -> _SOURCE_
<android.net.SSLCertificateSocketFactory: byte[] getNpnSelectedProtocol(java.net.Socket)> -> _SOURCE_
<android.content.pm.PackageManager: java.util.List queryContentProviders(java.lang.String,int,int,java.lang.String)> -> _SOURCE_
<android.os.storage.CrateInfo: long getExpirationMillis()> -> _SOURCE_
<android.net.IpSecManager$SecurityParameterIndex: java.lang.String toString()> -> _SOURCE_
<java.lang.Process: boolean isAlive()> -> _SOURCE_
<android.app.PendingIntent: android.app.PendingIntent getActivityAsUser(android.content.Context,int,android.content.Intent,int,android.os.Bundle,android.os.UserHandle)> -> _SOURCE_
<android.bluetooth.le.TruncatedFilter: java.util.List getStorageDescriptors()> -> _SOURCE_
<android.telephony.PhoneCapability: java.lang.String toString()> -> _SOURCE_
<android.media.tv.tuner.frontend.DvbsFrontendSettings: android.media.tv.tuner.frontend.DvbsCodeRate getCodeRate()> -> _SOURCE_
<android.os.Parcel: java.lang.String[] createString16Array()> -> _SOURCE_
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor fromData(byte[],java.lang.String)> -> _SOURCE_
<android.app.Notification$MessagingStyle: java.lang.CharSequence getConversationTitle()> -> _SOURCE_
<java.net.HttpURLConnection: java.lang.String getHeaderFieldKey(int)> -> _SOURCE_
<java.lang.Runtime: int availableProcessors()> -> _SOURCE_
<android.media.MediaPlayer$TrackInfo: int describeContents()> -> _SOURCE_
<android.telephony.ModemInfo: java.lang.String toString()> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: boolean isLeCodedPhySupported()> -> _SOURCE_
<android.mtp.MtpDeviceInfo: int[] getOperationsSupported()> -> _SOURCE_
<android.content.ContentValues: java.lang.String toString()> -> _SOURCE_
<android.app.Notification$Builder: android.widget.RemoteViews createBigContentView()> -> _SOURCE_
<android.service.autofill.augmented.FillRequest: android.view.autofill.AutofillId getFocusedId()> -> _SOURCE_
<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.app.PendingIntent)> -> _SOURCE_
<android.speech.tts.Voice: java.lang.String toString()> -> _SOURCE_
<android.telecom.Connection: java.lang.String propertiesToStringShort(int)> -> _SOURCE_
<android.widget.TableRow: android.widget.TableRow$LayoutParams generateLayoutParams(android.util.AttributeSet)> -> _SOURCE_
<android.content.pm.ShortcutInfo: int getTitleResId()> -> _SOURCE_
<java.util.concurrent.CopyOnWriteArraySet: int size()> -> _SOURCE_
<android.net.util.nsd.DnsSdTxtRecord: java.lang.String get(java.lang.String)> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingScoOn()> -> _SOURCE_
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()> -> _SOURCE_
<android.content.ContentResolver: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)> -> _SOURCE_
<java.lang.Short: java.lang.String toString(short)> -> _SOURCE_
<android.telecom.Voicemail: android.net.Uri getUri()> -> _SOURCE_
<android.app.InstantAppResolverService: android.os.IBinder onBind(android.content.Intent)> -> _SOURCE_
<android.telephony.SubscriptionManager: java.util.List getAvailableSubscriptionInfoList()> -> _SOURCE_
<android.content.ContextWrapper: java.io.File getFileStreamPath(java.lang.String)> -> _SOURCE_
<android.accessibilityservice.AccessibilityService: java.lang.Object getSystemService(java.lang.String)> -> _SOURCE_
<java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()> -> _SOURCE_
<android.util.KeyValueListParser$LongValue: long getValue()> -> _SOURCE_
<android.bluetooth.BluetoothMap: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
<android.content.pm.LabeledIntent: java.lang.String getSourcePackage()> -> _SOURCE_
<android.os.connectivity.WifiBatteryStats: long getLoggingDurationMillis()> -> _SOURCE_
<android.app.ActionBar: void setWindowTitle(java.lang.CharSequence)> -> _SOURCE_
<android.telecom.Call: android.telecom.Call$Details getDetails()> -> _SOURCE_
<android.util.MemoryIntArray: int size()> -> _SOURCE_
<java.lang.Class: java.lang.Object[] getSigners()> -> _SOURCE_
<android.app.ActivityManagerNative: void noteAlarmStart(android.app.PendingIntent,int,java.lang.String)> -> _SOURCE_
<android.mtp.MtpDevice: android.mtp.MtpObjectInfo getObjectInfo(int)> -> _SOURCE_
<android.content.pm.SharedLibraryInfo: java.lang.String getPackageName()> -> _SOURCE_
<com.android.internal.telephony.gsm.SmsMessage: com.android.internal.telephony.gsm.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,java.lang.String,boolean,int)> -> _SOURCE_
<android.media.audiopolicy.AudioPolicy: void invalidateCaptorsAndInjectors()> -> _SOURCE_
<android.hardware.hdmi.HdmiControlManager: void powerOnDevice(android.hardware.hdmi.HdmiDeviceInfo)> -> _SOURCE_
<android.os.PowerManager: boolean isDeviceIdleMode()> -> _SOURCE_
<java.security.cert.X509CRL: void verify(java.security.PublicKey,java.security.Provider)> -> _SOURCE_
<android.app.backup.RestoreSession: int restoreSome(long,android.app.backup.RestoreObserver,android.app.backup.BackupManagerMonitor,java.lang.String[])> -> _SOURCE_
<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder detectUntaggedSockets()> -> _SOURCE_
<android.webkit.URLUtil: boolean isJavaScriptUrl(java.lang.String)> -> _SOURCE_
<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getIssuerX500Principal()> -> _SOURCE_
<android.gesture.Prediction: java.lang.String toString()> -> _SOURCE_
<android.app.admin.SystemUpdatePolicy$ValidationFailedException: android.app.admin.SystemUpdatePolicy$ValidationFailedException freezePeriodTooLong(java.lang.String)> -> _SOURCE_
<android.appwidget.AppWidgetManager: boolean isBoundWidgetPackage(java.lang.String,int)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: android.util.ArrayMap getJobCompletionStats()> -> _SOURCE_
<android.view.ScrollCaptureTarget: android.view.ScrollCaptureCallback getCallback()> -> _SOURCE_
<android.media.MediaRouter2Manager: void registerCallback(java.util.concurrent.Executor,android.media.MediaRouter2Manager$Callback)> -> _SOURCE_
<android.telecom.Conference: android.telecom.CallAudioState getCallAudioState()> -> _SOURCE_
<javax.crypto.spec.SecretKeySpec: java.lang.String getFormat()> -> _SOURCE_
<com.android.internal.telephony.SmsMessageBase: int getIndexOnIcc()> -> _SOURCE_
<android.companion.BluetoothLeDeviceFilter: int getRenameBytesFrom()> -> _SOURCE_
<android.os.UserManager$EnforcingUser: int getUserRestrictionSource()> -> _SOURCE_
<android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildUnionSubQuery(java.lang.String,java.lang.String[],java.util.Set,int,java.lang.String,java.lang.String,java.lang.String[],java.lang.String,java.lang.String)> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing$MbcBand: float getNoiseGateThreshold()> -> _SOURCE_
<android.widget.AbsListView: android.view.View getSelectedView()> -> _SOURCE_
<android.widget.ActionMenuPresenter: boolean hideOverflowMenu()> -> _SOURCE_
<android.hardware.Camera$Parameters: int getInt(java.lang.String)> -> _SOURCE_
<java.util.ResourceBundle$Control: java.util.List getFormats(java.lang.String)> -> _SOURCE_
<android.util.DisplayMetrics: java.lang.String toString()> -> _SOURCE_
<android.text.style.RelativeSizeSpan: int getSpanTypeIdInternal()> -> _SOURCE_
<android.content.pm.ActivityInfo: boolean supportsPictureInPicture()> -> _SOURCE_
<android.media.tv.tuner.frontend.DvbtFrontendSettings: int getHierarchy()> -> _SOURCE_
<android.view.ViewConfiguration: int getHoverTapTimeout()> -> _SOURCE_
<com.android.ims.internal.uce.common.UceLong: com.android.ims.internal.uce.common.UceLong getUceLongInstance()> -> _SOURCE_
<android.app.ApplicationPackageManager: boolean isPermissionRevokedByPolicy(java.lang.String,java.lang.String)> -> _SOURCE_
<android.print.PrinterCapabilitiesInfo: java.util.List getMediaSizes()> -> _SOURCE_
<android.content.rollback.RollbackInfo: java.util.List getPackages()> -> _SOURCE_
<android.app.usage.UsageEvents$Event: java.lang.String getNotificationChannelId()> -> _SOURCE_
<android.media.AudioSystem: int getNumStreamTypes()> -> _SOURCE_
<android.app.admin.SystemUpdatePolicy: android.app.admin.SystemUpdatePolicy restoreFromXml(org.xmlpull.v1.XmlPullParser)> -> _SOURCE_
<android.media.MediaRouter$RouteInfo: android.media.MediaRouter$RouteGroup getGroup()> -> _SOURCE_
<android.content.pm.PackageInfo: long getLongVersionCode()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.lang.String getIncidentReportApproverPackageName()> -> _SOURCE_
<android.app.NotificationChannel: java.lang.String getDescription()> -> _SOURCE_
<android.view.KeyEvent: int getKeyCode()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getPaneTitle()> -> _SOURCE_
<android.telephony.data.ApnSetting: java.lang.String getApnTypesStringFromBitmask(int)> -> _SOURCE_
<android.hardware.face.FaceManager$AuthenticationResult: int getUserId()> -> _SOURCE_
<android.net.UrlQuerySanitizer: android.net.UrlQuerySanitizer$ValueSanitizer getValueSanitizer(java.lang.String)> -> _SOURCE_
<com.android.internal.view.InlineSuggestionsRequestInfo: android.os.Bundle getUiExtras()> -> _SOURCE_
<android.provider.DocumentsContract: boolean isDocumentUri(android.content.Context,android.net.Uri)> -> _SOURCE_
<android.view.Display$HdrCapabilities: float getDesiredMaxLuminance()> -> _SOURCE_
<android.graphics.Matrix: boolean isAffine()> -> _SOURCE_
<android.content.pm.ApplicationInfo: boolean isDefaultToDeviceProtectedStorage()> -> _SOURCE_
<android.app.Notification$WearableExtender: java.lang.String getDismissalId()> -> _SOURCE_
<com.android.internal.telephony.SmsMessageBase$SubmitPduBase: java.lang.String toString()> -> _SOURCE_
<android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)> -> _SOURCE_
<android.media.tv.tunerresourcemanager.TunerFrontendInfo: int getFrontendType()> -> _SOURCE_
<android.hardware.display.DisplayedContentSamplingAttributes: int getComponentMask()> -> _SOURCE_
<com.android.internal.content.PackageMonitor: boolean onPackageChanged(java.lang.String,int,java.lang.String[])> -> _SOURCE_
<android.net.EthernetManager: android.net.IpConfiguration getConfiguration(java.lang.String)> -> _SOURCE_
<android.telecom.RemoteConnection$Callback: void onRemoteRttRequest(android.telecom.RemoteConnection)> -> _SOURCE_
<android.webkit.WebMessage: android.webkit.WebMessagePort[] getPorts()> -> _SOURCE_
<android.widget.ActionMenuView: android.widget.ActionMenuView$LayoutParams generateOverflowButtonLayoutParams()> -> _SOURCE_
<android.telecom.RemoteConference: int getConnectionCapabilities()> -> _SOURCE_
<com.android.internal.util.StateMachine: com.android.internal.util.IState getCurrentState()> -> _SOURCE_
<android.app.AsyncNotedAppOp: long getTime()> -> _SOURCE_
<android.app.backup.BackupTransport: android.app.backup.RestoreSet[] getAvailableRestoreSets()> -> _SOURCE_
<android.permission.PermissionControllerManager: void countPermissionApps(java.util.List,int,android.permission.PermissionControllerManager$OnCountPermissionAppsResultCallback,android.os.Handler)> -> _SOURCE_
<android.os.Parcel: int dataSize()> -> _SOURCE_
<android.drm.DrmInfoRequest: java.util.Iterator iterator()> -> _SOURCE_
<android.content.ContentResolver: android.graphics.drawable.Drawable getTypeDrawable(java.lang.String)> -> _SOURCE_
<android.graphics.drawable.Icon: android.net.Uri getUri()> -> _SOURCE_
<java.lang.reflect.Method: java.lang.String toString()> -> _SOURCE_
<android.content.pm.ActivityInfo: java.lang.String lockTaskLaunchModeToString(int)> -> _SOURCE_
<android.widget.TimePicker: java.lang.Integer getCurrentMinute()> -> _SOURCE_
<java.io.RandomAccessFile: long length()> -> _SOURCE_
<android.net.Uri: java.util.Set getQueryParameterNames()> -> _SOURCE_
<android.os.BasicShellCommandHandler: java.lang.String getNextArgRequired()> -> _SOURCE_
<java.time.LocalDateTime: int getDayOfYear()> -> _SOURCE_
<android.view.inputmethod.InlineSuggestionInfo: java.lang.String toString()> -> _SOURCE_
<android.service.carrier.CarrierMessagingService: void onSendMms(android.net.Uri,int,android.net.Uri,android.service.carrier.CarrierMessagingService$ResultCallback)> -> _SOURCE_
<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentViewDestroyed(android.app.FragmentManager,android.app.Fragment)> -> _SOURCE_
<android.content.pm.PackageInstaller$SessionInfo: android.graphics.Bitmap getAppIcon()> -> _SOURCE_
<android.net.Network: int getNetId()> -> _SOURCE_
<android.hardware.usb.UsbPortStatus: java.lang.String toString()> -> _SOURCE_
<android.animation.AnimatorListenerAdapter: void onAnimationCancel(android.animation.Animator)> -> _SOURCE_
<android.os.VibrationEffect$Waveform: java.lang.String toString()> -> _SOURCE_
<android.media.tv.TvContract: boolean isRecordedProgramUri(android.net.Uri)> -> _SOURCE_
<android.telephony.CellSignalStrengthLte: int getTimingAdvance()> -> _SOURCE_
<android.hardware.radio.RadioTuner$Callback: void onProgramListChanged()> -> _SOURCE_
<android.media.Metadata: java.lang.String getString(int)> -> _SOURCE_
<android.content.pm.ShortcutInfo: int getLongLabelResourceId()> -> _SOURCE_
<android.widget.EditText: void selectAll()> -> _SOURCE_
<android.media.MediaRecorder: android.media.AudioDeviceInfo getPreferredDevice()> -> _SOURCE_
<android.telephony.CellInfoLte: android.telephony.CellConfigLte getCellConfig()> -> _SOURCE_
<android.telephony.emergency.EmergencyNumber: java.lang.String toString()> -> _SOURCE_
<com.android.internal.telephony.SmsApplication: void setDefaultApplication(java.lang.String,android.content.Context)> -> _SOURCE_
<android.location.GnssMeasurement: double getFullInterSignalBiasUncertaintyNanos()> -> _SOURCE_
<android.media.midi.MidiDeviceInfo$PortInfo: int getPortNumber()> -> _SOURCE_
<android.net.NetworkAgent: android.net.Network getNetwork()> -> _SOURCE_
<java.util.Locale: java.lang.String getScript()> -> _SOURCE_
<android.text.method.MetaKeyKeyListener: int getMetaState(long)> -> _SOURCE_
<android.net.http.SslCertificate: android.net.http.SslCertificate restoreState(android.os.Bundle)> -> _SOURCE_
<android.telephony.CellIdentityTdscdma: int getCpid()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: android.os.BatteryStats$Timer getForegroundServiceTimer()> -> _SOURCE_
<android.app.job.JobSnapshot: android.app.job.JobInfo getJobInfo()> -> _SOURCE_
<android.text.format.Time: java.lang.String toString()> -> _SOURCE_
<android.content.ClipDescription: long getTimestamp()> -> _SOURCE_
<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder penaltyDeathOnFileUriExposure()> -> _SOURCE_
<android.hardware.display.DisplayedContentSamplingAttributes: int getPixelFormat()> -> _SOURCE_
<android.app.backup.BackupTransport: long requestBackupTime()> -> _SOURCE_
<android.location.GnssMeasurement: int getAccumulatedDeltaRangeState()> -> _SOURCE_
<android.hardware.camera2.impl.CameraOfflineSessionImpl: android.hardware.camera2.CameraDevice getDevice()> -> _SOURCE_
<android.telecom.AuthenticatorService: android.os.IBinder onBind(android.content.Intent)> -> _SOURCE_
<javax.crypto.MacSpi: java.lang.Object clone()> -> _SOURCE_
<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String,java.security.Provider)> -> _SOURCE_
<android.text.format.DateFormat: java.lang.String getBestDateTimePattern(java.util.Locale,java.lang.String)> -> _SOURCE_
<android.app.admin.DevicePolicyCache: android.app.admin.DevicePolicyCache getInstance()> -> _SOURCE_
<android.service.quicksettings.Tile: java.lang.CharSequence getStateDescription()> -> _SOURCE_
<android.net.metrics.NetworkEvent: void writeToParcel(android.os.Parcel,int)> -> _SOURCE_
<android.view.DisplayAddress$Physical: java.lang.Long getModel()> -> _SOURCE_
<android.telephony.CellIdentity: java.lang.String getGlobalCellId()> -> _SOURCE_
<android.app.WindowConfiguration: boolean keepVisibleDeadAppWindowOnScreen()> -> _SOURCE_
<android.security.AttestedKeyPair: java.util.List getAttestationRecord()> -> _SOURCE_
<android.hardware.fingerprint.FingerprintManager: boolean hasEnrolledTemplates()> -> _SOURCE_
<android.provider.Telephony$Mms: boolean isPhoneNumber(java.lang.String)> -> _SOURCE_
<android.media.MediaCodecInfo$AudioCapabilities: boolean isSampleRateSupported(int)> -> _SOURCE_
<android.media.MediaRouter2$RoutingController: java.lang.String getOriginalId()> -> _SOURCE_
<android.app.FragmentController: android.util.ArrayMap retainLoaderNonConfig()> -> _SOURCE_
<android.app.DownloadManager: android.database.Cursor query(android.app.DownloadManager$Query,java.lang.String[])> -> _SOURCE_
<android.media.AudioDevicePort: int type()> -> _SOURCE_
<com.android.internal.util.StateMachine$LogRec: com.android.internal.util.IState getOriginalState()> -> _SOURCE_
<android.telephony.mbms.MbmsStreamingSessionCallback: void onStreamingServicesUpdated(java.util.List)> -> _SOURCE_
<android.os.incremental.IncrementalStorage: boolean isFileFullyLoaded(java.lang.String)> -> _SOURCE_
<java.lang.StackTraceElement: boolean isNativeMethod()> -> _SOURCE_
<android.provider.Settings$System: void clearProviderForTest()> -> _SOURCE_
<android.util.Pair: java.lang.String toString()> -> _SOURCE_
<android.net.NetworkStats: int[] getUniqueUids()> -> _SOURCE_
<android.content.pm.ShortcutInfo: java.lang.CharSequence getLabel()> -> _SOURCE_
<android.telecom.Connection: android.telecom.StatusHints getStatusHints()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: int getScreenDozeCount(int)> -> _SOURCE_
<android.os.UserManager: long getUserUnlockRealtime()> -> _SOURCE_
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)> -> _SOURCE_
<android.media.ExifInterface: long getDateTimeDigitized()> -> _SOURCE_
<android.app.ApplicationPackageManager: int getPreferredActivities(java.util.List,java.util.List,java.lang.String)> -> _SOURCE_
<com.android.ims.internal.uce.common.CapInfo: boolean isFullSnFGroupChatSupported()> -> _SOURCE_
<android.app.servertransaction.ResumeActivityItem: java.lang.String toString()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getMmsUserAgent()> -> _SOURCE_
<java.util.concurrent.LinkedBlockingDeque: java.lang.Object[] toArray()> -> _SOURCE_
<android.content.pm.ShortcutInfo: java.lang.String getTitleResName()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor queryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.CancellationSignal)> -> _SOURCE_
<android.view.textservice.SpellCheckerInfo: android.content.pm.ServiceInfo getServiceInfo()> -> _SOURCE_
<android.media.session.MediaSessionManager$RemoteUserInfo: int getUid()> -> _SOURCE_
<com.android.internal.os.BatteryStatsHistory: int getHistoryUsedSize()> -> _SOURCE_
<android.location.Location: android.os.Bundle getExtras()> -> _SOURCE_
<android.view.SurfaceControl: boolean getProtectedContentSupport()> -> _SOURCE_
<java.security.cert.PKIXParameters: java.util.Set getTrustAnchors()> -> _SOURCE_
<android.os.BatterySaverPolicyConfig: boolean getEnableFirewall()> -> _SOURCE_
<android.net.NetworkStatsHistory: long getTotalBytes()> -> _SOURCE_
<android.timezone.CountryTimeZones$OffsetResult: java.lang.String toString()> -> _SOURCE_
<java.security.cert.X509CRLSelector: java.lang.Object clone()> -> _SOURCE_
<android.database.CursorWindow: int getInt(int,int)> -> _SOURCE_
<android.media.VolumeShaper$Operation: java.lang.String toString()> -> _SOURCE_
<android.util.LruCache: java.lang.String toString()> -> _SOURCE_
<android.os.BasicShellCommandHandler: java.io.PrintWriter getErrPrintWriter()> -> _SOURCE_
<android.os.Trace: void setCounter(java.lang.String,long)> -> _SOURCE_
<android.os.image.DynamicSystemManager: boolean remove()> -> _SOURCE_
<android.net.lowpan.LowpanProvision: java.lang.String toString()> -> _SOURCE_
<android.telephony.SmsMessage: int getTPLayerLengthForPDU(java.lang.String)> -> _SOURCE_
<android.telephony.ims.stub.ImsEcbmImplBase: void enteredEcbm()> -> _SOURCE_
<android.app.job.JobInfo$TriggerContentUri: android.net.Uri getUri()> -> _SOURCE_
<android.os.Environment: java.lang.String getExternalStorageState()> -> _SOURCE_
<com.android.internal.app.chooser.MultiDisplayResolveInfo: com.android.internal.app.chooser.DisplayResolveInfo getSelectedTarget()> -> _SOURCE_
<android.media.MediaRouter$RouteInfo: int getStatusCode()> -> _SOURCE_
<android.content.res.AssetManager: java.lang.String[] getLocales()> -> _SOURCE_
<java.util.logging.Logger: java.util.logging.Logger getParent()> -> _SOURCE_
<android.text.PrecomputedText: int findParaIndex(int)> -> _SOURCE_
<android.app.ActivityThread: java.lang.String getStringCoreSetting(java.lang.String,java.lang.String)> -> _SOURCE_
<android.service.autofill.SaveInfo: int getNegativeActionStyle()> -> _SOURCE_
<android.util.apk.ApkSignatureSchemeV3Verifier: android.util.apk.ApkSignatureSchemeV3Verifier$VerifiedSigner unsafeGetCertsWithoutVerification(java.lang.String)> -> _SOURCE_
<android.widget.PopupWindow: int getSoftInputMode()> -> _SOURCE_
<android.content.pm.PackageInstaller$SessionInfo: android.net.Uri getReferrerUri()> -> _SOURCE_
<com.android.internal.telephony.cdma.sms.BearerData: com.android.internal.telephony.cdma.sms.BearerData decode(byte[],int)> -> _SOURCE_
<android.provider.SyncStateContract$Helpers: void set(android.content.ContentProviderClient,android.net.Uri,android.accounts.Account,byte[])> -> _SOURCE_
<com.android.internal.os.BatteryStatsHelper: boolean isTypeService(com.android.internal.os.BatterySipper)> -> _SOURCE_
<android.content.pm.PackageParser$Package: boolean isVendor()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isCommonCriteriaModeEnabled(android.content.ComponentName)> -> _SOURCE_
<java.util.regex.Matcher: java.util.regex.Pattern pattern()> -> _SOURCE_
<android.accessibilityservice.AccessibilityService: android.accessibilityservice.AccessibilityService$SoftKeyboardController getSoftKeyboardController()> -> _SOURCE_
<android.bluetooth.le.PeriodicAdvertisingReport: int getTxPower()> -> _SOURCE_
<android.bluetooth.BluetoothHeadset: boolean sendVendorSpecificResultCode(android.bluetooth.BluetoothDevice,java.lang.String,java.lang.String)> -> _SOURCE_
<java.lang.ThreadGroup: int activeCount()> -> _SOURCE_
<java.time.chrono.ThaiBuddhistChronology: java.lang.String getCalendarType()> -> _SOURCE_
<android.accessibilityservice.AccessibilityServiceInfo: int getNonInteractiveUiTimeoutMillis()> -> _SOURCE_
<java.io.PushbackInputStream: void mark(int)> -> _SOURCE_
<java.time.LocalDateTime: java.time.DayOfWeek getDayOfWeek()> -> _SOURCE_
<android.media.tv.tuner.frontend.DvbsCodeRate: int getBitsPer1000Symbol()> -> _SOURCE_
<android.location.GpsMeasurement: boolean hasCarrierPhaseUncertainty()> -> _SOURCE_
<android.telephony.MbmsDownloadSession: java.util.List listPendingDownloads()> -> _SOURCE_
<android.mtp.MtpObjectInfo: java.lang.String getKeywords()> -> _SOURCE_
<com.android.ims.internal.uce.common.CapInfo: boolean isCdViaPresenceSupported()> -> _SOURCE_
<android.widget.TableLayout: boolean isShrinkAllColumns()> -> _SOURCE_
<android.service.notification.ZenPolicy: int getPriorityCategoryMessages()> -> _SOURCE_
<android.security.KeyStore: android.security.keymaster.OperationResult finish(android.os.IBinder,android.security.keymaster.KeymasterArguments,byte[],byte[],byte[])> -> _SOURCE_
<android.os.Debug$MemoryInfo: int getTotalSwappablePss()> -> _SOURCE_
<android.hardware.display.VirtualDisplayConfig: int getDisplayIdToMirror()> -> _SOURCE_
<android.service.notification.NotificationStats: boolean hasDirectReplied()> -> _SOURCE_
<android.telephony.PreciseDataConnectionState: int getDataConnectionApnTypeBitMask()> -> _SOURCE_
<android.media.soundtrigger.SoundTriggerDetector$EventPayload: byte[] getData()> -> _SOURCE_
<android.app.PendingIntent: android.content.IIntentSender getTarget()> -> _SOURCE_
<java.time.LocalDateTime: int getHour()> -> _SOURCE_
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)> -> _SOURCE_
<android.app.backup.BackupAgent: void fullBackupFile(java.io.File,android.app.backup.FullBackupDataOutput)> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing$Channel: android.media.audiofx.DynamicsProcessing$Eq getPostEq()> -> _SOURCE_
<android.content.ContentResolver: java.io.File encodeToFile(android.net.Uri)> -> _SOURCE_
<android.text.style.TtsSpan$TelephoneBuilder: android.text.style.TtsSpan$TelephoneBuilder setNumberParts(java.lang.String)> -> _SOURCE_
<android.telephony.NeighboringCellInfo: int getPsc()> -> _SOURCE_
<android.app.NotificationManager$Policy: android.app.NotificationManager$Policy copy()> -> _SOURCE_
<android.telecom.InCallService: boolean canAddCall()> -> _SOURCE_
<android.location.Location: float getBearing()> -> _SOURCE_
<android.media.AudioRecord: int getAudioFormat()> -> _SOURCE_
<android.telephony.SubscriptionInfo: int getMnc()> -> _SOURCE_
<android.media.AudioManager: android.media.IRingtonePlayer getRingtonePlayer()> -> _SOURCE_
<android.hardware.Camera$Parameters: java.util.List getMeteringAreas()> -> _SOURCE_
<android.graphics.drawable.ColorStateListDrawable: void clearMutated()> -> _SOURCE_
<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getActivityIcon(android.content.ComponentName)> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: java.util.Set getBondedDevices()> -> _SOURCE_
<java.security.cert.CertPathBuilder: java.security.cert.CertPathBuilder getInstance(java.lang.String,java.lang.String)> -> _SOURCE_
<android.text.style.TtsSpan$ElectronicBuilder: android.text.style.TtsSpan$ElectronicBuilder setPort(int)> -> _SOURCE_
<android.widget.DatePicker: boolean getSpinnersShown()> -> _SOURCE_
<android.telephony.euicc.DownloadableSubscription: java.lang.String getCarrierName()> -> _SOURCE_
<android.media.AudioManager: int getDevicesForStream(int)> -> _SOURCE_
<android.telecom.RemoteConnection: java.lang.CharSequence getCallerDisplayName()> -> _SOURCE_
<java.net.Inet6Address: java.lang.String getHostAddress()> -> _SOURCE_
<android.app.ActivityManager: long getTotalRam()> -> _SOURCE_
<android.view.textclassifier.TextLinks$TextLink: java.lang.String getEntity(int)> -> _SOURCE_
<android.telecom.Connection: int getCallerDisplayNamePresentation()> -> _SOURCE_
<android.hardware.usb.UsbDevice$Builder: android.hardware.usb.UsbDevice build(android.hardware.usb.IUsbSerialReader)> -> _SOURCE_
<android.widget.Spinner: int getGravity()> -> _SOURCE_
<android.media.AudioSystem: int getDefaultStreamVolume(int)> -> _SOURCE_
<android.telecom.Phone$Listener: void onCanAddCallChanged(android.telecom.Phone,boolean)> -> _SOURCE_
<android.media.ExifInterface: long getDateTimeOriginal()> -> _SOURCE_
<android.util.Base64: java.lang.String encodeToString(byte[],int)> -> _SOURCE_
<android.telephony.ServiceState: boolean isIwlanPreferred()> -> _SOURCE_
<android.net.Ikev2VpnProfile: java.lang.String encodeForIpsecSecret(byte[])> -> _SOURCE_
<android.app.UiAutomation: int getConnectionId()> -> _SOURCE_
<android.content.pm.PackageInstaller$SessionInfo: int getAutoRevokePermissionsMode()> -> _SOURCE_
<android.app.UiModeManager: int getCurrentModeType()> -> _SOURCE_
<com.android.internal.telephony.uicc.asn1.Asn1Node: int asBits()> -> _SOURCE_
<android.app.Notification: java.lang.String getGroup()> -> _SOURCE_
<android.media.AudioRecordingConfiguration: android.media.AudioDeviceInfo getAudioDevice()> -> _SOURCE_
<android.view.MotionEvent: java.lang.String actionToString(int)> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: int getScanMode()> -> _SOURCE_
<android.hardware.usb.UsbManager: boolean hasPermission(android.hardware.usb.UsbDevice)> -> _SOURCE_
<android.content.UndoOwner: java.lang.Object getData()> -> _SOURCE_
<android.view.textservice.TextServicesManager: android.view.textservice.SpellCheckerInfo[] getEnabledSpellCheckers()> -> _SOURCE_
<android.text.BoringLayout: android.text.BoringLayout$Metrics isBoring(java.lang.CharSequence,android.text.TextPaint,android.text.TextDirectionHeuristic,android.text.BoringLayout$Metrics)> -> _SOURCE_
<android.content.pm.dex.ArtManager: boolean isRuntimeProfilingEnabled(int)> -> _SOURCE_
<java.net.InetAddress: boolean isMCOrgLocal()> -> _SOURCE_
<android.mtp.MtpDevice: java.lang.String getDeviceName()> -> _SOURCE_
<android.graphics.Canvas: int getSaveCount()> -> _SOURCE_
<android.opengl.GLUtils: java.lang.String getEGLErrorString(int)> -> _SOURCE_
<android.telephony.CellIdentityLte: android.telephony.ClosedSubscriberGroupInfo getClosedSubscriberGroupInfo()> -> _SOURCE_
<android.net.ConnectivityDiagnosticsManager$DataStallReport: int getDetectionMethod()> -> _SOURCE_
<android.os.UserManager: boolean hasBaseUserRestriction(java.lang.String,android.os.UserHandle)> -> _SOURCE_
<java.time.ZonedDateTime: int getNano()> -> _SOURCE_
<android.net.RouteInfo: boolean hasGateway()> -> _SOURCE_
<android.app.ActivityManager: java.util.List getAppTasks()> -> _SOURCE_
<java.security.cert.CertificateFactorySpi: java.security.cert.CertPath engineGenerateCertPath(java.util.List)> -> _SOURCE_
<android.view.ViewRootImpl: android.view.SurfaceControl getRenderSurfaceControl()> -> _SOURCE_
<android.media.MediaExtractor$CasInfo: int getSystemId()> -> _SOURCE_
<android.text.style.StyleSpan: int getSpanTypeIdInternal()> -> _SOURCE_
<android.app.assist.AssistStructure$ViewNode: int getAutofillType()> -> _SOURCE_
<java.lang.invoke.MethodHandles$Lookup: java.lang.String toString()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: int getPermissionPolicy(android.content.ComponentName)> -> _SOURCE_
<android.view.textclassifier.TextClassification$Request: android.view.textclassifier.SystemTextClassifierMetadata getSystemTextClassifierMetadata()> -> _SOURCE_
<android.content.Context: android.content.ContentCaptureOptions getContentCaptureOptions()> -> _SOURCE_
<android.transition.TransitionValues: java.lang.String toString()> -> _SOURCE_
<android.widget.LinearLayout: int getGravity()> -> _SOURCE_
<android.net.NetworkInfo: void setDetailedState(android.net.NetworkInfo$DetailedState,java.lang.String,java.lang.String)> -> _SOURCE_
<android.view.textclassifier.TextLanguage$Request: java.lang.String getCallingPackageName()> -> _SOURCE_
<android.media.session.MediaSession: android.media.session.MediaSession$Token getSessionToken()> -> _SOURCE_
<android.bluetooth.BluetoothDevice: int getBondState()> -> _SOURCE_
<android.media.tv.tuner.filter.MmtpFilterConfiguration: int getMmtpPacketId()> -> _SOURCE_
<android.net.ConnectivityManager: boolean requestRouteToHostAddress(int,java.net.InetAddress)> -> _SOURCE_
<android.telephony.ims.ImsCallForwardInfo: int getServiceClass()> -> _SOURCE_
<com.android.internal.telephony.TelephonyPermissions: void enforceCallingOrSelfModifyPermissionOrCarrierPrivilege(android.content.Context,int,java.lang.String)> -> _SOURCE_
<android.media.AudioSystem: java.lang.String streamToString(int)> -> _SOURCE_
<android.widget.TimePicker: int getMinute()> -> _SOURCE_
<com.android.internal.util.FastPrintWriter: void println(char[])> -> _SOURCE_
<android.content.ContextWrapper: android.content.Intent registerReceiverAsUser(android.content.BroadcastReceiver,android.os.UserHandle,android.content.IntentFilter,java.lang.String,android.os.Handler)> -> _SOURCE_
<java.time.format.DateTimeFormatter: java.time.format.DecimalStyle getDecimalStyle()> -> _SOURCE_
<android.view.textclassifier.TextLinks$TextLink: java.lang.String toString()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getPackageName()> -> _SOURCE_
<android.location.GpsClock: double getDriftInNsPerSec()> -> _SOURCE_
<android.telephony.ImsiEncryptionInfo: java.util.Date getExpirationTime()> -> _SOURCE_
<java.nio.charset.CoderResult: boolean isMalformed()> -> _SOURCE_
<android.content.IntentFilter: int countStaticDataTypes()> -> _SOURCE_
<java.net.URLConnection: java.lang.String getContentEncoding()> -> _SOURCE_
<android.telephony.CellIdentityCdma: int getLatitude()> -> _SOURCE_
<android.view.View: android.view.WindowInsets getRootWindowInsets()> -> _SOURCE_
<android.telephony.TelephonyManager: android.telephony.TelephonyManager createForSubscriptionId(int)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: android.os.BatteryStats$LevelStepTracker getDailyDischargeLevelStepTracker()> -> _SOURCE_
<com.android.internal.widget.LockPatternUtils$StrongAuthTracker: boolean isNonStrongBiometricAllowedAfterIdleTimeout(int)> -> _SOURCE_
<java.net.ServerSocket: void setPerformancePreferences(int,int,int)> -> _SOURCE_
<android.graphics.drawable.Icon: byte[] getDataBytes()> -> _SOURCE_
<android.media.AudioManager: boolean isSpeakerphoneOn()> -> _SOURCE_
<android.media.tv.TvInputManager: java.util.List getDvbDeviceList()> -> _SOURCE_
<android.service.euicc.EuiccProfileInfo: boolean hasPolicyRules()> -> _SOURCE_
<com.android.internal.inputmethod.MultiClientInputMethodPrivilegedOperations: boolean isUidAllowedOnDisplay(int,int)> -> _SOURCE_
<android.animation.PathKeyframes: android.animation.Keyframes$IntKeyframes createYIntKeyframes()> -> _SOURCE_
<android.hardware.camera2.legacy.RequestHolder: boolean jpegType(android.view.Surface)> -> _SOURCE_
<android.telephony.euicc.EuiccNotification: int getEvent()> -> _SOURCE_
<android.content.ContentResolver: android.content.IContentProvider acquireUnstableProvider(android.net.Uri)> -> _SOURCE_
<android.telephony.ModemActivityInfo: boolean isValid()> -> _SOURCE_
<java.security.cert.CertPathValidator: java.security.Provider getProvider()> -> _SOURCE_
<android.telecom.CallAudioState: android.bluetooth.BluetoothDevice getActiveBluetoothDevice()> -> _SOURCE_
<android.accessibilityservice.GestureDescription: int getStrokeCount()> -> _SOURCE_
<javax.crypto.Mac: int getMacLength()> -> _SOURCE_
<android.media.audiopolicy.AudioMix: android.media.audiopolicy.AudioMixingRule getRule()> -> _SOURCE_
<android.os.Vibrator: int areAllEffectsSupported(int[])> -> _SOURCE_
<android.content.res.CompatibilityInfo: boolean isScalingRequired()> -> _SOURCE_
<com.android.internal.util.MemInfoReader: long getCachedSize()> -> _SOURCE_
<android.telephony.ims.stub.RcsSipOptionsImplBase: void onRemoteCapabilityRequest(android.net.Uri,android.telephony.ims.RcsContactUceCapability,int)> -> _SOURCE_
<android.content.pm.ShortcutInfo: long getLastChangedTimestamp()> -> _SOURCE_
<android.view.ViewConfiguration: int getLongPressTimeout()> -> _SOURCE_
<android.telecom.PhoneAccount: boolean isEnabled()> -> _SOURCE_
<com.android.internal.os.ProcTimeInStateReader: long[] getUsageTimesMillis(java.nio.file.Path)> -> _SOURCE_
<android.telecom.Connection$RttTextStream: android.os.ParcelFileDescriptor getFdFromInCall()> -> _SOURCE_
<android.content.pm.PackageManager: boolean isPackageSuspended(java.lang.String)> -> _SOURCE_
<android.os.WorkSource: int get(int)> -> _SOURCE_
<android.content.pm.VersionedPackage: long getLongVersionCode()> -> _SOURCE_
<android.database.sqlite.SQLiteQueryBuilder: java.lang.String getTables()> -> _SOURCE_
<java.io.Console: char[] readPassword(java.lang.String,java.lang.Object[])> -> _SOURCE_
<java.net.HttpRetryException: java.lang.String getLocation()> -> _SOURCE_
<org.apache.http.conn.ssl.SSLSocketFactory: boolean isSecure(java.net.Socket)> -> _SOURCE_
<android.os.Debug: java.lang.String getCallers(int,java.lang.String)> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec: java.math.BigInteger getCertificateSerialNumber()> -> _SOURCE_
<java.util.concurrent.CopyOnWriteArrayList: int size()> -> _SOURCE_
<android.telephony.SubscriptionInfo: java.lang.String getNumber()> -> _SOURCE_
<android.media.MediaRouter$UserRouteInfo: android.media.RemoteControlClient getRemoteControlClient()> -> _SOURCE_
<android.location.GnssNavigationMessage: int getSvid()> -> _SOURCE_
<android.app.backup.RestoreObserver: void restoreFinished(int)> -> _SOURCE_
<android.content.pm.Signature: int getFlags()> -> _SOURCE_
<android.widget.SimpleCursorAdapter$CursorToStringConverter: java.lang.CharSequence convertToString(android.database.Cursor)> -> _SOURCE_
<android.app.Notification$BigTextStyle: android.widget.RemoteViews makeHeadsUpContentView(boolean)> -> _SOURCE_
<android.provider.Contacts$People: android.database.Cursor queryGroups(android.content.ContentResolver,long)> -> _SOURCE_
<android.telephony.emergency.EmergencyNumber: java.util.List getEmergencyNumberSources()> -> _SOURCE_
<android.telephony.RadioAccessFamily: int getRadioAccessFamily()> -> _SOURCE_
<android.widget.ListPopupWindow: int getSoftInputMode()> -> _SOURCE_
<android.app.WallpaperManager: android.app.IWallpaperManager getIWallpaperManager()> -> _SOURCE_
<android.telecom.CallScreeningService$CallResponse: boolean getSkipCallLog()> -> _SOURCE_
<android.widget.AutoCompleteTextView: int getInputMethodMode()> -> _SOURCE_
<android.media.VolumeProvider: int getMaxVolume()> -> _SOURCE_
<android.media.tv.TvInputManager: boolean captureFrame(java.lang.String,android.view.Surface,android.media.tv.TvStreamConfig)> -> _SOURCE_
<android.os.UserManager: java.util.List getUserRestrictionSources(java.lang.String,android.os.UserHandle)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg: android.util.ArrayMap getServiceStats()> -> _SOURCE_
<android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)> -> _SOURCE_
<android.telecom.Voicemail: long getId()> -> _SOURCE_
<android.security.NetworkSecurityPolicy: boolean isCleartextTrafficPermitted(java.lang.String)> -> _SOURCE_
<android.app.ApplicationPackageManager: int getIntentVerificationStatusAsUser(java.lang.String,int)> -> _SOURCE_
<android.telephony.TelephonyManager: void setSimOperatorName(java.lang.String)> -> _SOURCE_
<android.util.AtomicFile: void write(java.util.function.Consumer)> -> _SOURCE_
<javax.net.ssl.SSLParameters: java.util.Collection getSNIMatchers()> -> _SOURCE_
<android.provider.Contacts$People: android.net.Uri addToMyContactsGroup(android.content.ContentResolver,long)> -> _SOURCE_
<android.media.AudioTrack: int getPlaybackRate()> -> _SOURCE_
<android.telephony.PhoneNumberUtils: boolean isPotentialEmergencyNumber(java.lang.String,java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.SmsApplication: void broadcastSmsAppChange(android.content.Context,android.os.UserHandle,java.lang.String,java.lang.String)> -> _SOURCE_
<android.content.res.Configuration: java.lang.String localesToResourceQualifier(android.os.LocaleList)> -> _SOURCE_
<android.service.notification.NotificationListenerService$RankingMap: java.lang.String[] getOrderedKeys()> -> _SOURCE_
<android.app.NotificationChannelGroup: java.lang.CharSequence getName()> -> _SOURCE_
<android.media.midi.MidiDeviceStatus: android.media.midi.MidiDeviceInfo getDeviceInfo()> -> _SOURCE_
<android.view.InputDevice$MotionRange: float getResolution()> -> _SOURCE_
<android.mtp.MtpObjectInfo: int getParent()> -> _SOURCE_
<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder syncOnce()> -> _SOURCE_
<android.telephony.CellLocation: void requestLocationUpdate()> -> _SOURCE_
<android.content.Context: android.app.IApplicationThread getIApplicationThread()> -> _SOURCE_
<android.text.format.DateFormat: java.lang.String getTimeFormatString(android.content.Context,int)> -> _SOURCE_
<java.time.Month: int getValue()> -> _SOURCE_
<android.telephony.ServiceState: java.lang.String getOperatorAlphaShortRaw()> -> _SOURCE_
<android.telephony.TelephonyManager: int getSubscriptionId()> -> _SOURCE_
<android.bluetooth.BluetoothMap: int getConnectionState(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<android.content.ContextWrapper: java.util.concurrent.Executor getMainExecutor()> -> _SOURCE_
<java.lang.Integer: int highestOneBit(int)> -> _SOURCE_
<android.telephony.ModemActivityInfo$TransmitPower: int getTimeInMillis()> -> _SOURCE_
<android.app.Instrumentation: android.app.UiAutomation getUiAutomation()> -> _SOURCE_
<android.telephony.ServiceState: int getVoiceRoamingType()> -> _SOURCE_
<java.nio.file.InvalidPathException: int getIndex()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.util.List getInstalledApplicationsAsUser(int,int)> -> _SOURCE_
<android.content.ContentProviderClient: android.content.ContentProvider getLocalContentProvider()> -> _SOURCE_
<android.telephony.SmsCbMessage: android.telephony.SmsCbEtwsInfo getEtwsWarningInfo()> -> _SOURCE_
<java.util.Currency: java.lang.String getDisplayName(java.util.Locale)> -> _SOURCE_
<android.hardware.location.ContextHubInfo: byte getChreApiMinorVersion()> -> _SOURCE_
<android.service.carrier.CarrierIdentifier: int getCarrierId()> -> _SOURCE_
<android.app.Activity: android.view.LayoutInflater getLayoutInflater()> -> _SOURCE_
<android.os.BatterySaverPolicyConfig: boolean getDisableOptionalSensors()> -> _SOURCE_
<android.provider.ContactsContract$RawContacts: android.content.EntityIterator newEntityIterator(android.database.Cursor)> -> _SOURCE_
<android.app.WallpaperColors: java.lang.String toString()> -> _SOURCE_
<android.view.inputmethod.InputMethodManager: int getInputMethodWindowVisibleHeight()> -> _SOURCE_
<android.drm.DrmManagerClient: android.drm.DrmInfo acquireDrmInfo(android.drm.DrmInfoRequest)> -> _SOURCE_
<android.app.usage.UsageStats: long getTotalTimeForegroundServiceUsed()> -> _SOURCE_
<android.telephony.CellSignalStrengthCdma: int getLevel()> -> _SOURCE_
<android.nfc.dta.NfcDta: boolean registerMessageService(java.lang.String)> -> _SOURCE_
<android.telecom.CallerInfo: java.lang.String getName()> -> _SOURCE_
<android.hardware.usb.UsbManager: boolean isFunctionEnabled(java.lang.String)> -> _SOURCE_
<java.lang.ThreadGroup: java.lang.String getName()> -> _SOURCE_
<android.media.AudioPatch: java.lang.String toString()> -> _SOURCE_
<android.transition.TransitionListenerAdapter: void onTransitionCancel(android.transition.Transition)> -> _SOURCE_
<android.media.MediaRouter$RouteInfo: int getDeviceType()> -> _SOURCE_
<android.appwidget.AppWidgetManager: boolean isRequestPinAppWidgetSupported()> -> _SOURCE_
<android.hardware.radio.ProgramList$Filter: java.lang.String toString()> -> _SOURCE_
<android.widget.ImageView: java.lang.Runnable setImageURIAsync(android.net.Uri)> -> _SOURCE_
<android.view.contentcapture.ContentCaptureCondition: android.content.LocusId getLocusId()> -> _SOURCE_
<android.speech.tts.TextToSpeech: java.util.Set getAvailableLanguages()> -> _SOURCE_
<android.telephony.NetworkRegistrationInfo: android.telephony.DataSpecificRegistrationInfo getDataSpecificInfo()> -> _SOURCE_
<android.media.AudioRecordingConfiguration: int getClientUid()> -> _SOURCE_
<android.telecom.PhoneAccountHandle: android.content.ComponentName getComponentName()> -> _SOURCE_
<android.telephony.ims.stub.ImsMultiEndpointImplBase: void requestImsExternalCallStateInfo()> -> _SOURCE_
<android.provider.DocumentsContract: java.lang.String getTreeDocumentId(android.net.Uri)> -> _SOURCE_
<android.media.MediaPlayer: android.media.Metadata getMetadata(boolean,boolean)> -> _SOURCE_
<android.hardware.hdmi.HdmiHotplugEvent: int getPort()> -> _SOURCE_
<android.app.ApplicationPackageManager: android.content.pm.ProviderInfo getProviderInfo(android.content.ComponentName,int)> -> _SOURCE_
<android.app.ActivityOptions: android.view.RemoteAnimationAdapter getRemoteAnimationAdapter()> -> _SOURCE_
<android.webkit.TracingConfig: int getPredefinedCategories()> -> _SOURCE_
<android.location.Criteria: int getSpeedAccuracy()> -> _SOURCE_
<android.telephony.ims.stub.ImsUtImplBase: int updateCOLR(int)> -> _SOURCE_
<android.content.ContentCaptureOptions: java.lang.String toString()> -> _SOURCE_
<android.metrics.LogMaker: boolean isLongCounterBucket()> -> _SOURCE_
<android.nfc.cardemulation.AidGroup: java.lang.String getCategory()> -> _SOURCE_
<android.location.GpsMeasurement: double getTimeOffsetInNs()> -> _SOURCE_
<android.media.MediaCodec$CryptoInfo: java.lang.String toString()> -> _SOURCE_
<android.telephony.TelephonyManager: long getSupportedRadioAccessFamily()> -> _SOURCE_
<com.android.internal.util.DumpUtils: boolean checkDumpPermission(android.content.Context,java.lang.String,java.io.PrintWriter)> -> _SOURCE_
<android.location.LocationProvider: java.lang.String getName()> -> _SOURCE_
<android.telephony.SmsCbCmasInfo: int getUrgency()> -> _SOURCE_
<android.os.BatteryStats: void dumpCheckinLocked(android.content.Context,java.io.PrintWriter,java.util.List,int,long)> -> _SOURCE_
<android.app.backup.SelectBackupTransportCallback: void onSuccess(java.lang.String)> -> _SOURCE_
<android.service.quickaccesswallet.GetWalletCardsResponse: int getSelectedIndex()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.lang.String getDeviceOwner()> -> _SOURCE_
<android.security.keystore.KeyInfo: boolean isUserAuthenticationValidWhileOnBody()> -> _SOURCE_
<android.media.RoutingSessionInfo: java.util.List getDeselectableRoutes()> -> _SOURCE_
<android.bluetooth.BluetoothGattServer: void readPhy(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<android.view.textclassifier.TextClassifierEvent: int getEventCategory()> -> _SOURCE_
<android.widget.BaseExpandableListAdapter: boolean isEmpty()> -> _SOURCE_
<android.text.SpannableStringBuilder: java.lang.String toString()> -> _SOURCE_
<android.renderscript.ProgramStore: android.renderscript.ProgramStore$BlendDstFunc getBlendDstFunc()> -> _SOURCE_
<android.os.CoolingDevice: java.lang.String toString()> -> _SOURCE_
<android.app.WallpaperManager: android.app.WallpaperInfo getWallpaperInfo()> -> _SOURCE_
<javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String,java.lang.String)> -> _SOURCE_
<android.os.VibrationEffect$Composed: java.util.List getPrimitiveEffects()> -> _SOURCE_
<android.content.rollback.PackageRollbackInfo: java.util.ArrayList getPendingRestores()> -> _SOURCE_
<org.apache.http.conn.ssl.SSLSocketFactory: java.net.Socket createSocket()> -> _SOURCE_
<android.content.pm.PackageManager: boolean isPackageStateProtected(java.lang.String,int)> -> _SOURCE_
<android.widget.ScrollBarDrawable: android.graphics.drawable.Drawable getVerticalTrackDrawable()> -> _SOURCE_
<android.app.ActivityManager$RunningAppProcessInfo: int procStateToImportanceForClient(int,android.content.Context)> -> _SOURCE_
<com.android.internal.widget.LockPatternUtils: boolean isQualityNumericPin(int)> -> _SOURCE_
<android.util.LruCache: int putCount()> -> _SOURCE_
<org.apache.http.conn.ssl.BrowserCompatHostnameVerifier: java.lang.String toString()> -> _SOURCE_
<android.bluetooth.le.AdvertiseData: boolean getIncludeDeviceName()> -> _SOURCE_
<com.android.internal.os.LooperStats: java.util.List getEntries()> -> _SOURCE_
<android.telephony.ims.RegistrationManager$RegistrationCallback: android.telephony.ims.aidl.IImsRegistrationCallback getBinder()> -> _SOURCE_
<android.media.MicrophoneInfo: int getGroup()> -> _SOURCE_
<android.hardware.biometrics.BiometricManager: int canAuthenticate()> -> _SOURCE_
<android.database.sqlite.SQLiteGlobal: java.lang.String getDefaultSyncMode()> -> _SOURCE_
<android.os.RevocableFileDescriptor: android.os.ParcelFileDescriptor getRevocableFileDescriptor()> -> _SOURCE_
<android.telecom.CallScreeningService$CallResponse: boolean getSilenceCall()> -> _SOURCE_
<java.util.Calendar$Builder: java.util.Calendar build()> -> _SOURCE_
<android.graphics.HardwareRenderer: void setFPSDivisor(int)> -> _SOURCE_
<android.content.pm.PackageManager: boolean hasSigningCertificate(java.lang.String,byte[],int)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: long getUserTime(int)> -> _SOURCE_
<android.app.Notification: boolean hasCompletedProgress()> -> _SOURCE_
<android.os.Vibrator: int[] areEffectsSupported(int[])> -> _SOURCE_
<android.app.prediction.AppTarget: android.app.prediction.AppTargetId getId()> -> _SOURCE_
<android.app.Notification$MessagingStyle$Message: long getTimestamp()> -> _SOURCE_
<com.android.internal.telephony.CarrierAppUtils: java.util.List getDefaultCarrierAppCandidates(int,android.content.Context)> -> _SOURCE_
<android.view.contentcapture.ViewNode: android.view.autofill.AutofillId getParentAutofillId()> -> _SOURCE_
<android.content.IntentSender: android.os.UserHandle getCreatorUserHandle()> -> _SOURCE_
<android.bluetooth.BluetoothDevice: byte[] getMetadata(int)> -> _SOURCE_
<android.net.PrivateDnsConnectivityChecker: boolean canConnectToPrivateDnsServer(java.lang.String)> -> _SOURCE_
<android.app.Notification$MessagingStyle$Message: android.net.Uri getDataUri()> -> _SOURCE_
<android.telephony.RadioAccessFamily: int getPhoneId()> -> _SOURCE_
<android.content.pm.PackageParserCacheHelper$ReadHelper: java.lang.String readString8(android.os.Parcel)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: android.app.admin.SystemUpdateInfo getPendingSystemUpdate(android.content.ComponentName)> -> _SOURCE_
<com.android.ims.internal.uce.presence.PresResInstanceInfo: java.lang.String getResId()> -> _SOURCE_
<android.hardware.biometrics.BiometricPrompt$AuthenticationResult: android.hardware.biometrics.CryptoObject getCryptoObject()> -> _SOURCE_
<android.media.AudioDeviceInfo: boolean isSink()> -> _SOURCE_
<android.app.NotificationManager$Policy: boolean allowAlarms()> -> _SOURCE_
<android.bluetooth.BluetoothManager: android.bluetooth.BluetoothAdapter getAdapter()> -> _SOURCE_
<android.net.Ikev2VpnProfile: byte[] getPresharedKey()> -> _SOURCE_
<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setMetadata(android.view.SurfaceControl,int,android.os.Parcel)> -> _SOURCE_
<android.telephony.gsm.GsmCellLocation: int getPsc()> -> _SOURCE_
<android.text.format.Time: java.lang.String getCurrentTimezone()> -> _SOURCE_
<android.os.IncidentManager$IncidentReport: void writeToParcel(android.os.Parcel,int)> -> _SOURCE_
<android.content.pm.PackageParser$Package: boolean isOdm()> -> _SOURCE_
<java.security.KeyStore$PasswordProtection: char[] getPassword()> -> _SOURCE_
<com.android.internal.app.WindowDecorActionBar$TabImpl: android.graphics.drawable.Drawable getIcon()> -> _SOURCE_
<android.text.style.ForegroundColorSpan: int getSpanTypeIdInternal()> -> _SOURCE_
<android.media.tv.tuner.frontend.IsdbsFrontendCapabilities: int getCodeRateCapability()> -> _SOURCE_
<android.view.InputDevice: boolean hasButtonUnderPad()> -> _SOURCE_
<android.app.Activity: void onStateNotSaved()> -> _SOURCE_
<android.mtp.MtpObjectInfo: int getThumbFormat()> -> _SOURCE_
<android.os.StrictMode: boolean isBundledSystemApp(android.content.pm.ApplicationInfo)> -> _SOURCE_
<android.renderscript.ProgramStore: android.renderscript.ProgramStore$BlendSrcFunc getBlendSrcFunc()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean needsOtaServiceProvisioning()> -> _SOURCE_
<android.view.textservice.TextInfo: int getCookie()> -> _SOURCE_
<android.util.proto.EncodedBuffer: int getRawVarint32Size(int)> -> _SOURCE_
<android.bluetooth.BluetoothCodecConfig: java.lang.String getCodecName()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo$CollectionInfo: int getSelectionMode()> -> _SOURCE_
<android.os.storage.StorageVolume: boolean allowMassStorage()> -> _SOURCE_
<android.service.quickaccesswallet.WalletCard: android.graphics.drawable.Icon getCardImage()> -> _SOURCE_
<android.telecom.Connection: android.telecom.PhoneAccountHandle getPhoneAccountHandle()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: void writeToParcel(android.os.Parcel,int)> -> _SOURCE_
<android.telephony.DataFailCause: int getFailCause(int)> -> _SOURCE_
<android.telephony.gsm.GsmCellLocation: void setLacAndCid(int,int)> -> _SOURCE_
<android.media.AudioRecord: int getState()> -> _SOURCE_
<android.nfc.tech.NfcA: int getTimeout()> -> _SOURCE_
<android.text.method.DigitsKeyListener: android.text.method.DigitsKeyListener getInstance(java.util.Locale)> -> _SOURCE_
<java.lang.Thread: java.lang.Thread$State getState()> -> _SOURCE_
<android.printservice.PrintServiceInfo: java.lang.String getSettingsActivityName()> -> _SOURCE_
<android.media.soundtrigger.SoundTriggerManager$Model: byte[] getModelData()> -> _SOURCE_
<android.net.ConnectivityManager: android.net.ProxyInfo getGlobalProxy()> -> _SOURCE_
<com.android.internal.util.TokenBucket: boolean get()> -> _SOURCE_
<android.net.metrics.ValidationProbeEvent: void writeToParcel(android.os.Parcel,int)> -> _SOURCE_
<android.content.Intent$ShortcutIconResource: int describeContents()> -> _SOURCE_
<android.companion.BluetoothDeviceFilter$Builder: android.companion.BluetoothDeviceFilter$Builder setNamePattern(java.util.regex.Pattern)> -> _SOURCE_
<java.security.Provider: java.lang.String getName()> -> _SOURCE_
<java.io.File: java.lang.String toString()> -> _SOURCE_
<android.view.View: android.content.res.Resources getResources()> -> _SOURCE_
<android.view.DisplayEventReceiver: void onHotplug(long,long,boolean)> -> _SOURCE_
<android.view.VerifiedKeyEvent: int getKeyCode()> -> _SOURCE_
<android.content.integrity.IntegrityFormula$Application: android.content.integrity.IntegrityFormula versionCodeEquals(long)> -> _SOURCE_
<javax.net.ssl.SSLParameters: java.lang.String[] getProtocols()> -> _SOURCE_
<android.service.dataloader.DataLoaderService$FileSystemConnector: void writeData(java.lang.String,long,long,android.os.ParcelFileDescriptor)> -> _SOURCE_
<android.accounts.Account: java.lang.String toSafeString()> -> _SOURCE_
<android.app.usage.UsageStatsManager: java.util.List queryEventStats(int,long,long)> -> _SOURCE_
<android.text.format.DateFormat: char[] getDateFormatOrder(android.content.Context)> -> _SOURCE_
<android.media.tv.tuner.frontend.AtscFrontendSettings: int getType()> -> _SOURCE_
<android.telephony.DataConnectionRealTimeInfo: java.lang.String toString()> -> _SOURCE_
<android.media.SubtitleData: int getTrackIndex()> -> _SOURCE_
<java.util.jar.JarEntry: java.security.cert.Certificate[] getCertificates()> -> _SOURCE_
<javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)> -> _SOURCE_
<java.net.InetAddress: java.net.InetAddress getByAddress(java.lang.String,byte[])> -> _SOURCE_
<android.bluetooth.BluetoothHeadsetClient: android.os.Bundle getCurrentAgEvents(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<android.net.MobileLinkQualityInfo: int getGsmErrorRate()> -> _SOURCE_
<java.security.spec.ECPublicKeySpec: java.security.spec.ECParameterSpec getParams()> -> _SOURCE_
<android.os.Handler: boolean hasMessagesOrCallbacks()> -> _SOURCE_
<android.graphics.Rect: void printShortString(java.io.PrintWriter)> -> _SOURCE_
<android.location.GnssStatus$Callback: void onFirstFix(int)> -> _SOURCE_
<android.renderscript.Sampler: android.renderscript.Sampler$Value getWrapS()> -> _SOURCE_
<android.app.backup.BackupManager: boolean isAppEligibleForBackup(java.lang.String)> -> _SOURCE_
<com.android.internal.app.ChooserUtil: java.lang.String md5(java.lang.String)> -> _SOURCE_
<android.net.LinkProperties: boolean isIdenticalDhcpServerAddress(android.net.LinkProperties)> -> _SOURCE_
<android.print.PrintJobInfo: android.os.Bundle getAdvancedOptions()> -> _SOURCE_
<android.app.Notification$MessagingStyle: android.widget.RemoteViews makeHeadsUpContentView(boolean)> -> _SOURCE_
<android.app.ActivityOptions: int getLaunchDisplayId()> -> _SOURCE_
<java.lang.Character: int getType(int)> -> _SOURCE_
<android.os.UserManager: void setUserAccount(int,java.lang.String)> -> _SOURCE_
<android.provider.Telephony$Sms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],java.lang.String,java.lang.String)> -> _SOURCE_
<com.android.internal.widget.RecyclerView$LayoutManager: int getMinimumWidth()> -> _SOURCE_
<android.net.MacAddress: byte[] toByteArray()> -> _SOURCE_
<android.content.RestrictionEntry: java.lang.String toString()> -> _SOURCE_
<android.hardware.display.AmbientBrightnessDayStats: java.lang.String toString()> -> _SOURCE_
<android.hardware.camera2.CaptureRequest: int getRequestType()> -> _SOURCE_
<android.telephony.TelephonyManager: android.telephony.TelephonyManager 'from'(android.content.Context)> -> _SOURCE_
<android.net.NetworkStack: void checkNetworkStackPermission(android.content.Context)> -> _SOURCE_
<android.app.AppOpsManager: void startWatchingNoted(int[],android.app.AppOpsManager$OnOpNotedListener)> -> _SOURCE_
<android.security.Credentials: boolean deleteUserKeyTypeForAlias(android.security.KeyStore,java.lang.String)> -> _SOURCE_
<android.app.AppOpsManager: java.lang.String[] getOpStrs()> -> _SOURCE_
<android.telephony.SmsCbCmasInfo: int getResponseType()> -> _SOURCE_
<android.content.RestrictionEntry: int getType()> -> _SOURCE_
<android.telephony.SubscriptionInfo: int getProfileClass()> -> _SOURCE_
<android.os.Debug: java.lang.String getRuntimeStat(java.lang.String)> -> _SOURCE_
<android.telephony.AvailableNetworkInfo: java.util.List getBands()> -> _SOURCE_
<android.app.admin.DeviceAdminReceiver: void onPasswordChanged(android.content.Context,android.content.Intent,android.os.UserHandle)> -> _SOURCE_
<android.service.autofill.SaveInfo: android.view.autofill.AutofillId getTriggerId()> -> _SOURCE_
<android.app.timedetector.ManualTimeSuggestion: java.lang.String toString()> -> _SOURCE_
<android.app.NotificationManager: boolean areBubblesAllowed()> -> _SOURCE_
<javax.security.auth.callback.PasswordCallback: char[] getPassword()> -> _SOURCE_
<android.app.FragmentController: void reportLoaderStart()> -> _SOURCE_
<android.content.ClipData: android.content.ClipData newPlainText(java.lang.CharSequence,java.lang.CharSequence)> -> _SOURCE_
<android.view.KeyEvent: int getSource()> -> _SOURCE_
<java.security.cert.X509CertSelector: boolean getMatchAllSubjectAltNames()> -> _SOURCE_
<java.text.DateFormatSymbols: java.lang.String[] getWeekdays()> -> _SOURCE_
<android.media.tv.TvInputInfo$TvInputSettings: java.util.Set getHiddenTvInputIds(android.content.Context,int)> -> _SOURCE_
<android.widget.RatingBar: float getRating()> -> _SOURCE_
<android.net.RouteInfo: boolean isHostRoute()> -> _SOURCE_
<com.android.internal.app.procstats.AssociationState$SourceKey: java.lang.String toString()> -> _SOURCE_
<android.content.integrity.IntegrityFormula$Application: android.content.integrity.IntegrityFormula versionCodeGreaterThanOrEqualTo(long)> -> _SOURCE_
<android.location.GnssMeasurement: java.lang.String toString()> -> _SOURCE_
<android.app.servertransaction.PendingTransactionActions: boolean shouldRestoreInstanceState()> -> _SOURCE_
<android.bluetooth.le.ScanRecord: int getAdvertiseFlags()> -> _SOURCE_
<android.hardware.usb.UsbManager: android.os.ParcelFileDescriptor openAccessory(android.hardware.usb.UsbAccessory)> -> _SOURCE_
<java.util.logging.LogRecord: java.lang.String getLoggerName()> -> _SOURCE_
<com.android.internal.location.GpsNetInitiatedHandler: boolean getLocationEnabled()> -> _SOURCE_
<android.view.ViewGroup: boolean isMotionEventSplittingEnabled()> -> _SOURCE_
<android.content.pm.PackageManager: java.lang.String getIncidentReportApproverPackageName()> -> _SOURCE_
<android.graphics.fonts.FontFamily: android.graphics.fonts.Font getFont(int)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: boolean isActive()> -> _SOURCE_
<android.media.MediaRecorder: void setAuxiliaryOutputFile(java.io.FileDescriptor)> -> _SOURCE_
<java.util.concurrent.Semaphore: int drainPermits()> -> _SOURCE_
<android.hardware.camera2.params.OutputConfiguration: int getSurfaceGroupId()> -> _SOURCE_
<android.content.Intent: android.content.ClipData getClipData()> -> _SOURCE_
<android.media.tv.TvContract: android.net.Uri buildProgramsUriForChannel(long,long,long)> -> _SOURCE_
<android.nfc.cardemulation.CardEmulation: boolean setDefaultForNextTap(android.content.ComponentName)> -> _SOURCE_
<android.widget.AbsSpinner: android.view.View getSelectedView()> -> _SOURCE_
<android.telephony.SmsCbMessage: java.lang.String getLanguageCode()> -> _SOURCE_
<android.app.Notification$CarExtender$UnreadConversation: android.app.RemoteInput getRemoteInput()> -> _SOURCE_
<android.accessibilityservice.AccessibilityShortcutInfo: java.lang.String toString()> -> _SOURCE_
<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.spi.SelectorProvider provider()> -> _SOURCE_
<android.media.AudioManager: boolean hasRegisteredDynamicPolicy()> -> _SOURCE_
<android.hardware.radio.RadioTuner$Callback: void onBackgroundScanComplete()> -> _SOURCE_
<android.app.prediction.AppPredictionContext: android.os.Bundle getExtras()> -> _SOURCE_
<android.app.NotificationManager$Policy: boolean allowRepeatCallers()> -> _SOURCE_
<android.os.SystemConfigManager: java.util.Map getDisabledUntilUsedPreinstalledCarrierAssociatedApps()> -> _SOURCE_
<javax.net.ssl.HttpsURLConnection: javax.net.ssl.HostnameVerifier getHostnameVerifier()> -> _SOURCE_
<android.webkit.URLUtil: boolean isNetworkUrl(java.lang.String)> -> _SOURCE_
<android.service.autofill.FillResponse: android.service.autofill.UserData getUserData()> -> _SOURCE_
<android.view.contentcapture.ContentCaptureSession: void notifySessionResumed()> -> _SOURCE_
<android.net.ConnectivityManager: int checkMobileProvisioning(int)> -> _SOURCE_
<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)> -> _SOURCE_
<java.io.StreamTokenizer: java.lang.String toString()> -> _SOURCE_
<android.app.backup.BackupDataOutput: int getTransportFlags()> -> _SOURCE_
<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable loadUnbadgedItemIcon(android.content.pm.PackageItemInfo,android.content.pm.ApplicationInfo)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long getWifiStateTime(int,long,int)> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing$Settings: java.lang.String toString()> -> _SOURCE_
<android.location.GnssMeasurementsEvent: java.util.Collection getMeasurements()> -> _SOURCE_
<com.android.internal.telephony.SmsMessageBase: byte[] getPdu()> -> _SOURCE_
<android.view.animation.AnimationSet: java.util.List getAnimations()> -> _SOURCE_
<com.android.internal.widget.LockscreenCredential: boolean isPassword()> -> _SOURCE_
<android.net.NetworkCapabilities$Builder: android.net.NetworkCapabilities build()> -> _SOURCE_
<android.app.NotificationManager: int getImportance()> -> _SOURCE_
<android.view.AppTransitionAnimationSpec: java.lang.String toString()> -> _SOURCE_
<android.security.keystore.KeyInfo: int getKeySize()> -> _SOURCE_
<android.media.tv.tuner.filter.TsRecordEvent: int getPacketId()> -> _SOURCE_
<android.app.servertransaction.NewIntentItem: java.lang.String toString()> -> _SOURCE_
<android.os.BasicShellCommandHandler: java.lang.String getNextOption()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean hasCaCertInstalled(android.content.ComponentName,byte[])> -> _SOURCE_
<android.text.FontConfig$Alias: java.lang.String getToName()> -> _SOURCE_
<android.app.AppOpsManager$PackageOps: java.util.List getOps()> -> _SOURCE_
<android.media.tv.tuner.filter.SectionEvent: int getSectionNumber()> -> _SOURCE_
<java.time.Period: java.time.chrono.IsoChronology getChronology()> -> _SOURCE_
<java.security.cert.PolicyQualifierInfo: byte[] getEncoded()> -> _SOURCE_
<android.os.Parcel: int dataPosition()> -> _SOURCE_
<android.net.RouteInfo: int getType()> -> _SOURCE_
<javax.net.ssl.TrustManagerFactory: void init(javax.net.ssl.ManagerFactoryParameters)> -> _SOURCE_
<android.widget.AdapterView: int getSelectedItemPosition()> -> _SOURCE_
<android.telephony.ServiceState: java.lang.String getDataOperatorNumeric()> -> _SOURCE_
<android.net.lowpan.LowpanCommissioningSession: android.net.lowpan.LowpanBeaconInfo getBeaconInfo()> -> _SOURCE_
<java.security.DigestInputStream: java.security.MessageDigest getMessageDigest()> -> _SOURCE_
<android.app.job.JobInfo: android.app.job.JobInfo$TriggerContentUri[] getTriggerContentUris()> -> _SOURCE_
<android.media.tv.tuner.frontend.DvbtFrontendCapabilities: boolean isMisoSupported()> -> _SOURCE_
<android.net.ConnectivityManager: java.lang.String[] getTetherableIfaces()> -> _SOURCE_
<android.telephony.mbms.UriPathPair: android.net.Uri getFilePathUri()> -> _SOURCE_
<java.util.IllegalFormatPrecisionException: int getPrecision()> -> _SOURCE_
<android.app.Instrumentation$ActivityResult: android.content.Intent getResultData()> -> _SOURCE_
<android.app.AppOpsManager$HistoricalPackageOps: android.app.AppOpsManager$AttributedHistoricalOps getAttributedOpsAt(int)> -> _SOURCE_
<android.media.audiopolicy.AudioPolicy: boolean removeUidDeviceAffinity(int)> -> _SOURCE_
<com.android.internal.telephony.util.TelephonyUtils: boolean checkDumpPermission(android.content.Context,java.lang.String,java.io.PrintWriter)> -> _SOURCE_
<android.net.NetworkRequest: java.lang.String getRequestorPackageName()> -> _SOURCE_
<android.permission.PermissionManager: void grantDefaultPermissionsToEnabledTelephonyDataServices(java.lang.String[],android.os.UserHandle,java.util.concurrent.Executor,java.util.function.Consumer)> -> _SOURCE_
<java.lang.Class: java.lang.String toString()> -> _SOURCE_
<com.android.internal.telephony.TelephonyPermissions: void enforeceCallingOrSelfReadPhoneStatePermissionOrCarrierPrivilege(android.content.Context,int,java.lang.String)> -> _SOURCE_
<com.android.internal.location.ProviderRequest: java.lang.String toString()> -> _SOURCE_
<android.net.MacAddress: byte[] byteAddrFromStringAddr(java.lang.String)> -> _SOURCE_
<android.widget.Switch: android.graphics.drawable.Drawable getThumbDrawable()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isTetheringApnRequired(int)> -> _SOURCE_
<android.telephony.emergency.EmergencyNumber: java.util.List getEmergencyUrns()> -> _SOURCE_
<android.bluetooth.le.PeriodicAdvertisingCallback: void onSyncEstablished(int,android.bluetooth.BluetoothDevice,int,int,int,int)> -> _SOURCE_
<android.media.AudioManager: java.lang.String adjustToString(int)> -> _SOURCE_
<android.telephony.PhoneNumberUtils: boolean isLocalEmergencyNumber(android.content.Context,int,java.lang.String)> -> _SOURCE_
<android.net.LocalSocketAddress: android.net.LocalSocketAddress$Namespace getNamespace()> -> _SOURCE_
<android.telephony.SubscriptionManager: int getAllSubscriptionInfoCount()> -> _SOURCE_
<javax.security.cert.X509Certificate: javax.security.cert.X509Certificate getInstance(byte[])> -> _SOURCE_
<com.android.internal.policy.PhoneWindow: android.transition.Scene getContentScene()> -> _SOURCE_
<java.time.zone.ZoneRulesProvider: java.time.zone.ZoneRules getRules(java.lang.String,boolean)> -> _SOURCE_
<android.widget.PopupMenu: android.widget.ListView getMenuListView()> -> _SOURCE_
<android.media.tv.TvInputService$Session: void onSetMain(boolean)> -> _SOURCE_
<android.content.BroadcastReceiver$PendingResult: int getSendingUserId()> -> _SOURCE_
<android.content.res.TypedArray: boolean hasValueOrEmpty(int)> -> _SOURCE_
<android.app.NotificationManager$Policy: int allowCallsFrom()> -> _SOURCE_
<android.os.Message: long getWhen()> -> _SOURCE_
<android.telephony.PhoneNumberUtils: boolean isInternationalNumber(java.lang.String,java.lang.String)> -> _SOURCE_
<android.security.keymaster.KeyAttestationApplicationId: android.security.keymaster.KeyAttestationPackageInfo[] getAttestationPackageInfos()> -> _SOURCE_
<java.time.Year: java.lang.String toString()> -> _SOURCE_
<android.telephony.SubscriptionManager: android.content.res.Resources getResourcesForSubId(android.content.Context,int)> -> _SOURCE_
<android.media.tv.TvContentRating: java.lang.String getRatingSystem()> -> _SOURCE_
<android.view.contentcapture.ViewNode$ViewStructureImpl: java.lang.CharSequence getText()> -> _SOURCE_
<java.lang.invoke.MethodType: java.lang.String toMethodDescriptorString()> -> _SOURCE_
<android.app.Fragment: java.lang.Object getHost()> -> _SOURCE_
<android.telecom.Log: java.lang.String piiHandle(java.lang.Object)> -> _SOURCE_
<android.graphics.drawable.shapes.ArcShape: float getSweepAngle()> -> _SOURCE_
<android.app.Instrumentation$ActivityMonitor: android.content.IntentFilter getFilter()> -> _SOURCE_
<android.net.ConnectivityManager: java.lang.String getNetworkTypeName(int)> -> _SOURCE_
<com.android.internal.util.TypedProperties: int getInt(java.lang.String)> -> _SOURCE_
<android.app.ApplicationPackageManager: int getInstallReason(java.lang.String,android.os.UserHandle)> -> _SOURCE_
<android.content.pm.PackageManager: java.lang.String deleteStatusToString(int)> -> _SOURCE_
<android.database.CursorWindow: int getStartPosition()> -> _SOURCE_
<java.time.chrono.ChronoZonedDateTime: java.time.chrono.ChronoZonedDateTime minus(java.time.temporal.TemporalAmount)> -> _SOURCE_
<android.widget.SearchView: java.lang.CharSequence getQueryHint()> -> _SOURCE_
<android.media.AudioDeviceInfo: void enforceValidAudioDeviceTypeOut(int)> -> _SOURCE_
<android.media.tv.TvTrackInfo: android.os.Bundle getExtra()> -> _SOURCE_
<android.view.textclassifier.TextSelection: java.lang.String toString()> -> _SOURCE_
<android.view.ContextThemeWrapper: java.lang.Object getSystemService(java.lang.String)> -> _SOURCE_
<android.view.DragEvent: android.content.ClipData getClipData()> -> _SOURCE_
<android.hardware.camera2.CameraMetadata: long getNativeMetadataPtr()> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec: java.lang.String[] getEncryptionPaddings()> -> _SOURCE_
<android.os.Debug: int getGlobalAllocSize()> -> _SOURCE_
<android.animation.PropertyValuesHolder: java.lang.Class getValueType()> -> _SOURCE_
<android.content.pm.LauncherApps: int getShortcutIconResId(android.content.pm.ShortcutInfo)> -> _SOURCE_
<android.content.pm.PackageInstaller$SessionInfo: android.net.Uri getOriginatingUri()> -> _SOURCE_
<android.graphics.drawable.DrawableContainer: int getCurrentIndex()> -> _SOURCE_
<com.android.internal.widget.PasswordValidationError: java.lang.String toString()> -> _SOURCE_
<android.media.MediaRouter$UserRouteInfo: void requestSetVolume(int)> -> _SOURCE_
<java.util.jar.JarFile: java.util.jar.Manifest getManifest()> -> _SOURCE_
<android.hardware.hdmi.HdmiControlServiceWrapper: java.util.List getPortInfo()> -> _SOURCE_
<android.view.ViewConfiguration: long getDefaultActionModeHideDuration()> -> _SOURCE_
<android.widget.ActionMenuView: android.graphics.drawable.Drawable getOverflowIcon()> -> _SOURCE_
<android.app.admin.NetworkEvent: java.lang.String getPackageName()> -> _SOURCE_
<android.net.ConnectivityManager: java.lang.String getCaptivePortalServerUrl()> -> _SOURCE_
<android.content.ContentResolver: android.os.Bundle createSqlQueryBundle(java.lang.String,java.lang.String[],java.lang.String)> -> _SOURCE_
<android.telephony.SubscriptionManager: android.content.res.Resources getResourcesForSubId(android.content.Context,int,boolean)> -> _SOURCE_
<java.util.Calendar: java.lang.String toString()> -> _SOURCE_
<android.telecom.Conference: int getCallerDisplayNamePresentation()> -> _SOURCE_
<android.view.textclassifier.SystemTextClassifierMetadata: boolean useDefaultTextClassifier()> -> _SOURCE_
<android.app.Activity: java.lang.Object getLastNonConfigurationInstance()> -> _SOURCE_
<android.os.Parcel: long getBlobAshmemSize()> -> _SOURCE_
<android.companion.WifiDeviceFilter: java.util.regex.Pattern getNamePattern()> -> _SOURCE_
<android.net.IpSecConfig: void setAuthentication(android.net.IpSecAlgorithm)> -> _SOURCE_
<java.lang.Package: java.lang.String getImplementationTitle()> -> _SOURCE_
<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: int getHoldCount()> -> _SOURCE_
<android.app.NotificationChannel: boolean isImportanceLockedByCriticalDeviceFunction()> -> _SOURCE_
<android.hardware.radio.RadioMetadata: int getInt(java.lang.String)> -> _SOURCE_
<java.time.Year: int get(java.time.temporal.TemporalField)> -> _SOURCE_
<android.graphics.ImageDecoder$AssetInputStreamSource: int getDensity()> -> _SOURCE_
<android.telephony.ServiceState: java.lang.String getOperatorAlpha()> -> _SOURCE_
<android.net.LinkProperties: boolean hasIpv4DefaultRoute()> -> _SOURCE_
<android.webkit.WebMessage: java.lang.String getData()> -> _SOURCE_
<android.location.GnssMeasurement: boolean hasSatelliteInterSignalBiasNanos()> -> _SOURCE_
<android.bluetooth.BluetoothGattCharacteristic: java.util.List getDescriptors()> -> _SOURCE_
<android.view.inputmethod.CursorAnchorInfo: java.lang.CharSequence getComposingText()> -> _SOURCE_
<java.lang.reflect.Method: java.lang.String toGenericString()> -> _SOURCE_
<android.webkit.WebViewClient: android.webkit.WebResourceResponse shouldInterceptRequest(android.webkit.WebView,java.lang.String)> -> _SOURCE_
<android.net.SSLCertificateSocketFactory: void verifyHostname(java.net.Socket,java.lang.String)> -> _SOURCE_
<android.os.StrictMode$VmPolicy: java.lang.String toString()> -> _SOURCE_
<android.telephony.CellIdentityWcdma: int getPsc()> -> _SOURCE_
<android.app.usage.NetworkStatsManager: android.app.usage.NetworkStats queryDetailsForUidTag(int,java.lang.String,long,long,int,int)> -> _SOURCE_
<android.app.ActivityManager: android.util.Size getAppTaskThumbnailSize()> -> _SOURCE_
<android.content.UndoManager: int getUpdateNestingLevel()> -> _SOURCE_
<android.content.integrity.AppIntegrityManager: java.lang.String getCurrentRuleSetProvider()> -> _SOURCE_
<com.android.internal.view.RotationPolicy: boolean isRotationSupported(android.content.Context)> -> _SOURCE_
<android.widget.Chronometer: boolean isTheFinalCountDown()> -> _SOURCE_
<android.net.lowpan.LowpanInterface: android.net.lowpan.LowpanCredential getLowpanCredential()> -> _SOURCE_
<android.provider.Telephony$Mms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],java.lang.String,java.lang.String)> -> _SOURCE_
<android.content.pm.PermissionInfo: java.lang.CharSequence loadDescription(android.content.pm.PackageManager)> -> _SOURCE_
<android.app.usage.UsageStatsManager: java.util.List queryConfigurations(int,long,long)> -> _SOURCE_
<android.telephony.SmsManager: java.util.ArrayList getAllMessagesFromIcc()> -> _SOURCE_
<android.telephony.TelephonyManager: int changeIccLockPassword(java.lang.String,java.lang.String)> -> _SOURCE_
<android.view.accessibility.AccessibilityEvent: java.lang.String toString()> -> _SOURCE_
<android.content.rollback.RollbackManager: void expireRollbackForPackage(java.lang.String)> -> _SOURCE_
<android.content.pm.PackageParser: android.content.pm.PackageParser$ApkLite parseApkLite(java.io.File,int)> -> _SOURCE_
<android.animation.PropertyValuesHolder$PropertyValues: java.lang.String toString()> -> _SOURCE_
<android.app.Activity: android.net.Uri onProvideReferrer()> -> _SOURCE_
<android.app.NotificationManager$Policy: boolean allowMedia()> -> _SOURCE_
<android.view.textservice.SentenceSuggestionsInfo: android.view.textservice.SuggestionsInfo getSuggestionsInfoAt(int)> -> _SOURCE_
<android.os.ProxyFileDescriptorCallback: void onFsync()> -> _SOURCE_
<android.service.carrier.CarrierMessagingService$SendMultipartSmsResult: int[] getMessageRefs()> -> _SOURCE_
<android.telecom.ConnectionService: void onConferenceAdded(android.telecom.Conference)> -> _SOURCE_
<android.hardware.soundtrigger.KeyphraseEnrollmentInfo: java.util.Collection listKeyphraseMetadata()> -> _SOURCE_
<android.content.ContentProviderClient: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)> -> _SOURCE_
<android.preference.RingtonePreference: boolean getShowDefault()> -> _SOURCE_
<com.android.internal.infra.WhitelistHelper: boolean isWhitelisted(android.content.ComponentName)> -> _SOURCE_
<android.app.backup.BackupManager: java.lang.String selectBackupTransport(java.lang.String)> -> _SOURCE_
<android.bluetooth.le.ScanRecord: java.lang.String toString()> -> _SOURCE_
<android.content.pm.ResolveInfo: android.content.pm.ComponentInfo getComponentInfo()> -> _SOURCE_
<com.android.internal.telephony.SmsMessageBase: java.lang.String getServiceCenterAddress()> -> _SOURCE_
<android.app.contentsuggestions.SelectionsRequest: android.os.Bundle getExtras()> -> _SOURCE_
<java.util.Optional: java.util.Optional empty()> -> _SOURCE_
<android.app.backup.BackupManager: void selectBackupTransport(android.content.ComponentName,android.app.backup.SelectBackupTransportCallback)> -> _SOURCE_
<android.nfc.cardemulation.HostNfcFService: android.os.IBinder onBind(android.content.Intent)> -> _SOURCE_
<java.lang.Long: java.lang.String toOctalString(long)> -> _SOURCE_
<android.media.PlayerProxy: void start()> -> _SOURCE_
<android.telecom.AudioState: int getRoute()> -> _SOURCE_
<android.media.MediaExtractor: java.util.List getAudioPresentations(int)> -> _SOURCE_
<android.os.StatFs: long getFreeBlocksLong()> -> _SOURCE_
<android.content.Context: android.os.IBinder getActivityToken()> -> _SOURCE_
<android.telephony.ServiceState: int getLteEarfcnRsrpBoost()> -> _SOURCE_
<android.media.PlaybackParams: float getSpeed()> -> _SOURCE_
<android.renderscript.Allocation: android.renderscript.Allocation$MipmapControl getMipmap()> -> _SOURCE_
<android.telecom.Call$Callback: void onRttModeChanged(android.telecom.Call,int)> -> _SOURCE_
<android.media.tv.tuner.frontend.Atsc3FrontendSettings: int getDemodOutputFormat()> -> _SOURCE_
<android.os.BatterySaverPolicyConfig: boolean getForceBackgroundCheck()> -> _SOURCE_
<com.android.internal.util.DumpUtils: boolean checkUsageStatsPermission(android.content.Context,java.lang.String,java.io.PrintWriter)> -> _SOURCE_
<android.os.StrictMode: android.os.StrictMode$VmPolicy allowVmViolations()> -> _SOURCE_
<java.time.OffsetTime: int getHour()> -> _SOURCE_
<android.os.Parcel: java.lang.String readString8NoHelper()> -> _SOURCE_
<javax.crypto.spec.OAEPParameterSpec: java.lang.String getMGFAlgorithm()> -> _SOURCE_
<android.location.GnssClock: double getBiasUncertaintyNanos()> -> _SOURCE_
<android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityWindowInfo getWindow(int,int)> -> _SOURCE_
<android.location.GnssClock: double getTimeUncertaintyNanos()> -> _SOURCE_
<android.view.contentcapture.ContentCaptureContext: android.content.LocusId getLocusId()> -> _SOURCE_
<android.service.voice.AlwaysOnHotwordDetector$EventPayload: byte[] getTriggerAudio()> -> _SOURCE_
<android.telephony.SmsCbMessage: android.content.ContentValues getContentValues()> -> _SOURCE_
<android.media.tv.tuner.frontend.FrontendInfo: android.util.Range getSymbolRateRange()> -> _SOURCE_
<android.printservice.PrintServiceInfo: java.lang.String toString()> -> _SOURCE_
<android.service.autofill.SaveCallback: void onFailure(java.lang.CharSequence)> -> _SOURCE_
<android.net.wifi.nl80211.PnoSettings: java.util.List getPnoNetworks()> -> _SOURCE_
<android.net.http.SslCertificate: java.lang.String getValidNotAfter()> -> _SOURCE_
<android.bluetooth.BluetoothCodecConfig: int getCodecType()> -> _SOURCE_
<android.webkit.CacheManager$CacheResult: java.lang.String getETag()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: java.lang.String getStartPlatformVersion()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: int getStorageEncryptionStatus(int)> -> _SOURCE_
<android.net.ConnectivityDiagnosticsManager$DataStallReport: android.os.PersistableBundle getStallDetails()> -> _SOURCE_
<android.hardware.Camera$Parameters: int getExposureCompensation()> -> _SOURCE_
<android.service.notification.NotificationListenerService$Ranking: java.util.List getAdditionalPeople()> -> _SOURCE_
<android.content.IntentFilter: int matchDataAuthority(android.net.Uri)> -> _SOURCE_
<android.hardware.usb.UsbDeviceConnection: boolean resetDevice()> -> _SOURCE_
<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy$Builder detectNetwork()> -> _SOURCE_
<android.app.ActivityTransitionCoordinator$ContinueTransitionListener: void onTransitionEnd(android.transition.Transition)> -> _SOURCE_
<android.app.role.RoleControllerService: void onDestroy()> -> _SOURCE_
<android.location.Country: long getTimestamp()> -> _SOURCE_
<android.service.contentcapture.SnapshotData: android.app.assist.AssistStructure getAssistStructure()> -> _SOURCE_
<android.graphics.BlendMode: android.graphics.Xfermode getXfermode()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase$OpenParams: java.lang.String getSynchronousMode()> -> _SOURCE_
<android.os.Environment: java.io.File[] buildExternalStorageAppCacheDirs(java.lang.String)> -> _SOURCE_
<android.net.LinkProperties: boolean isIpv6Provisioned()> -> _SOURCE_
<android.widget.SearchView: boolean isIconfiedByDefault()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String iccTransmitApduLogicalChannel(int,int,int,int,int,int,java.lang.String)> -> _SOURCE_
<android.content.IntentFilter: java.util.Iterator categoriesIterator()> -> _SOURCE_
<android.text.style.TtsSpan: int getSpanTypeIdInternal()> -> _SOURCE_
<android.hardware.location.NanoApp: java.lang.String getPublisher()> -> _SOURCE_
<android.util.PackageUtils: java.lang.String computeSignaturesSha256Digest(java.lang.String[])> -> _SOURCE_
<android.timezone.TzDataSetVersion: int getFormatMinorVersion()> -> _SOURCE_
<java.text.DateFormat$Field: int getCalendarField()> -> _SOURCE_
<com.android.internal.os.BinderCallsStats$UidEntry: java.lang.String toString()> -> _SOURCE_
<java.time.temporal.TemporalQueries: java.time.temporal.TemporalQuery zoneId()> -> _SOURCE_
<android.content.res.AssetManager: int findCookieForPath(java.lang.String)> -> _SOURCE_
<android.animation.AnimatorListenerAdapter: void onAnimationEnd(android.animation.Animator)> -> _SOURCE_
<android.net.MailTo: java.lang.String getTo()> -> _SOURCE_
<android.app.timezonedetector.TelephonyTimeZoneSuggestion: void addDebugInfo(java.util.List)> -> _SOURCE_
<android.hardware.usb.UsbAccessory: java.lang.String toString()> -> _SOURCE_
<android.media.tv.tuner.frontend.DvbtFrontendSettings: int getTransmissionMode()> -> _SOURCE_
<android.location.GnssMeasurementCorrections: boolean hasEnvironmentBearing()> -> _SOURCE_
<android.media.AudioMixPort: int ioHandle()> -> _SOURCE_
<android.os.UserManager: android.graphics.Bitmap getUserIcon()> -> _SOURCE_
<android.content.pm.ShortcutInfo: int getTextResId()> -> _SOURCE_
<java.text.DecimalFormatSymbols: char getPercent()> -> _SOURCE_
<android.media.tv.tuner.filter.MediaEvent: boolean isSecureMemory()> -> _SOURCE_
<android.app.Dialog: boolean onMenuItemSelected(int,android.view.MenuItem)> -> _SOURCE_
<android.hardware.usb.UsbEndpoint: int getDirection()> -> _SOURCE_
<android.view.contentcapture.ViewNode: boolean isCheckable()> -> _SOURCE_
<android.telephony.ServiceState: boolean getDataRoamingFromRegistration()> -> _SOURCE_
<android.hardware.usb.UsbRequest: android.hardware.usb.UsbEndpoint getEndpoint()> -> _SOURCE_
<android.widget.TextView: void onActivityResult(int,int,android.content.Intent)> -> _SOURCE_
<android.hardware.camera2.CameraCharacteristics$Key: java.lang.String getName()> -> _SOURCE_
<com.android.internal.widget.LockPatternUtils: boolean isTrustAllowedForUser(int)> -> _SOURCE_
<android.content.res.Resources$Theme: android.content.res.Resources$ThemeKey getKey()> -> _SOURCE_
<android.telecom.PhoneAccount: int getHighlightColor()> -> _SOURCE_
<android.view.View: java.lang.String[] getAutofillHints()> -> _SOURCE_
<android.service.autofill.UserData: android.util.ArrayMap getFieldClassificationAlgorithms()> -> _SOURCE_
<android.app.DownloadManager: java.lang.Long getRecommendedMaxBytesOverMobile(android.content.Context)> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: java.lang.String toString()> -> _SOURCE_
<android.net.NetworkStats: android.net.NetworkStats insertEntry(java.lang.String,long,long,long,long)> -> _SOURCE_
<android.os.SystemVibrator: boolean isVibrating()> -> _SOURCE_
<android.telephony.mbms.ServiceInfo: java.util.Set getNamedContentLocales()> -> _SOURCE_
<android.printservice.PrintJob: boolean isCancelled()> -> _SOURCE_
<android.telephony.SubscriptionManager: int[] getActiveSubscriptionIdList()> -> _SOURCE_
<android.os.storage.StorageVolume: java.io.File getDirectory()> -> _SOURCE_
<android.text.format.Formatter: java.lang.String formatIpAddress(int)> -> _SOURCE_
<android.telephony.ims.stub.ImsCallSessionImplBase: void transfer(java.lang.String,boolean)> -> _SOURCE_
<android.bluetooth.BluetoothGattDescriptor: android.bluetooth.BluetoothGattCharacteristic getCharacteristic()> -> _SOURCE_
<android.app.timezonedetector.TelephonyTimeZoneSuggestion: java.lang.String toString()> -> _SOURCE_
<android.animation.Keyframe: java.lang.Class getType()> -> _SOURCE_
<android.os.Bundle: char getChar(java.lang.String,char)> -> _SOURCE_
<android.mtp.MtpDeviceInfo: java.lang.String getModel()> -> _SOURCE_
<android.service.autofill.FillEventHistory$Event: java.lang.String getDatasetId()> -> _SOURCE_
<android.app.KeyguardManager: boolean isKeyguardLocked()> -> _SOURCE_
<android.content.IntentFilter: java.util.List dataTypes()> -> _SOURCE_
<android.content.pm.PackageManager: void uncorkPackageInfoCache()> -> _SOURCE_
<android.hardware.soundtrigger.SoundTrigger$GenericSoundModel: java.lang.String toString()> -> _SOURCE_
<android.drm.DrmInfoRequest: java.util.Iterator keyIterator()> -> _SOURCE_
<android.os.UserManager: boolean isGuestUser()> -> _SOURCE_
<java.nio.Buffer: int capacity()> -> _SOURCE_
<android.preference.DialogPreference: int getDialogLayoutResource()> -> _SOURCE_
<android.service.oemlock.OemLockManager: boolean isOemUnlockAllowedByCarrier()> -> _SOURCE_
<android.location.Criteria: void setVerticalAccuracy(int)> -> _SOURCE_
<android.view.textclassifier.TextSelection: java.lang.String getEntity(int)> -> _SOURCE_
<com.android.internal.infra.RemoteStream: com.android.internal.infra.AndroidFuture receiveBytes(com.android.internal.util.FunctionalUtils$ThrowingConsumer,com.android.internal.util.FunctionalUtils$ThrowingFunction)> -> _SOURCE_
<android.telephony.PreciseDataConnectionState: java.lang.String getDataConnectionApn()> -> _SOURCE_
<java.security.Provider$Service: java.lang.String getAttribute(java.lang.String)> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isVoicemailVibrationEnabled(android.telecom.PhoneAccountHandle)> -> _SOURCE_
<java.security.Provider: double getVersion()> -> _SOURCE_
<android.view.textclassifier.ConversationActions$Request: java.util.List getConversation()> -> _SOURCE_
<android.app.ActivityManager: java.util.List getBugreportWhitelistedPackages()> -> _SOURCE_
<android.app.NotificationManager: android.service.notification.ZenModeConfig getZenModeConfig()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getEsn(int)> -> _SOURCE_
<android.media.AudioManager: java.util.Map getReportedSurroundFormats()> -> _SOURCE_
<java.time.ZonedDateTime: java.time.LocalDateTime toLocalDateTime()> -> _SOURCE_
<android.companion.AssociationRequest: java.util.List getDeviceFilters()> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing$Config: boolean isLimiterInUse()> -> _SOURCE_
<android.app.ActivityManager$RecentTaskInfo: void dump(java.io.PrintWriter,java.lang.String)> -> _SOURCE_
<java.lang.reflect.Field: java.lang.String getName()> -> _SOURCE_
<android.net.wifi.nl80211.DeviceWiphyCapabilities: java.lang.String toString()> -> _SOURCE_
<android.view.View$MeasureSpec: java.lang.String toString(int)> -> _SOURCE_
<javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String,java.lang.String)> -> _SOURCE_
<com.android.internal.os.CachedDeviceState$TimeInStateStopwatch: long getMillis()> -> _SOURCE_
<java.util.IllegalFormatConversionException: java.lang.String getMessage()> -> _SOURCE_
<com.android.internal.app.BlockedAppActivity: android.content.Intent createIntent(int,java.lang.String)> -> _SOURCE_
<android.content.pm.LauncherActivityInfo: android.os.UserHandle getUser()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long getUahDischargeLightDoze(int)> -> _SOURCE_
<android.widget.Spinner: java.lang.CharSequence getPrompt()> -> _SOURCE_
<android.telephony.gsm.GsmCellLocation: void fillInNotifierBundle(android.os.Bundle)> -> _SOURCE_
<android.bluetooth.BluetoothServerSocket: int getChannel()> -> _SOURCE_
<com.android.internal.accessibility.util.AccessibilityUtils: boolean isUserSetupCompleted(android.content.Context)> -> _SOURCE_
<android.telephony.CellIdentityLte: int getMcc()> -> _SOURCE_
<android.widget.ListPopupWindow: void postShow()> -> _SOURCE_
<javax.net.ssl.SSLEngine: java.lang.String getPeerHost()> -> _SOURCE_
<android.telecom.PhoneAccountSuggestion: boolean shouldAutoSelect()> -> _SOURCE_
<android.content.ContentResolver: java.util.List getCurrentSyncs()> -> _SOURCE_
<android.util.NtpTrustedTime: long getCachedNtpTime()> -> _SOURCE_
<android.content.pm.SigningInfo: android.content.pm.Signature[] getSigningCertificateHistory()> -> _SOURCE_
<android.provider.VoicemailContract$Voicemails: int deleteAll(android.content.Context)> -> _SOURCE_
<android.app.backup.BackupManager: android.content.Intent getDataManagementIntent(java.lang.String)> -> _SOURCE_
<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodClient getClient()> -> _SOURCE_
<org.xml.sax.InputSource: java.lang.String getEncoding()> -> _SOURCE_
<android.view.WindowInsetsAnimation: int getTypeMask()> -> _SOURCE_
<android.view.textclassifier.ConversationActions$Message: android.app.Person getAuthor()> -> _SOURCE_
<android.os.Handler: java.lang.String toString()> -> _SOURCE_
<android.companion.AssociationRequest: java.lang.String toString()> -> _SOURCE_
<android.app.SyncNotedAppOp: java.lang.String getAttributionTag()> -> _SOURCE_
<android.content.ContextWrapper: java.io.File getCrateDir(java.lang.String)> -> _SOURCE_
<android.content.rollback.RollbackManager: void reloadPersistedData()> -> _SOURCE_
<java.time.format.DateTimeFormatterBuilder: java.lang.String getLocalizedDateTimePattern(java.time.format.FormatStyle,java.time.format.FormatStyle,java.time.chrono.Chronology,java.util.Locale)> -> _SOURCE_
<android.media.MediaCodecInfo$VideoCapabilities: android.util.Range getBitrateRange()> -> _SOURCE_
<android.content.integrity.AppInstallMetadata: java.lang.String getStampCertificateHash()> -> _SOURCE_
<android.telecom.ParcelableCall: android.telecom.ParcelableRttCall getParcelableRttCall()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean modifyDevicePolicyOverrideApn(android.content.Context,int,android.telephony.data.ApnSetting)> -> _SOURCE_
<java.time.Period: int getDays()> -> _SOURCE_
<android.graphics.drawable.BitmapDrawable: void setXfermode(android.graphics.Xfermode)> -> _SOURCE_
<com.android.internal.telephony.SmsAddress: boolean isAlphanumeric()> -> _SOURCE_
<android.content.SyncAdapterType: java.lang.String getSettingsActivity()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean enableDataConnectivity()> -> _SOURCE_
<android.service.notification.NotificationListenerService$Ranking: boolean canShowBadge()> -> _SOURCE_
<java.util.Hashtable: int size()> -> _SOURCE_
<java.time.chrono.ChronoLocalDate: java.time.chrono.ChronoLocalDate 'with'(java.time.temporal.TemporalField,long)> -> _SOURCE_
<java.nio.file.FileSystemException: java.lang.String getFile()> -> _SOURCE_
<android.media.AudioPlaybackCaptureConfiguration: int[] getMatchingUsages()> -> _SOURCE_
<android.telephony.CellIdentityTdscdma: java.lang.String getMobileNetworkOperator()> -> _SOURCE_
<java.security.Timestamp: java.lang.String toString()> -> _SOURCE_
<android.telephony.SubscriptionManager: void setSubscriptionProperty(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.widget.TextView: android.os.LocaleList getImeHintLocales()> -> _SOURCE_
<android.media.session.MediaSession$QueueItem: java.lang.String toString()> -> _SOURCE_
<android.net.NetworkTemplate: android.net.NetworkTemplate buildTemplateWifiWildcard()> -> _SOURCE_
<com.android.internal.telephony.cdma.SmsMessage: com.android.internal.telephony.cdma.SmsMessage$SubmitPdu getDeliverPdu(java.lang.String,java.lang.String,long)> -> _SOURCE_
<android.service.chooser.ChooserTarget: java.lang.String toString()> -> _SOURCE_
<android.service.carrier.CarrierMessagingService$SendMmsResult: int getSendStatus()> -> _SOURCE_
<android.companion.BluetoothLeDeviceFilter: java.lang.String getRenameSuffix()> -> _SOURCE_
<android.security.keystore.KeyInfo: int getOrigin()> -> _SOURCE_
<android.preference.Preference: java.lang.String getKey()> -> _SOURCE_
<android.nfc.NfcAdapter: android.nfc.INfcAdapter getService()> -> _SOURCE_
<com.android.ims.internal.uce.presence.PresRlmiInfo: java.lang.String getListName()> -> _SOURCE_
<android.nfc.NdefRecord: byte[] getPayload()> -> _SOURCE_
<android.telephony.CellIdentityNr: int getNrarfcn()> -> _SOURCE_
<android.location.GpsMeasurement: double getElevationInDeg()> -> _SOURCE_
<android.app.ApplicationPackageManager: byte[] getInstantAppCookie()> -> _SOURCE_
<android.location.GpsClock: double getBiasInNs()> -> _SOURCE_
<android.app.admin.PasswordMetrics: int sanitizeComplexityLevel(int)> -> _SOURCE_
<android.graphics.Shader: long getNativeInstance()> -> _SOURCE_
<android.database.AbstractWindowedCursor: byte[] getBlob(int)> -> _SOURCE_
<java.util.Locale: java.lang.String[] getISOCountries()> -> _SOURCE_
<android.media.tv.tuner.dvr.DvrRecorder: int flush()> -> _SOURCE_
<android.content.pm.ShortcutManager: java.util.List getShareTargets(android.content.IntentFilter)> -> _SOURCE_
<android.media.AudioTrack: android.os.PersistableBundle getMetrics()> -> _SOURCE_
<android.location.GnssMeasurement: boolean hasBasebandCn0DbHz()> -> _SOURCE_
<java.util.Formatter: java.io.IOException ioException()> -> _SOURCE_
<android.app.AsyncNotedAppOp: int getNotingUid()> -> _SOURCE_
<android.bluetooth.le.PeriodicAdvertisingReport: long getTimestampNanos()> -> _SOURCE_
<android.telephony.PhoneNumberUtils: boolean isVoiceMailNumber(java.lang.String)> -> _SOURCE_
<android.os.Environment: java.io.File getDataSystemCeDirectory()> -> _SOURCE_
<android.speech.tts.SynthesisRequest: java.lang.String getCountry()> -> _SOURCE_
<android.timezone.TzDataSetVersion: android.timezone.TzDataSetVersion read()> -> _SOURCE_
<android.content.pm.PackageManager: java.lang.String deleteStatusToString(int,java.lang.String)> -> _SOURCE_
<android.service.controls.Control$StatefulBuilder: android.service.controls.Control$StatefulBuilder setDeviceType(int)> -> _SOURCE_
<android.view.autofill.AutofillManager: java.util.List getAvailableFieldClassificationAlgorithms()> -> _SOURCE_
<android.content.pm.LauncherApps: java.util.List getActivityList(java.lang.String,android.os.UserHandle)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String iccTransmitApduBasicChannelBySlot(int,int,int,int,int,int,java.lang.String)> -> _SOURCE_
<android.telecom.VideoProfile: int getVideoState()> -> _SOURCE_
<android.bluetooth.le.ScanCallback: void onScanFailed(int)> -> _SOURCE_
<java.util.Locale: java.util.Set getExtensionKeys()> -> _SOURCE_
<android.telephony.SubscriptionManager: int getDefaultDataSubscriptionId()> -> _SOURCE_
<android.os.BatteryManager: boolean isCharging()> -> _SOURCE_
<android.graphics.drawable.LayerDrawable: int getNumberOfLayers()> -> _SOURCE_
<android.widget.TextView: java.util.Locale getTextLocale()> -> _SOURCE_
<android.content.pm.LabeledIntent: java.lang.CharSequence getNonLocalizedLabel()> -> _SOURCE_
<android.app.ActivityTaskManager: android.app.IActivityTaskManager getService()> -> _SOURCE_
<android.service.carrier.CarrierIdentifier: java.lang.String getGid1()> -> _SOURCE_
<android.telephony.TelephonyManager: void toggleRadioOnOff()> -> _SOURCE_
<android.net.NetworkUtils: java.net.InetAddress numericToInetAddress(java.lang.String)> -> _SOURCE_
<android.view.textclassifier.ExtrasUtils: java.util.ArrayList getActionsIntents(android.view.textclassifier.TextClassification)> -> _SOURCE_
<java.time.Period: java.time.Period ofYears(int)> -> _SOURCE_
<android.view.accessibility.AccessibilityEvent: void writeToParcel(android.os.Parcel,int)> -> _SOURCE_
<android.app.usage.UsageEvents$Event: java.lang.String getClassName()> -> _SOURCE_
<android.app.ApplicationPackageManager: int movePackage(java.lang.String,android.os.storage.VolumeInfo)> -> _SOURCE_
<java.io.DataOutputStream: int size()> -> _SOURCE_
<android.content.Loader: boolean isAbandoned()> -> _SOURCE_
<android.location.GpsNavigationMessage: java.lang.String toString()> -> _SOURCE_
<android.app.RemoteInput$Builder: android.app.RemoteInput$Builder setChoices(java.lang.CharSequence[])> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.lang.CharSequence getShortSupportMessageForUser(android.content.ComponentName,int)> -> _SOURCE_
<javax.security.auth.Subject: java.util.Set getPublicCredentials()> -> _SOURCE_
<com.android.internal.widget.LockPatternUtils: java.lang.String legacyPasswordToHash(byte[],int)> -> _SOURCE_
<android.companion.BluetoothLeDeviceFilter: int getRenameBytesLength()> -> _SOURCE_
<android.widget.Scroller: int getCurrX()> -> _SOURCE_
<android.app.AppOpsManager$PackageOps: java.lang.String getPackageName()> -> _SOURCE_
<android.webkit.CookieManager: android.webkit.CookieManager getInstance()> -> _SOURCE_
<android.hardware.biometrics.BiometricAuthenticator$AuthenticationResult: android.hardware.biometrics.BiometricAuthenticator$Identifier getId()> -> _SOURCE_
<android.security.identity.AccessControlProfileId: int getId()> -> _SOURCE_
<android.os.IncidentManager$PendingReport: long getTimestamp()> -> _SOURCE_
<com.android.internal.widget.ActionBarOverlayLayout: void onNestedScroll(android.view.View,int,int,int,int)> -> _SOURCE_
<com.android.internal.util.FileRotator: void dumpAll(java.io.OutputStream)> -> _SOURCE_
<android.content.ContextWrapper: android.content.Context getBaseContext()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.util.Set getAllCrossProfilePackages()> -> _SOURCE_
<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandles$Lookup lookup()> -> _SOURCE_
<android.content.res.AssetManager$AssetInputStream: int getAssetInt()> -> _SOURCE_
<android.os.Environment$UserEnvironment: java.io.File[] buildExternalStorageAppFilesDirs(java.lang.String)> -> _SOURCE_
<android.app.PendingIntent: android.app.PendingIntent getActivity(android.content.Context,int,android.content.Intent,int,android.os.Bundle)> -> _SOURCE_
<android.telephony.PhysicalChannelConfig: int getRat()> -> _SOURCE_
<android.os.health.HealthStats: int getMeasurementsKeyAt(int)> -> _SOURCE_
<android.media.RoutingSessionInfo: java.lang.String getClientPackageName()> -> _SOURCE_
<android.net.wifi.nl80211.PnoSettings: int getMin2gRssiDbm()> -> _SOURCE_
<android.text.format.DateFormat: java.lang.String getTimeFormatString(android.content.Context)> -> _SOURCE_
<java.time.Duration: java.util.List getUnits()> -> _SOURCE_
<android.net.Proxy: int validate(java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.location.LocationManager: java.util.List getTestProviderCurrentRequests(java.lang.String)> -> _SOURCE_
<android.telecom.Conference: android.telecom.DisconnectCause getDisconnectCause()> -> _SOURCE_
<android.media.MediaCas: android.media.MediaCas$PluginDescriptor[] enumeratePlugins()> -> _SOURCE_
<android.telephony.SubscriptionInfo: java.lang.CharSequence getDisplayName()> -> _SOURCE_
<android.view.SurfaceControlViewHost$SurfacePackage: android.view.accessibility.IAccessibilityEmbeddedConnection getAccessibilityEmbeddedConnection()> -> _SOURCE_
<java.lang.System: java.lang.SecurityManager getSecurityManager()> -> _SOURCE_
<java.time.ZonedDateTime: int getDayOfYear()> -> _SOURCE_
<android.app.AppOpsManager: java.lang.String permissionToOp(java.lang.String)> -> _SOURCE_
<android.media.tv.tuner.DemuxCapabilities: int getRecordCount()> -> _SOURCE_
<com.android.internal.widget.RecyclerView$Recycler: java.util.List getScrapList()> -> _SOURCE_
<android.debug.AdbManager: boolean isAdbWifiSupported()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: android.os.BatteryStats$Timer getPhoneDataConnectionTimer(int)> -> _SOURCE_
<java.util.Date: long getTime()> -> _SOURCE_
<android.net.ConnectivityManager: android.net.NetworkCapabilities[] getDefaultNetworkCapabilitiesForUser(int)> -> _SOURCE_
<com.android.ims.internal.uce.common.CapInfo: boolean isFtSnFSupported()> -> _SOURCE_
<com.android.internal.logging.InstanceId: com.android.internal.logging.InstanceId fakeInstanceId(int)> -> _SOURCE_
<android.net.SocketKeepalive$Callback: void onStarted()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: void getRemoveWarning(android.content.ComponentName,android.os.RemoteCallback)> -> _SOURCE_
<java.util.Calendar: int getFirstDayOfWeek()> -> _SOURCE_
<android.provider.DocumentsContract: boolean isTreeUri(android.net.Uri)> -> _SOURCE_
<android.app.NotificationManager: java.util.List getEnabledNotificationListenerPackages()> -> _SOURCE_
<android.view.SurfaceControl: java.lang.String toString()> -> _SOURCE_
<android.media.VolumeShaper$Configuration: int getId()> -> _SOURCE_
<android.service.notification.ZenPolicy: int getPriorityCategoryEvents()> -> _SOURCE_
<android.content.RestrictionEntry: int getIntValue()> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing$MbcBand: float getPreGain()> -> _SOURCE_
<android.telephony.ims.ProvisioningManager: android.telephony.ims.ProvisioningManager createForSubscriptionId(int)> -> _SOURCE_
<android.app.AppGlobals: java.lang.String getInitialPackage()> -> _SOURCE_
<android.accessibilityservice.FingerprintGestureController$FingerprintGestureCallback: void onGestureDetected(int)> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: boolean isOffloadedScanBatchingSupported()> -> _SOURCE_
<android.content.ContentProviderOperation: boolean isYieldAllowed()> -> _SOURCE_
<java.lang.StrictMath: double toRadians(double)> -> _SOURCE_
<android.net.NetworkCapabilities: boolean equalsUids(android.net.NetworkCapabilities)> -> _SOURCE_
<android.webkit.WebStorage$Origin: java.lang.String getOrigin()> -> _SOURCE_
<android.security.keystore.recovery.WrappedApplicationKey: java.lang.String getAlias()> -> _SOURCE_
<java.security.KeyStore$TrustedCertificateEntry: java.lang.String toString()> -> _SOURCE_
<android.app.WindowConfiguration: java.lang.String toString()> -> _SOURCE_
<com.android.internal.widget.RecyclerView$LayoutManager: boolean isSmoothScrolling()> -> _SOURCE_
<android.widget.RadioGroup: android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet)> -> _SOURCE_
<android.telephony.TelephonyManager: int getDataState()> -> _SOURCE_
<android.hardware.location.NanoAppBinary: int getHeaderVersion()> -> _SOURCE_
<android.telephony.ims.compat.ImsService: android.telephony.ims.compat.feature.MMTelFeature onCreateMMTelImsFeature(int)> -> _SOURCE_
<android.media.MediaRouter$RouteInfo: int getVolumeHandling()> -> _SOURCE_
<com.android.internal.widget.ViewPager$SavedState: java.lang.String toString()> -> _SOURCE_
<android.security.keystore.recovery.KeyChainSnapshot: byte[] getEncryptedRecoveryKeyBlob()> -> _SOURCE_
<android.app.PictureInPictureParams: boolean hasSetActions()> -> _SOURCE_
<android.telephony.mbms.MbmsGroupCallSessionCallback: void onMiddlewareReady()> -> _SOURCE_
<android.text.method.DigitsKeyListener: android.text.method.DigitsKeyListener getInstance(java.util.Locale,android.text.method.DigitsKeyListener)> -> _SOURCE_
<android.hardware.display.DisplayedContentSample: long getNumFrames()> -> _SOURCE_
<android.hardware.usb.UsbConfiguration: int getMaxPower()> -> _SOURCE_
<android.content.Intent: android.content.ComponentName resolveSystemService(android.content.pm.PackageManager,int)> -> _SOURCE_
<android.hardware.fingerprint.Fingerprint: int getGroupId()> -> _SOURCE_
<android.media.RingtoneManager: android.net.Uri getActualDefaultRingtoneUri(android.content.Context,int)> -> _SOURCE_
<android.media.MediaTimestamp: float getMediaClockRate()> -> _SOURCE_
<android.net.http.SslError: int getPrimaryError()> -> _SOURCE_
<android.hardware.camera2.TotalCaptureResult: java.util.Map getPhysicalCameraResults()> -> _SOURCE_
<android.os.Environment: java.io.File getOdmDirectory()> -> _SOURCE_
<android.app.Notification$Builder: android.widget.RemoteViews createContentView()> -> _SOURCE_
<android.content.pm.PackageInstaller$SessionInfo: java.lang.CharSequence getAppLabel()> -> _SOURCE_
<android.app.ActivityManager$TaskDescription: int getStatusBarColor()> -> _SOURCE_
<android.os.PowerManager$WakeLock: java.lang.String toString()> -> _SOURCE_
<java.util.logging.LogManager: java.util.logging.LoggingMXBean getLoggingMXBean()> -> _SOURCE_
<android.widget.TextView: int getAccessibilitySelectionStart()> -> _SOURCE_
<com.android.ims.internal.uce.presence.PresCmdStatus: com.android.ims.internal.uce.common.StatusCode getStatus()> -> _SOURCE_
<android.content.pm.ShortcutManager: java.util.List getDynamicShortcuts()> -> _SOURCE_
<android.media.MediaRoute2ProviderInfo: android.media.MediaRoute2Info getRoute(java.lang.String)> -> _SOURCE_
<android.view.InputDevice: int getGeneration()> -> _SOURCE_
<android.inputmethodservice.InputMethodService: boolean isShowInputRequested()> -> _SOURCE_
<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.HdmiPlaybackClient getPlaybackClient()> -> _SOURCE_
<android.app.SearchableInfo: int getIconId()> -> _SOURCE_
<android.os.CpuUsageInfo: long getActive()> -> _SOURCE_
<android.hardware.soundtrigger.SoundTrigger$ModuleProperties: boolean isConcurrentCaptureSupported()> -> _SOURCE_
<android.bluetooth.BluetoothGattServer: java.util.List getConnectedDevices()> -> _SOURCE_
<android.net.http.HttpResponseCache: long maxSize()> -> _SOURCE_
<android.view.textclassifier.SelectionEvent: int getEventType()> -> _SOURCE_
<android.os.Environment$UserEnvironment: java.io.File[] buildExternalStorageAppMediaDirs(java.lang.String)> -> _SOURCE_
<android.app.ActivityManager$AppTask: android.app.ActivityManager$RecentTaskInfo getTaskInfo()> -> _SOURCE_
<com.android.internal.util.StateMachine: int getLogRecSize()> -> _SOURCE_
<android.telephony.TelephonyManager: void setSimState(java.lang.String)> -> _SOURCE_
<android.security.NetworkSecurityPolicy: void handleTrustStorageUpdate()> -> _SOURCE_
<android.telephony.ServiceState: int getDataNetworkType()> -> _SOURCE_
<android.app.NotificationManager: android.app.NotificationChannelGroup getNotificationChannelGroup(java.lang.String)> -> _SOURCE_
<android.companion.Association: java.lang.String toString()> -> _SOURCE_
<android.hardware.Camera$Parameters: int getMinExposureCompensation()> -> _SOURCE_
<android.media.Ringtone: float getVolume()> -> _SOURCE_
<android.net.LocalSocketAddress: java.lang.String getName()> -> _SOURCE_
<android.content.ContentResolver: android.os.Bundle getCache(android.net.Uri)> -> _SOURCE_
<android.telecom.PhoneAccount$Builder: android.telecom.PhoneAccount$Builder setSupportedUriSchemes(java.util.List)> -> _SOURCE_
<android.telecom.ConnectionRequest: int getVideoState()> -> _SOURCE_
<com.android.internal.telephony.uicc.asn1.Asn1Node: boolean hasValue()> -> _SOURCE_
<com.android.internal.view.InlineSuggestionsRequestInfo: java.lang.String toString()> -> _SOURCE_
<android.net.LinkQualityInfo: int getNormalizedSignalStrength()> -> _SOURCE_
<android.os.Debug: void stopAllocCounting()> -> _SOURCE_
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()> -> _SOURCE_
<android.print.PrintAttributes$Margins: int getRightMils()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isHearingAidCompatibilitySupported()> -> _SOURCE_
<android.preference.PreferenceActivity: boolean hasHeaders()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isAlwaysOnVpnLockdownEnabled()> -> _SOURCE_
<com.android.internal.widget.LockscreenCredential: int getType()> -> _SOURCE_
<java.lang.StringBuilder: java.lang.StringBuilder appendCodePoint(int)> -> _SOURCE_
<android.view.InputDevice: boolean isFullKeyboard()> -> _SOURCE_
<android.os.UserHandle: int myUserId()> -> _SOURCE_
<android.telecom.Connection: java.lang.String getCallerDisplayName()> -> _SOURCE_
<java.util.concurrent.SynchronousQueue: int drainTo(java.util.Collection,int)> -> _SOURCE_
<android.content.pm.ShortcutQueryWrapper: java.lang.String toString()> -> _SOURCE_
<android.os.WorkSource$WorkChain: int getSize()> -> _SOURCE_
<android.service.euicc.EuiccProfileInfo: java.lang.String getServiceProviderName()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean setRadioPower(boolean)> -> _SOURCE_
<android.os.Debug$MemoryInfo: int getSummaryPrivateOther()> -> _SOURCE_
<android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityWindowInfo getWindow(int,int,boolean)> -> _SOURCE_
<android.app.timezonedetector.ManualTimeZoneSuggestion: void addDebugInfo(java.lang.String[])> -> _SOURCE_
<android.app.AppOpsManager$HistoricalOp: long getAccessDuration(int,int,int)> -> _SOURCE_
<android.telephony.SubscriptionInfo: java.lang.String getGroupOwner()> -> _SOURCE_
<android.mtp.MtpDevice: byte[] getObject(int,int)> -> _SOURCE_
<android.text.style.TtsSpan$ElectronicBuilder: android.text.style.TtsSpan$ElectronicBuilder setProtocol(java.lang.String)> -> _SOURCE_
<android.telephony.mbms.DownloadRequest: java.lang.String getHash()> -> _SOURCE_
<java.util.Base64: java.util.Base64$Encoder getEncoder()> -> _SOURCE_
<android.telephony.TelephonyManager: android.telephony.CarrierRestrictionRules getCarrierRestrictionRules()> -> _SOURCE_
<com.android.internal.telephony.cdma.SmsMessage: com.android.internal.telephony.cdma.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,com.android.internal.telephony.cdma.sms.UserData,boolean,int)> -> _SOURCE_
<android.text.FontConfig$Family: java.lang.String getLanguages()> -> _SOURCE_
<android.hardware.display.DisplayManagerGlobal: android.hardware.display.BrightnessConfiguration getDefaultBrightnessConfiguration()> -> _SOURCE_
<javax.crypto.spec.RC5ParameterSpec: int getRounds()> -> _SOURCE_
<android.view.textclassifier.ConversationAction: java.lang.CharSequence getTextReply()> -> _SOURCE_
<android.media.AudioPort: int[] channelIndexMasks()> -> _SOURCE_
<android.content.SyncStatusInfo$Stats: void readFromParcel(android.os.Parcel)> -> _SOURCE_
<android.nfc.NfcAdapter: android.content.Context getContext()> -> _SOURCE_
<android.net.nsd.NsdServiceInfo: void setTxtRecords(java.lang.String)> -> _SOURCE_
<android.graphics.pdf.PdfDocument: java.util.List getPages()> -> _SOURCE_
<android.companion.BluetoothLeDeviceFilter: byte[] getRawDataFilterMask()> -> _SOURCE_
<android.media.tv.tuner.frontend.Isdbs3FrontendSettings: int getSymbolRate()> -> _SOURCE_
<android.media.tv.tuner.filter.SectionSettingsWithTableInfo$Builder: android.media.tv.tuner.filter.SectionSettingsWithTableInfo build()> -> _SOURCE_
<android.net.http.SslCertificate: android.view.View inflateCertificateView(android.content.Context)> -> _SOURCE_
<android.app.backup.RestoreObserver: void onUpdate(int,java.lang.String)> -> _SOURCE_
<android.content.IntentFilter: int countDataSchemes()> -> _SOURCE_
<android.media.MediaCodecInfo$VideoCapabilities: int equivalentVP9Level(android.media.MediaFormat)> -> _SOURCE_
<android.util.LruCache: int missCount()> -> _SOURCE_
<android.telephony.data.DataProfile: java.lang.String getUserName()> -> _SOURCE_
<android.hardware.display.AmbientDisplayConfiguration: boolean doubleTapGestureEnabled(int)> -> _SOURCE_
<android.app.StatusBarManager$DisableInfo: boolean isClockDisabled()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isDeviceManaged()> -> _SOURCE_
<java.time.LocalDate: int getDayOfMonth()> -> _SOURCE_
<android.view.inspector.WindowInspector: java.util.List getGlobalWindowViews()> -> _SOURCE_
<android.media.MediaRoute2ProviderInfo: java.lang.String toString()> -> _SOURCE_
<android.os.RemoteCallbackList: void dump(java.io.PrintWriter,java.lang.String)> -> _SOURCE_
<android.util.KeyValueListParser: int getInt(java.lang.String,int)> -> _SOURCE_
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor open(java.io.File,int)> -> _SOURCE_
<android.app.ApplicationPackageManager: android.content.Intent getCarLaunchIntentForPackage(java.lang.String)> -> _SOURCE_
<android.hardware.display.AmbientDisplayConfiguration: boolean alwaysOnAvailableForUser(int)> -> _SOURCE_
<android.hardware.hdmi.HdmiRecordListener$TimerStatusData: int getExtraError()> -> _SOURCE_
<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)> -> _SOURCE_
<java.io.File: java.nio.file.Path toPath()> -> _SOURCE_
<android.hardware.SensorManager: android.hardware.SensorDirectChannel createDirectChannel(android.os.MemoryFile)> -> _SOURCE_
<android.telephony.DataFailCause: boolean isRadioRestartFailure(android.content.Context,int,int)> -> _SOURCE_
<android.location.GpsMeasurement: double getCodePhaseInChips()> -> _SOURCE_
<android.mtp.MtpDevice: long getStorageId(int)> -> _SOURCE_
<android.provider.Settings: boolean checkAndNoteChangeNetworkStateOperation(android.content.Context,int,java.lang.String,boolean)> -> _SOURCE_
<android.bluetooth.BluetoothManager: android.bluetooth.BluetoothGattServer openGattServer(android.content.Context,android.bluetooth.BluetoothGattServerCallback)> -> _SOURCE_
<com.android.internal.telephony.SmsMessageBase: byte[] getUserData()> -> _SOURCE_
<java.nio.ByteBuffer: java.lang.String toString()> -> _SOURCE_
<android.app.SearchableInfo: int getHintId()> -> _SOURCE_
<android.app.AppOpsManager: java.lang.String flagsToString(int)> -> _SOURCE_
<android.media.AudioRecord: int getChannelCount()> -> _SOURCE_
<android.media.AudioFocusRequest: boolean willPauseWhenDucked()> -> _SOURCE_
<android.security.KeyChain: boolean isKeyAlgorithmSupported(java.lang.String)> -> _SOURCE_
<android.net.NetworkProvider: void onNetworkRequestWithdrawn(android.net.NetworkRequest)> -> _SOURCE_
<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()> -> _SOURCE_
<android.view.contentcapture.ContentCaptureEvent: int getSessionId()> -> _SOURCE_
<android.view.textclassifier.TextClassifierEvent: java.lang.String getModelName()> -> _SOURCE_
<android.hardware.radio.RadioManager$ProgramInfo: boolean isTuned()> -> _SOURCE_
<android.app.ActivityOptions: int getExitCoordinatorKey()> -> _SOURCE_
<android.media.ExifInterface: double getAltitude(double)> -> _SOURCE_
<android.app.Fragment: android.app.Activity getActivity()> -> _SOURCE_
<android.media.AudioFormat: java.lang.String toLogFriendlyString()> -> _SOURCE_
<android.app.AppOpsManager$HistoricalUidOps: android.app.AppOpsManager$HistoricalPackageOps getPackageOps(java.lang.String)> -> _SOURCE_
<android.widget.TableRow: android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet)> -> _SOURCE_
<android.app.ApplicationPackageManager: boolean hasSystemFeature(java.lang.String,int)> -> _SOURCE_
<java.security.Security: java.util.Set getAlgorithms(java.lang.String)> -> _SOURCE_
<android.se.omapi.Reader: android.se.omapi.SEService getSEService()> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec: java.util.Date getCertificateNotBefore()> -> _SOURCE_
<java.nio.IntBuffer: boolean hasArray()> -> _SOURCE_
<android.content.pm.PackageItemInfo: android.graphics.drawable.Drawable loadBanner(android.content.pm.PackageManager)> -> _SOURCE_
<android.app.job.JobWorkItem: java.lang.Object getGrants()> -> _SOURCE_
<android.text.style.SuperscriptSpan: int getSpanTypeIdInternal()> -> _SOURCE_
<java.lang.reflect.Parameter: int getModifiers()> -> _SOURCE_
<android.telephony.SubscriptionManager: int[] getSubId(int)> -> _SOURCE_
<android.accessibilityservice.AccessibilityGestureEvent: int getGestureId()> -> _SOURCE_
<java.time.Duration: java.time.Duration ofMillis(long)> -> _SOURCE_
<android.widget.CursorAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SOURCE_
<android.content.pm.SuspendDialogInfo: java.lang.String toString()> -> _SOURCE_
<android.media.AudioFocusInfo: android.media.AudioAttributes getAttributes()> -> _SOURCE_
<android.timezone.TimeZoneFinder: java.lang.String getIanaVersion()> -> _SOURCE_
<android.graphics.drawable.AnimationDrawable: boolean isOneShot()> -> _SOURCE_
<java.util.UnknownFormatConversionException: java.lang.String getConversion()> -> _SOURCE_
<java.lang.String: java.lang.String toString()> -> _SOURCE_
<android.net.metrics.NetworkMetrics: void addTcpStatsResult(int,int,int,int)> -> _SOURCE_
<android.widget.CursorTreeAdapter: android.widget.FilterQueryProvider getFilterQueryProvider()> -> _SOURCE_
<com.android.internal.net.VpnProfile: boolean isTypeValidForLockdown()> -> _SOURCE_
<android.app.job.JobInfo: boolean hasEarlyConstraint()> -> _SOURCE_
<android.provider.VoicemailContract$Status: android.net.Uri buildSourceUri(java.lang.String)> -> _SOURCE_
<android.app.RemoteInput: java.util.Set getAllowedDataTypes()> -> _SOURCE_
<android.media.ImageReader: android.view.Surface getSurface()> -> _SOURCE_
<java.util.concurrent.CountDownLatch: long getCount()> -> _SOURCE_
<android.telephony.SubscriptionManager: java.util.List getAllSubscriptionInfoList()> -> _SOURCE_
<android.telephony.ServiceState: java.lang.String getOperatorAlphaLongRaw()> -> _SOURCE_
<java.nio.file.spi.FileSystemProvider: java.util.List installedProviders()> -> _SOURCE_
<android.util.LruCache: int evictionCount()> -> _SOURCE_
<android.os.Debug$MemoryInfo: int getSummaryJavaHeapRss()> -> _SOURCE_
<android.view.VerifiedInputEvent: int getDeviceId()> -> _SOURCE_
<android.content.pm.LabeledIntent: int getIconResource()> -> _SOURCE_
<android.text.DynamicLayout: int[] getBlockIndices()> -> _SOURCE_
<com.android.internal.app.procstats.SparseMappingTable: int getArrayFromKey(int)> -> _SOURCE_
<android.bluetooth.BluetoothHeadsetClientCall: boolean isOutgoing()> -> _SOURCE_
<android.view.textservice.SuggestionsInfo: int getSuggestionsCount()> -> _SOURCE_
<android.speech.tts.Voice: boolean isNetworkConnectionRequired()> -> _SOURCE_
<java.net.JarURLConnection: java.util.jar.JarEntry getJarEntry()> -> _SOURCE_
<android.media.AudioManager$AudioRecordingCallback: void onRecordingConfigChanged(java.util.List)> -> _SOURCE_
<com.android.internal.telephony.SmsMessageBase: java.lang.String getPseudoSubject()> -> _SOURCE_
<android.content.ClipboardManager: android.content.ClipDescription getPrimaryClipDescription()> -> _SOURCE_
<android.view.contentcapture.DataShareRequest: android.content.LocusId getLocusId()> -> _SOURCE_
<android.telephony.PhoneNumberUtils: java.lang.String convertAndStrip(java.lang.String)> -> _SOURCE_
<android.service.autofill.AutofillFieldClassificationService: android.os.IBinder onBind(android.content.Intent)> -> _SOURCE_
<android.telephony.CellIdentityLte: int[] getBands()> -> _SOURCE_
<android.media.session.PlaybackState: java.util.List getCustomActions()> -> _SOURCE_
<android.app.Activity: boolean isVoiceInteraction()> -> _SOURCE_
<android.content.pm.DataLoaderParams: android.content.pm.DataLoaderParams forIncremental(android.content.ComponentName,java.lang.String)> -> _SOURCE_
<android.util.Half: short parseHalf(java.lang.String)> -> _SOURCE_
<android.os.Environment: boolean isExternalStorageManager()> -> _SOURCE_
<android.media.MediaCodecInfo$CodecCapabilities: boolean isFeatureSupported(java.lang.String)> -> _SOURCE_
<com.android.internal.widget.LockPatternUtils: boolean hasSecureLockScreen()> -> _SOURCE_
<android.app.DownloadManager$Query: android.app.DownloadManager$Query setFilterById(long[])> -> _SOURCE_
<android.os.connectivity.CellularBatteryStats: long getNumPacketsRx()> -> _SOURCE_
<android.nfc.NdefRecord: android.nfc.NdefRecord createApplicationRecord(java.lang.String)> -> _SOURCE_
<android.service.autofill.Dataset: boolean isEmpty()> -> _SOURCE_
<android.app.AppOpsManager$OpEntry: long getRejectTime()> -> _SOURCE_
<android.location.LocationRequest: boolean getHideFromAppOps()> -> _SOURCE_
<android.hardware.camera2.impl.CameraMetadataNative$Key: long getVendorId()> -> _SOURCE_
<android.provider.DocumentsContract$Path: java.lang.String toString()> -> _SOURCE_
<java.lang.Character: java.lang.String toString()> -> _SOURCE_
<android.view.MotionEvent: int getActionMasked()> -> _SOURCE_
<android.telecom.TelecomManager: void acceptRingingCall()> -> _SOURCE_
<android.app.NotificationChannel: int getAllowBubbles()> -> _SOURCE_
<android.service.textservice.SpellCheckerService$Session: android.view.textservice.SentenceSuggestionsInfo[] onGetSentenceSuggestionsMultiple(android.view.textservice.TextInfo[],int)> -> _SOURCE_
<android.graphics.ColorFilter: long getNativeInstance()> -> _SOURCE_
<android.mtp.MtpStorageManager: android.mtp.MtpStorageManager$MtpObject getByPath(java.lang.String)> -> _SOURCE_
<android.view.DisplayAddress$Network: java.lang.String toString()> -> _SOURCE_
<android.location.GpsNavigationMessage: short getStatus()> -> _SOURCE_
<com.android.internal.os.Zygote: java.lang.String getWrapProperty(java.lang.String)> -> _SOURCE_
<android.text.style.TtsSpan: java.lang.String getType()> -> _SOURCE_
<android.util.proto.ProtoInputStream: java.lang.String readString(long)> -> _SOURCE_
<android.media.tv.tuner.filter.SectionEvent: int getVersion()> -> _SOURCE_
<android.webkit.CookieSyncManager: void resetSync()> -> _SOURCE_
<android.text.util.Rfc822Token: java.lang.String getAddress()> -> _SOURCE_
<android.telephony.SignalThresholdInfo: java.lang.String toString()> -> _SOURCE_
<android.app.timedetector.ManualTimeSuggestion: void addDebugInfo(java.lang.String[])> -> _SOURCE_
<java.time.MonthDay: int get(java.time.temporal.TemporalField)> -> _SOURCE_
<android.app.Activity: android.database.Cursor managedQuery(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SOURCE_
<android.media.AudioRecordingConfiguration: java.lang.String toLogFriendlyString(android.media.AudioRecordingConfiguration)> -> _SOURCE_
<android.media.AudioManager: long getMaxAdditionalOutputDeviceDelay(android.media.AudioDeviceInfo)> -> _SOURCE_
<android.net.NetworkCapabilities: int getRequestorUid()> -> _SOURCE_
<android.security.net.config.RootTrustManager: java.util.List checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String,java.lang.String)> -> _SOURCE_
<android.app.Notification$TvExtender: boolean getSuppressShowOverApps()> -> _SOURCE_
<android.hardware.usb.UsbRequest: void setClientData(java.lang.Object)> -> _SOURCE_
<java.security.cert.PKIXParameters: java.lang.String getSigProvider()> -> _SOURCE_
<android.telephony.ims.compat.stub.ImsConfigImplBase$ImsConfigStub: boolean getVolteProvisioned()> -> _SOURCE_
<android.location.BatchedLocationCallback: void onLocationBatch(java.util.List)> -> _SOURCE_
<android.telephony.TelephonyRegistryManager: void notifyCallForwardingChanged(int,boolean)> -> _SOURCE_
<java.util.concurrent.atomic.AtomicLong: java.lang.String toString()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getClassName()> -> _SOURCE_
<android.os.ServiceManager: android.os.IBinder getService(java.lang.String)> -> _SOURCE_
<java.lang.reflect.Field: java.lang.Class getDeclaringClass()> -> _SOURCE_
<android.net.VpnService: boolean isAlwaysOn()> -> _SOURCE_
<android.preference.MultiCheckPreference: java.lang.CharSequence[] getEntries()> -> _SOURCE_
<android.content.res.AssetManager: java.lang.String getLastResourceResolution()> -> _SOURCE_
<android.app.AppOpsManager: int strOpToOp(java.lang.String)> -> _SOURCE_
<android.telephony.UiccCardInfo: android.telephony.UiccCardInfo getUnprivileged()> -> _SOURCE_
<android.media.tv.tunerresourcemanager.CasSessionRequest: int getCasSystemId()> -> _SOURCE_
<android.hardware.camera2.impl.CameraMetadataNative$Key: android.hardware.camera2.utils.TypeReference getTypeReference()> -> _SOURCE_
<android.print.PrintAttributes: java.lang.String toString()> -> _SOURCE_
<android.telecom.Connection: java.util.List getConferenceables()> -> _SOURCE_
<android.companion.BluetoothLeDeviceFilter$Builder: android.companion.BluetoothLeDeviceFilter$Builder setRawDataFilter(byte[],byte[])> -> _SOURCE_
<android.security.keystore.AndroidKeyStoreSpi: java.security.Key engineGetKey(java.lang.String,char[])> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String[] getMergedSubscriberIds()> -> _SOURCE_
<java.text.FieldPosition: int getField()> -> _SOURCE_
<android.telephony.ims.stub.ImsCallSessionImplBase: void sendUssd(java.lang.String)> -> _SOURCE_
<android.graphics.text.LineBreaker$Result: int getLineCount()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.lang.String getProfileOwnerNameAsUser(int)> -> _SOURCE_
<android.telephony.CellInfoLte: android.telephony.CellSignalStrengthLte getCellSignalStrength()> -> _SOURCE_
<android.location.GnssNavigationMessage: java.lang.String toString()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.lang.String[] getAccountTypesWithManagementDisabledAsUser(int,boolean)> -> _SOURCE_
<android.net.metrics.ApfProgramEvent: void writeToParcel(android.os.Parcel,int)> -> _SOURCE_
<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getApplicationBanner(android.content.pm.ApplicationInfo)> -> _SOURCE_
<java.util.concurrent.ThreadPoolExecutor: int getLargestPoolSize()> -> _SOURCE_
<android.telephony.CellIdentityWcdma: android.telephony.CellIdentityWcdma sanitizeLocationInfo()> -> _SOURCE_
<android.media.tv.tuner.filter.DownloadEvent: int getMpuSequenceNumber()> -> _SOURCE_
<android.webkit.WebViewDelegate: boolean isMultiProcessEnabled()> -> _SOURCE_
<android.os.TelephonyServiceManager: android.os.TelephonyServiceManager$ServiceRegisterer getPhoneSubServiceRegisterer()> -> _SOURCE_
<android.telephony.ims.stub.ImsUtImplBase: int queryCLIP()> -> _SOURCE_
<android.app.ApplicationPackageManager: boolean hasSystemFeature(java.lang.String)> -> _SOURCE_
<android.location.GnssMeasurementCorrections: java.lang.String toString()> -> _SOURCE_
<android.os.Binder: void dumpAsync(java.io.FileDescriptor,java.lang.String[])> -> _SOURCE_
<android.net.NetworkTemplate: android.net.NetworkTemplate buildTemplateWifi(java.lang.String)> -> _SOURCE_
<android.widget.Chronometer: long getBase()> -> _SOURCE_
<java.time.chrono.MinguoDate: java.time.chrono.MinguoChronology getChronology()> -> _SOURCE_
<android.content.SyncAdapterType: boolean allowParallelSyncs()> -> _SOURCE_
<android.hardware.usb.UsbManager: void resetUsbGadget()> -> _SOURCE_
<java.time.chrono.ThaiBuddhistDate: java.time.chrono.ThaiBuddhistChronology getChronology()> -> _SOURCE_
<android.media.session.PlaybackState: long getLastPositionUpdateTime()> -> _SOURCE_
<android.content.pm.ShortcutInfo: boolean usesQuota()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: boolean hasWifiActivityReporting()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isPasswordSufficientAfterProfileUnification(int,int)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long computeUptime(long,int)> -> _SOURCE_
<android.hardware.camera2.params.MandatoryStreamCombination$Builder: java.util.List getAvailableMandatoryConcurrentStreamCombinations()> -> _SOURCE_
<android.net.NetworkIdentity: java.lang.String toString()> -> _SOURCE_
<android.service.autofill.Dataset: android.content.IntentSender getAuthentication()> -> _SOURCE_
<java.security.cert.TrustAnchor: byte[] getNameConstraints()> -> _SOURCE_
<android.view.TextureView: android.view.TextureView$SurfaceTextureListener getSurfaceTextureListener()> -> _SOURCE_
<android.net.ConnectivityDiagnosticsManager$DataStallReport: long getReportTimestamp()> -> _SOURCE_
<android.content.ContentProvider: void attachInfo(android.content.Context,android.content.pm.ProviderInfo)> -> _SOURCE_
<android.os.connectivity.CellularBatteryStats: long getIdleTimeMillis()> -> _SOURCE_
<android.location.LocationRequest: android.os.WorkSource getWorkSource()> -> _SOURCE_
<android.content.ContextWrapper: android.view.Display getDisplay()> -> _SOURCE_
<android.window.WindowContainerTransaction$HierarchyOp: java.lang.String toString()> -> _SOURCE_
<android.media.MediaRouter: android.media.MediaRouter$RouteInfo getDefaultRoute()> -> _SOURCE_
<java.security.cert.CertificateFactory: java.util.Collection generateCertificates(java.io.InputStream)> -> _SOURCE_
<android.content.ContentValues: void putStringArrayList(java.lang.String,java.util.ArrayList)> -> _SOURCE_
<com.android.ims.ImsConfig: java.lang.String getProvisionedStringValue(int)> -> _SOURCE_
<android.os.Debug$MemoryInfo: java.lang.String getOtherLabel(int)> -> _SOURCE_
<android.hardware.display.AmbientBrightnessDayStats: float[] getBucketBoundaries()> -> _SOURCE_
<android.media.tv.TvTrackInfo: boolean isAudioDescription()> -> _SOURCE_
<android.media.tv.tuner.frontend.DvbtFrontendCapabilities: int getConstellationCapability()> -> _SOURCE_
<java.text.DecimalFormatSymbols: char getMinusSign()> -> _SOURCE_
<android.hardware.display.DeviceProductInfo$ManufactureDate: java.lang.String toString()> -> _SOURCE_
<android.app.Notification: java.lang.String getSortKey()> -> _SOURCE_
<android.view.animation.DecelerateInterpolator: long createNativeInterpolator()> -> _SOURCE_
<com.android.internal.widget.RecyclerView$ViewHolder: java.lang.String toString()> -> _SOURCE_
<android.accessibilityservice.AccessibilityButtonController: boolean isAccessibilityButtonAvailable()> -> _SOURCE_
<java.lang.Thread: void checkAccess()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isMasterVolumeMuted(android.content.ComponentName)> -> _SOURCE_
<android.hardware.radio.ProgramSelector: int getProgramType()> -> _SOURCE_
<android.media.Metadata: int lastType()> -> _SOURCE_
<android.app.Notification$Builder: android.widget.RemoteViews makeAmbientNotification()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: int getRowSpan()> -> _SOURCE_
<android.view.InputChannel: java.lang.String toString()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getMsisdn(int)> -> _SOURCE_
<android.view.ScrollCaptureTarget: android.view.View getContainingView()> -> _SOURCE_
<android.media.AudioRecord$Builder: android.media.AudioRecord build()> -> _SOURCE_
<java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String,java.security.Provider)> -> _SOURCE_
<android.os.Debug$MemoryInfo: int getTotalSharedClean()> -> _SOURCE_
<android.app.Notification$DecoratedCustomViewStyle: android.widget.RemoteViews makeHeadsUpContentView(boolean)> -> _SOURCE_
<android.telephony.ims.ImsMmTelManager: android.telephony.ims.ImsMmTelManager createForSubscriptionId(int)> -> _SOURCE_
<android.net.ConnectivityManager: android.net.ProxyInfo getProxyForNetwork(android.net.Network)> -> _SOURCE_
<java.time.Year: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.util.Set getCrossProfileCalendarPackages()> -> _SOURCE_
<java.security.cert.CollectionCertStoreParameters: java.lang.Object clone()> -> _SOURCE_
<android.provider.Contacts$Settings: void setSetting(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<com.android.internal.net.VpnProfile: boolean isServerAddressNumeric()> -> _SOURCE_
<com.android.internal.policy.PhoneWindow: int getNavigationBarColor()> -> _SOURCE_
<android.nfc.tech.NfcF: byte[] getManufacturer()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isVideoCallingEnabled()> -> _SOURCE_
<android.service.euicc.EuiccProfileInfo: java.lang.String getProfileName()> -> _SOURCE_
<android.view.ViewConfiguration: int getScaledFadingEdgeLength()> -> _SOURCE_
<java.util.concurrent.CompletableFuture: int getNumberOfDependents()> -> _SOURCE_
<android.media.AudioManager: boolean isMusicActive()> -> _SOURCE_
<java.util.Locale: java.lang.String getCountry()> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec: javax.security.auth.x500.X500Principal getCertificateSubject()> -> _SOURCE_
<com.android.internal.os.RpmStats: com.android.internal.os.RpmStats$PowerStatePlatformSleepState getAndUpdatePlatformState(java.lang.String,long,int)> -> _SOURCE_
<java.math.BigInteger: java.lang.String toString()> -> _SOURCE_
<java.security.KeyStore$PasswordProtection: java.lang.String getProtectionAlgorithm()> -> _SOURCE_
<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder detectNonSdkApiUsage()> -> _SOURCE_
<android.app.Activity: void onLocalVoiceInteractionStarted()> -> _SOURCE_
<android.database.CursorWindow: java.lang.String toString()> -> _SOURCE_
<android.app.ActivityManager$TaskDescription: android.graphics.drawable.Icon loadIcon()> -> _SOURCE_
<android.app.job.JobInfo: android.content.ComponentName getService()> -> _SOURCE_
<android.renderscript.RenderScript: android.content.Context getApplicationContext()> -> _SOURCE_
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)> -> _SOURCE_
<java.security.SignatureSpi: java.lang.Object clone()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isSecurityLoggingEnabled(android.content.ComponentName)> -> _SOURCE_
<android.util.JsonWriter: android.util.JsonWriter nullValue()> -> _SOURCE_
<android.os.PersistableBundle: void writeUnknownObject(java.lang.Object,java.lang.String,org.xmlpull.v1.XmlSerializer)> -> _SOURCE_
<android.widget.ExpandableListView: android.widget.ListAdapter getAdapter()> -> _SOURCE_
<android.hardware.soundtrigger.SoundTrigger$ModuleProperties: int getMaxSoundModels()> -> _SOURCE_
<android.os.BinderProxy: int getProxyCount()> -> _SOURCE_
<android.net.metrics.IpConnectivityLog: boolean log(java.lang.String,android.net.metrics.IpConnectivityLog$Event)> -> _SOURCE_
<android.service.notification.NotificationListenerService$Ranking: long getLastAudiblyAlertedMillis()> -> _SOURCE_
<android.app.usage.EventStats: long getLastTimeStamp()> -> _SOURCE_
<android.app.usage.StorageStats: long getDataBytes()> -> _SOURCE_
<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)> -> _SOURCE_
<com.android.internal.os.AppIdToPackageMap: com.android.internal.os.AppIdToPackageMap getSnapshot()> -> _SOURCE_
<android.companion.CompanionDeviceManager: boolean hasNotificationAccess(android.content.ComponentName)> -> _SOURCE_
<android.view.WindowInsets$Type: int captionBar()> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing$Config: boolean isMbcInUse()> -> _SOURCE_
<android.os.DropBoxManager$Entry: java.io.InputStream getInputStream()> -> _SOURCE_
<android.view.textclassifier.TextLinks: java.util.Collection getLinks()> -> _SOURCE_
<android.net.Ikev2VpnProfile: boolean isMetered()> -> _SOURCE_
<android.metrics.LogMaker: android.metrics.LogMaker clearTimestamp()> -> _SOURCE_
<android.view.inputmethod.InputMethodInfo: java.lang.String getServiceName()> -> _SOURCE_
<android.hardware.Camera$Parameters: int getMaxZoom()> -> _SOURCE_
<android.net.NetworkStats: android.net.NetworkStats combineValues(java.lang.String,int,int,long,long,long,long,long)> -> _SOURCE_
<android.media.soundtrigger.SoundTriggerDetectionService: void onConnected(java.util.UUID,android.os.Bundle)> -> _SOURCE_
<android.app.ActivityOptions: android.os.Bundle popAppVerificationBundle()> -> _SOURCE_
<android.os.connectivity.WifiActivityEnergyInfo: boolean isValid()> -> _SOURCE_
<java.util.concurrent.ForkJoinPool: int getCommonPoolParallelism()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean getEmergencyCallbackMode()> -> _SOURCE_
<java.nio.file.Files: java.nio.file.FileStore getFileStore(java.nio.file.Path)> -> _SOURCE_
<android.telephony.PhoneNumberUtils: java.lang.String formatNumberToE164(java.lang.String,java.lang.String)> -> _SOURCE_
<android.telephony.ims.stub.ImsConfigImplBase: int getConfigInt(int)> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing$Limiter: float getRatio()> -> _SOURCE_
<android.view.textclassifier.TextClassifier$EntityConfig: java.util.Collection resolveEntityListModifications(java.util.Collection)> -> _SOURCE_
<android.media.tv.tuner.filter.AudioDescriptor: byte getAdFade()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: long[] getCpuClusterTimes()> -> _SOURCE_
<android.app.servertransaction.StopActivityItem: java.lang.String toString()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: long getLastSecurityLogRetrievalTime()> -> _SOURCE_
<android.os.Debug: long threadCpuTimeNanos()> -> _SOURCE_
<android.content.ContextWrapper: java.io.File[] getExternalMediaDirs()> -> _SOURCE_
<android.provider.DeviceConfig$Properties: long getLong(java.lang.String,long)> -> _SOURCE_
<java.nio.charset.Charset: java.util.Set aliases()> -> _SOURCE_
<java.util.regex.PatternSyntaxException: java.lang.String getMessage()> -> _SOURCE_
<android.net.netstats.provider.NetworkStatsProvider: android.net.netstats.provider.INetworkStatsProviderCallback getProviderCallbackBinderOrThrow()> -> _SOURCE_
<android.telecom.StatusHints: android.graphics.drawable.Icon getIcon()> -> _SOURCE_
<android.os.UserManager: boolean isUserTypeDemo(java.lang.String)> -> _SOURCE_
<android.webkit.WebStorage: void deleteOrigin(java.lang.String)> -> _SOURCE_
<com.android.internal.view.menu.MenuBuilder: android.view.MenuItem getItem(int)> -> _SOURCE_
<android.net.NetworkStats: android.net.NetworkStats groupedByUid()> -> _SOURCE_
<android.util.Xml: android.util.Xml$Encoding findEncodingByName(java.lang.String)> -> _SOURCE_
<android.preference.ListPreference: java.lang.CharSequence[] getEntryValues()> -> _SOURCE_
<android.app.timezonedetector.TelephonyTimeZoneSuggestion: void printCommandLineOpts(java.io.PrintWriter)> -> _SOURCE_
<android.view.textservice.TextServicesManager: android.view.textservice.TextServicesManager getInstance()> -> _SOURCE_
<android.telecom.PhoneAccount: android.graphics.drawable.Icon getIcon()> -> _SOURCE_
<android.telecom.RemoteConference: android.os.Bundle getExtras()> -> _SOURCE_
<android.os.ShellCommand: android.os.ShellCallback getShellCallback()> -> _SOURCE_
<android.security.keystore.recovery.RecoverySession: byte[] start(java.lang.String,java.security.cert.CertPath,byte[],byte[],java.util.List)> -> _SOURCE_
<android.media.midi.MidiReceiver: int getMaxMessageSize()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean disableDataConnectivity()> -> _SOURCE_
<android.location.GpsMeasurement: float getCarrierFrequencyInHz()> -> _SOURCE_
<android.os.SystemClock: java.time.Clock currentNetworkTimeClock()> -> _SOURCE_
<android.media.tv.tuner.frontend.Atsc3FrontendSettings: int getType()> -> _SOURCE_
<android.view.textservice.SpellCheckerSession: com.android.internal.textservice.ITextServicesSessionListener getTextServicesSessionListener()> -> _SOURCE_
<android.media.MediaMetadataRetriever: byte[] getEmbeddedPicture()> -> _SOURCE_
<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy$Builder detectResourceMismatches()> -> _SOURCE_
<android.accessibilityservice.AccessibilityServiceInfo: java.lang.String getSettingsActivityName()> -> _SOURCE_
<android.location.LocationManager: void clearTestProviderStatus(java.lang.String)> -> _SOURCE_
<android.telephony.CellBroadcastService$ICellBroadcastServiceWrapper: void handleCdmaCellBroadcastSms(int,byte[],int)> -> _SOURCE_
<android.provider.DocumentsContract: android.net.Uri buildDocumentUri(java.lang.String,java.lang.String)> -> _SOURCE_
<com.android.internal.graphics.palette.Palette$Swatch: int getPopulation()> -> _SOURCE_
<android.bluetooth.BluetoothDevice: java.lang.String toString()> -> _SOURCE_
<com.android.internal.telephony.SmsApplication$SmsApplicationData: boolean isComplete()> -> _SOURCE_
<android.security.keystore.AttestationUtils: android.security.keymaster.KeymasterArguments prepareAttestationArgumentsIfMisprovisioned(android.content.Context,int[],byte[])> -> _SOURCE_
<android.text.style.LineBackgroundSpan$Standard: int getSpanTypeIdInternal()> -> _SOURCE_
<android.content.Intent: char getCharExtra(java.lang.String,char)> -> _SOURCE_
<android.telecom.Call$Details: int getCallDirection()> -> _SOURCE_
<android.view.autofill.AutofillManager: int getDatasetIdFromAuthenticationId(int)> -> _SOURCE_
<android.app.PendingIntent: int sendAndReturnResult(android.content.Context,int,android.content.Intent,android.app.PendingIntent$OnFinished,android.os.Handler,java.lang.String,android.os.Bundle)> -> _SOURCE_
<android.graphics.drawable.AnimatedVectorDrawable: void clearMutated()> -> _SOURCE_
<android.view.View: int getFadingEdge()> -> _SOURCE_
<android.database.CursorWindow: byte[] getBlob(int,int)> -> _SOURCE_
<android.telecom.VideoProfile: boolean isVideo(int)> -> _SOURCE_
<android.media.AudioMixPortConfig: android.media.AudioMixPort port()> -> _SOURCE_
<android.app.Notification$MessagingStyle: int getUnreadMessageCount()> -> _SOURCE_
<java.nio.file.FileSystems: java.nio.file.FileSystem newFileSystem(java.nio.file.Path,java.lang.ClassLoader)> -> _SOURCE_
<android.location.LocationRequest: long getFastestInterval()> -> _SOURCE_
<android.telecom.Voicemail: java.lang.String getTranscription()> -> _SOURCE_
<android.os.Handler: void dumpMine(android.util.Printer,java.lang.String)> -> _SOURCE_
<java.util.concurrent.locks.ReentrantReadWriteLock: boolean isWriteLocked()> -> _SOURCE_
<android.util.Xml: org.xmlpull.v1.XmlSerializer newSerializer()> -> _SOURCE_
<android.telephony.AccessNetworkUtils: int getOperatingBandForEarfcn(int)> -> _SOURCE_
<android.provider.ContactsContract$Data: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)> -> _SOURCE_
<android.media.AudioDeviceInfo: int[] getEncapsulationModes()> -> _SOURCE_
<android.os.Bundle: android.os.IBinder getBinder(java.lang.String)> -> _SOURCE_
<android.database.DatabaseUtils: android.os.ParcelFileDescriptor blobFileDescriptorForQuery(android.database.sqlite.SQLiteStatement,java.lang.String[])> -> _SOURCE_
<android.media.MediaCas$PluginDescriptor: java.lang.String toString()> -> _SOURCE_
<android.net.wifi.nl80211.NativeScanResult: int getCapabilities()> -> _SOURCE_
<android.text.style.URLSpan: java.lang.String getURL()> -> _SOURCE_
<android.app.usage.UsageEvents$Event: android.content.res.Configuration getConfiguration()> -> _SOURCE_
<android.telephony.TelephonyManager: int getCallState(int)> -> _SOURCE_
<android.hardware.biometrics.BiometricAuthenticator$AuthenticationResult: int getUserId()> -> _SOURCE_
<android.preference.PreferenceManager: android.content.SharedPreferences getSharedPreferences()> -> _SOURCE_
<com.android.internal.widget.RecyclerView$ViewHolder: int getItemViewType()> -> _SOURCE_
<android.hardware.input.InputManager: android.hardware.input.InputManager getInstance()> -> _SOURCE_
<android.view.inputmethod.InlineSuggestionsResponse: java.lang.String toString()> -> _SOURCE_
<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy$Builder detectExplicitGc()> -> _SOURCE_
<java.lang.Throwable: java.lang.Throwable[] getSuppressed()> -> _SOURCE_
<android.location.SettingInjectorService: android.os.IBinder onBind(android.content.Intent)> -> _SOURCE_
<android.app.AppOpsManager$OpEntry: int getOp()> -> _SOURCE_
<android.media.MediaPlayer$TrackInfo: android.media.MediaFormat getFormat()> -> _SOURCE_
<android.net.RssiCurve: byte lookupScore(int)> -> _SOURCE_
<java.lang.Long: java.lang.String toUnsignedString(long)> -> _SOURCE_
<android.hardware.hdmi.HdmiDeviceInfo: int getPortId()> -> _SOURCE_
<java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String,java.util.ResourceBundle$Control)> -> _SOURCE_
<android.net.NetworkCapabilities: boolean hasCapability(int)> -> _SOURCE_
<android.service.notification.NotificationListenerService: android.service.notification.StatusBarNotification[] getActiveNotifications(java.lang.String[],int)> -> _SOURCE_
<android.os.WorkSource$WorkChain: int[] getUids()> -> _SOURCE_
<android.media.tv.tuner.frontend.Isdbs3FrontendSettings: int getCodeRate()> -> _SOURCE_
<android.app.ActivityTaskManager: int getDefaultAppRecentsLimitStatic()> -> _SOURCE_
<android.webkit.URLUtil: boolean isDataUrl(java.lang.String)> -> _SOURCE_
<java.lang.reflect.Method: java.lang.Class getReturnType()> -> _SOURCE_
<android.location.GnssMeasurement: double getPseudorangeRateUncertaintyMetersPerSecond()> -> _SOURCE_
<java.lang.StringBuffer: int lastIndexOf(java.lang.String)> -> _SOURCE_
<java.security.cert.X509CertSelector: boolean[] getKeyUsage()> -> _SOURCE_
<android.telephony.SubscriptionManager: java.util.List getCompleteActiveSubscriptionInfoList()> -> _SOURCE_
<java.time.LocalDate: int getMonthValue()> -> _SOURCE_
<android.os.IncidentManager$IncidentReport: long getTimestamp()> -> _SOURCE_
<android.content.pm.ShortcutManager: int getRemainingCallCount()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: long getWifiRadioApWakeupCount(int)> -> _SOURCE_
<android.telephony.TelephonyManager: void notifyOtaEmergencyNumberDbInstalled()> -> _SOURCE_
<android.os.storage.StorageManager: android.os.storage.StorageVolume getPrimaryStorageVolume()> -> _SOURCE_
<android.telephony.ServiceState: int getCssIndicator()> -> _SOURCE_
<android.service.quickaccesswallet.GetWalletCardsResponse: java.util.List getWalletCards()> -> _SOURCE_
<android.media.MediaCodec$OutputFrame: long getPresentationTimeUs()> -> _SOURCE_
<android.os.health.HealthStats: java.lang.String getDataType()> -> _SOURCE_
<android.net.TrafficStats: long getUidRxBytes(int)> -> _SOURCE_
<java.security.Provider: java.util.Collection values()> -> _SOURCE_
<android.location.GnssCapabilities: boolean hasGeofencing()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: void beginTransactionNonExclusive()> -> _SOURCE_
<android.bluetooth.BluetoothDevice: boolean sdpSearch(android.os.ParcelUuid)> -> _SOURCE_
<java.security.cert.CertPath: java.lang.String getType()> -> _SOURCE_
<java.time.YearMonth: int get(java.time.temporal.TemporalField)> -> _SOURCE_
<android.hardware.display.AmbientDisplayConfiguration: boolean enabled(int)> -> _SOURCE_
<android.telephony.SubscriptionManager: void removeSubscriptionsFromGroup(java.util.List,android.os.ParcelUuid)> -> _SOURCE_
<android.net.lowpan.LowpanManager: android.net.lowpan.LowpanInterface getInterfaceNoCreate(android.net.lowpan.ILowpanInterface)> -> _SOURCE_
<android.telephony.mbms.DownloadRequest: android.net.Uri getDestinationUri()> -> _SOURCE_
<java.security.cert.CRL: java.lang.String getType()> -> _SOURCE_
<android.view.WindowInsets: android.graphics.Insets getTappableElementInsets()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long getMobileRadioActiveUnknownTime(int)> -> _SOURCE_
<android.hardware.fingerprint.FingerprintManager$AuthenticationResult: android.hardware.fingerprint.FingerprintManager$CryptoObject getCryptoObject()> -> _SOURCE_
<android.os.LocaleList: java.lang.String toString()> -> _SOURCE_
<android.bluetooth.BluetoothHeadsetClientCall: long getCreationElapsedMilli()> -> _SOURCE_
<android.hardware.usb.UsbInterface: void setEndpoints(android.os.Parcelable[])> -> _SOURCE_
<android.util.proto.EncodedBuffer: void rewindWriteTo(int)> -> _SOURCE_
<android.telephony.CellIdentityGsm: android.telephony.gsm.GsmCellLocation asCellLocation()> -> _SOURCE_
<android.view.contentcapture.ContentCaptureContext: java.lang.String toString()> -> _SOURCE_
<android.telecom.CallAudioState: java.lang.String audioRouteToString(int)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: int getLockTaskFeatures(android.content.ComponentName)> -> _SOURCE_
<android.media.AudioFormat: int getEncoding()> -> _SOURCE_
<android.hardware.location.ContextHubManager: int sendMessage(int,int,android.hardware.location.ContextHubMessage)> -> _SOURCE_
<android.graphics.pdf.PdfEditor: int getPageCount()> -> _SOURCE_
<android.app.backup.BackupManager: java.lang.String getDestinationString(java.lang.String)> -> _SOURCE_
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromResourceStream(android.content.res.Resources,android.util.TypedValue,java.io.InputStream,java.lang.String)> -> _SOURCE_
<android.app.Service: android.app.Application getApplication()> -> _SOURCE_
<java.security.cert.X509CertSelector: byte[] getSubjectKeyIdentifier()> -> _SOURCE_
<android.content.res.TypedArray: java.lang.String toString()> -> _SOURCE_
<android.widget.TextView: android.graphics.Typeface getTypeface()> -> _SOURCE_
<android.media.AudioPresentation: int getMasteringIndication()> -> _SOURCE_
<android.net.ConnectivityManager: boolean isDefaultNetworkActive()> -> _SOURCE_
<android.location.GnssClock: boolean hasLeapSecond()> -> _SOURCE_
<com.android.internal.telephony.NetworkScanResult: java.lang.String toString()> -> _SOURCE_
<android.net.metrics.ValidationProbeEvent: java.lang.String toString()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getTypeAllocationCode(int)> -> _SOURCE_
<android.app.NotificationManager: void setNotificationDelegate(java.lang.String)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$ControllerActivityCounterImpl: com.android.internal.os.BatteryStatsImpl$LongSamplingCounter getMonitoredRailChargeConsumedMaMs()> -> _SOURCE_
<android.widget.TextView: boolean onPreDraw()> -> _SOURCE_
<android.telephony.NetworkRegistrationInfo$Builder: android.telephony.NetworkRegistrationInfo build()> -> _SOURCE_
<android.os.UserManager: long getUserStartRealtime()> -> _SOURCE_
<android.widget.Scroller: int getDuration()> -> _SOURCE_
<com.android.internal.widget.PagerAdapter: android.os.Parcelable saveState()> -> _SOURCE_
<android.telephony.ims.ImsCallSession$Listener: void callSessionSuppServiceReceived(android.telephony.ims.ImsCallSession,android.telephony.ims.ImsSuppServiceNotification)> -> _SOURCE_
<android.telephony.ims.ProvisioningManager$Callback: android.telephony.ims.aidl.IImsConfigCallback getBinder()> -> _SOURCE_
<android.content.pm.PackageParser$SigningDetails$Builder: android.content.pm.PackageParser$SigningDetails build()> -> _SOURCE_
<android.webkit.URLUtil: boolean isContentUrl(java.lang.String)> -> _SOURCE_
<android.media.tv.TvInputManager: android.media.tv.TvInputInfo getTvInputInfo(java.lang.String)> -> _SOURCE_
<com.android.ims.internal.uce.common.CapInfo: boolean isFtHttpSupported()> -> _SOURCE_
<android.media.RoutingSessionInfo$Builder: android.media.RoutingSessionInfo$Builder setProviderId(java.lang.String)> -> _SOURCE_
<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy$Builder permitExplicitGc()> -> _SOURCE_
<java.security.KeyPair: java.security.PrivateKey getPrivate()> -> _SOURCE_
<android.companion.BluetoothLeDeviceFilter: java.lang.String toString()> -> _SOURCE_
<android.hardware.biometrics.BiometricManager: int canAuthenticate(int,int)> -> _SOURCE_
<android.app.WallpaperManager: int getWallpaperId(int)> -> _SOURCE_
<com.android.ims.internal.uce.common.CapInfo: boolean isSmChatbotSupported()> -> _SOURCE_
<android.telecom.VideoCallImpl: void setPauseImage(android.net.Uri)> -> _SOURCE_
<android.telephony.TelephonyRegistryManager: void notifyCallStateChangedForAllSubscriptions(int,java.lang.String)> -> _SOURCE_
<android.provider.BrowserContract$Settings: boolean isSyncEnabled(android.content.Context)> -> _SOURCE_
<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy$Builder permitDiskWrites()> -> _SOURCE_
<android.net.StaticIpConfiguration: java.lang.String toString()> -> _SOURCE_
<java.lang.Package: java.lang.String getName()> -> _SOURCE_
<java.security.cert.X509CertSelector: byte[] getNameConstraints()> -> _SOURCE_
<android.location.GpsMeasurementsEvent: java.lang.String toString()> -> _SOURCE_
<android.location.GnssClock: boolean hasFullBiasNanos()> -> _SOURCE_
<android.media.SubtitleTrack: int getTrackType()> -> _SOURCE_
<android.app.ActivityManager: boolean switchUser(int)> -> _SOURCE_
<android.media.soundtrigger.SoundTriggerDetector$EventPayload: java.lang.Integer getCaptureSession()> -> _SOURCE_
<android.view.FocusFinder: android.view.View findNearestTouchable(android.view.ViewGroup,int,int,int,int[])> -> _SOURCE_
<android.timezone.CountryTimeZones$TimeZoneMapping: java.lang.String toString()> -> _SOURCE_
<android.hardware.usb.UsbPortStatus: int getCurrentDataRole()> -> _SOURCE_
<android.app.ApplicationPackageManager: int checkSignatures(java.lang.String,java.lang.String)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isPackageAllowedToAccessCalendar(java.lang.String)> -> _SOURCE_
<java.util.PriorityQueue: java.lang.Object[] toArray()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: android.os.BatteryStats$ControllerActivityCounter getBluetoothControllerActivity()> -> _SOURCE_
<android.app.DirectAction: android.os.Bundle getExtras()> -> _SOURCE_
<android.view.animation.AnticipateOvershootInterpolator: long createNativeInterpolator()> -> _SOURCE_
<android.media.MediaRouter$RouteInfo: boolean isBluetooth()> -> _SOURCE_
<android.telephony.CellIdentityWcdma: int getLac()> -> _SOURCE_
<android.print.PrinterCapabilitiesInfo$Builder: android.print.PrinterCapabilitiesInfo build()> -> _SOURCE_
<com.android.internal.telephony.gsm.SmsBroadcastConfigInfo: int getFromCodeScheme()> -> _SOURCE_
<android.hardware.fingerprint.FingerprintManager: java.util.List getEnrolledFingerprints(int)> -> _SOURCE_
<android.app.assist.AssistContent: boolean isAppProvidedWebUri()> -> _SOURCE_
<javax.net.ssl.SSLParameters: boolean getWantClientAuth()> -> _SOURCE_
<android.net.ConnectivityManager: boolean shouldAvoidBadWifi()> -> _SOURCE_
<android.hardware.Camera$Parameters: java.util.List getSupportedPictureSizes()> -> _SOURCE_
<android.view.View: boolean isKeyboardNavigationCluster()> -> _SOURCE_
<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getSubjectX500Principal()> -> _SOURCE_
<com.android.internal.os.StoragedUidIoStatsReader: void readAbsolute(com.android.internal.os.StoragedUidIoStatsReader$Callback)> -> _SOURCE_
<android.webkit.WebChromeClient: void onReceivedTitle(android.webkit.WebView,java.lang.String)> -> _SOURCE_
<android.content.integrity.AtomicFormula$BooleanAtomicFormula: boolean isAppCertificateFormula()> -> _SOURCE_
<android.media.tv.TvInputManager$Session: java.lang.String getSelectedTrack(int)> -> _SOURCE_
<android.media.MediaRouter2Manager: android.media.session.MediaController getMediaControllerForRoutingSession(android.media.RoutingSessionInfo)> -> _SOURCE_
<android.app.NotificationManager$Policy: int getAllSuppressedVisualEffects()> -> _SOURCE_
<android.app.Activity: boolean isLocalVoiceInteractionSupported()> -> _SOURCE_
<javax.security.auth.Subject: boolean isReadOnly()> -> _SOURCE_
<java.util.concurrent.CountedCompleter: int getPendingCount()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.lang.String getContentCaptureServicePackageName()> -> _SOURCE_
<java.security.AlgorithmParameters: byte[] getEncoded()> -> _SOURCE_
<com.android.server.usage.AppStandbyInternal: com.android.server.usage.AppStandbyInternal newAppStandbyController(java.lang.ClassLoader,android.content.Context,android.os.Looper)> -> _SOURCE_
<android.content.RestrictionsManager: android.os.Bundle getApplicationRestrictions()> -> _SOURCE_
<android.telephony.ims.ImsSsInfo$Builder: android.telephony.ims.ImsSsInfo build()> -> _SOURCE_
<com.android.internal.os.RailStats: void updateRailData(long,java.lang.String,java.lang.String,long,long)> -> _SOURCE_
<android.os.UserManager: android.os.Bundle getDefaultGuestRestrictions()> -> _SOURCE_
<android.app.admin.FactoryResetProtectionPolicy: java.lang.String toString()> -> _SOURCE_
<android.net.http.HttpResponseCache: com.android.okhttp.internalandroidapi.HasCacheHolder$CacheHolder getCacheHolder()> -> _SOURCE_
<android.app.DownloadManager: java.lang.Long getMaxBytesOverMobile(android.content.Context)> -> _SOURCE_
<android.provider.CalendarContract$Attendees: android.database.Cursor query(android.content.ContentResolver,long,java.lang.String[])> -> _SOURCE_
<android.content.Intent$ShortcutIconResource: java.lang.String toString()> -> _SOURCE_
<java.util.logging.LogRecord: java.lang.String getMessage()> -> _SOURCE_
<java.util.BitSet: java.lang.String toString()> -> _SOURCE_
<android.hardware.radio.RadioManager$AmBandConfig: java.lang.String toString()> -> _SOURCE_
<android.app.assist.AssistStructure: long getAcquisitionStartTime()> -> _SOURCE_
<android.telephony.SignalStrength: int getWcdmaAsuLevel()> -> _SOURCE_
<com.android.server.backup.AccountSyncSettingsBackupHelper: void restoreEntity(android.app.backup.BackupDataInputStream)> -> _SOURCE_
<android.media.MediaRoute2Info: int getConnectionState()> -> _SOURCE_
<android.app.Instrumentation: boolean isProfiling()> -> _SOURCE_
<android.content.pm.PackageInstaller$SessionInfo: boolean getAllocateAggressive()> -> _SOURCE_
<android.media.tv.TvInputManager: android.media.tv.TvInputManager$Hardware acquireTvInputHardware(int,android.media.tv.TvInputInfo,android.media.tv.TvInputManager$HardwareCallback)> -> _SOURCE_
<android.telephony.euicc.EuiccManager: void getDefaultDownloadableSubscriptionList(android.app.PendingIntent)> -> _SOURCE_
<android.media.MediaDescription: java.lang.String getMediaId()> -> _SOURCE_
<android.net.metrics.ApfStats$Builder: android.net.metrics.ApfStats build()> -> _SOURCE_
<java.security.spec.ECPoint: java.math.BigInteger getAffineX()> -> _SOURCE_
<android.hardware.location.NanoApp: long getAppId()> -> _SOURCE_
<java.time.LocalDateTime: java.time.LocalDateTime now(java.time.Clock)> -> _SOURCE_
<android.net.ConnectivityManager: android.net.Network registerNetworkAgent(android.os.Messenger,android.net.NetworkInfo,android.net.LinkProperties,android.net.NetworkCapabilities,int,android.net.NetworkAgentConfig)> -> _SOURCE_
<android.app.NotificationChannel: java.lang.String getParentChannelId()> -> _SOURCE_
<android.os.UserHandle: android.os.UserHandle getUserHandleForUid(int)> -> _SOURCE_
<android.media.AudioFocusRequest: int getFocusGain()> -> _SOURCE_
<android.content.pm.ApplicationInfo: boolean isVirtualPreload()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.util.List getAllPermissionGroups(int)> -> _SOURCE_
<android.service.chooser.ChooserTarget: android.graphics.drawable.Icon getIcon()> -> _SOURCE_
<android.telecom.Connection: java.lang.String capabilitiesToStringShort(int)> -> _SOURCE_
<java.util.Arrays: java.lang.String toString(long[])> -> _SOURCE_
<android.os.TimestampedValue: java.lang.String toString()> -> _SOURCE_
<android.app.BroadcastOptions: android.os.Bundle toBundle()> -> _SOURCE_
<android.telephony.gsm.GsmCellLocation: int getCid()> -> _SOURCE_
<android.app.Notification$WearableExtender: java.lang.String getBridgeTag()> -> _SOURCE_
<android.telephony.ServiceState: java.lang.String getVoiceOperatorAlphaLong()> -> _SOURCE_
<android.view.ViewConfiguration: int getScaledMaximumFlingVelocity()> -> _SOURCE_
<android.os.StrictMode: boolean vmRegistrationLeaksEnabled()> -> _SOURCE_
<android.net.ConnectivityManager: android.net.LinkProperties getActiveLinkProperties()> -> _SOURCE_
<android.telephony.data.ApnSetting: int getApnTypeBitmask()> -> _SOURCE_
<android.telephony.cdma.CdmaCellLocation: int getNetworkId()> -> _SOURCE_
<android.content.ContextWrapper: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory)> -> _SOURCE_
<android.telephony.SignalStrength: java.util.List getCellSignalStrengths()> -> _SOURCE_
<java.net.URLConnection: java.net.URL getURL()> -> _SOURCE_
<android.telephony.gsm.GsmCellLocation: int getLac()> -> _SOURCE_
<android.widget.Toolbar: android.view.Menu getMenu()> -> _SOURCE_
<android.location.LocationRequest: java.lang.String qualityToString(int)> -> _SOURCE_
<android.content.pm.parsing.result.ParseInput$DeferredError: int getTargetSdkForChange(long)> -> _SOURCE_
<android.hardware.location.NanoApp: int getNeededReadMemBytes()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: void uninstallPackageWithActiveAdmins(java.lang.String)> -> _SOURCE_
<android.service.autofill.FillRequest: android.os.Bundle getClientState()> -> _SOURCE_
<android.service.autofill.FillEventHistory$Event: java.util.Map getManuallyEnteredField()> -> _SOURCE_
<android.view.inputmethod.InputBinding: android.os.IBinder getConnectionToken()> -> _SOURCE_
<android.view.textclassifier.SystemTextClassifierMetadata: int getUserId()> -> _SOURCE_
<android.os.Environment: java.io.File getDataSystemCeDirectory(int)> -> _SOURCE_
<android.bluetooth.BluetoothHeadset: boolean isAudioConnected(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<android.app.assist.AssistStructure$ViewNode: int getScrollX()> -> _SOURCE_
<android.media.tv.tuner.filter.SectionSettingsWithTableInfo: int getTableId()> -> _SOURCE_
<android.app.usage.StorageStatsManager: long getFreeBytes(java.util.UUID)> -> _SOURCE_
<android.hardware.radio.ProgramSelector: java.lang.String toString()> -> _SOURCE_
<android.view.View: android.graphics.Rect getClipBounds()> -> _SOURCE_
<android.net.NetworkCapabilities: java.util.Set getUids()> -> _SOURCE_
<android.content.pm.AuxiliaryResolveInfo$AuxiliaryFilter: java.lang.String toString()> -> _SOURCE_
<android.content.pm.InstallationFile: byte[] getSignature()> -> _SOURCE_
<android.bluetooth.BluetoothCodecStatus: android.bluetooth.BluetoothCodecConfig[] getCodecsSelectableCapabilities()> -> _SOURCE_
<android.media.AudioSystem: java.util.Set intersectionAudioDeviceTypes(java.util.Set,java.util.Set)> -> _SOURCE_
<java.lang.invoke.MethodHandle: java.lang.String toString()> -> _SOURCE_
<android.view.DisplayAddress$Physical: byte getPort()> -> _SOURCE_
<android.hardware.camera2.marshal.MarshalHelpers: int getPrimitiveTypeSize(int)> -> _SOURCE_
<javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String,java.security.Provider)> -> _SOURCE_
<android.hardware.usb.UsbDeviceConnection: java.lang.String getSerial()> -> _SOURCE_
<android.os.Debug$MemoryInfo: int getSummaryGraphics()> -> _SOURCE_
<android.util.jar.StrictJarFile: java.security.cert.Certificate[] getCertificates(java.util.zip.ZipEntry)> -> _SOURCE_
<android.content.Intent: int getContentUserHint()> -> _SOURCE_
<android.media.tv.TvInputInfo: android.content.pm.ServiceInfo getServiceInfo()> -> _SOURCE_
<android.content.pm.LauncherActivityInfo: int getApplicationFlags()> -> _SOURCE_
<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.BlockingQueue getQueue()> -> _SOURCE_
<android.os.Bundle: byte getByte(java.lang.String)> -> _SOURCE_
<android.net.IpSecManager$IpSecTunnelInterface: java.lang.String toString()> -> _SOURCE_
<android.text.style.TtsSpan$DecimalBuilder: android.text.style.TtsSpan$DecimalBuilder setFractionalPart(java.lang.String)> -> _SOURCE_
<android.telecom.Call$Details: android.telecom.DisconnectCause getDisconnectCause()> -> _SOURCE_
<android.security.KeyStore: void onDeviceOffBody()> -> _SOURCE_
<android.net.NetworkCapabilities: int getLinkUpstreamBandwidthKbps()> -> _SOURCE_
<android.location.LocationRequest: int getNumUpdates()> -> _SOURCE_
<android.widget.ToastPresenter: android.view.View getView()> -> _SOURCE_
<android.app.usage.UsageStats: long getLastTimeStamp()> -> _SOURCE_
<android.app.AppOpsManager: java.lang.String toReceiverId(java.lang.Object)> -> _SOURCE_
<java.util.concurrent.ConcurrentHashMap: java.lang.String toString()> -> _SOURCE_
<android.inputmethodservice.InputMethodService: void onExtractedSetSpan(java.lang.Object,int,int,int)> -> _SOURCE_
<android.app.contentsuggestions.ContentClassification: java.lang.String getId()> -> _SOURCE_
<java.util.Locale$LanguageRange: java.lang.String getRange()> -> _SOURCE_
<android.media.tv.TvInputService$Session: void onTimeShiftPlay(android.net.Uri)> -> _SOURCE_
<android.nfc.cardemulation.HostApduService: android.os.IBinder onBind(android.content.Intent)> -> _SOURCE_
<android.app.backup.RestoreObserver: void restoreSetsAvailable(android.app.backup.RestoreSet[])> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing$EqBand: float getGain()> -> _SOURCE_
<android.telephony.ims.ImsSsData: void setSuppServiceInfo(int[])> -> _SOURCE_
<android.view.accessibility.AccessibilityRecord: int getScrollX()> -> _SOURCE_
<java.util.Collections: java.util.Collection synchronizedCollection(java.util.Collection)> -> _SOURCE_
<android.content.integrity.AtomicFormula$BooleanAtomicFormula: boolean isInstallerFormula()> -> _SOURCE_
<android.telephony.data.DataProfile: int getMtuV4()> -> _SOURCE_
<java.util.Vector: java.lang.Object[] toArray()> -> _SOURCE_
<android.nfc.cardemulation.CardEmulation: boolean setDefaultServiceForCategory(android.content.ComponentName,java.lang.String)> -> _SOURCE_
<android.net.MobileLinkQualityInfo: int getLteRssnr()> -> _SOURCE_
<android.app.NotificationManager: android.app.NotificationManager$Policy getNotificationPolicy()> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing$Channel: android.media.audiofx.DynamicsProcessing$MbcBand getMbcBand(int)> -> _SOURCE_
<android.os.BatteryStatsManager: android.os.connectivity.WifiBatteryStats getWifiBatteryStats()> -> _SOURCE_
<android.content.ContextWrapper: java.lang.String getPackageCodePath()> -> _SOURCE_
<android.hardware.location.ContextHubManager: android.hardware.location.ContextHubTransaction queryNanoApps(android.hardware.location.ContextHubInfo)> -> _SOURCE_
<android.app.ActivityView: float getCornerRadius()> -> _SOURCE_
<android.provider.Settings$System: android.net.Uri getUriFor(java.lang.String)> -> _SOURCE_
<android.media.MediaRoute2Info: java.lang.String getClientPackageName()> -> _SOURCE_
<android.telephony.TelephonyManager: android.telephony.ServiceState getServiceStateForSubscriber(int)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: long getRequiredStrongAuthTimeout(android.content.ComponentName,int)> -> _SOURCE_
<android.media.tv.tuner.filter.TemiEvent: byte getDescriptorTag()> -> _SOURCE_
<android.media.MediaDrm$KeyRequest: int getRequestType()> -> _SOURCE_
<java.security.cert.CertStore: java.lang.String getType()> -> _SOURCE_
<android.se.omapi.Session: byte[] getATR()> -> _SOURCE_
<android.media.session.MediaController$PlaybackInfo: int getPlaybackType()> -> _SOURCE_
<android.hardware.Sensor: boolean isAdditionalInfoSupported()> -> _SOURCE_
<android.widget.OverScroller: int getStartX()> -> _SOURCE_
<android.os.BatterySaverPolicyConfig: java.lang.String toString()> -> _SOURCE_
<com.android.internal.widget.RecyclerView: com.android.internal.widget.RecyclerView$ItemAnimator getItemAnimator()> -> _SOURCE_
<com.android.internal.telephony.GsmAlphabet: int countGsmSeptetsUsingTables(java.lang.CharSequence,boolean,int,int)> -> _SOURCE_
<android.os.Looper: android.os.MessageQueue getQueue()> -> _SOURCE_
<android.app.PendingIntent: android.app.PendingIntent getActivitiesAsUser(android.content.Context,int,android.content.Intent[],int,android.os.Bundle,android.os.UserHandle)> -> _SOURCE_
<android.graphics.Paint: int getTextWidths(java.lang.String,int,int,float[])> -> _SOURCE_
<android.service.notification.ConditionProviderService: android.os.IBinder onBind(android.content.Intent)> -> _SOURCE_
<android.widget.AbsListView: long[] getCheckedItemIds()> -> _SOURCE_
<android.view.View: android.graphics.drawable.Drawable getHorizontalScrollbarThumbDrawable()> -> _SOURCE_
<android.appwidget.AppWidgetProvider: void onDisabled(android.content.Context)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: android.util.ArrayMap getSyncStats()> -> _SOURCE_
<android.timezone.TzDataSetVersion: java.lang.String toString()> -> _SOURCE_
<java.nio.file.FileSystems: java.nio.file.FileSystem newFileSystem(java.net.URI,java.util.Map,java.lang.ClassLoader)> -> _SOURCE_
<android.service.notification.StatusBarNotification: java.lang.String getPackageName()> -> _SOURCE_
<android.service.dreams.DreamService: android.view.WindowManager getWindowManager()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: void clearSystemUpdatePolicyFreezePeriodRecord()> -> _SOURCE_
<android.provider.DeviceConfig: void enforceReadPermission(android.content.Context,java.lang.String)> -> _SOURCE_
<android.print.PrinterId: java.lang.String toString()> -> _SOURCE_
<android.telephony.emergency.EmergencyNumber: boolean isInEmergencyServiceCategories(int)> -> _SOURCE_
<android.telephony.RadioAccessSpecifier: int getRadioAccessNetwork()> -> _SOURCE_
<android.bluetooth.BluetoothHeadsetClient: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
<android.net.ProxyInfo: android.net.ProxyInfo buildPacProxy(android.net.Uri)> -> _SOURCE_
<android.app.slice.SliceItem: boolean hasHints(java.lang.String[])> -> _SOURCE_
<android.hardware.input.KeyboardLayout: java.lang.String toString()> -> _SOURCE_
<android.app.LocalActivityManager: android.os.Bundle saveInstanceState()> -> _SOURCE_
<android.telephony.AccessNetworkConstants$NgranBands: int getFrequencyRangeGroup(int)> -> _SOURCE_
<android.media.tv.tuner.filter.TlvFilterConfiguration: boolean isCompressedIpPacket()> -> _SOURCE_
<java.time.OffsetDateTime: int getDayOfYear()> -> _SOURCE_
<com.android.internal.telephony.TelephonyPermissions: boolean checkReadPhoneNumber(android.content.Context,int,int,int,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<com.android.ims.internal.uce.presence.PresResInfo: com.android.ims.internal.uce.presence.PresResInstanceInfo getInstanceInfo()> -> _SOURCE_
<android.content.pm.InstallSourceInfo: java.lang.String getInstallingPackageName()> -> _SOURCE_
<android.service.dreams.DreamService: boolean onPreparePanel(int,android.view.View,android.view.Menu)> -> _SOURCE_
<com.android.internal.telephony.uicc.asn1.TagNotFoundException: java.lang.String getMessage()> -> _SOURCE_
<java.lang.EnumConstantNotPresentException: java.lang.Class enumType()> -> _SOURCE_
<android.net.NetworkCapabilities: int getSignalStrength()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg: void onTimeStopped(long,long,long)> -> _SOURCE_
<java.net.URL: java.lang.String getAuthority()> -> _SOURCE_
<java.util.concurrent.atomic.AtomicLong: long longValue()> -> _SOURCE_
<android.provider.Contacts$People: long tryGetMyContactsGroupId(android.content.ContentResolver)> -> _SOURCE_
<java.nio.charset.MalformedInputException: int getInputLength()> -> _SOURCE_
<android.app.usage.ExternalStorageStats: long getVideoBytes()> -> _SOURCE_
<android.accessibilityservice.AccessibilityServiceInfo: java.lang.String feedbackTypeToString(int)> -> _SOURCE_
<java.lang.Package: java.lang.String getImplementationVersion()> -> _SOURCE_
<android.widget.AlphabetIndexer: java.lang.Object[] getSections()> -> _SOURCE_
<android.media.AudioTrack: int getNativeOutputSampleRate(int)> -> _SOURCE_
<android.provider.BlockedNumberContract$SystemContract: int shouldSystemBlockNumber(android.content.Context,java.lang.String,android.os.Bundle)> -> _SOURCE_
<android.net.ProxyInfo: java.net.InetSocketAddress getSocketAddress()> -> _SOURCE_
<javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)> -> _SOURCE_
<android.media.AudioSystem: java.lang.String audioSystemErrorToString(int)> -> _SOURCE_
<com.android.ims.internal.uce.common.CapInfo: boolean isSharedMapSupported()> -> _SOURCE_
<android.telephony.ims.ImsReasonInfo: int getCode()> -> _SOURCE_
<android.media.MediaDrm$ProvisionRequest: byte[] getData()> -> _SOURCE_
<android.filterfw.GraphEnvironment: android.filterfw.io.GraphReader getGraphReader()> -> _SOURCE_
<android.media.AudioSystem: java.lang.String getOutputDeviceName(int)> -> _SOURCE_
<android.telecom.PhoneAccount: boolean supportsUriScheme(java.lang.String)> -> _SOURCE_
<android.app.VrManager: int getVr2dDisplayId()> -> _SOURCE_
<android.telecom.TelecomManager: java.util.List getCallCapablePhoneAccounts(boolean)> -> _SOURCE_
<android.content.pm.InstantAppInfo: android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager)> -> _SOURCE_
<java.security.KeyStore: void store(java.io.OutputStream,char[])> -> _SOURCE_
<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$EncoderCapabilities getEncoderCapabilities()> -> _SOURCE_
<android.telecom.Call: void hold()> -> _SOURCE_
<android.widget.inline.InlineContentView: android.view.SurfaceControl getSurfaceControl()> -> _SOURCE_
<android.provider.CalendarContract$EventDays: android.database.Cursor query(android.content.ContentResolver,int,int,java.lang.String[])> -> _SOURCE_
<android.net.LinkProperties: int getMtu()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: android.os.Bundle getApplicationRestrictions(android.content.ComponentName,java.lang.String)> -> _SOURCE_
<java.lang.'annotation'.IncompleteAnnotationException: java.lang.String elementName()> -> _SOURCE_
<android.telephony.ims.RcsContactUceCapability: java.util.List getCapableExtensionTags()> -> _SOURCE_
<java.util.Calendar: java.util.Calendar getInstance()> -> _SOURCE_
<android.hardware.camera2.impl.CameraMetadataNative: long getMetadataPtr()> -> _SOURCE_
<android.net.NetworkStats: android.net.NetworkStats insertEntry(java.lang.String,int,int,int,long,long,long,long,long)> -> _SOURCE_
<android.drm.DrmInfo: java.lang.Object get(java.lang.String)> -> _SOURCE_
<android.telephony.data.ApnSetting: android.content.ContentValues toContentValues()> -> _SOURCE_
<android.location.LocationManager: java.util.List getProviders(boolean)> -> _SOURCE_
<android.view.SurfaceControl: boolean clearAnimationFrameStats()> -> _SOURCE_
<android.telecom.TelecomManager: android.telecom.PhoneAccount getPhoneAccount(android.telecom.PhoneAccountHandle)> -> _SOURCE_
<android.net.LinkQualityInfo: int getNetworkType()> -> _SOURCE_
<android.graphics.SurfaceTexture: boolean isReleased()> -> _SOURCE_
<android.app.ApplicationPackageManager: android.os.Bundle getSuspendedPackageAppExtras()> -> _SOURCE_
<android.printservice.PrintJob: android.printservice.PrintDocument getDocument()> -> _SOURCE_
<android.content.pm.ApplicationInfo: java.lang.String[] getSplitCodePaths()> -> _SOURCE_
<java.security.CodeSigner: java.security.Timestamp getTimestamp()> -> _SOURCE_
<android.content.Intent: long getLongExtra(java.lang.String,long)> -> _SOURCE_
<android.os.Environment: java.io.File getPackageCacheDirectory()> -> _SOURCE_
<android.content.pm.parsing.ApkLiteParseUtils: android.content.pm.parsing.result.ParseResult parseApkLite(android.content.pm.parsing.result.ParseInput,java.io.FileDescriptor,java.lang.String,int)> -> _SOURCE_
<android.hardware.soundtrigger.SoundTrigger$ModuleProperties: java.lang.String getImplementor()> -> _SOURCE_
<android.os.Debug: void resetGlobalExternalAllocSize()> -> _SOURCE_
<android.security.keystore.AndroidKeyStoreProvider: long getKeyStoreOperationHandle(java.lang.Object)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: long getPasswordExpirationTimeout(android.content.ComponentName)> -> _SOURCE_
<android.view.accessibility.AccessibilityEvent: int describeContents()> -> _SOURCE_
<android.telephony.TelephonyRegistryManager: void notifyOutgoingEmergencySms(int,int,android.telephony.emergency.EmergencyNumber)> -> _SOURCE_
<android.media.VolumeShaper$Configuration: int getOptionFlags()> -> _SOURCE_
<android.view.textclassifier.TextLanguage$Request: android.os.Bundle getExtras()> -> _SOURCE_
<android.nfc.cardemulation.NfcFCardEmulation: java.lang.String getSystemCodeForService(android.content.ComponentName)> -> _SOURCE_
<android.telecom.TelecomManager: int getAllPhoneAccountsCount()> -> _SOURCE_
<android.telecom.GatewayInfo: int describeContents()> -> _SOURCE_
<android.location.Criteria: boolean isBearingRequired()> -> _SOURCE_
<android.widget.ShareActionProvider: android.view.View onCreateActionView()> -> _SOURCE_
<android.app.RemoteAction: java.lang.CharSequence getContentDescription()> -> _SOURCE_
<android.security.keystore.recovery.KeyChainSnapshot: java.security.cert.CertPath getTrustedHardwareCertPath()> -> _SOURCE_
<android.os.storage.StorageManager: java.io.File maybeTranslateEmulatedPathToInternal(java.io.File)> -> _SOURCE_
<android.hardware.Camera$Parameters: java.lang.String getAntibanding()> -> _SOURCE_
<android.net.wifi.nl80211.NativeWifiClient: android.net.MacAddress getMacAddress()> -> _SOURCE_
<android.telephony.ims.ImsCallProfile: java.util.List getEmergencyUrns()> -> _SOURCE_
<android.widget.ExpandableListView: int getPackedPositionGroup(long)> -> _SOURCE_
<android.content.Context: int getUserId()> -> _SOURCE_
<java.util.concurrent.locks.AbstractQueuedSynchronizer: void acquire(int)> -> _SOURCE_
<android.media.MediaExtractor: android.media.MediaFormat getTrackFormat(int)> -> _SOURCE_
<android.view.contentcapture.ViewNode$ViewStructureImpl: int getChildCount()> -> _SOURCE_
<android.os.Parcel: byte readByte()> -> _SOURCE_
<android.bluetooth.BluetoothHeadsetClientCall: boolean isInBandRing()> -> _SOURCE_
<java.time.ZonedDateTime: java.time.LocalDate toLocalDate()> -> _SOURCE_
<java.net.URL: java.lang.String getQuery()> -> _SOURCE_
<android.view.textclassifier.ConversationActions$Message: java.time.ZonedDateTime getReferenceTime()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: int getPasswordMinimumLength(android.content.ComponentName)> -> _SOURCE_
<android.text.TextUtils: java.lang.String safeIntern(java.lang.String)> -> _SOURCE_
<android.widget.RatingBar: android.widget.RatingBar$OnRatingBarChangeListener getOnRatingBarChangeListener()> -> _SOURCE_
<android.telephony.ims.ImsSsData: int getRequestType()> -> _SOURCE_
<android.media.AudioManager: java.lang.String flagsToString(int)> -> _SOURCE_
<android.telecom.CallerInfo: android.telecom.CallerInfo getCallerInfo(android.content.Context,android.net.Uri,android.database.Cursor)> -> _SOURCE_
<com.android.internal.util.StateMachine: java.util.Collection copyLogRecs()> -> _SOURCE_
<android.hardware.hdmi.HdmiRecordListener$TimerStatusData: int getDurationHour()> -> _SOURCE_
<android.app.ApplicationPackageManager: android.content.res.Resources getResourcesForActivity(android.content.ComponentName)> -> _SOURCE_
<android.telephony.ims.ImsSsData$Builder: android.telephony.ims.ImsSsData build()> -> _SOURCE_
<android.net.ConnectivityManager: android.net.Network getActiveNetworkForUid(int)> -> _SOURCE_
<android.content.res.Resources: android.content.res.ResourcesImpl getImpl()> -> _SOURCE_
<android.service.notification.NotificationStats: boolean hasSeen()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: com.android.internal.os.BatteryStatsImpl$SamplingTimer getWakeupReasonTimerLocked(java.lang.String)> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isVoiceCapable()> -> _SOURCE_
<android.hardware.camera2.utils.TypeReference: java.lang.reflect.Type getType()> -> _SOURCE_
<android.os.Environment: java.io.File[] buildExternalStorageAndroidDataDirs()> -> _SOURCE_
<android.content.pm.PackageInstaller$SessionInfo: long getCreatedMillis()> -> _SOURCE_
<android.os.storage.StorageManager: android.os.storage.VolumeInfo findVolumeByQualifiedUuid(java.lang.String)> -> _SOURCE_
<com.android.internal.infra.RemoteStream: com.android.internal.infra.AndroidFuture sendBytes(com.android.internal.util.FunctionalUtils$ThrowingConsumer,byte[])> -> _SOURCE_
<android.media.MediaRouter2Manager: java.util.List getSelectedRoutes(android.media.RoutingSessionInfo)> -> _SOURCE_
<java.security.Security: java.security.Provider[] getProviders(java.lang.String)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getIccAuthentication(int,int,java.lang.String)> -> _SOURCE_
<android.media.VolumeShaper$State: float getXOffset()> -> _SOURCE_
<android.net.Network: java.lang.String toString()> -> _SOURCE_
<android.content.pm.ApplicationInfo: java.lang.String getResourcePath()> -> _SOURCE_
<java.time.chrono.Chronology: java.util.Set getAvailableChronologies()> -> _SOURCE_
<android.net.InterfaceConfiguration: java.lang.String toString()> -> _SOURCE_
<android.content.res.Resources: android.graphics.drawable.DrawableInflater getDrawableInflater()> -> _SOURCE_
<android.telephony.ims.compat.stub.ImsCallSessionImplBase: android.telephony.ims.ImsCallProfile getCallProfile()> -> _SOURCE_
<android.content.IntentFilter: void addDataPath(android.os.PatternMatcher)> -> _SOURCE_
<android.app.ApplicationPackageManager: java.lang.String getWellbeingPackageName()> -> _SOURCE_
<android.content.res.Resources: boolean resourceHasPackage(int)> -> _SOURCE_
<android.content.pm.ActivityInfo: java.lang.String resizeModeToString(int)> -> _SOURCE_
<android.content.ContextWrapper: java.lang.String getPackageResourcePath()> -> _SOURCE_
<android.telecom.CallerInfo: android.telecom.CallerInfo getCallerInfo(android.content.Context,java.lang.String)> -> _SOURCE_
<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.view.Surface getInputSurface()> -> _SOURCE_
<java.security.Signature: java.security.Signature getInstance(java.lang.String)> -> _SOURCE_
<android.media.AudioManager: int listAudioPorts(java.util.ArrayList)> -> _SOURCE_
<android.filterfw.core.FilterFunction: java.lang.String toString()> -> _SOURCE_
<android.telecom.ParcelableCallAnalytics: java.util.List getVideoEvents()> -> _SOURCE_
<android.location.LocationRequest: float getSmallestDisplacement()> -> _SOURCE_
<android.media.session.MediaController$PlaybackInfo: int getVolumeControl()> -> _SOURCE_
<android.telephony.mbms.DownloadRequest: android.net.Uri getSourceUri()> -> _SOURCE_
<android.telephony.ims.stub.ImsConfigImplBase$ImsConfigStub: java.lang.String getConfigString(int)> -> _SOURCE_
<android.content.ContextWrapper: android.os.UserHandle getUser()> -> _SOURCE_
<android.content.Intent: java.lang.String toShortString(boolean,boolean,boolean,boolean)> -> _SOURCE_
<android.bluetooth.le.AdvertisingSet: int getAdvertiserId()> -> _SOURCE_
<android.app.admin.DevicePolicyEventLogger: void write()> -> _SOURCE_
<com.android.internal.widget.RecyclerView: long getChildItemId(android.view.View)> -> _SOURCE_
<android.net.NetworkPolicyManager$SubscriptionCallback: void onSubscriptionOverride(int,int,int)> -> _SOURCE_
<android.net.util.nsd.DnsSdTxtRecord: int keyCount()> -> _SOURCE_
<com.android.internal.telephony.gsm.SmsMessage: com.android.internal.telephony.gsm.SmsMessage newFromCMT(byte[])> -> _SOURCE_
<android.app.Service: void onDestroy()> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: void disableBluetoothGetStateCache()> -> _SOURCE_
<android.telephony.ims.feature.ImsFeature: int getSlotIndex()> -> _SOURCE_
<android.media.MediaRoute2ProviderInfo: boolean isValid()> -> _SOURCE_
<android.telecom.ConnectionService: void onConferenceRemoved(android.telecom.Conference)> -> _SOURCE_
<android.hardware.hdmi.HdmiRecordListener: void onOneTouchRecordResult(int,int)> -> _SOURCE_
<javax.net.ssl.SSLEngine: void setSSLParameters(javax.net.ssl.SSLParameters)> -> _SOURCE_
<android.location.GnssClock: double getDriftNanosPerSecond()> -> _SOURCE_
<android.app.slice.SliceItem: java.lang.String getSubType()> -> _SOURCE_
<android.hardware.display.AmbientDisplayConfiguration: boolean dozeSuppressed(int)> -> _SOURCE_
<android.telephony.ServiceState: int getVoiceRegState()> -> _SOURCE_
<android.net.lowpan.LowpanManager: android.net.lowpan.LowpanManager getManager()> -> _SOURCE_
<android.content.integrity.IntegrityFormula$Installer: android.content.integrity.IntegrityFormula packageNameEquals(java.lang.String)> -> _SOURCE_
<java.util.Locale: java.lang.String getVariant()> -> _SOURCE_
<android.media.tv.tuner.filter.MediaEvent: long getAvDataId()> -> _SOURCE_
<android.view.InputEventConsistencyVerifier: boolean isInstrumentationEnabled()> -> _SOURCE_
<android.app.Fragment: java.lang.String toString()> -> _SOURCE_
<java.security.Security: java.lang.String getAlgorithmProperty(java.lang.String,java.lang.String)> -> _SOURCE_
<android.app.ActivityManager: void forceStopPackage(java.lang.String)> -> _SOURCE_
<android.telephony.CellSignalStrengthGsm: int getTimingAdvance()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long getFlashlightOnCount(int)> -> _SOURCE_
<java.time.chrono.HijrahDate: java.time.chrono.HijrahDate now(java.time.Clock)> -> _SOURCE_
<android.permission.RuntimePermissionPresentationInfo: boolean isGranted()> -> _SOURCE_
<android.content.ContentProvider: android.content.IContentProvider getIContentProvider()> -> _SOURCE_
<android.app.Activity: android.os.IBinder getActivityToken()> -> _SOURCE_
<com.android.internal.telephony.SmsApplication: java.util.Collection getApplicationCollection(android.content.Context)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid$Sensor: android.os.BatteryStats$Timer getSensorBackgroundTime()> -> _SOURCE_
<android.app.Fragment: void onActivityResult(int,int,android.content.Intent)> -> _SOURCE_
<android.net.LinkProperties: android.net.util.LinkPropertiesUtils$CompareResult compareValidatedPrivateDnses(android.net.LinkProperties)> -> _SOURCE_
<android.hardware.display.BrightnessConfiguration: boolean shouldCollectColorSamples()> -> _SOURCE_
<java.time.chrono.ThaiBuddhistChronology: java.lang.String getId()> -> _SOURCE_
<com.android.internal.os.ProcessCpuTracker: int getLastIdleTime()> -> _SOURCE_
<android.telephony.euicc.EuiccCardManager: void retrieveNotificationList(java.lang.String,int,java.util.concurrent.Executor,android.telephony.euicc.EuiccCardManager$ResultCallback)> -> _SOURCE_
<java.time.temporal.WeekFields: java.time.temporal.TemporalField dayOfWeek()> -> _SOURCE_
<android.hardware.location.ContextHubClientCallback: void onNanoAppLoaded(android.hardware.location.ContextHubClient,long)> -> _SOURCE_
<com.android.internal.widget.LockPatternUtils: boolean isDeviceEncryptionEnabled()> -> _SOURCE_
<android.telephony.CellSignalStrengthCdma: int getCdmaEcio()> -> _SOURCE_
<android.telephony.MbmsGroupCallSession: android.telephony.MbmsGroupCallSession create(android.content.Context,java.util.concurrent.Executor,android.telephony.mbms.MbmsGroupCallSessionCallback)> -> _SOURCE_
<android.view.inputmethod.InputMethodSubtypeArray: int getCount()> -> _SOURCE_
<android.widget.TextView: boolean isAnyPasswordInputType()> -> _SOURCE_
<android.window.TaskEmbedder$Listener: void onBackPressedOnTaskRoot(int)> -> _SOURCE_
<android.service.carrier.CarrierMessagingServiceWrapper: boolean bindToCarrierMessagingService(android.content.Context,java.lang.String)> -> _SOURCE_
<android.telephony.UiccCardInfo: boolean isRemovable()> -> _SOURCE_
<android.print.PrintJob: boolean isCancelled()> -> _SOURCE_
<android.telephony.CbGeoUtils$Circle: java.lang.String toString()> -> _SOURCE_
<android.os.Debug: int getGlobalGcInvocationCount()> -> _SOURCE_
<android.os.StatsServiceManager$ServiceRegisterer: android.os.IBinder get()> -> _SOURCE_
<android.media.MediaPlayer: android.media.MediaTimeProvider getMediaTimeProvider()> -> _SOURCE_
<android.media.MediaCodecInfo$AudioCapabilities: android.util.Range[] getSupportedSampleRateRanges()> -> _SOURCE_
<android.webkit.URLUtil: java.lang.String guessFileName(java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.service.voice.AlwaysOnHotwordDetector$ModelParamRange: java.lang.String toString()> -> _SOURCE_
<android.app.job.JobWorkItem: int getWorkId()> -> _SOURCE_
<android.print.PrintJob: boolean isStarted()> -> _SOURCE_
<java.time.chrono.HijrahChronology: java.lang.String getCalendarType()> -> _SOURCE_
<android.telephony.SmsCbMessage: int getSerialNumber()> -> _SOURCE_
<android.app.ActivityOptions: android.app.ActivityOptions makeBasic()> -> _SOURCE_
<android.service.controls.actions.CommandAction: int getActionType()> -> _SOURCE_
<java.util.concurrent.ForkJoinPool: java.lang.Thread$UncaughtExceptionHandler getUncaughtExceptionHandler()> -> _SOURCE_
<android.view.textclassifier.TextLinks$Request: boolean isLegacyFallback()> -> _SOURCE_
<android.webkit.URLUtil: boolean isResourceUrl(java.lang.String)> -> _SOURCE_
<android.net.LinkProperties: boolean hasIpv6DefaultRoute()> -> _SOURCE_
<android.net.NetworkAgentConfig: boolean isUnvalidatedConnectivityAcceptable()> -> _SOURCE_
<android.util.KeyValueListParser$IntValue: java.lang.String getKey()> -> _SOURCE_
<android.location.GnssAntennaInfo$PhaseCenterOffset: java.lang.String toString()> -> _SOURCE_
<android.view.accessibility.AccessibilityCache: android.view.accessibility.AccessibilityNodeInfo getNode(int,long)> -> _SOURCE_
<android.telephony.CellSignalStrengthLte: android.telephony.CellSignalStrengthLte copy()> -> _SOURCE_
<android.app.backup.BackupTransport: int startRestore(long,android.content.pm.PackageInfo[])> -> _SOURCE_
<android.media.MediaRouter2Manager$Callback: void onRoutesAdded(java.util.List)> -> _SOURCE_
<android.hardware.camera2.impl.CameraCaptureSessionImpl: boolean isReprocessable()> -> _SOURCE_
<android.media.AudioDevicePort: java.lang.String toString()> -> _SOURCE_
<android.app.ActivityManager: int getMemoryClass()> -> _SOURCE_
<android.app.usage.NetworkStatsManager: android.app.usage.NetworkStats queryDetailsForUid(android.net.NetworkTemplate,long,long,int)> -> _SOURCE_
<android.content.pm.PackageInstaller: android.content.pm.PackageInstaller$Session openSession(int)> -> _SOURCE_
<android.app.role.RoleManager: java.util.List getRoleHoldersAsUser(java.lang.String,android.os.UserHandle)> -> _SOURCE_
<com.android.ims.internal.uce.presence.PresSipResponse: com.android.ims.internal.uce.presence.PresCmdId getCmdId()> -> _SOURCE_
<android.bluetooth.BluetoothHeadsetClientCall: java.lang.String toString(boolean)> -> _SOURCE_
<android.os.health.HealthStats: long getTimerTime(int)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: int getDischargeAmountScreenDozeSinceCharge()> -> _SOURCE_
<android.telephony.SmsCbEtwsInfo: boolean isPrimary()> -> _SOURCE_
<javax.net.ssl.SSLEngine: javax.net.ssl.SSLParameters getSSLParameters()> -> _SOURCE_
<android.hardware.usb.DeviceFilter: java.lang.String toString()> -> _SOURCE_
<android.view.VerifiedKeyEvent: int getFlags()> -> _SOURCE_
<android.provider.Settings$Bookmarks: android.content.Intent getIntentForShortcut(android.content.ContentResolver,char)> -> _SOURCE_
<android.service.carrier.MessagePdu: java.util.List getPdus()> -> _SOURCE_
<android.content.pm.UserInfo: boolean canHaveProfile()> -> _SOURCE_
<android.media.EncoderCapabilities: java.util.List getAudioEncoders()> -> _SOURCE_
<android.speech.tts.Voice: java.util.Locale getLocale()> -> _SOURCE_
<android.hardware.input.InputManager: int isMicMuted()> -> _SOURCE_
<android.media.AudioManager: int getStreamMaxVolume(int)> -> _SOURCE_
<android.os.Looper: android.os.Looper myLooper()> -> _SOURCE_
<android.telephony.mbms.vendor.MbmsStreamingServiceBase: void onAppCallbackDied(int,int)> -> _SOURCE_
<android.os.StrictMode: void onSqliteObjectLeaked(java.lang.String,java.lang.Throwable)> -> _SOURCE_
<android.telephony.TelephonyManager: void listen(android.telephony.PhoneStateListener,int)> -> _SOURCE_
<android.telephony.euicc.EuiccCardManager: void requestRulesAuthTable(java.lang.String,java.util.concurrent.Executor,android.telephony.euicc.EuiccCardManager$ResultCallback)> -> _SOURCE_
<android.content.RestrictionsManager: boolean hasRestrictionsProvider()> -> _SOURCE_
<android.os.PowerWhitelistManager: void addToWhitelist(java.lang.String)> -> _SOURCE_
<java.util.Scanner: java.io.IOException ioException()> -> _SOURCE_
<java.util.Locale: java.lang.String getUnicodeLocaleType(java.lang.String)> -> _SOURCE_
<android.view.WindowInsets$Type: int mandatorySystemGestures()> -> _SOURCE_
<android.media.tv.tuner.frontend.DvbtFrontendCapabilities: boolean isT2Supported()> -> _SOURCE_
<android.media.session.PlaybackState$CustomAction: int getIcon()> -> _SOURCE_
<java.lang.Throwable: java.lang.String toString()> -> _SOURCE_
<java.time.LocalDate: java.time.LocalDate now()> -> _SOURCE_
<android.app.job.JobParameters: int[] getJobStopReasonCodes()> -> _SOURCE_
<android.renderscript.FieldPacker: int getPos()> -> _SOURCE_
<android.telephony.PreciseDataConnectionState: android.net.LinkProperties getLinkProperties()> -> _SOURCE_
<android.os.Debug: int getGlobalClassInitTime()> -> _SOURCE_
<java.nio.channels.FileLock: java.nio.channels.Channel acquiredBy()> -> _SOURCE_
<android.content.ContentCaptureOptions: void dumpShort(java.io.PrintWriter)> -> _SOURCE_
<android.app.Instrumentation: void waitForIdleSync()> -> _SOURCE_
<android.app.TaskStackBuilder: android.app.TaskStackBuilder create(android.content.Context)> -> _SOURCE_
<android.hardware.usb.UsbConfiguration: android.hardware.usb.UsbInterface getInterface(int)> -> _SOURCE_
<android.widget.BaseExpandableListAdapter: void notifyDataSetInvalidated()> -> _SOURCE_
<android.os.Environment: boolean isExternalStorageRemovable()> -> _SOURCE_
<android.content.res.AssetManager: boolean isUpToDate()> -> _SOURCE_
<android.telephony.TelephonyManager: void requestNumberVerification(android.telephony.PhoneNumberRange,long,java.util.concurrent.Executor,android.telephony.NumberVerificationCallback)> -> _SOURCE_
<android.app.Instrumentation: android.os.Bundle getBinderCounts()> -> _SOURCE_
<android.media.tv.tuner.frontend.IsdbtFrontendCapabilities: int getGuardIntervalCapability()> -> _SOURCE_
<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$AudioCapabilities getAudioCapabilities()> -> _SOURCE_
<android.nfc.NfcAdapter: android.nfc.INfcAdapterExtras getNfcAdapterExtrasInterface()> -> _SOURCE_
<android.view.Surface: boolean isAutoRefreshEnabled()> -> _SOURCE_
<android.telephony.TelephonyManager: int getNetworkType(int)> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: int getLiveRegion()> -> _SOURCE_
<android.database.sqlite.SQLiteCompatibilityWalFlags: java.lang.String getWALSyncMode()> -> _SOURCE_
<android.media.tv.tuner.filter.MediaEvent: android.media.MediaCodec$LinearBlock getLinearBlock()> -> _SOURCE_
<android.os.BatteryManager: long getLongProperty(int)> -> _SOURCE_
<android.service.notification.NotificationListenerService$Ranking: int getRank()> -> _SOURCE_
<android.os.Bundle: android.os.Bundle getBundle(java.lang.String)> -> _SOURCE_
<android.app.AppOpsManager: int checkOp(int,int,java.lang.String)> -> _SOURCE_
<android.hardware.fingerprint.FingerprintManager: long preEnroll()> -> _SOURCE_
<android.net.MailTo: java.lang.String getBody()> -> _SOURCE_
<android.content.integrity.IntegrityUtils: java.lang.String getHexDigest(byte[])> -> _SOURCE_
<android.content.pm.ModuleInfo: boolean isHidden()> -> _SOURCE_
<android.printservice.PrinterDiscoverySession: boolean isPrinterDiscoveryStarted()> -> _SOURCE_
<android.location.GnssMeasurementCorrections$Builder: android.location.GnssMeasurementCorrections$Builder setSingleSatelliteCorrectionList(java.util.List)> -> _SOURCE_
<android.util.EventLog$Event: java.lang.Object getData()> -> _SOURCE_
<android.nfc.NfcActivityManager: void onActivityStarted(android.app.Activity)> -> _SOURCE_
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor[] createPipe()> -> _SOURCE_
<java.io.File: java.io.File getAbsoluteFile()> -> _SOURCE_
<android.service.voice.VoiceInteractionSession$Request: android.os.Bundle getExtras()> -> _SOURCE_
<android.appwidget.AppWidgetManager: android.appwidget.AppWidgetProviderInfo getAppWidgetInfo(int)> -> _SOURCE_
<java.util.logging.Logger: java.util.logging.Logger getAnonymousLogger(java.lang.String)> -> _SOURCE_
<android.location.LocationRequest: java.lang.String getProvider()> -> _SOURCE_
<android.hardware.soundtrigger.SoundTrigger$Keyphrase: int getRecognitionModes()> -> _SOURCE_
<android.content.res.TypedArray: int length()> -> _SOURCE_
<android.telecom.TelecomManager: android.telecom.PhoneAccountHandle getConnectionManager()> -> _SOURCE_
<android.util.apk.ApkSignatureSchemeV2Verifier: java.security.cert.X509Certificate[][] verify(java.lang.String)> -> _SOURCE_
<android.hardware.radio.RadioManager$ModuleProperties: java.util.Map getDabFrequencyTable()> -> _SOURCE_
<java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String)> -> _SOURCE_
<android.os.Environment: java.io.File getDataSystemDeDirectory(int)> -> _SOURCE_
<android.provider.ContactsContract$Groups: android.content.EntityIterator newEntityIterator(android.database.Cursor)> -> _SOURCE_
<com.android.internal.logging.testing.UiEventLoggerFake: int numLogs()> -> _SOURCE_
<java.util.concurrent.locks.ReentrantReadWriteLock: int getWriteHoldCount()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean nvWriteItem(int,java.lang.String)> -> _SOURCE_
<android.os.WorkSource$WorkChain: java.lang.String getAttributionTag()> -> _SOURCE_
<android.view.autofill.AutofillManager: int getRequestIdFromAuthenticationId(int)> -> _SOURCE_
<java.io.ObjectInputStream: int readInt()> -> _SOURCE_
<android.telephony.VoLteServiceState: boolean equals(java.lang.Object)> -> _SOURCE_
<java.lang.TypeNotPresentException: java.lang.String typeName()> -> _SOURCE_
<android.content.ClipData: java.lang.String toString()> -> _SOURCE_
<android.telephony.SmsMessage: java.lang.String getRecipientAddress()> -> _SOURCE_
<android.content.pm.ApplicationInfo: boolean isEmbeddedDexUsed()> -> _SOURCE_
<android.service.carrier.CarrierMessagingClientService: android.os.IBinder onBind(android.content.Intent)> -> _SOURCE_
<java.net.Inet4Address: boolean isAnyLocalAddress()> -> _SOURCE_
<android.text.style.TtsSpan: android.os.PersistableBundle getArgs()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.lang.String[] getUnsuspendablePackages(java.lang.String[])> -> _SOURCE_
<android.media.MediaDrm$Certificate: byte[] getWrappedPrivateKey()> -> _SOURCE_
<android.service.controls.Control$StatelessBuilder: android.service.controls.Control build()> -> _SOURCE_
<android.content.pm.PackageParser: android.util.ArraySet toSigningKeys(android.content.pm.Signature[])> -> _SOURCE_
<android.security.keystore.recovery.RecoveryController: java.security.Key generateKey(java.lang.String)> -> _SOURCE_
<android.app.admin.FreezePeriod: java.lang.String toString()> -> _SOURCE_
<android.security.keymaster.KeyAttestationPackageInfo: long getPackageVersionCode()> -> _SOURCE_
<android.hardware.radio.RadioManager$ProgramInfo: java.util.Collection getRelatedContent()> -> _SOURCE_
<android.telephony.CallForwardingInfo: int getStatus()> -> _SOURCE_
<java.io.DataInputStream: java.lang.String readLine()> -> _SOURCE_
<android.telephony.CellIdentityWcdma: java.lang.String getMobileNetworkOperator()> -> _SOURCE_
<android.graphics.Bitmap: byte[] getNinePatchChunk()> -> _SOURCE_
<android.app.assist.AssistStructure: long getAcquisitionEndTime()> -> _SOURCE_
<android.media.AudioMetadata: android.media.AudioMetadata$BaseMap fromByteBuffer(java.nio.ByteBuffer)> -> _SOURCE_
<java.security.PrivilegedActionException: java.lang.Throwable getCause()> -> _SOURCE_
<android.media.tv.tuner.frontend.DvbtFrontendCapabilities: int getBandwidthCapability()> -> _SOURCE_
<android.service.notification.ZenPolicy: int getPriorityCallSenders()> -> _SOURCE_
<java.time.temporal.ValueRange: java.lang.String toString()> -> _SOURCE_
<android.renderscript.Script$LaunchOptions: int getYEnd()> -> _SOURCE_
<android.hardware.lights.Light: int getOrdinal()> -> _SOURCE_
<android.graphics.drawable.ColorDrawable: void clearMutated()> -> _SOURCE_
<com.android.internal.widget.RecyclerView: int getMaxFlingVelocity()> -> _SOURCE_
<android.net.ConnectivityManager: int registerNetworkFactory(android.os.Messenger,java.lang.String)> -> _SOURCE_
<android.hardware.location.GeofenceHardware: int getStatusOfMonitoringType(int)> -> _SOURCE_
<android.view.contentcapture.ViewNode: java.lang.CharSequence getText()> -> _SOURCE_
<android.bluetooth.BluetoothA2dpSink: java.util.List getConnectedDevices()> -> _SOURCE_
<android.content.pm.parsing.result.ParseTypeImpl: android.content.pm.parsing.result.ParseTypeImpl forParsingWithoutPlatformCompat()> -> _SOURCE_
<android.media.MediaMetadata: long getLong(java.lang.String)> -> _SOURCE_
<java.util.jar.Attributes: java.util.Collection values()> -> _SOURCE_
<android.service.notification.ZenModeConfig: java.lang.String getOwnerCaption(android.content.Context,java.lang.String)> -> _SOURCE_
<android.content.pm.PermissionInfo: int getProtectionFlags()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getManualNetworkSelectionPlmn()> -> _SOURCE_
<android.media.MediaDrm$KeyStatus: byte[] getKeyId()> -> _SOURCE_
<android.net.RouteInfo: int getMtu()> -> _SOURCE_
<android.view.View: java.lang.String toString()> -> _SOURCE_
<android.os.storage.StorageManager: java.util.List getStorageVolumes()> -> _SOURCE_
<android.location.GpsMeasurement: java.lang.String toString()> -> _SOURCE_
<android.view.WindowManager: android.view.WindowMetrics getMaximumWindowMetrics()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: int getPasswordMinimumUpperCase(android.content.ComponentName,int)> -> _SOURCE_
<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)> -> _SOURCE_
<android.telephony.data.ApnSetting: android.telephony.data.ApnSetting makeApnSetting(android.database.Cursor)> -> _SOURCE_
<android.content.pm.PackageParserCacheHelper$ReadHelper: java.lang.String readString(android.os.Parcel)> -> _SOURCE_
<android.telephony.SmsCbCmasInfo: java.lang.String toString()> -> _SOURCE_
<android.app.usage.EventStats: long getFirstTimeStamp()> -> _SOURCE_
<android.telephony.PhoneNumberRange: java.lang.String toString()> -> _SOURCE_
<android.telephony.ims.compat.stub.ImsCallSessionImplBase: void terminate(int)> -> _SOURCE_
<android.media.MediaRoute2ProviderService: void notifySessionReleased(java.lang.String)> -> _SOURCE_
<android.content.pm.ApplicationInfo: boolean isEncryptionAware()> -> _SOURCE_
<android.content.pm.PackageItemInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)> -> _SOURCE_
<android.app.backup.BackupManager: java.lang.String[] listAllTransports()> -> _SOURCE_
<android.printservice.recommendation.RecommendationInfo: int getNumDiscoveredPrinters()> -> _SOURCE_
<android.net.ConnectivityManager: boolean isNetworkTypeValid(int)> -> _SOURCE_
<android.content.ContentResolver: android.content.ContentResolver wrap(android.content.ContentInterface)> -> _SOURCE_
<android.bluetooth.BluetoothAvrcpController: int getConnectionState(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<com.android.internal.widget.RecyclerView$LayoutManager: int getChildCount()> -> _SOURCE_
<android.location.Location: float getSpeedAccuracyMetersPerSecond()> -> _SOURCE_
<java.text.DecimalFormatSymbols: java.lang.String getNaN()> -> _SOURCE_
<android.os.storage.StorageVolume: java.lang.String getNormalizedUuid()> -> _SOURCE_
<android.content.pm.LauncherApps: void registerCallback(android.content.pm.LauncherApps$Callback)> -> _SOURCE_
<android.telephony.data.ApnSetting: java.net.InetAddress getProxyAddress()> -> _SOURCE_
<java.security.spec.EllipticCurve: java.security.spec.ECField getField()> -> _SOURCE_
<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String)> -> _SOURCE_
<java.lang.Class: java.lang.Class getComponentType()> -> _SOURCE_
<org.apache.http.conn.ssl.AllowAllHostnameVerifier: java.lang.String toString()> -> _SOURCE_
<android.os.Build: java.lang.String getRadioVersion()> -> _SOURCE_
<android.content.Context: android.view.Display getDisplay()> -> _SOURCE_
<android.widget.ActionMenuView: boolean isOverflowMenuShowing()> -> _SOURCE_
<android.telephony.ims.stub.ImsUtImplBase: int updateColr(int)> -> _SOURCE_
<android.telephony.ServiceState: java.lang.String getOperatorAlphaLong()> -> _SOURCE_
<android.content.ContentResolver: java.util.List getCurrentSyncsAsUser(int)> -> _SOURCE_
<android.service.textclassifier.TextClassifierService: android.os.IBinder onBind(android.content.Intent)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean requestBugreport(android.content.ComponentName)> -> _SOURCE_
<android.view.textclassifier.TextLanguage: java.lang.String getId()> -> _SOURCE_
<android.hardware.location.NanoApp: void setNeededSensors(int[])> -> _SOURCE_
<android.bluetooth.BluetoothGatt: java.util.List getServices()> -> _SOURCE_
<android.preference.RingtonePreference: int getRingtoneType()> -> _SOURCE_
<android.service.controls.Control$StatefulBuilder: android.service.controls.Control build()> -> _SOURCE_
<android.net.metrics.NetworkMetrics: android.net.metrics.NetworkMetrics$Summary getPendingStats()> -> _SOURCE_
<android.content.pm.PackageInstaller$SessionInfo: boolean getRequestDowngrade()> -> _SOURCE_
<android.hardware.display.ColorDisplayManager: int getNightDisplayAutoMode()> -> _SOURCE_
<android.media.AudioTrack: int setPresentation(android.media.AudioPresentation)> -> _SOURCE_
<android.widget.TimePicker: android.view.View getPmView()> -> _SOURCE_
<java.net.URLConnection: java.io.InputStream getInputStream()> -> _SOURCE_
<android.content.om.OverlayManager: android.content.om.OverlayInfo getOverlayInfo(java.lang.String,android.os.UserHandle)> -> _SOURCE_
<android.view.contentcapture.DataShareRequest: java.lang.String toString()> -> _SOURCE_
<android.telephony.TelephonyManager: int getCallState()> -> _SOURCE_
<android.util.LongArrayQueue: int size()> -> _SOURCE_
<android.webkit.HttpAuthHandler: boolean useHttpAuthUsernamePassword()> -> _SOURCE_
<android.media.tv.tuner.frontend.DvbtFrontendSettings: int getHighPriorityCodeRate()> -> _SOURCE_
<java.net.URI: int getPort()> -> _SOURCE_
<android.security.net.config.NetworkSecurityTrustManager: java.util.List checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String,java.lang.String)> -> _SOURCE_
<android.telephony.ModemActivityInfo$TransmitPower: java.lang.String toString()> -> _SOURCE_
<android.app.ActivityOptions: java.lang.String toString()> -> _SOURCE_
<java.util.Locale: java.util.Locale[] getAvailableLocales()> -> _SOURCE_
<android.util.DayOfMonthCursor: boolean left()> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothActivityEnergyInfo getControllerActivityEnergyInfo(int)> -> _SOURCE_
<android.media.Rating: boolean isRated()> -> _SOURCE_
<android.media.tv.TvTrackInfo: byte getVideoActiveFormatDescription()> -> _SOURCE_
<java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: int getPasswordMinimumLowerCase(android.content.ComponentName,int)> -> _SOURCE_
<android.filterfw.GraphEnvironment: android.filterfw.core.FilterGraph getGraph(int)> -> _SOURCE_
<android.widget.ArrayAdapter: android.widget.ArrayAdapter createFromResource(android.content.Context,int,int)> -> _SOURCE_
<java.lang.ThreadGroup: java.lang.String toString()> -> _SOURCE_
<android.net.NetworkScoreManager: void registerNetworkScoreCallback(int,int,java.util.concurrent.Executor,android.net.NetworkScoreManager$NetworkScoreCallback)> -> _SOURCE_
<android.service.wallpaper.WallpaperService$Engine: int getDesiredMinimumHeight()> -> _SOURCE_
<android.permission.PermissionManager: int checkPackageNamePermission(java.lang.String,java.lang.String,int)> -> _SOURCE_
<android.net.wifi.WifiMigration$SettingsMigrationData: boolean isVerboseLoggingEnabled()> -> _SOURCE_
<java.security.Provider$Service: java.lang.String getAlgorithm()> -> _SOURCE_
<android.os.Parcel: boolean hasFileDescriptors()> -> _SOURCE_
<android.app.Instrumentation$ActivityResult: int getResultCode()> -> _SOURCE_
<com.android.internal.view.FloatingActionMode: android.view.MenuInflater getMenuInflater()> -> _SOURCE_
<android.app.ActivityManager: boolean isRunningInTestHarness()> -> _SOURCE_
<android.app.ActivityManager$TaskSnapshot: java.lang.String toString()> -> _SOURCE_
<android.app.usage.UsageStatsManager: void reportUsageStart(android.app.Activity,java.lang.String)> -> _SOURCE_
<android.app.timezone.DistroRulesVersion: java.lang.String toString()> -> _SOURCE_
<android.view.accessibility.AccessibilityRecord: java.lang.CharSequence getBeforeText()> -> _SOURCE_
<android.net.netstats.provider.NetworkStatsProvider: android.net.netstats.provider.INetworkStatsProviderCallback getProviderCallbackBinder()> -> _SOURCE_
<java.net.Inet6Address: int getScopeId()> -> _SOURCE_
<com.android.internal.app.procstats.ProcessStats: void dumpCheckinLocked(java.io.PrintWriter,java.lang.String,int)> -> _SOURCE_
<android.view.DisplayEventReceiver: void dispose()> -> _SOURCE_
<com.android.internal.os.KernelCpuUidTimeReader: void readAbsolute(com.android.internal.os.KernelCpuUidTimeReader$Callback)> -> _SOURCE_
<android.telecom.Connection: void onTransfer(android.telecom.Connection)> -> _SOURCE_
<android.widget.AbsListView: void setAdapter(android.widget.ListAdapter)> -> _SOURCE_
<android.hardware.camera2.params.Face: android.graphics.Point getMouthPosition()> -> _SOURCE_
<java.util.concurrent.Semaphore: java.lang.String toString()> -> _SOURCE_
<android.hardware.display.DeviceProductInfo: java.lang.String toString()> -> _SOURCE_
<android.telecom.PhoneAccount$Builder: android.telecom.PhoneAccount$Builder setGroupId(java.lang.String)> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: int getInputType()> -> _SOURCE_
<android.app.role.RoleControllerService: boolean onIsApplicationVisibleForRole(java.lang.String,java.lang.String)> -> _SOURCE_
<android.transition.Transition: android.transition.Transition$EpicenterCallback getEpicenterCallback()> -> _SOURCE_
<com.android.internal.os.KernelCpuUidTimeReader: void readDelta(com.android.internal.os.KernelCpuUidTimeReader$Callback)> -> _SOURCE_
<android.database.CursorWindow: int getType(int,int)> -> _SOURCE_
<java.time.ZoneOffset: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)> -> _SOURCE_
<android.content.IntentFilter: boolean isImplicitlyVisibleToInstantApp()> -> _SOURCE_
<com.android.internal.telephony.GsmAlphabet: int[] getEnabledSingleShiftTables()> -> _SOURCE_
<android.content.ContentResolver: android.os.Bundle call(android.net.Uri,java.lang.String,java.lang.String,android.os.Bundle)> -> _SOURCE_
<java.util.jar.Manifest: void write(java.io.OutputStream)> -> _SOURCE_
<com.android.ims.internal.uce.options.OptionsSipResponse: void setSipResponseCode(int)> -> _SOURCE_
<java.io.File: long getUsableSpace()> -> _SOURCE_
<android.mtp.MtpStorage: long getMaxFileSize()> -> _SOURCE_
<android.telephony.SignalStrength: int getWcdmaRscp()> -> _SOURCE_
<android.telephony.ims.ImsSsInfo$Builder: android.telephony.ims.ImsSsInfo$Builder setIncomingCommunicationBarringNumber(java.lang.String)> -> _SOURCE_
<android.view.View: void setAutofillHints(java.lang.String[])> -> _SOURCE_
<android.content.integrity.IntegrityFormula$Installer: android.content.integrity.IntegrityFormula certificatesContain(java.lang.String)> -> _SOURCE_
<android.view.accessibility.AccessibilityEvent: int getAction()> -> _SOURCE_
<android.mtp.MtpDevice: long getObjectSizeLong(int,int)> -> _SOURCE_
<java.util.Vector: java.lang.String toString()> -> _SOURCE_
<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getDefaultActivityIcon()> -> _SOURCE_
<com.android.internal.telephony.gsm.SmsMessage: com.android.internal.telephony.gsm.SmsMessage createFromPdu(byte[])> -> _SOURCE_
<android.app.AppOpsManager: void getHistoricalOps(android.app.AppOpsManager$HistoricalOpsRequest,java.util.concurrent.Executor,java.util.function.Consumer)> -> _SOURCE_
<android.service.dreams.DreamService: boolean onMenuItemSelected(int,android.view.MenuItem)> -> _SOURCE_
<com.android.ims.internal.uce.common.CapInfo: boolean isFtSupported()> -> _SOURCE_
<android.hardware.camera2.CaptureRequest: int getReprocessableSessionId()> -> _SOURCE_
<android.location.GnssClock: void set(android.location.GnssClock)> -> _SOURCE_
<android.view.InputDevice: android.view.InputDevice$MotionRange getMotionRange(int,int)> -> _SOURCE_
<android.view.ViewConfiguration: int getJumpTapTimeout()> -> _SOURCE_
<android.view.View: int getMeasuredWidth()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isAnyRadioPoweredOn()> -> _SOURCE_
<java.lang.invoke.MethodHandles$Lookup: java.lang.Class lookupClass()> -> _SOURCE_
<android.window.TaskOrganizer: java.util.List getChildTasks(android.window.WindowContainerToken,int[])> -> _SOURCE_
<com.android.internal.policy.DecorContext: boolean isUiContext()> -> _SOURCE_
<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder resetNetworkTypes()> -> _SOURCE_
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor[] createReliableSocketPair()> -> _SOURCE_
<android.widget.AdapterViewAnimator: void onRemoteAdapterDisconnected()> -> _SOURCE_
<android.app.AppOpsManager: java.util.List getOpsForPackage(int,java.lang.String,int[])> -> _SOURCE_
<android.telephony.cdma.CdmaCellLocation: void fillInNotifierBundle(android.os.Bundle)> -> _SOURCE_
<android.companion.AssociationRequest$Builder: android.companion.AssociationRequest$Builder addDeviceFilter(android.companion.DeviceFilter)> -> _SOURCE_
<java.io.File: long getFreeSpace()> -> _SOURCE_
<android.content.integrity.AppInstallMetadata: boolean isPreInstalled()> -> _SOURCE_
<android.location.GnssCapabilities: boolean hasMeasurements()> -> _SOURCE_
<android.location.GpsMeasurement: double getPseudorangeRateInMetersPerSec()> -> _SOURCE_
<android.text.PrecomputedText: java.lang.String toString()> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing$Stage: boolean isInUse()> -> _SOURCE_
<android.window.TaskOrganizerTaskEmbedder: boolean isInitialized()> -> _SOURCE_
<android.print.pdf.PrintedPdfDocument: int getPageHeight()> -> _SOURCE_
<android.app.timedetector.NetworkTimeSuggestion: void addDebugInfo(java.lang.String[])> -> _SOURCE_
<android.media.MediaCodecInfo$VideoCapabilities: android.util.Range getBlocksPerSecondRange()> -> _SOURCE_
<android.os.Debug$MemoryInfo: int getSummaryTotalSwap()> -> _SOURCE_
<java.text.NumberFormat: int getMinimumFractionDigits()> -> _SOURCE_
<android.content.ContextWrapper: java.lang.String getBasePackageName()> -> _SOURCE_
<android.os.FileUtils: byte[] digest(java.io.File,java.lang.String)> -> _SOURCE_
<android.drm.DrmInfo: int getInfoType()> -> _SOURCE_
<android.net.NetworkInfo: boolean isConnected()> -> _SOURCE_
<android.location.GnssReflectingPlane$Builder: android.location.GnssReflectingPlane build()> -> _SOURCE_
<com.android.internal.telephony.SmsNumberUtils: java.lang.String filterDestAddr(android.content.Context,int,java.lang.String)> -> _SOURCE_
<java.nio.charset.CharsetEncoder: byte[] replacement()> -> _SOURCE_
<android.service.autofill.augmented.AugmentedAutofillService: android.service.autofill.FillEventHistory getFillEventHistory()> -> _SOURCE_
<android.os.incremental.IncrementalStorage: boolean isFileRangeLoaded(java.lang.String,long,long)> -> _SOURCE_
<android.telecom.Call$Callback: void onConnectionEvent(android.telecom.Call,java.lang.String,android.os.Bundle)> -> _SOURCE_
<android.app.WallpaperInfo: android.net.Uri loadContextUri(android.content.pm.PackageManager)> -> _SOURCE_
<android.telephony.ims.stub.RcsCapabilityExchange: void onCommandUpdate(int,int)> -> _SOURCE_
<android.hardware.soundtrigger.SoundTrigger$KeyphraseRecognitionExtra: java.lang.String toString()> -> _SOURCE_
<android.content.pm.PackageInstaller: android.content.pm.PackageInstaller$SessionInfo getSessionInfo(int)> -> _SOURCE_
<android.telephony.CellSignalStrengthWcdma: int getAsuLevel()> -> _SOURCE_
<android.content.pm.ActivityInfo: boolean hasFixedAspectRatio()> -> _SOURCE_
<android.service.notification.StatusBarNotification: java.lang.String getShortcutId()> -> _SOURCE_
<android.view.MotionEvent: int getClassification()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: java.lang.String findEditTable(java.lang.String)> -> _SOURCE_
<android.content.IntentFilter: java.lang.String getMimeGroup(int)> -> _SOURCE_
<android.renderscript.Program: android.renderscript.Program$TextureType getTextureType(int)> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing: android.media.audiofx.DynamicsProcessing$Config getConfig()> -> _SOURCE_
<java.security.spec.RSAPublicKeySpec: java.math.BigInteger getModulus()> -> _SOURCE_
<android.os.health.TimerStat: int describeContents()> -> _SOURCE_
<android.bluetooth.BluetoothHidDevice: int getConnectionState(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<android.net.http.HttpResponseCache: int getNetworkCount()> -> _SOURCE_
<java.time.chrono.MinguoEra: java.time.chrono.MinguoEra of(int)> -> _SOURCE_
<android.bluetooth.BluetoothHeadsetClient: int getConnectionPolicy(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<android.widget.ListPopupWindow: boolean isModal()> -> _SOURCE_
<com.android.internal.telephony.gsm.SmsBroadcastConfigInfo: void setFromServiceId(int)> -> _SOURCE_
<android.telecom.ParcelableCall: int getCallerDisplayNamePresentation()> -> _SOURCE_
<android.inputmethodservice.InputMethodService$InputMethodSessionImpl: void updateCursorAnchorInfo(android.view.inputmethod.CursorAnchorInfo)> -> _SOURCE_
<android.hardware.Camera$Parameters: java.util.List getZoomRatios()> -> _SOURCE_
<android.telephony.PhysicalChannelConfig: int getPhysicalCellId()> -> _SOURCE_
<android.graphics.drawable.Icon: java.lang.String toString()> -> _SOURCE_
<android.content.SyncInfo: android.content.SyncInfo createAccountRedacted(int,java.lang.String,long)> -> _SOURCE_
<android.hardware.location.GeofenceHardwareService: android.os.IBinder onBind(android.content.Intent)> -> _SOURCE_
<android.media.MediaTimestamp: long getAnchorSystemNanoTime()> -> _SOURCE_
<android.service.voice.VoiceInteractionSession: void onHandleAssist(android.os.Bundle,android.app.assist.AssistStructure,android.app.assist.AssistContent)> -> _SOURCE_
<android.app.job.JobWorkItem: long getEstimatedNetworkDownloadBytes()> -> _SOURCE_
<android.view.MotionEvent: float getPressure(int)> -> _SOURCE_
<android.os.LocaleList: boolean isPseudoLocale(android.icu.util.ULocale)> -> _SOURCE_
<android.bluetooth.le.AdvertiseData: boolean getIncludeTxPowerLevel()> -> _SOURCE_
<java.lang.Runtime: java.lang.Runtime getRuntime()> -> _SOURCE_
<android.view.autofill.AutofillManager: void dump(java.lang.String,java.io.PrintWriter)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.util.List getMeteredDataDisabledPackages(android.content.ComponentName)> -> _SOURCE_
<android.hardware.camera2.impl.CameraMetadataNative$Key: boolean hasTag()> -> _SOURCE_
<android.net.ConnectivityManager: java.lang.String[] getTetherableBluetoothRegexs()> -> _SOURCE_
<android.nfc.tech.MifareClassic: int getSectorCount()> -> _SOURCE_
<android.net.NetworkCapabilities: boolean equalsSSID(android.net.NetworkCapabilities)> -> _SOURCE_
<javax.crypto.spec.PSource: java.lang.String getAlgorithm()> -> _SOURCE_
<android.app.timezonedetector.ManualTimeZoneSuggestion: void printCommandLineOpts(java.io.PrintWriter)> -> _SOURCE_
<android.os.Environment: java.io.File getProductServicesDirectory()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.util.List getInstalledApplications(int)> -> _SOURCE_
<android.telephony.ims.ImsMmTelManager$RegistrationCallback: void onRegistered(int)> -> _SOURCE_
<android.service.notification.StatusBarNotification: com.android.internal.logging.InstanceId getInstanceId()> -> _SOURCE_
<android.companion.BluetoothDeviceFilter: java.util.List getServiceUuidMasks()> -> _SOURCE_
<android.hardware.hdmi.HdmiSwitchClient: java.util.List getDeviceList()> -> _SOURCE_
<android.media.RoutingSessionInfo: boolean isSystemSession()> -> _SOURCE_
<android.hardware.location.ContextHubManager: java.util.List getContextHubs()> -> _SOURCE_
<android.telephony.CellIdentityGsm: int getPsc()> -> _SOURCE_
<android.companion.BluetoothLeDeviceFilter$Builder: android.companion.BluetoothLeDeviceFilter$Builder setNamePattern(java.util.regex.Pattern)> -> _SOURCE_
<android.hardware.hdmi.HdmiPortInfo: boolean isMhlSupported()> -> _SOURCE_
<android.telephony.mbms.vendor.MbmsStreamingServiceBase: int initialize(android.telephony.mbms.IMbmsStreamingSessionCallback,int)> -> _SOURCE_
<android.view.autofill.AutofillManager: boolean isAutofillSupported()> -> _SOURCE_
<android.os.Debug$MemoryInfo: int getSummaryNativeHeap()> -> _SOURCE_
<android.app.prediction.AppTarget: int getRank()> -> _SOURCE_
<android.net.NetworkStats: java.lang.String tagToString(int)> -> _SOURCE_
<android.content.ContextWrapper: java.io.File getDataDir()> -> _SOURCE_
<android.app.slice.SliceManager: void enforceSlicePermission(android.net.Uri,java.lang.String,int,int,java.lang.String[])> -> _SOURCE_
<android.text.TextLine: float metrics(android.graphics.Paint$FontMetricsInt)> -> _SOURCE_
<android.os.HidlMemoryUtil: android.os.HidlMemory byteArrayToHidlMemory(byte[],java.lang.String)> -> _SOURCE_
<android.view.accessibility.AccessibilityInteractionClient: java.util.List getWindows(int)> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: int getLeMaximumAdvertisingDataLength()> -> _SOURCE_
<com.android.internal.os.AppIdToPackageMap: java.lang.String mapUid(int)> -> _SOURCE_
<android.telecom.Connection: java.lang.String stateToString(int)> -> _SOURCE_
<android.bluetooth.BluetoothGatt: boolean readUsingCharacteristicUuid(java.util.UUID,int,int)> -> _SOURCE_
<android.net.ConnectivityManager$NetworkCallback: void onLosing(android.net.Network,int)> -> _SOURCE_
<android.accessibilityservice.AccessibilityShortcutInfo: java.lang.String loadSummary(android.content.pm.PackageManager)> -> _SOURCE_
<android.net.TrafficStats: long getTotalRxPackets()> -> _SOURCE_
<android.util.proto.ProtoStream: java.lang.String getFieldIdString(long)> -> _SOURCE_
<android.net.NetworkUtils: java.lang.String[] makeStrings(java.util.Collection)> -> _SOURCE_
<android.os.WorkSource: android.os.WorkSource$WorkChain createWorkChain()> -> _SOURCE_
<android.media.session.MediaController: int getRatingType()> -> _SOURCE_
<android.telephony.TelephonyManager: byte[] iccExchangeSimIO(int,int,int,int,int,java.lang.String)> -> _SOURCE_
<android.os.Debug$MemoryInfo: int getTotalSharedDirty()> -> _SOURCE_
<android.app.SyncNotedAppOp: java.lang.String getOp()> -> _SOURCE_
<java.security.cert.CertificateFactory: java.lang.String getType()> -> _SOURCE_
<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy$Builder permitAll()> -> _SOURCE_
<android.net.KeepalivePacketData: java.net.InetAddress getSrcAddress()> -> _SOURCE_
<com.android.internal.statusbar.NotificationVisibility$NotificationLocation: int toMetricsEventEnum()> -> _SOURCE_
<android.bluetooth.BluetoothMasInstance: java.lang.String toString()> -> _SOURCE_
<android.location.GnssSingleSatCorrection: android.location.GnssReflectingPlane getReflectingPlane()> -> _SOURCE_
<android.app.IntentService: void onDestroy()> -> _SOURCE_
<android.content.ContentResolver: java.lang.String translateDeprecatedDataPath(android.net.Uri)> -> _SOURCE_
<android.media.session.PlaybackState: float getPlaybackSpeed()> -> _SOURCE_
<android.hardware.camera2.impl.RequestLastFrameNumbersHolder: long getLastRegularFrameNumber()> -> _SOURCE_
<android.net.metrics.WakeupStats: java.lang.String toString()> -> _SOURCE_
<android.telephony.ims.stub.ImsConfigImplBase$ImsConfigStub: int getConfigInt(int)> -> _SOURCE_
<android.media.soundtrigger.SoundTriggerManager: int getDetectionServiceOperationsTimeout()> -> _SOURCE_
<java.util.concurrent.SynchronousQueue: java.lang.Object[] toArray()> -> _SOURCE_
<android.os.BinderProxy: android.os.IInterface queryLocalInterface(java.lang.String)> -> _SOURCE_
<android.view.contentcapture.DataRemovalRequest: boolean isForEverything()> -> _SOURCE_
<android.hardware.hdmi.HdmiControlServiceWrapper: void powerOffRemoteDevice(int,int)> -> _SOURCE_
<java.io.ObjectStreamField: java.lang.String getName()> -> _SOURCE_
<android.service.notification.ZenPolicy: int getVisualEffectStatusBar()> -> _SOURCE_
<android.telephony.ims.ImsSuppServiceNotification: java.lang.String toString()> -> _SOURCE_
<android.app.VoiceInteractor$Request: java.lang.String toString()> -> _SOURCE_
<android.nfc.tech.IsoDep: int getTimeout()> -> _SOURCE_
<android.content.res.Resources: java.lang.ClassLoader getClassLoader()> -> _SOURCE_
<java.net.DatagramSocket: java.net.InetAddress getLocalAddress()> -> _SOURCE_
<android.telephony.TelephonyManager: android.telephony.ImsiEncryptionInfo getCarrierInfoForImsiEncryption(int)> -> _SOURCE_
<android.os.UserManager: boolean isDeviceInDemoMode(android.content.Context)> -> _SOURCE_
<android.content.Intent: boolean hasFileDescriptors()> -> _SOURCE_
<android.util.NtpTrustedTime: boolean hasCache()> -> _SOURCE_
<com.android.internal.widget.GridLayoutManager: com.android.internal.widget.GridLayoutManager$SpanSizeLookup getSpanSizeLookup()> -> _SOURCE_
<android.content.Context: android.view.Display getDisplayNoVerify()> -> _SOURCE_
<android.widget.NumberPicker: android.widget.NumberPicker$Formatter getTwoDigitFormatter()> -> _SOURCE_
<android.app.Notification$BigPictureStyle: android.graphics.Bitmap getBigPicture()> -> _SOURCE_
<android.preference.DialogPreference: java.lang.CharSequence getPositiveButtonText()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean canProfileOwnerResetPasswordWhenLocked(int)> -> _SOURCE_
<android.view.View: android.os.IBinder getApplicationWindowToken()> -> _SOURCE_
<android.text.style.AlignmentSpan$Standard: int getSpanTypeIdInternal()> -> _SOURCE_
<android.view.View: android.graphics.drawable.Drawable getVerticalScrollbarTrackDrawable()> -> _SOURCE_
<android.location.Criteria: boolean isCostAllowed()> -> _SOURCE_
<android.hardware.display.BrightnessConfiguration: java.lang.String toString()> -> _SOURCE_
<android.database.sqlite.SQLiteDebug: android.database.sqlite.SQLiteDebug$PagerStats getDatabaseInfo()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.lang.String getInstallerPackageName(java.lang.String)> -> _SOURCE_
<android.telecom.TelecomManager: void addNewIncomingCall(android.telecom.PhoneAccountHandle,android.os.Bundle)> -> _SOURCE_
<android.view.inputmethod.InputMethodInfo: java.lang.String getPackageName()> -> _SOURCE_
<java.text.DateFormat: java.text.DateFormat getInstance()> -> _SOURCE_
<com.android.internal.os.TransferPipe: byte[] dumpAsync(android.os.IBinder,java.lang.String[])> -> _SOURCE_
<android.location.GpsMeasurement: boolean hasDopplerShiftUncertaintyInHz()> -> _SOURCE_
<android.content.ContextWrapper: java.io.File getFilesDir()> -> _SOURCE_
<android.net.MacAddress: int macAddressType(byte[])> -> _SOURCE_
<android.net.ProxyInfo: android.net.ProxyInfo buildPacProxy(android.net.Uri,int)> -> _SOURCE_
<android.widget.TabHost: void sendAccessibilityEventInternal(int)> -> _SOURCE_
<android.os.SystemProperties: java.lang.String digestOf(java.lang.String[])> -> _SOURCE_
<android.content.pm.PackageParser$ApkLite: long getLongVersionCode()> -> _SOURCE_
<java.util.regex.Matcher: java.lang.String toString()> -> _SOURCE_
<android.service.autofill.FillRequest: java.lang.String toString()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo$RangeInfo getRangeInfo()> -> _SOURCE_
<android.media.tv.tuner.frontend.FrontendStatus: int getMer()> -> _SOURCE_
<android.media.AudioManager: float getStreamVolumeDb(int,int,int)> -> _SOURCE_
<java.security.cert.CertificateFactorySpi: java.security.cert.CertPath engineGenerateCertPath(java.io.InputStream)> -> _SOURCE_
<android.bluetooth.le.PeriodicAdvertisingCallback: void onPeriodicAdvertisingReport(android.bluetooth.le.PeriodicAdvertisingReport)> -> _SOURCE_
<android.telephony.CallAttributes: android.telephony.PreciseCallState getPreciseCallState()> -> _SOURCE_
<android.content.ContextWrapper: android.content.ComponentName startService(android.content.Intent)> -> _SOURCE_
<android.media.AudioManager: int getStreamMinVolumeInt(int)> -> _SOURCE_
<android.app.KeyguardManager: android.content.Intent createConfirmDeviceCredentialIntent(java.lang.CharSequence,java.lang.CharSequence,int,boolean)> -> _SOURCE_
<android.widget.AbsSpinner: int getAutofillType()> -> _SOURCE_
<android.hardware.usb.UsbPort: int getSupportedModes()> -> _SOURCE_
<android.database.sqlite.SQLiteQueryBuilder: java.util.Map getProjectionMap()> -> _SOURCE_
<android.content.pm.SharedLibraryInfo: java.lang.String getPath()> -> _SOURCE_
<android.content.integrity.AppInstallMetadata: long getVersionCode()> -> _SOURCE_
<android.nfc.tech.NfcB: byte[] getProtocolInfo()> -> _SOURCE_
<java.security.cert.X509CertSelector: void setSerialNumber(java.math.BigInteger)> -> _SOURCE_
<android.view.InputMonitor: java.lang.String toString()> -> _SOURCE_
<android.telephony.CellIdentityTdscdma: android.telephony.ClosedSubscriberGroupInfo getClosedSubscriberGroupInfo()> -> _SOURCE_
<android.hardware.camera2.params.ReprocessFormatsMap: int[] getInputs()> -> _SOURCE_
<android.net.ConnectivityManager: java.lang.String[] getTetheringErroredIfaces()> -> _SOURCE_
<android.app.NotificationManager: boolean isNotificationAssistantAccessGranted(android.content.ComponentName)> -> _SOURCE_
<android.os.LocaleList: boolean isEmpty()> -> _SOURCE_
<android.service.quickaccesswallet.WalletServiceEvent: int getEventType()> -> _SOURCE_
<android.drm.DrmManagerClient: int getDrmObjectType(java.lang.String,java.lang.String)> -> _SOURCE_
<android.os.VibrationEffect$Composed: long getDuration()> -> _SOURCE_
<android.view.InputDevice: java.lang.String getDescriptor()> -> _SOURCE_
<java.util.ArrayList: boolean isEmpty()> -> _SOURCE_
<java.util.TreeMap: java.util.NavigableSet descendingKeySet()> -> _SOURCE_
<android.os.Parcel: java.lang.String[] readStringArray()> -> _SOURCE_
<android.telecom.ParcelableCall: android.telecom.PhoneAccountHandle getAccountHandle()> -> _SOURCE_
<com.android.internal.app.ChooserActivityLogger: void logSharesheetAppLoadComplete()> -> _SOURCE_
<android.content.PermissionChecker: int checkCallingOrSelfPermissionForPreflight(android.content.Context,java.lang.String)> -> _SOURCE_
<android.os.MemoryFile: int getSize(java.io.FileDescriptor)> -> _SOURCE_
<android.media.CamcorderProfile: boolean hasProfile(int)> -> _SOURCE_
<android.net.KeepalivePacketData: int getDstPort()> -> _SOURCE_
<com.android.internal.telephony.TelephonyPermissions: boolean checkCallingOrSelfReadPhoneState(android.content.Context,int,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.service.notification.SnoozeCriterion: java.lang.CharSequence getConfirmation()> -> _SOURCE_
<android.provider.DocumentsProvider: android.database.Cursor queryChildDocuments(java.lang.String,java.lang.String[],android.os.Bundle)> -> _SOURCE_
<android.telephony.SubscriptionInfo: java.util.List getAccessRules()> -> _SOURCE_
<android.telephony.PhoneNumberUtils: java.lang.String formatNumber(java.lang.String,java.lang.String)> -> _SOURCE_
<android.view.ViewRootImpl: android.os.IBinder getInputToken()> -> _SOURCE_
<android.os.UserManager: boolean isUserAdmin(int)> -> _SOURCE_
<android.net.util.KeepaliveUtils: int[] getSupportedKeepalives(android.content.Context)> -> _SOURCE_
<android.media.AudioRecordingConfiguration: void dump(java.io.PrintWriter)> -> _SOURCE_
<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable loadItemIcon(android.content.pm.PackageItemInfo,android.content.pm.ApplicationInfo)> -> _SOURCE_
<android.location.GnssClock: void setDriftUncertaintyNanosPerSecond(double)> -> _SOURCE_
<android.widget.AdapterView: int getFirstVisiblePosition()> -> _SOURCE_
<com.android.internal.colorextraction.ColorExtractor: android.app.WallpaperColors getWallpaperColors(int)> -> _SOURCE_
<java.util.Arrays: java.lang.String toString(byte[])> -> _SOURCE_
<java.util.concurrent.ThreadPoolExecutor: int getCorePoolSize()> -> _SOURCE_
<android.hardware.display.ColorDisplayManager: int getNightDisplayAutoModeRaw()> -> _SOURCE_
<android.os.Bundle: java.io.Serializable getSerializable(java.lang.String)> -> _SOURCE_
<java.time.temporal.ValueRange: long getMaximum()> -> _SOURCE_
<com.android.internal.telephony.TelephonyPermissions: boolean checkCarrierPrivilegeForSubId(android.content.Context,int)> -> _SOURCE_
<com.android.ims.internal.uce.presence.PresPublishTriggerType: int getPublishTrigeerType()> -> _SOURCE_
<android.view.textservice.SpellCheckerSession: boolean isSessionDisconnected()> -> _SOURCE_
<android.app.NotificationHistory: java.lang.String[] getPooledStringsToWrite()> -> _SOURCE_
<android.media.MediaCodecInfo: boolean isSoftwareOnly()> -> _SOURCE_
<android.content.res.AssetManager: android.content.res.AssetManager getSystem()> -> _SOURCE_
<com.android.internal.inputmethod.InputMethodPrivilegedOperations: void setInputMethod(java.lang.String)> -> _SOURCE_
<android.os.Bundle: short getShort(java.lang.String,short)> -> _SOURCE_
<android.telephony.ServiceState: int getRilDataRadioTechnology()> -> _SOURCE_
<java.time.LocalTime: int getSecond()> -> _SOURCE_
<android.telephony.CallForwardingInfo: int getTimeoutSeconds()> -> _SOURCE_
<android.app.NotificationManager$Policy: int allowMessagesFrom()> -> _SOURCE_
<android.telephony.TelephonyRegistryManager: void notifyUserMobileDataStateChanged(int,int,boolean)> -> _SOURCE_
<android.widget.RemoteViews: boolean prefersAsyncApply()> -> _SOURCE_
<android.media.AudioManager: void setSupportedSystemUsages(int[])> -> _SOURCE_
<java.text.NumberFormat: java.math.RoundingMode getRoundingMode()> -> _SOURCE_
<android.util.apk.ApkSignatureVerifier: byte[] generateApkVerity(java.lang.String,android.util.apk.ByteBufferFactory)> -> _SOURCE_
<android.telephony.SignalStrength: int getLteAsuLevel()> -> _SOURCE_
<javax.crypto.ExemptionMechanism: java.lang.String getName()> -> _SOURCE_
<android.timezone.CountryTimeZones$TimeZoneMapping: java.lang.String getTimeZoneId()> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing$Mbc: java.lang.String toString()> -> _SOURCE_
<android.app.NotificationManager: boolean canNotifyAsPackage(java.lang.String)> -> _SOURCE_
<android.media.tv.tuner.frontend.FrontendStatus: int getSymbolRate()> -> _SOURCE_
<android.hardware.radio.RadioManager$ModuleProperties: java.util.Map getVendorInfo()> -> _SOURCE_
<android.view.accessibility.AccessibilityRecord: java.lang.String toString()> -> _SOURCE_
<android.app.ActivityManager: boolean isHighEndGfx()> -> _SOURCE_
<com.android.internal.widget.LockscreenCredential: boolean isPattern()> -> _SOURCE_
<android.content.Intent: boolean hasWebURI()> -> _SOURCE_
<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy$Builder detectAll()> -> _SOURCE_
<android.app.usage.StorageStatsManager: android.app.usage.StorageStats queryStatsForPackage(java.util.UUID,java.lang.String,android.os.UserHandle)> -> _SOURCE_
<java.net.ServerSocket: java.lang.String toString()> -> _SOURCE_
<android.location.Geofence: int getType()> -> _SOURCE_
<android.os.WorkSource$WorkChain: java.lang.String toString()> -> _SOURCE_
<android.os.Parcel: java.lang.Exception createExceptionOrNull(int,java.lang.String)> -> _SOURCE_
<java.time.MonthDay: long getLong(java.time.temporal.TemporalField)> -> _SOURCE_
<java.util.ResourceBundle: java.util.Locale getLocale()> -> _SOURCE_
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean hasContended()> -> _SOURCE_
<android.bluetooth.BluetoothA2dpSink: java.lang.String stateToString(int)> -> _SOURCE_
<android.telephony.TelephonyManager: boolean getEmergencyCallbackMode(int)> -> _SOURCE_
<android.view.contentcapture.ViewNode: java.lang.String getIdType()> -> _SOURCE_
<android.os.VibrationAttributes: android.media.AudioAttributes getAudioAttributes()> -> _SOURCE_
<android.telephony.PhysicalChannelConfig: int getFrequencyRange()> -> _SOURCE_
<android.media.AudioPortConfig: android.media.AudioPort port()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: long getSourceNodeId()> -> _SOURCE_
<java.text.DecimalFormatSymbols: java.lang.String getInfinity()> -> _SOURCE_
<android.telephony.SmsMessage: java.lang.String getEmailBody()> -> _SOURCE_
<android.media.MediaMetadata: android.media.MediaDescription getDescription()> -> _SOURCE_
<android.telephony.ServiceState: int getNrState()> -> _SOURCE_
<android.os.storage.StorageVolume: java.lang.String getState()> -> _SOURCE_
<android.app.NotificationManager: int getRuleInstanceCount(android.content.ComponentName)> -> _SOURCE_
<android.hardware.hdmi.HdmiRecordListener: void onClearTimerRecordingResult(int,int)> -> _SOURCE_
<android.app.SearchManager: android.content.Intent getAssistIntent(boolean)> -> _SOURCE_
<android.hardware.soundtrigger.KeyphraseMetadata: java.lang.String toString()> -> _SOURCE_
<android.service.euicc.EuiccProfileInfo: android.service.carrier.CarrierIdentifier getCarrierIdentifier()> -> _SOURCE_
<android.os.Parcel: android.os.Bundle readBundle()> -> _SOURCE_
<android.media.AudioTrack: int getUnderrunCount()> -> _SOURCE_
<android.app.backup.BackupUtils: boolean isFileSpecifiedInPathList(java.io.File,java.util.Collection)> -> _SOURCE_
<java.util.IllegalFormatFlagsException: java.lang.String getFlags()> -> _SOURCE_
<java.nio.file.Files: java.util.Set getPosixFilePermissions(java.nio.file.Path,java.nio.file.LinkOption[])> -> _SOURCE_
<java.net.InterfaceAddress: java.lang.String toString()> -> _SOURCE_
<com.android.internal.app.ToolbarActionBar: boolean closeOptionsMenu()> -> _SOURCE_
<android.location.GpsStatus: int getTimeToFirstFix()> -> _SOURCE_
<android.media.MediaRecorder: int getPortId()> -> _SOURCE_
<java.security.MessageDigest: int getDigestLength()> -> _SOURCE_
<android.telephony.SubscriptionManager: long getLongSubscriptionProperty(int,java.lang.String,long,android.content.Context)> -> _SOURCE_
<android.hardware.usb.UsbPort: java.lang.String dataRoleToString(int)> -> _SOURCE_
<android.content.pm.permission.RuntimePermissionPresentationInfo: boolean isStandard()> -> _SOURCE_
<android.telephony.euicc.EuiccCardManager: void prepareDownload(java.lang.String,byte[],byte[],byte[],byte[],java.util.concurrent.Executor,android.telephony.euicc.EuiccCardManager$ResultCallback)> -> _SOURCE_
<android.os.StatsServiceManager: android.os.StatsServiceManager$ServiceRegisterer getStatsCompanionServiceRegisterer()> -> _SOURCE_
<android.provider.DeviceConfig$Properties: java.util.Set getKeyset()> -> _SOURCE_
<android.view.View: android.view.ThreadedRenderer getThreadedRenderer()> -> _SOURCE_
<android.os.Parcel: java.lang.Object[] readArray(java.lang.ClassLoader)> -> _SOURCE_
<android.util.Half: java.lang.String toString()> -> _SOURCE_
<android.text.style.SuggestionSpan: int getSpanTypeIdInternal()> -> _SOURCE_
<android.app.Person: java.lang.String getUri()> -> _SOURCE_
<android.telephony.TelephonyManager: int getDataNetworkType(int)> -> _SOURCE_
<android.service.autofill.LuhnChecksumValidator: java.lang.String toString()> -> _SOURCE_
<android.net.LocalSocket: java.lang.String toString()> -> _SOURCE_
<android.os.UserManager: java.lang.String getSeedAccountName()> -> _SOURCE_
<com.android.internal.location.ProviderRequest$Builder: com.android.internal.location.ProviderRequest build()> -> _SOURCE_
<android.hardware.usb.UsbPort: boolean supportsEnableContaminantPresenceProtection()> -> _SOURCE_
<android.app.ActivityView: android.graphics.Matrix getScreenToTaskMatrix()> -> _SOURCE_
<android.app.ActivityManagerNative: void noteAlarmFinish(android.app.PendingIntent,int,java.lang.String)> -> _SOURCE_
<android.media.MediaMetadataRetriever: java.lang.String extractMetadata(int)> -> _SOURCE_
<java.time.OffsetDateTime: java.time.LocalDate toLocalDate()> -> _SOURCE_
<com.android.internal.content.SelectionBuilder: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$VideoCapabilities getVideoCapabilities()> -> _SOURCE_
<java.net.Inet6Address: boolean isMCNodeLocal()> -> _SOURCE_
<android.os.Debug: int getMethodTracingMode()> -> _SOURCE_
<android.media.AudioDeviceInfo: int[] getEncapsulationMetadataTypes()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getVoiceMailAlphaTag()> -> _SOURCE_
<android.app.admin.SystemUpdatePolicy$InstallationOption: int getType()> -> _SOURCE_
<android.app.ApplicationExitInfo: int getStatus()> -> _SOURCE_
<java.time.LocalTime: int getMinute()> -> _SOURCE_
<android.media.soundtrigger.SoundTriggerManager: int getModelState(java.util.UUID)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.util.List getDelegatePackages(android.content.ComponentName,java.lang.String)> -> _SOURCE_
<android.hardware.radio.RadioManager$ProgramInfo: android.hardware.radio.RadioMetadata getMetadata()> -> _SOURCE_
<android.content.Intent: java.lang.Object getExtra(java.lang.String)> -> _SOURCE_
<android.telephony.ims.stub.ImsConfigImplBase: int setConfig(int,java.lang.String)> -> _SOURCE_
<java.util.stream.IntStream: java.util.stream.IntStream empty()> -> _SOURCE_
<android.telephony.SmsCbMessage: java.lang.String getMessageBody()> -> _SOURCE_
<android.util.KeyValueListParser$LongValue: void parse(android.util.KeyValueListParser)> -> _SOURCE_
<android.content.ContextWrapper: java.io.File getExternalFilesDir(java.lang.String)> -> _SOURCE_
<android.hardware.biometrics.BiometricPrompt: boolean isConfirmationRequired()> -> _SOURCE_
<android.media.MediaPlayer: android.media.AudioDeviceInfo getRoutedDevice()> -> _SOURCE_
<android.telecom.Connection: void onAudioStateChanged(android.telecom.AudioState)> -> _SOURCE_
<android.content.pm.LauncherApps: boolean shouldHideFromSuggestions(java.lang.String,android.os.UserHandle)> -> _SOURCE_
<android.media.AudioDeviceInfo: int[] getEncodings()> -> _SOURCE_
<android.os.storage.StorageManager: java.lang.String getMountedObbPath(java.lang.String)> -> _SOURCE_
<java.io.CharArrayWriter: char[] toCharArray()> -> _SOURCE_
<android.app.role.RoleManager: boolean isRoleHeld(java.lang.String)> -> _SOURCE_
<android.hardware.location.NanoAppMessage: byte[] getMessageBody()> -> _SOURCE_
<android.location.Address: java.lang.String getPremises()> -> _SOURCE_
<com.android.ims.internal.uce.presence.PresServiceInfo: java.lang.String getServiceDesc()> -> _SOURCE_
<android.net.IpSecAlgorithm: boolean isAuthentication()> -> _SOURCE_
<com.android.internal.os.KernelCpuSpeedReader: long[] readDelta()> -> _SOURCE_
<android.service.autofill.FillContext: int getRequestId()> -> _SOURCE_
<android.hardware.radio.RadioManager$BandDescriptor: java.lang.String toString()> -> _SOURCE_
<com.android.internal.widget.LinearLayoutManager: android.view.View findViewByPosition(int)> -> _SOURCE_
<android.renderscript.ProgramStore: boolean isColorMaskGreenEnabled()> -> _SOURCE_
<java.net.InetAddress: java.lang.String getHostAddress()> -> _SOURCE_
<android.content.RestrictionEntry: android.content.RestrictionEntry[] getRestrictions()> -> _SOURCE_
<android.media.AudioRecordingConfiguration: android.media.AudioFormat getFormat()> -> _SOURCE_
<android.media.CameraProfile: int getJpegEncodingQualityParameter(int,int)> -> _SOURCE_
<android.net.MobileLinkQualityInfo: int getLteRsrp()> -> _SOURCE_
<android.telephony.ims.ImsStreamMediaProfile: boolean isReceivingRttAudio()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase$OpenParams: int getLookasideSlotCount()> -> _SOURCE_
<android.printservice.PrintDocument: android.print.PrintDocumentInfo getInfo()> -> _SOURCE_
<android.telephony.ims.ImsSsInfo: int getStatus()> -> _SOURCE_
<android.text.style.EasyEditSpan: int getSpanTypeIdInternal()> -> _SOURCE_
<java.io.FileDescriptor: boolean valid()> -> _SOURCE_
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)> -> _SOURCE_
<java.lang.reflect.Method: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()> -> _SOURCE_
<android.content.pm.ModuleInfo: java.lang.String toString()> -> _SOURCE_
<android.text.util.Rfc822Token: java.lang.String toString()> -> _SOURCE_
<com.android.ims.internal.uce.presence.PresRlmiInfo: int getVersion()> -> _SOURCE_
<java.time.temporal.WeekFields: java.time.temporal.TemporalField weekOfMonth()> -> _SOURCE_
<android.media.AudioManager: boolean isInputDevice(int)> -> _SOURCE_
<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.autofill.AutofillId getAutofillId()> -> _SOURCE_
<android.os.storage.StorageEventListener: void onUsbMassStorageConnectionChanged(boolean)> -> _SOURCE_
<android.hardware.camera2.CameraCharacteristics: java.util.List getKeysNeedingPermission()> -> _SOURCE_
<android.content.PermissionChecker: int checkCallingPermissionForDataDelivery(android.content.Context,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.appwidget.AppWidgetManager: android.os.Bundle getAppWidgetOptions(int)> -> _SOURCE_
<android.app.AlertDialog: android.widget.ListView getListView()> -> _SOURCE_
<android.media.tv.tuner.frontend.DvbtFrontendSettings$Builder: android.media.tv.tuner.frontend.DvbtFrontendSettings build()> -> _SOURCE_
<java.lang.reflect.AccessibleObject: java.lang.'annotation'.Annotation[] getAnnotations()> -> _SOURCE_
<android.util.proto.ProtoInputStream: byte[] readBytes(long)> -> _SOURCE_
<android.hardware.usb.UsbManager: boolean hasPermission(android.hardware.usb.UsbAccessory)> -> _SOURCE_
<android.hardware.usb.UsbDeviceConnection: android.hardware.usb.UsbRequest requestWait(long)> -> _SOURCE_
<android.media.soundtrigger.SoundTriggerDetectionService: void onError(java.util.UUID,android.os.Bundle,int,int)> -> _SOURCE_
<android.app.AutomaticZenRule: java.lang.String toString()> -> _SOURCE_
<java.util.concurrent.ForkJoinWorkerThread: java.util.concurrent.ForkJoinPool getPool()> -> _SOURCE_
<android.app.WindowConfiguration: int getDisplayWindowingMode()> -> _SOURCE_
<android.os.storage.StorageManager: java.lang.String getBestVolumeDescription(android.os.storage.VolumeInfo)> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: boolean isLe2MPhySupported()> -> _SOURCE_
<java.util.Locale: boolean hasExtensions()> -> _SOURCE_
<android.hardware.soundtrigger.SoundTrigger$SoundModelEvent: java.lang.String toString()> -> _SOURCE_
<android.speech.tts.TextToSpeechService: void onDestroy()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo$CollectionInfo getCollectionInfo()> -> _SOURCE_
<android.hardware.location.NanoAppFilter: java.lang.String toString()> -> _SOURCE_
<android.view.WindowInfo: java.lang.String toString()> -> _SOURCE_
<android.view.KeyboardShortcutGroup: java.lang.CharSequence getLabel()> -> _SOURCE_
<java.util.logging.Formatter: java.lang.String getTail(java.util.logging.Handler)> -> _SOURCE_
<java.util.concurrent.ConcurrentHashMap: java.util.Set keySet()> -> _SOURCE_
<android.view.textclassifier.ConversationActions$Request: java.util.List getHints()> -> _SOURCE_
<android.telecom.RemoteConnection: android.telecom.RemoteConnection$VideoProvider getVideoProvider()> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing$Config: int getMbcBandCount()> -> _SOURCE_
<android.os.UserHandle: void formatUid(java.io.PrintWriter,int)> -> _SOURCE_
<android.view.SyncRtSurfaceTransactionApplier$SurfaceParams$Builder: android.view.SyncRtSurfaceTransactionApplier$SurfaceParams build()> -> _SOURCE_
<com.android.internal.telephony.SmsApplication$SmsApplicationData: java.lang.String toString()> -> _SOURCE_
<android.content.pm.ResolveInfo: android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager)> -> _SOURCE_
<android.media.MediaRouter: android.media.MediaRouter$RouteInfo getSelectedRoute()> -> _SOURCE_
<android.telephony.CellSignalStrengthTdscdma: int getRssi()> -> _SOURCE_
<android.os.UserManager: int getUserRestrictionSource(java.lang.String,android.os.UserHandle)> -> _SOURCE_
<android.service.notification.NotificationListenerService: java.util.List getNotificationChannelGroups(java.lang.String,android.os.UserHandle)> -> _SOURCE_
<android.telecom.TelecomManager: java.lang.String getVoiceMailNumber(android.telecom.PhoneAccountHandle)> -> _SOURCE_
<android.service.autofill.AutofillService: void onDisconnected()> -> _SOURCE_
<android.telephony.SmsMessage: java.lang.String getMessageBody()> -> _SOURCE_
<android.app.NotificationChannel: boolean canBypassDnd()> -> _SOURCE_
<com.android.internal.view.menu.MenuBuilder: void close()> -> _SOURCE_
<android.app.AppOpsManager: android.app.AppOpsManager$RestrictionBypass opAllowSystemBypassRestriction(int)> -> _SOURCE_
<android.permission.PermissionControllerManager: void dump(java.io.FileDescriptor,java.lang.String[])> -> _SOURCE_
<android.net.apf.ApfCapabilities: int[] getApfEtherTypeBlackList()> -> _SOURCE_
<android.service.notification.NotificationListenerService: void onNotificationRankingUpdate(android.service.notification.NotificationListenerService$RankingMap)> -> _SOURCE_
<android.telephony.TelephonyManager: int getDataActivationState()> -> _SOURCE_
<android.telephony.ims.ImsMmTelManager: boolean isVtSettingEnabled()> -> _SOURCE_
<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)> -> _SOURCE_
<android.graphics.Point: android.graphics.Point convert(android.util.Size)> -> _SOURCE_
<java.text.DecimalFormatSymbols: java.lang.String getExponentSeparator()> -> _SOURCE_
<android.service.media.MediaBrowserService: android.media.session.MediaSessionManager$RemoteUserInfo getCurrentBrowserInfo()> -> _SOURCE_
<android.content.ContextWrapper: android.content.Context getApplicationContext()> -> _SOURCE_
<android.telephony.SubscriptionManager: int[] getCompleteActiveSubscriptionIdList()> -> _SOURCE_
<android.net.IpSecAlgorithm: byte[] getKey()> -> _SOURCE_
<android.app.Notification$MessagingStyle$Message: java.lang.String getDataMimeType()> -> _SOURCE_
<android.view.VelocityTracker: boolean getEstimator(int,android.view.VelocityTracker$Estimator)> -> _SOURCE_
<android.provider.DocumentsContract$Path: java.util.List getPath()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long getPhoneSignalStrengthTime(int,long,int)> -> _SOURCE_
<android.location.GpsMeasurement: boolean hasPseudorangeUncertaintyInMeters()> -> _SOURCE_
<android.os.BatteryStats$Timer: android.os.BatteryStats$Timer getSubTimer()> -> _SOURCE_
<android.telephony.mbms.vendor.MbmsGroupCallServiceBase: void onAppCallbackDied(int,int)> -> _SOURCE_
<android.app.ActivityManager$TaskDescription: boolean getEnsureNavigationBarContrastWhenTransparent()> -> _SOURCE_
<java.util.Calendar: int getMinimalDaysInFirstWeek()> -> _SOURCE_
<android.service.autofill.augmented.FillRequest: android.view.autofill.AutofillValue getFocusedValue()> -> _SOURCE_
<android.service.controls.Control: android.service.controls.templates.ControlTemplate getControlTemplate()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.lang.CharSequence getOrganizationName(android.content.ComponentName)> -> _SOURCE_
<android.os.BatterySaverPolicyConfig: boolean getAdvertiseIsEnabled()> -> _SOURCE_
<android.media.midi.MidiOutputPort: int getPortNumber()> -> _SOURCE_
<android.net.ProxyInfo: int getPort()> -> _SOURCE_
<java.security.Security: java.security.Provider getProvider(java.lang.String)> -> _SOURCE_
<android.content.pm.VersionedPackage: java.lang.String toString()> -> _SOURCE_
<android.view.ViewDebug: void dumpCapturedView(java.lang.String,java.lang.Object)> -> _SOURCE_
<android.telephony.SignalStrength: int getLteRsrp()> -> _SOURCE_
<android.database.DatabaseUtils: int getSqlStatementType(java.lang.String)> -> _SOURCE_
<android.location.Location: long getElapsedRealtimeNanos()> -> _SOURCE_
<com.android.internal.telephony.CarrierAppUtils: void disableCarrierAppsUntilPrivileged(java.lang.String,android.telephony.TelephonyManager,android.content.ContentResolver,int,java.util.Set,java.util.Map,android.content.Context)> -> _SOURCE_
<android.os.storage.StorageManager: boolean isEncrypted(java.io.File)> -> _SOURCE_
<android.view.View: android.view.View getTooltipView()> -> _SOURCE_
<android.view.Window: android.view.Window$Callback getCallback()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: int getPasswordMinimumSymbols(android.content.ComponentName,int)> -> _SOURCE_
<javax.security.auth.x500.X500Principal: java.lang.String getName()> -> _SOURCE_
<android.widget.ExpandableListView: long getSelectedId()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isIccLockEnabled()> -> _SOURCE_
<android.telephony.CellIdentityCdma: int getNetworkId()> -> _SOURCE_
<android.content.pm.ShortcutManager: long getRateLimitResetTime()> -> _SOURCE_
<android.hardware.camera2.params.StreamConfigurationMap: int[] getInputFormats()> -> _SOURCE_
<android.telecom.Call$Details: android.telecom.Call$Details createFromParcelableCall(android.telecom.ParcelableCall)> -> _SOURCE_
<android.media.MediaDrm$KeyRequest: java.lang.String getDefaultUrl()> -> _SOURCE_
<android.media.MediaDrm: int getMaxSecurityLevel()> -> _SOURCE_
<android.net.Proxy: java.lang.String getDefaultHost()> -> _SOURCE_
<android.net.ConnectivityDiagnosticsManager$ConnectivityDiagnosticsCallback: void onDataStallSuspected(android.net.ConnectivityDiagnosticsManager$DataStallReport)> -> _SOURCE_
<android.media.AudioFormat: java.lang.String toLogFriendlyEncoding(int)> -> _SOURCE_
<android.telephony.SmsMessage: int getIndexOnIcc()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.CharSequence getSimCarrierIdName()> -> _SOURCE_
<android.content.ContentValues: android.util.ArrayMap getValues()> -> _SOURCE_
<android.print.PrintAttributes$MediaSize: int getWidthMils()> -> _SOURCE_
<android.app.Dialog: boolean isShowing()> -> _SOURCE_
<android.accessibilityservice.GestureDescription$TouchPoint: java.lang.String toString()> -> _SOURCE_
<android.os.Environment: java.io.File[] buildExternalStorageAppDataDirs(java.lang.String)> -> _SOURCE_
<android.transition.Transition: java.util.List getTargetTypes()> -> _SOURCE_
<java.text.DateFormat: java.text.DateFormat getDateTimeInstance()> -> _SOURCE_
<android.net.NetworkCapabilities: java.lang.String transportNamesOf(int[])> -> _SOURCE_
<android.app.AppOpsManager: java.util.List getPackagesForOps(java.lang.String[])> -> _SOURCE_
<android.media.MediaMetadataRetriever: java.util.List getFramesAtIndex(int,int)> -> _SOURCE_
<android.app.FragmentManager: android.app.FragmentTransaction openTransaction()> -> _SOURCE_
<android.renderscript.Program$BaseProgramBuilder: int getCurrentConstantIndex()> -> _SOURCE_
<android.media.MediaPlayer$DrmInfo: java.util.Map getPssh()> -> _SOURCE_
<android.media.AudioRecord: void stop()> -> _SOURCE_
<android.content.pm.LauncherActivityInfo: java.lang.String getName()> -> _SOURCE_
<java.security.spec.PSSParameterSpec: java.security.spec.AlgorithmParameterSpec getMGFParameters()> -> _SOURCE_
<com.android.ims.internal.uce.common.CapInfo: boolean isGeoPushSupported()> -> _SOURCE_
<android.hardware.location.NanoAppState: long getNanoAppVersion()> -> _SOURCE_
<android.companion.BluetoothDeviceFilter: java.util.List getServiceUuids()> -> _SOURCE_
<android.app.timezonedetector.TelephonyTimeZoneSuggestion: void addDebugInfo(java.lang.String)> -> _SOURCE_
<android.media.tv.tuner.filter.MediaEvent: boolean isPtsPresent()> -> _SOURCE_
<android.widget.RadioGroup: int getAutofillType()> -> _SOURCE_
<java.security.spec.DSAPublicKeySpec: java.math.BigInteger getG()> -> _SOURCE_
<java.security.KeyStore: void store(java.security.KeyStore$LoadStoreParameter)> -> _SOURCE_
<android.app.Notification: java.lang.String getChannelId()> -> _SOURCE_
<android.provider.ContactsContract$Contacts: android.net.Uri lookupContact(android.content.ContentResolver,android.net.Uri)> -> _SOURCE_
<android.telephony.SignalStrength: java.util.List getCellSignalStrengths(java.lang.Class)> -> _SOURCE_
<android.os.storage.StorageManager: java.lang.String getVolumeState(java.lang.String)> -> _SOURCE_
<android.mtp.MtpEvent: int getStorageId()> -> _SOURCE_
<android.bluetooth.BluetoothHeadset: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
<android.telecom.ParcelableCall: android.telecom.StatusHints getStatusHints()> -> _SOURCE_
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)> -> _SOURCE_
<android.app.AppOpsManager$HistoricalPackageOps: int getAttributedOpsCount()> -> _SOURCE_
<android.content.ContextWrapper: android.graphics.drawable.Drawable peekWallpaper()> -> _SOURCE_
<android.media.AudioRecord: java.util.List getActiveMicrophones()> -> _SOURCE_
<android.location.LocationProvider: boolean requiresSatellite()> -> _SOURCE_
<android.net.UrlQuerySanitizer: android.net.UrlQuerySanitizer$ValueSanitizer getUrlAndSpaceLegal()> -> _SOURCE_
<java.lang.StringBuffer: int indexOf(java.lang.String)> -> _SOURCE_
<android.graphics.Insets: android.graphics.Rect toRect()> -> _SOURCE_
<com.android.internal.telephony.gsm.SmsMessage: com.android.internal.telephony.gsm.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,java.lang.String,boolean)> -> _SOURCE_
<android.hardware.usb.UsbConfiguration: int getInterfaceCount()> -> _SOURCE_
<android.renderscript.Allocation: android.renderscript.Element getElement()> -> _SOURCE_
<android.telecom.Call$Details: android.telecom.PhoneAccountHandle getAccountHandle()> -> _SOURCE_
<android.telephony.SubscriptionInfo: int getMcc()> -> _SOURCE_
<android.util.DebugUtils: java.util.List callersWithin(java.lang.Class,int)> -> _SOURCE_
<android.telephony.AnomalyReporter: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SOURCE_
<android.telephony.CellSignalStrengthGsm: int getAsuLevel()> -> _SOURCE_
<android.telecom.CallScreeningService$CallResponse: boolean getRejectCall()> -> _SOURCE_
<android.media.tv.tuner.filter.TimeFilter: long getSourceTime()> -> _SOURCE_
<android.mtp.MtpStorage: int getStorageId()> -> _SOURCE_
<java.security.Provider: void clear()> -> _SOURCE_
<android.permission.PermissionControllerManager: void revokeRuntimePermission(java.lang.String,java.lang.String)> -> _SOURCE_
<java.lang.reflect.Method: java.lang.String getName()> -> _SOURCE_
<android.app.FragmentController: android.app.LoaderManager getLoaderManager()> -> _SOURCE_
<android.app.ActivityManager: void alwaysShowUnsupportedCompileSdkWarning(android.content.ComponentName)> -> _SOURCE_
<android.widget.TableLayout: void requestLayout()> -> _SOURCE_
<android.database.sqlite.SQLiteStatement: java.lang.String simpleQueryForString()> -> _SOURCE_
<android.app.Activity: android.os.IBinder autofillClientGetActivityToken()> -> _SOURCE_
<android.os.storage.StorageManager: boolean checkPermissionWriteAudio(boolean,int,int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.telephony.CallQuality: int getNumRtpPacketsTransmittedLost()> -> _SOURCE_
<android.content.ContentResolver: boolean getMasterSyncAutomaticallyAsUser(int)> -> _SOURCE_
<android.app.usage.StorageStatsManager: boolean isQuotaSupported(java.lang.String)> -> _SOURCE_
<android.security.keystore.KeyProtection: java.lang.String[] getDigests()> -> _SOURCE_
<android.provider.ContactsContract$ProfileSyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])> -> _SOURCE_
<android.hardware.display.WifiDisplayStatus: int getScanState()> -> _SOURCE_
<android.hardware.input.KeyboardLayout: android.os.LocaleList getLocales()> -> _SOURCE_
<java.time.Month: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)> -> _SOURCE_
<android.util.proto.ProtoUtils: java.lang.String currentFieldToString(android.util.proto.ProtoInputStream)> -> _SOURCE_
<android.bluetooth.BluetoothA2dp: android.bluetooth.BluetoothDevice getActiveDevice()> -> _SOURCE_
<android.hardware.location.MemoryRegion: boolean isExecutable()> -> _SOURCE_
<android.location.Geocoder: java.util.List getFromLocationName(java.lang.String,int,double,double,double,double)> -> _SOURCE_
<android.os.storage.StorageManager: boolean isUsbMassStorageConnected()> -> _SOURCE_
<android.content.ContextWrapper: java.lang.String getPackageName()> -> _SOURCE_
<android.telecom.RemoteConnection: android.telecom.RemoteConnection failure(android.telecom.DisconnectCause)> -> _SOURCE_
<java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()> -> _SOURCE_
<javax.net.ssl.SSLContext: javax.net.ssl.SSLServerSocketFactory getServerSocketFactory()> -> _SOURCE_
<javax.security.auth.callback.UnsupportedCallbackException: javax.security.auth.callback.Callback getCallback()> -> _SOURCE_
<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy$Builder permitDiskReads()> -> _SOURCE_
<com.android.internal.net.VpnInfo: java.lang.String toString()> -> _SOURCE_
<android.util.LruCache: int hitCount()> -> _SOURCE_
<android.telephony.cdma.CdmaSmsCbProgramData: int getMaxMessages()> -> _SOURCE_
<android.bluetooth.BluetoothUuid: boolean is16BitUuid(android.os.ParcelUuid)> -> _SOURCE_
<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentDestroyed(android.app.FragmentManager,android.app.Fragment)> -> _SOURCE_
<android.media.MediaRouter2Manager: android.media.RoutingSessionInfo getSystemRoutingSession()> -> _SOURCE_
<android.telephony.PreciseCallState: int getPreciseDisconnectCause()> -> _SOURCE_
<android.telecom.PhoneAccount: java.lang.CharSequence getShortDescription()> -> _SOURCE_
<android.media.MediaFormat: java.nio.ByteBuffer getByteBuffer(java.lang.String,java.nio.ByteBuffer)> -> _SOURCE_
<android.hardware.location.ContextHubMessage: byte[] getData()> -> _SOURCE_
<android.telephony.cdma.CdmaSmsCbProgramData: int getCategory()> -> _SOURCE_
<android.hardware.location.NanoAppInstanceInfo: int getContexthubId()> -> _SOURCE_
<android.service.quickaccesswallet.GetWalletCardsError: android.graphics.drawable.Icon getIcon()> -> _SOURCE_
<android.telephony.CellBroadcastService: java.lang.CharSequence getCellBroadcastAreaInfo(int)> -> _SOURCE_
<android.telephony.CallQuality: int getNumRtpPacketsTransmitted()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$ControllerActivityCounterImpl: com.android.internal.os.BatteryStatsImpl$LongSamplingCounter getScanTimeCounter()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: void markProfileOwnerOnOrganizationOwnedDevice(android.content.ComponentName)> -> _SOURCE_
<android.service.textclassifier.TextClassifierService: android.view.textclassifier.TextClassifier getLocalTextClassifier()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: int getWifiStateCount(int,int)> -> _SOURCE_
<android.service.voice.VoiceInteractionService: boolean isActiveService(android.content.Context,android.content.ComponentName)> -> _SOURCE_
<java.security.cert.X509CRL: java.security.cert.X509CRLEntry getRevokedCertificate(java.security.cert.X509Certificate)> -> _SOURCE_
<android.os.Message: java.lang.Runnable getCallback()> -> _SOURCE_
<android.media.tv.tuner.frontend.Atsc3FrontendCapabilities: int getFecCapability()> -> _SOURCE_
<android.telephony.SubscriptionInfo: boolean canManageSubscription(android.content.Context,java.lang.String)> -> _SOURCE_
<android.location.GpsStatus: int getMaxSatellites()> -> _SOURCE_
<android.preference.PreferenceManager: boolean isStorageDefault()> -> _SOURCE_
<android.widget.AbsSeekBar: android.graphics.drawable.Drawable getTickMark()> -> _SOURCE_
<android.location.GpsMeasurement: boolean hasDopplerShiftInHz()> -> _SOURCE_
<android.app.timedetector.NetworkTimeSuggestion: java.lang.String toString()> -> _SOURCE_
<android.widget.AdapterView: int getCount()> -> _SOURCE_
<java.security.KeyStore: java.lang.String getCertificateAlias(java.security.cert.Certificate)> -> _SOURCE_
<com.android.internal.util.DumpUtils: boolean isNonPlatformPackage(java.lang.String)> -> _SOURCE_
<android.net.Proxy: void setHttpProxySystemProperty(android.net.ProxyInfo)> -> _SOURCE_
<android.bluetooth.BluetoothGattServerCallback: void onDescriptorReadRequest(android.bluetooth.BluetoothDevice,int,int,android.bluetooth.BluetoothGattDescriptor)> -> _SOURCE_
<android.media.audiopolicy.AudioProductStrategy: android.media.AudioAttributes getAudioAttributesForStrategyWithLegacyStreamType(int)> -> _SOURCE_
<android.telecom.CallRedirectionService: void cancelCall()> -> _SOURCE_
<android.service.voice.VoiceInteractionSession$ConfirmationRequest: java.lang.CharSequence getPrompt()> -> _SOURCE_
<android.net.NetworkAgentConfig: int getLegacyType()> -> _SOURCE_
<android.net.LinkAddress: int getFlags()> -> _SOURCE_
<android.service.notification.NotificationListenerService$Ranking: boolean isConversation()> -> _SOURCE_
<android.media.MediaDrm: boolean isCryptoSchemeSupported(java.util.UUID,java.lang.String,int)> -> _SOURCE_
<android.renderscript.ProgramStore: boolean isColorMaskBlueEnabled()> -> _SOURCE_
<android.app.Instrumentation: android.os.Bundle getAllocCounts()> -> _SOURCE_
<android.view.InputDevice$MotionRange: float getRange()> -> _SOURCE_
<android.view.View: int getWindowVisibility()> -> _SOURCE_
<java.time.Month: long getLong(java.time.temporal.TemporalField)> -> _SOURCE_
<android.location.GnssCapabilities: boolean hasSatelliteBlacklist()> -> _SOURCE_
<java.net.HttpCookie: java.lang.String toString()> -> _SOURCE_
<android.app.ApplicationExitInfo: java.lang.String getProcessName()> -> _SOURCE_
<android.telephony.TelephonyManager: int getLteOnCdmaModeStatic()> -> _SOURCE_
<android.database.ContentObserver: android.database.IContentObserver getContentObserver()> -> _SOURCE_
<android.net.wifi.nl80211.WifiNl80211Manager: android.net.wifi.nl80211.WifiNl80211Manager$SignalPollResult signalPoll(java.lang.String)> -> _SOURCE_
<android.hardware.location.GeofenceHardwareRequestParcelable: int getId()> -> _SOURCE_
<android.telephony.data.ApnSetting: int getMtu()> -> _SOURCE_
<android.security.identity.IdentityCredentialStore: android.security.identity.IdentityCredentialStore getDirectAccessInstance(android.content.Context)> -> _SOURCE_
<android.hardware.soundtrigger.SoundTrigger$KeyphraseSoundModel: java.lang.String toString()> -> _SOURCE_
<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.HdmiAudioSystemClient getAudioSystemClient()> -> _SOURCE_
<android.media.session.MediaSession$Token: int getUid()> -> _SOURCE_
<android.telephony.NeighboringCellInfo: int getRssi()> -> _SOURCE_
<android.security.KeyStore: boolean unlock(int,java.lang.String)> -> _SOURCE_
<android.nfc.cardemulation.CardEmulation: java.util.List getAidsForPreferredPaymentService()> -> _SOURCE_
<android.telephony.ims.ImsCallProfile: void setCallerNumberVerificationStatus(int)> -> _SOURCE_
<android.media.ExifInterface: long getDateTime()> -> _SOURCE_
<android.app.prediction.AppPredictionSessionId: java.lang.String toString()> -> _SOURCE_
<java.net.URI: java.lang.String getHost()> -> _SOURCE_
<android.os.IncidentReportArgs: java.lang.String toString()> -> _SOURCE_
<android.app.ApplicationPackageManager: int getPackageUidAsUser(java.lang.String,int)> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase$OpenParams: android.database.DatabaseErrorHandler getErrorHandler()> -> _SOURCE_
<android.view.VerifiedKeyEvent: int getScanCode()> -> _SOURCE_
<android.service.notification.StatusBarNotification: boolean isClearable()> -> _SOURCE_
<android.hardware.hdmi.HdmiRecordListener$TimerStatusData: int getDurationMinute()> -> _SOURCE_
<android.content.ContentProviderOperation: java.lang.String typeToString(int)> -> _SOURCE_
<com.android.internal.util.StateMachine: android.os.Handler getHandler()> -> _SOURCE_
<android.telecom.RemoteConnection$VideoProvider: void requestCameraCapabilities()> -> _SOURCE_
<com.android.internal.view.menu.SubMenuBuilder: boolean isShortcutsVisible()> -> _SOURCE_
<android.app.DownloadManager$Query: android.app.DownloadManager$Query setFilterByString(java.lang.String)> -> _SOURCE_
<android.webkit.CacheManager: java.io.File getCacheFileBaseDir()> -> _SOURCE_
<java.lang.invoke.MethodType: java.util.List parameterList()> -> _SOURCE_
<android.hardware.ConsumerIrManager: android.hardware.ConsumerIrManager$CarrierFrequencyRange[] getCarrierFrequencies()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isWorldPhone()> -> _SOURCE_
<android.telephony.NetworkRegistrationInfo: int getRoamingType()> -> _SOURCE_
<android.hardware.camera2.legacy.LegacyCameraDevice: long flush()> -> _SOURCE_
<android.content.BroadcastReceiver: int getResultCode()> -> _SOURCE_
<java.util.concurrent.ForkJoinPool: int getParallelism()> -> _SOURCE_
<android.net.UidRange: int getEndUser()> -> _SOURCE_
<android.location.GnssMeasurement: double getSatelliteInterSignalBiasUncertaintyNanos()> -> _SOURCE_
<android.os.PersistableBundle: java.lang.String toShortString()> -> _SOURCE_
<java.io.OutputStreamWriter: java.lang.String getEncoding()> -> _SOURCE_
<java.net.URLConnection: java.net.FileNameMap getFileNameMap()> -> _SOURCE_
<com.android.internal.content.PackageHelper: int resolveInstallLocation(android.content.Context,android.content.pm.PackageInstaller$SessionParams)> -> _SOURCE_
<android.os.connectivity.CellularBatteryStats: long getMonitoredRailChargeConsumedMaMillis()> -> _SOURCE_
<java.beans.PropertyChangeEvent: java.lang.String toString()> -> _SOURCE_
<java.net.URLConnection: int getHeaderFieldInt(java.lang.String,int)> -> _SOURCE_
<java.net.Socket: boolean isOutputShutdown()> -> _SOURCE_
<android.app.usage.UsageStatsManager: android.app.usage.UsageEvents queryEvents(long,long)> -> _SOURCE_
<android.net.wifi.WifiMigration: android.net.wifi.WifiMigration$SettingsMigrationData loadFromSettings(android.content.Context)> -> _SOURCE_
<android.security.keystore.recovery.KeyChainProtectionParams: int getLockScreenUiFormat()> -> _SOURCE_
<android.app.Activity: java.lang.Object onRetainNonConfigurationInstance()> -> _SOURCE_
<android.app.backup.BackupTransport: int getRestoreData(android.os.ParcelFileDescriptor)> -> _SOURCE_
<java.nio.charset.IllegalCharsetNameException: java.lang.String getCharsetName()> -> _SOURCE_
<android.telephony.CellConfigLte: java.lang.String toString()> -> _SOURCE_
<android.webkit.WebResourceResponse: java.lang.String getMimeType()> -> _SOURCE_
<android.service.media.MediaBrowserService$BrowserRoot: android.os.Bundle getExtras()> -> _SOURCE_
<android.net.UrlQuerySanitizer: java.lang.String getValue(java.lang.String)> -> _SOURCE_
<android.os.Debug$MemoryInfo: int getOtherSharedDirty(int)> -> _SOURCE_
<android.telephony.CellIdentity: boolean isValidPlmn(java.lang.String)> -> _SOURCE_
<android.os.NullVibrator: boolean hasVibrator()> -> _SOURCE_
<android.telephony.ims.stub.ImsCallSessionImplBase: com.android.ims.internal.IImsCallSession getServiceImpl()> -> _SOURCE_
<android.telephony.SubscriptionManager: android.os.ParcelUuid createSubscriptionGroup(java.util.List)> -> _SOURCE_
<android.provider.ContactsContract$SyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])> -> _SOURCE_
<android.database.BulkCursorToCursorAdaptor: android.database.IContentObserver getObserver()> -> _SOURCE_
<android.util.SparseBooleanArray: int size()> -> _SOURCE_
<java.lang.reflect.Constructor: int getModifiers()> -> _SOURCE_
<java.net.CookieHandler: java.net.CookieHandler getDefault()> -> _SOURCE_
<android.opengl.GLSurfaceView: int getDebugFlags()> -> _SOURCE_
<android.media.midi.MidiDevice: android.media.midi.MidiDeviceInfo getInfo()> -> _SOURCE_
<android.location.GpsMeasurement: boolean isUsedInFix()> -> _SOURCE_
<android.os.TestLooperManager: android.os.Message next()> -> _SOURCE_
<com.android.internal.os.ProcTimeInStateReader: long[] getFrequenciesKhz()> -> _SOURCE_
<android.hardware.location.NanoAppMessage: boolean isBroadcastMessage()> -> _SOURCE_
<android.service.dreams.DreamService: android.os.IBinder onBind(android.content.Intent)> -> _SOURCE_
<android.se.omapi.Channel: byte[] getSelectResponse()> -> _SOURCE_
<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()> -> _SOURCE_
<android.hardware.input.InputManager: android.os.Vibrator getInputDeviceVibrator(int)> -> _SOURCE_
<android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()> -> _SOURCE_
<android.app.NotificationManager: int zenModeToInterruptionFilter(int)> -> _SOURCE_
<android.app.AlertDialog$Builder: android.app.AlertDialog create()> -> _SOURCE_
<android.app.TaskInfo: android.window.WindowContainerToken getToken()> -> _SOURCE_
<java.util.concurrent.LinkedBlockingQueue: java.lang.Object[] toArray()> -> _SOURCE_
<android.app.ApplicationExitInfo: java.lang.String toString()> -> _SOURCE_
<android.os.Bundle: java.util.ArrayList getCharSequenceArrayList(java.lang.String)> -> _SOURCE_
<org.xml.sax.InputSource: java.io.Reader getCharacterStream()> -> _SOURCE_
<android.media.tv.TvInputService$RecordingSession: void notifyTuned(android.net.Uri)> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isTetheringApnRequired()> -> _SOURCE_
<android.hardware.hdmi.HdmiControlServiceWrapper: java.util.List getDeviceList()> -> _SOURCE_
<android.view.VerifiedMotionEvent: int getButtonState()> -> _SOURCE_
<android.media.RoutingSessionInfo$Builder: android.media.RoutingSessionInfo build()> -> _SOURCE_
<android.media.MediaExtractor: java.util.Map getPsshInfo()> -> _SOURCE_
<android.net.ConnectivityManager: int getNetworkPreference()> -> _SOURCE_
<android.app.backup.BackupAgent: void onRestore(android.app.backup.BackupDataInput,long,android.os.ParcelFileDescriptor)> -> _SOURCE_
<android.os.Handler: android.os.Handler mainIfNull(android.os.Handler)> -> _SOURCE_
<android.security.KeyChain: java.security.cert.X509Certificate toCertificate(byte[])> -> _SOURCE_
<android.view.VerifiedMotionEvent: int getActionMasked()> -> _SOURCE_
<android.app.Notification$Builder: android.app.Notification build()> -> _SOURCE_
<android.view.SurfaceControl: long[] getPhysicalDisplayIds()> -> _SOURCE_
<android.net.NetworkRequest$Builder: android.net.NetworkRequest build()> -> _SOURCE_
<android.app.Instrumentation: java.lang.String getProcessName()> -> _SOURCE_
<android.nfc.tech.MifareUltralight: int getTimeout()> -> _SOURCE_
<android.content.pm.LabeledIntent: int getLabelResource()> -> _SOURCE_
<android.hardware.fingerprint.FingerprintManager: boolean hasEnrolledFingerprints()> -> _SOURCE_
<android.telephony.TelephonyRegistryManager: void notifyCallQualityChanged(int,int,android.telephony.CallQuality,int)> -> _SOURCE_
<android.graphics.drawable.Drawable: int getLevel()> -> _SOURCE_
<android.os.storage.StorageManager: java.util.List getWritablePrivateVolumes()> -> _SOURCE_
<android.app.backup.BackupAgentHelper: void onBackup(android.os.ParcelFileDescriptor,android.app.backup.BackupDataOutput,android.os.ParcelFileDescriptor)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.lang.String getApplicationRestrictionsManagingPackage(android.content.ComponentName)> -> _SOURCE_
<android.view.KeyCharacterMap: int getKeyboardType()> -> _SOURCE_
<android.appwidget.AppWidgetManager: boolean hasBindAppWidgetPermission(java.lang.String)> -> _SOURCE_
<android.telecom.Call: java.lang.String getRemainingPostDialSequence()> -> _SOURCE_
<android.media.tv.TvContract: android.net.Uri buildWatchNextProgramUri(long)> -> _SOURCE_
<android.location.GpsClock: double getTimeUncertaintyInNs()> -> _SOURCE_
<android.security.identity.IdentityCredentialStore: android.security.identity.IdentityCredentialStore getInstance(android.content.Context)> -> _SOURCE_
<android.telephony.TelephonyManager: int getCdmaEriIconMode(int)> -> _SOURCE_
<android.bluetooth.BluetoothHealth: android.os.ParcelFileDescriptor getMainChannelFd(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)> -> _SOURCE_
<android.hardware.soundtrigger.SoundTrigger$Keyphrase: int[] getUsers()> -> _SOURCE_
<android.net.Proxy: java.lang.String getHost(android.content.Context)> -> _SOURCE_
<android.hardware.location.GeofenceHardware: boolean registerForMonitorStateChangeCallback(int,android.hardware.location.GeofenceHardwareMonitorCallback)> -> _SOURCE_
<java.time.LocalDate: java.time.LocalDate now(java.time.Clock)> -> _SOURCE_
<android.telecom.Connection$RttTextStream: java.lang.String read()> -> _SOURCE_
<android.media.MediaMetadata: int size()> -> _SOURCE_
<java.net.ServerSocket: java.net.InetAddress getInetAddress()> -> _SOURCE_
<android.os.Debug: int getLoadedClassCount()> -> _SOURCE_
<android.net.TrafficStats: long getUidTcpTxBytes(int)> -> _SOURCE_
<android.media.tv.tunerresourcemanager.TunerFrontendRequest: java.lang.String toString()> -> _SOURCE_
<android.os.Message: android.os.Bundle peekData()> -> _SOURCE_
<com.android.internal.policy.PhoneWindow: android.view.View getStatusBarBackgroundView()> -> _SOURCE_
<android.view.View: java.lang.CharSequence getTooltip()> -> _SOURCE_
<android.drm.DrmManagerClient: java.lang.String getOriginalMimeType(android.net.Uri)> -> _SOURCE_
<android.view.accessibility.AccessibilityWindowInfo: java.lang.String typeToString(int)> -> _SOURCE_
<android.net.metrics.ValidationProbeEvent$Builder: android.net.metrics.ValidationProbeEvent build()> -> _SOURCE_
<android.content.pm.PackageInstaller$SessionInfo: java.lang.String[] getGrantedRuntimePermissions()> -> _SOURCE_
<android.net.NetworkPolicyManager: boolean getRestrictBackground()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean getCameraDisabled(android.content.ComponentName)> -> _SOURCE_
<android.app.Fragment: android.os.Bundle getArguments()> -> _SOURCE_
<android.app.slice.SliceProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SOURCE_
<android.telecom.Phone: boolean canAddCall()> -> _SOURCE_
<android.security.KeyChain$KeyChainConnection: android.security.IKeyChainService getService()> -> _SOURCE_
<android.net.UrlQuerySanitizer: android.net.UrlQuerySanitizer$ValueSanitizer getSpaceLegal()> -> _SOURCE_
<android.telephony.SmsMessage: java.lang.String getDisplayMessageBody()> -> _SOURCE_
<android.os.SystemConfigManager: java.util.Set getDisabledUntilUsedPreinstalledCarrierApps()> -> _SOURCE_
<java.lang.ref.ReferenceQueue: java.lang.ref.Reference poll()> -> _SOURCE_
<android.media.MediaRouter$RouteGroup: int getRouteCount()> -> _SOURCE_
<android.telephony.TelephonyManager: int getSubIdForPhoneAccount(android.telecom.PhoneAccount)> -> _SOURCE_
<android.service.notification.Adjustment: int getUser()> -> _SOURCE_
<android.content.pm.ShortcutInfo: void setReturnedByServer()> -> _SOURCE_
<android.bluetooth.BluetoothSap: android.bluetooth.BluetoothDevice getClient()> -> _SOURCE_
<android.media.tv.TvInputInfo: android.media.tv.TvInputInfo createTvInputInfo(android.content.Context,android.content.pm.ResolveInfo,android.hardware.hdmi.HdmiDeviceInfo,java.lang.String,java.lang.String,android.net.Uri)> -> _SOURCE_
<android.util.KeyValueListParser$StringValue: java.lang.String getValue()> -> _SOURCE_
<java.nio.ShortBuffer: boolean hasArray()> -> _SOURCE_
<android.content.pm.PermissionInfo: boolean isSoftRestricted()> -> _SOURCE_
<android.app.assist.AssistStructure$ViewNode: boolean isSanitized()> -> _SOURCE_
<android.telephony.PhoneNumberUtils: java.lang.String extractNetworkPortion(java.lang.String)> -> _SOURCE_
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureRequest getRequest()> -> _SOURCE_
<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()> -> _SOURCE_
<android.telephony.mbms.DownloadRequest: int getVersion()> -> _SOURCE_
<android.telephony.UiccCardInfo: int getSlotIndex()> -> _SOURCE_
<android.content.rollback.PackageRollbackInfo: java.lang.String getPackageName()> -> _SOURCE_
<android.content.pm.PackagePartitions: java.util.ArrayList getOrderedPartitions(java.util.function.Function)> -> _SOURCE_
<android.net.wifi.nl80211.WifiNl80211Manager: android.net.wifi.nl80211.WifiNl80211Manager$TxPacketCounters getTxPacketCounters(java.lang.String)> -> _SOURCE_
<android.security.KeyPairGeneratorSpec: java.util.Date getEndDate()> -> _SOURCE_
<java.lang.StringBuffer: java.lang.String toString()> -> _SOURCE_
<android.net.LinkQualityInfo: void setTheoreticalRxBandwidth(int)> -> _SOURCE_
<android.view.RemoteAnimationAdapter: int getCallingPid()> -> _SOURCE_
<android.media.JetPlayer: java.lang.Object clone()> -> _SOURCE_
<android.service.autofill.CustomDescription: android.util.SparseArray getActions()> -> _SOURCE_
<android.telephony.TelephonyManager: int getVoiceMessageCount(int)> -> _SOURCE_
<android.telephony.ims.ImsRcsManager: void registerRcsAvailabilityCallback(java.util.concurrent.Executor,android.telephony.ims.ImsRcsManager$AvailabilityCallback)> -> _SOURCE_
<android.app.Notification$Style: android.widget.RemoteViews makeHeadsUpContentView(boolean)> -> _SOURCE_
<android.media.MediaPlayer: int getSelectedTrack(int)> -> _SOURCE_
<javax.net.ssl.SSLContext: java.lang.String getProtocol()> -> _SOURCE_
<android.service.quickaccesswallet.SelectWalletCardRequest: java.lang.String getCardId()> -> _SOURCE_
<java.security.cert.X509CertSelector: byte[] getAuthorityKeyIdentifier()> -> _SOURCE_
<android.app.ActivityView: boolean canReceivePointerEvents()> -> _SOURCE_
<android.media.tv.tuner.frontend.IsdbsFrontendSettings: int getSymbolRate()> -> _SOURCE_
<android.text.AutoGrowArray$FloatArray: int size()> -> _SOURCE_
<android.hardware.usb.UsbEndpoint: int getInterval()> -> _SOURCE_
<android.net.ConnectivityManager: android.net.LinkProperties getLinkProperties(int)> -> _SOURCE_
<android.hardware.display.DisplayedContentSamplingAttributes: int getDataspace()> -> _SOURCE_
<android.text.method.WordIterator: int preceding(int)> -> _SOURCE_
<java.text.DecimalFormat: java.lang.String getNegativeSuffix()> -> _SOURCE_
<android.view.textclassifier.TextLinks$TextLink: int getEntityCount()> -> _SOURCE_
<android.content.pm.LauncherApps$Callback: void onPackagesSuspended(java.lang.String[],android.os.UserHandle)> -> _SOURCE_
<android.hardware.display.DisplayManager: android.view.Display[] getDisplays(java.lang.String)> -> _SOURCE_
<android.telephony.ServiceState: int getRilVoiceRadioTechnology()> -> _SOURCE_
<android.app.SearchableInfo: boolean autoUrlDetect()> -> _SOURCE_
<com.android.internal.telephony.cdma.SmsMessage: boolean isStatusReportMessage()> -> _SOURCE_
<android.os.Debug: int getThreadAllocCount()> -> _SOURCE_
<java.security.spec.PSSParameterSpec: int getSaltLength()> -> _SOURCE_
<java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)> -> _SOURCE_
<android.media.MediaDrm$MediaDrmStateException: int getErrorCode()> -> _SOURCE_
<android.app.backup.AbsoluteFileBackupHelper: void performBackup(android.os.ParcelFileDescriptor,android.app.backup.BackupDataOutput,android.os.ParcelFileDescriptor)> -> _SOURCE_
<android.graphics.fonts.SystemFonts: android.graphics.fonts.FontFamily[] getSystemFallback(java.lang.String)> -> _SOURCE_
<android.telephony.TelephonyFrameworkInitializer: android.os.TelephonyServiceManager getTelephonyServiceManager()> -> _SOURCE_
<android.webkit.WebViewFactoryProvider: android.webkit.PacProcessor getPacProcessor()> -> _SOURCE_
<android.telecom.InCallAdapter: void conference(java.lang.String,java.lang.String)> -> _SOURCE_
<android.view.inputmethod.InputConnectionWrapper: int getMissingMethodFlags()> -> _SOURCE_
<android.hardware.usb.UsbConfiguration: java.lang.String toString()> -> _SOURCE_
<java.lang.Class: java.lang.String toGenericString()> -> _SOURCE_
<android.view.DisplayCutout: android.graphics.Rect[] getBoundingRectsAll()> -> _SOURCE_
<android.hardware.radio.RadioMetadata: java.lang.String toString()> -> _SOURCE_
<android.content.ContentResolver: boolean isSyncPendingAsUser(android.accounts.Account,java.lang.String,int)> -> _SOURCE_
<android.view.inputmethod.InputMethodSubtype: java.lang.String getMode()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getHintText()> -> _SOURCE_
<android.timezone.CountryTimeZones: android.icu.util.TimeZone getDefaultTimeZone()> -> _SOURCE_
<android.telephony.UiccCardInfo: int getCardId()> -> _SOURCE_
<java.lang.Class: java.lang.String getTypeName()> -> _SOURCE_
<android.content.IntentFilter: int countDataSchemeSpecificParts()> -> _SOURCE_
<java.net.Inet6Address: boolean isMulticastAddress()> -> _SOURCE_
<android.app.admin.SystemUpdateInfo: android.app.admin.SystemUpdateInfo readFromXml(org.xmlpull.v1.XmlPullParser)> -> _SOURCE_
<android.content.pm.ApplicationInfo: boolean isStaticSharedLibrary()> -> _SOURCE_
<android.view.ViewDebug: void trace(android.view.View,android.view.ViewDebug$RecyclerTraceType,int[])> -> _SOURCE_
<android.net.nsd.NsdServiceInfo: java.util.Map getAttributes()> -> _SOURCE_
<android.media.Metadata: int getInt(int)> -> _SOURCE_
<android.provider.CallLog$Calls: android.net.Uri addCall(android.telecom.CallerInfo,android.content.Context,java.lang.String,java.lang.String,java.lang.String,int,int,int,android.telecom.PhoneAccountHandle,long,int,java.lang.Long,boolean,android.os.UserHandle,boolean,int,java.lang.CharSequence,java.lang.String)> -> _SOURCE_
<com.android.internal.app.procstats.SparseMappingTable: java.lang.String dumpInternalState(boolean)> -> _SOURCE_
<android.app.AutomaticZenRule: android.content.ComponentName getOwner()> -> _SOURCE_
<android.provider.Settings$Secure: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)> -> _SOURCE_
<java.security.KeyStore: boolean isKeyEntry(java.lang.String)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv: long getStartTime(long,int)> -> _SOURCE_
<android.location.GnssAntennaInfo$SphericalCorrections: double[][] getCorrectionUncertaintiesArray()> -> _SOURCE_
<android.telephony.ims.ImsSsData: java.util.List getCallForwardInfo()> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: java.util.List getSupportedProfiles()> -> _SOURCE_
<android.service.autofill.SaveInfo$Builder: android.service.autofill.SaveInfo$Builder setValidator(android.service.autofill.Validator)> -> _SOURCE_
<android.telephony.CellIdentityLte: int getMnc()> -> _SOURCE_
<com.android.internal.app.ResolverListController: java.util.List getTopComponentNames(int)> -> _SOURCE_
<android.app.ActivityManager$TaskDescription: int getResizeMode()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo$RangeInfo: int getType()> -> _SOURCE_
<android.location.GnssMeasurement: boolean hasCarrierCycles()> -> _SOURCE_
<android.telecom.RemoteConnection: android.telecom.RemoteConference getConference()> -> _SOURCE_
<android.location.LocationManager: java.util.List getProviders(android.location.Criteria,boolean)> -> _SOURCE_
<java.security.cert.PKIXParameters: java.util.Set getInitialPolicies()> -> _SOURCE_
<android.content.ContextWrapper: android.content.Context createCredentialProtectedStorageContext()> -> _SOURCE_
<android.location.GpsMeasurement: boolean hasCarrierFrequencyInHz()> -> _SOURCE_
<android.view.Choreographer: android.view.Choreographer getInstance()> -> _SOURCE_
<android.view.InputDevice: int getKeyboardType()> -> _SOURCE_
<android.os.storage.StorageVolume: int getFatVolumeId()> -> _SOURCE_
<android.telephony.ServiceState: java.lang.String getOperatorNumeric()> -> _SOURCE_
<android.widget.Toast: int getGravity()> -> _SOURCE_
<android.app.AppGlobals: android.app.Application getInitialApplication()> -> _SOURCE_
<com.android.internal.telephony.TelephonyPermissions: boolean checkCallingOrSelfReadDeviceIdentifiers(android.content.Context,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.telephony.ims.stub.ImsUtImplBase: int queryCOLP()> -> _SOURCE_
<android.service.controls.Control$StatelessBuilder: android.service.controls.Control$StatelessBuilder setDeviceType(int)> -> _SOURCE_
<android.net.NetworkCapabilities: java.lang.String toString()> -> _SOURCE_
<android.media.midi.MidiDeviceStatus: int getOutputPortOpenCount(int)> -> _SOURCE_
<java.util.concurrent.LinkedBlockingQueue: java.util.Iterator iterator()> -> _SOURCE_
<android.app.backup.BackupAgentHelper: void addHelper(java.lang.String,android.app.backup.BackupHelper)> -> _SOURCE_
<android.media.MediaScannerConnection: boolean isConnected()> -> _SOURCE_
<java.lang.reflect.Modifier: int methodModifiers()> -> _SOURCE_
<android.net.MobileLinkQualityInfo: int getMobileNetworkType()> -> _SOURCE_
<java.util.DoubleSummaryStatistics: double getAverage()> -> _SOURCE_
<com.android.internal.content.SelectionBuilder: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String[],java.lang.String)> -> _SOURCE_
<android.content.pm.dex.ArtManager: java.lang.String getProfileName(java.lang.String)> -> _SOURCE_
<android.widget.ActionMenuPresenter: boolean isOverflowMenuShowing()> -> _SOURCE_
<android.telephony.CellSignalStrengthCdma: int getEvdoSnr()> -> _SOURCE_
<org.xml.sax.SAXException: java.lang.String toString()> -> _SOURCE_
<android.telephony.emergency.EmergencyNumber: int getEmergencyCallRouting()> -> _SOURCE_
<com.android.ims.internal.uce.common.CapInfo: boolean isChatbotRoleSupported()> -> _SOURCE_
<java.lang.invoke.ConstantCallSite: java.lang.invoke.MethodHandle getTarget()> -> _SOURCE_
<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder setNetworkTypes(int[])> -> _SOURCE_
<android.widget.VideoView: android.os.Looper getSubtitleLooper()> -> _SOURCE_
<android.bluetooth.BluetoothSocket: void requestMaximumTxDataLength()> -> _SOURCE_
<android.util.proto.ProtoStream: java.lang.String getFieldCountString(long)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isPackageSuspended(android.content.ComponentName,java.lang.String)> -> _SOURCE_
<android.hardware.ConsumerIrManager: boolean hasIrEmitter()> -> _SOURCE_
<android.app.Person: java.lang.String resolveToLegacyUri()> -> _SOURCE_
<android.window.WindowContainerTransaction$Change: boolean getHidden()> -> _SOURCE_
<android.graphics.Bitmap: int getGenerationId()> -> _SOURCE_
<android.content.pm.ApplicationInfo: boolean isAudioPlaybackCaptureAllowed()> -> _SOURCE_
<com.android.internal.util.LocationPermissionChecker: boolean isLocationModeEnabled()> -> _SOURCE_
<android.telephony.CellSignalStrengthNr: int getSsRsrq()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: long getMaximumTimeToLock(android.content.ComponentName)> -> _SOURCE_
<android.graphics.Point: void printShortString(java.io.PrintWriter)> -> _SOURCE_
<com.android.internal.telephony.CellNetworkScanResult: int getStatus()> -> _SOURCE_
<android.telecom.RemoteConnection: java.util.List getConferenceableConnections()> -> _SOURCE_
<android.text.style.TtsSpan$MoneyBuilder: android.text.style.TtsSpan$MoneyBuilder setFractionalPart(java.lang.String)> -> _SOURCE_
<android.app.Notification$MessagingStyle$Message: java.util.List getMessagesFromBundleArray(android.os.Parcelable[])> -> _SOURCE_
<android.hardware.input.InputManager: android.hardware.input.KeyboardLayout[] getKeyboardLayoutsForInputDevice(android.hardware.input.InputDeviceIdentifier)> -> _SOURCE_
<android.animation.StateListAnimator: android.view.View getTarget()> -> _SOURCE_
<android.telephony.CbGeoUtils: java.lang.String encodeGeometriesToString(java.util.List)> -> _SOURCE_
<android.os.Message: java.lang.String toString()> -> _SOURCE_
<java.security.cert.Certificate: void verify(java.security.PublicKey,java.security.Provider)> -> _SOURCE_
<android.telephony.ServiceState: java.lang.String getDataOperatorAlphaShort()> -> _SOURCE_
<com.android.internal.content.FileSystemProvider: android.database.Cursor queryDocument(java.lang.String,java.lang.String[])> -> _SOURCE_
<android.telephony.data.DataProfile$Builder: android.telephony.data.DataProfile build()> -> _SOURCE_
<java.io.BufferedWriter: void flush()> -> _SOURCE_
<android.os.connectivity.WifiBatteryStats: long getIdleTimeMillis()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getCdmaMdn()> -> _SOURCE_
<com.android.internal.telephony.cdma.SmsMessage: int getMessageType()> -> _SOURCE_
<com.android.internal.os.AppIdToPackageMap: java.lang.String mapAppId(int)> -> _SOURCE_
<android.app.servertransaction.StartActivityItem: java.lang.String toString()> -> _SOURCE_
<android.app.ListFragment: android.widget.ListAdapter getListAdapter()> -> _SOURCE_
<android.hardware.SensorEventCallback: void onSensorAdditionalInfo(android.hardware.SensorAdditionalInfo)> -> _SOURCE_
<android.net.NetworkAgentConfig: java.lang.String toString()> -> _SOURCE_
<android.media.session.MediaSessionManager: java.util.List getSession2Tokens()> -> _SOURCE_
<android.content.UriPermission: java.lang.String toString()> -> _SOURCE_
<android.hardware.soundtrigger.SoundTrigger$ModuleProperties: int getAudioCapabilities()> -> _SOURCE_
<java.security.spec.ECFieldF2m: java.math.BigInteger getReductionPolynomial()> -> _SOURCE_
<android.content.pm.ShortcutInfo: boolean isManifestVisible()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long getUahDischargeScreenDoze(int)> -> _SOURCE_
<com.android.internal.app.procstats.SparseMappingTable$Table: long[] getArrayForKey(int)> -> _SOURCE_
<android.media.tv.TvInputInfo$TvInputSettings: void putHiddenTvInputs(android.content.Context,java.util.Set,int)> -> _SOURCE_
<javax.crypto.spec.SecretKeySpec: byte[] getEncoded()> -> _SOURCE_
<android.gesture.Gesture: long getID()> -> _SOURCE_
<android.net.NetworkTemplate: android.net.NetworkTemplate buildTemplateMobileAll(java.lang.String)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String sendEnvelopeWithStatus(java.lang.String)> -> _SOURCE_
<android.app.Notification$CarExtender: android.app.Notification$CarExtender$UnreadConversation getUnreadConversation()> -> _SOURCE_
<android.drm.DrmInfoRequest: int getInfoType()> -> _SOURCE_
<android.widget.TableLayout: android.widget.TableLayout$LayoutParams generateLayoutParams(android.util.AttributeSet)> -> _SOURCE_
<android.media.AudioRecord: void startRecording()> -> _SOURCE_
<android.metrics.LogMaker: java.lang.Object[] serialize()> -> _SOURCE_
<android.widget.ZoomButtonsController: android.view.View getZoomControls()> -> _SOURCE_
<android.bluetooth.BluetoothHeadsetClientCall: android.bluetooth.BluetoothDevice getDevice()> -> _SOURCE_
<android.content.SyncAdapterType: boolean isAlwaysSyncable()> -> _SOURCE_
<android.location.Geocoder: java.util.List getFromLocationName(java.lang.String,int)> -> _SOURCE_
<android.print.PrintJobInfo: java.lang.String toString()> -> _SOURCE_
<android.app.Dialog: boolean onCreatePanelMenu(int,android.view.Menu)> -> _SOURCE_
<android.filterfw.core.SyncRunner: java.lang.Exception getError()> -> _SOURCE_
<android.media.AudioManager: boolean isOutputDevice(int)> -> _SOURCE_
<com.android.ims.internal.uce.options.OptionsSipResponse: java.lang.String getReasonPhrase()> -> _SOURCE_
<android.location.GnssStatus: float getBasebandCn0DbHz(int)> -> _SOURCE_
<android.telephony.SubscriptionManager: void setDefaultSmsSubId(int)> -> _SOURCE_
<java.security.cert.CertPathValidator: java.security.cert.CertPathValidator getInstance(java.lang.String,java.lang.String)> -> _SOURCE_
<android.widget.TextView: int[] getAutoSizeTextAvailableSizes()> -> _SOURCE_
<android.app.AppOpsManager$OpEntry: java.lang.String getProxyPackageName(int,int)> -> _SOURCE_
<android.hardware.hdmi.HdmiControlServiceWrapper: void clearTimerRecording(int,int,byte[])> -> _SOURCE_
<android.hardware.display.DisplayManager: java.util.List getAmbientBrightnessStats()> -> _SOURCE_
<android.telecom.VideoCallImpl: void requestCameraCapabilities()> -> _SOURCE_
<android.app.Notification$Style: android.widget.RemoteViews makeBigContentView()> -> _SOURCE_
<android.database.sqlite.SQLiteStatement: java.lang.String toString()> -> _SOURCE_
<android.media.MediaDescription: android.net.Uri getIconUri()> -> _SOURCE_
<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setBLASTLayer()> -> _SOURCE_
<android.media.tv.tuner.frontend.FrontendStatus: int getSpectralInversion()> -> _SOURCE_
<android.content.res.loader.ResourcesLoader: java.util.List getProviders()> -> _SOURCE_
<android.media.AudioDeviceAttributes: int getRole()> -> _SOURCE_
<android.media.tv.TvInputInfo: android.os.Bundle getExtras()> -> _SOURCE_
<android.print.PrintAttributes$Margins: int getBottomMils()> -> _SOURCE_
<android.mtp.MtpDevice: java.lang.String toString()> -> _SOURCE_
<android.telecom.CallerInfo: boolean isVoiceMailNumber()> -> _SOURCE_
<android.renderscript.Program: java.lang.String getTextureName(int)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isUsingUnifiedPassword(android.content.ComponentName)> -> _SOURCE_
<com.android.ims.internal.uce.presence.PresResInstanceInfo: com.android.ims.internal.uce.presence.PresTupleInfo[] getTupleInfo()> -> _SOURCE_
<java.security.KeyStore: void load(java.io.InputStream,char[])> -> _SOURCE_
<com.android.internal.telephony.SmsMessageBase: boolean isEmail()> -> _SOURCE_
<android.app.ActivityOptions: int getPendingIntentLaunchFlags()> -> _SOURCE_
<android.hardware.hdmi.HdmiRecordListener$TimerStatusData: int getMediaInfo()> -> _SOURCE_
<android.net.NetworkTemplate: android.net.NetworkTemplate buildTemplateMobileWildcard()> -> _SOURCE_
<android.filterfw.core.OutputPort: java.lang.String toString()> -> _SOURCE_
<android.telecom.Call$Details: java.lang.String getContactDisplayName()> -> _SOURCE_
<android.app.admin.DeviceAdminInfo: java.lang.String toString()> -> _SOURCE_
<android.content.Intent: java.lang.String toInsecureStringWithClip()> -> _SOURCE_
<android.view.textclassifier.ConversationActions$Request$Builder: android.view.textclassifier.ConversationActions$Request build()> -> _SOURCE_
<android.view.contentcapture.DataShareRequest: java.lang.String getPackageName()> -> _SOURCE_
<android.hardware.usb.UsbAccessory: java.lang.String getSerial()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.lang.String[] currentToCanonicalPackageNames(java.lang.String[])> -> _SOURCE_
<android.view.textclassifier.TextClassifierEvent: android.icu.util.ULocale getLocale()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: int getPasswordQuality(android.content.ComponentName)> -> _SOURCE_
<android.media.MediaRecorder: android.media.AudioDeviceInfo getRoutedDevice()> -> _SOURCE_
<android.view.animation.CycleInterpolator: long createNativeInterpolator()> -> _SOURCE_
<android.permission.PermissionControllerManager: void stageAndApplyRuntimePermissionsBackup(byte[],android.os.UserHandle)> -> _SOURCE_
<android.content.IntentFilter: int getVisibilityToInstantApp()> -> _SOURCE_
<android.service.dreams.DreamService: android.view.Window getWindow()> -> _SOURCE_
<android.media.tv.tuner.frontend.DvbcFrontendCapabilities: int getFecCapability()> -> _SOURCE_
<android.net.NetworkStats: java.lang.String[] getUniqueIfaces()> -> _SOURCE_
<android.view.OrientationEventListener: boolean canDetectOrientation()> -> _SOURCE_
<android.telephony.CellSignalStrengthCdma: int getCdmaDbm()> -> _SOURCE_
<android.app.job.JobSnapshot: boolean isChargingSatisfied()> -> _SOURCE_
<android.os.Debug: int getGlobalAllocCount()> -> _SOURCE_
<android.location.GnssSingleSatCorrection: int getSingleSatelliteCorrectionFlags()> -> _SOURCE_
<android.content.rollback.RollbackManager: java.util.List getRecentlyCommittedRollbacks()> -> _SOURCE_
<android.view.Window: android.content.Context getContext()> -> _SOURCE_
<android.webkit.UserPackage: boolean isInstalledPackage()> -> _SOURCE_
<java.net.DatagramPacket: java.net.InetAddress getAddress()> -> _SOURCE_
<android.animation.AnimatorListenerAdapter: void onAnimationRepeat(android.animation.Animator)> -> _SOURCE_
<java.util.Locale: java.lang.String getDisplayLanguage()> -> _SOURCE_
<android.bluetooth.BluetoothGattService: int getInstanceId()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: long getMaximumSize()> -> _SOURCE_
<com.android.internal.widget.LockPatternUtils: int getStrongAuthForUser(int)> -> _SOURCE_
<android.os.StatsServiceManager: android.os.StatsServiceManager$ServiceRegisterer getStatsdServiceRegisterer()> -> _SOURCE_
<android.net.NetworkCapabilities: java.lang.String getSsid()> -> _SOURCE_
<android.preference.Preference: android.content.SharedPreferences getSharedPreferences()> -> _SOURCE_
<android.telephony.TelephonyManager: int checkCarrierPrivilegesForPackageAnyPhone(java.lang.String)> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: int getWindowId()> -> _SOURCE_
<java.util.concurrent.LinkedBlockingDeque: int drainTo(java.util.Collection,int)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv: int getStarts(int)> -> _SOURCE_
<android.location.GnssCapabilities: boolean hasMeasurementCorrectionsExcessPathLength()> -> _SOURCE_
<android.media.AudioSystem: java.lang.String forceUseConfigToString(int)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getDeviceId(int)> -> _SOURCE_
<android.hardware.biometrics.BiometricAuthenticator$Identifier: long getDeviceId()> -> _SOURCE_
<java.util.DoubleSummaryStatistics: java.lang.String toString()> -> _SOURCE_
<android.view.View: android.view.PointerIcon getPointerIcon()> -> _SOURCE_
<android.bluetooth.BluetoothMapClient: boolean getUnreadMessages(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<android.content.pm.ShortcutInfo: java.lang.IllegalArgumentException getInvalidIconException()> -> _SOURCE_
<android.app.admin.DeviceAdminReceiver: void onProfileProvisioningComplete(android.content.Context,android.content.Intent)> -> _SOURCE_
<com.android.internal.app.chooser.MultiDisplayResolveInfo: java.util.List getTargets()> -> _SOURCE_
<android.drm.DrmSupportInfo: java.lang.String getDescription()> -> _SOURCE_
<android.app.Dialog: int getVolumeControlStream()> -> _SOURCE_
<android.os.VibrationAttributes$Builder: android.os.VibrationAttributes build()> -> _SOURCE_
<android.media.MediaCodecInfo: java.lang.String getCanonicalName()> -> _SOURCE_
<com.android.ims.internal.uce.common.CapInfo: boolean isImSupported()> -> _SOURCE_
<android.media.tv.tuner.dvr.DvrPlayback: long read(byte[],long,long)> -> _SOURCE_
<android.media.tv.TvInputInfo: boolean canRecord()> -> _SOURCE_
<android.nfc.cardemulation.ApduServiceInfo: void dumpDebug(android.util.proto.ProtoOutputStream)> -> _SOURCE_
<android.hardware.camera2.CaptureRequest: java.lang.Object getTag()> -> _SOURCE_
<android.app.AppGlobals: float getFloatCoreSetting(java.lang.String,float)> -> _SOURCE_
<android.hardware.display.BrightnessCorrection: java.lang.String toString()> -> _SOURCE_
<android.location.Address: java.lang.String getAdminArea()> -> _SOURCE_
<android.security.net.config.RootTrustManager: void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String,java.net.Socket)> -> _SOURCE_
<android.location.GnssMeasurement: long getReceivedSvTimeNanos()> -> _SOURCE_
<android.hardware.radio.RadioTuner: java.util.Map getParameters(java.util.List)> -> _SOURCE_
<android.media.AudioFormat: int getPropertySetMask()> -> _SOURCE_
<android.telephony.CellIdentityWcdma: int getChannelNumber()> -> _SOURCE_
<android.os.UserManager: android.os.PersistableBundle getSeedAccountOptions()> -> _SOURCE_
<com.android.ims.internal.uce.common.CapInfo: boolean isSmSupported()> -> _SOURCE_
<android.hardware.fingerprint.FingerprintManager$AuthenticationCallback: void onAuthenticationHelp(int,java.lang.CharSequence)> -> _SOURCE_
<android.telephony.ImsiEncryptionInfo: java.security.PublicKey getPublicKey()> -> _SOURCE_
<android.view.textservice.SpellCheckerInfo: java.lang.String getSettingsActivity()> -> _SOURCE_
<android.app.AppOpsManager$OpEntry: java.lang.String getProxyPackageName()> -> _SOURCE_
<android.app.backup.BackupTransport: android.content.Intent dataManagementIntent()> -> _SOURCE_
<android.media.Ringtone: android.media.AudioAttributes getAudioAttributes()> -> _SOURCE_
<java.nio.channels.DatagramChannel: long write(java.nio.ByteBuffer[])> -> _SOURCE_
<android.content.PermissionChecker: int checkCallingOrSelfPermissionForDataDelivery(android.content.Context,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.telecom.TelecomManager: void setUserSelectedOutgoingPhoneAccount(android.telecom.PhoneAccountHandle)> -> _SOURCE_
<android.accessibilityservice.AccessibilityServiceInfo: java.lang.String toString()> -> _SOURCE_
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendChronologyText(java.time.format.TextStyle)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean installKeyPair(android.content.ComponentName,java.security.PrivateKey,java.security.cert.Certificate[],java.lang.String,int)> -> _SOURCE_
<android.net.KeepalivePacketData: java.net.InetAddress getDstAddress()> -> _SOURCE_
<com.android.internal.widget.LinearLayoutManager: com.android.internal.widget.RecyclerView$LayoutParams generateDefaultLayoutParams()> -> _SOURCE_
<java.util.logging.Logger: java.util.logging.Level getLevel()> -> _SOURCE_
<android.telephony.SubscriptionInfo: boolean isOpportunistic()> -> _SOURCE_
<javax.net.ssl.SSLContext: javax.net.ssl.SSLParameters getDefaultSSLParameters()> -> _SOURCE_
<android.view.accessibility.AccessibilityWindowInfo: android.view.accessibility.AccessibilityNodeInfo getRoot()> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec: boolean isUniqueIdIncluded()> -> _SOURCE_
<android.bluetooth.le.PeriodicAdvertisingReport: int getRssi()> -> _SOURCE_
<android.app.ActivityManager: boolean isSmallBatteryDevice()> -> _SOURCE_
<android.telephony.TelephonyManager: int invokeOemRilRequestRaw(byte[],byte[])> -> _SOURCE_
<android.content.ContextWrapper: android.app.IApplicationThread getIApplicationThread()> -> _SOURCE_
<android.hardware.hdmi.HdmiControlServiceWrapper: android.hardware.hdmi.HdmiDeviceInfo getActiveSource()> -> _SOURCE_
<android.service.autofill.FillResponse: android.widget.RemoteViews getHeader()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: long getMobileRadioApWakeupCount(int)> -> _SOURCE_
<android.media.ExifInterface: long getGpsDateTime()> -> _SOURCE_
<com.android.internal.app.LocaleHelper: java.lang.String getDisplayLocaleList(android.os.LocaleList,java.util.Locale,int)> -> _SOURCE_
<android.content.res.Resources: android.content.res.Configuration getConfiguration()> -> _SOURCE_
<android.telephony.data.DataProfile: int getProtocolType()> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: void disableIsOffloadedFilteringSupportedCache()> -> _SOURCE_
<android.media.audiofx.EnvironmentalReverb: short getDensity()> -> _SOURCE_
<android.app.prediction.AppPredictionSessionId: int getUserId()> -> _SOURCE_
<android.telephony.CellSignalStrengthNr: int getDbm()> -> _SOURCE_
<java.time.chrono.MinguoDate: java.time.chrono.MinguoDate now()> -> _SOURCE_
<android.widget.PopupMenu: android.view.MenuInflater getMenuInflater()> -> _SOURCE_
<android.app.ApplicationExitInfo: android.os.UserHandle getUserHandle()> -> _SOURCE_
<android.os.TelephonyServiceManager: android.os.TelephonyServiceManager$ServiceRegisterer getTelephonyImsServiceRegisterer()> -> _SOURCE_
<android.media.session.MediaController: android.os.Bundle getSessionInfo()> -> _SOURCE_
<android.telephony.BarringInfo$BarringServiceInfo: boolean isBarred()> -> _SOURCE_
<android.hardware.hdmi.HdmiControlServiceWrapper: void setSystemAudioModeOnForAudioOnlySource()> -> _SOURCE_
<java.math.MathContext: java.lang.String toString()> -> _SOURCE_
<android.content.pm.PackageInstaller$SessionInfo: int getMode()> -> _SOURCE_
<android.content.Context: java.io.File getCrateDir(java.lang.String)> -> _SOURCE_
<android.telephony.CarrierRestrictionRules$Builder: android.telephony.CarrierRestrictionRules$Builder setExcludedCarriers(java.util.List)> -> _SOURCE_
<java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String,java.security.Provider)> -> _SOURCE_
<android.service.autofill.SaveInfo: android.view.autofill.AutofillId[] getOptionalIds()> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: long getDiscoveryEndMillis()> -> _SOURCE_
<javax.security.auth.Subject: java.util.Set getPrincipals()> -> _SOURCE_
<android.hardware.soundtrigger.KeyphraseEnrollmentInfo: android.content.Intent getManageKeyphraseIntent(int,java.lang.String,java.util.Locale)> -> _SOURCE_
<android.hardware.location.NanoAppBinary: boolean hasValidHeader()> -> _SOURCE_
<android.service.quickaccesswallet.GetWalletCardsError: java.lang.CharSequence getMessage()> -> _SOURCE_
<android.location.GnssSingleSatCorrection: boolean hasValidSatelliteLineOfSight()> -> _SOURCE_
<android.telephony.SignalStrength: int getEvdoEcio()> -> _SOURCE_
<android.app.WallpaperInfo: java.lang.String getSettingsActivity()> -> _SOURCE_
<android.media.RemoteControlClient$MetadataEditor: java.lang.Object clone()> -> _SOURCE_
<android.os.ZygoteProcess: void bootCompleted()> -> _SOURCE_
<java.util.WeakHashMap: int size()> -> _SOURCE_
<android.app.Notification$Action$WearableExtender: java.lang.CharSequence getCancelLabel()> -> _SOURCE_
<android.widget.GridView: int getNumColumns()> -> _SOURCE_
<android.net.http.SslCertificate$DName: java.lang.String getOName()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long getHistoryBaseTime()> -> _SOURCE_
<android.util.MonthDisplayHelper: int getFirstDayOfMonth()> -> _SOURCE_
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPictureSize()> -> _SOURCE_
<android.util.LongSparseLongArray: int size()> -> _SOURCE_
<android.telephony.TelephonyManager: int getEmergencyNumberDbVersion()> -> _SOURCE_
<android.app.RemoteInput: java.util.Map getDataResultsFromIntent(android.content.Intent,java.lang.String)> -> _SOURCE_
<android.graphics.drawable.AnimatedImageDrawable: int getLoopCount(int)> -> _SOURCE_
<com.android.internal.location.ProviderProperties: java.lang.String toString()> -> _SOURCE_
<android.media.browse.MediaBrowser$MediaItem: java.lang.String toString()> -> _SOURCE_
<android.graphics.NinePatch: int getDensity()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean supplyPin(java.lang.String)> -> _SOURCE_
<java.nio.file.DirectoryIteratorException: java.io.IOException getCause()> -> _SOURCE_
<android.os.Environment: boolean isExternalStorageLegacy(java.io.File)> -> _SOURCE_
<android.bluetooth.BluetoothDevice: int getSimAccessPermission()> -> _SOURCE_
<android.inputmethodservice.InputMethodService: java.lang.CharSequence getTextForImeAction(int)> -> _SOURCE_
<com.android.internal.telephony.util.TelephonyUtils: java.util.List emptyIfNull(java.util.List)> -> _SOURCE_
<android.hardware.biometrics.BiometricPrompt$CryptoObject: javax.crypto.Mac getMac()> -> _SOURCE_
<android.telephony.SmsCbMessage: long getReceivedTime()> -> _SOURCE_
<android.telephony.TelephonyManager: android.content.ComponentName getDefaultRespondViaMessageApplication()> -> _SOURCE_
<android.app.Notification$BubbleMetadata: android.graphics.drawable.Icon getBubbleIcon()> -> _SOURCE_
<android.telephony.MbmsDownloadSession: android.telephony.MbmsDownloadSession create(android.content.Context,java.util.concurrent.Executor,android.telephony.mbms.MbmsDownloadSessionCallback)> -> _SOURCE_
<android.media.AudioFormat: int getFrameSizeInBytes()> -> _SOURCE_
<android.media.tv.TvInputInfo$TvInputSettings: java.util.Map getCustomLabels(android.content.Context,int)> -> _SOURCE_
<com.android.internal.widget.RecyclerView$ItemAnimator: long getAddDuration()> -> _SOURCE_
<android.os.IncidentManager: java.util.List getPendingReports()> -> _SOURCE_
<android.content.pm.InstallationFile: byte[] getMetadata()> -> _SOURCE_
<android.os.connectivity.WifiBatteryStats: long getMonitoredRailChargeConsumedMaMillis()> -> _SOURCE_
<android.app.ApplicationPackageManager: android.content.res.Resources getResourcesForApplication(android.content.pm.ApplicationInfo)> -> _SOURCE_
<java.time.LocalDate: java.time.LocalDate minusWeeks(long)> -> _SOURCE_
<java.time.OffsetTime: java.lang.String toString()> -> _SOURCE_
<android.content.res.Resources: android.content.res.TypedArray obtainTypedArray(int)> -> _SOURCE_
<android.telephony.SubscriptionPlan: int getDataLimitBehavior()> -> _SOURCE_
<java.time.Period: long toTotalMonths()> -> _SOURCE_
<android.media.tv.TvInputService: java.lang.String onHdmiDeviceRemoved(android.hardware.hdmi.HdmiDeviceInfo)> -> _SOURCE_
<android.view.textclassifier.SelectionEvent: int getEventIndex()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean getAutoTimeRequired()> -> _SOURCE_
<android.media.MediaRouter2Manager: java.util.List getAvailableRoutesForRoutingSession(android.media.RoutingSessionInfo)> -> _SOURCE_
<android.hardware.hdmi.HdmiControlManager: boolean isDeviceConnected(android.hardware.hdmi.HdmiDeviceInfo)> -> _SOURCE_
<android.app.servertransaction.DestroyActivityItem: java.lang.String toString()> -> _SOURCE_
<java.nio.channels.spi.AsynchronousChannelProvider: java.nio.channels.spi.AsynchronousChannelProvider provider()> -> _SOURCE_
<android.net.metrics.DefaultNetworkEvent: java.lang.String toString()> -> _SOURCE_
<android.app.backup.BackupManager: java.lang.String getCurrentTransport()> -> _SOURCE_
<android.hardware.Camera$Parameters: java.util.List getSupportedSceneModes()> -> _SOURCE_
<android.hardware.camera2.params.StreamConfigurationMap: android.util.Range[] getHighSpeedVideoFpsRanges()> -> _SOURCE_
<android.telecom.TelecomManager: int getCurrentTtyMode()> -> _SOURCE_
<android.location.GpsMeasurement: double getDopplerShiftInHz()> -> _SOURCE_
<android.telephony.ims.RcsContactUceCapability$Builder: android.telephony.ims.RcsContactUceCapability build()> -> _SOURCE_
<android.app.RuntimeAppOpAccessMessage: int getSamplingStrategy()> -> _SOURCE_
<android.content.pm.PackageParser$Package: java.util.List getAllCodePathsExcludingResourceOnly()> -> _SOURCE_
<android.media.tv.TvInputManager$Session: java.util.List getTracks(int)> -> _SOURCE_
<com.android.ims.internal.uce.uceservice.ImsUceManager: com.android.ims.internal.uce.uceservice.ImsUceManager getInstance(android.content.Context)> -> _SOURCE_
<com.android.internal.os.ClassLoaderFactory: java.lang.ClassLoader createClassLoader(java.lang.String,java.lang.String,java.lang.ClassLoader,java.lang.String,java.util.List)> -> _SOURCE_
<java.net.NetworkInterface: int getMTU()> -> _SOURCE_
<android.app.timedetector.TelephonyTimeSuggestion: int getSlotIndex()> -> _SOURCE_
<android.widget.ToggleButton: java.lang.CharSequence getTextOff()> -> _SOURCE_
<android.inputmethodservice.InputMethodService$InputMethodImpl: void restartInput(android.view.inputmethod.InputConnection,android.view.inputmethod.EditorInfo)> -> _SOURCE_
<android.content.res.ResourceId: boolean isValid(int)> -> _SOURCE_
<android.os.Bundle: int getSize()> -> _SOURCE_
<android.hardware.location.ContextHubIntentEvent: int getEventType()> -> _SOURCE_
<android.bluetooth.BluetoothA2dp: int getConnectionPolicy(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<java.util.Locale: java.util.Set getUnicodeLocaleKeys()> -> _SOURCE_
<javax.net.ssl.SSLParameters: boolean getNeedClientAuth()> -> _SOURCE_
<android.media.MediaRouter$RouteInfo: void select()> -> _SOURCE_
<android.net.RouteInfo: java.lang.String toString()> -> _SOURCE_
<android.location.GnssSingleSatCorrection: boolean hasExcessPathLength()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo$CollectionInfo: int getRowCount()> -> _SOURCE_
<android.location.GpsMeasurement: boolean hasTimeFromLastBitInMs()> -> _SOURCE_
<android.app.admin.SecurityLog$SecurityEvent: java.lang.String getStringData(int)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isOverrideApnEnabled(android.content.ComponentName)> -> _SOURCE_
<android.telecom.Connection$VideoProvider: java.lang.String sessionEventToString(int)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: android.content.ComponentName getProfileOwnerAsUser(android.os.UserHandle)> -> _SOURCE_
<android.media.tv.tuner.Tuner: android.media.tv.tuner.frontend.FrontendInfo getFrontendInfoById(int)> -> _SOURCE_
<com.android.internal.widget.RecyclerView: com.android.internal.widget.RecyclerView$RecycledViewPool getRecycledViewPool()> -> _SOURCE_
<android.telephony.ims.feature.RcsFeature: android.telephony.ims.feature.RcsFeature$RcsImsCapabilities queryCapabilityStatus()> -> _SOURCE_
<android.view.ViewConfiguration: int getScrollBarFadeDuration()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.util.List getPreferredPackages(int)> -> _SOURCE_
<android.net.PlatformVpnProfile: int getType()> -> _SOURCE_
<android.telephony.TelephonyManager: int addDevicePolicyOverrideApn(android.content.Context,android.telephony.data.ApnSetting)> -> _SOURCE_
<android.media.tv.tuner.frontend.DvbtFrontendSettings: boolean isHighPriority()> -> _SOURCE_
<android.app.AppOpsManager$AttributedOpEntry: android.util.ArraySet collectKeys()> -> _SOURCE_
<android.telephony.CellIdentityTdscdma: int getLac()> -> _SOURCE_
<android.media.MediaDescription: java.lang.CharSequence getDescription()> -> _SOURCE_
<android.net.wifi.nl80211.NativeScanResult: android.net.MacAddress getBssid()> -> _SOURCE_
<android.telephony.ims.ImsMmTelManager: boolean isAdvancedCallingSettingEnabled()> -> _SOURCE_
<java.util.LongSummaryStatistics: java.lang.String toString()> -> _SOURCE_
<java.text.DateFormatSymbols: java.util.Locale[] getAvailableLocales()> -> _SOURCE_
<java.io.ObjectStreamClass: java.io.ObjectStreamClass lookupAny(java.lang.Class)> -> _SOURCE_
<android.media.MediaRouter2: boolean checkRouteListContainsRouteId(java.util.List,java.lang.String)> -> _SOURCE_
<android.telephony.TelephonyManager: int getMaxNumberOfSimultaneouslyActiveSims()> -> _SOURCE_
<android.net.IpSecConfig: java.lang.String toString()> -> _SOURCE_
<android.security.keystore.KeyInfo: java.util.Date getKeyValidityForOriginationEnd()> -> _SOURCE_
<android.widget.TextView: int getSelectionStart()> -> _SOURCE_
<android.app.usage.NetworkStats$Bucket: long getEndTimeStamp()> -> _SOURCE_
<java.net.URL: java.lang.String getPath()> -> _SOURCE_
<android.service.notification.StatusBarNotification: int getId()> -> _SOURCE_
<android.provider.DocumentsContract: java.lang.String getSearchDocumentsQuery(android.net.Uri)> -> _SOURCE_
<android.location.GnssMeasurement: double getAccumulatedDeltaRangeUncertaintyMeters()> -> _SOURCE_
<android.provider.Settings: boolean isCallingPackageAllowedToWriteSettings(android.content.Context,int,java.lang.String,boolean)> -> _SOURCE_
<android.service.autofill.Dataset: java.util.ArrayList getFieldValues()> -> _SOURCE_
<android.media.audiopolicy.AudioMix: int getMixType()> -> _SOURCE_
<android.hardware.soundtrigger.SoundTrigger$SoundModel: int getVersion()> -> _SOURCE_
<android.os.StrictMode: boolean vmImplicitDirectBootEnabled()> -> _SOURCE_
<android.bluetooth.BluetoothHeadset: void phoneStateChanged(int,int,int,java.lang.String,int,java.lang.String)> -> _SOURCE_
<android.telecom.RemoteConnection: boolean isVoipAudioMode()> -> _SOURCE_
<android.database.DatabaseUtils: long queryNumEntries(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String,java.lang.String[])> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.lang.CharSequence getOrganizationNameForUser(int)> -> _SOURCE_
<android.media.RemoteControlClient: android.app.PendingIntent getRcMediaIntent()> -> _SOURCE_
<android.app.ApplicationPackageManager: android.content.pm.dex.ArtManager getArtManager()> -> _SOURCE_
<android.media.ExifInterface: java.lang.String getAttribute(java.lang.String)> -> _SOURCE_
<android.app.admin.NetworkEvent: long getId()> -> _SOURCE_
<android.content.SyncResult: boolean hasError()> -> _SOURCE_
<android.text.style.SuperscriptSpan: void writeToParcelInternal(android.os.Parcel,int)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean getForceEphemeralUsers(android.content.ComponentName)> -> _SOURCE_
<android.app.backup.BackupTransport: long getCurrentRestoreSet()> -> _SOURCE_
<android.app.RemoteInput: boolean isDataOnly()> -> _SOURCE_
<android.telecom.CallAudioState: int getSupportedRouteMask()> -> _SOURCE_
<android.location.Location: boolean hasSpeedAccuracy()> -> _SOURCE_
<android.view.WindowMetrics: android.view.WindowInsets getWindowInsets()> -> _SOURCE_
<java.time.ZonedDateTime: java.lang.String toString()> -> _SOURCE_
<android.telecom.RemoteConnection$VideoProvider: void unregisterCallback(android.telecom.RemoteConnection$VideoProvider$Callback)> -> _SOURCE_
<android.preference.PreferenceManager: android.content.SharedPreferences getDefaultSharedPreferences(android.content.Context)> -> _SOURCE_
<android.hardware.camera2.legacy.RequestHolder: int numJpegTargets()> -> _SOURCE_
<android.app.ApplicationExitInfo: long getPss()> -> _SOURCE_
<android.telephony.ims.stub.ImsEcbmImplBase: void exitedEcbm()> -> _SOURCE_
<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])> -> _SOURCE_
<android.view.accessibility.AccessibilityRecord: int getFromIndex()> -> _SOURCE_
<android.bluetooth.BluetoothMap: int getConnectionPolicy(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<android.transition.TransitionListenerAdapter: void onTransitionEnd(android.transition.Transition)> -> _SOURCE_
<android.app.admin.SystemUpdatePolicy: android.app.admin.SystemUpdatePolicy createAutomaticInstallPolicy()> -> _SOURCE_
<android.media.audiopolicy.AudioProductStrategy: android.media.AudioAttributes getAudioAttributesForLegacyStreamType(int)> -> _SOURCE_
<android.telephony.TelephonyRegistryManager: void notifyPreciseDataConnectionFailed(int,int,int,java.lang.String,int)> -> _SOURCE_
<android.provider.Contacts$ContactMethods: java.lang.Object decodeImProtocol(java.lang.String)> -> _SOURCE_
<java.lang.reflect.Array: float getFloat(java.lang.Object,int)> -> _SOURCE_
<android.telephony.ims.compat.stub.ImsUtListenerImplBase: void utConfigurationCallWaitingQueried(com.android.ims.internal.IImsUt,int,android.telephony.ims.ImsSsInfo[])> -> _SOURCE_
<android.hardware.usb.UsbManager: java.util.List getPorts()> -> _SOURCE_
<android.media.AudioDeviceAttributes: java.lang.String toString()> -> _SOURCE_
<android.media.MediaDescription: android.os.Bundle getExtras()> -> _SOURCE_
<android.companion.BluetoothLeDeviceFilter$Builder: android.companion.BluetoothLeDeviceFilter build()> -> _SOURCE_
<android.inputmethodservice.Keyboard: int[] getShiftKeyIndices()> -> _SOURCE_
<java.lang.Object: java.lang.String toString()> -> _SOURCE_
<java.lang.Class: boolean isSynthetic()> -> _SOURCE_
<android.content.pm.DataLoaderParams: java.lang.String getArguments()> -> _SOURCE_
<android.telephony.ims.ImsCallSession: android.telephony.ims.ImsCallProfile getLocalCallProfile()> -> _SOURCE_
<android.location.GnssStatus: float getCarrierFrequencyHz(int)> -> _SOURCE_
<java.util.concurrent.atomic.AtomicBoolean: java.lang.String toString()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: int setStorageEncryption(android.content.ComponentName,boolean)> -> _SOURCE_
<java.text.DateFormat: java.text.DateFormat getDateInstance(int,java.util.Locale)> -> _SOURCE_
<android.net.TrafficStats: long getMobileTcpRxPackets()> -> _SOURCE_
<android.content.res.TypedArray: int getIndex(int)> -> _SOURCE_
<android.util.apk.ApkSignatureSchemeV2Verifier: android.util.apk.ApkSignatureSchemeV2Verifier$VerifiedSigner verify(java.lang.String,boolean)> -> _SOURCE_
<android.view.accessibility.AccessibilityEvent: java.lang.CharSequence getPackageName()> -> _SOURCE_
<android.bluetooth.BluetoothAudioConfig: int getChannelConfig()> -> _SOURCE_
<com.android.ims.internal.uce.common.CapInfo: boolean isSpSupported()> -> _SOURCE_
<android.content.pm.SharedLibraryInfo: boolean isDynamic()> -> _SOURCE_
<android.content.pm.PackageManager: boolean isAutoRevokeWhitelisted()> -> _SOURCE_
<android.telephony.AvailableNetworkInfo: int getSubId()> -> _SOURCE_
<android.telecom.StatusHints: java.lang.CharSequence getLabel()> -> _SOURCE_
<android.view.InputDevice: int getControllerNumber()> -> _SOURCE_
<android.app.ActionBar: void dispatchMenuVisibilityChanged(boolean)> -> _SOURCE_
<android.telecom.StatusHints: android.os.Bundle getExtras()> -> _SOURCE_
<android.view.ViewGroup: boolean hasFocus()> -> _SOURCE_
<android.hardware.location.ContextHubInfo: float getPeakPowerDrawMw()> -> _SOURCE_
<android.content.SyncRequest: java.lang.String getProvider()> -> _SOURCE_
<android.renderscript.ProgramStore: android.renderscript.ProgramStore$DepthFunc getDepthFunc()> -> _SOURCE_
<android.net.LinkProperties: java.lang.String toString()> -> _SOURCE_
<android.telephony.ims.compat.stub.ImsCallSessionImplBase: void transfer(java.lang.String,boolean)> -> _SOURCE_
<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Region getSafeZone()> -> _SOURCE_
<android.app.NotificationChannel: int getLockscreenVisibility()> -> _SOURCE_
<android.telephony.CellSignalStrengthTdscdma: int getLevel()> -> _SOURCE_
<android.provider.BrowserContract$SyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)> -> _SOURCE_
<android.telephony.ims.feature.MmTelFeature: void setUiTtyMode(int,android.os.Message)> -> _SOURCE_
<android.view.textservice.SuggestionsInfo: java.lang.String getSuggestionAt(int)> -> _SOURCE_
<java.security.CodeSigner: java.lang.String toString()> -> _SOURCE_
<android.telephony.SignalStrength: int getGsmBitErrorRate()> -> _SOURCE_
<android.app.admin.SystemUpdateInfo: java.lang.String toString()> -> _SOURCE_
<android.net.Ikev2VpnProfile: java.lang.String getUsername()> -> _SOURCE_
<android.app.AppOpsManager$OpEntry: boolean isRunning()> -> _SOURCE_
<java.text.DecimalFormatSymbols: java.lang.String getInternationalCurrencySymbol()> -> _SOURCE_
<com.android.internal.widget.LockPatternUtils: boolean isSeparateProfileChallengeEnabled(int)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getLine1Number()> -> _SOURCE_
<android.hardware.location.GeofenceHardwareMonitorCallback: void onMonitoringSystemChange(int,boolean,android.location.Location)> -> _SOURCE_
<android.hardware.usb.UsbConfiguration: boolean isRemoteWakeup()> -> _SOURCE_
<android.location.LocationManager: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)> -> _SOURCE_
<android.telecom.TelecomManager: android.telecom.PhoneAccountHandle getUserSelectedOutgoingPhoneAccount()> -> _SOURCE_
<java.util.concurrent.CompletableFuture: boolean isCancelled()> -> _SOURCE_
<android.net.CaptivePortalData: long getExpiryTimeMillis()> -> _SOURCE_
<android.content.ContentValues: java.util.ArrayList getStringArrayList(java.lang.String)> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: int describeContents()> -> _SOURCE_
<android.telephony.ims.ImsCallProfile: boolean isEmergencyCallTesting()> -> _SOURCE_
<android.os.UserManager: boolean isUserRunning(android.os.UserHandle)> -> _SOURCE_
<java.security.Provider: void forEach(java.util.function.BiConsumer)> -> _SOURCE_
<java.util.MissingResourceException: java.lang.String getClassName()> -> _SOURCE_
<android.net.NetworkScoreManager: android.net.NetworkScorerAppData getActiveScorer()> -> _SOURCE_
<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()> -> _SOURCE_
<android.util.proto.ProtoUtils: void toAggStatsProto(android.util.proto.ProtoOutputStream,long,long,long,long,int,int)> -> _SOURCE_
<android.app.ApplicationPackageManager: java.lang.String getSystemCaptionsServicePackageName()> -> _SOURCE_
<android.location.GnssStatus: int getSvid(int)> -> _SOURCE_
<android.app.timedetector.TelephonyTimeSuggestion: void addDebugInfo(java.util.List)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: int getProfileWithMinimumFailedPasswordsForWipe(int)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: int getPhoneDataConnectionCount(int,int)> -> _SOURCE_
<android.database.CursorWindow: int getNumRows()> -> _SOURCE_
<android.telephony.ims.ImsVideoCallProvider: void onSetCamera(java.lang.String,int)> -> _SOURCE_
<android.telecom.TelecomManager: android.net.Uri getAdnUriForPhoneAccount(android.telecom.PhoneAccountHandle)> -> _SOURCE_
<android.media.AudioManager: boolean isHapticPlaybackSupported()> -> _SOURCE_
<com.android.internal.util.function.pooled.ArgumentPlaceholder: java.lang.String toString()> -> _SOURCE_
<android.view.textclassifier.TextSelection$Request: java.lang.String getCallingPackageName()> -> _SOURCE_
<android.provider.DocumentsContract: android.net.Uri buildSearchDocumentsUri(java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.os.Messenger: boolean equals(java.lang.Object)> -> _SOURCE_
<android.preference.ListPreference: java.lang.String getValue()> -> _SOURCE_
<android.telecom.Voicemail: java.lang.String getSourcePackage()> -> _SOURCE_
<android.app.assist.AssistStructure$ViewNode: java.lang.String getWebScheme()> -> _SOURCE_
<android.net.NetworkBadging: android.graphics.drawable.Drawable getWifiIcon(int,int,android.content.res.Resources$Theme)> -> _SOURCE_
<android.telecom.DefaultDialerManager: java.lang.String getDefaultDialerApplication(android.content.Context)> -> _SOURCE_
<android.telephony.SmsMessage: int getStatusOnSim()> -> _SOURCE_
<android.service.notification.StatusBarNotification: int getNormalizedUserId()> -> _SOURCE_
<android.media.audiopolicy.AudioMix: int getRouteFlags()> -> _SOURCE_
<android.app.ApplicationExitInfo: long getTimestamp()> -> _SOURCE_
<android.app.ActivityOptions: boolean getAvoidMoveToFront()> -> _SOURCE_
<android.database.sqlite.SQLiteStatement: android.os.ParcelFileDescriptor simpleQueryForBlobFileDescriptor()> -> _SOURCE_
<android.widget.TimePicker: android.view.View getHourView()> -> _SOURCE_
<java.security.KeyStore$PrivateKeyEntry: java.security.cert.Certificate[] getCertificateChain()> -> _SOURCE_
<android.opengl.GLSurfaceView: boolean getPreserveEGLContextOnPause()> -> _SOURCE_
<android.hardware.hdmi.HdmiControlServiceWrapper: android.hardware.hdmi.HdmiControlManager createHdmiControlManager()> -> _SOURCE_
<java.time.OffsetDateTime: java.time.OffsetDateTime minusWeeks(long)> -> _SOURCE_
<android.view.Display$Mode: java.lang.String toString()> -> _SOURCE_
<android.view.autofill.AutofillManager: void onPendingSaveUi(int,android.os.IBinder)> -> _SOURCE_
<android.net.EthernetManager: java.lang.String[] getAvailableInterfaces()> -> _SOURCE_
<android.view.FrameStats: long getRefreshPeriodNano()> -> _SOURCE_
<java.nio.ShortBuffer: java.lang.String toString()> -> _SOURCE_
<java.text.NumberFormat: int getMaximumFractionDigits()> -> _SOURCE_
<android.media.DecoderCapabilities: java.util.List getAudioDecoders()> -> _SOURCE_
<android.net.http.HttpResponseCache: android.net.http.HttpResponseCache getInstalled()> -> _SOURCE_
<java.time.LocalTime: java.lang.String toString()> -> _SOURCE_
<android.content.ContextWrapper: android.view.DisplayAdjustments getDisplayAdjustments(int)> -> _SOURCE_
<android.telephony.SubscriptionInfo: int getSubscriptionType()> -> _SOURCE_
<android.os.HwParcel: java.util.ArrayList readInt16Vector()> -> _SOURCE_
<android.telecom.InCallAdapter: void exitBackgroundAudioProcessing(java.lang.String,boolean)> -> _SOURCE_
<com.android.internal.content.PackageHelper: java.lang.String resolveInstallVolume(android.content.Context,android.content.pm.PackageInstaller$SessionParams)> -> _SOURCE_
<android.net.lowpan.LowpanIdentity: java.lang.String toString()> -> _SOURCE_
<android.location.GnssSingleSatCorrection: float getCarrierFrequencyHz()> -> _SOURCE_
<android.net.nsd.NsdManager: java.lang.String nameOf(int)> -> _SOURCE_
<android.service.notification.NotificationStats: boolean hasInteracted()> -> _SOURCE_
<java.time.chrono.HijrahChronology: java.lang.String getId()> -> _SOURCE_
<java.nio.file.Files: java.lang.String probeContentType(java.nio.file.Path)> -> _SOURCE_
<android.media.MediaRouterClientState$RouteInfo: java.lang.String toString()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: int getPasswordMinimumNumeric(android.content.ComponentName)> -> _SOURCE_
<java.security.Signature: java.lang.Object clone()> -> _SOURCE_
<android.app.job.JobInfo: int getPriority()> -> _SOURCE_
<android.telephony.ims.ImsCallForwardInfo: int getTimeSeconds()> -> _SOURCE_
<android.companion.BluetoothDeviceFilter: int getMediumType()> -> _SOURCE_
<android.bluetooth.BluetoothHidDevice: boolean unregisterApp()> -> _SOURCE_
<android.widget.AutoCompleteTextView: android.widget.AutoCompleteTextView$Validator getValidator()> -> _SOURCE_
<android.service.autofill.FillCallback: void onFailure(java.lang.CharSequence)> -> _SOURCE_
<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder insert(int,java.lang.CharSequence,int,int)> -> _SOURCE_
<android.hardware.biometrics.BiometricPrompt$Builder: android.hardware.biometrics.BiometricPrompt build()> -> _SOURCE_
<android.telecom.CallerInfo: android.telecom.CallerInfo getCallerInfo(android.content.Context,android.net.Uri)> -> _SOURCE_
<android.content.pm.PackageManager: void disablePackageInfoCache()> -> _SOURCE_
<android.app.Activity: int getTaskId()> -> _SOURCE_
<android.provider.ContactsInternal: void startQuickContactWithErrorToast(android.content.Context,android.content.Intent)> -> _SOURCE_
<android.content.pm.ShortcutInfo: android.os.PersistableBundle[] getIntentPersistableExtrases()> -> _SOURCE_
<android.os.Environment: int classifyExternalStorageDirectory(java.io.File)> -> _SOURCE_
<android.media.AudioPort: android.media.AudioPortConfig activeConfig()> -> _SOURCE_
<android.net.DnsResolver: android.net.DnsResolver getInstance()> -> _SOURCE_
<android.location.GnssClock: double getDriftUncertaintyNanosPerSecond()> -> _SOURCE_
<android.os.UserManager: android.content.pm.UserInfo getProfileParent(int)> -> _SOURCE_
<android.util.LongArray: int size()> -> _SOURCE_
<android.app.SearchManager: android.database.Cursor getSuggestions(android.app.SearchableInfo,java.lang.String)> -> _SOURCE_
<android.view.WindowId: android.view.IWindowId getTarget()> -> _SOURCE_
<android.os.IncidentManager$PendingReport: java.lang.String getRequestingPackage()> -> _SOURCE_
<android.media.AudioRecord: android.media.AudioDeviceInfo getRoutedDevice()> -> _SOURCE_
<android.os.StrictMode: android.os.StrictMode$VmPolicy getVmPolicy()> -> _SOURCE_
<com.android.internal.telephony.SmsApplication: android.content.ComponentName getDefaultRespondViaMessageApplication(android.content.Context,boolean)> -> _SOURCE_
<android.view.textclassifier.TextClassificationContext: java.lang.String getWidgetType()> -> _SOURCE_
<android.app.timedetector.TelephonyTimeSuggestion: android.os.TimestampedValue getUtcTime()> -> _SOURCE_
<android.telephony.SubscriptionInfo: boolean isEmbedded()> -> _SOURCE_
<android.service.voice.VoiceInteractionSession: android.app.Dialog getWindow()> -> _SOURCE_
<java.security.Signature: java.security.AlgorithmParameters getParameters()> -> _SOURCE_
<android.net.DhcpResults: boolean hasMeteredHint()> -> _SOURCE_
<android.app.AppOpsManager$HistoricalPackageOps: java.lang.String getPackageName()> -> _SOURCE_
<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()> -> _SOURCE_
<android.app.SearchableInfo: int getVoiceLanguageId()> -> _SOURCE_
<android.os.Debug: void resetThreadAllocCount()> -> _SOURCE_
<android.content.ContentProvider: java.lang.String getWritePermission()> -> _SOURCE_
<android.net.LinkProperties: boolean removePcscfServer(java.net.InetAddress)> -> _SOURCE_
<java.util.stream.Collectors: java.util.stream.Collector joining()> -> _SOURCE_
<com.android.internal.telephony.cdma.sms.BearerData: com.android.internal.telephony.cdma.sms.BearerData decode(byte[])> -> _SOURCE_
<java.lang.StackTraceElement: java.lang.String getClassName()> -> _SOURCE_
<android.media.MediaRoute2Info$Builder: android.media.MediaRoute2Info$Builder setProviderId(java.lang.String)> -> _SOURCE_
<android.util.KeyValueListParser$StringValue: java.lang.String getDefaultValue()> -> _SOURCE_
<android.util.proto.ProtoInputStream: boolean nextField(long)> -> _SOURCE_
<android.media.tv.tuner.frontend.FrontendStatus: int getLnbVoltage()> -> _SOURCE_
<android.view.textclassifier.TextLinksParams: android.view.textclassifier.TextLinksParams fromLinkMask(int)> -> _SOURCE_
<android.view.InputDevice: android.view.InputDevice$MotionRange getMotionRange(int)> -> _SOURCE_
<android.app.Notification: boolean showsChronometer()> -> _SOURCE_
<android.speech.tts.TtsEngines: java.lang.String[] toOldLocaleStringFormat(java.util.Locale)> -> _SOURCE_
<java.util.concurrent.ConcurrentLinkedQueue: int size()> -> _SOURCE_
<android.telephony.PhoneNumberUtils: java.lang.CharSequence createTtsSpannable(java.lang.CharSequence)> -> _SOURCE_
<android.text.style.TtsSpan$ElectronicBuilder: android.text.style.TtsSpan$ElectronicBuilder setFragmentId(java.lang.String)> -> _SOURCE_
<com.android.internal.app.ResolverListController: float getScore(android.content.ComponentName)> -> _SOURCE_
<android.text.style.TtsSpan$MoneyBuilder: android.text.style.TtsSpan$MoneyBuilder setCurrency(java.lang.String)> -> _SOURCE_
<android.app.ActivityOptions: android.view.IAppTransitionAnimationSpecsFuture getSpecsFuture()> -> _SOURCE_
<android.net.PacProxySelector: java.util.List select(java.net.URI)> -> _SOURCE_
<android.view.textclassifier.TextClassifierEvent$ConversationActionsEvent$Builder: android.view.textclassifier.TextClassifierEvent$ConversationActionsEvent build()> -> _SOURCE_
<android.media.AudioTrack$TunerConfiguration: int getSyncId()> -> _SOURCE_
<android.location.GeocoderParams: java.util.Locale getLocale()> -> _SOURCE_
<android.app.AppOpsManager: java.lang.String uidStateToString(int)> -> _SOURCE_
<android.hardware.display.BrightnessConfiguration: android.hardware.display.BrightnessCorrection getCorrectionByPackageName(java.lang.String)> -> _SOURCE_
<android.media.browse.MediaBrowser$MediaItem: java.lang.String getMediaId()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: long forceSecurityLogs()> -> _SOURCE_
<com.android.internal.widget.RecyclerView: int getMinFlingVelocity()> -> _SOURCE_
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor[] createReliableSocketPair(int)> -> _SOURCE_
<java.security.cert.CertPathBuilder: java.lang.String getAlgorithm()> -> _SOURCE_
<android.service.appprediction.AppPredictionService: android.os.IBinder onBind(android.content.Intent)> -> _SOURCE_
<android.hardware.hdmi.HdmiRecordListener: void onTimerRecordingResult(int,android.hardware.hdmi.HdmiRecordListener$TimerStatusData)> -> _SOURCE_
<android.se.omapi.SEService: java.lang.String getVersion()> -> _SOURCE_
<android.inputmethodservice.InputMethodService: boolean isInputViewShown()> -> _SOURCE_
<android.os.UserManager: int getUserTypeForStatsd(java.lang.String)> -> _SOURCE_
<android.telephony.SubscriptionInfo: int getNameSource()> -> _SOURCE_
<android.net.Ikev2VpnProfile: java.security.cert.X509Certificate getUserCert()> -> _SOURCE_
<android.permission.PermissionManager: void grantDefaultPermissionsToEnabledImsServices(java.lang.String[],android.os.UserHandle,java.util.concurrent.Executor,java.util.function.Consumer)> -> _SOURCE_
<com.android.internal.util.TypedProperties: byte getByte(java.lang.String,byte)> -> _SOURCE_
<android.telephony.ims.feature.ImsFeature$Capabilities: int hashCode()> -> _SOURCE_
<android.opengl.ETC1Util$ETC1Texture: java.nio.ByteBuffer getData()> -> _SOURCE_
<android.content.ApexEnvironment: java.io.File getDeviceProtectedDataDir()> -> _SOURCE_
<com.android.internal.policy.DecorView: android.view.WindowInsetsController getWindowInsetsController()> -> _SOURCE_
<java.util.IllformedLocaleException: int getErrorIndex()> -> _SOURCE_
<android.media.tv.TvContract: android.net.Uri buildProgramsUriForChannel(long)> -> _SOURCE_
<android.telephony.ims.compat.feature.MMTelFeature: void onFeatureReady()> -> _SOURCE_
<android.service.notification.NotificationListenerService$Ranking: int getSuppressedVisualEffects()> -> _SOURCE_
<android.media.AudioFormat: int getSampleRate()> -> _SOURCE_
<android.view.ViewGroup: void resolveLayoutParams()> -> _SOURCE_
<android.view.WindowContentFrameStats: java.lang.String toString()> -> _SOURCE_
<android.content.ContentResolver: void setIsSyncable(android.accounts.Account,java.lang.String,int)> -> _SOURCE_
<android.widget.AbsListView: boolean showContextMenu()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: android.os.BatteryStats$Timer getWifiScanTimer()> -> _SOURCE_
<android.app.admin.PasswordMetrics: android.app.admin.PasswordMetrics computeForCredential(com.android.internal.widget.LockscreenCredential)> -> _SOURCE_
<android.content.ContentProviderOperation: boolean isCall()> -> _SOURCE_
<android.app.servertransaction.MoveToDisplayItem: java.lang.String toString()> -> _SOURCE_
<android.util.KeyValueListParser$LongValue: void dump(java.io.PrintWriter,java.lang.String)> -> _SOURCE_
<android.service.wallpaper.WallpaperService$Engine: void onOffsetsChanged(float,float,float,float,int,int)> -> _SOURCE_
<android.printservice.recommendation.RecommendationInfo: java.util.List getDiscoveredPrinters()> -> _SOURCE_
<android.telephony.TelephonyManager: void setBasebandVersionForPhone(int,java.lang.String)> -> _SOURCE_
<android.net.wifi.nl80211.NativeScanResult: int getSignalMbm()> -> _SOURCE_
<android.telephony.TelephonyManager: int getCarrierIdFromMccMnc(java.lang.String)> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec: java.lang.String[] getBlockModes()> -> _SOURCE_
<android.app.WallpaperManager: boolean isWallpaperSupported()> -> _SOURCE_
<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()> -> _SOURCE_
<android.telecom.CallScreeningService: android.os.IBinder onBind(android.content.Intent)> -> _SOURCE_
<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()> -> _SOURCE_
<android.content.pm.ShortcutInfo: java.lang.String getResourcePackageName(java.lang.String)> -> _SOURCE_
<android.telephony.data.DataProfile: boolean isPersistent()> -> _SOURCE_
<android.content.ContentResolver: boolean isSyncActive(android.accounts.Account,java.lang.String)> -> _SOURCE_
<android.location.Geofence: java.lang.String toString()> -> _SOURCE_
<java.util.FormatFlagsConversionMismatchException: java.lang.String getFlags()> -> _SOURCE_
<android.metrics.LogMaker: int getProcessId()> -> _SOURCE_
<android.app.Notification: boolean isForegroundService()> -> _SOURCE_
<com.android.internal.util.DumpUtils: boolean isNonPlatformPackage(android.content.ComponentName)> -> _SOURCE_
<android.security.ConfirmationCallback: void onCanceled()> -> _SOURCE_
<android.os.ParcelFileDescriptor: java.io.File getFile(java.io.FileDescriptor)> -> _SOURCE_
<java.util.StringJoiner: java.lang.String toString()> -> _SOURCE_
<android.net.ConnectivityManager: boolean isTetheringSupported()> -> _SOURCE_
<java.util.Currency: int getDefaultFractionDigits()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: java.lang.String getPath()> -> _SOURCE_
<android.os.UserManager: boolean isSameProfileGroup(int,int)> -> _SOURCE_
<android.webkit.CacheManager$CacheResult: java.lang.String getContentDisposition()> -> _SOURCE_
<android.content.ContentResolver: android.content.ContentResolver$MimeTypeInfo getTypeInfo(java.lang.String)> -> _SOURCE_
<android.telecom.RemoteConnection$Callback: void onConferenceableConnectionsChanged(android.telecom.RemoteConnection,java.util.List)> -> _SOURCE_
<java.time.chrono.IsoChronology: java.time.LocalDate dateNow()> -> _SOURCE_
<android.hardware.biometrics.BiometricPrompt: java.lang.CharSequence getTitle()> -> _SOURCE_
<android.app.ActivityThread: android.app.LoadedApk getPackageInfoNoCheck(android.content.pm.ApplicationInfo,android.content.res.CompatibilityInfo)> -> _SOURCE_
<android.os.Debug$MemoryInfo: int getSummaryGraphicsRss()> -> _SOURCE_
<android.hardware.location.ContextHubInfo: long getChrePlatformId()> -> _SOURCE_
<android.app.assist.AssistStructure: boolean isHomeActivity()> -> _SOURCE_
<android.inputmethodservice.KeyboardView: boolean isShifted()> -> _SOURCE_
<android.telephony.TelephonyRegistryManager: void notifyMessageWaitingChanged(int,int,boolean)> -> _SOURCE_
<android.hardware.camera2.legacy.LegacyCameraDevice: int configureOutputs(android.util.SparseArray,boolean)> -> _SOURCE_
<android.os.SystemProperties: android.os.SystemProperties$Handle find(java.lang.String)> -> _SOURCE_
<android.view.Window: android.view.WindowInsetsController getInsetsController()> -> _SOURCE_
<android.location.Address: android.os.Bundle getExtras()> -> _SOURCE_
<com.android.internal.accessibility.util.ShortcutUtils: boolean isShortcutContained(android.content.Context,int,java.lang.String)> -> _SOURCE_
<android.media.AudioSystem: java.lang.String deviceStateToString(int)> -> _SOURCE_
<android.widget.AdapterViewAnimator: android.animation.ObjectAnimator getInAnimation()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.lang.String getInstantAppAndroidId(java.lang.String,android.os.UserHandle)> -> _SOURCE_
<javax.crypto.spec.DHPublicKeySpec: java.math.BigInteger getP()> -> _SOURCE_
<android.database.sqlite.SQLiteConnectionPool: java.lang.String toString()> -> _SOURCE_
<android.renderscript.Element: android.renderscript.Element$DataKind getDataKind()> -> _SOURCE_
<android.content.ContentResolver: android.content.res.AssetFileDescriptor openAssetFileDescriptor(android.net.Uri,java.lang.String)> -> _SOURCE_
<android.app.ApplicationPackageManager: boolean getSyntheticAppDetailsActivityEnabled(java.lang.String)> -> _SOURCE_
<android.bluetooth.UidTraffic: java.lang.String toString()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isEphemeralUser(android.content.ComponentName)> -> _SOURCE_
<android.media.AudioManager: int[] getSupportedSystemUsages()> -> _SOURCE_
<android.widget.ImageView: java.lang.Runnable setImageResourceAsync(int)> -> _SOURCE_
<android.ddm.DdmHandleHello: void register()> -> _SOURCE_
<android.view.textclassifier.TextLanguage: android.icu.util.ULocale getLocale(int)> -> _SOURCE_
<android.media.midi.MidiDeviceInfo: int getOutputPortCount()> -> _SOURCE_
<android.service.notification.ZenPolicy: int getPriorityCategorySystem()> -> _SOURCE_
<android.os.Debug$MemoryInfo: int getOtherSwappedOutPss(int)> -> _SOURCE_
<android.os.Debug: int getGlobalFreedSize()> -> _SOURCE_
<android.hardware.camera2.params.MandatoryStreamCombination: java.lang.CharSequence getDescription()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: int getUserProvisioningState()> -> _SOURCE_
<android.app.usage.StorageStats: long getCodeBytes()> -> _SOURCE_
<android.view.textclassifier.TextLinks$Request: android.view.textclassifier.TextClassifier$EntityConfig getEntityConfig()> -> _SOURCE_
<com.android.internal.telephony.SmsMessageBase: java.lang.String getEmailFrom()> -> _SOURCE_
<android.os.connectivity.WifiActivityEnergyInfo: long getControllerIdleDurationMillis()> -> _SOURCE_
<android.speech.tts.Voice: int getLatency()> -> _SOURCE_
<android.location.GnssSingleSatCorrection: float getProbabilityLineOfSight()> -> _SOURCE_
<android.telephony.SubscriptionManager: int getActiveSubscriptionInfoCountMax()> -> _SOURCE_
<java.text.DateFormatSymbols: java.lang.String[][] getZoneStrings()> -> _SOURCE_
<android.view.inputmethod.InlineSuggestionInfo: java.lang.String[] getAutofillHints()> -> _SOURCE_
<android.os.WorkSource: java.lang.String getPackageName(int)> -> _SOURCE_
<android.widget.TabWidget: int getTabCount()> -> _SOURCE_
<android.app.slice.Slice: java.util.List getItems()> -> _SOURCE_
<java.util.Calendar: java.util.TimeZone getTimeZone()> -> _SOURCE_
<android.telecom.TelecomManager: java.lang.String getLine1Number(android.telecom.PhoneAccountHandle)> -> _SOURCE_
<android.app.Activity: int getMaxNumPictureInPictureActions()> -> _SOURCE_
<android.net.http.SslCertificate: android.os.Bundle saveState(android.net.http.SslCertificate)> -> _SOURCE_
<android.hardware.camera2.CaptureRequest: boolean isReprocess()> -> _SOURCE_
<android.text.TextUtils: java.lang.CharSequence commaEllipsize(java.lang.CharSequence,android.text.TextPaint,float,java.lang.String,java.lang.String,android.text.TextDirectionHeuristic)> -> _SOURCE_
<android.os.image.DynamicSystemManager: boolean isEnabled()> -> _SOURCE_
<android.ddm.DdmHandleNativeHeap: void register()> -> _SOURCE_
<android.view.Display: boolean isPublicPresentation()> -> _SOURCE_
<android.content.integrity.IntegrityUtils: byte[] getBytesFromHexDigest(java.lang.String)> -> _SOURCE_
<android.hardware.soundtrigger.SoundTrigger: int listModules(java.util.ArrayList)> -> _SOURCE_
<com.android.internal.content.SelectionBuilder: java.lang.String[] getSelectionArgs()> -> _SOURCE_
<android.hardware.display.DeviceProductInfo: java.lang.String getProductId()> -> _SOURCE_
<android.hardware.hdmi.HdmiPortInfo: int getAddress()> -> _SOURCE_
<android.media.RingtoneManager: android.database.Cursor getCursor()> -> _SOURCE_
<android.hardware.display.BrightnessConfiguration: java.lang.String getDescription()> -> _SOURCE_
<android.os.storage.VolumeInfo: boolean isPrimaryEmulatedForUser(int)> -> _SOURCE_
<android.service.autofill.AutofillServiceInfo: java.lang.String toString()> -> _SOURCE_
<android.bluetooth.BluetoothHearingAid: int getDeviceMode(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<com.android.internal.telephony.CallInfo: int describeContents()> -> _SOURCE_
<java.security.KeyStore: boolean containsAlias(java.lang.String)> -> _SOURCE_
<android.content.pm.ShortcutInfo: java.lang.String getIconUri()> -> _SOURCE_
<android.telecom.RemoteConnection$Callback: void onCallerDisplayNameChanged(android.telecom.RemoteConnection,java.lang.String,int)> -> _SOURCE_
<android.filterfw.core.GLFrame: java.lang.String toString()> -> _SOURCE_
<android.bluetooth.BluetoothGattServerCallback: void onPhyUpdate(android.bluetooth.BluetoothDevice,int,int,int)> -> _SOURCE_
<com.android.internal.telephony.gsm.SmsMessage: com.android.internal.telephony.SmsConstants$MessageClass getMessageClass()> -> _SOURCE_
<com.android.internal.widget.LinearLayoutManager: boolean getRecycleChildrenOnDetach()> -> _SOURCE_
<android.app.ApplicationPackageManager: int getApplicationEnabledSetting(java.lang.String)> -> _SOURCE_
<javax.security.auth.Subject: java.util.Set getPrivateCredentials()> -> _SOURCE_
<android.text.style.URLSpan: int getSpanTypeIdInternal()> -> _SOURCE_
<android.app.assist.AssistStructure: int getWindowNodeCount()> -> _SOURCE_
<android.content.res.Resources$Theme: java.lang.String[] getTheme()> -> _SOURCE_
<java.net.Inet6Address: java.net.Inet6Address getByAddress(java.lang.String,byte[],int)> -> _SOURCE_
<android.view.View: boolean hasPointerCapture()> -> _SOURCE_
<android.os.image.DynamicSystemManager: android.gsi.GsiProgress getInstallationProgress()> -> _SOURCE_
<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder delete(int,int)> -> _SOURCE_
<android.net.ConnectivityManager: boolean isVpnLockdownEnabled(int)> -> _SOURCE_
<android.os.SystemService: boolean isStopped(java.lang.String)> -> _SOURCE_
<android.net.LinkAddress: int getNetworkPrefixLength()> -> _SOURCE_
<android.net.util.MacAddressUtils: byte[] byteAddrFromLongAddr(long)> -> _SOURCE_
<android.app.SearchableInfo: int getVoiceLanguageModeId()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: long getCpuActiveTime()> -> _SOURCE_
<android.appwidget.AppWidgetManager: java.util.List getInstalledProvidersForProfile(int,android.os.UserHandle,java.lang.String)> -> _SOURCE_
<android.media.MediaRecorder: void setLocation(float,float)> -> _SOURCE_
<com.android.ims.internal.uce.presence.PresCapInfo: java.lang.String getContactUri()> -> _SOURCE_
<android.app.Activity: boolean autofillClientRequestHideFillUi()> -> _SOURCE_
<android.app.backup.RestoreSession: int restorePackages(long,android.app.backup.RestoreObserver,java.util.Set,android.app.backup.BackupManagerMonitor)> -> _SOURCE_
<android.content.pm.PackageInstaller$SessionInfo: boolean getAllowDowngrade()> -> _SOURCE_
<android.media.AudioFocusRequest: boolean locksFocus()> -> _SOURCE_
<android.media.tv.TvInputInfo: boolean isPassthroughInput()> -> _SOURCE_
<android.webkit.MimeTypeMap: java.lang.String getMimeTypeFromExtension(java.lang.String)> -> _SOURCE_
<javax.crypto.spec.RC5ParameterSpec: int getWordSize()> -> _SOURCE_
<java.security.spec.ECFieldFp: java.math.BigInteger getP()> -> _SOURCE_
<android.telephony.ims.RcsContactUceCapability: android.net.Uri getContactUri()> -> _SOURCE_
<android.net.NetworkTemplate: int[] getAllCollapsedRatTypes()> -> _SOURCE_
<java.lang.Package: java.lang.String getSpecificationVersion()> -> _SOURCE_
<android.os.connectivity.CellularBatteryStats: long getKernelActiveTimeMillis()> -> _SOURCE_
<java.util.logging.Handler: java.util.logging.Level getLevel()> -> _SOURCE_
<android.net.MacAddress: boolean matches(android.net.MacAddress,android.net.MacAddress)> -> _SOURCE_
<android.telephony.SubscriptionManager: void requestEmbeddedSubscriptionInfoListRefresh()> -> _SOURCE_
<java.text.DecimalFormatSymbols: char getPerMill()> -> _SOURCE_
<android.os.ParcelUuid: android.os.ParcelUuid fromString(java.lang.String)> -> _SOURCE_
<android.app.LocalActivityManager: android.app.Activity getActivity(java.lang.String)> -> _SOURCE_
<android.os.StrictMode: void noteResourceMismatch(java.lang.Object)> -> _SOURCE_
<android.app.ActivityOptions: android.os.Bundle toBundle()> -> _SOURCE_
<android.net.LocalSocket: java.io.FileDescriptor[] getAncillaryFileDescriptors()> -> _SOURCE_
<android.widget.CalendarView: long getMaxDate()> -> _SOURCE_
<java.net.InetAddress: java.lang.String getCanonicalHostName()> -> _SOURCE_
<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputContext getInputContext()> -> _SOURCE_
<android.net.MacAddress: java.net.Inet6Address getLinkLocalIpv6FromEui48Mac()> -> _SOURCE_
<android.telecom.Call: java.util.List getConferenceableCalls()> -> _SOURCE_
<android.telecom.RemoteConnection$VideoProvider$Callback: void onCallSessionEvent(android.telecom.RemoteConnection$VideoProvider,int)> -> _SOURCE_
<android.view.contentcapture.ViewNode: java.lang.String[] getAutofillHints()> -> _SOURCE_
<android.content.pm.SuspendDialogInfo: int getTitleResId()> -> _SOURCE_
<android.app.assist.AssistStructure$ViewNode: android.view.autofill.AutofillValue getAutofillValue()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: android.os.BatteryStats$Timer getWifiScanBackgroundTimer()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: void updateWifiState(android.os.connectivity.WifiActivityEnergyInfo)> -> _SOURCE_
<android.bluetooth.le.AdvertiseData: java.util.Map getServiceData()> -> _SOURCE_
<android.service.autofill.FieldClassification: java.lang.String toString()> -> _SOURCE_
<android.bluetooth.le.ScanResult: long getTimestampNanos()> -> _SOURCE_
<android.app.Activity: android.database.Cursor managedQuery(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String)> -> _SOURCE_
<javax.net.ssl.SSLSocket: javax.net.ssl.SSLSession getHandshakeSession()> -> _SOURCE_
<android.gesture.GestureStore: java.util.Set getGestureEntries()> -> _SOURCE_
<android.appwidget.AppWidgetProviderInfo: android.graphics.drawable.Drawable loadPreviewImage(android.content.Context,int)> -> _SOURCE_
<android.location.GpsClock: byte getType()> -> _SOURCE_
<android.widget.ListPopupWindow: int getInputMethodMode()> -> _SOURCE_
<android.media.MediaPlayer$TrackInfo: java.lang.String toString()> -> _SOURCE_
<android.media.AudioManager: android.media.AudioDeviceInfo[] getDevices(int)> -> _SOURCE_
<android.app.LocalActivityManager: android.app.Activity getCurrentActivity()> -> _SOURCE_
<android.telecom.PhoneAccount$Builder: android.telecom.PhoneAccount$Builder addSupportedUriScheme(java.lang.String)> -> _SOURCE_
<android.media.tv.TvInputService$Session: long onTimeShiftGetCurrentPosition()> -> _SOURCE_
<com.android.internal.util.ProcFileReader: java.lang.String nextString()> -> _SOURCE_
<android.hardware.camera2.legacy.BurstHolder: int getRequestId()> -> _SOURCE_
<android.app.Activity: android.os.IBinder getAssistToken()> -> _SOURCE_
<java.util.zip.ZipInputStream: java.util.zip.ZipEntry getNextEntry()> -> _SOURCE_
<com.android.internal.widget.FloatingToolbar: boolean isShowing()> -> _SOURCE_
<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericParameterTypes()> -> _SOURCE_
<android.webkit.WebResourceResponse: java.util.Map getResponseHeaders()> -> _SOURCE_
<android.telecom.ParcelableCall: java.lang.String getCallerDisplayName()> -> _SOURCE_
<java.util.LinkedList: java.util.Iterator descendingIterator()> -> _SOURCE_
<android.view.contentcapture.ViewNode: int getScrollX()> -> _SOURCE_
<android.app.Instrumentation: void sendStatus(int,android.os.Bundle)> -> _SOURCE_
<android.telephony.TelephonyManager: android.telephony.ims.aidl.IImsRcsFeature getImsRcsFeatureAndListen(int,com.android.ims.internal.IImsServiceFeatureCallback)> -> _SOURCE_
<android.telephony.data.DataCallResponse: java.lang.String getInterfaceName()> -> _SOURCE_
<android.service.voice.VoiceInteractionService: int getDisabledShowContext()> -> _SOURCE_
<java.util.ServiceLoader: java.lang.String toString()> -> _SOURCE_
<android.view.textclassifier.TextLanguage: java.lang.String toString()> -> _SOURCE_
<android.os.Environment: java.io.File getUserSystemDirectory(int)> -> _SOURCE_
<android.graphics.drawable.LayerDrawable: void clearMutated()> -> _SOURCE_
<java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale,java.lang.ClassLoader)> -> _SOURCE_
<android.view.MotionEvent: int findPointerIndex(int)> -> _SOURCE_
<android.location.GpsNavigationMessage: byte getPrn()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.lang.String[] canonicalToCurrentPackageNames(java.lang.String[])> -> _SOURCE_
<android.bluetooth.le.ScanFilter: java.lang.String toString()> -> _SOURCE_
<android.telephony.CellIdentityNr: android.telephony.CellLocation asCellLocation()> -> _SOURCE_
<android.app.SearchManager: android.content.ComponentName getGlobalSearchActivity()> -> _SOURCE_
<java.io.ObjectInputStream: int readUnsignedShort()> -> _SOURCE_
<java.util.Calendar: int getWeekYear()> -> _SOURCE_
<android.os.Debug$InstructionCount: int globalTotal()> -> _SOURCE_
<android.net.LinkQualityInfo: int getTheoreticalLatency()> -> _SOURCE_
<android.telephony.TelephonyManager: int getVoiceActivationState()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$ControllerActivityCounterImpl: com.android.internal.os.BatteryStatsImpl$LongSamplingCounter getIdleTimeCounter()> -> _SOURCE_
<java.security.cert.X509Certificate: java.util.List getExtendedKeyUsage()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: android.app.admin.DevicePolicyManager getParentProfileInstance(android.content.pm.UserInfo)> -> _SOURCE_
<android.app.backup.BackupTransport: java.lang.String name()> -> _SOURCE_
<android.media.AudioPort: android.media.AudioGain[] gains()> -> _SOURCE_
<android.content.Context: java.lang.String getOpPackageName()> -> _SOURCE_
<android.widget.RemoteViews: int getSequenceNumber()> -> _SOURCE_
<android.location.GnssMeasurementCorrections: double getLongitudeDegrees()> -> _SOURCE_
<android.os.Parcel: byte[] marshall()> -> _SOURCE_
<android.telecom.PhoneAccount$Builder: android.telecom.PhoneAccount build()> -> _SOURCE_
<android.app.AppOpsManager$HistoricalOps: long getDurationMillis()> -> _SOURCE_
<android.net.NetworkCapabilities: int[] getAdministratorUids()> -> _SOURCE_
<android.telephony.ClosedSubscriberGroupInfo: java.lang.String getHomeNodebName()> -> _SOURCE_
<android.media.session.MediaController: java.util.List getQueue()> -> _SOURCE_
<android.widget.CompoundButton: int getAutofillType()> -> _SOURCE_
<com.android.internal.telephony.cdma.sms.BearerData$TimeStamp: java.lang.String toString()> -> _SOURCE_
<android.app.backup.RestoreObserver: void restoreStarting(int)> -> _SOURCE_
<android.database.RedactingCursor: android.database.Cursor getWrappedCursor()> -> _SOURCE_
<javax.crypto.Cipher: javax.crypto.ExemptionMechanism getExemptionMechanism()> -> _SOURCE_
<android.security.keystore.recovery.KeyChainSnapshot: java.util.List getKeyChainProtectionParams()> -> _SOURCE_
<android.media.SubtitleController: android.media.SubtitleTrack getSelectedTrack()> -> _SOURCE_
<android.media.AudioDevicePort: int[] encapsulationMetadataTypes()> -> _SOURCE_
<android.view.DisplayAddress$Physical: long getPhysicalDisplayId()> -> _SOURCE_
<android.service.notification.ZenPolicy: int getPriorityMessageSenders()> -> _SOURCE_
<android.app.UiAutomation: android.graphics.Bitmap takeScreenshot()> -> _SOURCE_
<android.nfc.tech.NfcBarcode: int getType()> -> _SOURCE_
<java.text.MessageFormat: java.text.Format[] getFormatsByArgumentIndex()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.util.List queryInstrumentation(java.lang.String,int)> -> _SOURCE_
<android.hardware.camera2.params.StreamConfigurationDuration: long getDuration()> -> _SOURCE_
<android.content.pm.PackageManager: java.util.Set getMimeGroup(java.lang.String)> -> _SOURCE_
<android.view.ViewConfiguration: int getHoverTapSlop()> -> _SOURCE_
<android.bluetooth.BluetoothHeadset: boolean isInbandRingingEnabled()> -> _SOURCE_
<android.app.NotificationHistory: void addNotificationToWrite(android.app.NotificationHistory$HistoricalNotification)> -> _SOURCE_
<android.telecom.CallRedirectionService: android.os.IBinder onBind(android.content.Intent)> -> _SOURCE_
<android.app.VoiceInteractor$Prompt: int countVoicePrompts()> -> _SOURCE_
<android.net.wifi.nl80211.PnoNetwork: boolean isHidden()> -> _SOURCE_
<android.security.keystore.KeyProtection: java.lang.String[] getBlockModes()> -> _SOURCE_
<android.telephony.ims.ImsRcsManager$AvailabilityCallback: android.telephony.ims.aidl.IImsCapabilityCallback getBinder()> -> _SOURCE_
<android.service.voice.AlwaysOnHotwordDetector$EventPayload: java.lang.Integer getCaptureSession()> -> _SOURCE_
<android.mtp.MtpObjectInfo: int getCompressedSize()> -> _SOURCE_
<android.view.ViewRootImpl: android.view.ScrollCaptureClient getScrollCaptureClient()> -> _SOURCE_
<com.android.internal.telephony.TelephonyPermissions: void enforceShellOnly(int,java.lang.String)> -> _SOURCE_
<android.widget.AdapterView: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)> -> _SOURCE_
<android.security.net.config.RootTrustManager: void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String,java.net.Socket)> -> _SOURCE_
<android.view.contentcapture.DataRemovalRequest: java.util.List getLocusIdRequests()> -> _SOURCE_
<android.hardware.camera2.legacy.RequestThreadManager: long flush()> -> _SOURCE_
<java.lang.Thread: int activeCount()> -> _SOURCE_
<android.telephony.ims.compat.stub.ImsCallSessionImplBase: android.telephony.ims.ImsCallProfile getLocalCallProfile()> -> _SOURCE_
<android.os.Environment: java.io.File getDataPreloadsFileCacheDirectory()> -> _SOURCE_
<android.net.NetworkAgentConfig: boolean isPartialConnectivityAcceptable()> -> _SOURCE_
<android.widget.TextView: android.content.UndoManager getUndoManager()> -> _SOURCE_
<android.os.Message: void sendToTarget()> -> _SOURCE_
<android.hardware.fingerprint.FingerprintManager: java.util.List getEnrolledFingerprints()> -> _SOURCE_
<java.util.logging.Logger: java.util.ResourceBundle getResourceBundle()> -> _SOURCE_
<com.android.internal.os.PowerProfile: double getAveragePowerOrDefault(java.lang.String,double)> -> _SOURCE_
<android.content.pm.LauncherActivityInfo: java.lang.CharSequence getLabel()> -> _SOURCE_
<android.hardware.display.WifiDisplay: boolean hasSameAddress(android.hardware.display.WifiDisplay)> -> _SOURCE_
<android.net.LinkProperties: boolean hasIpv6PcscfServer()> -> _SOURCE_
<android.content.Intent: java.lang.String toInsecureString()> -> _SOURCE_
<android.widget.TextView: int getCurrentHintTextColor()> -> _SOURCE_
<com.android.internal.app.ToolbarActionBar: boolean isShowing()> -> _SOURCE_
<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder detectCleartextNetwork()> -> _SOURCE_
<android.telephony.ims.feature.RcsFeature: android.telephony.ims.aidl.IRcsFeatureListener getListener()> -> _SOURCE_
<android.telephony.CallQuality: int getDownlinkCallQualityLevel()> -> _SOURCE_
<android.media.AudioPlaybackCaptureConfiguration: int[] getMatchingUids()> -> _SOURCE_
<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()> -> _SOURCE_
<android.app.AppOpsManager$NoteOpEvent: android.app.AppOpsManager$OpEventProxyInfo getProxy()> -> _SOURCE_
<android.accessibilityservice.AccessibilityService$MagnificationController: float getScale()> -> _SOURCE_
<android.app.ActivityManager: boolean isLowRamDevice()> -> _SOURCE_
<com.android.internal.util.XmlUtils: java.util.ArrayList readListXml(java.io.InputStream)> -> _SOURCE_
<android.app.timezonedetector.TelephonyTimeZoneSuggestion$Builder: android.app.timezonedetector.TelephonyTimeZoneSuggestion build()> -> _SOURCE_
<java.util.concurrent.ForkJoinPool: long getQueuedTaskCount()> -> _SOURCE_
<android.content.res.Resources$Theme: int[] getAllAttributes()> -> _SOURCE_
<android.media.MediaExtractor$CasInfo: byte[] getPrivateData()> -> _SOURCE_
<android.app.servertransaction.EnterPipRequestedItem: java.lang.String toString()> -> _SOURCE_
<android.media.tv.TvInputManager: java.util.List getHardwareList()> -> _SOURCE_
<com.android.internal.util.SyncResultReceiver: int getIntResult()> -> _SOURCE_
<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy$Builder detectUnbufferedIo()> -> _SOURCE_
<android.view.inputmethod.InputBinding: java.lang.String toString()> -> _SOURCE_
<android.content.Intent: java.lang.String toString()> -> _SOURCE_
<android.accessibilityservice.AccessibilityShortcutInfo: java.lang.String getSettingsActivityName()> -> _SOURCE_
<android.media.tv.TvInputHardwareInfo: int getCableConnectionStatus()> -> _SOURCE_
<android.os.incremental.IncrementalManager: byte[] unsafeGetFileSignature(java.lang.String)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: int getPasswordHistoryLength(android.content.ComponentName)> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: int getRowIndex()> -> _SOURCE_
<android.print.PrintJobInfo: android.print.PageRange[] getPages()> -> _SOURCE_
<android.telephony.CarrierRestrictionRules: java.util.List getAllowedCarriers()> -> _SOURCE_
<android.se.omapi.Session: android.se.omapi.Channel openLogicalChannel(byte[])> -> _SOURCE_
<android.telephony.data.DataCallResponse: int getProtocolType()> -> _SOURCE_
<android.security.net.config.RootTrustManager: boolean isSameTrustConfiguration(java.lang.String,java.lang.String)> -> _SOURCE_
<android.content.Intent: android.content.Intent restoreFromXml(org.xmlpull.v1.XmlPullParser)> -> _SOURCE_
<android.os.UserManager: boolean isProfile()> -> _SOURCE_
<android.view.InputEventReceiver: android.os.IBinder getToken()> -> _SOURCE_
<com.android.ims.internal.uce.presence.PresTupleInfo: java.lang.String getContactUri()> -> _SOURCE_
<android.bluetooth.BluetoothActivityEnergyInfo: long getControllerIdleTimeMillis()> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing$Config: boolean isPostEqInUse()> -> _SOURCE_
<android.app.ApplicationExitInfo: java.io.InputStream getTraceInputStream()> -> _SOURCE_
<android.util.Spline$MonotoneCubicSpline: java.lang.String toString()> -> _SOURCE_
<android.telephony.data.DataProfile: int getMtu()> -> _SOURCE_
<android.hardware.camera2.legacy.RequestHolder: android.hardware.camera2.CaptureRequest getRequest()> -> _SOURCE_
<java.util.TimeZone: java.lang.String[] getAvailableIDs()> -> _SOURCE_
<android.view.ViewDebug: long getViewInstanceCount()> -> _SOURCE_
<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder detectContentUriWithoutPermission()> -> _SOURCE_
<java.security.Provider: java.util.Set keySet()> -> _SOURCE_
<android.telecom.Conference: android.telecom.AudioState getAudioState()> -> _SOURCE_
<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder replace(int,int,java.lang.CharSequence)> -> _SOURCE_
<android.nfc.cardemulation.NfcFCardEmulation: android.nfc.cardemulation.NfcFCardEmulation getInstance(android.nfc.NfcAdapter)> -> _SOURCE_
<android.telecom.DefaultDialerManager: boolean isDefaultOrSystemDialer(android.content.Context,java.lang.String)> -> _SOURCE_
<android.telecom.AudioState: int describeContents()> -> _SOURCE_
<android.widget.TimePicker: java.lang.Integer getCurrentHour()> -> _SOURCE_
<java.security.KeyStore: java.util.Date getCreationDate(java.lang.String)> -> _SOURCE_
<android.content.ContentProviderOperation: boolean isExceptionAllowed()> -> _SOURCE_
<android.database.sqlite.SQLiteConnection: void onCancel()> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing$MbcBand: float getPostGain()> -> _SOURCE_
<android.hardware.display.VirtualDisplay: android.view.Surface getSurface()> -> _SOURCE_
<android.provider.Settings$Global: java.lang.String zenModeToString(int)> -> _SOURCE_
<android.app.SearchableInfo: android.app.SearchableInfo getActivityMetaData(android.content.Context,android.content.pm.ActivityInfo,int)> -> _SOURCE_
<com.android.internal.content.NativeLibraryHelper: int copyNativeBinaries(com.android.internal.content.NativeLibraryHelper$Handle,java.io.File,java.lang.String)> -> _SOURCE_
<android.telecom.PhoneAccount$Builder: android.telecom.PhoneAccount$Builder setLabel(java.lang.CharSequence)> -> _SOURCE_
<android.view.ScaleGestureDetector: boolean isInProgress()> -> _SOURCE_
<android.widget.TimePicker: android.view.View getAmView()> -> _SOURCE_
<android.content.SyncRequest: long getSyncFlexTime()> -> _SOURCE_
<android.content.Intent: android.os.Parcelable[] getParcelableArrayExtra(java.lang.String)> -> _SOURCE_
<android.net.VpnService: boolean protect(java.net.Socket)> -> _SOURCE_
<com.android.internal.telephony.cdma.SmsMessage: void parseSms()> -> _SOURCE_
<com.android.internal.content.FileSystemProvider: java.lang.String moveDocument(java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getSubscriberId(int)> -> _SOURCE_
<android.os.SystemService: android.os.SystemService$State getState(java.lang.String)> -> _SOURCE_
<android.bluetooth.le.ScanResult: android.bluetooth.le.ScanRecord getScanRecord()> -> _SOURCE_
<android.service.autofill.Dataset: java.util.ArrayList getFieldIds()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: void notePhoneStateLocked(int,int)> -> _SOURCE_
<java.lang.Byte: java.lang.String toString()> -> _SOURCE_
<java.text.DateFormat: java.text.DateFormat getDateTimeInstance(int,int,java.util.Locale)> -> _SOURCE_
<android.telephony.SubscriptionManager: android.net.Uri addSubscriptionInfoRecord(java.lang.String,int)> -> _SOURCE_
<android.telephony.SubscriptionManager: java.util.List getSubscriptionsInGroup(android.os.ParcelUuid)> -> _SOURCE_
<android.telephony.PhoneNumberUtils: boolean isUriNumber(java.lang.String)> -> _SOURCE_
<android.preference.MultiCheckPreference: boolean[] getValues()> -> _SOURCE_
<android.net.Ikev2VpnProfile: com.android.internal.net.VpnProfile toVpnProfile()> -> _SOURCE_
<android.media.AudioDeviceInfo: int[] getSampleRates()> -> _SOURCE_
<android.media.tv.tuner.DemuxCapabilities: int getFilterCapabilities()> -> _SOURCE_
<android.preference.PreferenceFragment: android.preference.PreferenceScreen getPreferenceScreen()> -> _SOURCE_
<android.hardware.location.NanoAppBinary: boolean isSigned()> -> _SOURCE_
<android.bluetooth.BluetoothHearingAid: java.lang.String stateToString(int)> -> _SOURCE_
<android.os.HwParcel: java.util.ArrayList readInt32Vector()> -> _SOURCE_
<java.security.cert.X509CertSelector: void setPathToNames(java.util.Collection)> -> _SOURCE_
<android.bluetooth.BluetoothGattCharacteristic: java.lang.String getStringValue(int)> -> _SOURCE_
<android.app.AppOpsManager: java.lang.String opToPermission(java.lang.String)> -> _SOURCE_
<java.util.GregorianCalendar: int getMaximum(int)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: boolean getIsOnBattery()> -> _SOURCE_
<android.telephony.AvailableNetworkInfo: int getPriority()> -> _SOURCE_
<android.app.Activity: java.lang.String getCallingPackage()> -> _SOURCE_
<android.content.pm.PackageParser$Package: void setApplicationInfoResourcePath(java.lang.String)> -> _SOURCE_
<android.telecom.ConnectionService: void onCreateConferenceComplete(android.telecom.Conference)> -> _SOURCE_
<com.android.ims.internal.uce.presence.PresServiceInfo: java.lang.String getServiceVer()> -> _SOURCE_
<com.android.internal.telephony.cdma.SmsMessage: int getTeleService()> -> _SOURCE_
<android.telephony.data.ApnSetting: java.lang.String getMvnoMatchData()> -> _SOURCE_
<android.app.MediaRouteActionProvider: android.view.View onCreateActionView()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: android.util.ArrayMap getProcessStats()> -> _SOURCE_
<android.bluetooth.BluetoothHeadsetClientCall: int getState()> -> _SOURCE_
<android.media.MediaRouter$RouteCategory: java.lang.CharSequence getName()> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing$EqBand: java.lang.String toString()> -> _SOURCE_
<android.app.AppOpsManager$OpEntry: android.app.AppOpsManager$OpEventProxyInfo getLastForegroundProxyInfo(int)> -> _SOURCE_
<android.media.tv.tuner.dvr.DvrPlayback: long read(long)> -> _SOURCE_
<android.security.keystore.recovery.RecoveryController: int[] getRecoverySecretTypes()> -> _SOURCE_
<android.telephony.SmsCbMessage: int getDataCodingScheme()> -> _SOURCE_
<android.database.DatabaseUtils: java.lang.String stringForQuery(android.database.sqlite.SQLiteStatement,java.lang.String[])> -> _SOURCE_
<android.telephony.mbms.MbmsTempFileProvider: void attachInfo(android.content.Context,android.content.pm.ProviderInfo)> -> _SOURCE_
<android.hardware.usb.UsbInterface: int getInterfaceClass()> -> _SOURCE_
<android.view.KeyEvent: int getScanCode()> -> _SOURCE_
<com.android.internal.os.Zygote: boolean getConfigurationPropertyBoolean(java.lang.String,java.lang.Boolean)> -> _SOURCE_
<android.service.notification.NotificationStats: boolean hasExpanded()> -> _SOURCE_
<java.security.cert.TrustAnchor: javax.security.auth.x500.X500Principal getCA()> -> _SOURCE_
<android.view.DisplayCutout: android.graphics.Insets getWaterfallInsets()> -> _SOURCE_
<android.view.InputDevice: android.view.InputDevice getDevice(int)> -> _SOURCE_
<android.location.Geocoder: java.util.List getFromLocation(double,double,int)> -> _SOURCE_
<android.view.SurfaceControl$DisplayInfo: java.lang.String toString()> -> _SOURCE_
<android.provider.DocumentsContract: android.net.Uri buildTreeDocumentUri(java.lang.String,java.lang.String)> -> _SOURCE_
<android.os.ZygoteProcess: int getZygotePid(java.lang.String)> -> _SOURCE_
<android.companion.BluetoothLeDeviceFilter: android.bluetooth.le.ScanFilter getScanFilter()> -> _SOURCE_
<com.android.internal.telephony.SmsMessageBase: java.lang.String getDisplayOriginatingAddress()> -> _SOURCE_
<android.media.MediaRouter: android.media.MediaRouter$RouteCategory getCategoryAt(int)> -> _SOURCE_
<android.telecom.Call$Details: long getConnectTimeMillis()> -> _SOURCE_
<android.os.storage.VolumeInfo: android.content.Intent buildBrowseIntent()> -> _SOURCE_
<android.telephony.TelephonyScanManager$NetworkScanCallback: void onResults(java.util.List)> -> _SOURCE_
<android.media.tv.TvInputManager: void registerCallback(android.media.tv.TvInputManager$TvInputCallback,android.os.Handler)> -> _SOURCE_
<android.service.voice.VoiceInteractionSession: int getDisabledShowContext()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: int getDischargeAmountScreenOff()> -> _SOURCE_
<com.android.internal.app.WindowDecorActionBar: int getSelectedNavigationIndex()> -> _SOURCE_
<android.app.PendingIntent: int getCreatorUid()> -> _SOURCE_
<android.widget.TextView: java.lang.CharSequence getHint()> -> _SOURCE_
<android.location.LocationTime: long getElapsedRealtimeNanos()> -> _SOURCE_
<android.hardware.camera2.utils.ListUtils: java.lang.String listToString(java.util.List)> -> _SOURCE_
<android.widget.ActivityChooserModel: android.content.pm.ResolveInfo getDefaultActivity()> -> _SOURCE_
<com.android.internal.telephony.cdma.sms.BearerData: java.lang.String getLanguage()> -> _SOURCE_
<android.telephony.PhoneNumberUtils: boolean isPotentialEmergencyNumber(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.app.ActivityView: android.graphics.Point getPositionInWindow()> -> _SOURCE_
<android.content.pm.ApplicationInfo: java.lang.String getBaseCodePath()> -> _SOURCE_
<android.net.RouteInfo: android.net.RouteInfo makeHostRoute(java.net.InetAddress,java.net.InetAddress,java.lang.String)> -> _SOURCE_
<android.graphics.pdf.PdfDocument$PageInfo: int getPageHeight()> -> _SOURCE_
<android.app.ApplicationPackageManager: boolean hasSigningCertificate(java.lang.String,byte[],int)> -> _SOURCE_
<android.content.integrity.IntegrityFormula$SourceStamp: android.content.integrity.IntegrityFormula stampCertificateHashEquals(java.lang.String)> -> _SOURCE_
<android.telecom.RemoteConference: int getConnectionProperties()> -> _SOURCE_
<android.view.animation.GridLayoutAnimationController: boolean willOverlap()> -> _SOURCE_
<com.android.ims.ImsConfig: java.lang.String getConfigString(int)> -> _SOURCE_
<android.app.NotificationChannel: boolean hasUserSetSound()> -> _SOURCE_
<android.view.ScaleGestureDetector: long getEventTime()> -> _SOURCE_
<com.android.internal.os.BaseCommand: java.lang.String peekNextArg()> -> _SOURCE_
<android.app.NotificationManager: android.app.AutomaticZenRule getAutomaticZenRule(java.lang.String)> -> _SOURCE_
<android.se.omapi.Session: android.se.omapi.Reader getReader()> -> _SOURCE_
<android.content.ComponentName: java.lang.String flattenToShortString()> -> _SOURCE_
<android.location.GnssMeasurement: float getCarrierFrequencyHz()> -> _SOURCE_
<java.util.logging.Logger: void exiting(java.lang.String,java.lang.String)> -> _SOURCE_
<android.telephony.ims.compat.stub.ImsConfigImplBase: boolean getVolteProvisioned()> -> _SOURCE_
<android.telecom.PhoneAccount: boolean hasCapabilities(int)> -> _SOURCE_
<java.lang.Character: int getNumericValue(int)> -> _SOURCE_
<java.lang.reflect.Parameter: java.lang.Class getType()> -> _SOURCE_
<android.app.admin.SystemUpdateInfo: void writeToXml(org.xmlpull.v1.XmlSerializer,java.lang.String)> -> _SOURCE_
<java.time.MonthDay: int getDayOfMonth()> -> _SOURCE_
<android.view.contentcapture.ContentCaptureManager: android.view.contentcapture.MainContentCaptureSession getMainContentCaptureSession()> -> _SOURCE_
<android.app.AppOpsManager$HistoricalPackageOps: android.app.AppOpsManager$AttributedHistoricalOps getAttributedOps(java.lang.String)> -> _SOURCE_
<android.view.accessibility.AccessibilityManager: java.util.List getAccessibilityServiceList()> -> _SOURCE_
<android.content.res.Configuration: java.lang.String resourceQualifierString(android.content.res.Configuration,android.util.DisplayMetrics)> -> _SOURCE_
<java.time.OffsetDateTime: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)> -> _SOURCE_
<android.telephony.CellSignalStrengthTdscdma: int getRscp()> -> _SOURCE_
<android.service.notification.ZenPolicy: int getPriorityConversationSenders()> -> _SOURCE_
<android.telecom.RemoteConnection$VideoProvider: void requestCallDataUsage()> -> _SOURCE_
<android.telephony.CellLocation: android.telephony.CellLocation getEmpty()> -> _SOURCE_
<java.time.chrono.AbstractChronology: java.lang.String toString()> -> _SOURCE_
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean hasQueuedThreads()> -> _SOURCE_
<android.app.AppOpsManager: void resetHistoryParameters()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.lang.CharSequence getHarmfulAppWarning(java.lang.String)> -> _SOURCE_
<java.util.concurrent.ForkJoinPool: int getQueuedSubmissionCount()> -> _SOURCE_
<android.hardware.camera2.CameraManager$AvailabilityCallback: void onPhysicalCameraUnavailable(java.lang.String,java.lang.String)> -> _SOURCE_
<android.telephony.cdma.CdmaCellLocation: int getBaseStationLatitude()> -> _SOURCE_
<android.app.usage.UsageStats: int getAppLaunchCount()> -> _SOURCE_
<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setAnimationTransaction()> -> _SOURCE_
<java.util.concurrent.LinkedBlockingQueue: int drainTo(java.util.Collection)> -> _SOURCE_
<android.os.VibrationAttributes: java.lang.String usageToString()> -> _SOURCE_
<android.media.tv.TvTrackInfo: java.lang.CharSequence getDescription()> -> _SOURCE_
<android.location.GnssSingleSatCorrection: java.lang.String toString()> -> _SOURCE_
<android.app.AppOpsManager$AttributedHistoricalOps: android.app.AppOpsManager$HistoricalOp getOp(java.lang.String)> -> _SOURCE_
<android.location.GnssStatus$Builder: android.location.GnssStatus build()> -> _SOURCE_
<android.hardware.input.InputManager: java.lang.String[] getEnabledKeyboardLayoutsForInputDevice(android.hardware.input.InputDeviceIdentifier)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: int getDeviceOwnerUserId()> -> _SOURCE_
<android.hardware.camera2.CaptureResult: java.util.List getKeys()> -> _SOURCE_
<android.media.tv.tuner.filter.MediaEvent: android.media.tv.tuner.filter.AudioDescriptor getExtraMetaData()> -> _SOURCE_
<android.view.SurfaceControl: boolean isValid()> -> _SOURCE_
<android.app.admin.DeviceAdminReceiver: void onReceive(android.content.Context,android.content.Intent)> -> _SOURCE_
<android.app.AppOpsManager$OpEntry: java.util.Map getAttributedOpEntries()> -> _SOURCE_
<android.content.Intent: short getShortExtra(java.lang.String,short)> -> _SOURCE_
<android.mtp.MtpStorageInfo: java.lang.String getDescription()> -> _SOURCE_
<com.android.internal.widget.RecyclerView$State: boolean didStructureChange()> -> _SOURCE_
<android.media.audiopolicy.AudioVolumeGroup: int getId()> -> _SOURCE_
<android.telephony.SubscriptionManager: int getDefaultSubscriptionId()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getVoiceMailNumber(int)> -> _SOURCE_
<android.nfc.NfcAdapter: android.nfc.NfcAdapter getNfcAdapter(android.content.Context)> -> _SOURCE_
<android.view.inputmethod.CursorAnchorInfo: int getComposingTextStart()> -> _SOURCE_
<android.telephony.UiccAccessRule: java.lang.String getPackageName()> -> _SOURCE_
<android.telephony.CallQuality: int getNumRtpPacketsReceived()> -> _SOURCE_
<com.android.internal.telephony.uicc.asn1.Asn1Node: byte[] asBytes()> -> _SOURCE_
<java.net.InetSocketAddress: int getPort()> -> _SOURCE_
<android.renderscript.Allocation: int getUsage()> -> _SOURCE_
<android.util.Xml: org.xmlpull.v1.XmlPullParser newPullParser()> -> _SOURCE_
<android.os.storage.StorageManager: boolean isBlockEncrypted()> -> _SOURCE_
<android.os.storage.StorageManager: java.io.File findPathForUuid(java.lang.String)> -> _SOURCE_
<android.net.LinkProperties: java.util.List getDnsServers()> -> _SOURCE_
<java.util.concurrent.locks.ReentrantLock: boolean isLocked()> -> _SOURCE_
<android.app.NotificationHistory$HistoricalNotification: java.lang.String toString()> -> _SOURCE_
<java.util.Date: int getYear()> -> _SOURCE_
<android.os.Looper: android.os.Looper getMainLooper()> -> _SOURCE_
<android.net.http.SslError: boolean hasError(int)> -> _SOURCE_
<android.os.Environment: java.io.File[] buildExternalStorageAppMediaDirs(java.lang.String)> -> _SOURCE_
<android.app.ActivityOptions: android.content.Intent getResultData()> -> _SOURCE_
<android.bluetooth.BluetoothHeadsetClientCall: java.lang.String toString()> -> _SOURCE_
<android.media.audiopolicy.AudioVolumeGroup: java.util.List getAudioVolumeGroups()> -> _SOURCE_
<android.telephony.CellSignalStrengthNr: android.telephony.CellSignalStrengthNr copy()> -> _SOURCE_
<android.drm.DrmUtils: android.drm.DrmUtils$ExtendedMetadataParser getExtendedMetadataParser(byte[])> -> _SOURCE_
<android.telephony.data.ApnSetting: java.lang.String getApnName()> -> _SOURCE_
<android.print.PrinterInfo: android.print.PrinterCapabilitiesInfo getCapabilities()> -> _SOURCE_
<android.net.wifi.WifiMigration$SettingsMigrationData: java.lang.String getP2pDeviceName()> -> _SOURCE_
<android.telephony.CellInfoNr: android.telephony.CellInfo sanitizeLocationInfo()> -> _SOURCE_
<android.webkit.WebStorage$Origin: long getQuota()> -> _SOURCE_
<java.util.TreeSet: int size()> -> _SOURCE_
<android.media.audiopolicy.AudioProductStrategy: int getVolumeGroupIdForAudioAttributes(android.media.AudioAttributes)> -> _SOURCE_
<android.app.ActivityManager$TaskSnapshot: int getWindowingMode()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isWifiCallingAvailable()> -> _SOURCE_
<com.android.internal.app.ToolbarActionBar: int getDisplayOptions()> -> _SOURCE_
<android.bluetooth.BluetoothUuid: boolean is32BitUuid(android.os.ParcelUuid)> -> _SOURCE_
<android.location.GnssClock: long getElapsedRealtimeNanos()> -> _SOURCE_
<android.os.TelephonyServiceManager: android.os.TelephonyServiceManager$ServiceRegisterer getSmsServiceRegisterer()> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing$Channel: android.media.audiofx.DynamicsProcessing$Limiter getLimiter()> -> _SOURCE_
<android.widget.PopupWindow: int getInputMethodMode()> -> _SOURCE_
<android.hardware.hdmi.HdmiDeviceInfo: int getVendorId()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.util.List queryIntentContentProvidersAsUser(android.content.Intent,int,int)> -> _SOURCE_
<android.telecom.PhoneAccount: int getSupportedAudioRoutes()> -> _SOURCE_
<android.telephony.ims.feature.MmTelFeature: android.telephony.ims.stub.ImsEcbmImplBase getEcbm()> -> _SOURCE_
<android.hardware.fingerprint.FingerprintManager$CryptoObject: javax.crypto.Cipher getCipher()> -> _SOURCE_
<android.media.AudioSystem: java.util.Set generateAudioDeviceTypesSet(int)> -> _SOURCE_
<java.time.Instant: long getEpochSecond()> -> _SOURCE_
<android.content.res.Configuration: boolean isScreenHdr()> -> _SOURCE_
<android.location.GnssMeasurement: double getPseudorangeRateMetersPerSecond()> -> _SOURCE_
<android.hardware.Sensor: boolean isDynamicSensor()> -> _SOURCE_
<android.telephony.CellIdentityTdscdma: android.telephony.CellIdentityTdscdma sanitizeLocationInfo()> -> _SOURCE_
<android.metrics.LogMaker: int getUid()> -> _SOURCE_
<android.telephony.SmsManager: android.os.Bundle getCarrierConfigValues()> -> _SOURCE_
<android.os.Parcel: int readCallingWorkSourceUid()> -> _SOURCE_
<android.content.ContextWrapper: android.view.autofill.AutofillManager$AutofillClient getAutofillClient()> -> _SOURCE_
<android.inputmethodservice.AbstractInputMethodService: android.os.IBinder onBind(android.content.Intent)> -> _SOURCE_
<android.media.tv.tuner.filter.DownloadEvent: int getItemFragmentIndex()> -> _SOURCE_
<android.app.ActivityManager: java.util.List getRunningTasks(int)> -> _SOURCE_
<com.android.internal.util.TypedProperties: short getShort(java.lang.String)> -> _SOURCE_
<android.service.wallpaper.WallpaperService$Engine: boolean isPreview()> -> _SOURCE_
<android.util.StateSet: boolean containsAttribute(int[][],int)> -> _SOURCE_
<android.app.ApplicationPackageManager: java.lang.CharSequence getText(java.lang.String,int,android.content.pm.ApplicationInfo)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getTelephonyProperty(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.telephony.CellIdentityLte: int getPci()> -> _SOURCE_
<java.io.PrintWriter: boolean checkError()> -> _SOURCE_
<android.content.Intent: java.lang.String dockStateToString(int)> -> _SOURCE_
<com.android.internal.infra.AbstractRemoteService: void dump(java.lang.String,java.io.PrintWriter)> -> _SOURCE_
<android.service.controls.Control: java.lang.CharSequence getSubtitle()> -> _SOURCE_
<android.hardware.usb.UsbManager: void grantPermission(android.hardware.usb.UsbDevice,java.lang.String)> -> _SOURCE_
<android.app.AppOpsManager$HistoricalOpsRequest$Builder: android.app.AppOpsManager$HistoricalOpsRequest build()> -> _SOURCE_
<java.io.PrintWriter: java.io.PrintWriter printf(java.lang.String,java.lang.Object[])> -> _SOURCE_
<android.os.DropBoxManager$Entry: long getTimeMillis()> -> _SOURCE_
<android.view.inputmethod.InputMethodManager: java.util.List getEnabledInputMethodListAsUser(int)> -> _SOURCE_
<android.hardware.camera2.params.OutputConfiguration: boolean isForPhysicalCamera()> -> _SOURCE_
<android.net.http.SslCertificate: java.util.Date getValidNotAfterDate()> -> _SOURCE_
<android.location.GnssStatus$Callback: void onStarted()> -> _SOURCE_
<android.media.tv.tuner.filter.RecordSettings$Builder: android.media.tv.tuner.filter.RecordSettings build()> -> _SOURCE_
<android.hardware.display.BrightnessConfiguration: void saveToXml(org.xmlpull.v1.XmlSerializer)> -> _SOURCE_
<android.security.keystore.AndroidKeyStoreSpi: java.security.cert.Certificate engineGetCertificate(java.lang.String)> -> _SOURCE_
<android.app.NotificationManager: java.util.Map getAutomaticZenRules()> -> _SOURCE_
<android.os.TelephonyServiceManager$ServiceRegisterer: android.os.IBinder getOrThrow()> -> _SOURCE_
<android.hardware.radio.RadioManager$ModuleProperties: java.lang.String getProduct()> -> _SOURCE_
<com.android.internal.telephony.SmsAddress: java.lang.String getAddressString()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.lang.CharSequence getStartUserSessionMessage(android.content.ComponentName)> -> _SOURCE_
<android.widget.ScrollBarDrawable: android.graphics.drawable.Drawable getHorizontalThumbDrawable()> -> _SOURCE_
<android.location.LocationManager: int getGnssYearOfHardware()> -> _SOURCE_
<android.view.inputmethod.InputMethodSubtype: boolean isAsciiCapable()> -> _SOURCE_
<android.media.AudioRecord: int getSampleRate()> -> _SOURCE_
<java.time.LocalDateTime: java.time.LocalDateTime minusWeeks(long)> -> _SOURCE_
<android.telecom.TelecomManager: android.telecom.PhoneAccountHandle getSimCallManagerForSubscription(int)> -> _SOURCE_
<android.media.AudioDeviceAttributes: java.lang.String roleToString(int)> -> _SOURCE_
<android.net.NetworkPolicyManager: boolean isUidValidForPolicy(android.content.Context,int)> -> _SOURCE_
<android.telephony.ims.feature.ImsFeature$Capabilities: int getMask()> -> _SOURCE_
<android.widget.inline.InlinePresentationSpec: java.lang.String toString()> -> _SOURCE_
<android.telephony.SignalStrength: int getGsmLevel()> -> _SOURCE_
<com.android.internal.util.StateMachine: com.android.internal.util.StateMachine$LogRec getLogRec(int)> -> _SOURCE_
<android.util.SparseLongArray: int size()> -> _SOURCE_
<android.content.res.Resources: java.lang.CharSequence getText(int)> -> _SOURCE_
<android.provider.CalendarContract$CalendarAlerts: void rescheduleMissedAlarms(android.content.ContentResolver,android.content.Context,android.app.AlarmManager)> -> _SOURCE_
<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item setUid(int)> -> _SOURCE_
<android.transition.Transition: android.util.ArrayMap getNameOverrides()> -> _SOURCE_
<com.android.internal.app.LocalePicker: android.os.LocaleList getLocales()> -> _SOURCE_
<com.android.internal.telephony.gsm.SmsCbHeader: boolean isUmtsFormat()> -> _SOURCE_
<android.hardware.hdmi.HdmiDeviceInfo: int getPhysicalAddress()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.util.List getPermittedCrossProfileNotificationListeners(android.content.ComponentName)> -> _SOURCE_
<android.app.ActivityView: int getVirtualDisplayId()> -> _SOURCE_
<android.os.Environment: java.io.File getDataVendorCeDirectory(int)> -> _SOURCE_
<android.net.ConnectivityManager: android.net.Network getProcessDefaultNetwork()> -> _SOURCE_
<android.accessibilityservice.AccessibilityService$ScreenshotResult: android.hardware.HardwareBuffer getHardwareBuffer()> -> _SOURCE_
<android.net.ConnectivityManager: android.net.ProxyInfo getDefaultProxy()> -> _SOURCE_
<android.app.Notification$CarExtender$UnreadConversation: long getLatestTimestamp()> -> _SOURCE_
<android.net.Network: android.net.Network getPrivateDnsBypassingCopy()> -> _SOURCE_
<android.webkit.TracingController: android.webkit.TracingController getInstance()> -> _SOURCE_
<android.content.integrity.AtomicFormula$LongAtomicFormula: boolean isAppCertificateFormula()> -> _SOURCE_
<android.os.SystemVibrator: boolean hasVibrator()> -> _SOURCE_
<android.content.pm.PermissionInfo: boolean isRestricted()> -> _SOURCE_
<android.widget.TextView: android.text.method.MovementMethod getMovementMethod()> -> _SOURCE_
<android.graphics.FontFamily: void abortCreation()> -> _SOURCE_
<android.net.NetworkCapabilities: int[] getTransportTypes()> -> _SOURCE_
<android.telephony.mbms.DownloadStatusListener: void onStatusUpdated(android.telephony.mbms.DownloadRequest,android.telephony.mbms.FileInfo,int)> -> _SOURCE_
<android.os.BasicShellCommandHandler: java.io.InputStream getBufferedInputStream()> -> _SOURCE_
<android.view.contentcapture.ContentCaptureContext: android.view.contentcapture.ContentCaptureSessionId getParentSessionId()> -> _SOURCE_
<android.content.pm.ShortcutInfo: java.lang.String getDisabledMessageResName()> -> _SOURCE_
<android.service.notification.ScheduleCalendar: boolean exitAtAlarm()> -> _SOURCE_
<android.hardware.camera2.params.TonemapCurve: int getPointCount(int)> -> _SOURCE_
<java.nio.charset.CharsetEncoder: java.nio.charset.CodingErrorAction malformedInputAction()> -> _SOURCE_
<com.android.internal.os.BaseCommand: java.lang.String[] getRawArgs()> -> _SOURCE_
<java.util.logging.LogManager: void readConfiguration(java.io.InputStream)> -> _SOURCE_
<android.util.TimingsTraceLog: java.util.List getUnfinishedTracesForDebug()> -> _SOURCE_
<android.util.SparseArrayMap: int indexOfKey(int,java.lang.String)> -> _SOURCE_
<android.media.Rating: java.lang.String toString()> -> _SOURCE_
<android.telephony.mbms.GroupCall: android.telephony.mbms.InternalGroupCallCallback getCallback()> -> _SOURCE_
<android.provider.ContactsContract$Directory: boolean isRemoteDirectory(long)> -> _SOURCE_
<android.provider.SyncStateContract$Helpers: android.content.ContentProviderOperation newSetOperation(android.net.Uri,android.accounts.Account,byte[])> -> _SOURCE_
<android.os.Bundle: android.os.Bundle filterValues()> -> _SOURCE_
<android.hardware.face.FaceManager$EnrollmentCallback: void onEnrollmentError(int,java.lang.CharSequence)> -> _SOURCE_
<android.media.tv.TvView$TvInputCallback: void onEvent(java.lang.String,java.lang.String,android.os.Bundle)> -> _SOURCE_
<android.security.NetworkSecurityPolicy: android.security.net.config.ApplicationConfig getApplicationConfigForPackage(android.content.Context,java.lang.String)> -> _SOURCE_
<android.os.NativeHandle: int[] getInts()> -> _SOURCE_
<java.nio.DoubleBuffer: java.lang.String toString()> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec: java.lang.String[] getSignaturePaddings()> -> _SOURCE_
<android.provider.Settings$Secure: android.net.Uri getUriFor(java.lang.String)> -> _SOURCE_
<android.os.UserManager: boolean isUserUnlockingOrUnlocked(android.os.UserHandle)> -> _SOURCE_
<android.provider.Settings$Global: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)> -> _SOURCE_
<android.security.keystore.recovery.RecoveryController: java.security.Key importKey(java.lang.String,byte[],byte[])> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: android.os.ParcelUuid[] getUuids()> -> _SOURCE_
<android.widget.OverScroller: int getFinalX()> -> _SOURCE_
<android.hardware.usb.UsbDevice: java.lang.String getVersion()> -> _SOURCE_
<android.webkit.DateSorter: long getBoundary(int)> -> _SOURCE_
<android.hardware.camera2.legacy.CaptureCollector: android.hardware.camera2.legacy.RequestHolder previewProduced()> -> _SOURCE_
<android.os.Parcel: byte[] createByteArray()> -> _SOURCE_
<android.view.View: int getVerticalScrollbarWidth()> -> _SOURCE_
<android.os.PowerManager: void validateWakeLockParameters(int,java.lang.String)> -> _SOURCE_
<android.service.autofill.augmented.PresentationParams: android.service.autofill.augmented.PresentationParams$Area getSuggestionArea()> -> _SOURCE_
<java.util.ResourceBundle$Control: long getTimeToLive(java.lang.String,java.util.Locale)> -> _SOURCE_
<android.media.audiofx.EnvironmentalReverb: short getDecayHFRatio()> -> _SOURCE_
<android.debug.PairDevice: boolean isConnected()> -> _SOURCE_
<android.nfc.tech.NfcA: byte[] getAtqa()> -> _SOURCE_
<android.app.RemoteInput: java.lang.CharSequence getLabel()> -> _SOURCE_
<android.window.WindowContainerTransaction$Change: java.lang.String toString()> -> _SOURCE_
<java.time.OffsetTime: int getNano()> -> _SOURCE_
<android.security.KeyChain: java.security.KeyPair getKeyPair(android.content.Context,java.lang.String)> -> _SOURCE_
<java.net.InterfaceAddress: short getNetworkPrefixLength()> -> _SOURCE_
<android.content.integrity.RuleSet$Builder: android.content.integrity.RuleSet$Builder setVersion(java.lang.String)> -> _SOURCE_
<android.telephony.DataSpecificRegistrationInfo: android.telephony.LteVopsSupportInfo getLteVopsSupportInfo()> -> _SOURCE_
<android.telephony.mbms.vendor.MbmsDownloadServiceBase: int setTempFileRootDirectory(int,java.lang.String)> -> _SOURCE_
<com.android.internal.app.ChooserListAdapter: void addChooserTargetRankingScore(java.util.List)> -> _SOURCE_
<android.app.slice.SliceItem: boolean hasHint(java.lang.String)> -> _SOURCE_
<android.os.BasicShellCommandHandler: java.io.InputStream getRawInputStream()> -> _SOURCE_
<android.content.pm.InstantAppInfo: java.lang.String[] getRequestedPermissions()> -> _SOURCE_
<android.hardware.location.NanoAppInstanceInfo: int getNeededWriteMemBytes()> -> _SOURCE_
<android.app.VoiceInteractor: android.app.VoiceInteractor$Request getActiveRequest(java.lang.String)> -> _SOURCE_
<android.view.inputmethod.InputMethodManager: java.util.List getInputMethodList()> -> _SOURCE_
<android.app.usage.StorageStatsManager: java.util.Collection queryCratesForUid(java.util.UUID,int)> -> _SOURCE_
<android.speech.tts.TtsEngines: void updateLocalePrefForEngine(java.lang.String,java.util.Locale)> -> _SOURCE_
<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy$Builder permitNetwork()> -> _SOURCE_
<android.net.lowpan.LowpanInterface: java.lang.String getState()> -> _SOURCE_
<android.bluetooth.BluetoothMapClient: int getConnectionState(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.lang.String getDeviceOwnerNameOnAnyUser()> -> _SOURCE_
<android.view.SurfaceControl: android.os.IBinder createDisplay(java.lang.String,boolean)> -> _SOURCE_
<android.print.PrintAttributes: int getDuplexMode()> -> _SOURCE_
<android.media.tv.TvInputInfo$Builder: android.media.tv.TvInputInfo build()> -> _SOURCE_
<android.net.LinkProperties: boolean isIpv4Provisioned()> -> _SOURCE_
<android.service.autofill.UserData: java.lang.String[] getCategoryIds()> -> _SOURCE_
<android.mtp.MtpStorageManager: boolean checkConsistency()> -> _SOURCE_
<java.nio.file.attribute.FileTime: java.lang.String toString()> -> _SOURCE_
<android.location.GnssMeasurement: double getBasebandCn0DbHz()> -> _SOURCE_
<android.service.notification.NotificationListenerService: void onNotificationPosted(android.service.notification.StatusBarNotification,android.service.notification.NotificationListenerService$RankingMap)> -> _SOURCE_
<android.hardware.radio.RadioManager$FmBandDescriptor: boolean isStereoSupported()> -> _SOURCE_
<android.telephony.data.ApnSetting: boolean isEmergencyApn()> -> _SOURCE_
<android.content.pm.PackageInstaller$SessionInfo: android.content.Intent getDetailsIntent()> -> _SOURCE_
<android.nfc.NfcAdapter: boolean isSecureNfcEnabled()> -> _SOURCE_
<android.security.KeyPairGeneratorSpec: java.lang.String getKeystoreAlias()> -> _SOURCE_
<android.media.AudioManager: int listPreviousAudioPorts(java.util.ArrayList)> -> _SOURCE_
<android.nfc.Tag: android.os.Bundle getTechExtras(int)> -> _SOURCE_
<android.drm.DrmManagerClient: android.content.ContentValues getConstraints(android.net.Uri,int)> -> _SOURCE_
<java.net.DatagramPacket: java.net.SocketAddress getSocketAddress()> -> _SOURCE_
<android.graphics.Bitmap: android.hardware.HardwareBuffer getHardwareBuffer()> -> _SOURCE_
<android.window.TaskOrganizer: android.window.WindowContainerToken getImeTarget(int)> -> _SOURCE_
<android.net.ScoredNetwork: boolean hasRankingScore()> -> _SOURCE_
<android.preference.ListPreference: java.lang.CharSequence getSummary()> -> _SOURCE_
<android.net.StaticIpConfiguration: java.net.InetAddress getGateway()> -> _SOURCE_
<java.net.Socket: java.nio.channels.SocketChannel getChannel()> -> _SOURCE_
<android.content.ContextWrapper: java.io.File[] getExternalCacheDirs()> -> _SOURCE_
<android.bluetooth.BluetoothClass: int getMajorDeviceClass()> -> _SOURCE_
<android.view.textservice.SuggestionsInfo: int getSequence()> -> _SOURCE_
<android.content.pm.PackageInstaller$SessionInfo: long getUpdatedMillis()> -> _SOURCE_
<android.hardware.usb.UsbDeviceConnection: int getFileDescriptor()> -> _SOURCE_
<android.os.Debug$MemoryInfo: java.util.Map getMemoryStats()> -> _SOURCE_
<android.app.Fragment: java.lang.CharSequence getText(int)> -> _SOURCE_
<android.media.session.MediaController$Callback: void onQueueChanged(java.util.List)> -> _SOURCE_
<com.android.internal.widget.RecyclerView: com.android.internal.widget.RecyclerView$ViewHolder findContainingViewHolder(android.view.View)> -> _SOURCE_
<android.security.keystore.recovery.X509CertificateParsingUtils: java.security.cert.X509Certificate decodeBase64Cert(java.lang.String)> -> _SOURCE_
<android.bluetooth.BluetoothHeadset: boolean isAudioOn()> -> _SOURCE_
<com.android.ims.internal.uce.options.OptionsCmdStatus: com.android.ims.internal.uce.common.StatusCode getStatus()> -> _SOURCE_
<android.os.Bundle: java.lang.Byte getByte(java.lang.String,byte)> -> _SOURCE_
<android.location.GnssClock: boolean hasElapsedRealtimeUncertaintyNanos()> -> _SOURCE_
<android.hardware.radio.RadioManager$FmBandDescriptor: boolean isEaSupported()> -> _SOURCE_
<android.net.TrafficStats: void incrementOperationCount(int,int)> -> _SOURCE_
<android.location.GpsMeasurement: boolean hasAzimuthUncertaintyInDeg()> -> _SOURCE_
<android.filterfw.geometry.Point: java.lang.String toString()> -> _SOURCE_
<android.media.tv.tuner.frontend.IsdbtFrontendCapabilities: int getBandwidthCapability()> -> _SOURCE_
<android.content.pm.ShortcutInfo: boolean isPinnedVisible()> -> _SOURCE_
<android.media.session.PlaybackState: int getState()> -> _SOURCE_
<android.app.Notification$CarExtender$Builder: android.app.Notification$CarExtender$UnreadConversation build()> -> _SOURCE_
<android.text.BoringLayout$Metrics: java.lang.String toString()> -> _SOURCE_
<android.net.metrics.NetworkEvent: java.lang.String toString()> -> _SOURCE_
<android.telecom.ParcelableCall: android.os.Bundle getExtras()> -> _SOURCE_
<com.android.ims.internal.uce.presence.PresCmdStatus: void setUserData(int)> -> _SOURCE_
<android.hardware.Camera$Parameters: java.util.List getSupportedFocusModes()> -> _SOURCE_
<android.view.ScrollCaptureTarget: android.graphics.Point getPositionInWindow()> -> _SOURCE_
<android.app.AppOpsManager$AttributedOpEntry: android.app.AppOpsManager$OpEventProxyInfo getLastBackgroundProxyInfo(int)> -> _SOURCE_
<java.security.cert.PKIXCertPathValidatorResult: java.security.cert.PolicyNode getPolicyTree()> -> _SOURCE_
<android.telephony.PhoneNumberUtils: boolean isNanp(java.lang.String)> -> _SOURCE_
<android.telephony.SmsCbMessage: java.util.List getGeometries()> -> _SOURCE_
<android.location.GnssMeasurementCorrections: double getLatitudeDegrees()> -> _SOURCE_
<android.hardware.camera2.CaptureResult$Key: java.lang.String getName()> -> _SOURCE_
<android.renderscript.Script$LaunchOptions: int getZEnd()> -> _SOURCE_
<android.os.Parcel: int dataAvail()> -> _SOURCE_
<android.nfc.tech.NfcV: byte getDsfId()> -> _SOURCE_
<android.telecom.ParcelableCall: int getSupportedAudioRoutes()> -> _SOURCE_
<com.android.internal.view.ScrollViewCaptureHelper: android.graphics.Rect onScrollRequested(android.view.ViewGroup,android.graphics.Rect,android.graphics.Rect)> -> _SOURCE_
<android.service.autofill.SaveRequest: java.util.List getFillContexts()> -> _SOURCE_
<java.nio.file.InvalidPathException: java.lang.String getReason()> -> _SOURCE_
<android.net.NetworkInfo: boolean isFailover()> -> _SOURCE_
<android.telecom.Call: java.util.List getCannedTextResponses()> -> _SOURCE_
<java.util.PropertyResourceBundle: java.util.Enumeration getKeys()> -> _SOURCE_
<android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype build()> -> _SOURCE_
<android.telephony.PhoneNumberUtils: boolean isEmergencyNumber(java.lang.String,java.lang.String)> -> _SOURCE_
<android.widget.RatingBar: int getNumStars()> -> _SOURCE_
<java.net.DatagramPacket: int getPort()> -> _SOURCE_
<android.telephony.CallForwardingInfo: java.lang.String toString()> -> _SOURCE_
<android.hardware.soundtrigger.SoundTrigger$RecognitionConfig: java.lang.String toString()> -> _SOURCE_
<android.media.midi.MidiInputPort: int getPortNumber()> -> _SOURCE_
<android.widget.Magnifier: android.graphics.Point getSourcePosition()> -> _SOURCE_
<android.window.VirtualDisplayTaskEmbedder: int getId()> -> _SOURCE_
<android.service.notification.NotificationListenerService: java.util.List getNotificationChannels(java.lang.String,android.os.UserHandle)> -> _SOURCE_
<android.media.tv.tunerresourcemanager.TunerFrontendInfo: java.lang.String toString()> -> _SOURCE_
<android.location.GpsMeasurement: double getCn0InDbHz()> -> _SOURCE_
<android.app.backup.BackupManager: java.lang.CharSequence getDataManagementIntentLabel(java.lang.String)> -> _SOURCE_
<android.provider.BlockedNumberContract$SystemContract: boolean shouldShowEmergencyCallNotification(android.content.Context)> -> _SOURCE_
<java.text.DateFormatSymbols: java.lang.String[] getShortWeekdays()> -> _SOURCE_
<android.nfc.NfcActivityManager: void onActivityStopped(android.app.Activity)> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isApnMetered(int)> -> _SOURCE_
<java.security.SecureRandom: java.security.SecureRandom getInstanceStrong()> -> _SOURCE_
<android.util.EventLog$Event: long getTimeNanos()> -> _SOURCE_
<java.util.TimeZone: java.lang.String getID()> -> _SOURCE_
<android.provider.BlockedNumberContract$SystemContract$BlockSuppressionStatus: java.lang.String toString()> -> _SOURCE_
<android.service.notification.NotificationListenerService$Ranking: android.content.pm.ShortcutInfo getShortcutInfo()> -> _SOURCE_
<android.telephony.SubscriptionManager: void requestEmbeddedSubscriptionInfoListRefresh(int)> -> _SOURCE_
<android.view.View: boolean isSelected()> -> _SOURCE_
<android.app.RecoverableSecurityException: java.lang.CharSequence getUserMessage()> -> _SOURCE_
<android.view.ViewConfiguration: long getDeviceGlobalActionKeyTimeout()> -> _SOURCE_
<android.telephony.TelephonyManager: java.util.List getAllowedCarriers(int)> -> _SOURCE_
<android.media.MediaDrm$MediaDrmStateException: java.lang.String getDiagnosticInfo()> -> _SOURCE_
<java.text.NumberFormat: int getMinimumIntegerDigits()> -> _SOURCE_
<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy$Builder permitCustomSlowCalls()> -> _SOURCE_
<com.android.internal.os.WifiPowerCalculator: void calculateRemaining(com.android.internal.os.BatterySipper,android.os.BatteryStats,long,long,int)> -> _SOURCE_
<android.telephony.CellSignalStrengthGsm: int getDbm()> -> _SOURCE_
<android.renderscript.Script$LaunchOptions: int getZStart()> -> _SOURCE_
<android.telephony.CellSignalStrengthLte: int getRsrp()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: boolean hasBluetoothActivityReporting()> -> _SOURCE_
<android.webkit.UserPackage: boolean isEnabledPackage()> -> _SOURCE_
<javax.net.ssl.TrustManagerFactory: java.security.Provider getProvider()> -> _SOURCE_
<android.telephony.CellIdentity: java.lang.CharSequence getOperatorAlphaShort()> -> _SOURCE_
<android.telephony.CallQuality: int getAverageRoundTripTime()> -> _SOURCE_
<android.telephony.CellInfo: long getTimeStamp()> -> _SOURCE_
<android.content.rollback.PackageRollbackInfo: android.util.SparseLongArray getCeSnapshotInodes()> -> _SOURCE_
<com.android.internal.util.dump.DualDumpOutputStream: boolean isProto()> -> _SOURCE_
<android.service.autofill.augmented.Helper: void logResponse(int,java.lang.String,android.content.ComponentName,int,long)> -> _SOURCE_
<android.app.AppOpsManager$AttributedHistoricalOps: int getOpCount()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: boolean isDatabaseIntegrityOk()> -> _SOURCE_
<android.app.Notification$MessagingStyle$Message: android.os.Bundle getExtras()> -> _SOURCE_
<com.android.internal.util.MemInfoReader: long getTotalSizeKb()> -> _SOURCE_
<android.app.slice.SliceManager: java.util.List getPinnedSlices()> -> _SOURCE_
<com.android.internal.telephony.HbpcdUtils: int getMcc(int,int,int,boolean)> -> _SOURCE_
<android.hardware.fingerprint.FingerprintManager$AuthenticationResult: boolean isStrongBiometric()> -> _SOURCE_
<com.android.ims.internal.uce.presence.PresCapInfo: void setContactUri(java.lang.String)> -> _SOURCE_
<android.content.ClipData$Item: java.lang.String toString()> -> _SOURCE_
<android.renderscript.RSSurfaceView: android.renderscript.RenderScriptGL getRenderScriptGL()> -> _SOURCE_
<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy$Builder detectDiskReads()> -> _SOURCE_
<android.hardware.soundtrigger.KeyphraseEnrollmentInfo: android.hardware.soundtrigger.KeyphraseMetadata getKeyphraseMetadata(java.lang.String,java.util.Locale)> -> _SOURCE_
<android.hardware.fingerprint.FingerprintManager$EnrollmentCallback: void onEnrollmentError(int,java.lang.CharSequence)> -> _SOURCE_
<android.telephony.ims.ImsManager: android.telephony.ims.ImsMmTelManager getImsMmTelManager(int)> -> _SOURCE_
<android.hardware.display.ColorDisplayManager: int getTransformCapabilities()> -> _SOURCE_
<android.hardware.radio.ProgramSelector$Identifier: int getType()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: java.util.List getAvailableExtraData()> -> _SOURCE_
<android.hardware.hdmi.HdmiPortInfo: java.lang.String toString()> -> _SOURCE_
<android.media.audiopolicy.AudioPolicy: boolean setUidDeviceAffinity(int,java.util.List)> -> _SOURCE_
<android.telephony.euicc.EuiccManager: void setSupportedCountries(java.util.List)> -> _SOURCE_
<android.media.tv.tuner.frontend.IsdbsFrontendSettings: int getCodeRate()> -> _SOURCE_
<android.hardware.Camera$Parameters: int getJpegQuality()> -> _SOURCE_
<android.content.Intent: void printIntentArgsHelp(java.io.PrintWriter,java.lang.String)> -> _SOURCE_
<android.net.NetworkTemplate: void forceAllNetworkTypes()> -> _SOURCE_
<android.location.LocationManager: boolean isExtraLocationControllerPackageEnabled()> -> _SOURCE_
<java.time.temporal.WeekFields: java.time.temporal.TemporalField weekOfWeekBasedYear()> -> _SOURCE_
<android.os.Debug: void resetThreadGcInvocationCount()> -> _SOURCE_
<android.os.HidlMemoryUtil: java.util.ArrayList hidlMemoryToByteList(android.os.HidlMemory)> -> _SOURCE_
<android.preference.PreferenceActivity: boolean onIsHidingHeaders()> -> _SOURCE_
<com.android.internal.widget.GridLayoutManager$SpanSizeLookup: boolean isSpanIndexCacheEnabled()> -> _SOURCE_
<android.os.UserManager: boolean isManagedProfile()> -> _SOURCE_
<android.view.ContextThemeWrapper: android.content.res.Configuration getOverrideConfiguration()> -> _SOURCE_
<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.GsmAlphabet: java.lang.String gsm7BitPackedToString(byte[],int,int)> -> _SOURCE_
<java.net.URI: java.lang.String getRawAuthority()> -> _SOURCE_
<java.lang.Double: java.lang.String toString()> -> _SOURCE_
<android.security.keystore.KeyProtection$Builder: android.security.keystore.KeyProtection$Builder setDigests(java.lang.String[])> -> _SOURCE_
<android.telephony.mbms.StreamingService: android.net.Uri getPlaybackUri()> -> _SOURCE_
<android.preference.PreferenceDataStore: java.lang.String getString(java.lang.String,java.lang.String)> -> _SOURCE_
<java.util.concurrent.ScheduledThreadPoolExecutor: boolean getExecuteExistingDelayedTasksAfterShutdownPolicy()> -> _SOURCE_
<com.android.server.backup.AccountSyncSettingsBackupHelper: void performBackup(android.os.ParcelFileDescriptor,android.app.backup.BackupDataOutput,android.os.ParcelFileDescriptor)> -> _SOURCE_
<android.media.MediaCasStateException: int getErrorCode()> -> _SOURCE_
<android.location.GpsClock: boolean hasBiasUncertaintyInNs()> -> _SOURCE_
<android.hardware.display.AmbientDisplayConfiguration: boolean wakeDisplayGestureEnabled(int)> -> _SOURCE_
<android.app.ActivityManager: boolean isProfileForeground(android.os.UserHandle)> -> _SOURCE_
<android.hardware.camera2.legacy.CaptureCollector: boolean hasPendingPreviewCaptures()> -> _SOURCE_
<android.accessibilityservice.AccessibilityServiceInfo: java.lang.CharSequence loadSummary(android.content.pm.PackageManager)> -> _SOURCE_
<android.telecom.Voicemail: java.lang.String getNumber()> -> _SOURCE_
<android.content.res.Configuration: int reduceScreenLayout(int,int,int)> -> _SOURCE_
<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.util.Collection getWaitingThreads(java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)> -> _SOURCE_
<android.gesture.OrientedBoundingBox: android.graphics.Path toPath()> -> _SOURCE_
<android.location.Location: boolean hasBearingAccuracy()> -> _SOURCE_
<android.drm.DrmManagerClient: int acquireRights(android.drm.DrmInfoRequest)> -> _SOURCE_
<android.net.wifi.WifiMigration$SettingsMigrationData: boolean isSoftApTimeoutEnabled()> -> _SOURCE_
<android.service.voice.VoiceInteractionSession$AssistState: int getCount()> -> _SOURCE_
<android.content.ContentResolver: android.content.ContentProviderClient acquireContentProviderClient(java.lang.String)> -> _SOURCE_
<android.app.AppOpsManager: int noteOpNoThrow(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.content.pm.DataLoaderParams: android.content.pm.DataLoaderParamsParcel getData()> -> _SOURCE_
<android.provider.BlockedNumberContract$SystemContract: void notifyEmergencyContact(android.content.Context)> -> _SOURCE_
<java.time.format.DecimalStyle: char getNegativeSign()> -> _SOURCE_
<android.telecom.ConnectionService: void onCreateOutgoingConferenceFailed(android.telecom.PhoneAccountHandle,android.telecom.ConnectionRequest)> -> _SOURCE_
<android.app.backup.FileBackupHelper: void performBackup(android.os.ParcelFileDescriptor,android.app.backup.BackupDataOutput,android.os.ParcelFileDescriptor)> -> _SOURCE_
<android.app.RemoteInput: java.lang.CharSequence[] getChoices()> -> _SOURCE_
<android.telephony.TelephonyManager: int getCarrierIdListVersion()> -> _SOURCE_
<android.telephony.data.DataProfile: int getRoamingProtocolType()> -> _SOURCE_
<java.lang.invoke.MethodType: java.lang.invoke.MethodType genericMethodType(int)> -> _SOURCE_
<android.os.BasicShellCommandHandler: java.io.PrintWriter getOutPrintWriter()> -> _SOURCE_
<android.net.ConnectivityDiagnosticsManager$ConnectivityReport: android.net.NetworkCapabilities getNetworkCapabilities()> -> _SOURCE_
<android.hardware.soundtrigger.SoundTrigger$ModuleProperties: int getPowerConsumptionMw()> -> _SOURCE_
<android.print.PrinterInfo: android.print.PrinterId getId()> -> _SOURCE_
<android.app.AlertDialog: android.widget.Button getButton(int)> -> _SOURCE_
<android.app.ActivityManager$TaskDescription: java.lang.String getLabel()> -> _SOURCE_
<android.bluetooth.BluetoothA2dp: void enableOptionalCodecs(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<android.media.tv.tuner.filter.Filter: android.media.tv.tuner.filter.FilterCallback getCallback()> -> _SOURCE_
<android.media.AudioPresentation: boolean hasDialogueEnhancement()> -> _SOURCE_
<android.app.ApplicationPackageManager: void disableHasSystemFeatureCache()> -> _SOURCE_
<android.bluetooth.le.AdvertiseSettings$Builder: android.bluetooth.le.AdvertiseSettings build()> -> _SOURCE_
<android.net.ConnectivityDiagnosticsManager$ConnectivityReport: android.net.Network getNetwork()> -> _SOURCE_
<com.android.internal.policy.PhoneWindow: android.view.WindowInsetsController getInsetsController()> -> _SOURCE_
<android.content.pm.LauncherApps: boolean isActivityEnabled(android.content.ComponentName,android.os.UserHandle)> -> _SOURCE_
<android.content.ContextWrapper: android.view.Display getDisplayNoVerify()> -> _SOURCE_
<android.net.netstats.provider.NetworkStatsProvider: android.net.netstats.provider.INetworkStatsProvider getProviderBinder()> -> _SOURCE_
<android.net.NetworkPolicyManager: android.net.NetworkPolicy[] getNetworkPolicies()> -> _SOURCE_
<android.provider.Telephony$CarrierId: android.net.Uri getSpecificCarrierIdUriForSubscriptionId(int)> -> _SOURCE_
<android.view.autofill.AutofillManager: void onAuthenticationResult(int,android.content.Intent,android.view.View)> -> _SOURCE_
<android.app.SearchableInfo$ActionKeyInfo: int getKeyCode()> -> _SOURCE_
<android.content.res.Resources: android.content.res.XmlResourceParser getXml(int)> -> _SOURCE_
<android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityRecord getRecord(int)> -> _SOURCE_
<android.app.ApplicationPackageManager: boolean isSafeMode()> -> _SOURCE_
<android.media.audiofx.AudioEffect: int byteArrayToInt(byte[],int)> -> _SOURCE_
<java.io.Console: java.lang.String readLine()> -> _SOURCE_
<android.app.Instrumentation$ActivityMonitor: int getHits()> -> _SOURCE_
<android.util.EventLog: java.lang.String getTagName(int)> -> _SOURCE_
<android.view.VelocityTracker$Estimator: float getYCoeff(int)> -> _SOURCE_
<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getActivityLogo(android.content.ComponentName)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getOtaSpNumberSchema(java.lang.String)> -> _SOURCE_
<android.telephony.TelephonyManager: java.util.List getCertsFromCarrierPrivilegeAccessRules()> -> _SOURCE_
<android.telephony.TelephonyManager: int getLteOnCdmaMode(int)> -> _SOURCE_
<android.app.DatePickerDialog: android.widget.DatePicker getDatePicker()> -> _SOURCE_
<android.widget.TextView: android.widget.Editor getEditorForTesting()> -> _SOURCE_
<android.view.contentcapture.ContentCaptureContext: int getDisplayId()> -> _SOURCE_
<android.net.IpSecManager$UdpEncapsulationSocket: int getPort()> -> _SOURCE_
<android.app.role.RoleControllerService: android.os.IBinder onBind(android.content.Intent)> -> _SOURCE_
<java.lang.reflect.Modifier: int interfaceModifiers()> -> _SOURCE_
<android.app.ApplicationPackageManager: boolean isAutoRevokeWhitelisted(java.lang.String)> -> _SOURCE_
<android.security.keystore.AndroidKeyStoreSpi: java.util.Date engineGetCreationDate(java.lang.String)> -> _SOURCE_
<java.net.Socket: java.net.InetAddress getLocalAddress()> -> _SOURCE_
<com.android.ims.internal.uce.common.CapInfo: boolean isCallComposerSupported()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: android.content.ComponentName getDeviceOwnerComponentOnAnyUser()> -> _SOURCE_
<android.telephony.CellSignalStrengthCdma: int getAsuLevel()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.view.textclassifier.TextClassifierEvent: float[] getScores()> -> _SOURCE_
<android.webkit.CacheManager$CacheResult: java.lang.String getLocalPath()> -> _SOURCE_
<android.media.tv.tuner.frontend.FrontendStatus: boolean isEwbs()> -> _SOURCE_
<android.animation.PathKeyframes: android.animation.Keyframes$FloatKeyframes createYFloatKeyframes()> -> _SOURCE_
<android.telephony.euicc.EuiccManager: void setUnsupportedCountries(java.util.List)> -> _SOURCE_
<android.os.Environment: java.io.File getDataDirectory()> -> _SOURCE_
<android.os.storage.StorageManager: long getCacheSizeBytes(java.util.UUID)> -> _SOURCE_
<android.telephony.ims.ImsSsData: int[] getSuppServiceInfoCompat()> -> _SOURCE_
<android.view.View: int getAutofillViewId()> -> _SOURCE_
<android.content.pm.PackageInstaller$SessionInfo: boolean getEnableRollback()> -> _SOURCE_
<android.app.blob.LeaseInfo: java.lang.String toString()> -> _SOURCE_
<android.widget.RemoteViews: int estimateMemoryUsage()> -> _SOURCE_
<android.drm.DrmInfo: java.util.Iterator keyIterator()> -> _SOURCE_
<java.security.Provider: java.util.Set getServices()> -> _SOURCE_
<android.content.Intent: java.lang.String getType()> -> _SOURCE_
<java.time.Year: java.time.Year now()> -> _SOURCE_
<android.widget.ScrollView: void onStopNestedScroll(android.view.View)> -> _SOURCE_
<android.app.PropertyInvalidatedCache: void dumpCacheInfo(java.io.FileDescriptor,java.lang.String[])> -> _SOURCE_
<android.content.ContentProviderOperation: boolean isUpdate()> -> _SOURCE_
<java.net.URI: java.lang.String getRawSchemeSpecificPart()> -> _SOURCE_
<android.net.LocalServerSocket: java.io.FileDescriptor getFileDescriptor()> -> _SOURCE_
<android.bluetooth.BluetoothActivityEnergyInfo: java.lang.String toString()> -> _SOURCE_
<java.security.cert.CertPathValidator: java.security.cert.CertPathValidator getInstance(java.lang.String)> -> _SOURCE_
<android.os.BatterySaverPolicyConfig: boolean getDisableSoundTrigger()> -> _SOURCE_
<android.content.AutofillOptions: boolean isAugmentedAutofillEnabled(android.content.Context)> -> _SOURCE_
<android.telecom.ParcelableCall: boolean isVideoCallProviderChanged()> -> _SOURCE_
<android.telecom.Connection: void onHandoverComplete()> -> _SOURCE_
<android.app.Dialog: boolean onMenuOpened(int,android.view.Menu)> -> _SOURCE_
<android.widget.TextView: int getTypefaceStyle()> -> _SOURCE_
<android.app.ApplicationPackageManager: boolean hasSigningCertificate(int,byte[],int)> -> _SOURCE_
<android.view.ViewGroup: int getChildCount()> -> _SOURCE_
<android.content.LocusId: java.lang.String toString()> -> _SOURCE_
<android.hardware.camera2.impl.CameraDeviceImpl: boolean isSessionConfigurationSupported(android.hardware.camera2.params.SessionConfiguration)> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: boolean isMultipleAdvertisementSupported()> -> _SOURCE_
<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()> -> _SOURCE_
<java.util.concurrent.ForkJoinTask: boolean isCompletedNormally()> -> _SOURCE_
<android.net.lowpan.LowpanInterface: android.net.lowpan.ILowpanInterface getService()> -> _SOURCE_
<android.hardware.ConsumerIrManager$CarrierFrequencyRange: int getMinFrequency()> -> _SOURCE_
<android.view.InputEventReceiver: void onFocusEvent(boolean,boolean)> -> _SOURCE_
<android.view.ViewRootImpl: android.view.ImeFocusController getImeFocusController()> -> _SOURCE_
<java.nio.file.FileSystemException: java.lang.String getReason()> -> _SOURCE_
<android.media.midi.MidiManager: void registerDeviceCallback(android.media.midi.MidiManager$DeviceCallback,android.os.Handler)> -> _SOURCE_
<android.telephony.CellSignalStrengthCdma: int getDbm()> -> _SOURCE_
<java.io.Writer: void write(char[])> -> _SOURCE_
<android.telephony.SmsMessage: java.util.ArrayList fragmentText(java.lang.String)> -> _SOURCE_
<android.content.integrity.IntegrityFormula$Installer: android.content.integrity.IntegrityFormula notAllowedByManifest()> -> _SOURCE_
<android.widget.Spinner: android.content.Context getPopupContext()> -> _SOURCE_
<android.security.keystore.recovery.RecoveryController: int getRecoveryStatus(java.lang.String)> -> _SOURCE_
<android.telephony.SmsCbMessage: boolean isEtwsMessage()> -> _SOURCE_
<com.android.ims.internal.uce.options.OptionsCmdStatus: com.android.ims.internal.uce.options.OptionsCmdStatus getOptionsCmdStatusInstance()> -> _SOURCE_
<android.hardware.usb.UsbConfiguration: boolean isSelfPowered()> -> _SOURCE_
<android.nfc.cardemulation.ApduServiceInfo: android.nfc.cardemulation.AidGroup getDynamicAidGroupForCategory(java.lang.String)> -> _SOURCE_
<android.media.tv.TvStreamConfig: java.lang.String toString()> -> _SOURCE_
<com.android.internal.widget.RecyclerView$SmoothScroller: android.view.View findViewByPosition(int)> -> _SOURCE_
<java.text.NumberFormat: java.util.Locale[] getAvailableLocales()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isResetPasswordTokenActive(android.content.ComponentName)> -> _SOURCE_
<android.media.VolumeShaper$Configuration$Builder: android.media.VolumeShaper$Configuration$Builder setOptionFlags(int)> -> _SOURCE_
<android.hardware.display.AmbientDisplayConfiguration: boolean pulseOnNotificationAvailable()> -> _SOURCE_
<android.content.ContextWrapper: android.content.ComponentName startForegroundService(android.content.Intent)> -> _SOURCE_
<android.os.RecoverySystem: void scheduleUpdateOnBoot(android.content.Context,java.io.File)> -> _SOURCE_
<android.text.style.TextAppearanceSpan: android.os.LocaleList getTextLocales()> -> _SOURCE_
<java.util.GregorianCalendar: int getMinimum(int)> -> _SOURCE_
<java.lang.String: java.lang.String copyValueOf(char[])> -> _SOURCE_
<android.telephony.ims.ImsMmTelManager: void getFeatureState(java.util.concurrent.Executor,java.util.function.Consumer)> -> _SOURCE_
<android.bluetooth.BluetoothHidDevice: java.util.List getConnectedDevices()> -> _SOURCE_
<android.app.ActivityManager$TaskSnapshot: long getId()> -> _SOURCE_
<java.security.spec.ECParameterSpec: int getCofactor()> -> _SOURCE_
<android.util.SparseIntArray: int size()> -> _SOURCE_
<java.time.Duration: long toDays()> -> _SOURCE_
<java.text.ChoiceFormat: double[] getLimits()> -> _SOURCE_
<android.telecom.Conference: java.lang.String toString()> -> _SOURCE_
<android.se.omapi.SEService: boolean isConnected()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.net.lowpan.LowpanBeaconInfo: java.lang.String toString()> -> _SOURCE_
<android.telephony.NetworkScanRequest: java.util.ArrayList getPlmns()> -> _SOURCE_
<java.util.concurrent.locks.ReentrantLock: int getQueueLength()> -> _SOURCE_
<android.telephony.PreciseDataConnectionState: android.telephony.data.ApnSetting getApnSetting()> -> _SOURCE_
<android.app.job.JobInfo: boolean isRequireDeviceIdle()> -> _SOURCE_
<android.hardware.camera2.CaptureRequest$Key: java.lang.String getName()> -> _SOURCE_
<android.graphics.Canvas: android.graphics.Rect getClipBounds()> -> _SOURCE_
<android.app.Notification$WearableExtender: int getGravity()> -> _SOURCE_
<android.app.usage.UsageEvents$Event: java.lang.String getPackageName()> -> _SOURCE_
<android.content.ContentProvider: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)> -> _SOURCE_
<android.view.ViewGroup: void notifySubtreeAccessibilityStateChangedIfNeeded()> -> _SOURCE_
<android.net.NetworkCapabilities: java.lang.String describeImmutableDifferences(android.net.NetworkCapabilities)> -> _SOURCE_
<android.media.AudioTrack: int getChannelCount()> -> _SOURCE_
<android.content.BroadcastReceiver: java.lang.String getResultData()> -> _SOURCE_
<android.mtp.MtpStorageManager: android.mtp.MtpStorageManager$MtpObject getStorageRoot(int)> -> _SOURCE_
<android.service.contentcapture.SnapshotData: android.os.Bundle getAssistData()> -> _SOURCE_
<android.telephony.SubscriptionManager: android.telephony.SubscriptionInfo getActiveSubscriptionInfoForSimSlotIndex(int)> -> _SOURCE_
<com.android.internal.midi.EventScheduler: com.android.internal.midi.EventScheduler$SchedulableEvent removeEventfromPool()> -> _SOURCE_
<android.content.pm.PackageManager: java.lang.String installStatusToString(int,java.lang.String)> -> _SOURCE_
<android.view.View: void onActivityResult(int,int,android.content.Intent)> -> _SOURCE_
<android.view.inputmethod.InputContentInfo: android.content.ClipDescription getDescription()> -> _SOURCE_
<android.media.MediaRouterClientState: java.lang.String toString()> -> _SOURCE_
<android.app.ApplicationExitInfo: java.io.File getTraceFile()> -> _SOURCE_
<android.telecom.ConnectionRequest: java.lang.String toString()> -> _SOURCE_
<android.app.backup.BackupAgent: void onRestore(android.app.backup.BackupDataInput,long,android.os.ParcelFileDescriptor,java.util.Set)> -> _SOURCE_
<android.mtp.MtpEvent: int getObjectHandle()> -> _SOURCE_
<android.net.MacAddress: int getAddressType()> -> _SOURCE_
<android.provider.Contacts$ContactMethods: java.lang.String lookupProviderNameFromId(int)> -> _SOURCE_
<android.os.storage.StorageVolume: java.lang.String normalizeUuid(java.lang.String)> -> _SOURCE_
<android.media.AudioRecordingConfiguration: android.media.AudioRecordingConfiguration anonymizedCopy(android.media.AudioRecordingConfiguration)> -> _SOURCE_
<android.os.connectivity.WifiActivityEnergyInfo: long getTimeSinceBootMillis()> -> _SOURCE_
<android.content.integrity.AppInstallMetadata$Builder: android.content.integrity.AppInstallMetadata$Builder setAppCertificates(java.util.List)> -> _SOURCE_
<android.app.NotificationChannel: boolean isFgServiceShown()> -> _SOURCE_
<android.content.pm.ServiceInfo: int getForegroundServiceType()> -> _SOURCE_
<android.graphics.NinePatch: java.lang.String getName()> -> _SOURCE_
<android.net.MacAddress: android.net.MacAddress fromString(java.lang.String)> -> _SOURCE_
<android.util.LruCache: int size()> -> _SOURCE_
<android.media.session.MediaSessionManager: void notifySession2Created(android.media.Session2Token)> -> _SOURCE_
<android.os.Parcel: java.lang.String readString()> -> _SOURCE_
<android.net.NetworkStats: java.lang.String defaultNetworkToString(int)> -> _SOURCE_
<android.widget.SearchView: void onActionViewCollapsed()> -> _SOURCE_
<android.telephony.ims.ImsCallProfile: android.os.Bundle getProprietaryCallExtras()> -> _SOURCE_
<android.view.MotionEvent: float getToolMinor(int)> -> _SOURCE_
<android.media.MediaRoute2ProviderInfo: java.lang.String getUniqueId()> -> _SOURCE_
<android.location.Location: void removeBearingAccuracy()> -> _SOURCE_
<android.content.ContentResolver: void requestSync(android.accounts.Account,java.lang.String,android.os.Bundle)> -> _SOURCE_
<android.service.notification.ZenModeConfig$Diff: java.lang.String toString()> -> _SOURCE_
<android.media.audiopolicy.AudioVolumeGroup: java.lang.String name()> -> _SOURCE_
<com.android.internal.telephony.CellBroadcastUtils: java.lang.String getDefaultCellBroadcastReceiverPackageName(android.content.Context)> -> _SOURCE_
<com.android.internal.widget.CachingIconView: java.lang.Runnable setImageURIAsync(android.net.Uri)> -> _SOURCE_
<android.preference.ListPreference: java.lang.CharSequence getEntry()> -> _SOURCE_
<android.bluetooth.BluetoothHeadsetClientCall: java.lang.String getNumber()> -> _SOURCE_
<android.view.inputmethod.InlineSuggestion: android.view.inputmethod.InlineSuggestion$InlineContentCallbackImpl getInlineContentCallback()> -> _SOURCE_
<android.media.MediaSyncEvent: int getType()> -> _SOURCE_
<android.hardware.camera2.utils.TypeReference: int hashCode()> -> _SOURCE_
<android.service.notification.StatusBarNotification: java.lang.String getKey()> -> _SOURCE_
<android.telecom.Phone: java.util.List getCalls()> -> _SOURCE_
<android.os.ParcelFileDescriptor: long getStatSize()> -> _SOURCE_
<android.metrics.LogMaker: android.util.SparseArray getEntries()> -> _SOURCE_
<android.hardware.display.WifiDisplay: boolean isAvailable()> -> _SOURCE_
<android.widget.PopupMenu: android.view.Menu getMenu()> -> _SOURCE_
<android.telephony.CellIdentity: java.lang.String getMccString()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: android.content.ComponentName setGlobalProxy(android.content.ComponentName,java.net.Proxy,java.util.List)> -> _SOURCE_
<android.telecom.ConnectionRequest: boolean isRequestingRtt()> -> _SOURCE_
<android.content.res.Configuration: int updateFrom(android.content.res.Configuration)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long getWifiMulticastWakelockTime(long,int)> -> _SOURCE_
<android.telephony.NetworkRegistrationInfo: int getRejectCause()> -> _SOURCE_
<android.util.KeyValueListParser$IntValue: int getDefaultValue()> -> _SOURCE_
<javax.crypto.KeyAgreement: java.security.Provider getProvider()> -> _SOURCE_
<android.media.session.PlaybackState: long getPosition()> -> _SOURCE_
<android.location.LocationProvider: boolean propertiesMeetCriteria(java.lang.String,com.android.internal.location.ProviderProperties,android.location.Criteria)> -> _SOURCE_
<android.hardware.soundtrigger.SoundTrigger$RecognitionEvent: int getCaptureSession()> -> _SOURCE_
<android.content.ContentResolver: int getTargetSdkVersion()> -> _SOURCE_
<android.telephony.CellSignalStrengthTdscdma: int getBitErrorRate()> -> _SOURCE_
<android.media.MicrophoneInfo: android.media.MicrophoneInfo$Coordinate3F getPosition()> -> _SOURCE_
<java.security.MessageDigest: java.lang.Object clone()> -> _SOURCE_
<android.content.PermissionChecker: int checkPermissionForDataDelivery(android.content.Context,java.lang.String,int,int,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.graphics.YuvImage: int[] getStrides()> -> _SOURCE_
<android.util.AttributeSet: java.lang.String getAttributeNamespace(int)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isProfileActivePasswordSufficientForParent(int)> -> _SOURCE_
<android.media.midi.MidiReceiver: void flush()> -> _SOURCE_
<android.bluetooth.BluetoothGattCallback: void onReliableWriteCompleted(android.bluetooth.BluetoothGatt,int)> -> _SOURCE_
<android.view.Surface: int getGenerationId()> -> _SOURCE_
<android.provider.DocumentsContract: android.net.Uri buildChildDocumentsUriUsingTree(android.net.Uri,java.lang.String)> -> _SOURCE_
<android.os.HwParcel: java.util.ArrayList readStringVector()> -> _SOURCE_
<android.os.UserHandle: boolean isSystem()> -> _SOURCE_
<android.view.contentcapture.ContentCaptureCondition: java.lang.String toString()> -> _SOURCE_
<com.android.internal.widget.LockPatternUtils: boolean isManagedProfileWithUnifiedChallenge(int)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Timer: long getTimeSinceMarkLocked(long)> -> _SOURCE_
<com.android.internal.accessibility.util.AccessibilityUtils: int getAccessibilityServiceFragmentType(android.accessibilityservice.AccessibilityServiceInfo)> -> _SOURCE_
<android.telecom.PhoneAccount: android.net.Uri getAddress()> -> _SOURCE_
<android.view.textclassifier.TextClassification$Builder: android.view.textclassifier.TextClassification build()> -> _SOURCE_
<java.security.cert.X509CertSelector: java.util.Collection getPathToNames()> -> _SOURCE_
<android.content.pm.parsing.component.ParsedAttribution: boolean isCombinationValid(java.util.List)> -> _SOURCE_
<java.security.cert.X509CRLEntry: java.security.cert.CRLReason getRevocationReason()> -> _SOURCE_
<android.telephony.mbms.MbmsDownloadReceiver: java.lang.String getFileRelativePath(java.lang.String,java.lang.String)> -> _SOURCE_
<android.telephony.VisualVoicemailService: android.os.IBinder onBind(android.content.Intent)> -> _SOURCE_
<android.telephony.TelephonyManager: int getSimApplicationState(int)> -> _SOURCE_
<android.content.pm.ShortcutInfo: java.lang.String toString()> -> _SOURCE_
<com.android.internal.telephony.cdma.SmsMessage: boolean isMWIClearMessage()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.lang.String getAlwaysOnVpnPackage()> -> _SOURCE_
<android.app.ApplicationPackageManager: void setSystemAppState(java.lang.String,int)> -> _SOURCE_
<android.telephony.ims.stub.ImsUtImplBase: int queryClir()> -> _SOURCE_
<android.telephony.SmsMessage: int getProtocolIdentifier()> -> _SOURCE_
<android.media.audiopolicy.AudioMix: java.lang.String canBeUsedForPrivilegedCapture(android.media.AudioFormat)> -> _SOURCE_
<android.app.SearchDialog: android.os.Bundle onSaveInstanceState()> -> _SOURCE_
<android.hardware.camera2.params.SessionConfiguration: android.hardware.camera2.params.InputConfiguration getInputConfiguration()> -> _SOURCE_
<android.content.ContentResolver: boolean getMasterSyncAutomatically()> -> _SOURCE_
<android.telephony.mbms.GroupCall: long getTmgi()> -> _SOURCE_
<com.android.internal.telephony.CellNetworkScanResult: java.util.List getOperators()> -> _SOURCE_
<android.content.ContentResolver: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)> -> _SOURCE_
<java.security.cert.X509CertSelector: java.security.cert.X509Certificate getCertificate()> -> _SOURCE_
<android.location.LocationManager: int getGnssBatchSize()> -> _SOURCE_
<java.security.Timestamp: java.security.cert.CertPath getSignerCertPath()> -> _SOURCE_
<com.android.internal.widget.LockPatternUtils: int getKeyguardStoredPasswordQuality(int)> -> _SOURCE_
<android.view.ViewConfiguration: int getScaledMaximumDrawingCacheSize()> -> _SOURCE_
<android.widget.TableLayout: void addView(android.view.View)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.util.Set getDisallowedSystemApps(android.content.ComponentName,int,java.lang.String)> -> _SOURCE_
<android.security.AttestedKeyPair: java.security.KeyPair getKeyPair()> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: int getIoCapability()> -> _SOURCE_
<android.media.soundtrigger.SoundTriggerDetector$EventPayload: android.media.AudioFormat getCaptureAudioFormat()> -> _SOURCE_
<android.telephony.CellInfoGsm: android.telephony.CellSignalStrengthGsm getCellSignalStrength()> -> _SOURCE_
<android.security.net.config.NetworkSecurityConfig: android.security.net.config.NetworkSecurityConfig$Builder getDefaultBuilder(android.content.pm.ApplicationInfo)> -> _SOURCE_
<android.telephony.CellIdentityLte: int getBandwidth()> -> _SOURCE_
<android.telecom.Call: void swapConference()> -> _SOURCE_
<android.util.apk.ApkSignatureVerifier: byte[] getVerityRootHash(java.lang.String)> -> _SOURCE_
<android.net.metrics.WakeupEvent: java.lang.String toString()> -> _SOURCE_
<android.app.AppOpsManager$HistoricalUidOps: android.app.AppOpsManager$HistoricalPackageOps getPackageOpsAt(int)> -> _SOURCE_
<android.telephony.LocationAccessPolicy: android.telephony.LocationAccessPolicy$LocationPermissionResult checkLocationPermission(android.content.Context,android.telephony.LocationAccessPolicy$LocationPermissionQuery)> -> _SOURCE_
<java.security.spec.ECParameterSpec: java.math.BigInteger getOrder()> -> _SOURCE_
<android.service.euicc.EuiccService: void onDestroy()> -> _SOURCE_
<java.io.Console: java.io.Reader reader()> -> _SOURCE_
<android.os.UserHandle: int getCallingUserId()> -> _SOURCE_
<android.content.pm.ShortcutInfo: android.content.LocusId getLocusId()> -> _SOURCE_
<java.util.concurrent.Semaphore: int availablePermits()> -> _SOURCE_
<android.app.job.JobInfo: android.net.NetworkRequest getRequiredNetwork()> -> _SOURCE_
<java.util.zip.Deflater: int getAdler()> -> _SOURCE_
<android.net.metrics.ConnectStats: java.lang.String toString()> -> _SOURCE_
<android.app.contentsuggestions.ClassificationsRequest: android.os.Bundle getExtras()> -> _SOURCE_
<android.bluetooth.le.ScanRecord: java.util.List getServiceSolicitationUuids()> -> _SOURCE_
<org.apache.http.conn.ssl.SSLSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)> -> _SOURCE_
<android.app.ActivityManager: void noteWakeupAlarm(android.app.PendingIntent,android.os.WorkSource,int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.os.Parcel: java.lang.CharSequence[] readCharSequenceArray()> -> _SOURCE_
<android.app.ApplicationPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)> -> _SOURCE_
<android.os.LocaleList: int getFirstMatchIndexWithEnglishSupported(java.util.Collection)> -> _SOURCE_
<android.view.WindowInsets$Type: int systemGestures()> -> _SOURCE_
<java.lang.String: java.lang.String valueOf(char[],int,int)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: com.android.internal.os.BatteryStatsImpl$SamplingTimer getRpmTimerLocked(java.lang.String)> -> _SOURCE_
<android.app.admin.SystemUpdatePolicy: java.lang.String toString()> -> _SOURCE_
<android.app.PendingIntent: java.lang.String getCreatorPackage()> -> _SOURCE_
<android.view.animation.LinearInterpolator: long createNativeInterpolator()> -> _SOURCE_
<android.app.assist.AssistStructure$ViewNode: android.os.Bundle getExtras()> -> _SOURCE_
<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(java.lang.CharSequence,int,int)> -> _SOURCE_
<java.time.YearMonth: int getYear()> -> _SOURCE_
<android.os.UserManager: android.os.Bundle getApplicationRestrictions(java.lang.String)> -> _SOURCE_
<android.telephony.ims.ImsCallSession$Listener: void callSessionHandoverFailed(android.telephony.ims.ImsCallSession,int,int,android.telephony.ims.ImsReasonInfo)> -> _SOURCE_
<com.android.ims.internal.uce.options.OptionsCmdStatus: com.android.ims.internal.uce.options.OptionsCmdId getCmdId()> -> _SOURCE_
<android.media.RingtoneManager: void ensureDefaultRingtones(android.content.Context)> -> _SOURCE_
<android.app.admin.DeviceAdminInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)> -> _SOURCE_
<android.provider.Contacts$ContactMethods: java.lang.String encodePredefinedImProtocol(int)> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isVideoTelephonyAvailable()> -> _SOURCE_
<android.print.PrintAttributes$MediaSize: boolean isPortrait()> -> _SOURCE_
<android.hardware.camera2.legacy.ParameterUtils: java.util.List convertSizeList(java.util.List)> -> _SOURCE_
<android.media.MediaRouter$RouteInfo: int getPlaybackStream()> -> _SOURCE_
<android.app.Notification: android.graphics.drawable.Icon getSmallIcon()> -> _SOURCE_
<android.telecom.InCallAdapter: void phoneAccountSelected(java.lang.String,android.telecom.PhoneAccountHandle,boolean)> -> _SOURCE_
<android.telephony.ServiceState: int getChannelNumber()> -> _SOURCE_
<android.hardware.location.NanoAppInstanceInfo: int[] getNeededSensors()> -> _SOURCE_
<android.content.res.loader.ResourcesProvider: android.content.res.loader.ResourcesProvider loadFromSplit(android.content.Context,java.lang.String)> -> _SOURCE_
<android.os.IncidentManager: java.util.List getIncidentReportList(java.lang.String)> -> _SOURCE_
<android.telephony.ims.ImsService: android.telephony.ims.feature.MmTelFeature createMmTelFeature(int)> -> _SOURCE_
<android.security.Credentials: boolean deleteCertificateTypesForAlias(android.security.KeyStore,java.lang.String)> -> _SOURCE_
<android.app.job.JobParameters: java.lang.String getDebugStopReason()> -> _SOURCE_
<android.net.LinkProperties: boolean hasGlobalIPv6Address()> -> _SOURCE_
<android.telephony.data.ApnSetting: int getNetworkTypeBitmask()> -> _SOURCE_
<android.app.assist.AssistStructure: android.content.ComponentName getActivityComponent()> -> _SOURCE_
<android.hardware.radio.RadioManager$ProgramInfo: boolean isTrafficProgram()> -> _SOURCE_
<android.net.TrafficStats: long getLoopbackRxBytes()> -> _SOURCE_
<android.service.autofill.FillEventHistory$Event: java.lang.String toString()> -> _SOURCE_
<android.media.VolumeShaper$Operation$Builder: android.media.VolumeShaper$Operation$Builder defer()> -> _SOURCE_
<android.content.res.AssetManager: android.util.SparseArray getAssignedPackageIdentifiers(boolean,boolean)> -> _SOURCE_
<android.content.res.CompatResources: android.graphics.drawable.Drawable getDrawable(int)> -> _SOURCE_
<android.net.metrics.NetworkMetrics: void addDnsResult(int,int,int)> -> _SOURCE_
<android.service.notification.ScheduleCalendar: java.lang.String toString()> -> _SOURCE_
<android.database.DatabaseUtils: long queryNumEntries(android.database.sqlite.SQLiteDatabase,java.lang.String)> -> _SOURCE_
<android.nfc.cardemulation.ApduServiceInfo: java.lang.String getCategoryForAid(java.lang.String)> -> _SOURCE_
<android.hardware.usb.UsbConfiguration: int getAttributes()> -> _SOURCE_
<android.media.tv.tunerresourcemanager.CasSessionRequest: int getClientId()> -> _SOURCE_
<java.time.Instant: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing$Limiter: float getReleaseTime()> -> _SOURCE_
<android.service.autofill.FillResponse: android.view.autofill.AutofillId[] getFieldClassificationIds()> -> _SOURCE_
<android.hardware.camera2.impl.CameraDeviceImpl$StateCallbackKK: void onUnconfigured(android.hardware.camera2.CameraDevice)> -> _SOURCE_
<android.app.ActivityManager: java.util.Collection getSupportedLocales()> -> _SOURCE_
<android.hardware.radio.RadioManager$FmBandDescriptor: boolean isTaSupported()> -> _SOURCE_
<android.telephony.mbms.DownloadRequest: int getSubscriptionId()> -> _SOURCE_
<android.net.TrafficStats: long getUidTcpRxBytes(int)> -> _SOURCE_
<java.time.temporal.TemporalAccessor: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)> -> _SOURCE_
<android.app.NotificationHistory: void addPooledStrings(java.util.List)> -> _SOURCE_
<android.mtp.MtpStorage: java.lang.String getDescription()> -> _SOURCE_
<java.io.ObjectInputStream: java.lang.String readUTF()> -> _SOURCE_
<android.view.View: int getAccessibilitySelectionStart()> -> _SOURCE_
<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder permitImplicitDirectBoot()> -> _SOURCE_
<android.security.keystore.recovery.RecoveryController: java.security.Key getKey(java.lang.String)> -> _SOURCE_
<android.media.MediaFile: boolean isVideoFileType(int)> -> _SOURCE_
<java.lang.ClassLoader: java.util.Enumeration getSystemResources(java.lang.String)> -> _SOURCE_
<android.net.http.SslError: java.lang.String getUrl()> -> _SOURCE_
<android.view.textclassifier.TextClassificationSessionId: android.os.IBinder getToken()> -> _SOURCE_
<android.content.Intent: char[] getCharArrayExtra(java.lang.String)> -> _SOURCE_
<android.hardware.location.ContextHubIntentEvent: java.lang.String toString()> -> _SOURCE_
<android.content.SyncRequest: boolean isExpedited()> -> _SOURCE_
<android.view.textservice.SpellCheckerInfo: android.content.ComponentName getComponent()> -> _SOURCE_
<android.database.sqlite.SQLiteTokenizer: boolean isType(java.lang.String)> -> _SOURCE_
<android.service.notification.NotificationListenerService$Ranking: java.util.List getSnoozeCriteria()> -> _SOURCE_
<android.widget.AdapterView: int getLastVisiblePosition()> -> _SOURCE_
<android.view.contentcapture.DataRemovalRequest$LocusIdRequest: android.content.LocusId getLocusId()> -> _SOURCE_
<com.android.internal.widget.NumericTextView: int getRangeMinimum()> -> _SOURCE_
<android.app.usage.EventList: int size()> -> _SOURCE_
<android.content.pm.PackageInstaller$SessionInfo: boolean isCommitted()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long computeBatteryTimeRemaining(long)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean packageHasActiveAdmins(java.lang.String,int)> -> _SOURCE_
<android.view.ViewConfiguration: int getScaledEdgeSlop()> -> _SOURCE_
<android.bluetooth.BluetoothHearingAid: java.util.List getActiveDevices()> -> _SOURCE_
<android.view.accessibility.AccessibilityRecord: int getAddedCount()> -> _SOURCE_
<android.hardware.HardwareBuffer: int getLayers()> -> _SOURCE_
<android.appwidget.AppWidgetHostView: android.widget.FrameLayout$LayoutParams generateLayoutParams(android.util.AttributeSet)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: void reboot(android.content.ComponentName)> -> _SOURCE_
<android.media.tv.TvInputService$RecordingSession: void notifyError(int)> -> _SOURCE_
<android.preference.PreferenceActivity: void startWithFragment(java.lang.String,android.os.Bundle,android.app.Fragment,int)> -> _SOURCE_
<android.media.MediaDescription: java.lang.CharSequence getTitle()> -> _SOURCE_
<com.android.internal.app.procstats.AssociationState: java.lang.String toString()> -> _SOURCE_
<java.time.Year: long getLong(java.time.temporal.TemporalField)> -> _SOURCE_
<android.bluetooth.le.ScanFilter: android.os.ParcelUuid getServiceSolicitationUuid()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: com.android.internal.os.BatteryStatsImpl$Uid$Proc getProcessStatsLocked(java.lang.String)> -> _SOURCE_
<android.view.Window: android.view.Window$WindowControllerCallback getWindowControllerCallback()> -> _SOURCE_
<android.graphics.pdf.PdfRenderer$Page: int getIndex()> -> _SOURCE_
<android.hardware.hdmi.HdmiTimerRecordSources: boolean checkTimerRecordSource(int,byte[])> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long getUahDischarge(int)> -> _SOURCE_
<android.telephony.ims.stub.ImsMultiEndpointImplBase: com.android.ims.internal.IImsMultiEndpoint getIImsMultiEndpoint()> -> _SOURCE_
<android.view.autofill.AutofillManager: android.content.ComponentName getAutofillServiceComponentName()> -> _SOURCE_
<android.app.VoiceInteractor$Request: android.content.Context getContext()> -> _SOURCE_
<android.service.carrier.CarrierMessagingService$SendSmsResult: int getMessageRef()> -> _SOURCE_
<android.hardware.hdmi.HdmiDeviceInfo: boolean isSourceType()> -> _SOURCE_
<android.app.FragmentController: android.app.Fragment findFragmentByWho(java.lang.String)> -> _SOURCE_
<android.bluetooth.BluetoothPan: java.util.List getConnectedDevices()> -> _SOURCE_
<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder penaltyLog()> -> _SOURCE_
<android.view.textclassifier.SystemTextClassifier: int getMaxGenerateLinksTextLength()> -> _SOURCE_
<android.telephony.ImsiEncryptionInfo: java.lang.String toString()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: int getColumnSpan()> -> _SOURCE_
<android.media.tv.TvTrackInfo: java.lang.String getId()> -> _SOURCE_
<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy$Builder permitUnbufferedIo()> -> _SOURCE_
<android.net.MobileLinkQualityInfo: int getCdmaEcio()> -> _SOURCE_
<android.telephony.SignalStrength: int getEvdoDbm()> -> _SOURCE_
<android.content.pm.PackageManager: void setSystemAppState(java.lang.String,int)> -> _SOURCE_
<android.widget.AdapterView: java.lang.Object getSelectedItem()> -> _SOURCE_
<android.telephony.ims.feature.MmTelFeature: android.telephony.ims.feature.MmTelFeature$MmTelCapabilities queryCapabilityStatus()> -> _SOURCE_
<android.content.pm.PackageInstaller$SessionInfo: int getOriginatingUid()> -> _SOURCE_
<android.webkit.WebResourceResponse: java.io.InputStream getData()> -> _SOURCE_
<android.media.RoutingSessionInfo: java.lang.String getOwnerPackageName()> -> _SOURCE_
<com.android.internal.telephony.SmsMessageBase: int getStatusOnIcc()> -> _SOURCE_
<android.media.EncoderCapabilities: int[] getOutputFileFormats()> -> _SOURCE_
<android.media.tv.tuner.frontend.AnalogFrontendSettings$Builder: android.media.tv.tuner.frontend.AnalogFrontendSettings build()> -> _SOURCE_
<android.util.MonthDisplayHelper: int getColumnOf(int)> -> _SOURCE_
<android.telephony.PhoneNumberUtils: byte[] networkPortionToCalledPartyBCD(java.lang.String)> -> _SOURCE_
<android.app.slice.Slice: java.util.List getHints()> -> _SOURCE_
<java.net.SocketImpl: java.lang.String toString()> -> _SOURCE_
<android.os.SharedMemory: java.io.FileDescriptor getFileDescriptor()> -> _SOURCE_
<java.io.RandomAccessFile: int readUnsignedByte()> -> _SOURCE_
<android.content.res.Configuration: java.lang.String resourceQualifierString(android.content.res.Configuration)> -> _SOURCE_
<android.app.Notification$CarExtender$UnreadConversation: android.app.PendingIntent getReadPendingIntent()> -> _SOURCE_
<android.net.wifi.WifiMigration$SettingsMigrationData: boolean isScanThrottleEnabled()> -> _SOURCE_
<android.hardware.camera2.CaptureResult: int getSequenceId()> -> _SOURCE_
<android.gesture.GestureStore: java.util.ArrayList getGestures(java.lang.String)> -> _SOURCE_
<android.filterfw.core.FieldPort: java.lang.String toString()> -> _SOURCE_
<android.service.textclassifier.TextClassifierService: android.content.ComponentName getServiceComponentName(android.content.Context,java.lang.String,int)> -> _SOURCE_
<android.view.inputmethod.BaseInputConnection: void setComposingSpans(android.text.Spannable,int,int)> -> _SOURCE_
<android.telephony.CellIdentityGsm: int getMnc()> -> _SOURCE_
<android.view.SurfaceControlViewHost: android.view.View getView()> -> _SOURCE_
<java.time.LocalDateTime: java.time.LocalDateTime now()> -> _SOURCE_
<android.hardware.radio.RadioMetadata: java.lang.String getKeyFromNativeKey(int)> -> _SOURCE_
<android.location.GnssCapabilities: boolean hasMeasurementCorrectionsLosSats()> -> _SOURCE_
<android.view.textclassifier.ConversationActions$Request: android.view.textclassifier.SystemTextClassifierMetadata getSystemTextClassifierMetadata()> -> _SOURCE_
<android.os.Debug$MemoryInfo: int getOtherSwappedOut(int)> -> _SOURCE_
<android.media.audiopolicy.AudioVolumeGroup: int[] getLegacyStreamTypes()> -> _SOURCE_
<android.net.metrics.ApfStats: void writeToParcel(android.os.Parcel,int)> -> _SOURCE_
<android.net.LinkProperties: boolean hasIPv4Address()> -> _SOURCE_
<android.view.autofill.AutofillId: int getViewId()> -> _SOURCE_
<android.media.AudioPlaybackConfiguration: android.media.AudioAttributes getAudioAttributes()> -> _SOURCE_
<com.android.internal.util.CollectionUtils: java.util.Set toSet(java.util.Collection)> -> _SOURCE_
<android.telecom.Call$Details: android.os.Bundle getIntentExtras()> -> _SOURCE_
<android.content.pm.RegisteredServicesCache: java.util.Collection getAllServices(int)> -> _SOURCE_
<android.media.tv.tuner.frontend.FrontendInfo: android.media.tv.tuner.frontend.FrontendCapabilities getFrontendCapabilities()> -> _SOURCE_
<android.app.ApplicationPackageManager: int checkPermission(java.lang.String,java.lang.String)> -> _SOURCE_
<android.mtp.MtpStorageManager: android.mtp.MtpStorage addMtpStorage(android.os.storage.StorageVolume)> -> _SOURCE_
<android.telephony.TelephonyManager: void disableServiceHandleCaching()> -> _SOURCE_
<android.app.NotificationManager: boolean isNotificationListenerAccessGranted(android.content.ComponentName)> -> _SOURCE_
<android.net.LocalServerSocket: android.net.LocalSocketAddress getLocalSocketAddress()> -> _SOURCE_
<android.media.MicrophoneInfo: int getLocation()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isDeviceProvisioned()> -> _SOURCE_
<android.telephony.ims.ImsSsData: int getServiceClass()> -> _SOURCE_
<android.content.ContentResolver: java.lang.String getPackageName()> -> _SOURCE_
<android.hardware.hdmi.HdmiControlServiceWrapper: void sendStandby(int,int)> -> _SOURCE_
<android.hardware.display.VirtualDisplayConfig: int getDensityDpi()> -> _SOURCE_
<android.accessibilityservice.FingerprintGestureController$FingerprintGestureCallback: void onGestureDetectionAvailabilityChanged(boolean)> -> _SOURCE_
<android.text.method.DigitsKeyListener: android.text.method.DigitsKeyListener getInstance(java.lang.String)> -> _SOURCE_
<android.view.ViewConfiguration: int getScrollDefaultDelay()> -> _SOURCE_
<android.net.KeepalivePacketData: int getSrcPort()> -> _SOURCE_
<android.hardware.Sensor: int getId()> -> _SOURCE_
<android.hardware.camera2.params.Face: android.graphics.Point getRightEyePosition()> -> _SOURCE_
<com.android.internal.os.ProcessCpuTracker: void dumpProto(java.io.FileDescriptor)> -> _SOURCE_
<android.os.HardwarePropertiesManager: android.os.CpuUsageInfo[] getCpuUsages()> -> _SOURCE_
<android.app.usage.UsageStatsManager: int getUsageSource()> -> _SOURCE_
<android.app.Notification$CarExtender$UnreadConversation: java.lang.String[] getMessages()> -> _SOURCE_
<android.telephony.ims.ImsExternalCallState: android.net.Uri getLocalAddress()> -> _SOURCE_
<android.hardware.display.DisplayManagerGlobal: android.view.Display getCompatibleDisplay(int,android.content.res.Resources)> -> _SOURCE_
<android.media.VolumeShaper$Configuration: java.lang.String toString()> -> _SOURCE_
<java.net.URLConnection: java.util.Map getRequestProperties()> -> _SOURCE_
<android.hardware.input.KeyboardLayout: java.lang.String getCollection()> -> _SOURCE_
<java.time.format.DecimalStyle: java.lang.String toString()> -> _SOURCE_
<android.media.session.PlaybackState: android.os.Bundle getExtras()> -> _SOURCE_
<android.media.tv.tunerresourcemanager.CasSessionRequest: java.lang.String toString()> -> _SOURCE_
<android.telephony.TelephonyManager: int setAllowedCarriers(int,java.util.List)> -> _SOURCE_
<android.app.ApplicationPackageManager: java.lang.String[] getPackagesForUid(int)> -> _SOURCE_
<android.media.AudioPort: java.lang.String toString()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: android.os.BatteryStats$ControllerActivityCounter getWifiControllerActivity()> -> _SOURCE_
<android.media.MediaDescrambler: boolean requiresSecureDecoderComponent(java.lang.String)> -> _SOURCE_
<android.app.ApplicationPackageManager: int getUserId()> -> _SOURCE_
<com.android.internal.view.ActionBarPolicy: int getMaxActionButtons()> -> _SOURCE_
<android.telephony.CallQuality: int getCodecType()> -> _SOURCE_
<android.location.LocationProvider: boolean supportsBearing()> -> _SOURCE_
<android.media.tv.tunerresourcemanager.TunerLnbRequest: int getClientId()> -> _SOURCE_
<android.nfc.cardemulation.ApduServiceInfo: java.lang.String toString()> -> _SOURCE_
<android.app.assist.AssistContent: boolean isAppProvidedIntent()> -> _SOURCE_
<android.widget.CursorTreeAdapter: android.database.Cursor runQueryOnBackgroundThread(java.lang.CharSequence)> -> _SOURCE_
<android.location.GnssAntennaInfo$SphericalCorrections: java.lang.String toString()> -> _SOURCE_
<android.media.MediaFile: boolean isImageFileType(int)> -> _SOURCE_
<android.service.autofill.SaveRequest: android.os.Bundle getClientState()> -> _SOURCE_
<android.hardware.radio.RadioManager$ModuleProperties: int getNumTuners()> -> _SOURCE_
<android.util.IntArray: int size()> -> _SOURCE_
<android.os.Parcel: android.os.IBinder readStrongBinder()> -> _SOURCE_
<android.security.keymaster.KeyAttestationPackageInfo: android.content.pm.Signature[] getPackageSignatures()> -> _SOURCE_
<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction syncInputWindows()> -> _SOURCE_
<android.app.DownloadManager: android.net.Uri getUriForDownloadedFile(long)> -> _SOURCE_
<android.app.ApplicationPackageManager: android.content.res.Resources getResourcesForApplication(java.lang.String)> -> _SOURCE_
<android.media.tv.TvInputInfo: java.lang.String getId()> -> _SOURCE_
<java.net.NetworkInterface: java.net.NetworkInterface getParent()> -> _SOURCE_
<android.net.wifi.nl80211.PnoSettings: int getMin5gRssiDbm()> -> _SOURCE_
<android.security.Scrypt: byte[] scrypt(byte[],byte[],int,int,int,int)> -> _SOURCE_
<android.content.pm.permission.RuntimePermissionPresentationInfo: boolean isGranted()> -> _SOURCE_
<android.media.AudioManager: int listAudioPatches(java.util.ArrayList)> -> _SOURCE_
<android.net.NetworkAgent: void onValidationStatus(int,android.net.Uri)> -> _SOURCE_
<android.text.style.TtsSpan$DecimalBuilder: android.text.style.TtsSpan$DecimalBuilder setArgumentsFromDouble(double,int,int)> -> _SOURCE_
<android.permission.PermissionControllerManager: void getAppPermissions(java.lang.String,android.permission.PermissionControllerManager$OnGetAppPermissionResultCallback,android.os.Handler)> -> _SOURCE_
<android.hardware.camera2.legacy.RequestHolder: java.util.Collection getHolderTargets()> -> _SOURCE_
<java.util.Currency: int getNumericCode()> -> _SOURCE_
<android.telephony.CellSignalStrengthNr: int getSsRsrp()> -> _SOURCE_
<android.telephony.SignalStrength: int getLevel()> -> _SOURCE_
<android.app.usage.StorageStatsManager: android.app.usage.StorageStats queryStatsForUid(java.util.UUID,int)> -> _SOURCE_
<java.time.LocalDateTime: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)> -> _SOURCE_
<java.lang.invoke.ConstantCallSite: java.lang.invoke.MethodHandle dynamicInvoker()> -> _SOURCE_
<android.os.Debug$MemoryInfo: int getSummaryUnknownRss()> -> _SOURCE_
<android.service.persistentdata.PersistentDataBlockManager: int getFlashLockState()> -> _SOURCE_
<android.media.tv.TvInputService$RecordingSession: void notifySessionEvent(java.lang.String,android.os.Bundle)> -> _SOURCE_
<android.content.ContextWrapper: android.content.Intent registerReceiverForAllUsers(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)> -> _SOURCE_
<android.view.contentcapture.ViewNode: int getAutofillType()> -> _SOURCE_
<android.widget.RadioGroup: android.widget.LinearLayout$LayoutParams generateLayoutParams(android.util.AttributeSet)> -> _SOURCE_
<java.security.cert.X509Certificate: java.util.Collection getIssuerAlternativeNames()> -> _SOURCE_
<android.companion.BluetoothLeDeviceFilter: java.lang.String getRenamePrefix()> -> _SOURCE_
<android.content.res.ColorStateList: java.lang.String toString()> -> _SOURCE_
<android.text.style.StrikethroughSpan: void writeToParcelInternal(android.os.Parcel,int)> -> _SOURCE_
<android.content.pm.UserInfo: java.lang.String flagsToString(int)> -> _SOURCE_
<android.telephony.TelephonyManager: android.telephony.TelephonyManager createForPhoneAccountHandle(android.telecom.PhoneAccountHandle)> -> _SOURCE_
<android.view.textclassifier.TextClassifier$EntityConfig: android.view.textclassifier.TextClassifier$EntityConfig createWithExplicitEntityList(java.util.Collection)> -> _SOURCE_
<com.android.internal.policy.PhoneWindow: void setTheme(int)> -> _SOURCE_
<android.view.accessibility.AccessibilityRecord: boolean isFullScreen()> -> _SOURCE_
<android.os.StrictMode: boolean vmSqliteObjectLeaksEnabled()> -> _SOURCE_
<android.hardware.location.ContextHubClient: android.hardware.location.ContextHubInfo getAttachedHub()> -> _SOURCE_
<com.android.internal.compat.OverrideAllowedState: java.lang.String toString()> -> _SOURCE_
<android.media.MediaPlayer$DrmInfo: java.util.UUID[] getSupportedSchemes()> -> _SOURCE_
<android.app.timezone.RulesManager: android.app.timezone.RulesState getRulesState()> -> _SOURCE_
<android.net.NetworkStats: long getTotalBytes()> -> _SOURCE_
<android.os.Debug$MemoryInfo: int getTotalSwappedOut()> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec: boolean isUserPresenceRequired()> -> _SOURCE_
<android.app.NotificationManager$Policy: java.lang.String toString()> -> _SOURCE_
<android.webkit.MimeTypeMap: java.lang.String getFileExtensionFromUrl(java.lang.String)> -> _SOURCE_
<android.widget.TextView: android.text.method.KeyListener getKeyListener()> -> _SOURCE_
<android.telephony.data.ApnSetting: int getRoamingProtocol()> -> _SOURCE_
<android.service.textclassifier.TextClassifierService: void onDisconnected()> -> _SOURCE_
<android.content.integrity.AppInstallMetadata$Builder: android.content.integrity.AppInstallMetadata$Builder setAllowedInstallersAndCert(java.util.Map)> -> _SOURCE_
<android.view.animation.AnimationUtils: long currentAnimationTimeMillis()> -> _SOURCE_
<android.text.method.DateKeyListener: android.text.method.DateKeyListener getInstance()> -> _SOURCE_
<android.view.autofill.AutofillValue: long getDateValue()> -> _SOURCE_
<android.media.MediaDrm: android.os.PersistableBundle getMetrics()> -> _SOURCE_
<android.telephony.CellSignalStrengthWcdma: int getEcNo()> -> _SOURCE_
<android.view.View: android.view.ViewTreeObserver getViewTreeObserver()> -> _SOURCE_
<android.widget.TextView: int getImeActionId()> -> _SOURCE_
<com.android.ims.internal.uce.presence.PresSipResponse: int getRetryAfter()> -> _SOURCE_
<android.provider.DocumentsContract: java.lang.String getSearchDocumentsQuery(android.os.Bundle)> -> _SOURCE_
<android.view.View: android.view.Display getDisplay()> -> _SOURCE_
<android.content.pm.PackageInstaller$SessionInfo: boolean isStagedSessionApplied()> -> _SOURCE_
<android.net.NetworkAgent: boolean waitForIdle(long)> -> _SOURCE_
<android.telecom.VideoProfile: int getQuality()> -> _SOURCE_
<android.app.SearchableInfo: int getImeOptions()> -> _SOURCE_
<android.timezone.TelephonyNetworkFinder: android.timezone.TelephonyNetwork findNetworkByMccMnc(java.lang.String,java.lang.String)> -> _SOURCE_
<android.service.trust.TrustAgentService: android.os.IBinder onBind(android.content.Intent)> -> _SOURCE_
<android.os.VibrationAttributes: java.lang.String toString()> -> _SOURCE_
<android.service.quicksettings.TileService: boolean isSecure()> -> _SOURCE_
<android.ddm.DdmHandleHeap: void register()> -> _SOURCE_
<com.android.internal.inputmethod.InputMethodPrivilegedOperations: com.android.internal.inputmethod.IInputContentUriToken createInputContentUriToken(android.net.Uri,java.lang.String)> -> _SOURCE_
<android.drm.DrmManagerClient: android.content.ContentValues getConstraints(java.lang.String,int)> -> _SOURCE_
<android.widget.CursorTreeAdapter: android.database.Cursor getCursor()> -> _SOURCE_
<android.telephony.CellIdentityNr: java.util.Set getAdditionalPlmns()> -> _SOURCE_
<android.telecom.Call$Details: int getCallProperties()> -> _SOURCE_
<android.media.AudioPlaybackConfiguration: int getPlayerState()> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing$Config: int getPreEqBandCount()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.CancellationSignal)> -> _SOURCE_
<android.location.Location: float getVerticalAccuracyMeters()> -> _SOURCE_
<android.widget.AdapterView: android.view.View getEmptyView()> -> _SOURCE_
<android.security.KeyChain: java.security.PrivateKey getPrivateKey(android.content.Context,java.lang.String)> -> _SOURCE_
<android.net.WebAddress: java.lang.String getHost()> -> _SOURCE_
<java.time.OffsetTime: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)> -> _SOURCE_
<android.service.notification.NotificationListenerService$Ranking: android.app.NotificationChannel getChannel()> -> _SOURCE_
<android.telecom.PhoneAccountSuggestion: android.telecom.PhoneAccountHandle getPhoneAccountHandle()> -> _SOURCE_
<android.util.Range: java.lang.String toString()> -> _SOURCE_
<java.security.spec.ECFieldF2m: int getM()> -> _SOURCE_
<android.os.BatterySaverPolicyConfig: int getLocationMode()> -> _SOURCE_
<com.android.internal.telephony.SmsMessageBase: long getTimestampMillis()> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec: int getKeySize()> -> _SOURCE_
<android.bluetooth.BluetoothMapClient: java.util.List getConnectedDevices()> -> _SOURCE_
<android.print.PrintJobInfo: int getCopies()> -> _SOURCE_
<android.bluetooth.BluetoothCodecStatus: android.bluetooth.BluetoothCodecConfig[] getCodecsLocalCapabilities()> -> _SOURCE_
<java.util.DuplicateFormatFlagsException: java.lang.String getFlags()> -> _SOURCE_
<android.view.textclassifier.TextSelection: int getEntityCount()> -> _SOURCE_
<java.net.ResponseCache: java.net.ResponseCache getDefault()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: int checkProvisioningPreCondition(java.lang.String,java.lang.String)> -> _SOURCE_
<android.util.IntArray: int[] toArray()> -> _SOURCE_
<android.telephony.ServiceState: boolean getIsManualSelection()> -> _SOURCE_
<javax.net.ssl.SSLEngineResult: int bytesConsumed()> -> _SOURCE_
<java.util.Arrays: java.lang.String toString(float[])> -> _SOURCE_
<android.util.PackageUtils: java.lang.String computeSha256Digest(byte[])> -> _SOURCE_
<android.media.MediaRoute2Info: java.lang.String toString()> -> _SOURCE_
<android.app.JobSchedulerImpl: java.util.List getStartedJobs()> -> _SOURCE_
<android.widget.TimePicker$AbstractTimePickerDelegate$SavedState: int getMinute()> -> _SOURCE_
<android.telephony.CellSignalStrengthNr: int getCsiRsrp()> -> _SOURCE_
<android.app.AppOpsManager: java.lang.String getUidStateName(int)> -> _SOURCE_
<android.os.Environment$UserEnvironment: java.io.File[] buildExternalStorageAppDataDirs(java.lang.String)> -> _SOURCE_
<android.media.midi.MidiDeviceInfo: android.os.Bundle getProperties()> -> _SOURCE_
<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])> -> _SOURCE_
<android.hardware.camera2.impl.RequestLastFrameNumbersHolder: long getLastReprocessFrameNumber()> -> _SOURCE_
<android.content.Intent: java.util.Set getCategories()> -> _SOURCE_
<android.os.LocaleList: boolean isPseudoLocalesOnly(java.lang.String[])> -> _SOURCE_
<android.widget.AdapterView: void removeAllViews()> -> _SOURCE_
<android.app.ApplicationExitInfo: int getDefiningUid()> -> _SOURCE_
<android.os.UserHandle: int parseUserArg(java.lang.String)> -> _SOURCE_
<android.media.MediaRouter$RouteInfo: java.lang.CharSequence getName()> -> _SOURCE_
<android.os.UserManager$EnforcingUser: android.os.UserHandle getUserHandle()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean hasDeviceIdentifierAccess(java.lang.String,int,int)> -> _SOURCE_
<com.android.ims.ImsConfig: int getProvisionedValue(int)> -> _SOURCE_
<android.view.ViewConfiguration: long getGlobalActionKeyTimeout()> -> _SOURCE_
<java.lang.Thread: java.lang.String toString()> -> _SOURCE_
<android.app.Notification$Style: void purgeResources()> -> _SOURCE_
<android.telephony.ServiceState: int getDuplexMode()> -> _SOURCE_
<android.media.AudioDeviceAttributes: java.lang.String getAddress()> -> _SOURCE_
<android.telephony.mbms.MbmsTempFileProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)> -> _SOURCE_
<com.android.internal.accessibility.util.AccessibilityUtils: boolean isAccessibilityServiceEnabled(android.content.Context,java.lang.String)> -> _SOURCE_
<android.view.inputmethod.InlineSuggestion: com.android.internal.view.inline.IInlineContentProvider getContentProvider()> -> _SOURCE_
<android.nfc.NfcAdapter: void attemptDeadServiceRecovery(java.lang.Exception)> -> _SOURCE_
<android.telephony.ims.ImsMmTelManager: boolean isVoWiFiRoamingSettingEnabled()> -> _SOURCE_
<android.media.MediaPlayer: android.media.MediaPlayer$DrmInfo getDrmInfo()> -> _SOURCE_
<android.telephony.mbms.MbmsUtils: java.io.File getEmbmsTempFileDirForService(android.content.Context,java.lang.String)> -> _SOURCE_
<android.media.MediaRoute2Info: java.util.List getFeatures()> -> _SOURCE_
<android.telephony.CellIdentityWcdma: int getUarfcn()> -> _SOURCE_
<android.app.DownloadManager: android.net.Uri getDownloadUri(long)> -> _SOURCE_
<android.service.media.MediaBrowserService$BrowserRoot: java.lang.String getRootId()> -> _SOURCE_
<android.media.tv.tuner.frontend.FrontendInfo: int getType()> -> _SOURCE_
<android.hardware.display.AmbientDisplayConfiguration: boolean wakeLockScreenGestureEnabled(int)> -> _SOURCE_
<java.util.MissingFormatWidthException: java.lang.String getFormatSpecifier()> -> _SOURCE_
<android.location.GnssReflectingPlane: java.lang.String toString()> -> _SOURCE_
<android.app.AppOpsManager: void clearHistory()> -> _SOURCE_
<android.view.accessibility.AccessibilityRecord: int getWindowId()> -> _SOURCE_
<android.telephony.BarringInfo: android.telephony.BarringInfo$BarringServiceInfo getBarringServiceInfo(int)> -> _SOURCE_
<android.database.sqlite.SQLiteQueryBuilder: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.hardware.Camera: android.hardware.Camera$Parameters getEmptyParameters()> -> _SOURCE_
<android.provider.ContactsContract$Directory: boolean isEnterpriseDirectoryId(long)> -> _SOURCE_
<com.android.internal.infra.ServiceConnector$Impl: java.lang.String toString()> -> _SOURCE_
<android.text.format.Formatter: java.lang.String formatFileSize(android.content.Context,long)> -> _SOURCE_
<android.net.RouteInfo: java.net.InetAddress getGateway()> -> _SOURCE_
<android.nfc.NdefMessage: java.lang.String toString()> -> _SOURCE_
<android.service.autofill.FillResponse: android.service.autofill.SaveInfo getSaveInfo()> -> _SOURCE_
<java.security.cert.X509CRLSelector: java.math.BigInteger getMinCRL()> -> _SOURCE_
<android.security.keystore.AndroidKeyStoreSpi: boolean engineIsCertificateEntry(java.lang.String)> -> _SOURCE_
<android.security.keystore.recovery.TrustedRootCertificates: java.security.cert.X509Certificate getRootCertificate(java.lang.String)> -> _SOURCE_
<android.widget.AutoCompleteTextView: boolean isInputMethodNotNeeded()> -> _SOURCE_
<android.os.FileUtils: byte[] digest(java.io.InputStream,java.lang.String)> -> _SOURCE_
<java.nio.channels.spi.AbstractSelector: java.nio.channels.spi.SelectorProvider provider()> -> _SOURCE_
<android.os.UserManager: boolean removeUser(int)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: int getStarts(int)> -> _SOURCE_
<android.os.storage.DiskInfo: java.lang.String toString()> -> _SOURCE_
<android.view.autofill.AutofillId: java.lang.String toString()> -> _SOURCE_
<android.speech.tts.TextToSpeechService: java.lang.String onGetDefaultVoiceNameFor(java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.print.PrintManager: java.util.List getPrintServices(int)> -> _SOURCE_
<android.media.MediaCodec$MediaImage: android.media.Image$Plane[] getPlanes()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getLabeledBy()> -> _SOURCE_
<android.graphics.FontFamily: boolean addFont(java.lang.String,int,android.graphics.fonts.FontVariationAxis[],int,int)> -> _SOURCE_
<android.service.notification.ZenPolicy: int getVisualEffectNotificationList()> -> _SOURCE_
<android.telephony.SignalStrength: int getGsmDbm()> -> _SOURCE_
<android.os.Bundle: java.lang.CharSequence[] getCharSequenceArray(java.lang.String)> -> _SOURCE_
<java.nio.channels.FileLock: java.lang.String toString()> -> _SOURCE_
<java.lang.Object: java.lang.Class getClass()> -> _SOURCE_
<android.provider.DocumentsContract: boolean isRootUri(android.content.Context,android.net.Uri)> -> _SOURCE_
<android.app.Dialog: android.view.SearchEvent getSearchEvent()> -> _SOURCE_
<android.media.session.MediaController: void registerCallback(android.media.session.MediaController$Callback,android.os.Handler)> -> _SOURCE_
<android.app.timezonedetector.TelephonyTimeZoneSuggestion: java.lang.String getZoneId()> -> _SOURCE_
<android.app.admin.FactoryResetProtectionPolicy: boolean isFactoryResetProtectionEnabled()> -> _SOURCE_
<android.media.MediaRouter$RouteCategory: boolean isSystem()> -> _SOURCE_
<android.media.MediaFile: android.media.MediaFile$MediaFileType getFileType(java.lang.String)> -> _SOURCE_
<android.drm.DrmManagerClient: int checkRightsStatus(android.net.Uri,int)> -> _SOURCE_
<android.media.tv.TvInputInfo: int getType()> -> _SOURCE_
<android.location.GpsNavigationMessageEvent: java.lang.String toString()> -> _SOURCE_
<android.telephony.DataSpecificRegistrationInfo: boolean isUsingCarrierAggregation()> -> _SOURCE_
<android.telecom.VideoProfile: java.lang.String toString()> -> _SOURCE_
<android.media.MediaPlayer: android.media.AudioDeviceInfo getPreferredDevice()> -> _SOURCE_
<android.service.carrier.CarrierMessagingService$SendMultipartSmsResult: int getSendStatus()> -> _SOURCE_
<android.app.prediction.AppPredictor: android.app.prediction.AppPredictionSessionId getSessionId()> -> _SOURCE_
<android.telephony.mbms.MbmsTempFileProvider: java.lang.String getType(android.net.Uri)> -> _SOURCE_
<android.app.Notification$Action: int getSemanticAction()> -> _SOURCE_
<android.telephony.ims.ImsCallProfile: int presentationToOIR(int)> -> _SOURCE_
<android.nfc.NfcActivityManager: void onActivitySaveInstanceState(android.app.Activity,android.os.Bundle)> -> _SOURCE_
<android.net.NetworkUtils: android.util.Pair parseIpAndMask(java.lang.String)> -> _SOURCE_
<android.hardware.hdmi.HdmiControlServiceWrapper: void oneTouchPlay(android.hardware.hdmi.IHdmiControlCallback)> -> _SOURCE_
<android.app.Notification$BigTextStyle: android.widget.RemoteViews makeBigContentView()> -> _SOURCE_
<android.telecom.Conference: void onConnectionAdded(android.telecom.Connection)> -> _SOURCE_
<android.app.admin.DevicePolicyKeyguardService: void onDestroy()> -> _SOURCE_
<android.net.IpSecTransform: java.lang.String toString()> -> _SOURCE_
<android.service.voice.VoiceInteractionSession$AssistState: android.app.assist.AssistContent getAssistContent()> -> _SOURCE_
<android.os.Parcel: boolean readBoolean()> -> _SOURCE_
<android.media.AudioDeviceInfo: void enforceValidAudioDeviceTypeIn(int)> -> _SOURCE_
<android.media.AudioTrack: int getPositionNotificationPeriod()> -> _SOURCE_
<android.content.pm.PackageManager: java.lang.String installStatusToString(int)> -> _SOURCE_
<android.media.browse.MediaBrowser: void getItem(java.lang.String,android.media.browse.MediaBrowser$ItemCallback)> -> _SOURCE_
<android.telephony.TelephonyManager: void setSimOperatorNumericForPhone(int,java.lang.String)> -> _SOURCE_
<android.media.tv.tuner.DemuxCapabilities: int getDemuxCount()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isProfileOwnerApp(java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.uicc.asn1.TagNotFoundException: int getTag()> -> _SOURCE_
<android.media.PlaybackParams: float getPitch()> -> _SOURCE_
<android.view.Display$HdrCapabilities: int[] getSupportedHdrTypes()> -> _SOURCE_
<android.print.PrintAttributes: android.print.PrintAttributes$MediaSize getMediaSize()> -> _SOURCE_
<android.hardware.display.BrightnessConfiguration$Builder: int getMaxCorrectionsByCategory()> -> _SOURCE_
<android.util.proto.ProtoStream: int getObjectIdFromToken(long)> -> _SOURCE_
<android.app.AlertDialog$Builder: android.app.AlertDialog show()> -> _SOURCE_
<android.sax.Element: java.lang.String toString()> -> _SOURCE_
<android.security.keystore.KeyInfo: java.lang.String[] getBlockModes()> -> _SOURCE_
<android.widget.TextView: android.text.style.URLSpan[] getUrls()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.util.List getInstantApps()> -> _SOURCE_
<java.util.stream.LongStream: java.util.stream.LongStream empty()> -> _SOURCE_
<android.telephony.SmsCbLocation: int getCid()> -> _SOURCE_
<android.media.MediaFormat: int getValueTypeForKey(java.lang.String)> -> _SOURCE_
<android.net.NetworkStats: java.lang.String roamingToString(int)> -> _SOURCE_
<android.app.ActivityManager: int checkUidPermission(java.lang.String,int)> -> _SOURCE_
<android.text.style.ScaleXSpan: int getSpanTypeIdInternal()> -> _SOURCE_
<android.media.MediaRouter2: android.media.MediaRouter2 getInstance(android.content.Context)> -> _SOURCE_
<android.media.AudioSystem: java.lang.String getInputDeviceName(int)> -> _SOURCE_
<android.view.textclassifier.TextClassification$Request: java.time.ZonedDateTime getReferenceTime()> -> _SOURCE_
<android.media.AudioFocusInfo: long getGen()> -> _SOURCE_
<android.security.keystore.recovery.RecoveryCertPath: android.security.keystore.recovery.RecoveryCertPath createRecoveryCertPath(java.security.cert.CertPath)> -> _SOURCE_
<android.os.connectivity.CellularBatteryStats: long getNumBytesTx()> -> _SOURCE_
<android.se.omapi.Session: android.se.omapi.Channel openBasicChannel(byte[],byte)> -> _SOURCE_
<android.media.AudioTrack: float getAudioDescriptionMixLeveldB()> -> _SOURCE_
<android.telecom.CallScreeningService$CallResponse: boolean getShouldScreenCallViaAudioProcessing()> -> _SOURCE_
<android.hardware.SerialPort: void open(android.os.ParcelFileDescriptor,int)> -> _SOURCE_
<android.service.euicc.DownloadSubscriptionResult: int getResolvableErrors()> -> _SOURCE_
<android.net.TrafficStats: long getUidTcpRxSegments(int)> -> _SOURCE_
<android.os.FileUtils: int translateModePosixToPfd(int)> -> _SOURCE_
<android.app.ApplicationPackageManager: android.content.pm.PackageInstaller getPackageInstaller()> -> _SOURCE_
<android.app.role.RoleControllerManager: void isRoleVisible(java.lang.String,java.util.concurrent.Executor,java.util.function.Consumer)> -> _SOURCE_
<android.graphics.text.MeasuredText: void getBounds(int,int,android.graphics.Rect)> -> _SOURCE_
<android.hardware.usb.UsbRequest: java.lang.Object getClientData()> -> _SOURCE_
<android.view.View: boolean isTextAlignmentResolved()> -> _SOURCE_
<android.media.audiopolicy.AudioMixingRule: boolean allowPrivilegedPlaybackCapture()> -> _SOURCE_
<android.hardware.biometrics.BiometricAuthenticator: boolean hasEnrolledTemplates(int)> -> _SOURCE_
<android.app.servertransaction.ClientTransaction: void dump(java.lang.String,java.io.PrintWriter)> -> _SOURCE_
<java.time.chrono.Chronology: java.time.chrono.ChronoLocalDate dateNow()> -> _SOURCE_
<android.app.Activity: int getVolumeControlStream()> -> _SOURCE_
<android.app.AppOpsManager: boolean isOpActive(java.lang.String,int,java.lang.String)> -> _SOURCE_
<android.app.StatusBarManager$DisableInfo: boolean areNotificationIconsDisabled()> -> _SOURCE_
<java.security.SecureRandom: java.security.Provider getProvider()> -> _SOURCE_
<android.hardware.camera2.params.HighSpeedVideoConfiguration: android.util.Range getFpsRange()> -> _SOURCE_
<android.app.usage.EventStats: long getTotalTime()> -> _SOURCE_
<android.os.storage.StorageManager: boolean isNonDefaultBlockEncrypted()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long getUahDischargeDeepDoze(int)> -> _SOURCE_
<android.net.TrafficStats: long getUidTcpTxSegments(int)> -> _SOURCE_
<android.service.autofill.AutofillFieldClassificationService$Scores: java.lang.String toString()> -> _SOURCE_
<android.animation.AnimatorListenerAdapter: void onAnimationPause(android.animation.Animator)> -> _SOURCE_
<android.app.NotificationManager: android.content.ComponentName getEffectsSuppressor()> -> _SOURCE_
<android.view.Surface: boolean isSingleBuffered()> -> _SOURCE_
<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: boolean perClusterTimesAvailable()> -> _SOURCE_
<android.telephony.ims.ImsCallProfile: boolean hasKnownUserIntentEmergency()> -> _SOURCE_
<android.media.tv.tuner.filter.IpFilterConfiguration: int getSrcPort()> -> _SOURCE_
<java.lang.Character: int toUpperCase(int)> -> _SOURCE_
<android.location.LocationManager: java.lang.String[] getBackgroundThrottlingWhitelist()> -> _SOURCE_
<android.hardware.camera2.legacy.LegacyExceptionUtils: int throwOnError(int)> -> _SOURCE_
<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: java.lang.String toString()> -> _SOURCE_
<android.app.AppOpsManager: boolean isListeningForOpNoted()> -> _SOURCE_
<android.app.prediction.AppTargetEvent: java.lang.String getLaunchLocation()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isSmsCapable()> -> _SOURCE_
<android.os.IncidentManager$PendingReport: android.net.Uri getUri()> -> _SOURCE_
<android.app.usage.NetworkStatsManager: android.app.usage.NetworkStats$Bucket querySummaryForUser(int,java.lang.String,long,long)> -> _SOURCE_
<android.os.VibrationEffect$Composed: java.lang.String toString()> -> _SOURCE_
<java.util.Date: int getHours()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: android.util.ArrayMap getJobStats()> -> _SOURCE_
<android.app.ActivityThread: void handleConfigurationChanged(android.content.res.Configuration)> -> _SOURCE_
<android.os.DeviceIdleManager: java.lang.String[] getSystemPowerWhitelist()> -> _SOURCE_
<android.telecom.Connection: java.lang.String getTelecomCallId()> -> _SOURCE_
<android.content.pm.ApplicationInfo: java.lang.String[] getAllApkPaths()> -> _SOURCE_
<android.os.UserManager: boolean hasBadge(int)> -> _SOURCE_
<java.io.StringWriter: java.lang.StringBuffer getBuffer()> -> _SOURCE_
<android.text.format.DateFormat: java.lang.CharSequence format(java.lang.CharSequence,java.util.Calendar)> -> _SOURCE_
<android.media.MediaCodecInfo$CodecCapabilities: java.lang.String getMimeType()> -> _SOURCE_
<android.app.ActivityManager: boolean getPackageAskScreenCompat(java.lang.String)> -> _SOURCE_
<android.graphics.drawable.DrawableContainer: void clearMutated()> -> _SOURCE_
<java.text.CollationElementIterator: int getMaxExpansion(int)> -> _SOURCE_
<android.bluetooth.BluetoothHeadsetClient: int getConnectionState(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<android.telephony.TelephonyManager: boolean getSmsReceiveCapableForPhone(int,boolean)> -> _SOURCE_
<android.media.AudioDeviceInfo: int getType()> -> _SOURCE_
<android.content.ContentProvider: void attachInfoForTesting(android.content.Context,android.content.pm.ProviderInfo)> -> _SOURCE_
<android.view.WindowAnimationFrameStats: java.lang.String toString()> -> _SOURCE_
<android.speech.tts.TtsEngines: java.util.List getEngines()> -> _SOURCE_
<android.hardware.camera2.params.MeteringRectangle: java.lang.String toString()> -> _SOURCE_
<android.app.contentsuggestions.SelectionsRequest: android.graphics.Point getInterestPoint()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.util.List getActiveAdminsAsUser(int)> -> _SOURCE_
<android.hardware.location.NanoAppBinary: byte[] getBinaryNoHeader()> -> _SOURCE_
<android.database.sqlite.SQLiteTokenizer: java.util.List tokenize(java.lang.String,int)> -> _SOURCE_
<android.util.MergedConfiguration: android.content.res.Configuration getOverrideConfiguration()> -> _SOURCE_
<android.view.textservice.SuggestionsInfo: int getSuggestionsAttributes()> -> _SOURCE_
<android.service.controls.actions.ControlAction: java.lang.String getTemplateId()> -> _SOURCE_
<android.provider.DeviceConfig$Properties: int getInt(java.lang.String,int)> -> _SOURCE_
<android.media.AudioTrack: int getAudioFormat()> -> _SOURCE_
<android.os.GraphicsEnvironment: android.os.GraphicsEnvironment getInstance()> -> _SOURCE_
<android.content.integrity.AppIntegrityManager: java.util.List getWhitelistedRuleProviders()> -> _SOURCE_
<com.android.internal.infra.WhitelistHelper: boolean isWhitelisted(java.lang.String)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getIsimIst()> -> _SOURCE_
<android.media.MediaCodecList: android.media.MediaCodecInfo getInfoFor(java.lang.String)> -> _SOURCE_
<android.net.UrlQuerySanitizer: android.net.UrlQuerySanitizer$ValueSanitizer getUnregisteredParameterValueSanitizer()> -> _SOURCE_
<android.telephony.SmsCbMessage: int getMessagePriority()> -> _SOURCE_
<android.os.Debug$MemoryInfo: int getTotalUss()> -> _SOURCE_
<android.hardware.display.ColorDisplayManager: boolean isDisplayWhiteBalanceAvailable(android.content.Context)> -> _SOURCE_
<android.telephony.CellIdentity: int getType()> -> _SOURCE_
<android.bluetooth.BluetoothGattService: boolean isAdvertisePreferred()> -> _SOURCE_
<android.app.assist.AssistContent: android.content.ClipData getClipData()> -> _SOURCE_
<android.app.WindowConfiguration: boolean canReceiveKeys()> -> _SOURCE_
<android.service.autofill.FillEventHistory$Event: java.util.Map getChangedFields()> -> _SOURCE_
<android.service.notification.ZenPolicy: java.lang.String toString()> -> _SOURCE_
<android.service.notification.StatusBarNotification: java.lang.String getGroup()> -> _SOURCE_
<android.view.contentcapture.ViewNode: java.lang.String getHintIdEntry()> -> _SOURCE_
<android.os.VibrationEffect$OneShot: long getDuration()> -> _SOURCE_
<android.app.Notification$MessagingStyle: int getConversationType()> -> _SOURCE_
<android.content.SyncResult: java.lang.String toDebugString()> -> _SOURCE_
<android.media.AudioManager: int getDeviceVolumeBehavior(android.media.AudioDeviceAttributes)> -> _SOURCE_
<java.lang.Integer: java.lang.String toBinaryString(int)> -> _SOURCE_
<javax.crypto.spec.PBEParameterSpec: int getIterationCount()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isRttSupported()> -> _SOURCE_
<java.lang.StackTraceElement: java.lang.String getFileName()> -> _SOURCE_
<android.net.LocalSocket: android.net.LocalSocketAddress getLocalSocketAddress()> -> _SOURCE_
<com.android.internal.os.ProcessCpuTracker: int getLastIoWaitTime()> -> _SOURCE_
<java.nio.file.FileSystemException: java.lang.String getMessage()> -> _SOURCE_
<android.app.SearchableInfo$ActionKeyInfo: java.lang.String getQueryActionMsg()> -> _SOURCE_
<android.telecom.Voicemail: java.lang.String getSourceData()> -> _SOURCE_
<android.hardware.location.NanoAppBinary: int getNanoAppVersion()> -> _SOURCE_
<android.telephony.ims.feature.MmTelFeature$Listener: void onIncomingCall(com.android.ims.internal.IImsCallSession,android.os.Bundle)> -> _SOURCE_
<android.content.pm.parsing.PackageInfoWithoutStateUtils: int appInfoPrivateFlags(android.content.pm.parsing.ParsingPackageRead)> -> _SOURCE_
<android.view.WindowInsets: boolean shouldAlwaysConsumeSystemBars()> -> _SOURCE_
<android.app.ApplicationPackageManager: android.content.Intent getLeanbackLaunchIntentForPackage(java.lang.String)> -> _SOURCE_
<android.media.ExifInterface: boolean hasAttribute(java.lang.String)> -> _SOURCE_
<android.telephony.ModemActivityInfo$TransmitPower: android.util.Range getPowerRangeInDbm()> -> _SOURCE_
<android.content.pm.PackageInstaller$SessionInfo: int getStagedSessionErrorCode()> -> _SOURCE_
<android.telephony.SubscriptionInfo: java.util.List getHplmns()> -> _SOURCE_
<android.media.RoutingSessionInfo: int getVolumeHandling()> -> _SOURCE_
<android.media.AudioManager: boolean isMusicActiveRemotely()> -> _SOURCE_
<android.service.controls.templates.ControlTemplate: android.service.controls.templates.ControlTemplate getErrorTemplate()> -> _SOURCE_
<android.net.TrafficStats: long getMobileRxPackets()> -> _SOURCE_
<android.telephony.data.DataCallResponse: int getMtuV4()> -> _SOURCE_
<android.net.LinkProperties: boolean hasIPv4DnsServer()> -> _SOURCE_
<android.os.Bundle: java.util.ArrayList getParcelableArrayList(java.lang.String)> -> _SOURCE_
<android.hardware.display.DisplayManagerGlobal: java.util.List getAmbientBrightnessStats()> -> _SOURCE_
<java.net.URL: java.io.InputStream openStream()> -> _SOURCE_
<java.util.SimpleTimeZone: boolean useDaylightTime()> -> _SOURCE_
<java.security.spec.PKCS8EncodedKeySpec: byte[] getEncoded()> -> _SOURCE_
<android.app.BroadcastOptions: boolean allowsBackgroundActivityStarts()> -> _SOURCE_
<android.os.VibrationAttributes: int getUsage()> -> _SOURCE_
<android.os.BatterySaverPolicyConfig: boolean getDeferFullBackup()> -> _SOURCE_
<android.telephony.euicc.EuiccInfo: java.lang.String getOsVersion()> -> _SOURCE_
<android.security.KeyPairGeneratorSpec: java.math.BigInteger getSerialNumber()> -> _SOURCE_
<android.os.FileUtils: boolean isValidExtFilename(java.lang.String)> -> _SOURCE_
<android.animation.PathKeyframes: android.animation.Keyframes$FloatKeyframes createXFloatKeyframes()> -> _SOURCE_
<android.service.notification.NotifyingApp: java.lang.String toString()> -> _SOURCE_
<java.nio.file.InvalidPathException: java.lang.String getMessage()> -> _SOURCE_
<android.os.UserManager: boolean isUserTypeGuest(java.lang.String)> -> _SOURCE_
<android.net.NetworkStats: int findIndexHinted(java.lang.String,int,int,int,int,int,int,int)> -> _SOURCE_
<android.content.ContentResolver: android.content.SyncAdapterType[] getSyncAdapterTypesAsUser(int)> -> _SOURCE_
<android.view.accessibility.AccessibilityRecord: int getItemCount()> -> _SOURCE_
<android.provider.Contacts$Presence: int getPresenceIconResourceId(int)> -> _SOURCE_
<java.time.chrono.Chronology: java.time.chrono.Chronology ofLocale(java.util.Locale)> -> _SOURCE_
<android.hardware.soundtrigger.KeyphraseMetadata: boolean supportsPhrase(java.lang.String)> -> _SOURCE_
<android.print.PrinterInfo: android.app.PendingIntent getInfoIntent()> -> _SOURCE_
<android.telecom.TelecomManager: void clearAccountsForPackage(java.lang.String)> -> _SOURCE_
<android.net.IpSecManager$UdpEncapsulationSocket: java.io.FileDescriptor getFileDescriptor()> -> _SOURCE_
<android.os.ServiceSpecificException: java.lang.String toString()> -> _SOURCE_
<android.content.pm.UserInfo: java.lang.String getDefaultUserType(int)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getDeviceId()> -> _SOURCE_
<java.io.File: long lastModified()> -> _SOURCE_
<android.content.res.AssetFileDescriptor: android.os.Bundle getExtras()> -> _SOURCE_
<android.hardware.soundtrigger.SoundTrigger$KeyphraseSoundModel: android.hardware.soundtrigger.SoundTrigger$Keyphrase[] getKeyphrases()> -> _SOURCE_
<android.hardware.location.ContextHubTransaction: int getType()> -> _SOURCE_
<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getDrawable(java.lang.String,int,android.content.pm.ApplicationInfo)> -> _SOURCE_
<android.telephony.ims.stub.ImsUtImplBase: int queryColr()> -> _SOURCE_
<android.net.ConnectivityManager: boolean requestBandwidthUpdate(android.net.Network)> -> _SOURCE_
<android.security.KeyStore: android.security.KeyStoreException getKeyStoreException(int)> -> _SOURCE_
<android.mtp.MtpStorageManager: boolean endMoveObject(android.mtp.MtpStorageManager$MtpObject,android.mtp.MtpStorageManager$MtpObject,java.lang.String,boolean)> -> _SOURCE_
<android.view.KeyEvent: java.lang.String keyCodeToString(int)> -> _SOURCE_
<android.net.NetworkAgent: void setLegacyExtraInfo(java.lang.String)> -> _SOURCE_
<android.media.tv.tuner.filter.TsFilterConfiguration$Builder: android.media.tv.tuner.filter.TsFilterConfiguration build()> -> _SOURCE_
<javax.crypto.Mac: java.security.Provider getProvider()> -> _SOURCE_
<android.telephony.ClosedSubscriberGroupInfo: boolean getCsgIndicator()> -> _SOURCE_
<android.app.assist.AssistStructure: int getFlags()> -> _SOURCE_
<android.app.SearchableInfo: java.lang.String getSuggestPath()> -> _SOURCE_
<android.app.backup.BackupManager: long getAvailableRestoreToken(java.lang.String)> -> _SOURCE_
<android.view.PointerIcon: int getType()> -> _SOURCE_
<android.telecom.Connection$RttTextStream: android.os.ParcelFileDescriptor getFdToInCall()> -> _SOURCE_
<android.mtp.MtpStorage: boolean isRemovable()> -> _SOURCE_
<android.media.tv.TvInputService: android.media.tv.TvInputInfo onHdmiDeviceAdded(android.hardware.hdmi.HdmiDeviceInfo)> -> _SOURCE_
<android.app.admin.DnsEvent: java.lang.String getHostname()> -> _SOURCE_
<android.widget.OverScroller: int getCurrY()> -> _SOURCE_
<android.hardware.camera2.CameraCaptureSession$CaptureCallback: void onCaptureSequenceAborted(android.hardware.camera2.CameraCaptureSession,int)> -> _SOURCE_
<com.android.internal.telephony.cdma.sms.UserData: java.lang.String toString()> -> _SOURCE_
<android.os.storage.StorageVolume: java.lang.String getUserLabel()> -> _SOURCE_
<android.media.MediaRoute2Info: int getVolumeHandling()> -> _SOURCE_
<java.io.ObjectStreamClass: java.lang.String toString()> -> _SOURCE_
<android.view.ViewGroup: boolean isTransitionGroup()> -> _SOURCE_
<android.app.JobSchedulerImpl: android.app.job.JobInfo getPendingJob(int)> -> _SOURCE_
<com.android.ims.internal.uce.presence.PresCmdStatus: int getUserData()> -> _SOURCE_
<android.content.ContentValues: java.util.Set keySet()> -> _SOURCE_
<java.time.LocalTime: int getNano()> -> _SOURCE_
<android.os.Environment: java.io.File[] buildExternalStorageAppObbDirs(java.lang.String)> -> _SOURCE_
<android.app.NotificationManager$Policy: boolean allowSystem()> -> _SOURCE_
<android.telephony.CellIdentityLte: java.util.Set getAdditionalPlmns()> -> _SOURCE_
<android.widget.ActionMenuPresenter: boolean showOverflowMenu()> -> _SOURCE_
<android.content.IntentFilter: boolean hasDataType(java.lang.String)> -> _SOURCE_
<android.print.PrintDocumentInfo: java.lang.String toString()> -> _SOURCE_
<android.hardware.biometrics.BiometricAuthenticator$Identifier: java.lang.CharSequence getName()> -> _SOURCE_
<android.hardware.lights.LightsManager: java.util.List getLights()> -> _SOURCE_
<android.app.NotificationManager$Policy: boolean showFullScreenIntents()> -> _SOURCE_
<android.app.PendingIntent: android.os.IBinder getWhitelistToken()> -> _SOURCE_
<android.media.tv.tuner.DemuxCapabilities: long getSectionFilterLength()> -> _SOURCE_
<android.media.audiopolicy.AudioPolicy: boolean isFocusPolicy()> -> _SOURCE_
<android.telephony.ims.ImsCallSession: com.android.ims.internal.IImsCallSession getSession()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: com.android.internal.os.BatteryStatsImpl$Uid$Pkg getPackageStatsLocked(java.lang.String)> -> _SOURCE_
<android.media.audiofx.Equalizer$Settings: java.lang.String toString()> -> _SOURCE_
<android.provider.Downloads$Impl: boolean isStatusServerError(int)> -> _SOURCE_
<android.location.GpsSatellite: boolean usedInFix()> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: int connectionPolicyToPriority(int)> -> _SOURCE_
<android.telephony.TelephonyManager: android.telephony.IccOpenLogicalChannelResponse iccOpenLogicalChannel(java.lang.String)> -> _SOURCE_
<android.net.TrafficStats: long getUidUdpTxPackets(int)> -> _SOURCE_
<android.hardware.display.WifiDisplay: java.lang.String getDeviceAddress()> -> _SOURCE_
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: java.util.Set getHighSpeedVideoFpsRanges()> -> _SOURCE_
<android.media.tv.TvContract: android.net.Uri buildWatchedProgramUri(long)> -> _SOURCE_
<java.util.concurrent.ConcurrentLinkedQueue: boolean isEmpty()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isDataAllowedInVoiceCall()> -> _SOURCE_
<android.hardware.display.DeviceProductInfo: android.hardware.display.DeviceProductInfo$ManufactureDate getManufactureDate()> -> _SOURCE_
<android.os.BatterySaverPolicyConfig: boolean getEnableNightMode()> -> _SOURCE_
<android.drm.DrmManagerClient: int checkRightsStatus(android.net.Uri)> -> _SOURCE_
<android.telephony.CellIdentityGsm: java.util.Set getAdditionalPlmns()> -> _SOURCE_
<com.android.internal.os.Zygote: java.lang.String getConfigurationProperty(java.lang.String,java.lang.String)> -> _SOURCE_
<android.app.NotificationChannel: void dumpDebug(android.util.proto.ProtoOutputStream,long)> -> _SOURCE_
<android.telecom.TelecomManager: boolean handleMmi(java.lang.String)> -> _SOURCE_
<android.os.ParcelFileDescriptor: java.lang.String toString()> -> _SOURCE_
<android.view.autofill.AutofillValue: java.lang.String toString()> -> _SOURCE_
<com.android.internal.util.TokenBucket: int capacity()> -> _SOURCE_
<android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int)> -> _SOURCE_
<java.time.temporal.WeekFields: int getMinimalDaysInFirstWeek()> -> _SOURCE_
<android.app.SearchableInfo: java.lang.String getSuggestIntentAction()> -> _SOURCE_
<android.security.identity.AccessControlProfile$Builder: android.security.identity.AccessControlProfile build()> -> _SOURCE_
<android.telephony.CellSignalStrengthWcdma: int getRssi()> -> _SOURCE_
<android.webkit.WebIconDatabase: android.webkit.WebIconDatabase getInstance()> -> _SOURCE_
<android.view.WindowManager$LayoutParams: java.lang.String toString(java.lang.String)> -> _SOURCE_
<java.time.OffsetTime: java.time.OffsetTime now(java.time.Clock)> -> _SOURCE_
<android.hardware.radio.ProgramSelector: android.hardware.radio.ProgramSelector$Identifier[] getSecondaryIds()> -> _SOURCE_
<android.mtp.MtpObjectInfo: long getDateModified()> -> _SOURCE_
<com.android.internal.statusbar.StatusBarIcon: java.lang.String toString()> -> _SOURCE_
<android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl: android.hardware.camera2.CameraDevice getDevice()> -> _SOURCE_
<android.app.Notification: boolean isBubbleNotification()> -> _SOURCE_
<android.location.GpsMeasurementsEvent: java.util.Collection getMeasurements()> -> _SOURCE_
<android.telephony.mbms.MbmsTempFileProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SOURCE_
<android.view.contentcapture.ContentCaptureSessionId: java.lang.String toString()> -> _SOURCE_
<android.media.session.MediaController$PlaybackInfo: java.lang.String toString()> -> _SOURCE_
<android.drm.DrmSupportInfo: void addMimeType(java.lang.String)> -> _SOURCE_
<android.app.ApplicationPackageManager: java.lang.String getDefaultTextClassifierPackageName()> -> _SOURCE_
<android.security.net.config.NetworkSecurityTrustManager: void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String,java.net.Socket)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: android.content.ComponentName getGlobalProxyAdmin()> -> _SOURCE_
<android.hardware.Camera$Parameters: int getMaxExposureCompensation()> -> _SOURCE_
<android.net.Uri: java.lang.String toString()> -> _SOURCE_
<java.text.DateFormat: java.util.TimeZone getTimeZone()> -> _SOURCE_
<android.printservice.PrintJob: int getAdvancedIntOption(java.lang.String)> -> _SOURCE_
<java.io.FileInputStream: java.io.FileDescriptor getFD()> -> _SOURCE_
<android.os.Environment$UserEnvironment: java.io.File[] buildExternalStorageAppCacheDirs(java.lang.String)> -> _SOURCE_
<android.os.MemoryFile: java.io.OutputStream getOutputStream()> -> _SOURCE_
<android.telephony.CellSignalStrengthTdscdma: int getDbm()> -> _SOURCE_
<android.net.lowpan.LowpanChannelInfo: java.lang.String toString()> -> _SOURCE_
<android.media.AudioManager: int getVibrateSetting(int)> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isEmergencyAssistanceEnabled()> -> _SOURCE_
<android.telephony.SubscriptionInfo: java.lang.CharSequence getCarrierName()> -> _SOURCE_
<android.hardware.camera2.CameraManager: void registerAvailabilityCallback(android.hardware.camera2.CameraManager$AvailabilityCallback,android.os.Handler)> -> _SOURCE_
<android.location.LocationManager: boolean isProviderEnabledForUser(java.lang.String,android.os.UserHandle)> -> _SOURCE_
<android.content.Context: boolean isAutofillCompatibilityEnabled()> -> _SOURCE_
<android.hardware.camera2.legacy.RequestHolder: int getRequestId()> -> _SOURCE_
<android.service.resolver.ResolverTarget: float getRecencyScore()> -> _SOURCE_
<android.app.timezone.RulesState: android.app.timezone.DistroRulesVersion getStagedDistroRulesVersion()> -> _SOURCE_
<android.content.res.Resources: java.lang.String getResourceEntryName(int)> -> _SOURCE_
<android.os.IncidentManager$IncidentReport: int describeContents()> -> _SOURCE_
<java.security.cert.X509CRLSelector: java.util.Collection getIssuers()> -> _SOURCE_
<android.hardware.hdmi.HdmiControlManager: java.util.List getConnectedDevicesList()> -> _SOURCE_
<android.content.pm.SharedLibraryInfo: long getLongVersion()> -> _SOURCE_
<android.util.KeyValueListParser$StringValue: java.lang.String getKey()> -> _SOURCE_
<android.view.contentcapture.ContentCaptureEvent: android.graphics.Insets getInsets()> -> _SOURCE_
<android.media.tv.TvInputManager: java.util.List getTvInputList()> -> _SOURCE_
<android.hardware.Sensor: int getFifoReservedEventCount()> -> _SOURCE_
<android.service.notification.ZenPolicy: int getVisualEffectBadge()> -> _SOURCE_
<android.content.pm.dex.DexMetadataHelper: java.util.Map buildPackageApkToDexMetadataMap(java.util.List)> -> _SOURCE_
<android.net.NetworkRecommendationProvider: android.os.IBinder getBinder()> -> _SOURCE_
<android.app.Notification$MessagingStyle: java.lang.CharSequence getUserDisplayName()> -> _SOURCE_
<android.hardware.location.ContextHubManager: android.hardware.location.NanoAppInstanceInfo getNanoAppInstanceInfo(int)> -> _SOURCE_
<java.text.SimpleDateFormat: java.lang.String toLocalizedPattern()> -> _SOURCE_
<android.os.RecoverySystem: void verifyPackage(java.io.File,android.os.RecoverySystem$ProgressListener,java.io.File)> -> _SOURCE_
<java.util.UnknownFormatFlagsException: java.lang.String getMessage()> -> _SOURCE_
<android.view.InputDevice: android.os.Vibrator getVibrator()> -> _SOURCE_
<android.hardware.SensorEventCallback: void onSensorChanged(android.hardware.SensorEvent)> -> _SOURCE_
<android.hardware.camera2.marshal.MarshalHelpers: int checkNativeType(int)> -> _SOURCE_
<android.telephony.CellSignalStrengthLte: int getCqi()> -> _SOURCE_
<android.telephony.TelephonyManager$UssdResponseCallback: void onReceiveUssdResponse(android.telephony.TelephonyManager,java.lang.String,java.lang.CharSequence)> -> _SOURCE_
<android.net.InetAddresses: boolean isNumericAddress(java.lang.String)> -> _SOURCE_
<android.app.RemoteInput: java.lang.String getResultKey()> -> _SOURCE_
<android.webkit.WebViewFactory: int onWebViewProviderChanged(android.content.pm.PackageInfo)> -> _SOURCE_
<java.net.HttpCookie: java.lang.String getPortlist()> -> _SOURCE_
<android.widget.RadialTimePickerView: int getCurrentMinute()> -> _SOURCE_
<android.app.VoiceInteractor: boolean[] supportsCommands(java.lang.String[])> -> _SOURCE_
<android.app.VoiceInteractor$PickOptionRequest$Option: android.os.Bundle getExtras()> -> _SOURCE_
<android.app.servertransaction.ClientTransaction: android.os.IBinder getActivityToken()> -> _SOURCE_
<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getActivityIcon(android.content.Intent)> -> _SOURCE_
<android.view.View: android.view.TouchDelegate getTouchDelegate()> -> _SOURCE_
<android.app.PropertyInvalidatedCache: java.util.ArrayList getActiveCorks()> -> _SOURCE_
<android.telephony.ims.stub.ImsUtImplBase: int updateCLIR(int)> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isApplicationOnUicc(int)> -> _SOURCE_
<android.content.Loader: boolean isReset()> -> _SOURCE_
<android.location.GnssMeasurementCorrections: float getEnvironmentBearingDegrees()> -> _SOURCE_
<com.android.internal.util.SyncResultReceiver: java.lang.String getStringResult()> -> _SOURCE_
<android.telephony.ims.stub.ImsUtImplBase: int queryCOLR()> -> _SOURCE_
<android.provider.VoicemailContract$Voicemails: android.net.Uri buildSourceUri(java.lang.String)> -> _SOURCE_
<android.app.usage.UsageStatsManager: void setAppStandbyBucket(java.lang.String,int)> -> _SOURCE_
<android.app.WallpaperInfo: boolean getShowMetadataInPreview()> -> _SOURCE_
<android.telephony.ims.ImsCallProfile: int getEmergencyServiceCategories()> -> _SOURCE_
<android.hardware.face.FaceManager: java.lang.String getErrorString(android.content.Context,int,int)> -> _SOURCE_
<android.os.Environment: java.io.File getVendorDirectory()> -> _SOURCE_
<android.view.KeyEvent: int keyCodeFromString(java.lang.String)> -> _SOURCE_
<com.android.internal.util.StateMachine: android.os.Message obtainMessage(int,int,int)> -> _SOURCE_
<android.bluetooth.BluetoothHeadsetClient: boolean getAudioRouteAllowed(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<android.content.ComponentName: java.lang.String getPackageName()> -> _SOURCE_
<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: java.lang.String toString()> -> _SOURCE_
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)> -> _SOURCE_
<android.telecom.Connection: java.lang.String capabilitiesToString(int)> -> _SOURCE_
<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()> -> _SOURCE_
<android.security.keymaster.KeyAttestationPackageInfo: java.lang.String getPackageName()> -> _SOURCE_
<android.location.LocationRequest: android.location.LocationRequest createFromDeprecatedCriteria(android.location.Criteria,long,float,boolean)> -> _SOURCE_
<android.telephony.mbms.ServiceInfo: java.util.Date getSessionStartTime()> -> _SOURCE_
<android.hardware.input.KeyboardLayout: java.lang.String getDescriptor()> -> _SOURCE_
<android.media.MediaRouter$RouteInfo: java.lang.CharSequence getDescription()> -> _SOURCE_
<android.view.View: android.view.WindowId getWindowId()> -> _SOURCE_
<android.provider.SyncStateContract$Helpers: android.content.ContentProviderOperation newUpdateOperation(android.net.Uri,byte[])> -> _SOURCE_
<android.content.pm.ShortcutInfo: java.lang.String getTextResName()> -> _SOURCE_
<android.telephony.CallQuality: java.lang.String toString()> -> _SOURCE_
<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()> -> _SOURCE_
<java.text.RuleBasedCollator: java.lang.String getRules()> -> _SOURCE_
<android.location.Criteria: java.lang.String toString()> -> _SOURCE_
<android.telephony.ims.ImsSsInfo: int getClirInterrogationStatus()> -> _SOURCE_
<android.content.pm.SuspendDialogInfo: java.lang.String getDialogMessage()> -> _SOURCE_
<android.filterfw.core.SimpleFrame: java.lang.String toString()> -> _SOURCE_
<android.media.Ringtone: boolean isLooping()> -> _SOURCE_
<javax.security.auth.x500.X500Principal: java.lang.String toString()> -> _SOURCE_
<android.media.tv.TvInputManager$SessionCallback: void onSessionReleased(android.media.tv.TvInputManager$Session)> -> _SOURCE_
<java.time.LocalDateTime: int getNano()> -> _SOURCE_
<android.text.Annotation: int getSpanTypeIdInternal()> -> _SOURCE_
<android.mtp.MtpObjectInfo: int getSequenceNumber()> -> _SOURCE_
<android.media.tv.tuner.filter.SectionSettingsWithSectionBits: byte[] getFilterBytes()> -> _SOURCE_
<jdk.net.SocketFlow: int priority()> -> _SOURCE_
<android.companion.AssociationRequest: boolean isSingleDevice()> -> _SOURCE_
<android.text.style.TtsSpan$ElectronicBuilder: android.text.style.TtsSpan$ElectronicBuilder setEmailArguments(java.lang.String,java.lang.String)> -> _SOURCE_
<com.android.server.job.JobSchedulerInternal$JobStorePersistStats: java.lang.String toString()> -> _SOURCE_
<android.media.VolumeShaper$Configuration: int getType()> -> _SOURCE_
<android.companion.AssociationRequest$Builder: android.companion.AssociationRequest build()> -> _SOURCE_
<android.media.tv.tuner.filter.SectionEvent: int getTableId()> -> _SOURCE_
<android.telephony.NetworkRegistrationInfo: int getTransportType()> -> _SOURCE_
<android.os.UserManager: long getSerialNumberForUser(android.os.UserHandle)> -> _SOURCE_
<android.media.MediaRouter2$TransferCallback: void onTransfer(android.media.MediaRouter2$RoutingController,android.media.MediaRouter2$RoutingController)> -> _SOURCE_
<android.view.inputmethod.InputMethodManager: void notifyUserAction()> -> _SOURCE_
<java.nio.charset.CharsetDecoder: java.lang.String replacement()> -> _SOURCE_
<android.media.RoutingSessionInfo: java.lang.String getProviderId()> -> _SOURCE_
<android.hardware.hdmi.HdmiControlServiceWrapper: void setSystemAudioMute(boolean)> -> _SOURCE_
<com.android.internal.os.BinderCallsStats$UidEntry: java.util.Collection getCallStatsList()> -> _SOURCE_
<android.widget.ViewAnimator: android.view.animation.Animation getInAnimation()> -> _SOURCE_
<android.view.ScrollCaptureTarget: int getHint()> -> _SOURCE_
<java.util.zip.ZipEntry: java.lang.String toString()> -> _SOURCE_
<android.graphics.pdf.PdfRenderer: int getPageCount()> -> _SOURCE_
<android.bluetooth.BluetoothA2dp: boolean isA2dpPlaying(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<android.os.connectivity.WifiBatteryStats: long getTxTimeMillis()> -> _SOURCE_
<android.renderscript.ProgramFragment$Builder: android.renderscript.ProgramFragment create()> -> _SOURCE_
<android.os.UserManager: java.util.List getProfiles(int)> -> _SOURCE_
<android.webkit.WebViewFactory: int loadWebViewNativeLibraryFromPackage(java.lang.String,java.lang.ClassLoader)> -> _SOURCE_
<android.telephony.ims.ImsSsData: int getTeleserviceType()> -> _SOURCE_
<android.bluetooth.BluetoothHeadset: int getConnectionPolicy(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: int getPhoneOnCount(int)> -> _SOURCE_
<com.android.ims.internal.uce.options.OptionsCmdStatus: int getUserData()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: android.os.BatteryStats$ControllerActivityCounter getBluetoothControllerActivity()> -> _SOURCE_
<android.os.Build: java.util.List getFingerprintedPartitions()> -> _SOURCE_
<android.content.ContentValues: int size()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: void updateBluetoothStateLocked(android.bluetooth.BluetoothActivityEnergyInfo)> -> _SOURCE_
<android.os.UserManager$CheckedUserOperationException: int getUserOperationResult()> -> _SOURCE_
<android.media.MicrophoneInfo: int getInternalDeviceType()> -> _SOURCE_
<android.app.AppOpsManager$OpEventProxyInfo: java.lang.String getAttributionTag()> -> _SOURCE_
<android.media.MediaRouter$RouteCategory: boolean isGroupable()> -> _SOURCE_
<java.net.InetSocketAddress: java.lang.String toString()> -> _SOURCE_
<com.android.internal.telephony.SmsMessageBase: java.lang.String getEmailBody()> -> _SOURCE_
<java.net.URI: java.lang.String getQuery()> -> _SOURCE_
<android.service.autofill.SaveInfo: java.lang.CharSequence getDescription()> -> _SOURCE_
<javax.crypto.spec.OAEPParameterSpec: java.security.spec.AlgorithmParameterSpec getMGFParameters()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: int getPasswordMinimumLetters(android.content.ComponentName,int)> -> _SOURCE_
<java.lang.reflect.Type: java.lang.String getTypeName()> -> _SOURCE_
<android.telephony.ims.RcsContactUceCapability: android.net.Uri getServiceUri(long)> -> _SOURCE_
<android.telephony.data.DataProfile: int getMaxConnections()> -> _SOURCE_
<java.util.UnknownFormatConversionException: java.lang.String getMessage()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isProvisioningAllowed(java.lang.String)> -> _SOURCE_
<android.media.MediaMetadataRetriever: android.graphics.Bitmap getImageAtIndex(int,android.media.MediaMetadataRetriever$BitmapParams)> -> _SOURCE_
<android.database.DatabaseUtils$InsertHelper: void bindNull(int)> -> _SOURCE_
<android.os.storage.StorageManager: long getPrimaryStorageSize()> -> _SOURCE_
<android.media.AudioTrack: android.media.AudioDeviceInfo getRoutedDevice()> -> _SOURCE_
<android.service.autofill.AutofillFieldClassificationService: float[][] onGetScores(java.lang.String,android.os.Bundle,java.util.List,java.util.List)> -> _SOURCE_
<android.telephony.SubscriptionManager: int setDisplayNumber(java.lang.String,int)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: android.os.BatteryStats$LevelStepTracker getChargeLevelStepTracker()> -> _SOURCE_
<java.lang.reflect.Modifier: int parameterModifiers()> -> _SOURCE_
<android.location.GpsMeasurement: boolean hasCodePhaseInChips()> -> _SOURCE_
<android.media.AudioFocusRequest: android.media.AudioManager$OnAudioFocusChangeListener getOnAudioFocusChangeListener()> -> _SOURCE_
<android.widget.TableRow: android.view.View getVirtualChildAt(int)> -> _SOURCE_
<com.android.ims.internal.uce.common.CapInfo: boolean isMmtelCallComposerSupported()> -> _SOURCE_
<android.content.ContentProvider: android.content.pm.PathPermission[] getPathPermissions()> -> _SOURCE_
<android.renderscript.ProgramVertex: android.renderscript.Element getInput(int)> -> _SOURCE_
<android.app.VoiceInteractor: android.app.VoiceInteractor$Request[] getActiveRequests()> -> _SOURCE_
<android.telecom.ConnectionRequest: boolean isAdhocConferenceCall()> -> _SOURCE_
<java.net.URLConnection: java.util.Map getHeaderFields()> -> _SOURCE_
<android.telecom.CallerInfo: java.lang.String toString()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: android.os.Bundle getUserRestrictions(android.content.ComponentName)> -> _SOURCE_
<android.location.LocationManager: void invalidateLocalLocationEnabledCaches()> -> _SOURCE_
<android.app.admin.DeviceAdminReceiver: void onSecurityLogsAvailable(android.content.Context,android.content.Intent)> -> _SOURCE_
<com.android.internal.widget.LockPatternUtils: boolean isLockPatternEnabled(int)> -> _SOURCE_
<android.service.autofill.SaveInfo: android.service.autofill.InternalSanitizer[] getSanitizerKeys()> -> _SOURCE_
<android.hardware.radio.RadioManager$ModuleProperties: boolean isCaptureSupported()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getCdmaMin()> -> _SOURCE_
<android.bluetooth.le.ScanResult: int getSecondaryPhy()> -> _SOURCE_
<android.content.pm.LauncherApps: boolean isPackageEnabled(java.lang.String,android.os.UserHandle)> -> _SOURCE_
<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.SSLSocketFactory getSocketFactory()> -> _SOURCE_
<android.net.Proxy: int getDefaultPort()> -> _SOURCE_
<android.telecom.CallerInfo: android.telecom.CallerInfo getCallerInfo(android.content.Context,java.lang.String,int)> -> _SOURCE_
<android.hardware.usb.UsbPortStatus: int getContaminantProtectionStatus()> -> _SOURCE_
<android.bluetooth.BluetoothAudioConfig: int getSampleRate()> -> _SOURCE_
<android.os.UserManager: boolean isSplitSystemUser()> -> _SOURCE_
<android.net.http.SslCertificate: java.lang.String getValidNotBefore()> -> _SOURCE_
<android.telecom.PhoneAccount: android.telecom.PhoneAccountHandle getAccountHandle()> -> _SOURCE_
<java.util.zip.ZipEntry: byte[] getExtra()> -> _SOURCE_
<android.telephony.PhysicalChannelConfig$Builder: android.telephony.PhysicalChannelConfig build()> -> _SOURCE_
<android.telecom.RemoteConference: java.util.List getConferenceableConnections()> -> _SOURCE_
<android.hardware.location.NanoApp: int[] getNeededSensors()> -> _SOURCE_
<android.renderscript.Sampler: android.renderscript.Sampler$Value getMagnification()> -> _SOURCE_
<android.net.LinkQualityInfo: int getTheoreticalRxBandwidth()> -> _SOURCE_
<android.nfc.Tag: android.nfc.INfcTag getTagService()> -> _SOURCE_
<android.database.DatabaseUtils: int findRowIdColumnIndex(java.lang.String[])> -> _SOURCE_
<android.database.DatabaseUtils: long longForQuery(android.database.sqlite.SQLiteStatement,java.lang.String[])> -> _SOURCE_
<android.hardware.camera2.CaptureRequest: java.util.List getKeys()> -> _SOURCE_
<android.telephony.euicc.EuiccCardManager: void requestAllProfiles(java.lang.String,java.util.concurrent.Executor,android.telephony.euicc.EuiccCardManager$ResultCallback)> -> _SOURCE_
<android.media.MediaCodec$BufferInfo: android.media.MediaCodec$BufferInfo dup()> -> _SOURCE_
<android.hardware.location.GeofenceHardwareMonitorEvent: int getMonitoringType()> -> _SOURCE_
<android.util.LruCache: java.util.Map snapshot()> -> _SOURCE_
<android.nfc.dta.NfcDta: boolean disableServer()> -> _SOURCE_
<java.lang.Throwable: java.lang.String getMessage()> -> _SOURCE_
<android.location.GnssReflectingPlane: double getLatitudeDegrees()> -> _SOURCE_
<android.content.ContentProvider: android.content.ContentProvider coerceToLocalContentProvider(android.content.IContentProvider)> -> _SOURCE_
<android.service.attention.AttentionService: android.os.IBinder onBind(android.content.Intent)> -> _SOURCE_
<android.widget.SlidingDrawer: android.view.View getContent()> -> _SOURCE_
<com.android.internal.os.KernelCpuProcStringReader$ProcFileIterator: boolean hasNextLine()> -> _SOURCE_
<android.widget.TextView: java.lang.String getFontFeatureSettings()> -> _SOURCE_
<android.app.ResourcesManager: void dump(java.lang.String,java.io.PrintWriter)> -> _SOURCE_
<android.os.SharedMemory: int getFd()> -> _SOURCE_
<android.net.LinkProperties: boolean isIdenticalDnses(android.net.LinkProperties)> -> _SOURCE_
<android.os.StrictMode: boolean vmClosableObjectLeaksEnabled()> -> _SOURCE_
<android.telephony.SubscriptionManager: java.util.List getSelectableSubscriptionInfoList()> -> _SOURCE_
<java.lang.Package: java.lang.String toString()> -> _SOURCE_
<android.content.ContextWrapper: java.lang.ClassLoader getClassLoader()> -> _SOURCE_
<android.hardware.usb.UsbManager: void grantPermission(android.hardware.usb.UsbDevice,int)> -> _SOURCE_
<android.view.inputmethod.SparseRectFArray: java.lang.String toString()> -> _SOURCE_
<android.os.Debug$MemoryInfo: int getSummaryStack()> -> _SOURCE_
<android.media.AudioPlaybackConfiguration: void dump(java.io.PrintWriter)> -> _SOURCE_
<java.util.Calendar: boolean before(java.lang.Object)> -> _SOURCE_
<java.util.jar.JarInputStream: java.util.jar.JarEntry getNextJarEntry()> -> _SOURCE_
<android.telephony.data.QualifiedNetworksService: void onDestroy()> -> _SOURCE_
<android.net.metrics.RaEvent: void writeToParcel(android.os.Parcel,int)> -> _SOURCE_
<android.telephony.ServiceState: int getBetterNRFrequencyRange(int,int)> -> _SOURCE_
<android.app.Activity: android.view.View autofillClientFindViewByAutofillIdTraversal(android.view.autofill.AutofillId)> -> _SOURCE_
<android.service.voice.VoiceInteractionSession: int getUserDisabledShowContext()> -> _SOURCE_
<android.telephony.TelephonyManager: int getDataActivationState(int)> -> _SOURCE_
<java.time.temporal.WeekFields: java.lang.String toString()> -> _SOURCE_
<android.view.InsetsSource: java.lang.String toString()> -> _SOURCE_
<android.media.tv.tuner.frontend.DvbtFrontendCapabilities: int getGuardIntervalCapability()> -> _SOURCE_
<android.app.Notification$DecoratedMediaCustomViewStyle: android.widget.RemoteViews makeHeadsUpContentView(boolean)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: android.os.BatteryStats$ControllerActivityCounter getWifiControllerActivity()> -> _SOURCE_
<android.renderscript.Element: android.renderscript.Element$DataType getDataType()> -> _SOURCE_
<android.telecom.CallerInfo: boolean isEmergencyNumber()> -> _SOURCE_
<android.telephony.SignalStrength: int getCdmaDbm()> -> _SOURCE_
<android.view.accessibility.AccessibilityRecord: android.os.Parcelable getParcelableData()> -> _SOURCE_
<android.hardware.biometrics.BiometricPrompt: int getAllowedAuthenticators()> -> _SOURCE_
<android.view.View: android.view.ViewParent getParent()> -> _SOURCE_
<android.os.connectivity.WifiActivityEnergyInfo: int getStackState()> -> _SOURCE_
<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String,java.lang.String)> -> _SOURCE_
<android.security.keystore.recovery.RecoverySession: java.util.Map recoverKeyChainSnapshot(byte[],java.util.List)> -> _SOURCE_
<android.bluetooth.BluetoothHidHost: int getConnectionPolicy(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<com.android.internal.util.StateMachine$LogRec: com.android.internal.util.IState getDestState()> -> _SOURCE_
<java.lang.StringBuffer: java.lang.String substring(int)> -> _SOURCE_
<android.net.ProxyInfo: java.lang.String toString()> -> _SOURCE_
<android.os.StrictMode: void noteSlowCall(java.lang.String)> -> _SOURCE_
<com.android.internal.widget.LockscreenCredential: boolean isPin()> -> _SOURCE_
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean release(int)> -> _SOURCE_
<android.location.GnssMeasurementsEvent$Callback: void onStatusChanged(int)> -> _SOURCE_
<android.util.Spline$LinearSpline: java.lang.String toString()> -> _SOURCE_
<java.util.IntSummaryStatistics: int getMin()> -> _SOURCE_
<android.telephony.SubscriptionManager: int getPhoneId(int)> -> _SOURCE_
<android.media.session.MediaSessionManager: java.util.List getSession2Tokens(int)> -> _SOURCE_
<android.preference.PreferenceManager: void setStorageCredentialProtected()> -> _SOURCE_
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()> -> _SOURCE_
<android.media.session.MediaController$PlaybackInfo: int getCurrentVolume()> -> _SOURCE_
<com.android.internal.util.StateMachine: java.lang.String toString()> -> _SOURCE_
<java.lang.Throwable: java.lang.String getLocalizedMessage()> -> _SOURCE_
<android.media.tv.TvInputService$RecordingSession: void onAppPrivateCommand(java.lang.String,android.os.Bundle)> -> _SOURCE_
<android.media.tv.tuner.filter.AlpFilterConfiguration$Builder: android.media.tv.tuner.filter.AlpFilterConfiguration build()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean getDoNotAskCredentialsOnBoot()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isUninstallInQueue(java.lang.String)> -> _SOURCE_
<android.app.ApplicationExitInfo: java.lang.String getPackageName()> -> _SOURCE_
<android.view.textclassifier.SelectionEvent: int getSmartStart()> -> _SOURCE_
<android.preference.EditTextPreference: android.widget.EditText getEditText()> -> _SOURCE_
<android.app.admin.SystemUpdatePolicy$InstallationOption: long getEffectiveTime()> -> _SOURCE_
<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: java.lang.String toString()> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothDevice getRemoteDevice(java.lang.String)> -> _SOURCE_
<android.bluetooth.BluetoothA2dpSink: int getConnectionPolicy(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<android.content.pm.InstantAppInfo: java.lang.String[] getGrantedPermissions()> -> _SOURCE_
<android.telephony.SubscriptionManager: boolean isActiveSubscriptionId(int)> -> _SOURCE_
<java.util.Arrays: java.lang.String toString(short[])> -> _SOURCE_
<android.telephony.mbms.GroupCallCallback: void onBroadcastSignalStrengthUpdated(int)> -> _SOURCE_
<android.nfc.NfcAdapter: android.nfc.INfcFCardEmulation getNfcFCardEmulationService()> -> _SOURCE_
<android.util.KeyValueListParser$StringValue: void parse(android.util.KeyValueListParser)> -> _SOURCE_
<com.android.internal.util.ScreenRecordHelper: void launchRecordPrompt()> -> _SOURCE_
<android.telecom.AudioState: int getSupportedRouteMask()> -> _SOURCE_
<android.service.voice.AlwaysOnHotwordDetector: boolean stopRecognition()> -> _SOURCE_
<android.location.GnssMeasurement: double getAutomaticGainControlLevelDb()> -> _SOURCE_
<android.media.projection.MediaProjectionManager: android.media.projection.MediaProjection getMediaProjection(int,android.content.Intent)> -> _SOURCE_
<android.telephony.ims.ImsMmTelManager: boolean isVoWiFiSettingEnabled()> -> _SOURCE_
<android.media.tv.TvContract: android.net.Uri buildProgramsUriForChannel(android.net.Uri)> -> _SOURCE_
<android.media.AudioFormat$Builder: android.media.AudioFormat build()> -> _SOURCE_
<android.view.contentcapture.ViewNode: int getTextSelectionStart()> -> _SOURCE_
<java.text.DecimalFormatSymbols: java.lang.String getCurrencySymbol()> -> _SOURCE_
<android.provider.DocumentsProvider: android.os.Bundle getDocumentMetadata(java.lang.String)> -> _SOURCE_
<android.net.VpnManager: void deleteProvisionedVpnProfile()> -> _SOURCE_
<android.hardware.camera2.CameraCharacteristics: java.util.List getKeys()> -> _SOURCE_
<java.util.Collections: java.util.List emptyList()> -> _SOURCE_
<android.media.audiofx.EnvironmentalReverb$Settings: java.lang.String toString()> -> _SOURCE_
<android.telephony.ims.compat.ImsService: android.telephony.ims.compat.feature.RcsFeature onCreateRcsFeature(int)> -> _SOURCE_
<android.service.autofill.FieldClassification$Match: java.lang.String toString()> -> _SOURCE_
<android.security.keystore.KeyProtection: long getBoundToSpecificSecureUserId()> -> _SOURCE_
<android.telephony.ims.ProvisioningManager: int getProvisioningIntValue(int)> -> _SOURCE_
<java.math.MathContext: int getPrecision()> -> _SOURCE_
<android.media.tv.TvContentRating: java.lang.String getMainRating()> -> _SOURCE_
<android.app.usage.UsageEvents$Event: android.app.usage.UsageEvents$Event getObfuscatedIfInstantApp()> -> _SOURCE_
<android.bluetooth.le.AdvertisingSetParameters: boolean includeTxPower()> -> _SOURCE_
<android.se.omapi.SEService: android.se.omapi.Reader getUiccReader(int)> -> _SOURCE_
<android.telephony.data.DataCallResponse$Builder: android.telephony.data.DataCallResponse build()> -> _SOURCE_
<android.view.WindowManager$LayoutParams: long getUserActivityTimeout()> -> _SOURCE_
<android.telephony.SubscriptionManager: int getDefaultDataPhoneId()> -> _SOURCE_
<android.media.tv.TvTrackInfo: int getVideoWidth()> -> _SOURCE_
<android.telecom.Call$Details: java.lang.String getCallerDisplayName()> -> _SOURCE_
<android.app.backup.BackupAgentHelper: android.app.backup.BackupHelperDispatcher getDispatcher()> -> _SOURCE_
<android.app.usage.ExternalStorageStats: long getImageBytes()> -> _SOURCE_
<android.content.pm.ApplicationInfo: boolean isDirectBootAware()> -> _SOURCE_
<android.net.NetworkUtils: int prefixLengthToNetmaskInt(int)> -> _SOURCE_
<android.telephony.ims.ImsCallSessionListener: void callSessionInviteParticipantsRequestDelivered()> -> _SOURCE_
<android.nfc.tech.NfcF: byte[] transceive(byte[])> -> _SOURCE_
<android.speech.tts.TtsEngines: boolean isLocaleSetToDefaultForEngine(java.lang.String)> -> _SOURCE_
<android.telephony.VisualVoicemailSms: android.os.Bundle getFields()> -> _SOURCE_
<android.view.textclassifier.TextClassifier$EntityConfig: boolean shouldIncludeTypesFromTextClassifier()> -> _SOURCE_
<java.time.temporal.ChronoField: java.time.temporal.ValueRange range()> -> _SOURCE_
<android.media.MediaTimestamp: java.lang.String toString()> -> _SOURCE_
<android.app.Dialog: android.app.Activity getOwnerActivity()> -> _SOURCE_
<android.telecom.ParcelableCall: android.os.Bundle getIntentExtras()> -> _SOURCE_
<android.webkit.DateSorter: int getIndex(long)> -> _SOURCE_
<java.lang.reflect.Parameter: java.lang.String toString()> -> _SOURCE_
<android.companion.BluetoothLeDeviceFilter: java.util.regex.Pattern getNamePattern()> -> _SOURCE_
<android.telecom.Phone$Listener: void onSilenceRinger(android.telecom.Phone)> -> _SOURCE_
<android.widget.inline.InlinePresentationSpec: android.os.Bundle getStyle()> -> _SOURCE_
<android.telephony.ims.ImsSsInfo: java.lang.String toString()> -> _SOURCE_
<android.media.MediaCodec$CodecException: java.lang.String getDiagnosticInfo()> -> _SOURCE_
<android.app.PictureInPictureParams: boolean hasSetAspectRatio()> -> _SOURCE_
<java.security.KeyStore$CallbackHandlerProtection: javax.security.auth.callback.CallbackHandler getCallbackHandler()> -> _SOURCE_
<java.net.URL: int getDefaultPort()> -> _SOURCE_
<com.android.internal.telephony.uicc.asn1.Asn1Node: int asInteger()> -> _SOURCE_
<android.provider.DocumentsProvider: android.database.Cursor querySearchDocuments(java.lang.String,java.lang.String[],android.os.Bundle)> -> _SOURCE_
<java.util.TimeZone: java.util.TimeZone getDefault()> -> _SOURCE_
<android.content.pm.PackageInstaller$SessionInfo: int getInstallReason()> -> _SOURCE_
<android.telecom.ParcelableCall: java.lang.String toString()> -> _SOURCE_
<android.app.NotificationManager: int getZenMode()> -> _SOURCE_
<android.hardware.soundtrigger.SoundTrigger$ModuleProperties: java.lang.String getSupportedModelArch()> -> _SOURCE_
<android.view.contentcapture.ViewNode: java.lang.String getTextIdEntry()> -> _SOURCE_
<java.time.LocalDate: int getYear()> -> _SOURCE_
<android.util.RecurrenceRule: java.lang.String toString()> -> _SOURCE_
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)> -> _SOURCE_
<android.media.tv.tunerresourcemanager.ResourceClientProfile: java.lang.String getTvInputSessionId()> -> _SOURCE_
<android.content.ContextWrapper: android.os.Looper getMainLooper()> -> _SOURCE_
<android.view.DisplayCutout: java.lang.String toString()> -> _SOURCE_
<android.telecom.Conference: void onReject()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,android.database.DatabaseErrorHandler)> -> _SOURCE_
<android.telecom.Logging.Session: java.lang.String printFullSessionTree()> -> _SOURCE_
<android.content.om.OverlayManager: java.util.List getOverlayInfosForTarget(java.lang.String,android.os.UserHandle)> -> _SOURCE_
<android.telephony.PhoneNumberUtils: java.lang.String cdmaCheckAndProcessPlusCodeByNumberFormat(java.lang.String,int,int)> -> _SOURCE_
<android.view.ViewRootImpl: android.view.View focusSearch(android.view.View,int)> -> _SOURCE_
<android.service.autofill.UserData: java.lang.String getFieldClassificationAlgorithm()> -> _SOURCE_
<android.media.tv.TvInputManager: void notifyPreviewProgramAddedToWatchNext(java.lang.String,long,long)> -> _SOURCE_
<android.media.tv.tuner.frontend.Atsc3PlpSettings: int getPlpId()> -> _SOURCE_
<java.time.Instant: java.lang.String toString()> -> _SOURCE_
<com.android.ims.internal.uce.common.CapInfo: boolean isIpVoiceSupported()> -> _SOURCE_
<android.app.Notification$CarExtender$UnreadConversation: java.lang.String[] getParticipants()> -> _SOURCE_
<org.xml.sax.SAXParseException: java.lang.String getPublicId()> -> _SOURCE_
<com.android.internal.view.menu.IconMenuView: int[] getLayout()> -> _SOURCE_
<java.security.KeyStore$PrivateKeyEntry: java.lang.String toString()> -> _SOURCE_
<android.os.Environment: java.io.File getUserConfigDirectory(int)> -> _SOURCE_
<android.telephony.TelephonyManager: int getCardIdForDefaultEuicc()> -> _SOURCE_
<java.util.MissingFormatArgumentException: java.lang.String getFormatSpecifier()> -> _SOURCE_
<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String,java.lang.String)> -> _SOURCE_
<android.net.http.SslCertificate: android.net.http.SslCertificate$DName getIssuedTo()> -> _SOURCE_
<android.content.res.Resources: android.content.res.Resources getSystem()> -> _SOURCE_
<android.service.controls.ControlsProviderService: java.util.concurrent.Flow$Publisher createPublisherForSuggested()> -> _SOURCE_
<android.location.GnssMeasurement: boolean hasCodeType()> -> _SOURCE_
<android.net.NetworkTemplate: java.lang.String toString()> -> _SOURCE_
<android.app.admin.SecurityLog$SecurityEvent: int getLogLevel()> -> _SOURCE_
<android.hardware.camera2.impl.CameraDeviceImpl$StateCallbackKK: void onActive(android.hardware.camera2.CameraDevice)> -> _SOURCE_
<android.telephony.PhoneNumberUtils: java.lang.String formatNumber(java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<com.android.internal.os.AtomicDirectory: java.io.File getBackupDirectory()> -> _SOURCE_
<android.media.tv.tuner.frontend.FrontendStatus$Atsc3PlpTuningInfo: int getPlpId()> -> _SOURCE_
<android.telephony.LteVopsSupportInfo: java.lang.String toString()> -> _SOURCE_
<android.os.Environment: java.io.File getDownloadCacheDirectory()> -> _SOURCE_
<android.location.GpsMeasurement: boolean hasAzimuthInDeg()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: com.android.internal.os.BatteryStatsImpl$Uid getUidStatsLocked(int)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String[] getIsimImpu()> -> _SOURCE_
<android.telecom.CallerInfo: java.lang.String getPhoneNumber()> -> _SOURCE_
<java.net.InetSocketAddress: java.net.InetAddress getAddress()> -> _SOURCE_
<java.util.TreeSet: java.lang.Object clone()> -> _SOURCE_
<android.util.FeatureFlagUtils: java.util.Map getAllFeatureFlags()> -> _SOURCE_
<com.android.internal.util.FastPrintWriter: void flush()> -> _SOURCE_
<android.telephony.SubscriptionManager: boolean isUsableSubscriptionId(int)> -> _SOURCE_
<android.view.TextureView: boolean isAvailable()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: int getPasswordMaximumLength(int)> -> _SOURCE_
<android.app.ActivityOptions: int getAnimationType()> -> _SOURCE_
<android.app.Notification$WearableExtender: int getContentIconGravity()> -> _SOURCE_
<android.telephony.ServiceState: int getNrFrequencyRange()> -> _SOURCE_
<java.util.UnknownFormatFlagsException: java.lang.String getFlags()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getEsn()> -> _SOURCE_
<android.app.usage.UsageStatsManager: java.util.Map queryAndAggregateUsageStats(long,long)> -> _SOURCE_
<java.lang.Class: java.lang.'annotation'.Annotation[] getAnnotations()> -> _SOURCE_
<android.telecom.CallerInfo: java.lang.String getGeoDescription(android.content.Context,java.lang.String)> -> _SOURCE_
<android.os.image.DynamicSystemManager: boolean abort()> -> _SOURCE_
<android.location.GpsMeasurement: double getSnrInDb()> -> _SOURCE_
<android.telephony.DataFailCause: boolean isPermanentFailure(android.content.Context,int,int)> -> _SOURCE_
<android.hardware.fingerprint.FingerprintManager: java.lang.String getAcquiredString(android.content.Context,int,int)> -> _SOURCE_
<android.media.soundtrigger.SoundTriggerManager: boolean isRecognitionActive(java.util.UUID)> -> _SOURCE_
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfoForUid(int)> -> _SOURCE_
<android.media.session.MediaController: android.media.session.MediaController$PlaybackInfo getPlaybackInfo()> -> _SOURCE_
<android.webkit.CacheManager$CacheResult: java.lang.String getLocation()> -> _SOURCE_
<com.android.internal.os.KernelCpuThreadReader: int[] getCpuFrequenciesKhz()> -> _SOURCE_
<android.telephony.data.DataService: void onDestroy()> -> _SOURCE_
<android.telephony.VisualVoicemailSms: java.lang.String getMessageBody()> -> _SOURCE_
<android.telephony.PhoneNumberRange: boolean matches(java.lang.String)> -> _SOURCE_
<android.app.NotificationHistory: int getHistoryCount()> -> _SOURCE_
<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()> -> _SOURCE_
<android.app.WallpaperManager: android.graphics.drawable.Drawable getDrawable()> -> _SOURCE_
<android.media.session.MediaSession$Callback: void onCustomAction(java.lang.String,android.os.Bundle)> -> _SOURCE_
<android.telephony.UiccAccessRule: java.util.List getSignatures(android.content.pm.PackageInfo)> -> _SOURCE_
<android.hardware.display.DisplayManagerGlobal: android.util.Pair getMinimumBrightnessCurve()> -> _SOURCE_
<android.app.PendingIntent: java.lang.String getTargetPackage()> -> _SOURCE_
<android.database.sqlite.SQLiteStatement: long simpleQueryForLong()> -> _SOURCE_
<android.location.GnssSingleSatCorrection: boolean hasExcessPathLengthUncertainty()> -> _SOURCE_
<android.bluetooth.BluetoothGattCallback: void onCharacteristicChanged(android.bluetooth.BluetoothGatt,android.bluetooth.BluetoothGattCharacteristic)> -> _SOURCE_
<android.widget.ScrollView: void onNestedScrollAccepted(android.view.View,android.view.View,int)> -> _SOURCE_
<java.util.concurrent.AbstractExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)> -> _SOURCE_
<android.accounts.Account: java.lang.String getAccessId()> -> _SOURCE_
<android.widget.TextView: java.lang.String getPrivateImeOptions()> -> _SOURCE_
<android.timezone.CountryTimeZones: java.lang.String getDefaultTimeZoneId()> -> _SOURCE_
<android.hardware.display.DisplayManagerGlobal: android.graphics.Point getStableDisplaySize()> -> _SOURCE_
<android.content.res.Resources: android.content.res.CompatibilityInfo getCompatibilityInfo()> -> _SOURCE_
<android.telecom.GatewayInfo: java.lang.String getGatewayProviderPackageName()> -> _SOURCE_
<android.net.NetworkInfo: java.lang.String getTypeName()> -> _SOURCE_
<android.telephony.SubscriptionManager: int[] getActiveSubscriptionIdList(boolean)> -> _SOURCE_
<android.net.NetworkAgentConfig$Builder: android.net.NetworkAgentConfig build()> -> _SOURCE_
<android.content.pm.LabeledIntent: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)> -> _SOURCE_
<android.graphics.RenderNode: long computeApproximateMemoryUsage()> -> _SOURCE_
<android.database.DatabaseUtils: boolean queryIsEmpty(android.database.sqlite.SQLiteDatabase,java.lang.String)> -> _SOURCE_
<android.security.KeyPairGeneratorSpec: java.util.Date getStartDate()> -> _SOURCE_
<android.hardware.radio.RadioManager$BandConfig: int getLowerLimit()> -> _SOURCE_
<android.telecom.RemoteConnection: android.os.Bundle getExtras()> -> _SOURCE_
<android.hardware.radio.RadioManager$ModuleProperties: java.lang.String getVersion()> -> _SOURCE_
<android.bluetooth.BluetoothCodecConfig: int getSampleRate()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isIdle()> -> _SOURCE_
<android.bluetooth.le.ScanRecord: byte[] getManufacturerSpecificData(int)> -> _SOURCE_
<com.android.server.SystemConfig: android.util.ArraySet getSystemExtPrivAppPermissions(java.lang.String)> -> _SOURCE_
<android.app.Notification$MediaStyle: android.widget.RemoteViews makeHeadsUpContentView(boolean)> -> _SOURCE_
<android.view.inputmethod.InlineSuggestionsRequest: int getHostDisplayId()> -> _SOURCE_
<android.app.timezone.RulesState: android.app.timezone.DistroRulesVersion getInstalledDistroRulesVersion()> -> _SOURCE_
<android.security.KeyChain: java.util.Collection toCertificates(byte[])> -> _SOURCE_
<android.webkit.WebResourceResponse: java.lang.String getEncoding()> -> _SOURCE_
<android.preference.PreferenceManager: void setStorageDefault()> -> _SOURCE_
<android.net.LinkProperties: boolean isIdenticalValidatedPrivateDnses(android.net.LinkProperties)> -> _SOURCE_
<android.telephony.cdma.CdmaSmsCbProgramResults: int getLanguage()> -> _SOURCE_
<java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])> -> _SOURCE_
<android.net.NetworkInfo: int getType()> -> _SOURCE_
<android.speech.tts.TtsEngines: android.speech.tts.TextToSpeech$EngineInfo getEngineInfo(java.lang.String)> -> _SOURCE_
<android.media.tv.tuner.frontend.DvbsCodeRate: boolean isLinear()> -> _SOURCE_
<android.hardware.Sensor: int getReportingMode()> -> _SOURCE_
<com.android.internal.telephony.SmsApplication: java.util.Collection getApplicationCollectionAsUser(android.content.Context,int)> -> _SOURCE_
<android.content.ContentResolver$MimeTypeInfo: java.lang.CharSequence getContentDescription()> -> _SOURCE_
<android.renderscript.Program: int getConstantCount()> -> _SOURCE_
<java.net.NetworkInterface: java.net.NetworkInterface getByIndex(int)> -> _SOURCE_
<android.content.res.Resources: java.lang.String getResourcePackageName(int)> -> _SOURCE_
<android.bluetooth.BluetoothProfile: java.lang.String getConnectionStateName(int)> -> _SOURCE_
<android.service.euicc.DownloadSubscriptionResult: int getResult()> -> _SOURCE_
<android.net.http.HttpResponseCache: java.net.CacheResponse get(java.net.URI,java.lang.String,java.util.Map)> -> _SOURCE_
<android.telephony.NetworkRegistrationInfo: boolean isRoaming()> -> _SOURCE_
<android.hardware.hdmi.HdmiPortInfo: int getId()> -> _SOURCE_
<android.telecom.Conference: android.telecom.Connection$VideoProvider getVideoProvider()> -> _SOURCE_
<com.android.internal.telephony.SmsApplication: android.content.ComponentName getDefaultSmsApplication(android.content.Context,boolean)> -> _SOURCE_
<android.net.Ikev2VpnProfile: java.lang.String getPassword()> -> _SOURCE_
<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()> -> _SOURCE_
<java.util.concurrent.atomic.AtomicReference: java.lang.String toString()> -> _SOURCE_
<android.app.backup.SelectBackupTransportCallback: void onFailure(int)> -> _SOURCE_
<android.os.Process: long getStartElapsedRealtime()> -> _SOURCE_
<android.media.MediaRouter2: java.util.List getRoutes()> -> _SOURCE_
<android.media.MediaDrm$KeyStatus: int getStatusCode()> -> _SOURCE_
<android.app.WallpaperManager: android.app.WallpaperManager$ColorManagementProxy getColorManagementProxy()> -> _SOURCE_
<java.util.Collections: java.util.Set emptySet()> -> _SOURCE_
<android.hardware.SensorManager: android.hardware.SensorDirectChannel createDirectChannel(android.hardware.HardwareBuffer)> -> _SOURCE_
<android.app.ListActivity: android.widget.ListAdapter getListAdapter()> -> _SOURCE_
<android.security.KeyStore: int presentConfirmationPrompt(android.os.IBinder,java.lang.String,byte[],java.lang.String,int)> -> _SOURCE_
<android.widget.TableRow: int getVirtualChildCount()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isEmergencyNumber(java.lang.String)> -> _SOURCE_
<android.graphics.drawable.NinePatchDrawable: void clearMutated()> -> _SOURCE_
<android.app.blob.BlobHandle: java.lang.String safeDigest(byte[])> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec: java.lang.String[] getDigests()> -> _SOURCE_
<android.widget.ExpandableListView: int getPackedPositionType(long)> -> _SOURCE_
<android.os.VibrationEffect$Waveform: long getDuration()> -> _SOURCE_
<android.os.BatterySaverPolicyConfig: boolean getEnableDataSaver()> -> _SOURCE_
<android.app.StatusBarManager$DisableInfo: java.lang.String toString()> -> _SOURCE_
<android.telephony.TelephonyRegistryManager: void listenForSubscriber(int,java.lang.String,java.lang.String,android.telephony.PhoneStateListener,int,boolean)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean getGuestUserDisabled(android.content.ComponentName)> -> _SOURCE_
<android.view.Window: android.media.session.MediaController getMediaController()> -> _SOURCE_
<android.app.Activity: void onLocalVoiceInteractionStopped()> -> _SOURCE_
<android.content.pm.PermissionInfo: java.lang.String toString()> -> _SOURCE_
<android.service.autofill.AutofillService: android.service.autofill.FillEventHistory getFillEventHistory()> -> _SOURCE_
<android.net.Uri$Builder: android.net.Uri$Builder encodedQuery(java.lang.String)> -> _SOURCE_
<android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityInteractionClient getInstance()> -> _SOURCE_
<android.telecom.AudioState: boolean isMuted()> -> _SOURCE_
<android.app.ActivityManager$TaskDescription: java.lang.String getIconFilename()> -> _SOURCE_
<android.net.VpnService$Builder: android.net.VpnService$Builder addAddress(java.lang.String,int)> -> _SOURCE_
<android.app.usage.UsageStats: long getTotalTimeVisible()> -> _SOURCE_
<android.location.GpsMeasurement: double getDopplerShiftUncertaintyInHz()> -> _SOURCE_
<android.widget.Editor$SelectionModifierCursorController: boolean isSelectionStartDragged()> -> _SOURCE_
<android.util.MemoryIntArray: boolean isWritable()> -> _SOURCE_
<android.media.ExifInterface: boolean isSupportedMimeType(java.lang.String)> -> _SOURCE_
<com.android.internal.net.VpnProfile: java.util.List getAllowedAlgorithms()> -> _SOURCE_
<com.android.internal.app.ChooserListAdapter: java.util.List getSurfacedTargetInfo()> -> _SOURCE_
<android.telephony.ims.feature.RcsFeature: void onFeatureRemoved()> -> _SOURCE_
<android.hardware.radio.RadioMetadata$Builder: android.hardware.radio.RadioMetadata build()> -> _SOURCE_
<android.view.animation.AnimationSet: boolean hasAlpha()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long getStartClockTime()> -> _SOURCE_
<android.telephony.PreciseDataConnectionState: int getDataConnectionState()> -> _SOURCE_
<android.bluetooth.BluetoothGattServer: java.util.List getServices()> -> _SOURCE_
<java.net.InetAddress: java.lang.String getHostName()> -> _SOURCE_
<android.text.TextUtils: int getLayoutDirectionFromLocale(java.util.Locale)> -> _SOURCE_
<android.print.PrintDocumentInfo: java.lang.String getName()> -> _SOURCE_
<android.service.notification.StatusBarNotification: android.content.Context getPackageContext(android.content.Context)> -> _SOURCE_
<android.view.inputmethod.InlineSuggestionsRequest: android.os.Bundle getExtras()> -> _SOURCE_
<android.telephony.MbmsStreamingSession: android.telephony.MbmsStreamingSession create(android.content.Context,java.util.concurrent.Executor,int,android.telephony.mbms.MbmsStreamingSessionCallback)> -> _SOURCE_
<android.security.keystore.recovery.WrappedApplicationKey: byte[] getMetadata()> -> _SOURCE_
<android.media.session.MediaController$PlaybackInfo: android.media.AudioAttributes getAudioAttributes()> -> _SOURCE_
<android.text.method.MetaKeyKeyListener: boolean isMetaTracker(java.lang.CharSequence,java.lang.Object)> -> _SOURCE_
<android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int)> -> _SOURCE_
<android.telephony.PhoneNumberUtils: boolean isPotentialLocalEmergencyNumber(android.content.Context,int,java.lang.String)> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing$BandStage: int getBandCount()> -> _SOURCE_
<java.time.temporal.WeekFields: java.time.DayOfWeek getFirstDayOfWeek()> -> _SOURCE_
<java.security.Signature: java.lang.String getAlgorithm()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.util.List getCrossProfileWidgetProviders(android.content.ComponentName)> -> _SOURCE_
<android.app.job.JobInfo: android.content.ClipData getClipData()> -> _SOURCE_
<android.content.pm.LauncherApps: boolean hasShortcutHostPermission()> -> _SOURCE_
<android.os.MemoryFile: java.io.InputStream getInputStream()> -> _SOURCE_
<java.net.NetworkInterface: java.net.NetworkInterface getByName(java.lang.String)> -> _SOURCE_
<android.telephony.ServiceState: boolean getRoaming()> -> _SOURCE_
<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder replace(int,int,java.lang.CharSequence,int,int)> -> _SOURCE_
<android.drm.DrmSupportInfo: java.lang.String getDescriprition()> -> _SOURCE_
<android.app.usage.StorageStatsManager: android.app.usage.StorageStats queryStatsForUser(java.lang.String,android.os.UserHandle)> -> _SOURCE_
<java.security.cert.CertPathValidatorException: java.security.cert.CertPathValidatorException$Reason getReason()> -> _SOURCE_
<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getApplicationIcon(java.lang.String)> -> _SOURCE_
<android.app.AppOpsManager$HistoricalOps: android.app.AppOpsManager$HistoricalUidOps getUidOps(int)> -> _SOURCE_
<android.view.textclassifier.TextClassifierEvent: android.view.textclassifier.SelectionEvent toSelectionEvent()> -> _SOURCE_
<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getApplicationBanner(java.lang.String)> -> _SOURCE_
<android.widget.OverScroller: int getFinalY()> -> _SOURCE_
<android.view.accessibility.AccessibilityWindowInfo: int getChildCount()> -> _SOURCE_
<android.content.ContentResolver: void setIsSyncableAsUser(android.accounts.Account,java.lang.String,int,int)> -> _SOURCE_
<com.android.internal.telephony.gsm.SmsMessage: int getStatus()> -> _SOURCE_
<android.app.job.JobWorkItem: long getEstimatedNetworkUploadBytes()> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: boolean setActiveDevice(android.bluetooth.BluetoothDevice,int)> -> _SOURCE_
<android.graphics.Paint: android.graphics.MaskFilter getMaskFilter()> -> _SOURCE_
<android.view.DisplayCutout: void dumpDebug(android.util.proto.ProtoOutputStream,long)> -> _SOURCE_
<java.net.Authenticator: java.net.PasswordAuthentication requestPasswordAuthentication(java.lang.String,java.net.InetAddress,int,java.lang.String,java.lang.String,java.lang.String,java.net.URL,java.net.Authenticator$RequestorType)> -> _SOURCE_
<android.app.servertransaction.ClientTransactionItem: int getPostExecutionState()> -> _SOURCE_
<java.lang.Class: java.lang.reflect.Field[] getFields()> -> _SOURCE_
<android.app.ActivityManager: int getFrontActivityScreenCompatMode()> -> _SOURCE_
<android.util.LruCache: int createCount()> -> _SOURCE_
<android.net.LinkProperties: java.util.List getLinkAddresses()> -> _SOURCE_
<android.filterfw.core.StreamPort: java.lang.String toString()> -> _SOURCE_
<android.view.View: android.animation.StateListAnimator getStateListAnimator()> -> _SOURCE_
<android.os.Bundle: android.os.Parcelable[] getParcelableArray(java.lang.String)> -> _SOURCE_
<android.os.UserManager: boolean isEphemeralUser()> -> _SOURCE_
<android.telecom.TelecomManager: java.util.List getAllPhoneAccounts()> -> _SOURCE_
<android.graphics.drawable.Icon: int getType()> -> _SOURCE_
<android.app.backup.BackupTransport: java.lang.String currentDestinationString()> -> _SOURCE_
<android.view.WindowInsets$Type: int tappableElement()> -> _SOURCE_
<android.location.Criteria: void setSpeedAccuracy(int)> -> _SOURCE_
<android.os.image.DynamicSystemManager: boolean finishInstallation()> -> _SOURCE_
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreferredPreviewSizeForVideo()> -> _SOURCE_
<android.content.pm.UserInfo: boolean supportsSwitchToByUser()> -> _SOURCE_
<com.android.internal.widget.PagerAdapter: java.lang.CharSequence getPageTitle(int)> -> _SOURCE_
<android.telecom.TelecomManager: void addNewUnknownCall(android.telecom.PhoneAccountHandle,android.os.Bundle)> -> _SOURCE_
<android.inputmethodservice.InputMethodService: android.view.inputmethod.InputConnection getCurrentInputConnection()> -> _SOURCE_
<android.content.Context: java.lang.CharSequence getText(int)> -> _SOURCE_
<android.bluetooth.BluetoothProfile: java.lang.String getProfileName(int)> -> _SOURCE_
<android.security.keystore.AndroidKeyStoreSpi: void engineLoad(java.io.InputStream,char[])> -> _SOURCE_
<android.companion.BluetoothDeviceFilter: java.lang.String getAddress()> -> _SOURCE_
<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture schedule(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)> -> _SOURCE_
<android.webkit.CookieSyncManager: void sync()> -> _SOURCE_
<android.telephony.ims.stub.ImsConfigImplBase: java.lang.String getConfigString(int)> -> _SOURCE_
<android.util.proto.ProtoStream: java.lang.String getFieldTypeString(long)> -> _SOURCE_
<android.media.MediaRoute2Info: int getVolume()> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec: boolean isUserConfirmationRequired()> -> _SOURCE_
<android.app.admin.PasswordMetrics: android.app.admin.PasswordMetrics computeForPassword(byte[])> -> _SOURCE_
<android.os.health.SystemHealthManager: android.os.health.HealthStats takeUidSnapshot(int)> -> _SOURCE_
<java.net.URI: java.lang.String getAuthority()> -> _SOURCE_
<java.io.WriteAbortedException: java.lang.String getMessage()> -> _SOURCE_
<android.telephony.PhoneNumberUtils: java.lang.String getNumberFromIntent(android.content.Intent,android.content.Context)> -> _SOURCE_
<android.appwidget.AppWidgetManager: boolean requestPinAppWidget(android.content.ComponentName,android.app.PendingIntent)> -> _SOURCE_
<android.telecom.TelecomManager: boolean isVoiceMailNumber(android.telecom.PhoneAccountHandle,java.lang.String)> -> _SOURCE_
<android.telephony.ims.compat.stub.ImsConfigImplBase$ImsConfigStub: java.lang.String getProvisionedStringValue(int)> -> _SOURCE_
<javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)> -> _SOURCE_
<android.telephony.TelephonyManager: boolean getSmsSendCapableForPhone(int,boolean)> -> _SOURCE_
<android.media.AudioPlaybackConfiguration: int getPlayerType()> -> _SOURCE_
<android.view.inputmethod.InputMethodInfo: android.content.ComponentName getComponent()> -> _SOURCE_
<java.text.DateFormat: java.text.DateFormat getDateInstance()> -> _SOURCE_
<android.net.LinkProperties: java.util.List getAllInterfaceNames()> -> _SOURCE_
<android.os.Debug: java.lang.String getCaller()> -> _SOURCE_
<android.text.FontConfig$Font: java.lang.String getFontName()> -> _SOURCE_
<android.hardware.camera2.CameraAccessException: java.lang.String getDefaultMessage(int)> -> _SOURCE_
<android.app.admin.DnsEvent: int getTotalResolvedAddressCount()> -> _SOURCE_
<java.net.URISyntaxException: int getIndex()> -> _SOURCE_
<android.hardware.location.ContextHubMessage: java.lang.String toString()> -> _SOURCE_
<android.text.style.TtsSpan$OrdinalBuilder: android.text.style.TtsSpan$OrdinalBuilder setNumber(long)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: android.app.admin.PasswordMetrics getPasswordMinimumMetrics(int)> -> _SOURCE_
<android.app.timedetector.TelephonyTimeSuggestion: java.lang.String toString()> -> _SOURCE_
<android.content.IntentFilter: int countDataTypes()> -> _SOURCE_
<android.telephony.ims.feature.MmTelFeature: android.telephony.ims.stub.ImsMultiEndpointImplBase getMultiEndpoint()> -> _SOURCE_
<android.telephony.TelephonyManager: android.telephony.CallForwardingInfo getCallForwarding(int)> -> _SOURCE_
<android.app.assist.AssistStructure$ViewNode: java.lang.String getWebDomain()> -> _SOURCE_
<android.telephony.data.DataProfile: int getBearerBitmask()> -> _SOURCE_
<android.app.Fragment: boolean shouldShowRequestPermissionRationale(java.lang.String)> -> _SOURCE_
<android.os.Environment: java.io.File getDataUserCeDirectory(java.lang.String)> -> _SOURCE_
<android.telephony.TelephonyManager: java.util.List getClientRequestStats(int)> -> _SOURCE_
<android.telephony.ims.ImsReasonInfo: int getExtraCode()> -> _SOURCE_
<android.view.inputmethod.InputMethodInfo: int getSubtypeCount()> -> _SOURCE_
<android.media.AudioRecord: android.media.AudioRecordingConfiguration getActiveRecordingConfiguration()> -> _SOURCE_
<android.net.NetworkAgentConfig: java.lang.String getLegacyTypeName()> -> _SOURCE_
<android.media.AudioAttributes: android.os.Bundle getBundle()> -> _SOURCE_
<java.time.LocalDateTime: java.time.LocalTime toLocalTime()> -> _SOURCE_
<android.net.ConnectivityManager: boolean isActiveNetworkMetered()> -> _SOURCE_
<android.widget.NumberPicker: java.lang.CharSequence getDisplayedValueForCurrentSelection()> -> _SOURCE_
<java.util.jar.Manifest: void read(java.io.InputStream)> -> _SOURCE_
<android.telephony.data.ApnSetting: java.lang.String getUser()> -> _SOURCE_
<android.app.Notification$WearableExtender: int getContentAction()> -> _SOURCE_
<android.telephony.TelephonyRegistryManager: void notifyRegistrationFailed(int,int,android.telephony.CellIdentity,java.lang.String,int,int,int)> -> _SOURCE_
<android.hardware.display.DisplayManagerGlobal: int[] getDisplayIds()> -> _SOURCE_
<android.security.keystore.recovery.KeyChainSnapshot$Builder: android.security.keystore.recovery.KeyChainSnapshot build()> -> _SOURCE_
<android.hardware.camera2.marshal.MarshalRegistry: android.hardware.camera2.marshal.Marshaler getMarshaler(android.hardware.camera2.utils.TypeReference,int)> -> _SOURCE_
<java.lang.StringBuilder: java.lang.StringBuilder deleteCharAt(int)> -> _SOURCE_
<android.hardware.face.FaceManager: int revokeChallenge()> -> _SOURCE_
<java.lang.reflect.Field: java.lang.Class getType()> -> _SOURCE_
<android.hardware.camera2.params.MandatoryStreamCombination: java.util.List getStreamsInformation()> -> _SOURCE_
<android.telephony.CellIdentityLte: java.lang.String getMobileNetworkOperator()> -> _SOURCE_
<android.telephony.TelephonyManager: int getSubscriptionId(android.telecom.PhoneAccountHandle)> -> _SOURCE_
<com.android.internal.net.VpnProfile: void validateAllowedAlgorithms(java.util.List)> -> _SOURCE_
<android.location.GnssMeasurement: boolean hasAutomaticGainControlLevelDb()> -> _SOURCE_
<android.service.notification.StatusBarNotification: boolean isAppGroup()> -> _SOURCE_
<android.service.notification.NotificationListenerService$Ranking: java.lang.String importanceToString(int)> -> _SOURCE_
<android.os.Environment: java.io.File[] buildExternalStoragePublicDirs(java.lang.String)> -> _SOURCE_
<android.telephony.ims.stub.ImsSmsImplBase: java.lang.String getSmsFormat()> -> _SOURCE_
<java.time.chrono.IsoChronology: java.lang.String getCalendarType()> -> _SOURCE_
<android.app.ActivityManager: int getLockTaskModeState()> -> _SOURCE_
<android.net.LinkProperties: java.net.Inet4Address getDhcpServerAddress()> -> _SOURCE_
<android.app.backup.BackupTransport: int sendBackupData(int)> -> _SOURCE_
<android.view.Display: android.graphics.ColorSpace[] getSupportedWideColorGamut()> -> _SOURCE_
<com.android.internal.widget.LockPatternUtils: boolean isQualityAlphabeticPassword(int)> -> _SOURCE_
<android.appwidget.AppWidgetManager: java.util.List getInstalledProvidersForPackage(java.lang.String,android.os.UserHandle)> -> _SOURCE_
<android.app.job.JobInfo: boolean isPersisted()> -> _SOURCE_
<java.lang.invoke.MethodType: java.lang.Class returnType()> -> _SOURCE_
<android.net.NetworkProvider: int getProviderId()> -> _SOURCE_
<android.app.backup.FullBackupDataOutput: long getQuota()> -> _SOURCE_
<android.content.Intent: android.net.Uri getData()> -> _SOURCE_
<android.widget.QuickContactBadge: void assignContactFromPhone(java.lang.String,boolean)> -> _SOURCE_
<com.android.internal.util.Preconditions: void checkState(boolean,java.lang.String)> -> _SOURCE_
<android.net.LinkProperties: java.lang.String getDomains()> -> _SOURCE_
<com.android.internal.os.BaseCommand: java.lang.String nextArgRequired()> -> _SOURCE_
<android.service.quicksettings.TileService: android.service.quicksettings.Tile getQsTile()> -> _SOURCE_
<android.service.voice.AlwaysOnHotwordDetector: void dump(java.lang.String,java.io.PrintWriter)> -> _SOURCE_
<android.os.PowerManager$WakeLock: java.lang.String getTag()> -> _SOURCE_
<android.service.carrier.CarrierIdentifier: java.lang.String getGid2()> -> _SOURCE_
<android.app.backup.RestoreDescription: java.lang.String toString()> -> _SOURCE_
<android.app.backup.FullBackupDataOutput: long getSize()> -> _SOURCE_
<android.webkit.URLUtil: boolean isCookielessProxyUrl(java.lang.String)> -> _SOURCE_
<android.os.storage.StorageVolume: android.os.UserHandle getOwner()> -> _SOURCE_
<android.content.Intent: java.lang.String getLaunchToken()> -> _SOURCE_
<android.app.AppOpsManager$OpEventProxyInfo: int getUid()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: boolean isOpen()> -> _SOURCE_
<android.preference.Preference: boolean hasKey()> -> _SOURCE_
<android.net.TelephonyNetworkSpecifier: java.lang.String toString()> -> _SOURCE_
<android.telephony.PhoneNumberUtils: java.lang.String formatNumberToRFC3966(java.lang.String,java.lang.String)> -> _SOURCE_
<android.telephony.CellIdentityGsm: android.telephony.CellIdentityGsm sanitizeLocationInfo()> -> _SOURCE_
<android.net.NetworkRequest: boolean isListen()> -> _SOURCE_
<android.util.SparseArrayMap: int indexOfKey(int)> -> _SOURCE_
<android.widget.ActionMenuPresenter: boolean isOverflowReserved()> -> _SOURCE_
<android.hardware.camera2.legacy.RequestHolder: boolean isOutputAbandoned()> -> _SOURCE_
<android.media.AudioManager: int getMinVolumeIndexForAttributes(android.media.AudioAttributes)> -> _SOURCE_
<android.media.tv.TvInputManager: java.util.List getTvContentRatingSystemList()> -> _SOURCE_
<android.telephony.SubscriptionManager: java.util.List getOpportunisticSubscriptions()> -> _SOURCE_
<android.view.textclassifier.TextClassification$Request: java.lang.String getCallingPackageName()> -> _SOURCE_
<android.telephony.ims.compat.stub.ImsCallSessionImplBase: int getState()> -> _SOURCE_
<java.text.MessageFormat: java.util.Locale getLocale()> -> _SOURCE_
<android.app.usage.StorageStats: long getAppBytes()> -> _SOURCE_
<android.content.ContentResolver$MimeTypeInfo: java.lang.CharSequence getLabel()> -> _SOURCE_
<android.renderscript.Mesh: android.renderscript.Allocation getIndexSetAllocation(int)> -> _SOURCE_
<android.view.MotionEvent: int getToolType(int)> -> _SOURCE_
<android.provider.Settings: boolean checkAndNoteDrawOverlaysOperation(android.content.Context,int,java.lang.String,boolean)> -> _SOURCE_
<com.android.internal.app.LocalePicker: android.widget.ArrayAdapter constructAdapter(android.content.Context)> -> _SOURCE_
<android.telecom.Connection: long getConnectTimeMillis()> -> _SOURCE_
<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder detectFileUriExposure()> -> _SOURCE_
<android.os.ParcelUuid: java.lang.String toString()> -> _SOURCE_
<android.telephony.MbmsStreamingSession: void requestUpdateStreamingServices(java.util.List)> -> _SOURCE_
<android.util.TimeUtils: java.util.List getTimeZoneIdsForCountryCode(java.lang.String)> -> _SOURCE_
<android.print.PrintDocumentInfo: long getDataSize()> -> _SOURCE_
<android.text.FontConfig: android.text.FontConfig$Family[] getFamilies()> -> _SOURCE_
<android.app.admin.SecurityLog$SecurityEvent: java.lang.Object getData()> -> _SOURCE_
<android.drm.DrmManagerClient: java.lang.String[] getAvailableDrmEngines()> -> _SOURCE_
<android.content.pm.PackageInstaller$SessionInfo: boolean getInstallAsVirtualPreload()> -> _SOURCE_
<android.nfc.Tag: int getConnectedTechnology()> -> _SOURCE_
<android.media.MediaRoute2ProviderInfo: java.util.Collection getRoutes()> -> _SOURCE_
<android.hardware.face.FaceManager$AuthenticationResult: android.hardware.biometrics.CryptoObject getCryptoObject()> -> _SOURCE_
<android.bluetooth.le.PeriodicAdvertisingParameters: boolean getIncludeTxPower()> -> _SOURCE_
<android.app.backup.BackupTransport: android.content.Intent configurationIntent()> -> _SOURCE_
<android.widget.AbsSeekBar: android.graphics.drawable.Drawable getThumb()> -> _SOURCE_
<android.os.TelephonyServiceManager: android.os.TelephonyServiceManager$ServiceRegisterer getTelephonyServiceRegisterer()> -> _SOURCE_
<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getInstantAppIcon(java.lang.String)> -> _SOURCE_
<android.telephony.ims.ImsRcsManager: android.telephony.ims.RcsUceAdapter getUceAdapter()> -> _SOURCE_
<android.hardware.camera2.TotalCaptureResult: java.util.List getPartialResults()> -> _SOURCE_
<android.location.GnssMeasurementCorrections: double getHorizontalPositionUncertaintyMeters()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: android.app.admin.DevicePolicyManager getParentProfileInstance(android.content.ComponentName)> -> _SOURCE_
<android.app.Application$ActivityLifecycleCallbacks: void onActivityPreStarted(android.app.Activity)> -> _SOURCE_
<com.android.internal.widget.LockscreenCredential: byte[] getCredential()> -> _SOURCE_
<android.database.AbstractWindowedCursor: boolean hasWindow()> -> _SOURCE_
<android.telephony.SubscriptionManager$OnSubscriptionsChangedListener: void onAddListenerFailed()> -> _SOURCE_
<java.text.AttributedCharacterIterator$Attribute: java.lang.String toString()> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing$Channel: android.media.audiofx.DynamicsProcessing$EqBand getPostEqBand(int)> -> _SOURCE_
<android.app.Activity: java.lang.Object getSystemService(java.lang.String)> -> _SOURCE_
<android.telephony.gsm.GsmCellLocation: java.lang.String toString()> -> _SOURCE_
<android.telephony.SubscriptionManager: java.util.List getActiveSubscriptionInfoList(boolean)> -> _SOURCE_
<android.print.PrintManager: java.util.List getPrintServiceRecommendations()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long getPhoneDataConnectionTime(int,long,int)> -> _SOURCE_
<android.telecom.ConnectionService: void onCreateIncomingConferenceFailed(android.telecom.PhoneAccountHandle,android.telecom.ConnectionRequest)> -> _SOURCE_
<android.provider.DocumentsProvider: java.lang.String[] getDocumentStreamTypes(java.lang.String,java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.gsm.GsmSmsAddress: boolean isCphsVoiceMessageIndicatorAddress()> -> _SOURCE_
<android.util.SparseArrayMap: int numElementsForKey(int)> -> _SOURCE_
<android.hardware.display.WifiDisplayStatus: int getActiveDisplayState()> -> _SOURCE_
<java.lang.String: java.lang.String valueOf(float)> -> _SOURCE_
<android.hardware.Camera$Parameters: java.util.List getSupportedAntibanding()> -> _SOURCE_
<android.preference.PreferenceManager: java.lang.String getDefaultSharedPreferencesName(android.content.Context)> -> _SOURCE_
<java.text.DecimalFormat: boolean isDecimalSeparatorAlwaysShown()> -> _SOURCE_
<android.net.wifi.WifiMigration$SettingsMigrationData: boolean isWakeUpEnabled()> -> _SOURCE_
<android.widget.ActivityChooserModel$HistoricalRecord: java.lang.String toString()> -> _SOURCE_
<android.service.autofill.CustomDescription: java.util.ArrayList getTransformations()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: android.os.PersistableBundle getTransferOwnershipBundle()> -> _SOURCE_
<java.util.HashSet: int size()> -> _SOURCE_
<android.service.contentcapture.ActivityEvent: int getEventType()> -> _SOURCE_
<android.accounts.AccountManager: android.accounts.AccountManagerFuture addAccountAsUser(java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler,android.os.UserHandle)> -> _SOURCE_
<android.widget.GridLayout: int getColumnCount()> -> _SOURCE_
<android.net.WebAddress: java.lang.String getScheme()> -> _SOURCE_
<com.android.ims.internal.uce.presence.PresResInstanceInfo: java.lang.String getReason()> -> _SOURCE_
<android.media.MediaPlayer$TrackInfo: java.lang.String getLanguage()> -> _SOURCE_
<android.telephony.PhoneNumberUtils: java.lang.CharSequence ttsSpanAsPhoneNumber(java.lang.CharSequence)> -> _SOURCE_
<android.location.LocationRequest: android.location.LocationRequest create()> -> _SOURCE_
<android.hardware.location.GeofenceHardwareRequest: double getLongitude()> -> _SOURCE_
<android.speech.tts.TextToSpeech: android.speech.tts.Voice getDefaultVoice()> -> _SOURCE_
<android.location.Geofence: double getLatitude()> -> _SOURCE_
<android.metrics.LogMaker: android.metrics.LogMaker clearProcessId()> -> _SOURCE_
<android.media.MediaExtractor: android.media.DrmInitData getDrmInitData()> -> _SOURCE_
<android.telephony.SubscriptionManager: int getDefaultVoicePhoneId()> -> _SOURCE_
<android.net.NetworkCapabilities: boolean isPrivateDnsBroken()> -> _SOURCE_
<android.provider.Telephony$ServiceStateTable: android.net.Uri getUriForSubscriptionIdAndField(int,java.lang.String)> -> _SOURCE_
<java.util.Properties: java.util.Set stringPropertyNames()> -> _SOURCE_
<android.media.tv.tuner.dvr.DvrSettings: long getLowThreshold()> -> _SOURCE_
<android.service.notification.NotificationListenerService: android.service.notification.NotificationListenerService$RankingMap getCurrentRanking()> -> _SOURCE_
<android.hardware.usb.UsbManager: android.os.ParcelFileDescriptor getControlFd(long)> -> _SOURCE_
<android.app.NotificationChannel: boolean isBlockable()> -> _SOURCE_
<android.security.keystore.KeystoreResponse: int getErrorCode()> -> _SOURCE_
<android.hardware.usb.UsbManager: java.lang.String usbFunctionsToString(long)> -> _SOURCE_
<java.util.logging.Logger: java.lang.String getResourceBundleName()> -> _SOURCE_
<android.service.autofill.FillContext: java.lang.String toString()> -> _SOURCE_
<android.hardware.biometrics.CryptoObject: android.security.identity.IdentityCredential getIdentityCredential()> -> _SOURCE_
<android.text.util.Rfc822Tokenizer: android.text.util.Rfc822Token[] tokenize(java.lang.CharSequence)> -> _SOURCE_
<android.net.LinkProperties: boolean hasIPv6DnsServer()> -> _SOURCE_
<com.android.internal.app.MediaRouteChooserDialog: int getRouteTypes()> -> _SOURCE_
<android.hardware.location.ContextHubMessage: int getVersion()> -> _SOURCE_
<android.hardware.radio.ProgramSelector$Identifier: boolean isCategoryType()> -> _SOURCE_
<android.telephony.ServiceState: int getDataRoamingType()> -> _SOURCE_
<android.media.tv.tuner.frontend.DvbcFrontendSettings: int getType()> -> _SOURCE_
<android.media.tv.tuner.frontend.Isdbs3FrontendSettings: int getStreamId()> -> _SOURCE_
<android.webkit.CookieSyncManager: android.webkit.CookieSyncManager createInstance(android.content.Context)> -> _SOURCE_
<android.database.DatabaseUtils: java.lang.String getCollationKey(java.lang.String)> -> _SOURCE_
<android.os.UserManager: void setSeedAccountData(int,java.lang.String,java.lang.String,android.os.PersistableBundle)> -> _SOURCE_
<java.io.DataInputStream: java.lang.String readUTF(java.io.DataInput)> -> _SOURCE_
<android.hardware.input.InputManager: int[] getInputDeviceIds()> -> _SOURCE_
<android.hardware.display.DeviceProductInfo: java.lang.Integer getModelYear()> -> _SOURCE_
<android.preference.DialogPreference: java.lang.CharSequence getDialogMessage()> -> _SOURCE_
<android.content.res.Configuration: java.lang.String configurationDiffToString(int)> -> _SOURCE_
<android.app.prediction.AppTarget: android.os.UserHandle getUser()> -> _SOURCE_
<android.content.res.Configuration: boolean isScreenWideColorGamut()> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: void setDiscoverableTimeout(int)> -> _SOURCE_
<com.android.internal.util.LocationPermissionChecker: boolean checkLocationPermission(java.lang.String,java.lang.String,int,java.lang.String)> -> _SOURCE_
<android.media.midi.MidiManager: android.media.midi.MidiDeviceInfo[] getDevices()> -> _SOURCE_
<android.webkit.JsPromptResult: void confirm(java.lang.String)> -> _SOURCE_
<android.telephony.ims.stub.ImsConfigImplBase: android.telephony.ims.aidl.IImsConfig getIImsConfig()> -> _SOURCE_
<android.content.ContentResolver: android.content.IContentProvider acquireProvider(android.net.Uri)> -> _SOURCE_
<android.telephony.SmsMessage: java.lang.String getEmailFrom()> -> _SOURCE_
<android.os.Environment: java.io.File getLegacyExternalStorageObbDirectory()> -> _SOURCE_
<android.webkit.GeolocationPermissions: android.webkit.GeolocationPermissions getInstance()> -> _SOURCE_
<android.telecom.RemoteConnection: android.telecom.StatusHints getStatusHints()> -> _SOURCE_
<com.android.internal.util.StateMachine: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SOURCE_
<android.util.ArrayMap: int hashCode()> -> _SOURCE_
<android.text.style.TtsSpan$ElectronicBuilder: android.text.style.TtsSpan$ElectronicBuilder setUsername(java.lang.String)> -> _SOURCE_
<android.os.PowerManager$WakeLock: boolean isHeld()> -> _SOURCE_
<android.os.Debug: java.util.Map getRuntimeStats()> -> _SOURCE_
<android.telephony.CellSignalStrengthTdscdma: android.telephony.CellSignalStrengthTdscdma copy()> -> _SOURCE_
<android.telephony.ServiceState: boolean isEmergencyOnly()> -> _SOURCE_
<android.net.metrics.ApfProgramEvent: java.lang.String toString()> -> _SOURCE_
<com.android.internal.app.MediaRouteControllerDialog: android.view.View getMediaControlView()> -> _SOURCE_
<android.bluetooth.BluetoothGattService: java.util.List getCharacteristics()> -> _SOURCE_
<android.app.timezonedetector.TelephonyTimeZoneSuggestion$Builder: android.app.timezonedetector.TelephonyTimeZoneSuggestion$Builder addDebugInfo(java.lang.String)> -> _SOURCE_
<android.sax.Element: android.sax.Element requireChild(java.lang.String)> -> _SOURCE_
<java.security.spec.ECPoint: java.math.BigInteger getAffineY()> -> _SOURCE_
<android.telecom.Connection: java.lang.String propertiesToString(int)> -> _SOURCE_
<android.app.assist.AssistStructure$ViewNode: int getId()> -> _SOURCE_
<android.hardware.location.ContextHubInfo: java.lang.String getToolchain()> -> _SOURCE_
<android.content.pm.ShortcutInfo: java.lang.String getResourceEntryName(java.lang.String)> -> _SOURCE_
<java.security.spec.RSAKeyGenParameterSpec: java.math.BigInteger getPublicExponent()> -> _SOURCE_
<android.app.ApplicationExitInfo: void setDefiningUid(int)> -> _SOURCE_
<android.media.midi.MidiDeviceService: android.media.midi.MidiDeviceInfo getDeviceInfo()> -> _SOURCE_
<android.os.Parcel: int readExceptionCode()> -> _SOURCE_
<android.hardware.location.ContextHubManager: int[] findNanoAppOnHub(int,android.hardware.location.NanoAppFilter)> -> _SOURCE_
<android.app.SearchableInfo: int getVoicePromptTextId()> -> _SOURCE_
<android.telephony.SubscriptionManager: java.util.List getSubscriptionPlans(int)> -> _SOURCE_
<android.service.voice.AlwaysOnHotwordDetector: int getSupportedAudioCapabilities()> -> _SOURCE_
<android.text.BidiFormatter$Builder: android.text.BidiFormatter build()> -> _SOURCE_
<android.os.UserManager: boolean isUserAGoat()> -> _SOURCE_
<android.telephony.ims.feature.MmTelFeature$MmTelCapabilities: java.lang.String toString()> -> _SOURCE_
<com.android.internal.telephony.cdma.SmsMessage: int getNumOfVoicemails()> -> _SOURCE_
<android.telephony.euicc.EuiccCardManager: void requestProfile(java.lang.String,java.lang.String,java.util.concurrent.Executor,android.telephony.euicc.EuiccCardManager$ResultCallback)> -> _SOURCE_
<android.view.textclassifier.TextClassification: java.lang.String getId()> -> _SOURCE_
<android.telephony.TelephonyManager: void setSimCountryIsoForPhone(int,java.lang.String)> -> _SOURCE_
<java.util.EnumMap: int size()> -> _SOURCE_
<android.app.NotificationManager$Policy: boolean allowEvents()> -> _SOURCE_
<org.xml.sax.helpers.DefaultHandler: void unparsedEntityDecl(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)> -> _SOURCE_
<android.net.NetworkTemplate: int getCollapsedRatType(int)> -> _SOURCE_
<android.location.GnssNavigationMessage$Callback: void onStatusChanged(int)> -> _SOURCE_
<com.android.internal.os.PowerProfile: double getAveragePower(java.lang.String)> -> _SOURCE_
<android.app.KeyguardManager: boolean isValidLockPasswordComplexity(int,byte[],int)> -> _SOURCE_
<android.os.VibrationAttributes: int getFlags()> -> _SOURCE_
<android.net.http.HttpResponseCache: long size()> -> _SOURCE_
<android.os.health.SystemHealthManager: android.os.health.HealthStats takeMyUidSnapshot()> -> _SOURCE_
<android.app.usage.NetworkStats$Bucket: int getDefaultNetworkStatus()> -> _SOURCE_
<android.media.tv.tuner.frontend.FrontendInfo: android.util.Range getFrequencyRange()> -> _SOURCE_
<java.util.concurrent.ForkJoinTask: java.lang.Throwable getException()> -> _SOURCE_
<android.service.notification.ZenPolicy: int getPriorityCategoryAlarms()> -> _SOURCE_
<android.drm.DrmInfoRequest: java.lang.Object get(java.lang.String)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getSimOperator()> -> _SOURCE_
<java.lang.reflect.Constructor: java.lang.String toGenericString()> -> _SOURCE_
<android.hardware.camera2.CameraCaptureSession$CaptureCallback: void onCaptureFailed(android.hardware.camera2.CameraCaptureSession,android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureFailure)> -> _SOURCE_
<android.util.JsonReader: java.lang.String toString()> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing$MbcBand: float getReleaseTime()> -> _SOURCE_
<java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String,java.lang.String)> -> _SOURCE_
<android.os.Parcel: android.os.Parcel obtain()> -> _SOURCE_
<android.content.ContextWrapper: java.io.File getCacheDir()> -> _SOURCE_
<java.util.concurrent.ThreadPoolExecutor: int getActiveCount()> -> _SOURCE_
<android.telecom.ParcelableCall: int getVideoState()> -> _SOURCE_
<android.os.Debug: long countInstancesOfClass(java.lang.Class)> -> _SOURCE_
<android.provider.DocumentsProvider: android.database.Cursor queryChildDocumentsForManage(java.lang.String,java.lang.String[],java.lang.String)> -> _SOURCE_
<android.telephony.ims.stub.ImsConfigImplBase$ImsConfigStub: void updateImsCarrierConfigs(android.os.PersistableBundle)> -> _SOURCE_
<android.os.Debug: boolean waitingForDebugger()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: int getPowerSaveModeEnabledCount(int)> -> _SOURCE_
<android.app.admin.DeviceAdminReceiver: android.content.ComponentName getWho(android.content.Context)> -> _SOURCE_
<android.renderscript.Sampler: float getAnisotropy()> -> _SOURCE_
<android.telecom.Logging.SessionManager: java.lang.String printActiveSessions()> -> _SOURCE_
<android.media.tv.tuner.frontend.Isdbs3FrontendSettings: int getStreamIdType()> -> _SOURCE_
<java.security.KeyStore: java.util.Enumeration aliases()> -> _SOURCE_
<java.security.Provider: java.lang.Object computeIfPresent(java.lang.Object,java.util.function.BiFunction)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isApplicationHidden(android.content.ComponentName,java.lang.String)> -> _SOURCE_
<android.net.UidRange: java.lang.String toString()> -> _SOURCE_
<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.HdmiTvClient getTvClient()> -> _SOURCE_
<android.os.incremental.IncrementalManager: boolean isFeatureEnabled()> -> _SOURCE_
<android.bluetooth.BluetoothSocket: java.io.OutputStream getOutputStream()> -> _SOURCE_
<javax.net.ssl.TrustManagerFactory: java.lang.String getAlgorithm()> -> _SOURCE_
<android.view.WindowManager: boolean shouldShowSystemDecors(int)> -> _SOURCE_
<android.media.session.MediaController: android.media.session.MediaController$TransportControls getTransportControls()> -> _SOURCE_
<android.database.sqlite.SQLiteConnection: boolean isPrimaryConnection()> -> _SOURCE_
<android.app.Notification$Action$WearableExtender: boolean isAvailableOffline()> -> _SOURCE_
<android.hardware.Camera$Parameters: java.util.List getSupportedColorEffects()> -> _SOURCE_
<android.app.usage.EventStats: int getEventType()> -> _SOURCE_
<android.database.sqlite.SQLiteQueryBuilder: boolean isStrictColumns()> -> _SOURCE_
<android.window.WindowContainerTransaction$Change: android.graphics.Rect getEnterPipBounds()> -> _SOURCE_
<android.media.AudioManager: boolean isAudioServerRunning()> -> _SOURCE_
<android.app.Notification: int getGroupAlertBehavior()> -> _SOURCE_
<android.app.NotificationManager$Policy: boolean showBadges()> -> _SOURCE_
<android.widget.ListView: android.graphics.drawable.Drawable getOverscrollHeader()> -> _SOURCE_
<android.webkit.WebChromeClient: void getVisitedHistory(android.webkit.ValueCallback)> -> _SOURCE_
<com.android.internal.app.MessageSamplingConfig: int getSampledOpCode()> -> _SOURCE_
<android.view.ViewRootImpl: void addConfigCallback(android.view.ViewRootImpl$ConfigChangedCallback)> -> _SOURCE_
<android.app.Activity: android.app.FragmentManager getFragmentManager()> -> _SOURCE_
<android.app.ApplicationPackageManager: android.content.ComponentName getHomeActivities(java.util.List)> -> _SOURCE_
<android.telephony.TelephonyManager: android.net.Uri getVoicemailRingtoneUri(android.telecom.PhoneAccountHandle)> -> _SOURCE_
<android.telecom.Call$Callback: void onHandoverComplete(android.telecom.Call)> -> _SOURCE_
<android.hardware.hdmi.HdmiDeviceInfo: int idForCecDevice(int)> -> _SOURCE_
<android.os.UserManager: android.graphics.Bitmap getUserIcon(int)> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec$Builder setDigests(java.lang.String[])> -> _SOURCE_
<android.timezone.TelephonyNetwork: java.lang.String toString()> -> _SOURCE_
<android.hardware.usb.UsbAccessory: java.lang.String getManufacturer()> -> _SOURCE_
<com.android.internal.util.CollectionUtils: int size(java.util.Collection)> -> _SOURCE_
<android.telephony.SmsCbMessage: java.lang.String toString()> -> _SOURCE_
<android.content.ContentProviderOperation: android.content.ContentProviderOperation$Builder newAssertQuery(android.net.Uri)> -> _SOURCE_
<org.apache.http.conn.ssl.AbstractVerifier: int countDots(java.lang.String)> -> _SOURCE_
<android.app.AppOpsManager$AttributedOpEntry: long getLastAccessTime(int,int,int)> -> _SOURCE_
<android.hardware.hdmi.HdmiDeviceInfo: int getDeviceType()> -> _SOURCE_
<android.widget.AdapterView: java.lang.Object getItemAtPosition(int)> -> _SOURCE_
<java.security.CodeSigner: java.security.cert.CertPath getSignerCertPath()> -> _SOURCE_
<android.media.MediaCodecInfo$EncoderCapabilities: android.util.Range getComplexityRange()> -> _SOURCE_
<android.companion.BluetoothLeDeviceFilter: java.lang.String getDeviceDisplayName(android.bluetooth.le.ScanResult)> -> _SOURCE_
<android.gesture.GestureStore: int getSequenceType()> -> _SOURCE_
<android.content.IntentFilter: boolean needsVerification()> -> _SOURCE_
<android.widget.AbsListView: void onNestedScrollAccepted(android.view.View,android.view.View,int)> -> _SOURCE_
<java.nio.charset.UnmappableCharacterException: int getInputLength()> -> _SOURCE_
<android.media.AudioManager: java.lang.String audioFocusToString(int)> -> _SOURCE_
<android.app.admin.SystemUpdatePolicy: int getInstallWindowEnd()> -> _SOURCE_
<android.location.GpsMeasurement: boolean hasCarrierCycles()> -> _SOURCE_
<android.view.textservice.SentenceSuggestionsInfo: int getSuggestionsCount()> -> _SOURCE_
<android.os.Parcel: java.io.FileDescriptor[] createRawFileDescriptorArray()> -> _SOURCE_
<android.hardware.camera2.CameraManager: java.lang.String[] getCameraIdListNoLazy()> -> _SOURCE_
<android.content.Loader: android.content.Context getContext()> -> _SOURCE_
<android.hardware.display.WifiDisplayStatus: java.lang.String toString()> -> _SOURCE_
<android.os.BatteryStats: int mapToInternalProcessState(int)> -> _SOURCE_
<android.app.contentsuggestions.ContentSelection: java.lang.String getId()> -> _SOURCE_
<android.mtp.MtpDevice: android.mtp.MtpDeviceInfo getDeviceInfo()> -> _SOURCE_
<android.bluetooth.BluetoothGattService: android.bluetooth.BluetoothGattCharacteristic getCharacteristic(java.util.UUID)> -> _SOURCE_
<android.telephony.ims.stub.ImsConfigImplBase$ImsConfigStub: void addImsConfigCallback(android.telephony.ims.aidl.IImsConfigCallback)> -> _SOURCE_
<android.widget.DatePicker: android.widget.CalendarView getCalendarView()> -> _SOURCE_
<android.preference.MultiCheckPreference: java.lang.String[] getEntryValues()> -> _SOURCE_
<android.view.View: boolean isImportantForContentCapture()> -> _SOURCE_
<android.telecom.ConnectionService: void addExistingConnection(android.telecom.PhoneAccountHandle,android.telecom.Connection,android.telecom.Conference)> -> _SOURCE_
<android.view.InputDevice: int getSources()> -> _SOURCE_
<android.telephony.ims.ImsCallProfile: int getRestrictCause()> -> _SOURCE_
<java.net.PasswordAuthentication: java.lang.String getUserName()> -> _SOURCE_
<com.android.internal.app.MessageSamplingConfig: long getExpirationTimeSinceBootMillis()> -> _SOURCE_
<android.view.textclassifier.TextSelection: java.lang.String getId()> -> _SOURCE_
<android.widget.Toolbar: java.lang.CharSequence getLogoDescription()> -> _SOURCE_
<android.service.contentcapture.ContentCaptureService: void onActivitySnapshot(android.view.contentcapture.ContentCaptureSessionId,android.service.contentcapture.SnapshotData)> -> _SOURCE_
<android.app.ApplicationPackageManager: boolean isInstantApp()> -> _SOURCE_
<android.content.res.Resources: int calcConfigChanges(android.content.res.Configuration)> -> _SOURCE_
<android.hardware.fingerprint.FingerprintManager: int postEnroll()> -> _SOURCE_
<android.security.keystore.KeyInfo: int getUserAuthenticationType()> -> _SOURCE_
<android.location.GpsMeasurement: double getAccumulatedDeltaRangeInMeters()> -> _SOURCE_
<android.webkit.UrlInterceptRegistry: boolean urlInterceptDisabled()> -> _SOURCE_
<android.telephony.CellIdentityLte: android.telephony.gsm.GsmCellLocation asCellLocation()> -> _SOURCE_
<com.android.ims.internal.uce.common.UceLong: long getUceLong()> -> _SOURCE_
<com.android.internal.util.TypedProperties: long getLong(java.lang.String)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long getBatteryUptime(long)> -> _SOURCE_
<android.media.MediaMetadataRetriever: void setDataSource(java.lang.String,java.util.Map)> -> _SOURCE_
<com.android.internal.net.VpnProfile: boolean hasDns()> -> _SOURCE_
<android.app.WindowConfiguration: java.lang.String activityTypeToString(int)> -> _SOURCE_
<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo getCollectionItemInfo()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getLine1Number(int)> -> _SOURCE_
<android.telephony.data.ApnSetting: java.lang.String getEntryName()> -> _SOURCE_
<android.media.AudioAttributes: int getContentType()> -> _SOURCE_
<android.content.res.Configuration: int resetScreenLayout(int)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: long getRequiredStrongAuthTimeout(android.content.ComponentName)> -> _SOURCE_
<java.lang.Class: java.lang.Class getSuperclass()> -> _SOURCE_
<android.telephony.SignalStrength: int getCdmaLevel()> -> _SOURCE_
<android.telecom.ParcelableCall: android.telecom.GatewayInfo getGatewayInfo()> -> _SOURCE_
<android.hardware.GeomagneticField: float getFieldStrength()> -> _SOURCE_
<android.hardware.display.DisplayViewport: java.lang.String toString()> -> _SOURCE_
<android.service.autofill.SaveRequest: java.util.List getDatasetIds()> -> _SOURCE_
<android.telecom.PhoneAccount: android.os.Bundle getExtras()> -> _SOURCE_
<android.service.watchdog.ExplicitHealthCheckService$PackageConfig: java.lang.String toString()> -> _SOURCE_
<android.os.Environment$UserEnvironment: java.io.File getExternalStoragePublicDirectory(java.lang.String)> -> _SOURCE_
<android.content.pm.ModuleInfo: java.lang.String getApexModuleName()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getDeviceSoftwareVersion(int)> -> _SOURCE_
<android.net.LinkProperties: boolean isIdenticalPcscfs(android.net.LinkProperties)> -> _SOURCE_
<android.content.pm.PackageManager: java.util.List getInstalledModules(int)> -> _SOURCE_
<android.view.WindowManager$LayoutParams: java.lang.String toString()> -> _SOURCE_
<android.telephony.ims.stub.ImsUtImplBase: int queryClip()> -> _SOURCE_
<java.lang.Package: java.lang.'annotation'.Annotation[] getAnnotations()> -> _SOURCE_
<android.location.GnssStatus: boolean hasEphemerisData(int)> -> _SOURCE_
<android.nfc.NdefRecord: java.lang.String toString()> -> _SOURCE_
<android.view.TouchDelegate: android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo getTouchDelegateInfo()> -> _SOURCE_
<android.telecom.Conference: long getConnectionTime()> -> _SOURCE_
<android.os.StrictMode: void onIncorrectContextUsed(java.lang.String,java.lang.Throwable)> -> _SOURCE_
<android.telephony.ims.compat.feature.MMTelFeature: android.telephony.ims.stub.ImsEcbmImplBase getEcbmInterface()> -> _SOURCE_
<android.permission.PermissionControllerService: android.os.IBinder onBind(android.content.Intent)> -> _SOURCE_
<android.app.ActivityManager: void getMyMemoryState(android.app.ActivityManager$RunningAppProcessInfo)> -> _SOURCE_
<android.bluetooth.BluetoothGattCharacteristic: byte[] getValue()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: com.android.internal.os.BatteryStatsImpl$SamplingTimer getKernelWakelockTimerLocked(java.lang.String)> -> _SOURCE_
<java.net.Inet4Address: byte[] getAddress()> -> _SOURCE_
<android.telecom.Call: java.util.List getChildren()> -> _SOURCE_
<android.media.MediaDrm: void clearOnExpirationUpdateListener()> -> _SOURCE_
<android.os.UserManager: android.os.Bundle getUserRestrictions(android.os.UserHandle)> -> _SOURCE_
<android.app.Notification$WearableExtender: int getContentIcon()> -> _SOURCE_
<android.os.Process: long getStartUptimeMillis()> -> _SOURCE_
<android.net.LinkProperties: boolean hasIpv4UnreachableDefaultRoute()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getSimCountryIso()> -> _SOURCE_
<android.os.storage.StorageManager: long getAllocatableBytes(java.util.UUID)> -> _SOURCE_
<android.app.ApplicationPackageManager: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int)> -> _SOURCE_
<android.content.BroadcastReceiver$PendingResult: java.lang.String getResultData()> -> _SOURCE_
<android.telecom.TelecomManager: java.util.List getPhoneAccountsForPackage()> -> _SOURCE_
<android.content.pm.LauncherActivityInfo: android.content.ComponentName getComponentName()> -> _SOURCE_
<android.media.MediaCodec$MediaImage: long getTimestamp()> -> _SOURCE_
<java.net.ContentHandler: java.lang.Object getContent(java.net.URLConnection,java.lang.Class[])> -> _SOURCE_
<android.content.res.ResourcesImpl: void clearAllCaches()> -> _SOURCE_
<android.view.ViewGroup: int getTransientViewIndex(int)> -> _SOURCE_
<android.app.NotificationManager: int zenModeFromInterruptionFilter(int,int)> -> _SOURCE_
<android.telephony.emergency.EmergencyNumber: java.lang.String getMnc()> -> _SOURCE_
<android.util.MergedConfiguration: java.lang.String toString()> -> _SOURCE_
<android.app.Notification$Action: android.app.RemoteInput[] getRemoteInputs()> -> _SOURCE_
<java.time.temporal.TemporalAccessor: int get(java.time.temporal.TemporalField)> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor queryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.bluetooth.BluetoothGattService: int getType()> -> _SOURCE_
<android.content.ContextWrapper: int getWallpaperDesiredMinimumWidth()> -> _SOURCE_
<android.app.ApplicationPackageManager: boolean isPackageSuspended(java.lang.String)> -> _SOURCE_
<java.util.ArrayList: java.lang.Object[] toArray()> -> _SOURCE_
<android.os.UserManager: android.os.UserHandle getProfileParent(android.os.UserHandle)> -> _SOURCE_
<android.app.AppOpsManager$HistoricalOp: long getAccessCount(int,int,int)> -> _SOURCE_
<android.graphics.fonts.FontStyle: java.lang.String toString()> -> _SOURCE_
<android.media.MediaPlayer: android.os.Parcel newRequest()> -> _SOURCE_
<android.media.MediaFile: java.lang.String getMimeType(java.lang.String,int)> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing$MbcBand: float getRatio()> -> _SOURCE_
<android.provider.DeviceConfig: long getLong(java.lang.String,java.lang.String,long)> -> _SOURCE_
<java.time.YearMonth: java.time.YearMonth parse(java.lang.CharSequence)> -> _SOURCE_
<android.content.pm.ApplicationInfo: java.lang.String[] getSplitResourcePaths()> -> _SOURCE_
<android.telephony.ServiceState: int getCdmaSystemId()> -> _SOURCE_
<android.print.PrintJobInfo: android.print.PrintDocumentInfo getDocumentInfo()> -> _SOURCE_
<com.android.internal.util.LocationPermissionChecker: boolean checkCallersLocationPermission(java.lang.String,java.lang.String,int,boolean,java.lang.String)> -> _SOURCE_
<android.provider.FontRequest: java.util.List getCertificates()> -> _SOURCE_
<android.content.RestrictionsManager: void notifyPermissionResponse(java.lang.String,android.os.PersistableBundle)> -> _SOURCE_
<android.accessibilityservice.AccessibilityGestureEvent: java.lang.String toString()> -> _SOURCE_
<android.location.GpsMeasurement: boolean hasElevationInDeg()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.lang.CharSequence getDeviceOwnerLockScreenInfo()> -> _SOURCE_
<android.content.integrity.Rule: java.lang.String toString()> -> _SOURCE_
<android.media.MediaCodec: android.view.Surface createPersistentInputSurface()> -> _SOURCE_
<com.android.internal.telephony.uicc.asn1.Asn1Node: java.lang.String toHex()> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec: java.security.spec.AlgorithmParameterSpec getAlgorithmParameterSpec()> -> _SOURCE_
<java.net.URLConnection: boolean getAllowUserInteraction()> -> _SOURCE_
<android.media.AudioManager: boolean isVolumeFixed()> -> _SOURCE_
<java.security.Provider: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)> -> _SOURCE_
<android.hardware.camera2.params.BlackLevelPattern: java.lang.String toString()> -> _SOURCE_
<android.provider.ContactsContract$RawContacts: java.lang.String getLocalAccountType(android.content.Context)> -> _SOURCE_
<android.view.contentcapture.ContentCaptureContext: android.content.ComponentName getActivityComponent()> -> _SOURCE_
<com.android.ims.internal.uce.options.OptionsCmdId: int getCmdId()> -> _SOURCE_
<com.android.internal.telephony.GsmAlphabet: char gsmToChar(int)> -> _SOURCE_
<android.security.keystore.KeyProtection: java.util.Date getKeyValidityStart()> -> _SOURCE_
<android.hardware.usb.UsbPort: int getSupportedContaminantProtectionModes()> -> _SOURCE_
<android.hardware.fingerprint.FingerprintManager: java.lang.String getErrorString(android.content.Context,int,int)> -> _SOURCE_
<com.android.internal.app.procstats.ProcessState: java.lang.String toString()> -> _SOURCE_
<com.android.server.AppWidgetBackupBridge: byte[] getWidgetState(java.lang.String,int)> -> _SOURCE_
<android.hardware.Sensor: int getMaxDelay()> -> _SOURCE_
<android.metrics.LogMaker: int getType()> -> _SOURCE_
<android.hardware.Camera$Parameters: void setGpsProcessingMethod(java.lang.String)> -> _SOURCE_
<android.telephony.ims.ImsException: int getCode()> -> _SOURCE_
<android.media.AudioFocusInfo: int getLossReceived()> -> _SOURCE_
<java.lang.invoke.MethodHandleInfo: java.lang.String toString(int,java.lang.Class,java.lang.String,java.lang.invoke.MethodType)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: long getUserCpuTimeUs(int)> -> _SOURCE_
<android.view.ScrollCaptureSession: void disconnect()> -> _SOURCE_
<android.media.tv.tuner.frontend.Atsc3PlpSettings: int getCodeRate()> -> _SOURCE_
<java.nio.channels.AsynchronousSocketChannel: java.nio.channels.spi.AsynchronousChannelProvider provider()> -> _SOURCE_
<android.database.TranslatingCursor: android.database.Cursor getWrappedCursor()> -> _SOURCE_
<android.app.Notification$MessagingStyle$Message: android.app.Person getSenderPerson()> -> _SOURCE_
<java.util.jar.JarInputStream: java.util.jar.Manifest getManifest()> -> _SOURCE_
<java.util.GregorianCalendar: java.lang.String getCalendarType()> -> _SOURCE_
<android.animation.Animator: java.util.ArrayList getListeners()> -> _SOURCE_
<android.net.MobileLinkQualityInfo: int getRssi()> -> _SOURCE_
<android.security.ConfirmationCallback: void onError(java.lang.Throwable)> -> _SOURCE_
<android.telecom.RemoteConnection$Callback: void onRingbackRequested(android.telecom.RemoteConnection,boolean)> -> _SOURCE_
<android.os.VibrationEffect$Prebaked: long getDuration()> -> _SOURCE_
<java.net.Inet6Address: byte[] getAddress()> -> _SOURCE_
<android.os.Parcel: long readLong()> -> _SOURCE_
<android.app.Activity: boolean shouldShowRequestPermissionRationale(java.lang.String)> -> _SOURCE_
<android.security.keystore.KeyProtection: java.util.Date getKeyValidityForOriginationEnd()> -> _SOURCE_
<android.os.BasicShellCommandHandler: java.io.FileDescriptor getOutFileDescriptor()> -> _SOURCE_
<android.location.LocationListener: void onStatusChanged(java.lang.String,int,android.os.Bundle)> -> _SOURCE_
<android.service.autofill.SaveInfo: android.content.IntentSender getNegativeActionListener()> -> _SOURCE_
<java.text.DateFormat: java.text.DateFormat getDateInstance(int)> -> _SOURCE_
<android.content.pm.PackageParser$SigningDetails: boolean checkCapability(java.lang.String,int)> -> _SOURCE_
<android.media.MediaRoute2ProviderService: void notifySessionUpdated(android.media.RoutingSessionInfo)> -> _SOURCE_
<java.security.Security: java.lang.String getProperty(java.lang.String)> -> _SOURCE_
<android.view.textclassifier.TextClassification: android.view.View$OnClickListener getOnClickListener()> -> _SOURCE_
<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy$Builder detectDiskWrites()> -> _SOURCE_
<java.util.concurrent.ScheduledThreadPoolExecutor: boolean getRemoveOnCancelPolicy()> -> _SOURCE_
<com.android.internal.telephony.cdma.SmsMessage: java.util.ArrayList getSmsCbProgramData()> -> _SOURCE_
<android.app.backup.BackupManager: boolean isBackupEnabled()> -> _SOURCE_
<java.util.ResourceBundle: java.lang.String getBaseBundleName()> -> _SOURCE_
<android.provider.DocumentsContract: android.net.Uri buildRecentDocumentsUri(java.lang.String,java.lang.String)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getCdmaPrlVersion(int)> -> _SOURCE_
<android.provider.ContactsContract$RawContacts: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)> -> _SOURCE_
<java.lang.reflect.AccessibleObject: boolean isAccessible()> -> _SOURCE_
<android.os.BasicShellCommandHandler: java.lang.String getNextArg()> -> _SOURCE_
<android.net.NetworkUtils: int inetAddressToInt(java.net.Inet4Address)> -> _SOURCE_
<android.app.SystemServiceRegistry: java.lang.String getSystemServiceClassName(java.lang.String)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getSimCountryIso(int)> -> _SOURCE_
<android.media.MediaTranscodeManager$TranscodingJob: int getStatus()> -> _SOURCE_
<android.app.ApplicationPackageManager: boolean isPackageSuspendedForUser(java.lang.String,int)> -> _SOURCE_
<android.media.AudioManager: boolean registerRemoteController(android.media.RemoteController)> -> _SOURCE_
<android.net.http.SslError: java.lang.String toString()> -> _SOURCE_
<android.net.WifiKey: java.lang.String toString()> -> _SOURCE_
<android.view.Display: int getRemoveMode()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean resetRadioConfig()> -> _SOURCE_
<java.io.InputStreamReader: java.lang.String getEncoding()> -> _SOURCE_
<android.view.accessibility.AccessibilityEvent: long getEventTime()> -> _SOURCE_
<android.os.storage.StorageVolume: boolean isEmulated()> -> _SOURCE_
<android.net.ProxyInfo: java.lang.String[] getExclusionList()> -> _SOURCE_
<android.location.GpsMeasurement: boolean hasSnrInDb()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: int getDischargeAmountScreenDoze()> -> _SOURCE_
<android.media.tv.tuner.filter.TemiEvent: byte[] getDescriptorData()> -> _SOURCE_
<android.bluetooth.BluetoothA2dp: int isOptionalCodecsEnabled(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing$Eq: java.lang.String toString()> -> _SOURCE_
<android.content.pm.ShortcutInfo: void setLongLived()> -> _SOURCE_
<java.util.concurrent.locks.ReentrantLock: int getHoldCount()> -> _SOURCE_
<android.os.Debug$MemoryInfo: java.lang.String getMemoryStat(java.lang.String)> -> _SOURCE_
<android.os.SystemClock: java.time.Clock uptimeClock()> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: boolean isLeExtendedAdvertisingSupported()> -> _SOURCE_
<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.BlockingQueue getQueue()> -> _SOURCE_
<java.net.HttpCookie: boolean isHttpOnly()> -> _SOURCE_
<android.media.AudioAttributes$Builder: android.media.AudioAttributes build()> -> _SOURCE_
<android.location.Location: boolean hasElapsedRealtimeUncertaintyNanos()> -> _SOURCE_
<android.widget.GridLayout: boolean getUseDefaultMargins()> -> _SOURCE_
<java.util.concurrent.ConcurrentLinkedQueue: java.lang.Object[] toArray()> -> _SOURCE_
<android.security.keystore.recovery.RecoveryController: void setRecoverySecretTypes(int[])> -> _SOURCE_
<android.location.Country: java.lang.String toString()> -> _SOURCE_
<android.content.ContextWrapper: android.content.ContentCaptureOptions getContentCaptureOptions()> -> _SOURCE_
<android.os.storage.StorageManager: boolean checkPermissionAndAppOp(android.content.Context,boolean,int,int,java.lang.String,java.lang.String,java.lang.String,int)> -> _SOURCE_
<android.location.GnssClock: boolean hasElapsedRealtimeNanos()> -> _SOURCE_
<android.net.NetworkStats: long getElapsedRealtime()> -> _SOURCE_
<android.telecom.DefaultDialerManager: boolean setDefaultDialerApplication(android.content.Context,java.lang.String)> -> _SOURCE_
<com.android.internal.util.TypedProperties: byte getByte(java.lang.String)> -> _SOURCE_
<android.telephony.BarringInfo: android.telephony.BarringInfo createLocationInfoSanitizedCopy()> -> _SOURCE_
<android.nfc.tech.Ndef: android.nfc.NdefMessage getCachedNdefMessage()> -> _SOURCE_
<android.renderscript.ProgramRaster: android.renderscript.ProgramRaster CULL_NONE(android.renderscript.RenderScript)> -> _SOURCE_
<android.nfc.tech.MifareClassic: int getTimeout()> -> _SOURCE_
<java.time.YearMonth: java.time.YearMonth now()> -> _SOURCE_
<android.net.NetworkProvider: android.os.Messenger getMessenger()> -> _SOURCE_
<android.view.ViewGroup$MarginLayoutParams: int getMarginStart()> -> _SOURCE_
<android.os.connectivity.WifiActivityEnergyInfo: long getControllerEnergyUsedMicroJoules()> -> _SOURCE_
<android.content.IntentFilter: int getOrder()> -> _SOURCE_
<java.io.OutputStreamWriter: void flush()> -> _SOURCE_
<android.view.ViewConfiguration: int getMinimumFlingVelocity()> -> _SOURCE_
<android.content.pm.InstallSourceInfo: java.lang.String getOriginatingPackageName()> -> _SOURCE_
<android.telephony.TelephonyManager: void factoryReset(int)> -> _SOURCE_
<android.app.DirectAction: android.content.LocusId getLocusId()> -> _SOURCE_
<android.webkit.DateSorter: java.lang.String getLabel(int)> -> _SOURCE_
<android.provider.DeviceConfig: java.util.List getPublicNamespaces()> -> _SOURCE_
<android.media.MediaRouter2$RoutingController: java.util.List getSelectableRoutes()> -> _SOURCE_
<android.view.inputmethod.InputConnectionWrapper: android.os.Handler getHandler()> -> _SOURCE_
<android.bluetooth.BluetoothGattDescriptor: int getInstanceId()> -> _SOURCE_
<android.widget.SlidingDrawer: boolean isOpened()> -> _SOURCE_
<android.widget.ActivityChooserView: boolean dismissPopup()> -> _SOURCE_
<android.app.Notification$WearableExtender: boolean getHintShowBackgroundOnly()> -> _SOURCE_
<android.media.tv.tuner.frontend.Atsc3FrontendSettings$Builder: android.media.tv.tuner.frontend.Atsc3FrontendSettings build()> -> _SOURCE_
<android.os.UserManager: boolean hasUserRestriction(java.lang.String)> -> _SOURCE_
<android.view.InputDevice: int[] getDeviceIds()> -> _SOURCE_
<android.telephony.data.DataService$DataServiceProvider: void setupDataCall(int,android.telephony.data.DataProfile,boolean,boolean,int,android.net.LinkProperties,android.telephony.data.DataServiceCallback)> -> _SOURCE_
<java.util.SimpleTimeZone: int getRawOffset()> -> _SOURCE_
<android.bluetooth.BluetoothDevice: java.lang.String getAlias()> -> _SOURCE_
<android.text.SpannableStringBuilder: void clear()> -> _SOURCE_
<android.accounts.AccountManager: boolean notifyAccountAuthenticated(android.accounts.Account)> -> _SOURCE_
<android.service.autofill.augmented.PresentationParams$SystemPopupPresentationParams: android.service.autofill.augmented.PresentationParams$Area getSuggestionArea()> -> _SOURCE_
<android.content.IntentFilter$AuthorityEntry: int match(android.net.Uri)> -> _SOURCE_
<android.os.Parcel: byte[] readBlob()> -> _SOURCE_
<android.app.AppOpsManager: java.lang.String toReceiverId(android.app.PendingIntent)> -> _SOURCE_
<android.telephony.CellInfo: android.telephony.CellInfo sanitizeLocationInfo()> -> _SOURCE_
<android.view.View: java.util.ArrayList getTouchables()> -> _SOURCE_
<android.nfc.cardemulation.CardEmulation: boolean isDefaultServiceForAid(android.content.ComponentName,java.lang.String)> -> _SOURCE_
<com.android.internal.accessibility.util.ShortcutUtils: boolean isComponentIdExistingInSettings(android.content.Context,int,java.lang.String)> -> _SOURCE_
<android.view.ActionProvider: boolean hasSubMenu()> -> _SOURCE_
<android.net.TestNetworkManager: android.net.TestNetworkInterface createTapInterface()> -> _SOURCE_
<com.android.internal.util.TypedProperties: java.lang.String getString(java.lang.String)> -> _SOURCE_
<java.util.ArrayList: int size()> -> _SOURCE_
<android.print.PrintAttributes$MediaSize: int getHeightMils()> -> _SOURCE_
<android.content.BroadcastReceiver: android.content.BroadcastReceiver$PendingResult getPendingResult()> -> _SOURCE_
<android.service.notification.NotificationAssistantService: void onPanelHidden()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$LongSamplingCounterArray: long[] getCountsLocked(int)> -> _SOURCE_
<android.view.KeyEvent: java.lang.String actionToString(int)> -> _SOURCE_
<android.renderscript.Sampler: android.renderscript.Sampler$Value getWrapT()> -> _SOURCE_
<java.util.TreeMap: java.lang.Object clone()> -> _SOURCE_
<android.hardware.Sensor: int getVersion()> -> _SOURCE_
<android.media.AudioTrack: int getLatency()> -> _SOURCE_
<android.renderscript.Font: android.renderscript.Font createFromAsset(android.renderscript.RenderScript,android.content.res.Resources,java.lang.String,float)> -> _SOURCE_
<java.util.concurrent.CountedCompleter: void helpComplete(int)> -> _SOURCE_
<android.drm.ProcessedData: byte[] getData()> -> _SOURCE_
<android.text.PackedIntVector: int width()> -> _SOURCE_
<android.content.ContentResolver: boolean getSyncAutomaticallyAsUser(android.accounts.Account,java.lang.String,int)> -> _SOURCE_
<android.telephony.ims.ImsCallSession$Listener: void callSessionUpdateFailed(android.telephony.ims.ImsCallSession,android.telephony.ims.ImsReasonInfo)> -> _SOURCE_
<android.app.NotificationManager: android.service.notification.StatusBarNotification[] getActiveNotifications()> -> _SOURCE_
<java.time.YearMonth: java.time.YearMonth now(java.time.ZoneId)> -> _SOURCE_
<android.net.IpSecManager$SecurityParameterIndex: int getSpi()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long getUahDischargeScreenOff(int)> -> _SOURCE_
<android.app.servertransaction.ClientTransaction: android.app.IApplicationThread getClient()> -> _SOURCE_
<android.net.NetworkProvider: void onNetworkRequested(android.net.NetworkRequest,int,int)> -> _SOURCE_
<android.app.Activity: android.view.View onCreatePanelView(int)> -> _SOURCE_
<android.telephony.TelephonyManager: android.telephony.CdmaEriInformation getCdmaEriInformation()> -> _SOURCE_
<android.metrics.LogMaker: java.lang.String getPackageName()> -> _SOURCE_
<android.hardware.camera2.CameraManager: android.hardware.camera2.CameraCharacteristics getCameraCharacteristics(java.lang.String)> -> _SOURCE_
<java.util.concurrent.ThreadPoolExecutor: boolean isTerminating()> -> _SOURCE_
<android.telephony.SmsManager: int getSubscriptionId()> -> _SOURCE_
<android.hardware.radio.RadioManager$ProgramInfo: boolean isTrafficAnnouncementActive()> -> _SOURCE_
<android.net.util.MacAddressUtils: android.net.MacAddress createRandomUnicastAddress(android.net.MacAddress,java.util.Random)> -> _SOURCE_
<android.security.KeyStore: boolean isConfirmationPromptSupported()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: int getColumnIndex()> -> _SOURCE_
<com.android.internal.os.LoggingPrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])> -> _SOURCE_
<com.android.internal.widget.LockPatternUtils$StrongAuthTracker: boolean isTrustAllowedForUser(int)> -> _SOURCE_
<android.hardware.usb.UsbEndpoint: int getMaxPacketSize()> -> _SOURCE_
<android.app.Notification$BigPictureStyle: android.widget.RemoteViews makeBigContentView()> -> _SOURCE_
<android.content.ContentResolver: android.content.IContentService getContentService()> -> _SOURCE_
<android.app.blob.BlobStoreManager$Session: long getSize()> -> _SOURCE_
<java.net.Inet4Address: java.lang.String getHostAddress()> -> _SOURCE_
<android.app.ApplicationPackageManager: void invalidateHasSystemFeatureCache()> -> _SOURCE_
<android.content.ContentProviderOperation: java.lang.String[] resolveSelectionArgsBackReferences(android.content.ContentProviderResult[],int)> -> _SOURCE_
<android.provider.ContactsContract$RawContacts: java.lang.String getLocalAccountName(android.content.Context)> -> _SOURCE_
<android.mtp.MtpDevice: boolean importFile(int,java.lang.String)> -> _SOURCE_
<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket(java.lang.String,int)> -> _SOURCE_
<android.content.pm.ApplicationInfo: boolean isInternal()> -> _SOURCE_
<android.app.NotificationManager: android.app.NotificationChannel getNotificationChannel(java.lang.String)> -> _SOURCE_
<android.app.NotificationChannel: boolean isImportantConversation()> -> _SOURCE_
<android.os.FileUtils: java.io.File createDir(java.io.File,java.lang.String)> -> _SOURCE_
<android.renderscript.Font: android.renderscript.Font create(android.renderscript.RenderScript,android.content.res.Resources,java.lang.String,android.renderscript.Font$Style,float)> -> _SOURCE_
<android.media.MediaRouter$RouteInfo: java.lang.String getDeviceAddress()> -> _SOURCE_
<android.telephony.CellSignalStrengthWcdma: int getRscp()> -> _SOURCE_
<android.hardware.hdmi.HdmiUtils: int getLocalPortFromPhysicalAddress(int,int)> -> _SOURCE_
<android.telephony.TelephonyManager: int getPhoneCount()> -> _SOURCE_
<java.security.KeyStore: java.security.cert.Certificate[] getCertificateChain(java.lang.String)> -> _SOURCE_
<android.net.Uri: java.lang.String toSafeString()> -> _SOURCE_
<android.os.connectivity.WifiActivityEnergyInfo: long getControllerTxDurationMillis()> -> _SOURCE_
<android.widget.Toast: int getXOffset()> -> _SOURCE_
<android.hardware.usb.UsbPortStatus: boolean isConnected()> -> _SOURCE_
<android.app.role.RoleManager: boolean isRoleAvailable(java.lang.String)> -> _SOURCE_
<android.bluetooth.BluetoothClass: java.lang.String toString()> -> _SOURCE_
<android.provider.Contacts$People: java.io.InputStream openContactPhotoInputStream(android.content.ContentResolver,android.net.Uri)> -> _SOURCE_
<java.net.Inet6Address: java.net.Inet6Address getByAddress(java.lang.String,byte[],java.net.NetworkInterface)> -> _SOURCE_
<android.media.RingtoneManager: android.net.Uri getDefaultUri(int)> -> _SOURCE_
<android.widget.SearchView: android.widget.CursorAdapter getSuggestionsAdapter()> -> _SOURCE_
<android.telephony.VoiceSpecificRegistrationInfo: java.lang.String toString()> -> _SOURCE_
<android.hardware.usb.UsbDevice: int getVendorId()> -> _SOURCE_
<android.telephony.data.ApnSetting: java.lang.String inetAddressToString(java.net.InetAddress)> -> _SOURCE_
<android.telephony.NetworkService$NetworkServiceProvider: int getSlotIndex()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getSimOperatorNumeric(int)> -> _SOURCE_
<android.media.AudioManager: java.util.List getAudioProductStrategies()> -> _SOURCE_
<java.time.chrono.Era: long getLong(java.time.temporal.TemporalField)> -> _SOURCE_
<com.android.internal.view.menu.IconMenuView: int getLayoutNumRows()> -> _SOURCE_
<android.media.AudioManager: void registerAudioRecordingCallback(android.media.AudioManager$AudioRecordingCallback,android.os.Handler)> -> _SOURCE_
<android.net.NetworkTemplate: android.net.NetworkTemplate buildTemplateBluetooth()> -> _SOURCE_
<android.service.notification.ZenModeConfig: android.service.notification.ScheduleCalendar toScheduleCalendar(android.net.Uri)> -> _SOURCE_
<android.util.KeyValueListParser$FloatValue: java.lang.String getKey()> -> _SOURCE_
<android.bluetooth.BluetoothPbapClient: int getConnectionState(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<android.app.AlarmManager: long getNextWakeFromIdleTime()> -> _SOURCE_
<android.net.wifi.nl80211.DeviceWiphyCapabilities: int getMaxNumberTxSpatialStreams()> -> _SOURCE_
<android.net.http.HttpResponseCache: int getRequestCount()> -> _SOURCE_
<android.hardware.hdmi.HdmiControlServiceWrapper: void removeSystemAudioModeChangeListener(android.hardware.hdmi.IHdmiSystemAudioModeChangeListener)> -> _SOURCE_
<android.app.ActivityManager: boolean isUserRunning(int)> -> _SOURCE_
<android.hardware.SensorManager: java.util.List getDynamicSensorList(int)> -> _SOURCE_
<android.os.storage.StorageVolume: java.lang.String getUuid()> -> _SOURCE_
<java.nio.channels.AsynchronousChannelGroup: java.nio.channels.spi.AsynchronousChannelProvider provider()> -> _SOURCE_
<android.app.Activity: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)> -> _SOURCE_
<android.view.DisplayAdjustments$FixedRotationAdjustments: java.lang.String toString()> -> _SOURCE_
<android.media.session.PlaybackState$CustomAction: android.os.Bundle getExtras()> -> _SOURCE_
<android.view.textclassifier.TextClassificationContext: java.lang.String getWidgetVersion()> -> _SOURCE_
<android.content.pm.PackageManager: boolean getSyntheticAppDetailsActivityEnabled(java.lang.String)> -> _SOURCE_
<android.telephony.CellIdentityWcdma: int getCid()> -> _SOURCE_
<android.content.pm.ShortcutManager: java.util.List getPinnedShortcuts()> -> _SOURCE_
<android.net.LinkProperties: android.net.Uri getCaptivePortalApiUrl()> -> _SOURCE_
<android.webkit.CacheManager$CacheResult: long getExpires()> -> _SOURCE_
<android.media.tv.TvView: java.util.List getTracks(int)> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: boolean isHardwareTrackingFiltersAvailable()> -> _SOURCE_
<android.media.tv.TvContract: boolean isProgramUri(android.net.Uri)> -> _SOURCE_
<java.security.AlgorithmParameters: byte[] getEncoded(java.lang.String)> -> _SOURCE_
<android.service.notification.NotificationListenerService: int getCurrentListenerHints()> -> _SOURCE_
<com.android.internal.util.MessageUtils: android.util.SparseArray findMessageNames(java.lang.Class[])> -> _SOURCE_
<android.telephony.TelephonyManager: android.telecom.PhoneAccountHandle getPhoneAccountHandleForSubscriptionId(int)> -> _SOURCE_
<android.content.pm.ApplicationInfo: boolean isOdm()> -> _SOURCE_
<android.service.quicksettings.TileService: android.os.IBinder onBind(android.content.Intent)> -> _SOURCE_
<android.bluetooth.BluetoothAvrcpPlayerSettings: int getSettings()> -> _SOURCE_
<android.filterfw.geometry.Quad: java.lang.String toString()> -> _SOURCE_
<android.service.euicc.EuiccProfileInfo: java.lang.String getIccid()> -> _SOURCE_
<android.net.wifi.nl80211.NativeScanResult: int getFrequencyMhz()> -> _SOURCE_
<com.android.internal.telephony.SmsApplication: com.android.internal.telephony.SmsApplication$SmsApplicationData getSmsApplicationData(java.lang.String,android.content.Context)> -> _SOURCE_
<android.app.usage.StorageStatsManager: android.app.usage.ExternalStorageStats queryExternalStatsForUser(java.util.UUID,android.os.UserHandle)> -> _SOURCE_
<com.android.internal.midi.MidiConstants: int getBytesPerMessage(byte)> -> _SOURCE_
<android.telephony.ServiceState: int[] getCellBandwidths()> -> _SOURCE_
<java.time.format.DateTimeParseException: int getErrorIndex()> -> _SOURCE_
<android.bluetooth.le.AdvertiseData: android.util.SparseArray getManufacturerSpecificData()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String[] getForbiddenPlmns()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.util.Set getCrossProfileCalendarPackages(android.content.ComponentName)> -> _SOURCE_
<java.time.LocalDate: java.time.DayOfWeek getDayOfWeek()> -> _SOURCE_
<android.bluetooth.BluetoothGattCharacteristic: int getWriteType()> -> _SOURCE_
<android.telephony.TelephonyManager: android.telephony.ims.aidl.IImsConfig getImsConfig(int,int)> -> _SOURCE_
<java.text.DateFormatSymbols: java.lang.String[] getEras()> -> _SOURCE_
<java.util.zip.ZipFile: java.lang.String getName()> -> _SOURCE_
<android.provider.ContactsContract$CommonDataKinds$Im: int getProtocolLabelResource(int)> -> _SOURCE_
<android.hardware.camera2.utils.SurfaceUtils: long getSurfaceId(android.view.Surface)> -> _SOURCE_
<android.window.WindowContainerTransaction: java.lang.String toString()> -> _SOURCE_
<android.telephony.ims.ImsExternalCallState: java.lang.String toString()> -> _SOURCE_
<android.service.notification.ZenModeConfig$ZenRule: java.lang.String toString()> -> _SOURCE_
<android.content.pm.DataLoaderManager: android.content.pm.IDataLoader getDataLoader(int)> -> _SOURCE_
<android.telephony.data.ApnSetting: java.lang.String toString()> -> _SOURCE_
<android.hardware.biometrics.BiometricPrompt: java.lang.CharSequence getDescription()> -> _SOURCE_
<android.hardware.biometrics.BiometricPrompt$AuthenticationCallback: void onAuthenticationAcquired(int)> -> _SOURCE_
<android.telephony.cdma.CdmaCellLocation: int getSystemId()> -> _SOURCE_
<android.telephony.SmsMessage: java.lang.String getOriginatingAddress()> -> _SOURCE_
<android.media.AudioPresentation: java.util.Map getLabels()> -> _SOURCE_
<java.time.format.DateTimeFormatter: java.time.temporal.TemporalQuery parsedExcessDays()> -> _SOURCE_
<android.telephony.CellInfo: int getCellConnectionStatus()> -> _SOURCE_
<android.service.autofill.FillEventHistory: int getSessionId()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: android.os.connectivity.GpsBatteryStats getGpsBatteryStats()> -> _SOURCE_
<android.content.IntentFilter: boolean isExplicitlyVisibleToInstantApp()> -> _SOURCE_
<javax.net.ssl.HttpsURLConnection: java.security.Principal getPeerPrincipal()> -> _SOURCE_
<android.os.Binder: android.os.UserHandle getCallingUserHandle()> -> _SOURCE_
<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.ThreadFactory getThreadFactory()> -> _SOURCE_
<com.android.ims.internal.uce.presence.PresResInfo: java.lang.String getDisplayName()> -> _SOURCE_
<android.accounts.AccountManager: android.accounts.AccountManagerFuture confirmCredentialsAsUser(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler,android.os.UserHandle)> -> _SOURCE_
<android.service.autofill.UserData: java.lang.String[] getValues()> -> _SOURCE_
<android.telephony.SmsMessage: android.telephony.SmsMessage$MessageClass getMessageClass()> -> _SOURCE_
<android.hardware.radio.RadioManager$FmBandDescriptor: java.lang.String toString()> -> _SOURCE_
<android.app.Notification$Style: android.app.Notification build()> -> _SOURCE_
<android.app.PendingIntent: android.os.UserHandle getCreatorUserHandle()> -> _SOURCE_
<android.telephony.SignalStrength: int getLteRsrq()> -> _SOURCE_
<android.debug.AdbManager: boolean isAdbWifiQrSupported()> -> _SOURCE_
<android.content.ContextWrapper: android.os.IBinder getActivityToken()> -> _SOURCE_
<android.util.EventLog$Event: int getUid()> -> _SOURCE_
<android.telephony.ims.compat.feature.MMTelFeature: com.android.ims.internal.IImsConfig getConfigInterface()> -> _SOURCE_
<android.media.tv.TvContract: android.net.Uri buildChannelUriForPassthroughInput(java.lang.String)> -> _SOURCE_
<android.telephony.TelephonyManager: int checkCarrierPrivilegesForPackage(java.lang.String)> -> _SOURCE_
<android.content.ContentProvider: java.lang.String getCallingPackageUnchecked()> -> _SOURCE_
<android.media.tv.tuner.frontend.IsdbtFrontendSettings$Builder: android.media.tv.tuner.frontend.IsdbtFrontendSettings build()> -> _SOURCE_
<android.app.blob.BlobHandle: android.app.blob.BlobHandle create(java.lang.String,byte[],java.lang.CharSequence,long,java.lang.String)> -> _SOURCE_
<android.media.tv.tuner.frontend.DvbcFrontendSettings: int getSymbolRate()> -> _SOURCE_
<android.telecom.ParcelableCall: java.util.List getCannedSmsResponses()> -> _SOURCE_
<android.accessibilityservice.GestureDescription: long getMaxGestureDuration()> -> _SOURCE_
<android.app.backup.BackupManager: java.lang.String getDataManagementLabel(java.lang.String)> -> _SOURCE_
<android.app.Notification$Builder: android.os.Bundle getExtras()> -> _SOURCE_
<android.graphics.ImageFormat: int getBitsPerPixel(int)> -> _SOURCE_
<android.app.AsyncNotedAppOp: java.lang.String getOp()> -> _SOURCE_
<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] toArray()> -> _SOURCE_
<android.content.ContentResolver: android.content.SyncStatusInfo getSyncStatusAsUser(android.accounts.Account,java.lang.String,int)> -> _SOURCE_
<android.companion.WifiDeviceFilter: java.lang.String getDeviceDisplayName(android.net.wifi.ScanResult)> -> _SOURCE_
<android.os.storage.CrateInfo: android.os.storage.CrateInfo copyFrom(int,java.lang.String,java.lang.String)> -> _SOURCE_
<java.net.URLConnection: java.security.Permission getPermission()> -> _SOURCE_
<android.os.Bundle: short[] getShortArray(java.lang.String)> -> _SOURCE_
<android.security.KeyStoreParameter$Builder: android.security.KeyStoreParameter build()> -> _SOURCE_
<android.media.MediaRouter$RouteInfo: boolean isDefault()> -> _SOURCE_
<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()> -> _SOURCE_
<android.media.tv.tuner.frontend.IsdbtFrontendSettings: int getGuardInterval()> -> _SOURCE_
<android.hardware.SerialManager: java.lang.String[] getSerialPorts()> -> _SOURCE_
<android.media.midi.MidiInputPort: void onFlush()> -> _SOURCE_
<android.app.PendingIntent: java.lang.String getTag(java.lang.String)> -> _SOURCE_
<android.telephony.ims.ImsMmTelManager$CapabilityCallback: android.telephony.ims.aidl.IImsCapabilityCallback getBinder()> -> _SOURCE_
<android.app.NotificationManager$Policy: boolean allowCalls()> -> _SOURCE_
<android.content.ContentProvider: java.lang.String getReadPermission()> -> _SOURCE_
<android.speech.tts.SynthesisRequest: java.lang.String getText()> -> _SOURCE_
<android.app.ActivityManager$StackInfo: java.lang.String toString()> -> _SOURCE_
<android.bluetooth.BluetoothGattServer: android.bluetooth.BluetoothGattService getService(java.util.UUID)> -> _SOURCE_
<android.text.style.TypefaceSpan: int getSpanTypeIdInternal()> -> _SOURCE_
<android.nfc.cardemulation.CardEmulation: java.lang.String getRouteDestinationForPreferredPaymentService()> -> _SOURCE_
<android.media.RingtoneManager: android.net.Uri getRingtoneUri(int)> -> _SOURCE_
<android.os.StatsServiceManager$ServiceRegisterer: android.os.IBinder getOrThrow()> -> _SOURCE_
<android.content.pm.PackageItemInfo: android.graphics.drawable.Drawable loadDefaultIcon(android.content.pm.PackageManager)> -> _SOURCE_
<android.animation.ObjectAnimator: java.lang.String toString()> -> _SOURCE_
<android.telephony.SignalStrength: int getTdScdmaAsuLevel()> -> _SOURCE_
<android.bluetooth.BluetoothCodecConfig: boolean isValid()> -> _SOURCE_
<com.android.internal.telephony.TelephonyPermissions: boolean checkCallingOrSelfReadPhoneStateNoThrow(android.content.Context,int,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.app.ApplicationExitInfo: int getPackageUid()> -> _SOURCE_
<android.content.res.loader.ResourcesLoader: java.util.List getApkAssets()> -> _SOURCE_
<android.telecom.RemoteConference: java.util.List getConnections()> -> _SOURCE_
<android.widget.CursorAdapter: long getItemId(int)> -> _SOURCE_
<android.privacy.internal.longitudinalreporting.LongitudinalReportingEncoder: android.privacy.internal.longitudinalreporting.LongitudinalReportingEncoder createInsecureEncoderForTest(android.privacy.internal.longitudinalreporting.LongitudinalReportingConfig)> -> _SOURCE_
<android.content.ContextWrapper: java.io.File[] getExternalFilesDirs(java.lang.String)> -> _SOURCE_
<android.media.tv.tuner.frontend.Atsc3FrontendSettings: android.media.tv.tuner.frontend.Atsc3PlpSettings[] getPlpSettings()> -> _SOURCE_
<android.view.textclassifier.ConversationAction: android.view.textclassifier.ConversationAction$Builder toBuilder()> -> _SOURCE_
<android.net.TrafficStats: long getMobileTxBytes()> -> _SOURCE_
<android.provider.FontRequest: java.lang.String getQuery()> -> _SOURCE_
<java.nio.file.attribute.PosixFilePermissions: java.util.Set fromString(java.lang.String)> -> _SOURCE_
<android.telephony.ims.compat.stub.ImsCallSessionImplBase: void startDtmf(char)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: int getNumAnrs(int)> -> _SOURCE_
<android.provider.ContactsContract$Contacts$AggregationSuggestions: android.provider.ContactsContract$Contacts$AggregationSuggestions$Builder builder()> -> _SOURCE_
<android.service.dreams.DreamService: void onDestroy()> -> _SOURCE_
<android.telephony.CellIdentityTdscdma: java.util.Set getAdditionalPlmns()> -> _SOURCE_
<android.bluetooth.BluetoothPbapClient: int getConnectionPolicy(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<android.service.notification.NotificationListenerService$Ranking: int getVisibilityOverride()> -> _SOURCE_
<android.text.format.DateUtils: java.lang.String formatElapsedTime(long)> -> _SOURCE_
<android.media.MediaRouter$RouteInfo: int getSupportedTypes()> -> _SOURCE_
<android.provider.Browser: java.lang.String[] getVisitedHistory(android.content.ContentResolver)> -> _SOURCE_
<android.app.Activity: boolean isResumed()> -> _SOURCE_
<android.net.NetworkScoreManager: boolean clearScores()> -> _SOURCE_
<android.content.pm.CrossProfileApps: boolean canRequestInteractAcrossProfiles()> -> _SOURCE_
<android.media.audiofx.Visualizer: int getWaveForm(byte[])> -> _SOURCE_
<android.telecom.ParcelableConference: java.lang.String toString()> -> _SOURCE_
<android.appwidget.AppWidgetProvider: void onDeleted(android.content.Context,int[])> -> _SOURCE_
<java.io.ObjectStreamClass: java.io.ObjectStreamField getField(java.lang.String)> -> _SOURCE_
<android.telecom.ParcelableCallAnalytics: int getCallSource()> -> _SOURCE_
<android.telephony.CallAttributes: java.lang.String toString()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String[] getPcscfAddress(java.lang.String)> -> _SOURCE_
<android.view.View: boolean isTextDirectionResolved()> -> _SOURCE_
<com.android.internal.util.TokenBucket: int available()> -> _SOURCE_
<android.service.quickaccesswallet.WalletCard: java.lang.CharSequence getCardLabel()> -> _SOURCE_
<android.net.TrafficStats: long getUidUdpRxPackets(int)> -> _SOURCE_
<android.hardware.Camera: android.hardware.Camera openUninitialized()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getContentDescription()> -> _SOURCE_
<android.app.Notification$TvExtender: java.lang.String getChannelId()> -> _SOURCE_
<com.android.internal.os.MobileRadioPowerCalculator: void calculateRemaining(com.android.internal.os.BatterySipper,android.os.BatteryStats,long,long,int)> -> _SOURCE_
<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()> -> _SOURCE_
<android.widget.NumberPicker: java.lang.String[] getDisplayedValues()> -> _SOURCE_
<android.drm.DrmInfoRequest: java.lang.String getMimeType()> -> _SOURCE_
<android.service.autofill.AutofillFieldClassificationService: float[][] onCalculateScores(java.util.List,java.util.List,java.util.List,java.lang.String,android.os.Bundle,java.util.Map,java.util.Map)> -> _SOURCE_
<android.appwidget.AppWidgetManager: android.appwidget.AppWidgetManager getInstance(android.content.Context)> -> _SOURCE_
<android.view.MotionEvent: int getActionButton()> -> _SOURCE_
<android.content.AutofillOptions: android.content.AutofillOptions forWhitelistingItself()> -> _SOURCE_
<android.security.keystore.recovery.KeyDerivationParams: int getMemoryDifficulty()> -> _SOURCE_
<android.app.KeyguardManager: void requestDismissKeyguard(android.app.Activity,java.lang.CharSequence,android.app.KeyguardManager$KeyguardDismissCallback)> -> _SOURCE_
<android.app.admin.SystemUpdatePolicy: void validateFreezePeriods()> -> _SOURCE_
<android.telecom.Conference: int getAddressPresentation()> -> _SOURCE_
<android.media.MediaRouter2Manager: java.util.List getActiveSessions()> -> _SOURCE_
<android.view.contentcapture.ViewNode$ViewStructureImpl: java.lang.CharSequence getHint()> -> _SOURCE_
<java.nio.charset.CharsetDecoder: boolean isCharsetDetected()> -> _SOURCE_
<android.telephony.UiccSlotInfo: java.lang.String getCardId()> -> _SOURCE_
<android.service.autofill.FillResponse: int getRequestId()> -> _SOURCE_
<com.android.internal.policy.DecorContext: java.lang.Object getSystemService(java.lang.String)> -> _SOURCE_
<android.hardware.display.DeviceProductInfo: java.lang.String getName()> -> _SOURCE_
<java.util.concurrent.ThreadLocalRandom: int nextInt()> -> _SOURCE_
<android.location.GnssAntennaInfo: java.lang.String toString()> -> _SOURCE_
<java.math.BigDecimal: java.lang.String toPlainString()> -> _SOURCE_
<android.media.tv.tuner.filter.TimeFilter: long getTimeStamp()> -> _SOURCE_
<com.android.ims.internal.uce.common.CapInfo: boolean isPostCallSupported()> -> _SOURCE_
<android.media.SyncParams: float getTolerance()> -> _SOURCE_
<android.telephony.PhysicalChannelConfig: int getChannelNumber()> -> _SOURCE_
<android.location.Location: void removeSpeedAccuracy()> -> _SOURCE_
<android.app.ApplicationPackageManager: int getPackageUidAsUser(java.lang.String,int,int)> -> _SOURCE_
<android.telephony.euicc.EuiccCardManager: void requestDefaultSmdpAddress(java.lang.String,java.util.concurrent.Executor,android.telephony.euicc.EuiccCardManager$ResultCallback)> -> _SOURCE_
<android.media.MediaFile: int getFormatCode(java.lang.String,java.lang.String)> -> _SOURCE_
<android.hardware.SensorManager: boolean initDataInjection(boolean)> -> _SOURCE_
<android.net.Proxy: int getPort(android.content.Context)> -> _SOURCE_
<android.net.wifi.nl80211.RadioChainInfo: int getChainId()> -> _SOURCE_
<android.content.pm.ApplicationInfo: boolean isResourceOverlay()> -> _SOURCE_
<android.hardware.location.NanoApp: java.lang.String toString()> -> _SOURCE_
<android.content.pm.PackageUserState: boolean isMatch(boolean,boolean,boolean,boolean,java.lang.String,int)> -> _SOURCE_
<android.app.assist.AssistStructure$WindowNode: int getDisplayId()> -> _SOURCE_
<android.content.ContentResolver: boolean isSyncPending(android.accounts.Account,java.lang.String)> -> _SOURCE_
<android.app.NotificationManager: boolean isNotificationPolicyAccessGrantedForPackage(java.lang.String)> -> _SOURCE_
<android.widget.LinearLayout: float getWeightSum()> -> _SOURCE_
<android.net.lowpan.LowpanScanner: int getTxPower()> -> _SOURCE_
<android.telecom.Call$Details: android.net.Uri getHandle()> -> _SOURCE_
<android.bluetooth.BluetoothCodecConfig: int getBitsPerSample()> -> _SOURCE_
<java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)> -> _SOURCE_
<android.app.Instrumentation: void checkStartActivityResult(int,java.lang.Object)> -> _SOURCE_
<android.telecom.Conference: void setRinging()> -> _SOURCE_
<android.hardware.camera2.utils.SurfaceUtils: android.util.Size getSurfaceSize(android.view.Surface)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String iccTransmitApduBasicChannel(int,int,int,int,int,java.lang.String)> -> _SOURCE_
<android.net.NetworkPolicyManager: android.telephony.SubscriptionPlan[] getSubscriptionPlans(int,java.lang.String)> -> _SOURCE_
<javax.net.ssl.SSLSocket: void setSSLParameters(javax.net.ssl.SSLParameters)> -> _SOURCE_
<android.service.autofill.FillResponse: android.content.IntentSender getAuthentication()> -> _SOURCE_
<android.animation.AnimatorSet: java.lang.String toString()> -> _SOURCE_
<com.android.internal.widget.RecyclerView: int getBaseline()> -> _SOURCE_
<android.media.MicrophoneInfo: java.lang.String getDescription()> -> _SOURCE_
<android.widget.SimpleAdapter: int getCount()> -> _SOURCE_
<android.content.ContentProvider: android.content.ContentProvider$CallingIdentity clearCallingIdentity()> -> _SOURCE_
<android.content.pm.PackageInstaller$SessionInfo: boolean getDontKillApp()> -> _SOURCE_
<android.widget.ToastPresenter: void show(android.view.View,android.os.IBinder,android.os.IBinder,int,int,int,int,float,float,android.app.ITransientNotificationCallback)> -> _SOURCE_
<android.gesture.Gesture: java.util.ArrayList getStrokes()> -> _SOURCE_
<android.telephony.SmsCbLocation: java.lang.String getPlmn()> -> _SOURCE_
<android.app.Notification: android.app.Notification$BubbleMetadata getBubbleMetadata()> -> _SOURCE_
<java.util.zip.Deflater: long getBytesWritten()> -> _SOURCE_
<android.content.pm.ShortcutInfo: java.lang.String toDumpString(java.lang.String)> -> _SOURCE_
<android.widget.TextView: int getAccessibilitySelectionEnd()> -> _SOURCE_
<java.security.cert.CertStore: java.security.Provider getProvider()> -> _SOURCE_
<android.hardware.camera2.params.SessionConfiguration: java.util.List getOutputConfigurations()> -> _SOURCE_
<android.net.metrics.IpManagerEvent: void writeToParcel(android.os.Parcel,int)> -> _SOURCE_
<android.view.View: android.graphics.Insets getOpticalInsets()> -> _SOURCE_
<android.media.MediaCodecInfo$VideoCapabilities: java.util.List getSupportedPerformancePoints()> -> _SOURCE_
<android.net.TrafficStats: long getTotalTxPackets()> -> _SOURCE_
<android.view.DisplayAddress$Physical: java.lang.String toString()> -> _SOURCE_
<android.telecom.Conference: android.telecom.PhoneAccountHandle getPhoneAccountHandle()> -> _SOURCE_
<android.app.usage.ConfigurationStats: long getTotalTimeActive()> -> _SOURCE_
<android.app.backup.BackupTransport: long getBackupQuota(java.lang.String,boolean)> -> _SOURCE_
<android.renderscript.Mesh$AllocationBuilder: int getCurrentIndexSetIndex()> -> _SOURCE_
<java.time.OffsetTime: java.time.OffsetTime now()> -> _SOURCE_
<android.provider.MetadataReader: void getMetadata(android.os.Bundle,java.io.InputStream,java.lang.String,java.lang.String[])> -> _SOURCE_
<android.net.CaptivePortalData: boolean isCaptive()> -> _SOURCE_
<android.content.pm.PackageManager: java.lang.String getWellbeingPackageName()> -> _SOURCE_
<android.database.sqlite.SQLiteGlobal: java.lang.String getWALSyncMode()> -> _SOURCE_
<java.security.MessageDigestSpi: java.lang.Object clone()> -> _SOURCE_
<android.telecom.Call: android.telecom.Call getGenericConferenceActiveChildCall()> -> _SOURCE_
<android.content.rollback.RollbackInfo: java.util.List getCausePackages()> -> _SOURCE_
<android.hardware.location.NanoApp: java.lang.String getName()> -> _SOURCE_
<android.content.ContentProviderOperation: android.net.Uri getUri()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: android.os.BatteryStats$LevelStepTracker getDischargeLevelStepTracker()> -> _SOURCE_
<java.lang.StringBuffer: java.lang.String substring(int,int)> -> _SOURCE_
<android.telephony.data.DataProfile: boolean isPreferred()> -> _SOURCE_
<android.print.PrintJobInfo: java.lang.String getLabel()> -> _SOURCE_
<android.os.Debug$MemoryInfo: int getTotalPrivateClean()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isPotentialEmergencyNumber(java.lang.String)> -> _SOURCE_
<java.security.Provider$Service: java.lang.String getType()> -> _SOURCE_
<android.telephony.euicc.EuiccManager: android.telephony.euicc.EuiccManager createForCardId(int)> -> _SOURCE_
<android.widget.Toolbar: android.graphics.drawable.Drawable getOverflowIcon()> -> _SOURCE_
<android.os.StrictMode$ViolationInfo: void dump(android.util.Printer,java.lang.String)> -> _SOURCE_
<android.os.PerformanceCollector: android.os.Bundle endSnapshot()> -> _SOURCE_
<android.media.audiofx.Virtualizer$Settings: java.lang.String toString()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean setRadio(boolean)> -> _SOURCE_
<com.android.internal.infra.AbstractRemoteService: java.lang.String toString()> -> _SOURCE_
<android.hardware.camera2.params.SessionConfiguration: java.util.concurrent.Executor getExecutor()> -> _SOURCE_
<android.location.GnssNavigationMessage: int getMessageId()> -> _SOURCE_
<android.app.usage.NetworkStats$Bucket: long getTxPackets()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.lang.CharSequence getLongSupportMessageForUser(android.content.ComponentName,int)> -> _SOURCE_
<android.content.ContextWrapper: android.os.Handler getMainThreadHandler()> -> _SOURCE_
<android.net.nsd.NsdServiceInfo: java.net.InetAddress getHost()> -> _SOURCE_
<android.graphics.Rect: java.lang.String toString()> -> _SOURCE_
<java.security.cert.X509CRLSelector: java.security.cert.X509Certificate getCertificateChecking()> -> _SOURCE_
<android.os.storage.StorageVolume: java.lang.String getPath()> -> _SOURCE_
<android.media.AudioFocusInfo: int getGainRequest()> -> _SOURCE_
<android.media.AudioAttributes: java.lang.String contentTypeToString()> -> _SOURCE_
<android.app.backup.BackupObserver: void onUpdate(java.lang.String,android.app.backup.BackupProgress)> -> _SOURCE_
<android.hardware.usb.UsbManager: long getScreenUnlockedFunctions()> -> _SOURCE_
<android.os.health.HealthStats: int getMeasurementKeyCount()> -> _SOURCE_
<android.location.LocationProvider: boolean requiresNetwork()> -> _SOURCE_
<java.util.Calendar: boolean after(java.lang.Object)> -> _SOURCE_
<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)> -> _SOURCE_
<java.text.DecimalFormatSymbols: java.text.DecimalFormatSymbols getInstance()> -> _SOURCE_
<android.security.keystore.recovery.KeyDerivationParams: int getAlgorithm()> -> _SOURCE_
<android.provider.ContactsContract$Contacts: boolean isEnterpriseContactId(long)> -> _SOURCE_
<java.util.Locale: java.lang.String getDisplayName()> -> _SOURCE_
<android.hardware.fingerprint.FingerprintManager$CryptoObject: java.security.Signature getSignature()> -> _SOURCE_
<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket(java.net.InetAddress,int)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getAidForAppType(int,int)> -> _SOURCE_
<android.window.VirtualDisplayTaskEmbedder: boolean isInitialized()> -> _SOURCE_
<android.hardware.location.NanoAppInstanceInfo: java.lang.String getName()> -> _SOURCE_
<android.telephony.data.ApnSetting: int getProxyPort()> -> _SOURCE_
<android.net.metrics.DhcpClientEvent$Builder: android.net.metrics.DhcpClientEvent build()> -> _SOURCE_
<android.media.tv.tuner.filter.AvSettings: boolean isPassthrough()> -> _SOURCE_
<java.util.OptionalInt: java.lang.String toString()> -> _SOURCE_
<android.telephony.data.ApnSetting: int getMaxConns()> -> _SOURCE_
<com.android.internal.telephony.gsm.SmsMessage: com.android.internal.telephony.gsm.SmsMessage newFromCDS(byte[])> -> _SOURCE_
<android.timezone.TelephonyNetwork: java.lang.String getMnc()> -> _SOURCE_
<android.app.usage.UsageStatsManager: java.lang.String reasonToString(int)> -> _SOURCE_
<android.service.autofill.InlinePresentation: java.lang.String toString()> -> _SOURCE_
<java.io.ObjectStreamClass: java.io.ObjectStreamClass lookup(java.lang.Class)> -> _SOURCE_
<android.os.BaseBundle: boolean isEmptyParcel()> -> _SOURCE_
<android.app.prediction.AppPredictionContext: java.lang.String getUiSurface()> -> _SOURCE_
<android.service.notification.NotificationListenerService: android.service.notification.StatusBarNotification[] getActiveNotifications(int)> -> _SOURCE_
<android.companion.BluetoothDeviceFilter: boolean matches(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<android.view.ViewConfiguration: int getScaledTouchSlop()> -> _SOURCE_
<java.time.zone.ZoneOffsetTransitionRule: java.time.ZoneOffset getOffsetBefore()> -> _SOURCE_
<android.webkit.PluginList: java.util.List getList()> -> _SOURCE_
<android.content.BroadcastReceiver: boolean getAbortBroadcast()> -> _SOURCE_
<java.time.DayOfWeek: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)> -> _SOURCE_
<java.util.Stack: boolean empty()> -> _SOURCE_
<android.app.backup.FullBackup$BackupScheme: android.util.ArraySet maybeParseAndGetCanonicalExcludePaths()> -> _SOURCE_
<android.telephony.SubscriptionManager: int getPreferredDataSubscriptionId()> -> _SOURCE_
<java.time.MonthDay: java.lang.String toString()> -> _SOURCE_
<android.content.ContentProviderClient: android.database.Cursor query(android.net.Uri,java.lang.String[],android.os.Bundle,android.os.CancellationSignal)> -> _SOURCE_
<android.app.Notification: java.lang.String visibilityToString(int)> -> _SOURCE_
<android.telephony.ims.ImsCallProfile: int getEmergencyCallRouting()> -> _SOURCE_
<android.security.keystore.KeyProtection: java.util.Date getKeyValidityForConsumptionEnd()> -> _SOURCE_
<android.view.InputDevice: java.lang.String toString()> -> _SOURCE_
<android.service.autofill.Dataset: java.lang.String getId()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isActivePasswordSufficient()> -> _SOURCE_
<android.nfc.cardemulation.ApduServiceInfo: java.util.ArrayList getAidGroups()> -> _SOURCE_
<android.media.MediaDescription: android.net.Uri getMediaUri()> -> _SOURCE_
<android.hardware.hdmi.HdmiRecordSources: android.hardware.hdmi.HdmiRecordSources$DigitalServiceSource ofDvb(int,android.hardware.hdmi.HdmiRecordSources$DvbData)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isLockTaskPermitted(java.lang.String)> -> _SOURCE_
<android.media.MediaRecorder: android.media.AudioRecordingConfiguration getActiveRecordingConfiguration()> -> _SOURCE_
<java.net.URLConnection: java.lang.Object getContent()> -> _SOURCE_
<android.media.tv.TvTrackInfo: java.lang.String getLanguage()> -> _SOURCE_
<android.preference.PreferenceDataStore: float getFloat(java.lang.String,float)> -> _SOURCE_
<android.webkit.WebViewClient: void onLoadResource(android.webkit.WebView,java.lang.String)> -> _SOURCE_
<android.content.SyncRequest: android.os.Bundle getBundle()> -> _SOURCE_
<com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException: java.lang.String getMessage()> -> _SOURCE_
<java.net.HttpURLConnection: java.security.Permission getPermission()> -> _SOURCE_
<com.android.internal.util.SyncResultReceiver: java.lang.String[] getStringArrayResult()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.lang.String getCertInstallerPackage(android.content.ComponentName)> -> _SOURCE_
<android.content.ContentProvider: android.net.Uri canonicalize(android.net.Uri)> -> _SOURCE_
<java.security.spec.DSAPublicKeySpec: java.math.BigInteger getP()> -> _SOURCE_
<android.os.VibrationEffect$Prebaked: java.lang.String toString()> -> _SOURCE_
<java.util.TreeMap: int size()> -> _SOURCE_
<java.security.Timestamp: java.util.Date getTimestamp()> -> _SOURCE_
<android.widget.Editor: android.widget.Editor$SelectionModifierCursorController getSelectionController()> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing$MbcBand: float getAttackTime()> -> _SOURCE_
<android.service.voice.VoiceInteractionSession: void onRequestConfirmation(android.service.voice.VoiceInteractionSession$ConfirmationRequest)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: android.util.SparseArray getUidStats()> -> _SOURCE_
<android.content.Intent: android.graphics.Rect getSourceBounds()> -> _SOURCE_
<com.android.internal.widget.LockPatternUtils: boolean checkVoldPassword(int)> -> _SOURCE_
<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)> -> _SOURCE_
<java.net.Inet6Address: boolean isMCGlobal()> -> _SOURCE_
<android.view.accessibility.CaptioningManager: android.view.accessibility.CaptioningManager$CaptionStyle getUserStyle()> -> _SOURCE_
<android.app.Notification$InboxStyle: java.util.ArrayList getLines()> -> _SOURCE_
<android.mtp.MtpDeviceInfo: java.lang.String getVersion()> -> _SOURCE_
<android.telephony.TelephonyManager: long getAllowedNetworkTypes()> -> _SOURCE_
<android.telecom.ParcelableConnection: int getConnectionProperties()> -> _SOURCE_
<android.mtp.MtpObjectInfo: int getProtectionStatus()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.lang.String getPermissionControllerPackageName()> -> _SOURCE_
<android.content.RestrictionEntry: java.lang.String[] getAllSelectedStrings()> -> _SOURCE_
<android.content.pm.PackageManager: java.lang.String getSetupWizardPackageName()> -> _SOURCE_
<android.net.ConnectivityDiagnosticsManager$ConnectivityDiagnosticsBinder: void onDataStallSuspected(android.net.ConnectivityDiagnosticsManager$DataStallReport)> -> _SOURCE_
<android.text.DynamicLayout: int getLineCount()> -> _SOURCE_
<android.widget.OverScroller: float getCurrVelocity()> -> _SOURCE_
<android.bluetooth.BluetoothCodecStatus: java.lang.String toString()> -> _SOURCE_
<android.view.ViewConfiguration: int getScaledScrollBarSize()> -> _SOURCE_
<android.app.usage.NetworkStats$Bucket: int getMetered()> -> _SOURCE_
<android.animation.AnimatorSet: int getChangingConfigurations()> -> _SOURCE_
<android.app.AppOpsManager$HistoricalOps: java.lang.String toString()> -> _SOURCE_
<android.net.ConnectivityMetricsEvent: java.lang.String toString()> -> _SOURCE_
<android.provider.CallLog$Calls: android.net.Uri addCall(android.telecom.CallerInfo,android.content.Context,java.lang.String,java.lang.String,java.lang.String,int,int,int,android.telecom.PhoneAccountHandle,long,int,java.lang.Long,boolean,android.os.UserHandle)> -> _SOURCE_
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.app.PendingIntent)> -> _SOURCE_
<android.telecom.RemoteConference: android.telecom.DisconnectCause getDisconnectCause()> -> _SOURCE_
<android.view.View: boolean isFrameworkOptionalFitsSystemWindows()> -> _SOURCE_
<android.content.pm.SharedLibraryInfo: java.util.List getDependentPackages()> -> _SOURCE_
<android.widget.ActivityChooserModel$ActivityResolveInfo: java.lang.String toString()> -> _SOURCE_
<android.os.Looper: java.lang.Thread getThread()> -> _SOURCE_
<android.speech.tts.UtteranceProgressListener: void onUtteranceRangeStart(java.lang.String,int,int)> -> _SOURCE_
<java.net.DatagramPacket: void setSocketAddress(java.net.SocketAddress)> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: int getConnectionId()> -> _SOURCE_
<com.android.internal.util.StateMachine: int getLogRecMaxSize()> -> _SOURCE_
<com.android.ims.internal.uce.presence.PresSipResponse: int getRequestId()> -> _SOURCE_
<android.app.PropertyInvalidatedCache: java.util.ArrayList getActiveCaches()> -> _SOURCE_
<android.text.style.TtsSpan$DigitsBuilder: android.text.style.TtsSpan$DigitsBuilder setDigits(java.lang.String)> -> _SOURCE_
<android.media.AudioTrack: int getBufferSizeInFrames()> -> _SOURCE_
<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfoAsUser(java.lang.String,int,android.os.UserHandle)> -> _SOURCE_
<android.net.lowpan.LowpanCredential: java.lang.String toString()> -> _SOURCE_
<android.service.controls.Control: int getStatus()> -> _SOURCE_
<android.os.UserManager: boolean isUserRunningOrStopping(android.os.UserHandle)> -> _SOURCE_
<android.nfc.cardemulation.CardEmulation: int getSelectionModeForCategory(java.lang.String)> -> _SOURCE_
<android.content.PeriodicSync: java.lang.String toString()> -> _SOURCE_
<java.util.concurrent.locks.ReentrantReadWriteLock: java.lang.String toString()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean getAutoTimeEnabled(android.content.ComponentName)> -> _SOURCE_
<android.telecom.CallAudioState: boolean isMuted()> -> _SOURCE_
<android.app.ApplicationPackageManager: android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName,int)> -> _SOURCE_
<com.android.internal.view.InlineSuggestionsRequestInfo: android.view.autofill.AutofillId getAutofillId()> -> _SOURCE_
<android.os.Environment: java.io.File getExternalStoragePublicDirectory(java.lang.String)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean getCrossProfileContactsSearchDisabled(android.os.UserHandle)> -> _SOURCE_
<android.location.GnssNavigationMessage$Callback: void onGnssNavigationMessageReceived(android.location.GnssNavigationMessage)> -> _SOURCE_
<android.view.Display: int getLayerStack()> -> _SOURCE_
<android.media.session.MediaSession: boolean isActive()> -> _SOURCE_
<android.net.ConnectivityDiagnosticsManager$ConnectivityDiagnosticsBinder: void onConnectivityReportAvailable(android.net.ConnectivityDiagnosticsManager$ConnectivityReport)> -> _SOURCE_
<android.net.metrics.DnsEvent: java.lang.String toString()> -> _SOURCE_
<com.android.internal.app.ResolverListAdapter: float getScore(android.content.ComponentName)> -> _SOURCE_
<android.nfc.tech.NfcV: byte getResponseFlags()> -> _SOURCE_
<com.android.internal.telephony.TelephonyPermissions: void enforeceCallingOrSelfReadPrecisePhoneStatePermissionOrCarrierPrivilege(android.content.Context,int,java.lang.String)> -> _SOURCE_
<java.text.FieldPosition: int getBeginIndex()> -> _SOURCE_
<android.media.projection.MediaProjectionManager: android.media.projection.MediaProjectionInfo getActiveProjectionInfo()> -> _SOURCE_
<android.telephony.NetworkService: void onDestroy()> -> _SOURCE_
<android.content.pm.ShortcutInfo: boolean isNonManifestVisible()> -> _SOURCE_
<android.service.autofill.SaveInfo: int getPositiveActionStyle()> -> _SOURCE_
<com.android.internal.location.gnssmetrics.GnssMetrics: void logMissedReports(int,int)> -> _SOURCE_
<android.service.autofill.FillEventHistory: java.util.List getEvents()> -> _SOURCE_
<android.service.contentcapture.ContentCaptureServiceInfo: java.lang.String toString()> -> _SOURCE_
<android.content.res.ApkAssets: java.lang.String toString()> -> _SOURCE_
<android.app.ActivityOptions: boolean getTaskAlwaysOnTop()> -> _SOURCE_
<android.telephony.SmsManager: java.util.List getMessagesFromIcc()> -> _SOURCE_
<android.net.VpnService: boolean isLockdownEnabled()> -> _SOURCE_
<android.telephony.SignalStrength: int getCdmaAsuLevel()> -> _SOURCE_
<java.lang.invoke.MethodType: java.lang.invoke.MethodType appendParameterTypes(java.lang.Class[])> -> _SOURCE_
<android.telephony.euicc.DownloadableSubscription: java.util.List getAccessRules()> -> _SOURCE_
<android.app.ActivityManager$TaskSnapshot: android.graphics.GraphicBuffer getSnapshot()> -> _SOURCE_
<android.media.session.PlaybackState$CustomAction$Builder: android.media.session.PlaybackState$CustomAction build()> -> _SOURCE_
<android.telecom.TelecomManager: java.util.List getAllPhoneAccountHandles()> -> _SOURCE_
<android.content.pm.ShortcutManager: void disableShortcuts(java.util.List,java.lang.String)> -> _SOURCE_
<java.util.zip.Inflater: long getBytesWritten()> -> _SOURCE_
<java.time.chrono.JapaneseDate: java.time.chrono.JapaneseChronology getChronology()> -> _SOURCE_
<android.webkit.CookieManager: java.lang.String getCookie(android.net.WebAddress)> -> _SOURCE_
<android.media.ExifInterface: long[] getThumbnailRange()> -> _SOURCE_
<android.net.NetworkCapabilities: boolean isMetered()> -> _SOURCE_
<android.app.VoiceInteractor$Prompt: java.lang.CharSequence getVoicePromptAt(int)> -> _SOURCE_
<android.gesture.GestureLibrary: android.gesture.Learner getLearner()> -> _SOURCE_
<android.content.res.AssetManager: android.content.res.XmlResourceParser openXmlResourceParser(java.lang.String)> -> _SOURCE_
<android.content.rollback.PackageRollbackInfo: android.content.pm.VersionedPackage getVersionRolledBackFrom()> -> _SOURCE_
<android.view.textservice.TextServicesManager: android.view.textservice.SpellCheckerSubtype getCurrentSpellCheckerSubtype(boolean)> -> _SOURCE_
<android.content.ContentProviderOperation: boolean isAssertQuery()> -> _SOURCE_
<android.telephony.SmsMessage: boolean isMWISetMessage()> -> _SOURCE_
<android.service.notification.NotificationListenerService$RankingMap: boolean getRanking(java.lang.String,android.service.notification.NotificationListenerService$Ranking)> -> _SOURCE_
<android.os.VibrationEffect$Composition$PrimitiveEffect: java.lang.String toString()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String[] getMergedImsisFromGroup()> -> _SOURCE_
<android.hardware.location.ContextHubInfo: int getMaxPacketLengthBytes()> -> _SOURCE_
<com.android.internal.widget.LockPatternUtils: boolean isSeparateProfileChallengeAllowedToUnify(int)> -> _SOURCE_
<com.android.internal.util.StateMachine$LogRec: long getWhat()> -> _SOURCE_
<java.util.Base64: java.util.Base64$Decoder getMimeDecoder()> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: int getMaxConnectedAudioDevices()> -> _SOURCE_
<javax.crypto.KeyAgreement: javax.crypto.KeyAgreement getInstance(java.lang.String)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getManufacturerCode(int)> -> _SOURCE_
<android.hardware.location.NanoAppBinary: byte[] getBinary()> -> _SOURCE_
<android.hardware.SerialPort: java.lang.String getName()> -> _SOURCE_
<android.view.Display$HdrCapabilities: float getDesiredMinLuminance()> -> _SOURCE_
<java.net.InterfaceAddress: java.net.InetAddress getBroadcast()> -> _SOURCE_
<android.print.PrintDocumentInfo: int getPageCount()> -> _SOURCE_
<android.provider.ContactsContract$ProfileSyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])> -> _SOURCE_
<android.net.Network: java.net.InetAddress getByName(java.lang.String)> -> _SOURCE_
<android.location.Address: java.lang.String getUrl()> -> _SOURCE_
<android.content.pm.FeatureInfo: java.lang.String getGlEsVersion()> -> _SOURCE_
<android.widget.TextView: int getLineCount()> -> _SOURCE_
<android.media.tv.tuner.frontend.DvbsFrontendSettings: int getSymbolRate()> -> _SOURCE_
<java.lang.Integer: int intValue()> -> _SOURCE_
<android.app.UiModeManager: boolean isNightModeLocked()> -> _SOURCE_
<android.net.SSLCertificateSocketFactory: byte[] getAlpnSelectedProtocol(java.net.Socket)> -> _SOURCE_
<android.hardware.radio.RadioManager$ProgramInfo: int getSubChannel()> -> _SOURCE_
<android.location.Country: int getSource()> -> _SOURCE_
<com.android.internal.inputmethod.InputMethodPrivilegedOperations: boolean switchToPreviousInputMethod()> -> _SOURCE_
<android.bluetooth.BluetoothMap: int getState()> -> _SOURCE_
<android.view.View: int getImportantForAccessibility()> -> _SOURCE_
<android.telephony.AccessNetworkConstants$AccessNetworkType: java.lang.String toString(int)> -> _SOURCE_
<android.net.lowpan.LowpanInterface: java.lang.String getName()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isImsRegistered()> -> _SOURCE_
<java.security.cert.X509CertSelector: java.lang.String toString()> -> _SOURCE_
<java.text.ParseException: int getErrorOffset()> -> _SOURCE_
<android.view.textclassifier.TextClassification: int getEntityCount()> -> _SOURCE_
<android.telephony.SmsCbEtwsInfo: java.lang.String toString()> -> _SOURCE_
<android.os.Binder: android.os.IInterface queryLocalInterface(java.lang.String)> -> _SOURCE_
<android.telephony.ims.compat.stub.ImsCallSessionImplBase: void accept(int,android.telephony.ims.ImsStreamMediaProfile)> -> _SOURCE_
<android.view.MotionEvent: int getSource()> -> _SOURCE_
<android.view.inputmethod.InputBinding: int getPid()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: int getStartCount()> -> _SOURCE_
<com.android.internal.net.VpnProfile: boolean areDnsAddressesNumeric()> -> _SOURCE_
<android.telephony.cdma.CdmaSmsCbProgramResults: int getCategoryResult()> -> _SOURCE_
<android.telephony.data.ApnSetting: java.lang.String getOperatorNumeric()> -> _SOURCE_
<android.hardware.radio.ProgramSelector: long getFirstId(int)> -> _SOURCE_
<android.net.util.nsd.DnsSdTxtRecord: byte[] getRawData()> -> _SOURCE_
<android.content.ClipDescription: java.lang.String toString()> -> _SOURCE_
<android.content.ContentProvider: java.lang.String getCallingFeatureId()> -> _SOURCE_
<java.io.CharArrayWriter: java.lang.String toString()> -> _SOURCE_
<java.util.GregorianCalendar: java.util.TimeZone getTimeZone()> -> _SOURCE_
<android.os.PowerManager: void reboot(java.lang.String)> -> _SOURCE_
<android.app.ActivityOptions: android.os.IRemoteCallback getAnimationFinishedListener()> -> _SOURCE_
<android.graphics.drawable.ShapeDrawable: android.graphics.drawable.ShapeDrawable$ShaderFactory getShaderFactory()> -> _SOURCE_
<android.app.AppOpsManager: java.util.List getOpsForPackage(int,java.lang.String,java.lang.String[])> -> _SOURCE_
<android.telecom.Call$Details: int getVideoState()> -> _SOURCE_
<android.telephony.CallAttributes: int getNetworkType()> -> _SOURCE_
<java.security.cert.TrustAnchor: java.security.cert.X509Certificate getTrustedCert()> -> _SOURCE_
<android.os.HidlMemoryUtil: android.os.HidlMemory byteListToHidlMemory(java.util.List,java.lang.String)> -> _SOURCE_
<android.widget.ActivityChooserModel: android.content.pm.ResolveInfo getActivity(int)> -> _SOURCE_
<android.preference.PreferenceFrameLayout: android.widget.FrameLayout$LayoutParams generateLayoutParams(android.util.AttributeSet)> -> _SOURCE_
<java.nio.file.FileSystems: java.nio.file.FileSystem newFileSystem(java.net.URI,java.util.Map)> -> _SOURCE_
<android.bluetooth.BluetoothActivityEnergyInfo: long getTimeStamp()> -> _SOURCE_
<android.app.Person: java.lang.CharSequence getName()> -> _SOURCE_
<android.speech.tts.TtsEngines: boolean isEngineInstalled(java.lang.String)> -> _SOURCE_
<java.io.WriteAbortedException: java.lang.Throwable getCause()> -> _SOURCE_
<android.os.StrictMode: boolean vmFileUriExposureEnabled()> -> _SOURCE_
<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder detectLeakedRegistrationObjects()> -> _SOURCE_
<android.media.AudioSystem: java.util.ArrayList getDevicesForAttributes(android.media.AudioAttributes)> -> _SOURCE_
<android.content.pm.PackageManager: java.lang.String getAttentionServicePackageName()> -> _SOURCE_
<android.net.ConnectivityManager: java.lang.String getMobileProvisioningUrl()> -> _SOURCE_
<android.content.pm.InstallationFile: java.lang.String getName()> -> _SOURCE_
<com.android.internal.telephony.gsm.SmsBroadcastConfigInfo: int getToServiceId()> -> _SOURCE_
<android.app.blob.BlobStoreManager: android.app.blob.LeaseInfo getLeaseInfo(android.app.blob.BlobHandle)> -> _SOURCE_
<android.telephony.TelephonyDisplayInfo: int getOverrideNetworkType()> -> _SOURCE_
<android.app.NotificationManager$Policy: boolean allowConversations()> -> _SOURCE_
<android.content.ContentProviderClient: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> -> _SOURCE_
<java.lang.ProcessBuilder: java.lang.ProcessBuilder command(java.lang.String[])> -> _SOURCE_
<android.view.View: android.os.IBinder getWindowToken()> -> _SOURCE_
<com.android.internal.telephony.gsm.SmsMessage: int getProtocolIdentifier()> -> _SOURCE_
<android.service.persistentdata.PersistentDataBlockManager: int getDataBlockSize()> -> _SOURCE_
<android.nfc.cardemulation.NfcFServiceInfo: java.lang.String toString()> -> _SOURCE_
<android.media.TimedMetaData: long getTimestamp()> -> _SOURCE_
<java.security.KeyStore$PrivateKeyEntry: java.security.cert.Certificate getCertificate()> -> _SOURCE_
<java.security.KeyStore$TrustedCertificateEntry: java.util.Set getAttributes()> -> _SOURCE_
<android.content.rollback.PackageRollbackInfo: boolean isApex()> -> _SOURCE_
<android.telephony.TelephonyManager: android.telephony.VisualVoicemailSmsFilterSettings getActiveVisualVoicemailSmsFilterSettings(int)> -> _SOURCE_
<android.app.UiAutomation: int getFlags()> -> _SOURCE_
<android.security.Credentials: boolean deleteLegacyKeyForAlias(android.security.KeyStore,java.lang.String,int)> -> _SOURCE_
<android.telephony.AvailableNetworkInfo: java.util.List getMccMncs()> -> _SOURCE_
<android.media.audiopolicy.AudioPolicy: android.media.audiopolicy.IAudioPolicyCallback cb()> -> _SOURCE_
<android.app.slice.SliceQuery: android.app.slice.SliceItem find(android.app.slice.Slice,java.lang.String)> -> _SOURCE_
<android.net.ConnectivityDiagnosticsManager$ConnectivityReport: long getReportTimestamp()> -> _SOURCE_
<com.android.internal.view.AppearanceRegion: java.lang.String toString()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String iccTransmitApduLogicalChannel(int,int,int,int,int,int,int,java.lang.String)> -> _SOURCE_
<android.view.autofill.AutofillId: int getSessionId()> -> _SOURCE_
<javax.net.ssl.HandshakeCompletedEvent: java.lang.String getCipherSuite()> -> _SOURCE_
<android.telecom.Call: java.lang.String toString()> -> _SOURCE_
<android.net.NetworkCapabilities: boolean satisfiedBySSID(android.net.NetworkCapabilities)> -> _SOURCE_
<android.hardware.input.InputManager: java.lang.String getCurrentKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier)> -> _SOURCE_
<android.telecom.PhoneAccountHandle: java.lang.String toString()> -> _SOURCE_
<android.location.GnssStatus: java.lang.String constellationTypeToString(int)> -> _SOURCE_
<android.net.NetworkScoreManager: boolean requestScores(android.net.NetworkKey[])> -> _SOURCE_
<android.os.AsyncTask: android.os.AsyncTask$Status getStatus()> -> _SOURCE_
<java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String)> -> _SOURCE_
<android.telephony.SignalStrength: int getLteSignalStrength()> -> _SOURCE_
<android.webkit.WebViewUpdateService: java.lang.String getCurrentWebViewPackageName()> -> _SOURCE_
<java.net.InetAddress: byte[] getAddress()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long getGlobalWifiRunningTime(long,int)> -> _SOURCE_
<android.app.ApplicationPackageManager: java.lang.String getSharedSystemSharedLibraryPackageName()> -> _SOURCE_
<android.hardware.hdmi.HdmiControlManager: boolean isHdmiCecVolumeControlEnabled()> -> _SOURCE_
<android.app.Notification$BigTextStyle: java.lang.CharSequence getBigText()> -> _SOURCE_
<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(int,int[])> -> _SOURCE_
<com.android.internal.telephony.GsmAlphabet: char gsmExtendedToChar(int)> -> _SOURCE_
<android.view.ViewGroup: boolean resolveTextDirection()> -> _SOURCE_
<android.app.backup.BackupTransport: int getTransportFlags()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isDeviceOwnerApp(java.lang.String)> -> _SOURCE_
<android.telecom.InCallService: void onPhoneCreated(android.telecom.Phone)> -> _SOURCE_
<android.net.NetworkPolicyManager: int[] getUidsWithPolicy(int)> -> _SOURCE_
<android.hardware.soundtrigger.SoundTrigger$ModuleProperties: boolean isTriggerReturnedInEvent()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: android.util.ArrayMap getPackageStats()> -> _SOURCE_
<android.net.NetworkStats: java.lang.String setToString(int)> -> _SOURCE_
<android.widget.CalendarView: int getDateTextAppearance()> -> _SOURCE_
<android.content.pm.InstantAppResolveInfo$InstantAppDigest: int[] getDigestPrefixSecure()> -> _SOURCE_
<android.bluetooth.BluetoothGattCharacteristic: int getProperties()> -> _SOURCE_
<android.hardware.input.InputManager: int isInTabletMode()> -> _SOURCE_
<com.android.ims.internal.uce.presence.PresTupleInfo: java.lang.String getTimestamp()> -> _SOURCE_
<android.drm.DrmRights: byte[] getData()> -> _SOURCE_
<android.speech.tts.SynthesisRequest: int getCallerUid()> -> _SOURCE_
<android.hardware.camera2.legacy.CaptureCollector: void failNextJpeg()> -> _SOURCE_
<android.media.AudioPort: int role()> -> _SOURCE_
<android.os.StrictMode$ThreadPolicy: java.lang.String toString()> -> _SOURCE_
<android.app.WallpaperManager: boolean hasResourceWallpaper(int)> -> _SOURCE_
<android.hardware.input.InputManager: android.hardware.input.TouchCalibration getTouchCalibration(java.lang.String,int)> -> _SOURCE_
<android.net.LinkAddress: boolean isIpv6()> -> _SOURCE_
<android.os.UserManager: boolean isUserEphemeral(int)> -> _SOURCE_
<com.android.internal.telephony.uicc.IccUtils: java.lang.String bcdToString(byte[],int,int)> -> _SOURCE_
<android.telephony.ims.compat.stub.ImsCallSessionImplBase: void deflect(java.lang.String)> -> _SOURCE_
<com.android.internal.content.FileSystemProvider: java.lang.String getDocumentType(java.lang.String)> -> _SOURCE_
<android.view.accessibility.AccessibilityRecord: int getCurrentItemIndex()> -> _SOURCE_
<android.telephony.ims.stub.ImsUtImplBase: int updateCallBarringWithPassword(int,int,java.lang.String[],int,java.lang.String)> -> _SOURCE_
<android.media.tv.TvInputManager: int getInputState(java.lang.String)> -> _SOURCE_
<android.hardware.camera2.params.StreamConfigurationMap: int[] getOutputFormats()> -> _SOURCE_
<javax.crypto.spec.OAEPParameterSpec: java.lang.String getDigestAlgorithm()> -> _SOURCE_
<java.util.concurrent.ForkJoinPool: boolean isTerminating()> -> _SOURCE_
<android.util.PackageUtils: java.lang.String[] computeSignaturesSha256Digests(android.content.pm.Signature[])> -> _SOURCE_
<android.telephony.ModemActivityInfo: int getIdleTimeMillis()> -> _SOURCE_
<com.android.internal.telephony.SmsApplication: com.android.internal.telephony.SmsApplication$SmsApplicationData getApplicationForPackage(java.util.Collection,java.lang.String)> -> _SOURCE_
<android.provider.BlockedNumberContract: boolean isBlocked(android.content.Context,java.lang.String)> -> _SOURCE_
<android.content.ContentResolver: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)> -> _SOURCE_
<android.permission.PermissionManager: int checkDeviceIdentifierAccess(java.lang.String,java.lang.String,java.lang.String,int,int)> -> _SOURCE_
<android.telephony.CallAttributes: android.telephony.CallQuality getCallQuality()> -> _SOURCE_
<android.telephony.mbms.DownloadRequest$Builder: android.telephony.mbms.DownloadRequest$Builder setSubscriptionId(int)> -> _SOURCE_
<android.hardware.location.NanoAppBinary: long getHwHubType()> -> _SOURCE_
<android.service.dataloader.DataLoaderService: android.service.dataloader.DataLoaderService$DataLoader onCreateDataLoader(android.content.pm.DataLoaderParams)> -> _SOURCE_
<android.app.NotificationChannel: java.lang.String toString()> -> _SOURCE_
<android.telephony.CallForwardingInfo: java.lang.String getNumber()> -> _SOURCE_
<android.view.accessibility.CaptioningManager$CaptionStyle: android.graphics.Typeface getTypeface()> -> _SOURCE_
<android.net.NetworkCapabilities: boolean equalRequestableCapabilities(android.net.NetworkCapabilities)> -> _SOURCE_
<android.telephony.UiccAccessRule: int getCarrierPrivilegeStatus(android.content.pm.Signature,java.lang.String)> -> _SOURCE_
<android.service.dreams.DreamService: void onActionModeStarted(android.view.ActionMode)> -> _SOURCE_
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.params.RecommendedStreamConfigurationMap getRecommendedStreamConfigurationMap(int)> -> _SOURCE_
<android.os.HardwarePropertiesManager: float[] getDeviceTemperatures(int,int)> -> _SOURCE_
<android.view.Display$HdrCapabilities: float getDesiredMaxAverageLuminance()> -> _SOURCE_
<android.content.Intent: boolean migrateExtraStreamToClipData()> -> _SOURCE_
<android.media.Metadata: int firstCustomId()> -> _SOURCE_
<android.os.FileUtils: java.lang.String[] listOrEmpty(java.io.File)> -> _SOURCE_
<android.hardware.location.ContextHubIntentEvent: long getNanoAppId()> -> _SOURCE_
<android.hardware.radio.RadioTuner: java.util.Map setParameters(java.util.Map)> -> _SOURCE_
<android.media.tv.TvInputInfo: int getTunerCount()> -> _SOURCE_
<android.view.Window: int getDefaultFeatures(android.content.Context)> -> _SOURCE_
<android.util.TypedValue: int getComplexUnit()> -> _SOURCE_
<android.net.NetworkPolicyManager: boolean isProcStateAllowedWhileIdleOrPowerSaveMode(int)> -> _SOURCE_
<android.os.Environment: java.io.File[] buildExternalStorageAppFilesDirs(java.lang.String)> -> _SOURCE_
<android.webkit.HttpAuthHandler: void proceed(java.lang.String,java.lang.String)> -> _SOURCE_
<android.media.RoutingSessionInfo: android.os.Bundle getControlHints()> -> _SOURCE_
<android.app.timezone.RulesManager: int requestInstall(android.os.ParcelFileDescriptor,byte[],android.app.timezone.Callback)> -> _SOURCE_
<android.app.Notification$Action: android.os.Bundle getExtras()> -> _SOURCE_
<java.lang.invoke.MethodHandle: java.lang.invoke.MethodType type()> -> _SOURCE_
<android.app.ActivityView: android.view.IWindow getWindow()> -> _SOURCE_
<java.time.chrono.ChronoZonedDateTime: java.time.LocalTime toLocalTime()> -> _SOURCE_
<android.view.ViewGroup: java.util.ArrayList buildTouchDispatchChildList()> -> _SOURCE_
<android.os.StrictMode: boolean vmCredentialProtectedWhileLockedEnabled()> -> _SOURCE_
<javax.crypto.Cipher: byte[] getIV()> -> _SOURCE_
<android.printservice.PrintJob: android.print.PrintJobInfo getInfo()> -> _SOURCE_
<android.content.pm.PackageManager: java.lang.String getSystemCaptionsServicePackageName()> -> _SOURCE_
<android.content.pm.PackageInstaller: android.content.pm.PackageInstaller$SessionInfo getActiveStagedSession()> -> _SOURCE_
<android.app.ApplicationPackageManager: android.content.pm.PackageInfo getPackageInfoAsUser(java.lang.String,int,int)> -> _SOURCE_
<android.telephony.data.DataProfile: java.lang.String getPassword()> -> _SOURCE_
<android.util.Rational: int hashCode()> -> _SOURCE_
<java.util.GregorianCalendar: int getWeeksInWeekYear()> -> _SOURCE_
<java.time.temporal.WeekFields: java.time.temporal.TemporalField weekBasedYear()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: android.os.BatteryStats$ControllerActivityCounter getModemControllerActivity()> -> _SOURCE_
<android.os.WorkSource: java.lang.String getName(int)> -> _SOURCE_
<android.view.Surface: long getNextFrameNumber()> -> _SOURCE_
<android.net.DataUsageRequest: java.lang.String toString()> -> _SOURCE_
<android.hardware.location.GeofenceHardware: int[] getMonitoringTypes()> -> _SOURCE_
<android.graphics.Picture: boolean requiresHardwareAcceleration()> -> _SOURCE_
<android.telecom.TelecomManager: java.lang.String getDefaultDialerPackage(android.os.UserHandle)> -> _SOURCE_
<android.service.autofill.FillEventHistory$Event: int getType()> -> _SOURCE_
<android.telecom.Conference: java.lang.String getCallerDisplayName()> -> _SOURCE_
<java.util.Calendar: int getWeeksInWeekYear()> -> _SOURCE_
<android.telephony.SmsCbMessage: int getServiceCategory()> -> _SOURCE_
<android.service.notification.NotificationListenerService$Ranking: java.lang.String getKey()> -> _SOURCE_
<android.webkit.UserPackage: boolean hasCorrectTargetSdkVersion(android.content.pm.PackageInfo)> -> _SOURCE_
<android.telephony.SmsCbLocation: java.lang.String toString()> -> _SOURCE_
<android.telephony.SmsCbEtwsInfo: boolean isPopupAlert()> -> _SOURCE_
<android.app.admin.SystemUpdatePolicy$ValidationFailedException: int getErrorCode()> -> _SOURCE_
<android.app.ActivityManager: void printCapabilitiesSummary(java.io.PrintWriter,int)> -> _SOURCE_
<android.os.SystemClock: java.time.Clock elapsedRealtimeClock()> -> _SOURCE_
<android.app.ActivityManager: java.util.List getRecentTasks(int,int)> -> _SOURCE_
<android.view.Display: int[] getSupportedColorModes()> -> _SOURCE_
<android.media.session.MediaSessionManager: java.util.List getActiveSessionsForUser(android.content.ComponentName,int)> -> _SOURCE_
<android.security.keystore.KeyProtection: java.lang.String[] getSignaturePaddings()> -> _SOURCE_
<android.hardware.display.DisplayManager: void resumeWifiDisplay()> -> _SOURCE_
<android.content.pm.PackageInstaller: java.util.List getMySessions()> -> _SOURCE_
<java.time.chrono.JapaneseChronology: java.lang.String getCalendarType()> -> _SOURCE_
<android.app.SearchableInfo: int getLabelId()> -> _SOURCE_
<android.view.NotificationHeaderView: int getHeaderTextMarginEnd()> -> _SOURCE_
<android.bluetooth.BluetoothPbapClient: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
<android.text.PackedIntVector: int size()> -> _SOURCE_
<android.app.ApplicationExitInfo: int getConnectionGroup()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.lang.String getAppPredictionServicePackageName()> -> _SOURCE_
<android.bluetooth.BluetoothGattCharacteristic: android.bluetooth.BluetoothGattDescriptor getDescriptor(java.util.UUID)> -> _SOURCE_
<android.view.View: android.os.Handler getHandler()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String iccTransmitApduBasicChannel(int,int,int,int,int,int,java.lang.String)> -> _SOURCE_
<android.security.keystore.KeyInfo: boolean isInsideSecureHardware()> -> _SOURCE_
<android.media.AudioRecordingConfiguration: java.lang.String getClientPackageName()> -> _SOURCE_
<android.os.LocaleList: java.util.Locale getFirstMatch(java.lang.String[])> -> _SOURCE_
<android.app.job.JobInfo: android.os.Bundle getTransientExtras()> -> _SOURCE_
<com.android.internal.util.DumpUtils: boolean isPlatformPackage(java.lang.String)> -> _SOURCE_
<android.app.usage.NetworkStatsManager: void registerUsageCallback(int,java.lang.String,long,android.app.usage.NetworkStatsManager$UsageCallback,android.os.Handler)> -> _SOURCE_
<com.android.internal.telephony.CallInfo: void writeToParcel(android.os.Parcel,int)> -> _SOURCE_
<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy$Builder detectCustomSlowCalls()> -> _SOURCE_
<android.os.Debug$MemoryInfo: int getOtherPrivateClean(int)> -> _SOURCE_
<android.view.textservice.SpellCheckerSubtype: int getNameResId()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.util.List getInstalledCaCerts(android.content.ComponentName)> -> _SOURCE_
<android.media.tv.tuner.frontend.DvbtFrontendSettings: int getStandard()> -> _SOURCE_
<android.view.autofill.AutofillValue: boolean isList()> -> _SOURCE_
<android.telephony.CellIdentity: java.lang.String getPlmn()> -> _SOURCE_
<android.os.Debug$MemoryInfo: int getTotalPrivateDirty()> -> _SOURCE_
<android.app.StatusBarManager$DisableInfo: boolean isNotificationPeekingDisabled()> -> _SOURCE_
<java.security.Provider: java.util.Enumeration keys()> -> _SOURCE_
<android.telephony.ServiceState: java.util.List getNetworkRegistrationInfoList()> -> _SOURCE_
<android.app.usage.NetworkStatsManager: android.app.usage.NetworkStats$Bucket querySummaryForDevice(int,java.lang.String,long,long)> -> _SOURCE_
<android.net.NetworkStats: android.net.NetworkStats combineValues(java.lang.String,int,int,int,long,long,long,long,long)> -> _SOURCE_
<android.app.usage.StorageStatsManager: long getTotalBytes(java.util.UUID)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean packageHasActiveAdmins(java.lang.String)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isAffiliatedUser()> -> _SOURCE_
<android.hardware.camera2.utils.SubmitInfo: int getRequestId()> -> _SOURCE_
<android.view.View: boolean isInTouchMode()> -> _SOURCE_
<android.telephony.euicc.EuiccCardManager: void loadBoundProfilePackage(java.lang.String,byte[],java.util.concurrent.Executor,android.telephony.euicc.EuiccCardManager$ResultCallback)> -> _SOURCE_
<android.nfc.tech.IsoDep: boolean isExtendedLengthApduSupported()> -> _SOURCE_
<android.widget.DropDownListView: boolean isInTouchMode()> -> _SOURCE_
<android.telecom.Phone$Listener: void onBringToForeground(android.telecom.Phone,boolean)> -> _SOURCE_
<android.bluetooth.le.ScanResult: int getTxPower()> -> _SOURCE_
<android.hardware.usb.UsbDeviceConnection: byte[] getRawDescriptors()> -> _SOURCE_
<android.telephony.ims.ImsCallSessionListener: void callSessionRttMessageReceived(java.lang.String)> -> _SOURCE_
<android.net.metrics.IpConnectivityLog: boolean log(android.net.Network,int[],android.net.metrics.IpConnectivityLog$Event)> -> _SOURCE_
<android.text.style.BulletSpan: int getSpanTypeIdInternal()> -> _SOURCE_
<android.net.lowpan.LowpanInterface: android.net.IpPrefix[] getLinkNetworks()> -> _SOURCE_
<android.os.Environment: java.lang.String getStorageState(java.io.File)> -> _SOURCE_
<com.android.internal.accessibility.AccessibilityShortcutController: java.util.Map getFrameworkShortcutFeaturesMap()> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing$Channel: java.lang.String toString()> -> _SOURCE_
<android.service.autofill.CustomDescription: android.widget.RemoteViews getPresentation()> -> _SOURCE_
<android.service.notification.StatusBarNotification: java.lang.String getGroupLogTag()> -> _SOURCE_
<android.app.ApplicationPackageManager: android.content.pm.FeatureInfo[] getSystemAvailableFeatures()> -> _SOURCE_
<android.telephony.CellIdentity: boolean isSameCell(android.telephony.CellIdentity)> -> _SOURCE_
<java.util.concurrent.SynchronousQueue: int remainingCapacity()> -> _SOURCE_
<android.util.TypedValue: java.lang.CharSequence coerceToString()> -> _SOURCE_
<android.os.Debug: void resetGlobalClassInitCount()> -> _SOURCE_
<java.io.StreamTokenizer: int lineno()> -> _SOURCE_
<android.view.inputmethod.EditorInfo: void dump(android.util.Printer,java.lang.String)> -> _SOURCE_
<android.telephony.SubscriptionManager$OnOpportunisticSubscriptionsChangedListener: void onOpportunisticSubscriptionsChanged()> -> _SOURCE_
<android.telephony.ims.ImsSsInfo: int getClirOutgoingState()> -> _SOURCE_
<android.telecom.PhoneAccount: android.net.Uri getSubscriptionAddress()> -> _SOURCE_
<android.hardware.soundtrigger.SoundTrigger$RecognitionEvent: byte[] getData()> -> _SOURCE_
<android.net.metrics.DhcpClientEvent: void writeToParcel(android.os.Parcel,int)> -> _SOURCE_
<android.os.NativeHandle: java.io.FileDescriptor[] getFileDescriptors()> -> _SOURCE_
<android.inputmethodservice.InputMethodService: int getInputMethodWindowRecommendedHeight()> -> _SOURCE_
<android.webkit.WebViewFactory: java.lang.Class getWebViewProviderClass(java.lang.ClassLoader)> -> _SOURCE_
<android.app.ApplicationErrorReport$CrashInfo: void appendStackTrace(java.lang.String)> -> _SOURCE_
<android.app.blob.BlobHandle: void writeToXml(org.xmlpull.v1.XmlSerializer)> -> _SOURCE_
<com.android.ims.internal.uce.presence.PresSipResponse: int getSipResponseCode()> -> _SOURCE_
<android.graphics.ImageDecoder$AssetInputStreamSource: android.content.res.Resources getResources()> -> _SOURCE_
<android.content.pm.IntentFilterVerificationInfo: void readFromXml(org.xmlpull.v1.XmlPullParser)> -> _SOURCE_
<android.service.oemlock.OemLockManager: boolean isOemUnlockAllowed()> -> _SOURCE_
<android.hardware.biometrics.BiometricManager: long[] getAuthenticatorIds()> -> _SOURCE_
<android.location.LocationManager: java.lang.String getExtraLocationControllerPackage()> -> _SOURCE_
<android.telecom.Voicemail: android.telecom.Voicemail$Builder createForUpdate(long,java.lang.String)> -> _SOURCE_
<android.media.HwAudioSource: void start()> -> _SOURCE_
<android.app.usage.UsageStats: long getFirstTimeStamp()> -> _SOURCE_
<android.provider.ContactsContract$Contacts$AggregationSuggestions$Builder: android.provider.ContactsContract$Contacts$AggregationSuggestions$Builder setContactId(long)> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing$Limiter: float getPostGain()> -> _SOURCE_
<android.os.UserManager: boolean isUserOfType(java.lang.String)> -> _SOURCE_
<android.app.Notification: java.lang.Class getNotificationStyle()> -> _SOURCE_
<java.util.jar.Manifest: java.util.jar.Attributes getMainAttributes()> -> _SOURCE_
<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.RejectedExecutionHandler getRejectedExecutionHandler()> -> _SOURCE_
<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setContainerLayer()> -> _SOURCE_
<java.security.spec.X509EncodedKeySpec: byte[] getEncoded()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.util.List retrieveNetworkLogs(android.content.ComponentName,long)> -> _SOURCE_
<android.service.autofill.augmented.FillRequest: android.service.autofill.augmented.PresentationParams getPresentationParams()> -> _SOURCE_
<android.content.pm.ShortcutInfo: int getFlags()> -> _SOURCE_
<android.bluetooth.BluetoothHeadsetClient: boolean getLastVoiceTagNumber(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<android.text.style.BulletSpan: int getBulletRadius()> -> _SOURCE_
<android.net.LinkAddress: java.lang.String toString()> -> _SOURCE_
<android.app.NotificationManager: boolean shouldHideSilentStatusBarIcons()> -> _SOURCE_
<android.app.backup.BackupTransport: int performFullBackup(android.content.pm.PackageInfo,android.os.ParcelFileDescriptor)> -> _SOURCE_
<android.util.NtpTrustedTime$TimeResult: java.lang.String toString()> -> _SOURCE_
<android.provider.DocumentsContract: android.net.Uri buildBaseDocumentUri(java.lang.String)> -> _SOURCE_
<android.location.GnssMeasurementCorrections: double getAltitudeMeters()> -> _SOURCE_
<android.hardware.Camera$Parameters: java.util.List getSupportedJpegThumbnailSizes()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: void getDeferredJobsCheckinLineLocked(java.lang.StringBuilder,int)> -> _SOURCE_
<com.android.internal.telephony.SmsApplication: android.content.ComponentName getDefaultSmsApplicationAsUser(android.content.Context,boolean,int)> -> _SOURCE_
<android.telephony.CellIdentityCdma: android.telephony.cdma.CdmaCellLocation asCellLocation()> -> _SOURCE_
<android.view.inputmethod.InputContentInfo: android.net.Uri getContentUri()> -> _SOURCE_
<android.os.Vibrator: int getDefaultNotificationVibrationIntensity()> -> _SOURCE_
<android.content.pm.PackageInstaller$SessionInfo: int getSessionId()> -> _SOURCE_
<android.telecom.DisconnectCause: java.lang.CharSequence getLabel()> -> _SOURCE_
<android.media.AudioManager: int getDeviceVolumeBehavior(int,java.lang.String)> -> _SOURCE_
<android.security.keystore.recovery.KeyChainProtectionParams: android.security.keystore.recovery.KeyDerivationParams getKeyDerivationParams()> -> _SOURCE_
<java.lang.Integer: java.lang.String toOctalString(int)> -> _SOURCE_
<android.net.wifi.nl80211.RadioChainInfo: int getLevelDbm()> -> _SOURCE_
<android.telephony.CbGeoUtils$Polygon: java.util.List getVertices()> -> _SOURCE_
<android.content.res.CompatibilityInfo: java.lang.String toString()> -> _SOURCE_
<android.bluetooth.BluetoothMap: android.bluetooth.BluetoothDevice getClient()> -> _SOURCE_
<android.location.GnssNavigationMessage: int getType()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg: android.util.ArrayMap getWakeupAlarmStats()> -> _SOURCE_
<com.android.ims.internal.uce.presence.PresCmdStatus: int getRequestId()> -> _SOURCE_
<android.app.backup.SharedPreferencesBackupHelper: void performBackup(android.os.ParcelFileDescriptor,android.app.backup.BackupDataOutput,android.os.ParcelFileDescriptor)> -> _SOURCE_
<java.util.TimeZone: java.lang.String[] getAvailableIDs(int)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.util.List getPermittedInputMethodsForCurrentUser()> -> _SOURCE_
<android.telecom.Conference: android.telecom.StatusHints getStatusHints()> -> _SOURCE_
<android.media.tv.TvInputService: android.media.tv.TvInputService$RecordingSession onCreateRecordingSession(java.lang.String)> -> _SOURCE_
<android.service.controls.actions.ControlAction: java.lang.String getChallengeValue()> -> _SOURCE_
<android.view.inputmethod.InputMethodManager: java.util.List getInputMethodListAsUser(int)> -> _SOURCE_
<android.service.quickaccesswallet.WalletCard: java.lang.CharSequence getContentDescription()> -> _SOURCE_
<com.android.internal.infra.AndroidFuture: com.android.internal.infra.AndroidFuture supplyAsync(java.util.function.Supplier,java.util.concurrent.Executor)> -> _SOURCE_
<com.android.internal.telephony.HbpcdUtils: java.lang.String getIddByMcc(int)> -> _SOURCE_
<android.view.DragEvent: int describeContents()> -> _SOURCE_
<android.media.tv.tuner.frontend.Atsc3PlpInfo: int getPlpId()> -> _SOURCE_
<android.bluetooth.BluetoothUuid: byte[] uuidToBytes(android.os.ParcelUuid)> -> _SOURCE_
<android.animation.StateListAnimator$Tuple: android.animation.Animator getAnimator()> -> _SOURCE_
<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder penaltyDropBox()> -> _SOURCE_
<android.permission.PermissionManager: int getRuntimePermissionsVersion()> -> _SOURCE_
<java.text.ChoiceFormat: java.lang.String toPattern()> -> _SOURCE_
<android.telecom.Conference: android.net.Uri getAddress()> -> _SOURCE_
<android.provider.Settings$Config: void clearProviderForTest()> -> _SOURCE_
<android.media.tv.TvInputService: android.media.tv.TvInputInfo onHardwareAdded(android.media.tv.TvInputHardwareInfo)> -> _SOURCE_
<android.content.CursorLoader: android.database.Cursor loadInBackground()> -> _SOURCE_
<android.net.wifi.nl80211.NativeScanResult: byte[] getSsid()> -> _SOURCE_
<android.nfc.tech.NfcF: byte[] getSystemCode()> -> _SOURCE_
<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: android.util.SparseArray getAllUidCpuFreqTimeMs()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean hasUserSetupCompleted()> -> _SOURCE_
<android.bluetooth.BluetoothGattCallback: void onServicesDiscovered(android.bluetooth.BluetoothGatt,int)> -> _SOURCE_
<android.hardware.display.BrightnessConfiguration: android.util.Pair getCurve()> -> _SOURCE_
<android.telephony.TelephonyHistogram: void addTimeTaken(int)> -> _SOURCE_
<android.security.keystore.recovery.KeyChainProtectionParams: int getUserSecretType()> -> _SOURCE_
<android.drm.DrmManagerClient: boolean canHandle(android.net.Uri,java.lang.String)> -> _SOURCE_
<android.hardware.usb.UsbDevice: boolean getHasMidi()> -> _SOURCE_
<android.database.sqlite.SQLiteConnection: java.lang.String toString()> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec: byte[] getAttestationChallenge()> -> _SOURCE_
<android.os.Parcel: java.lang.String readString16NoHelper()> -> _SOURCE_
<android.media.RemoteControlClient$MetadataEditor: android.media.RemoteControlClient$MetadataEditor putString(int,java.lang.String)> -> _SOURCE_
<android.speech.tts.TextToSpeech$EngineInfo: java.lang.String toString()> -> _SOURCE_
<android.media.CamcorderProfile: android.media.CamcorderProfile get(int,int)> -> _SOURCE_
<android.telephony.SubscriptionManager: boolean getBooleanSubscriptionProperty(int,java.lang.String,boolean,android.content.Context)> -> _SOURCE_
<com.android.internal.util.ArrayUtils: int size(java.util.Collection)> -> _SOURCE_
<java.net.URL: java.lang.String getRef()> -> _SOURCE_
<android.app.SearchManager: android.app.SearchableInfo getSearchableInfo(android.content.ComponentName)> -> _SOURCE_
<android.util.proto.EncodedBuffer: int getSize()> -> _SOURCE_
<android.telephony.TelephonyManager: int[] getAllNetworkTypes()> -> _SOURCE_
<android.os.CancellationSignal: boolean isCanceled()> -> _SOURCE_
<android.media.AudioManager: boolean isCallScreeningModeSupported()> -> _SOURCE_
<com.android.server.SystemConfig: android.util.ArraySet getSystemExtPrivAppDenyPermissions(java.lang.String)> -> _SOURCE_
<android.service.persistentdata.PersistentDataBlockManager: boolean getOemUnlockEnabled()> -> _SOURCE_
<android.graphics.drawable.Icon: boolean hasTint()> -> _SOURCE_
<android.view.SearchEvent: android.view.InputDevice getInputDevice()> -> _SOURCE_
<android.renderscript.ProgramRaster$Builder: android.renderscript.ProgramRaster create()> -> _SOURCE_
<android.media.DecoderCapabilities: java.util.List getVideoDecoders()> -> _SOURCE_
<android.app.Person: boolean isBot()> -> _SOURCE_
<java.util.Arrays: java.lang.String toString(boolean[])> -> _SOURCE_
<android.security.net.config.NetworkSecurityConfig: java.util.Set findAllCertificatesByIssuerAndSignature(java.security.cert.X509Certificate)> -> _SOURCE_
<android.service.oemlock.OemLockManager: java.lang.String getLockName()> -> _SOURCE_
<android.telecom.Call$Details: int getCallerDisplayNamePresentation()> -> _SOURCE_
<com.android.internal.telephony.gsm.SmsMessage: com.android.internal.telephony.gsm.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,java.lang.String,boolean,byte[],int,int,int,int)> -> _SOURCE_
<android.telephony.ims.stub.ImsCallSessionImplBase: android.telephony.ims.ImsVideoCallProvider getImsVideoCallProvider()> -> _SOURCE_
<android.provider.DeviceConfig$Properties$Builder: android.provider.DeviceConfig$Properties build()> -> _SOURCE_
<android.provider.DocumentsContract: android.provider.DocumentsContract$Path findDocumentPath(android.content.ContentResolver,android.net.Uri)> -> _SOURCE_
<android.telecom.Call$Details: android.telecom.StatusHints getStatusHints()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean doesSwitchMultiSimConfigTriggerReboot()> -> _SOURCE_
<android.bluetooth.BluetoothA2dp: int getConnectionState(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<android.media.AudioTrack: int getPlaybackHeadPosition()> -> _SOURCE_
<android.app.prediction.AppTarget: java.lang.String getClassName()> -> _SOURCE_
<android.app.usage.NetworkStats$Bucket: long getRxPackets()> -> _SOURCE_
<android.view.View: boolean canHaveDisplayList()> -> _SOURCE_
<android.telephony.TelephonyManager: android.os.PersistableBundle getCarrierConfig()> -> _SOURCE_
<android.content.ContentValues: java.lang.Integer getAsInteger(java.lang.String)> -> _SOURCE_
<android.content.Context: java.lang.String getFeatureId()> -> _SOURCE_
<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String,java.lang.String)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.util.List getOwnerInstalledCaCerts(android.os.UserHandle)> -> _SOURCE_
<android.service.voice.VoiceInteractionSession$CompleteVoiceRequest: java.lang.CharSequence getMessage()> -> _SOURCE_
<android.app.ActivityManager: java.util.List getRunningServices(int)> -> _SOURCE_
<android.content.integrity.AppIntegrityManager: android.content.integrity.RuleSet getCurrentRuleSet()> -> _SOURCE_
<android.os.HwParcel: java.util.ArrayList readInt64Vector()> -> _SOURCE_
<android.telephony.emergency.EmergencyNumber: boolean isFromSources(int)> -> _SOURCE_
<android.app.ActivityManager: boolean isUserAMonkey()> -> _SOURCE_
<android.app.ApplicationPackageManager: android.content.res.XmlResourceParser getXml(java.lang.String,int,android.content.pm.ApplicationInfo)> -> _SOURCE_
<android.graphics.ImageDecoder$ImageInfo: java.lang.String getMimeType()> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec build()> -> _SOURCE_
<android.os.SimpleClock: java.time.Instant instant()> -> _SOURCE_
<android.hardware.hdmi.HdmiDeviceInfo: boolean isCecDevice()> -> _SOURCE_
<android.os.Parcel: android.util.SparseBooleanArray readSparseBooleanArray()> -> _SOURCE_
<android.telephony.data.ApnSetting: java.lang.String getProtocolStringFromInt(int)> -> _SOURCE_
<android.media.MediaMuxer: void setLocation(float,float)> -> _SOURCE_
<android.preference.MultiSelectListPreference: java.lang.CharSequence[] getEntries()> -> _SOURCE_
<android.os.PowerManager: boolean isAmbientDisplaySuppressed()> -> _SOURCE_
<android.net.metrics.ApfStats: java.lang.String toString()> -> _SOURCE_
<java.text.SimpleDateFormat: java.text.DateFormatSymbols getDateFormatSymbols()> -> _SOURCE_
<android.content.PermissionChecker: int checkSelfPermissionForDataDelivery(android.content.Context,java.lang.String,java.lang.String)> -> _SOURCE_
<android.media.MediaRoute2ProviderService: void notifySessionCreated(long,android.media.RoutingSessionInfo)> -> _SOURCE_
<android.security.keystore.KeyProperties$KeyAlgorithm: int toKeymasterDigest(java.lang.String)> -> _SOURCE_
<android.os.Debug$MemoryInfo: int getTotalPss()> -> _SOURCE_
<android.app.usage.NetworkStats$Bucket: long getRxBytes()> -> _SOURCE_
<android.media.AudioManager: long getAdditionalOutputDeviceDelay(android.media.AudioDeviceInfo)> -> _SOURCE_
<android.app.servertransaction.ClientTransaction: android.app.servertransaction.ActivityLifecycleItem getLifecycleStateRequest()> -> _SOURCE_
<android.nfc.cardemulation.AidGroup: java.util.List getAids()> -> _SOURCE_
<org.apache.http.conn.ssl.StrictHostnameVerifier: java.lang.String toString()> -> _SOURCE_
<android.media.tv.TvInputInfo: java.lang.String toString()> -> _SOURCE_
<android.media.MediaCodec$CryptoException: int getErrorCode()> -> _SOURCE_
<android.app.PictureInPictureParams: android.util.Rational getAspectRatioRational()> -> _SOURCE_
<android.content.pm.FeatureInfo: java.lang.String toString()> -> _SOURCE_
<android.text.style.TtsSpan$ElectronicBuilder: android.text.style.TtsSpan$ElectronicBuilder setDomain(java.lang.String)> -> _SOURCE_
<android.os.IncidentManager$PendingReport: int getFlags()> -> _SOURCE_
<android.util.apk.ApkSignatureVerifier: byte[] generateApkVerityRootHash(java.lang.String)> -> _SOURCE_
<android.app.Instrumentation$ActivityMonitor: android.app.Instrumentation$ActivityResult getResult()> -> _SOURCE_
<android.net.RouteInfo: android.net.IpPrefix getDestination()> -> _SOURCE_
<java.util.stream.Stream: java.util.stream.Stream$Builder builder()> -> _SOURCE_
<android.renderscript.Allocation: long getStride()> -> _SOURCE_
<java.util.Date: int getMonth()> -> _SOURCE_
<java.net.Proxy: java.lang.String toString()> -> _SOURCE_
<android.os.Environment: java.io.File getDataPreloadsFileCacheDirectory(java.lang.String)> -> _SOURCE_
<java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)> -> _SOURCE_
<android.content.pm.LauncherApps$PinItemRequest: boolean isValid()> -> _SOURCE_
<android.os.storage.StorageVolume: boolean isPrimary()> -> _SOURCE_
<android.hardware.usb.UsbPort: java.lang.String toString()> -> _SOURCE_
<android.view.inputmethod.InlineSuggestionsRequest: android.os.LocaleList getSupportedLocales()> -> _SOURCE_
<android.telephony.ims.ImsCallSession: boolean isMultiparty()> -> _SOURCE_
<android.content.pm.ConfigurationInfo: java.lang.String getGlEsVersion()> -> _SOURCE_
<android.hardware.display.VirtualDisplayConfig: android.view.Surface getSurface()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: int getGlobalPrivateDnsMode(android.content.ComponentName)> -> _SOURCE_
<android.app.Fragment: int getId()> -> _SOURCE_
<android.app.admin.DeviceAdminInfo: java.lang.String getReceiverName()> -> _SOURCE_
<android.media.AudioPresentation: java.lang.String toString()> -> _SOURCE_
<android.app.servertransaction.ActivityConfigurationChangeItem: java.lang.String toString()> -> _SOURCE_
<java.lang.reflect.Method: java.lang.Class getDeclaringClass()> -> _SOURCE_
<android.app.ApplicationPackageManager: boolean getApplicationHiddenSettingAsUser(java.lang.String,android.os.UserHandle)> -> _SOURCE_
<android.hardware.usb.UsbInterface: java.lang.String toString()> -> _SOURCE_
<android.graphics.Matrix: void printShortString(java.io.PrintWriter)> -> _SOURCE_
<android.hardware.ConsumerIrManager: void transmit(int,int[])> -> _SOURCE_
<android.bluetooth.BluetoothHeadsetClientCall: java.util.UUID getUUID()> -> _SOURCE_
<android.media.MediaRoute2Info: boolean isValid()> -> _SOURCE_
<android.app.SearchableInfo$ActionKeyInfo: java.lang.String getSuggestActionMsg()> -> _SOURCE_
<android.os.Environment: java.io.File getApexDirectory()> -> _SOURCE_
<android.os.BatteryStats$Timer: long getCurrentDurationMsLocked(long)> -> _SOURCE_
<android.media.MediaRouter2$RoutingController: java.util.List getSelectedRoutes()> -> _SOURCE_
<android.telephony.ImsiEncryptionInfo: java.lang.String getKeyIdentifier()> -> _SOURCE_
<android.timezone.TzDataSetVersion: int getRevision()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getNai()> -> _SOURCE_
<android.media.tv.tunerresourcemanager.TunerFrontendInfo: int getId()> -> _SOURCE_
<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle arrayElementGetter(java.lang.Class)> -> _SOURCE_
<java.util.concurrent.CopyOnWriteArraySet: java.lang.Object[] toArray()> -> _SOURCE_
<android.app.Activity: android.app.VoiceInteractor getVoiceInteractor()> -> _SOURCE_
<android.content.pm.PermissionInfo: java.lang.String protectionToString(int)> -> _SOURCE_
<java.util.concurrent.locks.ReentrantReadWriteLock: boolean isWriteLockedByCurrentThread()> -> _SOURCE_
<android.mtp.MtpObjectInfo: int getAssociationDesc()> -> _SOURCE_
<android.media.AudioTrack: float getMinVolume()> -> _SOURCE_
<android.os.TelephonyServiceManager: android.os.TelephonyServiceManager$ServiceRegisterer getSubscriptionServiceRegisterer()> -> _SOURCE_
<android.telephony.ims.feature.CapabilityChangeRequest: java.lang.String toString()> -> _SOURCE_
<android.media.tv.TvInputManager: boolean isSingleSessionActive()> -> _SOURCE_
<android.content.pm.ApplicationInfo: java.lang.CharSequence getCategoryTitle(android.content.Context,int)> -> _SOURCE_
<android.hardware.hdmi.HdmiDeviceInfo: java.lang.String toString()> -> _SOURCE_
<java.text.DateFormat: java.text.NumberFormat getNumberFormat()> -> _SOURCE_
<android.app.ActivityThread: android.content.Intent getIntentBeingBroadcast()> -> _SOURCE_
<java.time.temporal.ValueRange: long getLargestMinimum()> -> _SOURCE_
<android.app.Activity: android.content.SharedPreferences getPreferences(int)> -> _SOURCE_
<android.telecom.RemoteConnection: android.telecom.DisconnectCause getDisconnectCause()> -> _SOURCE_
<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int)> -> _SOURCE_
<android.app.WallpaperManager: android.app.WallpaperInfo getWallpaperInfo(int)> -> _SOURCE_
<org.xml.sax.InputSource: java.lang.String getSystemId()> -> _SOURCE_
<android.security.keystore.recovery.RecoveryController: java.security.Key importKey(java.lang.String,byte[])> -> _SOURCE_
<android.location.Address: java.lang.String getThoroughfare()> -> _SOURCE_
<android.hardware.camera2.impl.CameraDeviceImpl$StateCallbackKK: void onRequestQueueEmpty()> -> _SOURCE_
<java.util.concurrent.ForkJoinPool: java.util.List invokeAll(java.util.Collection)> -> _SOURCE_
<android.hardware.radio.ProgramList$Chunk: java.lang.String toString()> -> _SOURCE_
<android.telecom.InCallService: android.telecom.CallAudioState getCallAudioState()> -> _SOURCE_
<android.bluetooth.BluetoothDevice: void disableBluetoothGetBondStateCache()> -> _SOURCE_
<android.net.NetworkStats: android.net.NetworkStats$Entry getTotal(android.net.NetworkStats$Entry)> -> _SOURCE_
<android.os.Environment: java.io.File getExternalStorageDirectory()> -> _SOURCE_
<android.view.MotionEvent: java.lang.String classificationToString(int)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: int getCurrentFailedPasswordAttempts()> -> _SOURCE_
<android.media.AudioManager: int getMaxVolumeIndexForAttributes(android.media.AudioAttributes)> -> _SOURCE_
<android.net.lowpan.LowpanManager: android.net.lowpan.LowpanInterface getInterface(java.lang.String)> -> _SOURCE_
<android.view.Display: java.lang.String getOwnerPackageName()> -> _SOURCE_
<android.hardware.camera2.params.SessionConfiguration: android.hardware.camera2.CaptureRequest getSessionParameters()> -> _SOURCE_
<com.android.internal.midi.MidiDispatcher: void onFlush()> -> _SOURCE_
<android.telephony.SubscriptionManager: android.telephony.SubscriptionInfo getActiveSubscriptionInfoForIcc(java.lang.String)> -> _SOURCE_
<java.lang.Package: boolean isSealed(java.net.URL)> -> _SOURCE_
<android.hardware.Sensor: float getMaximumRange()> -> _SOURCE_
<android.hardware.biometrics.BiometricPrompt$AuthenticationResult: android.hardware.biometrics.BiometricPrompt$CryptoObject getCryptoObject()> -> _SOURCE_
<android.bluetooth.BluetoothA2dp: boolean shouldSendVolumeKeys(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<android.app.slice.SliceQuery: boolean compareTypes(android.app.slice.SliceItem,java.lang.String)> -> _SOURCE_
<android.widget.TextView: int getPaintFlags()> -> _SOURCE_
<android.media.AudioPort: int id()> -> _SOURCE_
<android.media.CamcorderProfile: android.media.CamcorderProfile get(int)> -> _SOURCE_
<android.hardware.Sensor: java.lang.String toString()> -> _SOURCE_
<android.media.AudioManager: int getStreamMinVolume(int)> -> _SOURCE_
<android.graphics.Shader: long[] convertColors(int[])> -> _SOURCE_
<android.app.NotificationChannel: boolean isImportanceLockedByOEM()> -> _SOURCE_
<android.hardware.camera2.legacy.LegacyCameraDevice: int detectSurfaceType(android.view.Surface)> -> _SOURCE_
<android.telephony.TelephonyManager: void setSimOperatorNumeric(java.lang.String)> -> _SOURCE_
<android.app.prediction.AppPredictionManager: android.app.prediction.AppPredictor createAppPredictionSession(android.app.prediction.AppPredictionContext)> -> _SOURCE_
<android.timezone.TzDataSetVersion: boolean isCompatibleWithThisDevice(android.timezone.TzDataSetVersion)> -> _SOURCE_
<android.location.GnssMeasurementsEvent: java.lang.String toString()> -> _SOURCE_
<android.media.tv.TvInputManager: java.util.List getAvailableTvStreamConfigList(java.lang.String)> -> _SOURCE_
<android.media.tv.tuner.frontend.FrontendStatus: int getPer()> -> _SOURCE_
<android.hardware.SensorPrivacyManager: boolean isSensorPrivacyEnabled()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getBasebandVersionForPhone(int)> -> _SOURCE_
<com.android.ims.internal.uce.common.CapInfo: boolean isGeoPullFtSupported()> -> _SOURCE_
<android.webkit.WebResourceResponse: int getStatusCode()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase$OpenParams: android.database.sqlite.SQLiteDatabase$CursorFactory getCursorFactory()> -> _SOURCE_
<android.app.Activity: android.view.View[] autofillClientFindViewsByAutofillIdTraversal(android.view.autofill.AutofillId[])> -> _SOURCE_
<org.xml.sax.SAXParseException: int getLineNumber()> -> _SOURCE_
<android.net.http.SslCertificate$DName: java.lang.String getUName()> -> _SOURCE_
<android.view.contentcapture.DataShareRequest: java.lang.String getMimeType()> -> _SOURCE_
<android.location.Location: java.lang.String getProvider()> -> _SOURCE_
<java.text.DateFormatSymbols: java.lang.String[] getAmPmStrings()> -> _SOURCE_
<android.service.watchdog.ExplicitHealthCheckService: void notifyHealthCheckPassed(java.lang.String)> -> _SOURCE_
<android.telephony.mbms.vendor.MbmsStreamingServiceBase: int requestUpdateStreamingServices(int,java.util.List)> -> _SOURCE_
<android.preference.DialogPreference: void onActivityDestroy()> -> _SOURCE_
<java.util.concurrent.locks.ReentrantReadWriteLock: int getReadHoldCount()> -> _SOURCE_
<android.view.DisplayCutout: android.graphics.Path pathFromResources(android.content.res.Resources,int,int)> -> _SOURCE_
<android.media.audiopolicy.AudioPolicy: android.media.projection.MediaProjection getMediaProjection()> -> _SOURCE_
<com.android.internal.app.ChooserActivityLogger: int typeFromPreviewInt(int)> -> _SOURCE_
<android.app.admin.PasswordMetrics: int determineComplexity()> -> _SOURCE_
<java.security.cert.X509CRLSelector: java.lang.String toString()> -> _SOURCE_
<android.util.SparseArray: int size()> -> _SOURCE_
<android.bluetooth.BluetoothCodecConfig: boolean hasSingleBitsPerSample()> -> _SOURCE_
<android.service.autofill.FillRequest: int getFlags()> -> _SOURCE_
<java.util.LongSummaryStatistics: long getSum()> -> _SOURCE_
<java.util.zip.Inflater: int getTotalOut()> -> _SOURCE_
<android.service.notification.ZenModeConfig: boolean isValidCountdownToAlarmConditionId(android.net.Uri)> -> _SOURCE_
<android.telephony.ims.compat.stub.ImsCallSessionImplBase: void extendToConference(java.lang.String[])> -> _SOURCE_
<android.telephony.TelephonyManager: int getSimState()> -> _SOURCE_
<android.text.method.WordIterator: int following(int)> -> _SOURCE_
<java.lang.String: java.lang.String valueOf(char[])> -> _SOURCE_
<com.android.internal.util.LineBreakBufferedWriter: void write(int)> -> _SOURCE_
<java.net.HttpCookie: java.lang.Object clone()> -> _SOURCE_
<android.view.View: boolean isSaveEnabled()> -> _SOURCE_
<android.telephony.CallQuality: boolean isRtpInactivityDetected()> -> _SOURCE_
<android.telephony.PhoneNumberUtils: boolean isEmergencyNumber(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.renderscript.ProgramRaster: android.renderscript.ProgramRaster CULL_BACK(android.renderscript.RenderScript)> -> _SOURCE_
<android.net.StaticIpConfiguration: android.net.LinkProperties toLinkProperties(java.lang.String)> -> _SOURCE_
<android.widget.Toolbar: boolean isOverflowMenuShowing()> -> _SOURCE_
<java.lang.Thread: int countStackFrames()> -> _SOURCE_
<android.app.ApplicationPackageManager: boolean isInstantApp(java.lang.String)> -> _SOURCE_
<android.security.keystore.recovery.RecoveryController: android.security.keystore.recovery.KeyChainSnapshot getKeyChainSnapshot()> -> _SOURCE_
<android.service.controls.Control: int getDeviceType()> -> _SOURCE_
<android.media.AudioPlaybackConfiguration: java.lang.String toLogFriendlyPlayerState(int)> -> _SOURCE_
<android.content.integrity.AppInstallMetadata: boolean isStampTrusted()> -> _SOURCE_
<android.app.AlarmManager: android.app.AlarmManager$AlarmClockInfo getNextAlarmClock(int)> -> _SOURCE_
<android.graphics.Typeface: android.graphics.Typeface createFromTypefaceWithVariation(android.graphics.Typeface,java.util.List)> -> _SOURCE_
<android.app.admin.DeviceAdminReceiver: void onTransferOwnershipComplete(android.content.Context,android.os.PersistableBundle)> -> _SOURCE_
<android.net.IpSecManager$IpSecTunnelInterface: java.lang.String getInterfaceName()> -> _SOURCE_
<android.se.omapi.SEService: android.se.omapi.Reader[] getReaders()> -> _SOURCE_
<com.android.internal.location.gnssmetrics.GnssMetrics: java.lang.String dumpGnssMetricsAsText()> -> _SOURCE_
<android.util.EventLog$Event: int getTag()> -> _SOURCE_
<android.app.PendingIntent: boolean isTargetedToPackage()> -> _SOURCE_
<android.os.Environment$UserEnvironment: java.io.File[] buildExternalStorageAppObbDirs(java.lang.String)> -> _SOURCE_
<android.view.textclassifier.TextClassification$Builder: android.view.textclassifier.TextClassification$Builder clearEntityTypes()> -> _SOURCE_
<android.hardware.usb.UsbPortStatus: int getCurrentPowerRole()> -> _SOURCE_
<android.media.AudioFocusRequest: boolean acceptsDelayedFocusGain()> -> _SOURCE_
<android.telephony.PhoneNumberUtils: java.lang.String toCallerIDMinMatch(java.lang.String)> -> _SOURCE_
<android.view.MotionEvent: int getAction()> -> _SOURCE_
<android.app.Notification$BubbleMetadata: int getFlags()> -> _SOURCE_
<java.net.URI: java.lang.String getPath()> -> _SOURCE_
<android.media.MediaRouter$RouteCategory: java.util.List getRoutes(java.util.List)> -> _SOURCE_
<android.bluetooth.BluetoothDevice: boolean isInSilenceMode()> -> _SOURCE_
<android.hardware.Camera$Parameters: java.util.List getSupportedPictureFormats()> -> _SOURCE_
<android.service.voice.VoiceInteractionSession$Request: int getCallingUid()> -> _SOURCE_
<android.os.StrictMode: void onFileUriExposed(android.net.Uri,java.lang.String)> -> _SOURCE_
<android.os.connectivity.CellularBatteryStats: long getNumPacketsTx()> -> _SOURCE_
<android.location.GnssStatus: boolean hasBasebandCn0DbHz(int)> -> _SOURCE_
<android.os.Binder: boolean isTracingEnabled()> -> _SOURCE_
<android.telephony.SmsMessage: int getStatusOnIcc()> -> _SOURCE_
<android.os.TimestampedValue: long getReferenceTimeMillis()> -> _SOURCE_
<android.app.NotificationChannel: void dump(java.io.PrintWriter,java.lang.String,boolean)> -> _SOURCE_
<java.security.cert.CertificateFactory: java.security.cert.CRL generateCRL(java.io.InputStream)> -> _SOURCE_
<android.telephony.CellIdentityNr: int getTac()> -> _SOURCE_
<android.telephony.SubscriptionInfo: int getCardId()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isOrganizationOwnedDeviceWithManagedProfile()> -> _SOURCE_
<android.media.MediaRouter$RouteGroup: void requestSetVolume(int)> -> _SOURCE_
<android.view.contentcapture.ContentCaptureContext: android.os.Bundle getExtras()> -> _SOURCE_
<java.net.HttpRetryException: int responseCode()> -> _SOURCE_
<android.app.AppOpsManager: int noteProxyOpNoThrow(int,java.lang.String,int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.graphics.Insets: java.lang.String toString()> -> _SOURCE_
<android.net.StaticIpConfiguration: java.util.List getRoutes(java.lang.String)> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing$Channel: android.media.audiofx.DynamicsProcessing$Eq getPreEq()> -> _SOURCE_
<android.hardware.hdmi.HdmiControlServiceWrapper: void sendMhlVendorCommand(int,int,int,byte[])> -> _SOURCE_
<android.app.SearchableInfo: int getVoiceMaxResults()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: int getPasswordMinimumNumeric(android.content.ComponentName,int)> -> _SOURCE_
<android.content.pm.LauncherApps: java.util.List getShortcutConfigActivityList(java.lang.String,android.os.UserHandle)> -> _SOURCE_
<com.android.internal.widget.ResolverDrawerLayout: void onNestedPreScroll(android.view.View,int,int,int[])> -> _SOURCE_
<android.media.RemoteController: long getEstimatedMediaPosition()> -> _SOURCE_
<com.android.internal.util.MemInfoReader: long getFreeSizeKb()> -> _SOURCE_
<android.media.MediaRouter$RouteInfo: boolean isSelected()> -> _SOURCE_
<android.app.job.JobParameters: android.app.job.IJobCallback getCallback()> -> _SOURCE_
<android.hardware.hdmi.HdmiDeviceInfo: int getAdopterId()> -> _SOURCE_
<android.location.LocationManager: boolean isLocationEnabledForUser(android.os.UserHandle)> -> _SOURCE_
<android.telephony.TelephonyManager: android.telephony.SignalStrength getSignalStrength()> -> _SOURCE_
<android.app.ActivityTaskManager: int getMaxRecentTasksStatic()> -> _SOURCE_
<android.hardware.camera2.legacy.CaptureCollector: android.util.Pair jpegProduced()> -> _SOURCE_
<android.media.tv.TvInputInfo: boolean isConnectedToHdmiSwitch()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: void updateKernelMemoryBandwidthLocked()> -> _SOURCE_
<android.provider.DocumentsContract: java.lang.String getRootId(android.net.Uri)> -> _SOURCE_
<android.bluetooth.BluetoothA2dp: java.lang.String stateToString(int)> -> _SOURCE_
<android.permission.PermissionControllerManager: void getPermissionUsages(boolean,long,java.util.concurrent.Executor,android.permission.PermissionControllerManager$OnPermissionUsageResultCallback)> -> _SOURCE_
<android.security.KeyStore: java.security.InvalidKeyException getInvalidKeyException(java.lang.String,int,int)> -> _SOURCE_
<java.time.chrono.ChronoLocalDateTime: java.time.chrono.ChronoLocalDateTime minus(java.time.temporal.TemporalAmount)> -> _SOURCE_
<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager$DelegateImpl getDelegate()> -> _SOURCE_
<android.telecom.VideoCallImpl: com.android.internal.telecom.IVideoProvider getVideoProvider()> -> _SOURCE_
<com.android.internal.telephony.cdma.SmsMessage: int getEnvelopeServiceCategory()> -> _SOURCE_
<android.util.KeyValueListParser$LongValue: java.lang.String getKey()> -> _SOURCE_
<android.content.pm.dex.DexMetadataHelper: java.lang.String buildDexMetadataPathForApk(java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.GsmAlphabet: byte[] stringToGsm7BitPacked(java.lang.String,int,boolean,int,int)> -> _SOURCE_
<android.telecom.Voicemail: long getDuration()> -> _SOURCE_
<android.telephony.data.DataProfile: int getWaitTime()> -> _SOURCE_
<android.hardware.radio.RadioManager$ProgramInfo: java.lang.String toString()> -> _SOURCE_
<android.media.tv.TvTrackInfo: java.lang.String getEncoding()> -> _SOURCE_
<android.app.backup.BackupTransport: java.lang.String transportDirName()> -> _SOURCE_
<android.media.tv.tuner.frontend.AnalogFrontendSettings: android.media.tv.tuner.frontend.AnalogFrontendSettings$Builder builder()> -> _SOURCE_
<android.bluetooth.le.ScanRecord: java.lang.String getDeviceName()> -> _SOURCE_
<android.telephony.SignalStrength: int getGsmAsuLevel()> -> _SOURCE_
<android.text.PrecomputedText: int getParagraphCount()> -> _SOURCE_
<android.hardware.location.GeofenceHardwareRequestParcelable: double getLatitude()> -> _SOURCE_
<android.hardware.display.WifiDisplayStatus: android.hardware.display.WifiDisplay getActiveDisplay()> -> _SOURCE_
<android.speech.tts.TtsEngines: java.util.Locale getLocalePrefForEngine(java.lang.String)> -> _SOURCE_
<android.view.textclassifier.TextClassificationManager: android.view.textclassifier.TextClassificationConstants getSettings(android.content.Context)> -> _SOURCE_
<java.util.jar.Manifest: java.util.Map getEntries()> -> _SOURCE_
<android.telephony.TelephonyManager: void updateServiceLocation()> -> _SOURCE_
<android.service.notification.ZenPolicy: int getVisualEffectLights()> -> _SOURCE_
<android.service.autofill.FillResponse: java.util.List getDatasets()> -> _SOURCE_
<android.hardware.biometrics.BiometricAuthenticator$Identifier: int getBiometricId()> -> _SOURCE_
<android.hardware.camera2.params.ReprocessFormatsMap: int[] getOutputs(int)> -> _SOURCE_
<android.content.IntentSender: java.lang.String toString()> -> _SOURCE_
<android.animation.AnimationHandler: int getAnimationCount()> -> _SOURCE_
<java.lang.StackTraceElement: java.lang.String getMethodName()> -> _SOURCE_
<android.media.DrmInitData: int getSchemeInitDataCount()> -> _SOURCE_
<java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)> -> _SOURCE_
<android.app.timezone.RulesState: boolean isBaseVersionNewerThan(android.app.timezone.DistroRulesVersion)> -> _SOURCE_
<android.app.ActivityTaskManager: java.lang.String listAllStacks()> -> _SOURCE_
<com.android.internal.os.ClassLoaderFactory: boolean isDelegateLastClassLoaderName(java.lang.String)> -> _SOURCE_
<android.os.WorkSource: java.util.List getWorkChains()> -> _SOURCE_
<android.app.RuntimeAppOpAccessMessage: java.lang.String getAttributionTag()> -> _SOURCE_
<java.security.cert.PKIXParameters: java.util.List getCertStores()> -> _SOURCE_
<android.media.tv.tuner.frontend.Atsc3FrontendCapabilities: int getBandwidthCapability()> -> _SOURCE_
<javax.crypto.KeyAgreement: java.lang.String getAlgorithm()> -> _SOURCE_
<android.view.View: int getLabelFor()> -> _SOURCE_
<android.net.LinkProperties: void setCaptivePortalApiUrl(android.net.Uri)> -> _SOURCE_
<android.media.AudioManager: java.util.List getDevicesForAttributes(android.media.AudioAttributes)> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: boolean isLePeriodicAdvertisingSupported()> -> _SOURCE_
<java.io.ObjectOutputStream$PutField: void write(java.io.ObjectOutput)> -> _SOURCE_
<java.lang.String: java.lang.String valueOf(int)> -> _SOURCE_
<android.telephony.CellSignalStrengthNr: int getLevel()> -> _SOURCE_
<android.content.IntentFilter: java.lang.String getDataScheme(int)> -> _SOURCE_
<android.net.MailTo: android.net.MailTo parse(java.lang.String)> -> _SOURCE_
<android.print.PrintManager: android.print.PrintManager getGlobalPrintManagerForUser(int)> -> _SOURCE_
<android.printservice.PrintJob: boolean isQueued()> -> _SOURCE_
<android.os.UserManager: boolean hasUserRestrictionForUser(java.lang.String,android.os.UserHandle)> -> _SOURCE_
<android.media.AudioDeviceAttributes: int getType()> -> _SOURCE_
<android.hardware.Camera$Parameters: java.util.List getSupportedWhiteBalance()> -> _SOURCE_
<android.net.util.SocketUtils: java.net.SocketAddress makePacketSocketAddress(int,int,byte[])> -> _SOURCE_
<android.content.ClipData: android.graphics.Bitmap getIcon()> -> _SOURCE_
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(android.net.Network)> -> _SOURCE_
<android.bluetooth.le.AdvertisingSetParameters: java.lang.String toString()> -> _SOURCE_
<android.media.AudioTrack: android.media.AudioAttributes getAudioAttributes()> -> _SOURCE_
<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.lang.Thread getFirstQueuedThread()> -> _SOURCE_
<android.graphics.drawable.PictureDrawable: android.graphics.Picture getPicture()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName(int)> -> _SOURCE_
<java.time.chrono.MinguoDate: java.time.chrono.MinguoDate now(java.time.ZoneId)> -> _SOURCE_
<android.hardware.soundtrigger.KeyphraseMetadata: boolean supportsLocale(java.util.Locale)> -> _SOURCE_
<android.hardware.location.NanoAppInstanceInfo: java.lang.String getPublisher()> -> _SOURCE_
<android.content.res.AssetManager: java.util.List getLoaders()> -> _SOURCE_
<com.android.internal.telephony.uicc.IccUtils: java.lang.String networkNameToString(byte[],int,int)> -> _SOURCE_
<android.view.contentcapture.ContentCaptureCondition: int getFlags()> -> _SOURCE_
<android.nfc.NdefRecord: java.lang.String toMimeType()> -> _SOURCE_
<android.content.pm.parsing.component.ParsedActivity: android.content.pm.parsing.component.ParsedActivity makeAppDetailsActivity(java.lang.String,java.lang.String,int,java.lang.String,boolean)> -> _SOURCE_
<android.service.notification.ZenPolicy: int getPriorityCategoryReminders()> -> _SOURCE_
<android.location.Address: boolean hasLongitude()> -> _SOURCE_
<android.telephony.SubscriptionManager: void putSubscriptionIdExtra(android.content.Intent,int)> -> _SOURCE_
<java.lang.ProcessBuilder: java.util.List command()> -> _SOURCE_
<android.media.ImageReader: android.media.Image acquireNextImageNoThrowISE()> -> _SOURCE_
<javax.net.ssl.SSLEngineResult: java.lang.String toString()> -> _SOURCE_
<android.telephony.TelephonyManager: android.telephony.TelephonyManager getDefault()> -> _SOURCE_
<android.util.proto.EncodedBuffer: java.lang.String getDebugString()> -> _SOURCE_
<android.service.controls.templates.RangeTemplate: java.lang.CharSequence getFormatString()> -> _SOURCE_
<com.android.internal.util.AsyncService: android.os.Handler getHandler()> -> _SOURCE_
<android.telephony.ims.ImsSsInfo: java.lang.String getIcbNum()> -> _SOURCE_
<android.os.UserHandle: int getAppId(int)> -> _SOURCE_
<android.telephony.PhoneNumberUtils: boolean isLocalEmergencyNumber(android.content.Context,java.lang.String)> -> _SOURCE_
<android.timezone.TzDataSetVersion: int getFormatMajorVersion()> -> _SOURCE_
<android.view.contentcapture.ContentCaptureSession: android.view.contentcapture.ContentCaptureSessionId getContentCaptureSessionId()> -> _SOURCE_
<android.os.connectivity.CellularBatteryStats: long getEnergyConsumedMaMillis()> -> _SOURCE_
<android.mtp.MtpStorageInfo: long getMaxCapacity()> -> _SOURCE_
<android.telephony.SignalStrength: int getLteDbm()> -> _SOURCE_
<android.media.tv.TvContract: android.net.Uri buildPreviewProgramsUriForChannel(long)> -> _SOURCE_
<android.telephony.data.DataService$DataServiceProvider: int getSlotIndex()> -> _SOURCE_
<android.location.Address: java.lang.String getAddressLine(int)> -> _SOURCE_
<java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)> -> _SOURCE_
<android.util.ArrayMap: int size()> -> _SOURCE_
<java.util.logging.LogRecord: java.lang.Throwable getThrown()> -> _SOURCE_
<android.app.admin.DeviceAdminReceiver: android.app.admin.DevicePolicyManager getManager(android.content.Context)> -> _SOURCE_
<android.graphics.fonts.SystemFonts: java.util.Set getAvailableFonts()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long computeBatteryUptime(long,int)> -> _SOURCE_
<android.hardware.usb.UsbDevice: boolean getHasAudioPlayback()> -> _SOURCE_
<android.content.ContextWrapper: java.lang.String getAttributionTag()> -> _SOURCE_
<android.media.tv.tuner.filter.TlvFilterConfiguration: int getPacketType()> -> _SOURCE_
<com.android.internal.telephony.TelephonyPermissions: boolean checkCallingOrSelfReadSubscriberIdentifiers(android.content.Context,int,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.widget.TextView: android.text.Layout getLayout()> -> _SOURCE_
<android.app.ActivityManager$TaskDescription: android.graphics.Bitmap loadTaskDescriptionIcon(java.lang.String,int)> -> _SOURCE_
<android.accounts.AccountManager: android.accounts.AccountManagerFuture removeAccountAsUser(android.accounts.Account,android.accounts.AccountManagerCallback,android.os.Handler,android.os.UserHandle)> -> _SOURCE_
<com.android.internal.content.PackageMonitor: void onPackageDisappeared(java.lang.String,int)> -> _SOURCE_
<android.view.textclassifier.TextLinks$Request: java.lang.String getCallingPackageName()> -> _SOURCE_
<android.telecom.Conference: int getConnectionProperties()> -> _SOURCE_
<android.content.pm.PackageManager: boolean isPackageSuspended()> -> _SOURCE_
<android.content.pm.ShortcutInfo: int getShortLabelResourceId()> -> _SOURCE_
<android.net.StaticIpConfiguration: android.net.LinkAddress getIpAddress()> -> _SOURCE_
<android.telephony.SubscriptionInfo: int getDataRoaming()> -> _SOURCE_
<android.telephony.SubscriptionManager: int getActiveDataSubscriptionId()> -> _SOURCE_
<android.content.res.AssetFileDescriptor: long getStartOffset()> -> _SOURCE_
<com.android.internal.widget.RecyclerView$SmoothScroller: boolean isPendingInitialRun()> -> _SOURCE_
<android.app.backup.RestoreSession: int restorePackage(java.lang.String,android.app.backup.RestoreObserver)> -> _SOURCE_
<java.util.stream.Collectors: java.util.stream.Collector toCollection(java.util.function.Supplier)> -> _SOURCE_
<android.telephony.ims.compat.stub.ImsConfigImplBase: int setProvisionedStringValue(int,java.lang.String)> -> _SOURCE_
<android.telecom.RemoteConference$Callback: void onConnectionAdded(android.telecom.RemoteConference,android.telecom.RemoteConnection)> -> _SOURCE_
<android.app.usage.ConfigurationStats: int getActivationCount()> -> _SOURCE_
<android.app.slice.SliceItem: android.app.RemoteInput getRemoteInput()> -> _SOURCE_
<android.content.pm.PackageParser$Package: long getLongVersionCode()> -> _SOURCE_
<android.app.RuntimeAppOpAccessMessage: java.lang.String getMessage()> -> _SOURCE_
<android.app.admin.DeviceAdminService: android.os.IBinder onBind(android.content.Intent)> -> _SOURCE_
<android.content.pm.PackageInstaller$SessionInfo: boolean hasParentSessionId()> -> _SOURCE_
<java.time.ZonedDateTime: int getYear()> -> _SOURCE_
<android.view.contentcapture.ContentCaptureEvent: int getType()> -> _SOURCE_
<android.hardware.soundtrigger.SoundTrigger$ConfidenceLevel: java.lang.String toString()> -> _SOURCE_
<android.telecom.RemoteConnection$Callback: void onVoipAudioChanged(android.telecom.RemoteConnection,boolean)> -> _SOURCE_
<java.text.Annotation: java.lang.String toString()> -> _SOURCE_
<android.os.StrictMode: java.lang.Object trackActivity(java.lang.Object)> -> _SOURCE_
<android.view.contentcapture.ViewNode: java.lang.String getIdEntry()> -> _SOURCE_
<android.media.tv.tunerresourcemanager.ResourceClientProfile: java.lang.String toString()> -> _SOURCE_
<com.android.internal.policy.PhoneWindow: int getVolumeControlStream()> -> _SOURCE_
<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.CameraDevice getDevice()> -> _SOURCE_
<android.service.resolver.ResolverTarget: java.lang.String toString()> -> _SOURCE_
<android.location.Location: boolean isFromMockProvider()> -> _SOURCE_
<android.content.ContentResolver: java.lang.String createSqlSortClause(android.os.Bundle)> -> _SOURCE_
<com.android.internal.graphics.drawable.AnimationScaleListDrawable: void clearMutated()> -> _SOURCE_
<android.view.KeyboardShortcutGroup: java.util.List getItems()> -> _SOURCE_
<android.hardware.input.InputManager: int getPointerSpeed(android.content.Context)> -> _SOURCE_
<java.text.SimpleDateFormat: java.lang.String toPattern()> -> _SOURCE_
<java.lang.reflect.Array: byte getByte(java.lang.Object,int)> -> _SOURCE_
<android.media.tv.tuner.frontend.FrontendSettings: int getFrequency()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isUniqueDeviceAttestationSupported()> -> _SOURCE_
<com.android.internal.logging.InstanceIdSequence: com.android.internal.logging.InstanceId newInstanceId()> -> _SOURCE_
<android.media.MediaRouter2$RouteCallback: void onRoutesChanged(java.util.List)> -> _SOURCE_
<android.os.storage.StorageManager: android.os.storage.StorageVolume[] getVolumeList(int,int)> -> _SOURCE_
<java.net.URLConnection: boolean getDefaultUseCaches()> -> _SOURCE_
<java.net.DatagramSocket: int getLocalPort()> -> _SOURCE_
<android.net.ConnectivityManager: java.lang.String[] getTetheredIfaces()> -> _SOURCE_
<android.telephony.ims.ImsCallProfile: java.lang.String toString()> -> _SOURCE_
<android.location.GnssCapabilities: boolean hasMeasurementCorrections()> -> _SOURCE_
<android.bluetooth.BluetoothManager: int getConnectionState(android.bluetooth.BluetoothDevice,int)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: int getMaxLearnedBatteryCapacity()> -> _SOURCE_
<android.content.Context: boolean isUiContext()> -> _SOURCE_
<android.content.IntentFilter: int countCategories()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.util.List setMeteredDataDisabledPackages(android.content.ComponentName,java.util.List)> -> _SOURCE_
<android.media.tv.tuner.Lnb: int sendDiseqcMessage(byte[])> -> _SOURCE_
<android.app.Presentation: android.view.Display getDisplay()> -> _SOURCE_
<android.hardware.hdmi.HdmiTvClient: void sendMhlVendorCommand(int,int,int,byte[])> -> _SOURCE_
<android.net.ConnectivityDiagnosticsManager$DataStallReport: android.net.LinkProperties getLinkProperties()> -> _SOURCE_
<android.net.Ikev2VpnProfile: java.lang.String getServerAddr()> -> _SOURCE_
<android.telephony.TelephonyManager: int getPhoneType(int)> -> _SOURCE_
<android.mtp.MtpDevice: int getDeviceId()> -> _SOURCE_
<android.media.tv.tuner.filter.IpFilterConfiguration: int getDstPort()> -> _SOURCE_
<com.android.internal.widget.CachingIconView: java.lang.Runnable setImageResourceAsync(int)> -> _SOURCE_
<android.mtp.MtpDevice: byte[] getThumbnail(int)> -> _SOURCE_
<android.media.session.MediaSession$QueueItem: long getQueueId()> -> _SOURCE_
<android.content.ContentQueryMap: android.content.ContentValues getValues(java.lang.String)> -> _SOURCE_
<android.app.AppOpsManager$HistoricalUidOps: int getPackageCount()> -> _SOURCE_
<java.util.Objects: java.lang.String toString(java.lang.Object,java.lang.String)> -> _SOURCE_
<android.net.ConnectivityDiagnosticsManager$ConnectivityReport: android.net.LinkProperties getLinkProperties()> -> _SOURCE_
<android.app.Dialog: android.view.View onCreatePanelView(int)> -> _SOURCE_
<android.view.TextureView: void buildLayer()> -> _SOURCE_
<android.telephony.euicc.EuiccCardManager: void requestSmdsAddress(java.lang.String,java.util.concurrent.Executor,android.telephony.euicc.EuiccCardManager$ResultCallback)> -> _SOURCE_
<java.lang.ExceptionInInitializerError: java.lang.Throwable getCause()> -> _SOURCE_
<android.bluetooth.BluetoothManager: java.util.List getDevicesMatchingConnectionStates(int,int[])> -> _SOURCE_
<android.app.ActivityManager: boolean isForegroundService(int)> -> _SOURCE_
<android.content.pm.ChangedPackages: java.util.List getPackageNames()> -> _SOURCE_
<android.hardware.camera2.impl.CameraMetadataNative$Key: int hashCode()> -> _SOURCE_
<android.os.UserManager: android.content.pm.UserInfo findCurrentGuestUser()> -> _SOURCE_
<android.telephony.SmsCbMessage: int getGeographicalScope()> -> _SOURCE_
<android.net.wifi.WifiNetworkScoreCache: android.net.ScoredNetwork getScoredNetwork(android.net.NetworkKey)> -> _SOURCE_
<android.media.AudioManager: int getLastAudibleStreamVolume(int)> -> _SOURCE_
<android.location.GnssClock: boolean hasReferenceConstellationTypeForIsb()> -> _SOURCE_
<android.app.ActivityOptions: android.app.ActivityOptions makeTaskLaunchBehind()> -> _SOURCE_
<java.nio.ByteBuffer: boolean hasArray()> -> _SOURCE_
<android.app.WallpaperManager: boolean isWallpaperBackupEligible(int)> -> _SOURCE_
<android.hardware.input.KeyboardLayout: java.lang.String getLabel()> -> _SOURCE_
<android.app.SearchableInfo: boolean shouldIncludeInGlobalSearch()> -> _SOURCE_
<android.content.ContextWrapper: android.content.res.Resources getResources()> -> _SOURCE_
<com.android.internal.telephony.GsmAlphabet: int countGsmSeptets(char)> -> _SOURCE_
<android.app.AppOpsManager: void getHistoricalOpsFromDiskRaw(android.app.AppOpsManager$HistoricalOpsRequest,java.util.concurrent.Executor,java.util.function.Consumer)> -> _SOURCE_
<android.hardware.camera2.utils.SizeAreaComparator: int compare(android.util.Size,android.util.Size)> -> _SOURCE_
<javax.net.ssl.SSLContext: javax.net.ssl.SSLSessionContext getServerSessionContext()> -> _SOURCE_
<android.content.IntentFilter: java.lang.String getDataType(int)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: android.os.UserHandle getDeviceOwnerUser()> -> _SOURCE_
<com.android.internal.telephony.TelephonyPermissions: boolean checkReadPhoneState(android.content.Context,int,int,int,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.app.slice.SliceItem: boolean hasAnyHints(java.lang.String[])> -> _SOURCE_
<android.gesture.Gesture: android.graphics.RectF getBoundingBox()> -> _SOURCE_
<android.content.ComponentName: void printShortString(java.io.PrintWriter,java.lang.String,java.lang.String)> -> _SOURCE_
<android.media.MediaRouter2$RoutingController: java.util.List getDeselectableRoutes()> -> _SOURCE_
<android.media.tv.tuner.DemuxCapabilities: int getPesFilterCount()> -> _SOURCE_
<android.telephony.euicc.DownloadableSubscription: java.lang.String getConfirmationCode()> -> _SOURCE_
<android.os.UserHandle: int getSharedAppGid(int)> -> _SOURCE_
<android.media.tv.tuner.frontend.FrontendStatus: int getSignalQuality()> -> _SOURCE_
<java.security.cert.PKIXCertPathValidatorResult: java.lang.String toString()> -> _SOURCE_
<android.metrics.LogMaker: android.metrics.LogMaker setCounterBucket(long)> -> _SOURCE_
<android.webkit.WebChromeClient: void onReceivedTouchIconUrl(android.webkit.WebView,java.lang.String,boolean)> -> _SOURCE_
<android.hardware.camera2.impl.CameraMetadataNative: java.util.ArrayList getAllVendorKeys(java.lang.Class)> -> _SOURCE_
<android.content.IntentFilter: java.util.Iterator mimeGroupsIterator()> -> _SOURCE_
<android.security.keystore.KeyInfo: java.util.Date getKeyValidityForConsumptionEnd()> -> _SOURCE_
<android.graphics.drawable.Icon: java.lang.String getResPackage()> -> _SOURCE_
<android.content.pm.PackageItemInfo: android.graphics.drawable.Drawable loadUnbadgedIcon(android.content.pm.PackageManager)> -> _SOURCE_
<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder detectImplicitDirectBoot()> -> _SOURCE_
<android.os.Parcel$ReadWriteHelper: java.lang.String readString8(android.os.Parcel)> -> _SOURCE_
<android.media.Metadata: boolean parse(android.os.Parcel)> -> _SOURCE_
<android.media.MediaMetadata: java.lang.CharSequence getText(java.lang.String)> -> _SOURCE_
<android.hardware.camera2.impl.CameraDeviceImpl$StateCallbackKK: void onIdle(android.hardware.camera2.CameraDevice)> -> _SOURCE_
<com.android.internal.widget.RecyclerView$State: boolean isPreLayout()> -> _SOURCE_
<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)> -> _SOURCE_
<android.content.pm.PackageInstaller$SessionInfo: java.lang.String getStagedSessionErrorMessage()> -> _SOURCE_
<android.content.Context: android.os.UserHandle getUser()> -> _SOURCE_
<android.app.ActivityThread: android.app.ContextImpl createSystemUiContext(int)> -> _SOURCE_
<android.security.keystore.AndroidKeyStoreSpi: java.security.cert.Certificate[] engineGetCertificateChain(java.lang.String)> -> _SOURCE_
<android.content.Intent: byte getByteExtra(java.lang.String,byte)> -> _SOURCE_
<java.util.jar.JarFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)> -> _SOURCE_
<android.app.assist.AssistStructure: void ensureData()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getCdmaPrlVersion()> -> _SOURCE_
<android.net.VpnService: boolean protect(java.net.DatagramSocket)> -> _SOURCE_
<android.telephony.ims.compat.stub.ImsUtListenerImplBase: void utConfigurationCallForwardQueried(com.android.ims.internal.IImsUt,int,android.telephony.ims.ImsCallForwardInfo[])> -> _SOURCE_
<android.appwidget.AppWidgetManager: int[] getAppWidgetIds(android.content.ComponentName)> -> _SOURCE_
<android.hardware.radio.RadioManager$AmBandConfig: boolean getStereo()> -> _SOURCE_
<android.service.notification.NotificationListenerService: android.service.notification.StatusBarNotification[] getActiveNotifications()> -> _SOURCE_
<android.text.method.DateTimeKeyListener: android.text.method.DateTimeKeyListener getInstance()> -> _SOURCE_
<android.util.apk.ApkSignatureSchemeV2Verifier: boolean hasSignature(java.lang.String)> -> _SOURCE_
<android.telephony.ims.stub.ImsCallSessionImplBase: void reject(int)> -> _SOURCE_
<android.os.Environment$UserEnvironment: java.io.File[] buildExternalStorageAndroidDataDirs()> -> _SOURCE_
<android.os.Environment: boolean isExternalStorageLegacy()> -> _SOURCE_
<android.telecom.Call$Callback: void onHandoverFailed(android.telecom.Call,int)> -> _SOURCE_
<android.content.pm.UserInfo: java.lang.String toString()> -> _SOURCE_
<android.net.NetworkScoreManager: java.lang.String getActiveScorerPackage()> -> _SOURCE_
<com.android.internal.os.KernelCpuProcStringReader: com.android.internal.os.KernelCpuProcStringReader$ProcFileIterator open()> -> _SOURCE_
<android.telephony.TelephonyManager: java.util.List getPackagesWithCarrierPrivileges()> -> _SOURCE_
<android.telephony.ims.stub.ImsCallSessionImplBase: boolean isInCall()> -> _SOURCE_
<java.security.cert.PKIXCertPathBuilderResult: java.security.cert.CertPath getCertPath()> -> _SOURCE_
<java.time.LocalDateTime: int getYear()> -> _SOURCE_
<android.net.IpPrefix: java.lang.String toString()> -> _SOURCE_
<com.android.internal.util.MemInfoReader: long getKernelUsedSizeKb()> -> _SOURCE_
<android.service.notification.NotificationListenerService$Ranking: boolean isAmbient()> -> _SOURCE_
<android.webkit.Plugin: java.lang.String getFileName()> -> _SOURCE_
<android.location.Address: java.lang.String getLocality()> -> _SOURCE_
<android.telephony.TelephonyManager: int isMultiSimSupported()> -> _SOURCE_
<java.util.GregorianCalendar: java.util.GregorianCalendar 'from'(java.time.ZonedDateTime)> -> _SOURCE_
<android.widget.SimpleCursorAdapter: java.lang.CharSequence convertToString(android.database.Cursor)> -> _SOURCE_
<android.view.Surface: java.lang.String toString()> -> _SOURCE_
<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewSizes()> -> _SOURCE_
<android.os.storage.StorageManager: boolean checkPermissionWriteVideo(boolean,int,int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,java.util.concurrent.Executor,android.location.LocationListener)> -> _SOURCE_
<android.view.inputmethod.InputMethodInfo: android.content.pm.ServiceInfo getServiceInfo()> -> _SOURCE_
<android.companion.BluetoothLeDeviceFilter: boolean isRenameBytesReverseOrder()> -> _SOURCE_
<java.time.DayOfWeek: long getLong(java.time.temporal.TemporalField)> -> _SOURCE_
<android.telephony.SignalStrength: int getWcdmaLevel()> -> _SOURCE_
<android.app.timezonedetector.TelephonyTimeZoneSuggestion: int getMatchType()> -> _SOURCE_
<android.hardware.display.AmbientDisplayConfiguration: boolean accessibilityInversionEnabled(int)> -> _SOURCE_
<com.android.internal.telephony.gsm.SmsMessage: com.android.internal.telephony.gsm.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,int,byte[],boolean)> -> _SOURCE_
<android.bluetooth.BluetoothGatt: java.util.List getConnectedDevices()> -> _SOURCE_
<android.net.LinkProperties: boolean isPrivateDnsActive()> -> _SOURCE_
<android.view.ViewGroup: int getDescendantFocusability()> -> _SOURCE_
<java.lang.Package: java.lang.String getSpecificationTitle()> -> _SOURCE_
<android.nfc.NfcAdapter: void dispatch(android.nfc.Tag)> -> _SOURCE_
<android.ddm.DdmHandleProfiling: void register()> -> _SOURCE_
<android.service.quicksettings.TileService: void onDestroy()> -> _SOURCE_
<android.hardware.hdmi.HdmiDeviceInfo: int getId()> -> _SOURCE_
<android.net.LinkQualityInfo: long getPacketErrorCount()> -> _SOURCE_
<android.companion.BluetoothDeviceFilter: java.lang.String getDeviceDisplayName(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<android.security.keystore.recovery.RecoveryController: boolean isRecoverableKeyStoreEnabled(android.content.Context)> -> _SOURCE_
<android.hardware.biometrics.BiometricManager: int canAuthenticate(int)> -> _SOURCE_
<android.media.tv.tuner.frontend.DvbtFrontendCapabilities: int getCodeRateCapability()> -> _SOURCE_
<android.app.usage.StorageStatsManager: java.util.Collection queryCratesForUser(java.util.UUID,android.os.UserHandle)> -> _SOURCE_
<android.speech.tts.TextToSpeech: java.lang.String getCurrentEngine()> -> _SOURCE_
<android.telephony.PhoneNumberUtils: boolean isVoiceMailNumber(int,java.lang.String)> -> _SOURCE_
<android.telecom.Connection: void unsetConnectionService(android.telecom.ConnectionService)> -> _SOURCE_
<android.net.LinkProperties: boolean isWakeOnLanSupported()> -> _SOURCE_
<java.time.temporal.TemporalQueries: java.time.temporal.TemporalQuery localTime()> -> _SOURCE_
<android.app.servertransaction.ClientTransaction: java.util.List getCallbacks()> -> _SOURCE_
<java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)> -> _SOURCE_
<android.hardware.camera2.legacy.SurfaceTextureRenderer: android.graphics.SurfaceTexture getSurfaceTexture()> -> _SOURCE_
<android.widget.CalendarView: int getWeekDayTextAppearance()> -> _SOURCE_
<android.app.admin.SystemUpdatePolicy: void saveToXml(org.xmlpull.v1.XmlSerializer)> -> _SOURCE_
<android.hardware.display.ColorDisplayManager: int getNightDisplayColorTemperature()> -> _SOURCE_
<android.net.IpPrefix: byte[] getRawAddress()> -> _SOURCE_
<android.view.accessibility.CaptioningManager: int getRawUserStyle()> -> _SOURCE_
<com.android.internal.widget.RecyclerView$LayoutManager: int getMinimumHeight()> -> _SOURCE_
<com.android.internal.telephony.TelephonyPermissions: boolean checkReadPhoneStateOnAnyActiveSub(android.content.Context,int,int,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.telephony.SmsManager: int getPremiumSmsConsent(java.lang.String)> -> _SOURCE_
<android.view.View: int getWindowSystemUiVisibility()> -> _SOURCE_
<java.lang.System: java.lang.String lineSeparator()> -> _SOURCE_
<android.content.UriPermission: android.net.Uri getUri()> -> _SOURCE_
<java.util.concurrent.locks.ReentrantLock: int getWaitQueueLength(java.util.concurrent.locks.Condition)> -> _SOURCE_
<android.telephony.SmsMessage: boolean isMWIClearMessage()> -> _SOURCE_
<android.content.pm.ShortcutInfo: java.lang.String getPackage()> -> _SOURCE_
<android.content.pm.LauncherApps$Callback: void onPackagesSuspended(java.lang.String[],android.os.UserHandle,android.os.Bundle)> -> _SOURCE_
<android.service.autofill.augmented.FillWindow: void dump(java.lang.String,java.io.PrintWriter)> -> _SOURCE_
<android.companion.BluetoothDeviceFilter$Builder: android.companion.BluetoothDeviceFilter build()> -> _SOURCE_
<android.bluetooth.BluetoothGattServerCallback: void onCharacteristicWriteRequest(android.bluetooth.BluetoothDevice,int,android.bluetooth.BluetoothGattCharacteristic,boolean,boolean,int,byte[])> -> _SOURCE_
<android.content.pm.PackageInstaller$Session: java.lang.String[] getNames()> -> _SOURCE_
<android.telephony.ims.stub.ImsCallSessionImplBase: void accept(int,android.telephony.ims.ImsStreamMediaProfile)> -> _SOURCE_
<com.android.ims.internal.uce.presence.PresRlmiInfo: com.android.ims.internal.uce.presence.PresSubscriptionState getPresSubscriptionState()> -> _SOURCE_
<android.filterfw.core.NativeFrame: java.lang.Object getObjectValue()> -> _SOURCE_
<com.android.internal.widget.LockscreenCredential: com.android.internal.widget.LockscreenCredential createPassword(java.lang.CharSequence)> -> _SOURCE_
<java.security.cert.TrustAnchor: java.security.PublicKey getCAPublicKey()> -> _SOURCE_
<com.android.internal.telephony.gsm.SmsBroadcastConfigInfo: boolean isSelected()> -> _SOURCE_
<android.net.lowpan.LowpanInterface: android.net.lowpan.LowpanIdentity getLowpanIdentity()> -> _SOURCE_
<java.time.Duration: long toMinutes()> -> _SOURCE_
<javax.crypto.spec.DHPublicKeySpec: java.math.BigInteger getG()> -> _SOURCE_
<android.print.PrinterId: java.lang.String getLocalId()> -> _SOURCE_
<java.io.RandomAccessFile: java.io.FileDescriptor getFD()> -> _SOURCE_
<android.telephony.NetworkScanRequest: int getMaxSearchTime()> -> _SOURCE_
<android.security.Credentials: boolean deleteAllTypesForAlias(android.security.KeyStore,java.lang.String,int)> -> _SOURCE_
<java.util.HashMap: int size()> -> _SOURCE_
<android.service.notification.NotificationListenerService$RankingMap: android.service.notification.NotificationListenerService$Ranking getRawRankingObject(java.lang.String)> -> _SOURCE_
<java.util.concurrent.CountedCompleter: java.util.concurrent.CountedCompleter getCompleter()> -> _SOURCE_
<com.android.internal.app.procstats.SparseMappingTable: byte getIdFromKey(int)> -> _SOURCE_
<java.time.LocalDate: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)> -> _SOURCE_
<android.media.tv.tuner.frontend.DvbtFrontendSettings: int getGuardInterval()> -> _SOURCE_
<android.app.AppOpsManager: int parseHistoricalMode(java.lang.String)> -> _SOURCE_
<android.os.Debug$MemoryInfo: int getSummaryTotalPss()> -> _SOURCE_
<android.net.NetworkStats: int findIndex(java.lang.String,int,int,int,int,int,int)> -> _SOURCE_
<android.telephony.SignalStrength: int getTdScdmaDbm()> -> _SOURCE_
<android.mtp.MtpEvent: int getEventCode()> -> _SOURCE_
<com.android.internal.widget.RecyclerView$LayoutManager: android.view.View findViewByPosition(int)> -> _SOURCE_
<android.widget.AbsListView: boolean isStackFromBottom()> -> _SOURCE_
<android.media.MediaMetadataEditor: int[] getEditableKeys()> -> _SOURCE_
<com.android.internal.colorextraction.types.Tonal$ColorRange: java.lang.String toString()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: void getDeferredJobsLineLocked(java.lang.StringBuilder,int)> -> _SOURCE_
<com.android.internal.util.MemInfoReader: long getCachedSizeKb()> -> _SOURCE_
<android.content.Context: int getColor(int)> -> _SOURCE_
<com.android.ims.internal.uce.presence.PresRlmiInfo: void setSubscriptionExpireTime(int)> -> _SOURCE_
<android.telephony.CallForwardingInfo: void writeToParcel(android.os.Parcel,int)> -> _SOURCE_
<android.app.ApplicationPackageManager: java.lang.String[] getSystemSharedLibraryNames()> -> _SOURCE_
<android.net.LinkProperties: android.net.CaptivePortalData getCaptivePortalData()> -> _SOURCE_
<android.telephony.data.DataCallResponse: int getLinkStatus()> -> _SOURCE_
<android.hardware.camera2.params.Capability: java.lang.String toString()> -> _SOURCE_
<java.io.ObjectStreamClass: long getSerialVersionUID()> -> _SOURCE_
<java.net.InetAddress: int hashCode()> -> _SOURCE_
<android.os.RecoverySystem: void processPackage(android.content.Context,java.io.File,android.os.RecoverySystem$ProgressListener)> -> _SOURCE_
<android.media.JetPlayer: boolean clearQueue()> -> _SOURCE_
<android.media.MediaCodecInfo$CodecCapabilities: boolean isFeatureRequired(java.lang.String)> -> _SOURCE_
<android.net.http.SslCertificate: java.lang.String toString()> -> _SOURCE_
<android.speech.RecognizerIntent: android.content.Intent getVoiceDetailsIntent(android.content.Context)> -> _SOURCE_
<com.android.internal.app.procstats.SparseMappingTable$Table: int getKeyAt(int)> -> _SOURCE_
<android.view.textservice.SpellCheckerInfo: java.lang.String getPackageName()> -> _SOURCE_
<android.telephony.ims.stub.ImsUtImplBase: int updateClir(int)> -> _SOURCE_
<android.view.textclassifier.TextClassificationManager: void dump(com.android.internal.util.IndentingPrintWriter)> -> _SOURCE_
<android.view.LayoutInflater: android.content.Context getContext()> -> _SOURCE_
<android.hardware.usb.UsbDevice: java.lang.String getProductName()> -> _SOURCE_
<android.content.ClipDescription: int getMimeTypeCount()> -> _SOURCE_
<android.net.wifi.WifiMigration$SettingsMigrationData: boolean isP2pFactoryResetPending()> -> _SOURCE_
<com.android.internal.widget.ActionBarOverlayLayout: void onNestedScrollAccepted(android.view.View,android.view.View,int)> -> _SOURCE_
<android.app.NotificationChannel: void setAllowBubbles(boolean)> -> _SOURCE_
<android.printservice.PrintServiceInfo: int describeContents()> -> _SOURCE_
<android.service.notification.StatusBarNotification: java.lang.String toString()> -> _SOURCE_
<android.view.Display: long getPresentationDeadlineNanos()> -> _SOURCE_
<android.os.UserManager: boolean hasUserRestrictionOnAnyUser(java.lang.String)> -> _SOURCE_
<android.app.usage.ExternalStorageStats: long getObbBytes()> -> _SOURCE_
<android.telephony.TelephonyManager: byte[] iccExchangeSimIO(int,int,int,int,int,int,java.lang.String)> -> _SOURCE_
<android.bluetooth.BluetoothGattCallback: void onPhyRead(android.bluetooth.BluetoothGatt,int,int,int)> -> _SOURCE_
<com.android.ims.internal.uce.presence.PresRlmiInfo: int getRequestId()> -> _SOURCE_
<android.telephony.data.DataProfile: int getType()> -> _SOURCE_
<android.telephony.SignalStrength: int getGsmSignalStrength()> -> _SOURCE_
<android.media.tv.tuner.frontend.IsdbtFrontendCapabilities: int getCodeRateCapability()> -> _SOURCE_
<android.content.res.Resources$Theme: int[] getAttributeResolutionStack(int,int,int)> -> _SOURCE_
<android.util.MergedConfiguration: android.content.res.Configuration getMergedConfiguration()> -> _SOURCE_
<android.app.LoaderManager: android.app.FragmentHostCallback getFragmentHostCallback()> -> _SOURCE_
<com.android.internal.widget.LockPatternView: boolean isTactileFeedbackEnabled()> -> _SOURCE_
<android.service.autofill.SaveInfo: int getFlags()> -> _SOURCE_
<android.nfc.tech.MifareClassic: boolean isEmulated()> -> _SOURCE_
<java.security.cert.PolicyQualifierInfo: byte[] getPolicyQualifier()> -> _SOURCE_
<android.app.Application: java.lang.String getProcessName()> -> _SOURCE_
<android.view.textservice.SpellCheckerInfo: void dump(java.io.PrintWriter,java.lang.String)> -> _SOURCE_
<java.util.IntSummaryStatistics: java.lang.String toString()> -> _SOURCE_
<android.widget.ImageView: android.graphics.drawable.Drawable getDrawable()> -> _SOURCE_
<android.os.UserManager: boolean supportsMultipleUsers()> -> _SOURCE_
<android.net.VpnService$Builder: android.net.VpnService$Builder addRoute(java.lang.String,int)> -> _SOURCE_
<android.os.DropBoxManager: void addFile(java.lang.String,java.io.File,int)> -> _SOURCE_
<android.hardware.display.WifiDisplay: java.lang.String getFriendlyDisplayName()> -> _SOURCE_
<android.telephony.NeighboringCellInfo: int getLac()> -> _SOURCE_
<android.service.controls.templates.TemperatureControlTemplate: int getTemplateType()> -> _SOURCE_
<android.telephony.TelephonyRegistryManager: void notifyCallStateChanged(int,int,int,java.lang.String)> -> _SOURCE_
<android.telecom.ParcelableCall: int getCallerNumberVerificationStatus()> -> _SOURCE_
<android.bluetooth.BluetoothGattCharacteristic: android.bluetooth.BluetoothGattService getService()> -> _SOURCE_
<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder penaltyDeathOnCleartextNetwork()> -> _SOURCE_
<android.media.tv.tuner.filter.AudioDescriptor: byte getAdPan()> -> _SOURCE_
<android.telephony.SmsCbMessage: android.telephony.SmsCbCmasInfo getCmasWarningInfo()> -> _SOURCE_
<android.net.http.SslCertificate: android.net.http.SslCertificate$DName getIssuedBy()> -> _SOURCE_
<android.hardware.camera2.params.TonemapCurve: java.lang.String toString()> -> _SOURCE_
<android.view.KeyEvent: long getEventTime()> -> _SOURCE_
<android.content.res.Resources: int getIdentifier(java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.content.rollback.RollbackInfo: int getCommittedSessionId()> -> _SOURCE_
<android.view.KeyEvent: long getDownTime()> -> _SOURCE_
<android.content.Intent: java.lang.String getIdentifier()> -> _SOURCE_
<android.preference.DialogPreference: android.graphics.drawable.Drawable getDialogIcon()> -> _SOURCE_
<android.net.Uri$Builder: java.lang.String toString()> -> _SOURCE_
<android.hardware.location.NanoApp: byte[] getAppBinary()> -> _SOURCE_
<android.media.midi.MidiDeviceInfo$PortInfo: java.lang.String getName()> -> _SOURCE_
<android.hardware.camera2.utils.SurfaceUtils: boolean isSurfaceForHwVideoEncoder(android.view.Surface)> -> _SOURCE_
<android.text.PrecomputedText$Params: java.lang.String toString()> -> _SOURCE_
<java.security.Provider: java.lang.String getProperty(java.lang.String)> -> _SOURCE_
<com.android.internal.os.KernelCpuThreadReaderDiff: java.util.ArrayList getProcessCpuUsageDiffed()> -> _SOURCE_
<android.text.SpannableStringBuilder: void clearSpans()> -> _SOURCE_
<android.preference.PreferenceActivity: java.util.List getHeaders()> -> _SOURCE_
<android.media.tv.TvInputService: android.media.tv.TvInputService$Session onCreateSession(java.lang.String,java.lang.String)> -> _SOURCE_
<java.security.cert.CertPathBuilder: java.security.cert.CertPathBuilder getInstance(java.lang.String)> -> _SOURCE_
<com.android.internal.os.KernelCpuSpeedReader: long[] readAbsolute()> -> _SOURCE_
<android.os.SystemService: boolean isRunning(java.lang.String)> -> _SOURCE_
<android.net.metrics.NetworkMetrics$Summary: java.lang.String toString()> -> _SOURCE_
<java.net.InetAddress: boolean isMCSiteLocal()> -> _SOURCE_
<android.bluetooth.BluetoothCodecConfig: boolean hasSingleSampleRate()> -> _SOURCE_
<android.view.Choreographer: android.view.Choreographer getSfInstance()> -> _SOURCE_
<android.net.http.SslCertificate$DName: java.lang.String getDName()> -> _SOURCE_
<android.util.KeyValueListParser$FloatValue: void parse(android.util.KeyValueListParser)> -> _SOURCE_
<android.content.ContentResolver: java.lang.String syncErrorToString(int)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$DualTimer: com.android.internal.os.BatteryStatsImpl$DurationTimer getSubTimer()> -> _SOURCE_
<android.service.notification.Adjustment: java.lang.String toString()> -> _SOURCE_
<android.content.pm.PackageManager: void invalidatePackageInfoCache()> -> _SOURCE_
<java.util.concurrent.ForkJoinPool: int getActiveThreadCount()> -> _SOURCE_
<android.service.dreams.DreamService: void onPanelClosed(int,android.view.Menu)> -> _SOURCE_
<java.io.File: java.lang.String getName()> -> _SOURCE_
<android.content.res.AssetManager: java.lang.String getOverlayablesToString(java.lang.String)> -> _SOURCE_
<android.view.textclassifier.TextLanguage$Request: android.view.textclassifier.SystemTextClassifierMetadata getSystemTextClassifierMetadata()> -> _SOURCE_
<java.lang.System: java.util.Properties getProperties()> -> _SOURCE_
<android.os.StatFs: long getAvailableBytes()> -> _SOURCE_
<android.app.NotificationManager: android.app.NotificationChannel getNotificationChannel(java.lang.String,java.lang.String)> -> _SOURCE_
<java.net.InetAddress: java.net.InetAddress getLocalHost()> -> _SOURCE_
<android.content.res.AssetFileDescriptor: java.lang.String toString()> -> _SOURCE_
<android.view.ViewGroup: void onNestedScrollAccepted(android.view.View,android.view.View,int)> -> _SOURCE_
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreviewSize()> -> _SOURCE_
<android.content.Loader: int getId()> -> _SOURCE_
<android.app.admin.SystemUpdateInfo: long getReceivedTime()> -> _SOURCE_
<android.os.HwParcel: java.util.ArrayList readFloatVector()> -> _SOURCE_
<android.app.backup.BackupTransport: int initializeDevice()> -> _SOURCE_
<android.net.NetworkCapabilities: int[] getUnwantedCapabilities()> -> _SOURCE_
<com.android.internal.telephony.uicc.asn1.Asn1Decoder: int getPosition()> -> _SOURCE_
<android.app.ListActivity: android.widget.ListView getListView()> -> _SOURCE_
<android.graphics.Paint: android.graphics.Paint$FontMetrics getFontMetrics()> -> _SOURCE_
<android.drm.DrmSupportInfo: java.util.Iterator getMimeTypeIterator()> -> _SOURCE_
<android.hardware.Camera$Parameters: void getFocusDistances(float[])> -> _SOURCE_
<java.math.BigDecimal: int precision()> -> _SOURCE_
<android.app.ExpandableListActivity: long getSelectedId()> -> _SOURCE_
<android.service.voice.AlwaysOnHotwordDetector$ModelParamRange: int getStart()> -> _SOURCE_
<android.net.ProxyInfo: android.net.Uri getPacFileUrl()> -> _SOURCE_
<android.telephony.ims.RcsUceAdapter: int getUcePublishState()> -> _SOURCE_
<android.provider.BrowserContract$SyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])> -> _SOURCE_
<android.widget.CompoundButton: int getHorizontalOffsetForDrawables()> -> _SOURCE_
<android.hardware.display.VirtualDisplay: java.lang.String toString()> -> _SOURCE_
<android.app.admin.SystemUpdatePolicy$ValidationFailedException: android.app.admin.SystemUpdatePolicy$ValidationFailedException combinedPeriodTooLong(java.lang.String)> -> _SOURCE_
<android.opengl.GLU: java.lang.String gluErrorString(int)> -> _SOURCE_
<android.accessibilityservice.AccessibilityService$SoftKeyboardController: int getShowMode()> -> _SOURCE_
<android.util.KeyValueListParser$StringValue: void dump(java.io.PrintWriter,java.lang.String)> -> _SOURCE_
<android.app.Activity: android.app.ActivityThread getActivityThread()> -> _SOURCE_
<android.os.MemoryFile: int readBytes(byte[],int,int,int)> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo: int getRegionCount()> -> _SOURCE_
<android.service.voice.VoiceInteractionSession$PickOptionRequest: java.lang.CharSequence getPrompt()> -> _SOURCE_
<android.app.NotificationHistory: android.app.NotificationHistory$HistoricalNotification getNextNotification()> -> _SOURCE_
<android.telecom.Logging.Session: java.lang.String toString()> -> _SOURCE_
<android.telephony.ImsiEncryptionInfo: java.lang.String getMnc()> -> _SOURCE_
<android.media.AudioPlaybackCaptureConfiguration: int[] getExcludeUids()> -> _SOURCE_
<android.content.pm.PackageInstaller$SessionParams: android.content.pm.PackageInstaller$SessionParams copy()> -> _SOURCE_
<android.app.assist.AssistStructure$WindowNode: android.app.assist.AssistStructure$ViewNode getRootViewNode()> -> _SOURCE_
<android.media.MediaRecorder: java.util.List getActiveMicrophones()> -> _SOURCE_
<android.os.RecoverySystem: boolean wipeEuiccData(android.content.Context,java.lang.String)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()> -> _SOURCE_
<android.webkit.CacheManager$CacheResult: java.lang.String getExpiresString()> -> _SOURCE_
<android.content.ContentResolver: android.net.Uri canonicalizeOrElse(android.net.Uri)> -> _SOURCE_
<android.app.trust.TrustManager: void reportEnabledTrustAgentsChanged(int)> -> _SOURCE_
<android.service.notification.StatusBarNotification: java.lang.String getTag()> -> _SOURCE_
<android.app.usage.UsageEvents$Event: java.lang.String getTaskRootPackageName()> -> _SOURCE_
<android.net.Ikev2VpnProfile: boolean isBypassable()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: int getPasswordMinimumNonLetter(android.content.ComponentName)> -> _SOURCE_
<android.provider.Telephony$Mms: java.lang.String extractAddrSpec(java.lang.String)> -> _SOURCE_
<android.widget.ExpandableListView: long getSelectedPosition()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: long getPageSize()> -> _SOURCE_
<android.hardware.radio.RadioManager$BandConfig: int getRegion()> -> _SOURCE_
<android.content.IntentFilter: boolean isVerified()> -> _SOURCE_
<android.app.role.RoleManager: java.lang.String getDefaultSmsPackage(int)> -> _SOURCE_
<android.provider.CallLog$Calls: java.lang.String getLastOutgoingCall(android.content.Context)> -> _SOURCE_
<android.content.res.AssetFileDescriptor: long getLength()> -> _SOURCE_
<android.mtp.MtpStorage: java.lang.String getPath()> -> _SOURCE_
<android.net.ConnectivityManager: int getConnectionOwnerUid(int,java.net.InetSocketAddress,java.net.InetSocketAddress)> -> _SOURCE_
<android.content.Intent: int getIntExtra(java.lang.String,int)> -> _SOURCE_
<android.telephony.NeighboringCellInfo: int getNetworkType()> -> _SOURCE_
<android.hardware.hdmi.HdmiRecordListener$TimerStatusData: int getNotProgammedError()> -> _SOURCE_
<android.webkit.WebViewFactory: java.lang.String getWebViewLibrary(android.content.pm.ApplicationInfo)> -> _SOURCE_
<android.telecom.ConnectionRequest: int describeContents()> -> _SOURCE_
<android.telephony.PinResult: java.lang.String toString()> -> _SOURCE_
<android.content.pm.PackageInstaller$Session: boolean isMultiPackage()> -> _SOURCE_
<android.content.ContentResolver: java.lang.String getType(android.net.Uri)> -> _SOURCE_
<android.media.tv.tuner.DemuxCapabilities: int getTsFilterCount()> -> _SOURCE_
<java.net.URLConnection: long getLastModified()> -> _SOURCE_
<android.filterfw.core.AsyncRunner: java.lang.Exception getError()> -> _SOURCE_
<java.util.Locale: java.lang.String getDisplayScript()> -> _SOURCE_
<android.bluetooth.SdpSapsRecord: java.lang.String toString()> -> _SOURCE_
<android.provider.BrowserContract$SyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])> -> _SOURCE_
<android.database.sqlite.SQLiteConnectionPool: void collectDbStats(java.util.ArrayList)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.util.List getDelegatedScopes(android.content.ComponentName,java.lang.String)> -> _SOURCE_
<android.app.Notification: boolean showsTime()> -> _SOURCE_
<android.text.style.SuggestionSpan: java.lang.String getNotificationTargetClassName()> -> _SOURCE_
<android.app.admin.DeviceAdminInfo: void readPoliciesFromXml(org.xmlpull.v1.XmlPullParser)> -> _SOURCE_
<android.service.autofill.UserData: android.os.Bundle getDefaultFieldClassificationArgs()> -> _SOURCE_
<java.lang.ClassLoader: java.lang.ClassLoader getParent()> -> _SOURCE_
<android.telephony.CellIdentityGsm: int getArfcn()> -> _SOURCE_
<android.app.Notification$BubbleMetadata: android.app.PendingIntent getDeleteIntent()> -> _SOURCE_
<android.hardware.location.GeofenceHardwareMonitorEvent: java.lang.String toString()> -> _SOURCE_
<android.media.MediaTranscodeManager$TranscodingJob: int getResult()> -> _SOURCE_
<android.media.midi.MidiDevice: java.lang.String toString()> -> _SOURCE_
<android.graphics.RenderNode$AnimationHost: boolean isAttached()> -> _SOURCE_
<android.os.FileUtils: int translateModeAccessToPosix(int)> -> _SOURCE_
<android.hardware.location.GeofenceHardwareRequest: int getSourceTechnologies()> -> _SOURCE_
<android.app.usage.StorageStats: long getCacheBytes()> -> _SOURCE_
<android.app.backup.BackupDataOutput: long getQuota()> -> _SOURCE_
<android.app.Notification$MessagingStyle: android.widget.RemoteViews makeBigContentView()> -> _SOURCE_
<android.telecom.Call: android.telecom.Call getParent()> -> _SOURCE_
<android.location.GnssCapabilities: boolean hasMeasurementCorrectionsReflectingPane()> -> _SOURCE_
<java.time.Month: java.lang.String getDisplayName(java.time.format.TextStyle,java.util.Locale)> -> _SOURCE_
<android.hardware.Camera$Parameters: int getMaxNumFocusAreas()> -> _SOURCE_
<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()> -> _SOURCE_
<android.widget.SimpleCursorAdapter: android.widget.SimpleCursorAdapter$ViewBinder getViewBinder()> -> _SOURCE_
<android.os.connectivity.CellularBatteryStats: long getRxTimeMillis()> -> _SOURCE_
<android.app.ApplicationExitInfo: java.lang.String getDescription()> -> _SOURCE_
<android.content.pm.PackageInstaller$SessionInfo: int[] getChildSessionIds()> -> _SOURCE_
<android.net.NetworkWatchlistManager: byte[] getWatchlistConfigHash()> -> _SOURCE_
<android.text.style.SuggestionSpan: java.lang.String[] getSuggestions()> -> _SOURCE_
<java.net.HttpURLConnection: java.io.InputStream getErrorStream()> -> _SOURCE_
<android.telephony.PreciseDataConnectionState: int getNetworkType()> -> _SOURCE_
<android.media.session.MediaController: java.lang.String getPackageName()> -> _SOURCE_
<android.media.tv.tunerresourcemanager.TunerFrontendRequest: int getClientId()> -> _SOURCE_
<android.telephony.SubscriptionManager: boolean canManageSubscription(android.telephony.SubscriptionInfo,java.lang.String)> -> _SOURCE_
<android.os.GraphicsEnvironment: java.lang.String getDebugLayerPathsFromSettings(android.os.Bundle,android.content.pm.IPackageManager,java.lang.String,android.content.pm.ApplicationInfo)> -> _SOURCE_
<android.util.proto.ProtoInputStream: int getFieldNumber()> -> _SOURCE_
<java.lang.invoke.CallSite: java.lang.invoke.MethodType type()> -> _SOURCE_
<android.media.MediaPlayer: android.media.MediaPlayer$TrackInfo[] getTrackInfo()> -> _SOURCE_
<android.bluetooth.le.PeriodicAdvertisingReport: java.lang.String toString()> -> _SOURCE_
<android.media.MediaRouter: int getRouteCount()> -> _SOURCE_
<android.app.ActivityManager: java.util.List getRunningAppProcesses()> -> _SOURCE_
<android.net.util.LinkPropertiesUtils$CompareResult: java.lang.String toString()> -> _SOURCE_
<com.android.internal.content.om.OverlayConfigParser$ParsedConfiguration: java.lang.String toString()> -> _SOURCE_
<android.hardware.display.DisplayManager: android.view.Display[] getDisplays()> -> _SOURCE_
<android.view.ViewConfiguration: long getZoomControlsTimeout()> -> _SOURCE_
<android.content.ContentResolver: java.util.List getOutgoingPersistedUriPermissions()> -> _SOURCE_
<android.os.Bundle: android.util.SparseArray getSparseParcelableArray(java.lang.String)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: void startManagedQuickContact(java.lang.String,long,android.content.Intent)> -> _SOURCE_
<android.security.net.config.ApplicationConfig: boolean isCleartextTrafficPermitted(java.lang.String)> -> _SOURCE_
<android.media.audiopolicy.AudioProductStrategy: int getVolumeGroupIdForLegacyStreamType(int)> -> _SOURCE_
<android.view.ViewGroup: void onNestedPreScroll(android.view.View,int,int,int[])> -> _SOURCE_
<android.telephony.SubscriptionManager: int getSimStateForSlotIndex(int)> -> _SOURCE_
<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder detectIncorrectContextUse()> -> _SOURCE_
<android.service.controls.Control: java.lang.String getControlId()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: long[] getCpuFreqTimes(int,int)> -> _SOURCE_
<java.net.JarURLConnection: java.util.jar.Attributes getMainAttributes()> -> _SOURCE_
<android.service.controls.Control: java.lang.CharSequence getStructure()> -> _SOURCE_
<android.content.rollback.PackageRollbackInfo: android.util.IntArray getSnapshottedUsers()> -> _SOURCE_
<android.telephony.data.ApnSetting: int getId()> -> _SOURCE_
<android.app.PendingIntent: boolean isForegroundService()> -> _SOURCE_
<com.android.ims.internal.uce.options.OptionsCmdStatus: com.android.ims.internal.uce.common.CapInfo getCapInfo()> -> _SOURCE_
<android.provider.DeviceConfig$Properties: float getFloat(java.lang.String,float)> -> _SOURCE_
<android.appwidget.AppWidgetManager: java.util.List getInstalledProviders(int)> -> _SOURCE_
<android.content.pm.PackagePartitions$SystemPartition: boolean containsPath(java.lang.String)> -> _SOURCE_
<android.media.MediaRouter2: android.media.MediaRouter2$RoutingController getSystemController()> -> _SOURCE_
<java.util.Calendar: java.util.Locale[] getAvailableLocales()> -> _SOURCE_
<android.content.pm.LauncherApps: android.os.ParcelFileDescriptor getUriShortcutIconFd(android.content.pm.ShortcutInfo)> -> _SOURCE_
<android.content.pm.ShortcutInfo: java.lang.String getResourceTypeName(java.lang.String)> -> _SOURCE_
<android.telephony.SmsCbCmasInfo: int getSeverity()> -> _SOURCE_
<android.media.MediaRouter$UserRouteInfo: void setVolumeCallback(android.media.MediaRouter$VolumeCallback)> -> _SOURCE_
<com.android.internal.midi.MidiDispatcher: int getReceiverCount()> -> _SOURCE_
<android.os.UserHandle: int getUserId(int)> -> _SOURCE_
<android.location.GpsClock: boolean hasBiasInNs()> -> _SOURCE_
<android.media.midi.MidiDeviceService: android.os.IBinder onBind(android.content.Intent)> -> _SOURCE_
<android.service.voice.VoiceInteractionSession$Request: java.lang.String getCallingPackage()> -> _SOURCE_
<java.security.cert.CertStore: java.security.cert.CertStore getInstance(java.lang.String,java.security.cert.CertStoreParameters)> -> _SOURCE_
<android.database.sqlite.SQLiteQueryBuilder: java.lang.String computeWhere(java.lang.String)> -> _SOURCE_
<android.hardware.location.ContextHubManager: int unregisterCallback(android.hardware.location.ContextHubManager$Callback)> -> _SOURCE_
<android.app.KeyguardManager: android.content.Intent createConfirmDeviceCredentialIntent(java.lang.CharSequence,java.lang.CharSequence)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.util.List getUserControlDisabledPackages(android.content.ComponentName)> -> _SOURCE_
<android.location.GnssNavigationMessage: int getStatus()> -> _SOURCE_
<android.net.TrafficStats: long getTxPackets(java.lang.String)> -> _SOURCE_
<java.util.concurrent.ForkJoinTask: boolean inForkJoinPool()> -> _SOURCE_
<android.net.util.LinkPropertiesUtils$CompareOrUpdateResult: java.lang.String toString()> -> _SOURCE_
<android.telephony.ims.ImsCallSession: boolean isInCall()> -> _SOURCE_
<java.lang.Class: boolean isPrimitive()> -> _SOURCE_
<android.telephony.ims.stub.ImsCallSessionImplBase: android.telephony.ims.ImsCallProfile getCallProfile()> -> _SOURCE_
<java.util.logging.Handler: java.util.logging.Formatter getFormatter()> -> _SOURCE_
<android.media.AudioRecordingConfiguration: android.media.AudioFormat getClientFormat()> -> _SOURCE_
<android.net.TrafficStats: long getMobileTxPackets()> -> _SOURCE_
<android.view.inputmethod.InputMethodManager: boolean isActive(android.view.View)> -> _SOURCE_
<android.media.tv.tuner.frontend.FrontendInfo: int getId()> -> _SOURCE_
<android.print.PrintJobInfo: int getState()> -> _SOURCE_
<android.bluetooth.BluetoothMapClient: int getConnectionPolicy(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<com.android.ims.internal.uce.presence.PresCapInfo: com.android.ims.internal.uce.common.CapInfo getCapInfo()> -> _SOURCE_
<android.hardware.display.DisplayManager: android.hardware.display.BrightnessConfiguration getBrightnessConfigurationForUser(int)> -> _SOURCE_
<android.hardware.radio.RadioManager$BandDescriptor: int getType()> -> _SOURCE_
<android.media.soundtrigger.SoundTriggerDetector$Callback: void onRecognitionPaused()> -> _SOURCE_
<android.content.pm.ShortcutInfo: java.lang.String lookUpResourceName(android.content.res.Resources,int,boolean,java.lang.String)> -> _SOURCE_
<android.content.BroadcastReceiver: boolean isInitialStickyBroadcast()> -> _SOURCE_
<android.view.autofill.AutofillManager: void registerCallback(android.view.autofill.AutofillManager$AutofillCallback)> -> _SOURCE_
<android.provider.FontRequest: java.lang.String getProviderAuthority()> -> _SOURCE_
<android.content.pm.ApplicationInfo: boolean allowsNativeHeapPointerTagging()> -> _SOURCE_
<android.nfc.NfcActivityManager: void onActivityCreated(android.app.Activity,android.os.Bundle)> -> _SOURCE_
<com.android.internal.app.procstats.SparseMappingTable: void writeToParcel(android.os.Parcel)> -> _SOURCE_
<android.media.projection.MediaProjectionInfo: java.lang.String toString()> -> _SOURCE_
<android.os.incremental.V4Signature: byte[] toByteArray()> -> _SOURCE_
<android.text.style.LineHeightSpan$Standard: int getSpanTypeIdInternal()> -> _SOURCE_
<java.lang.reflect.AccessibleObject: boolean isAnnotationPresent(java.lang.Class)> -> _SOURCE_
<android.content.pm.ComponentInfo: boolean isEnabled()> -> _SOURCE_
<android.media.tv.tuner.Tuner: android.media.tv.tuner.frontend.FrontendInfo getFrontendInfo()> -> _SOURCE_
<android.view.View: android.content.Context getContext()> -> _SOURCE_
<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress,int)> -> _SOURCE_
<android.hardware.biometrics.BiometricPrompt$CryptoObject: android.security.identity.IdentityCredential getIdentityCredential()> -> _SOURCE_
<java.time.OffsetDateTime: int getNano()> -> _SOURCE_
<android.content.ContentResolver: void cancelSync(android.net.Uri)> -> _SOURCE_
<android.media.AudioManager: int getVolumeIndexForAttributes(android.media.AudioAttributes)> -> _SOURCE_
<android.media.AudioDeviceInfo: int convertInternalDeviceToDeviceType(int)> -> _SOURCE_
<java.time.zone.ZoneRules: java.lang.String toString()> -> _SOURCE_
<android.media.VolumeShaper$Operation$Builder: android.media.VolumeShaper$Operation build()> -> _SOURCE_
<android.telephony.CellSignalStrengthTdscdma: int getAsuLevel()> -> _SOURCE_
<android.telecom.TelecomManager: void addNewIncomingConference(android.telecom.PhoneAccountHandle,android.os.Bundle)> -> _SOURCE_
<java.time.chrono.HijrahDate: java.time.chrono.HijrahEra getEra()> -> _SOURCE_
<android.app.WindowConfiguration: boolean isAlwaysOnTop()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: long getLastNetworkLogRetrievalTime()> -> _SOURCE_
<android.net.StaticIpConfiguration: java.lang.String getDomains()> -> _SOURCE_
<android.graphics.drawable.LevelListDrawable: void clearMutated()> -> _SOURCE_
<android.security.net.config.Pin: int getDigestLength(java.lang.String)> -> _SOURCE_
<android.net.LinkQualityInfo: long getLastDataSampleTime()> -> _SOURCE_
<org.apache.http.params.HttpConnectionParams: int getConnectionTimeout(org.apache.http.params.HttpParams)> -> _SOURCE_
<android.app.Fragment: android.content.Context getContext()> -> _SOURCE_
<android.media.tv.tuner.filter.TsRecordEvent: int getTsIndexMask()> -> _SOURCE_
<android.util.DebugUtils: void printSizeValue(java.io.PrintWriter,long)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: android.os.BatteryStats$LevelStepTracker getDailyChargeLevelStepTracker()> -> _SOURCE_
<android.widget.ArrayAdapter: android.content.Context getContext()> -> _SOURCE_
<android.content.pm.LauncherApps: int getShortcutIconResId(java.lang.String,java.lang.String,android.os.UserHandle)> -> _SOURCE_
<android.renderscript.ProgramStore: boolean isDepthMaskEnabled()> -> _SOURCE_
<android.hardware.Camera$Parameters: void dump()> -> _SOURCE_
<javax.net.SocketFactory: java.net.Socket createSocket()> -> _SOURCE_
<android.app.PendingIntent: boolean isActivity()> -> _SOURCE_
<android.app.servertransaction.ConfigurationChangeItem: java.lang.String toString()> -> _SOURCE_
<android.content.IntentFilter: java.lang.String[] getHosts()> -> _SOURCE_
<android.location.LocationTime: long getTime()> -> _SOURCE_
<android.view.MotionEvent: float getX(int)> -> _SOURCE_
<android.telephony.CellIdentityLte: int getTac()> -> _SOURCE_
<android.app.ActivityManager: boolean isProcStateBackground(int)> -> _SOURCE_
<android.bluetooth.BluetoothMap: boolean isConnected(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<android.content.Intent: java.lang.String resolveType(android.content.Context)> -> _SOURCE_
<android.telephony.NetworkRegistrationInfo: android.telephony.CellIdentity getCellIdentity()> -> _SOURCE_
<android.media.MediaRouter: android.media.MediaRouter$RouteCategory getSystemCategory()> -> _SOURCE_
<android.telephony.ims.ImsSsData: java.lang.String toString()> -> _SOURCE_
<android.location.Location: void removeAccuracy()> -> _SOURCE_
<java.net.URLConnection: boolean getDoOutput()> -> _SOURCE_
<com.android.internal.util.DumpUtils: boolean checkDumpAndUsageStatsPermission(android.content.Context,java.lang.String,java.io.PrintWriter)> -> _SOURCE_
<android.content.pm.InstantAppInfo: java.lang.String getPackageName()> -> _SOURCE_
<android.telephony.data.QualifiedNetworksService$NetworkAvailabilityProvider: int getSlotIndex()> -> _SOURCE_
<android.app.NotificationManager: void cancelAsUser(java.lang.String,int,android.os.UserHandle)> -> _SOURCE_
<android.app.admin.DeviceAdminReceiver: void onPasswordSucceeded(android.content.Context,android.content.Intent)> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: android.bluetooth.le.BluetoothLeScanner getBluetoothLeScanner()> -> _SOURCE_
<android.view.accessibility.AccessibilityRecord: int getScrollDeltaX()> -> _SOURCE_
<android.os.Bundle: byte[] getByteArray(java.lang.String)> -> _SOURCE_
<android.app.Activity: void startActivityForResultAsUser(android.content.Intent,java.lang.String,int,android.os.Bundle,android.os.UserHandle)> -> _SOURCE_
<android.media.tv.tuner.filter.RecordSettings: int getScIndexType()> -> _SOURCE_
<android.view.KeyEvent: char getDisplayLabel()> -> _SOURCE_
<android.telephony.ims.compat.feature.MMTelFeature: void onFeatureRemoved()> -> _SOURCE_
<android.telecom.Connection: int getSupportedAudioRoutes()> -> _SOURCE_
<android.telephony.ims.ImsCallSession: java.lang.String getProperty(java.lang.String)> -> _SOURCE_
<android.graphics.drawable.Icon: android.content.res.Resources getResources()> -> _SOURCE_
<android.view.ViewGroup: android.view.View getTransientView(int)> -> _SOURCE_
<android.telephony.data.DataCallResponse: int getId()> -> _SOURCE_
<android.net.IpSecManager$UdpEncapsulationSocket: java.lang.String toString()> -> _SOURCE_
<android.app.slice.SliceManager: boolean hasSliceAccess()> -> _SOURCE_
<android.widget.TimePicker: boolean validateInput()> -> _SOURCE_
<android.media.tv.tuner.frontend.DvbsFrontendSettings: int getInputStreamId()> -> _SOURCE_
<android.content.pm.LauncherApps$PinItemRequest: android.os.Bundle getExtras()> -> _SOURCE_
<android.media.tv.tuner.filter.IpFilterConfiguration: byte[] getDstIpAddress()> -> _SOURCE_
<android.hardware.fingerprint.FingerprintManager: boolean isHardwareDetected()> -> _SOURCE_
<com.android.internal.os.KernelCpuThreadReaderSettingsObserver: com.android.internal.os.KernelCpuThreadReaderDiff getSettingsModifiedReader(android.content.Context)> -> _SOURCE_
<java.security.MessageDigest: java.security.Provider getProvider()> -> _SOURCE_
<android.media.audiofx.AudioEffect: int byteArrayToInt(byte[])> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: void invalidateGetProfileConnectionStateCache()> -> _SOURCE_
<android.telephony.TelephonyScanManager: android.telephony.NetworkScan requestNetworkScan(int,android.telephony.NetworkScanRequest,java.util.concurrent.Executor,android.telephony.TelephonyScanManager$NetworkScanCallback,java.lang.String,java.lang.String)> -> _SOURCE_
<android.graphics.GraphicBuffer: int getUsage()> -> _SOURCE_
<android.util.proto.ProtoInputStream: int getWireType()> -> _SOURCE_
<android.media.session.MediaSession$Token: android.media.session.ISessionController getBinder()> -> _SOURCE_
<android.mtp.MtpObjectInfo: long getSequenceNumberLong()> -> _SOURCE_
<android.media.MediaRouter$RouteCategory: java.lang.String toString()> -> _SOURCE_
<android.media.tv.tuner.filter.MediaEvent: int getMpuSequenceNumber()> -> _SOURCE_
<android.text.style.AbsoluteSizeSpan: int getSpanTypeIdInternal()> -> _SOURCE_
<android.widget.ActivityChooserModel: android.widget.ActivityChooserModel get(android.content.Context,java.lang.String)> -> _SOURCE_
<java.util.UUID: long timestamp()> -> _SOURCE_
<java.net.HttpURLConnection: java.lang.String getHeaderField(int)> -> _SOURCE_
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize getStandardMediaSizeById(java.lang.String)> -> _SOURCE_
<java.util.PropertyResourceBundle: java.lang.Object handleGetObject(java.lang.String)> -> _SOURCE_
<android.security.ConfirmationCallback: void onDismissed()> -> _SOURCE_
<android.view.SurfaceControl: long acquireFrameRateFlexibilityToken()> -> _SOURCE_
<android.content.RestrictionEntry: boolean getSelectedState()> -> _SOURCE_
<android.net.lowpan.LowpanScanner: java.util.Collection getChannelMask()> -> _SOURCE_
<java.util.zip.Deflater: int getTotalOut()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getVoiceMailAlphaTag(int)> -> _SOURCE_
<android.content.pm.ApplicationInfo: boolean usesNonSdkApi()> -> _SOURCE_
<android.telephony.ims.ImsCallSession$Listener: void callSessionTransferFailed(android.telephony.ims.ImsCallSession,android.telephony.ims.ImsReasonInfo)> -> _SOURCE_
<java.net.URLConnection: java.lang.String getHeaderField(int)> -> _SOURCE_
<android.metrics.LogMaker: android.metrics.LogMaker setCounterBucket(int)> -> _SOURCE_
<android.net.NetworkPolicyManager: android.net.NetworkPolicyManager 'from'(android.content.Context)> -> _SOURCE_
<android.bluetooth.SdpOppOpsRecord: java.lang.String toString()> -> _SOURCE_
<java.security.cert.CertStore: java.util.Collection getCertificates(java.security.cert.CertSelector)> -> _SOURCE_
<android.location.GnssMeasurement: double getSnrInDb()> -> _SOURCE_
<android.app.timezonedetector.ManualTimeZoneSuggestion: java.lang.String toString()> -> _SOURCE_
<android.net.TrafficStats: android.net.NetworkStats stopDataProfiling(android.content.Context)> -> _SOURCE_
<com.android.internal.os.WifiPowerEstimator: void calculateRemaining(com.android.internal.os.BatterySipper,android.os.BatteryStats,long,long,int)> -> _SOURCE_
<java.text.StringCharacterIterator: int getEndIndex()> -> _SOURCE_
<android.os.Environment: java.io.File getProductDirectory()> -> _SOURCE_
<android.telephony.TelephonyManager: void setNetworkOperatorNameForPhone(int,java.lang.String)> -> _SOURCE_
<java.util.Formatter: java.lang.String toString()> -> _SOURCE_
<android.telephony.euicc.EuiccManager: android.telephony.euicc.EuiccInfo getEuiccInfo()> -> _SOURCE_
<android.view.textclassifier.TextLinksParams$Builder: android.view.textclassifier.TextLinksParams build()> -> _SOURCE_
<android.telephony.ims.stub.ImsEcbmImplBase: com.android.ims.internal.IImsEcbm getImsEcbm()> -> _SOURCE_
<android.content.ContentResolver: java.lang.String[] getSyncAdapterPackagesForAuthorityAsUser(java.lang.String,int)> -> _SOURCE_
<android.location.LocationProvider: boolean meetsCriteria(android.location.Criteria)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: void clearApplicationUserData(android.content.ComponentName,java.lang.String,java.util.concurrent.Executor,android.app.admin.DevicePolicyManager$OnClearApplicationUserDataListener)> -> _SOURCE_
<android.app.ActivityManager$TaskSnapshot: boolean isTranslucent()> -> _SOURCE_
<android.net.MobileLinkQualityInfo: int getLteRsrq()> -> _SOURCE_
<java.util.Currency: java.lang.String getCurrencyCode()> -> _SOURCE_
<android.location.GpsMeasurement: long getCarrierCycles()> -> _SOURCE_
<android.widget.Scroller: int getFinalY()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long getPhoneOnTime(long,int)> -> _SOURCE_
<android.bluetooth.BluetoothHeadset: int getAudioState(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<android.media.session.MediaSessionManager: boolean isTrustedForMediaControl(android.media.session.MediaSessionManager$RemoteUserInfo)> -> _SOURCE_
<android.media.MediaRoute2ProviderService: java.util.List getAllSessionInfo()> -> _SOURCE_
<android.util.KeyValueListParser$IntValue: int getValue()> -> _SOURCE_
<java.io.StringWriter: java.lang.String toString()> -> _SOURCE_
<android.os.Bundle: java.util.ArrayList getStringArrayList(java.lang.String)> -> _SOURCE_
<android.app.Notification: java.util.List getContextualActions()> -> _SOURCE_
<android.nfc.NfcActivityManager: void onActivityPaused(android.app.Activity)> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: java.lang.String getViewIdResourceName()> -> _SOURCE_
<android.os.UserManager: int getUserHandle()> -> _SOURCE_
<android.location.GnssMeasurement: long getReceivedSvTimeUncertaintyNanos()> -> _SOURCE_
<com.android.internal.util.TypedProperties: java.lang.String getString(java.lang.String,java.lang.String)> -> _SOURCE_
<com.android.internal.app.WindowDecorActionBar: int getTabCount()> -> _SOURCE_
<android.media.AudioPlaybackConfiguration: int getClientPid()> -> _SOURCE_
<android.app.contentsuggestions.ClassificationsRequest: java.util.List getSelections()> -> _SOURCE_
<android.content.pm.RegisteredServicesCache$ServiceInfo: java.lang.String toString()> -> _SOURCE_
<android.telephony.ims.feature.MmTelFeature: com.android.ims.internal.IImsMultiEndpoint getMultiEndpointInterface()> -> _SOURCE_
<android.app.NotificationManager: android.app.INotificationManager getService()> -> _SOURCE_
<android.location.Location: java.lang.String toString()> -> _SOURCE_
<android.text.TextUtils: int length(java.lang.String)> -> _SOURCE_
<android.app.JobSchedulerImpl: int scheduleAsPackage(android.app.job.JobInfo,java.lang.String,int,java.lang.String)> -> _SOURCE_
<android.telephony.euicc.EuiccManager: java.lang.String getEid()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getGroupIdLevel1(int)> -> _SOURCE_
<android.telephony.CallQuality: int getUplinkCallQualityLevel()> -> _SOURCE_
<android.location.GnssMeasurement: boolean hasCarrierPhaseUncertainty()> -> _SOURCE_
<android.net.ConnectivityManager: java.lang.String[] getTetherableWifiRegexs()> -> _SOURCE_
<android.content.res.ApkAssets: android.content.res.ApkAssets loadFromPath(java.lang.String)> -> _SOURCE_
<android.media.audiopolicy.AudioVolumeGroup: java.lang.String toString()> -> _SOURCE_
<android.net.Ikev2VpnProfile: java.lang.String certificateToPemString(java.security.cert.X509Certificate)> -> _SOURCE_
<android.app.StatusBarManager: void removeIcon(java.lang.String)> -> _SOURCE_
<java.lang.reflect.Executable: java.lang.reflect.Type[] getGenericParameterTypes()> -> _SOURCE_
<android.hardware.location.ContextHubIntentEvent: android.hardware.location.ContextHubInfo getContextHubInfo()> -> _SOURCE_
<java.security.spec.ECParameterSpec: java.security.spec.EllipticCurve getCurve()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getIsimDomain()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: android.os.BatteryStats$Timer getMulticastWakelockStats()> -> _SOURCE_
<android.location.GnssMeasurement: long getCarrierCycles()> -> _SOURCE_
<java.security.cert.CollectionCertStoreParameters: java.util.Collection getCollection()> -> _SOURCE_
<android.net.NetworkStack: android.os.IBinder getService()> -> _SOURCE_
<android.location.GpsSatellite: int getPrn()> -> _SOURCE_
<android.app.AppOpsManager: int checkAudioOpNoThrow(int,int,int,java.lang.String)> -> _SOURCE_
<android.media.MediaRouter$RouteInfo: android.view.Display getPresentationDisplay()> -> _SOURCE_
<android.hardware.camera2.impl.CameraMetadataNative$Key: java.lang.Class getType()> -> _SOURCE_
<android.provider.FontsContract$FontInfo: android.net.Uri getUri()> -> _SOURCE_
<android.timezone.ZoneInfoDb: java.lang.String getVersion()> -> _SOURCE_
<android.content.pm.PackageParser$SigningDetails: boolean hasCertificate(byte[])> -> _SOURCE_
<android.app.ActivityManager: int staticGetMemoryClass()> -> _SOURCE_
<android.util.LongSparseArray: int size()> -> _SOURCE_
<android.app.assist.AssistStructure$ViewNode: java.lang.String getIdEntry()> -> _SOURCE_
<android.hardware.usb.UsbManager: long getCurrentFunctions()> -> _SOURCE_
<android.app.WallpaperManager: int getDesiredMinimumHeight()> -> _SOURCE_
<android.media.audiopolicy.AudioProductStrategy: int getLegacyStreamTypeForAudioAttributes(android.media.AudioAttributes)> -> _SOURCE_
<android.telecom.Connection: void onAnswer(int)> -> _SOURCE_
<android.widget.ShareActionProvider: void onPrepareSubMenu(android.view.SubMenu)> -> _SOURCE_
<android.telephony.RadioAccessFamily: java.lang.String toString()> -> _SOURCE_
<android.content.pm.PackageInfo: boolean isOverlayPackage()> -> _SOURCE_
<android.telephony.CellInfoCdma: android.telephony.CellIdentityCdma getCellIdentity()> -> _SOURCE_
<java.time.LocalDateTime: java.lang.String toString()> -> _SOURCE_
<com.android.ims.internal.uce.presence.PresTupleInfo: void setContactUri(java.lang.String)> -> _SOURCE_
<android.location.LocationProvider: int getAccuracy()> -> _SOURCE_
<android.app.slice.SliceSpec: java.lang.String getType()> -> _SOURCE_
<android.media.tv.tuner.frontend.IsdbtFrontendSettings: int getCodeRate()> -> _SOURCE_
<android.app.SearchableInfo: java.lang.String getSuggestPackage()> -> _SOURCE_
<android.os.Debug: void resetGlobalAllocSize()> -> _SOURCE_
<android.bluetooth.BluetoothGattCharacteristic: int getInstanceId()> -> _SOURCE_
<android.view.MotionEvent: int getDisplayId()> -> _SOURCE_
<android.view.accessibility.AccessibilityEvent: int getWindowChanges()> -> _SOURCE_
<android.location.GnssClock: boolean hasTimeUncertaintyNanos()> -> _SOURCE_
<android.app.AppOpsManager$HistoricalPackageOps: android.app.AppOpsManager$HistoricalOp getOpAt(int)> -> _SOURCE_
<android.os.Debug: int getGlobalClassInitCount()> -> _SOURCE_
<android.content.pm.ChangedPackages: int getSequenceNumber()> -> _SOURCE_
<android.provider.SearchIndexablesProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SOURCE_
<java.nio.LongBuffer: java.lang.String toString()> -> _SOURCE_
<android.provider.ContactsContract$Contacts$AggregationSuggestions$Builder: android.net.Uri build()> -> _SOURCE_
<android.service.voice.VoiceInteractionSession: void onRequestCommand(android.service.voice.VoiceInteractionSession$CommandRequest)> -> _SOURCE_
<android.media.tv.TvContract: boolean isChannelUri(android.net.Uri)> -> _SOURCE_
<java.text.ParsePosition: java.lang.String toString()> -> _SOURCE_
<android.widget.NumberPicker: int getMinValue()> -> _SOURCE_
<android.view.WindowInsets: android.graphics.Insets getSystemGestureInsets()> -> _SOURCE_
<android.graphics.FontFamily: boolean addFontFromBuffer(java.nio.ByteBuffer,int,android.graphics.fonts.FontVariationAxis[],int,int)> -> _SOURCE_
<android.os.PowerManager: boolean isRebootingUserspaceSupported()> -> _SOURCE_
<android.mtp.MtpDevice: int[] getObjectHandles(int,int,int)> -> _SOURCE_
<android.net.ConnectivityManager: android.net.NetworkRequest getDefaultRequest()> -> _SOURCE_
<android.content.res.AssetManager: void setConfiguration(int,int,java.lang.String,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)> -> _SOURCE_
<android.content.pm.PackageInfo: java.lang.String toString()> -> _SOURCE_
<android.speech.tts.TtsEngines: java.util.Locale normalizeTTSLocale(java.util.Locale)> -> _SOURCE_
<android.location.LocationManager: android.location.LocationProvider getProvider(java.lang.String)> -> _SOURCE_
<android.app.backup.BackupTransport: int clearBackupData(android.content.pm.PackageInfo)> -> _SOURCE_
<android.os.Debug: boolean isDebuggerConnected()> -> _SOURCE_
<android.media.tv.TvContentRatingSystemInfo: android.media.tv.TvContentRatingSystemInfo createTvContentRatingSystemInfo(int,android.content.pm.ApplicationInfo)> -> _SOURCE_
<android.os.Debug: void dumpHprofDataDdms()> -> _SOURCE_
<android.hardware.soundtrigger.SoundTrigger$ModuleProperties: int getRecognitionModes()> -> _SOURCE_
<android.content.ContentResolver: java.io.OutputStream openOutputStream(android.net.Uri)> -> _SOURCE_
<java.lang.String: java.lang.String copyValueOf(char[],int,int)> -> _SOURCE_
<android.app.VrManager: boolean isVrModeEnabled()> -> _SOURCE_
<java.nio.channels.spi.SelectorProvider: java.nio.channels.spi.SelectorProvider provider()> -> _SOURCE_
<java.security.cert.X509CertSelector: java.util.Set getPolicy()> -> _SOURCE_
<android.net.NetworkStats: java.lang.String toString()> -> _SOURCE_
<android.content.res.Configuration: int diffPublicOnly(android.content.res.Configuration)> -> _SOURCE_
<android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: int getLeIoCapability()> -> _SOURCE_
<android.net.metrics.ApfProgramEvent$Builder: android.net.metrics.ApfProgramEvent build()> -> _SOURCE_
<android.os.storage.StorageManager: android.os.storage.StorageVolume getStorageVolume(android.net.Uri)> -> _SOURCE_
<java.lang.invoke.MethodHandles$Lookup: java.lang.invoke.MethodHandle findGetter(java.lang.Class,java.lang.String,java.lang.Class)> -> _SOURCE_
<com.android.internal.view.menu.MenuBuilder: com.android.internal.view.menu.MenuBuilder getRootMenu()> -> _SOURCE_
<android.hardware.usb.UsbDevice: java.lang.String getSerialNumber()> -> _SOURCE_
<android.app.FragmentHostCallback: boolean onShouldSaveFragmentState(android.app.Fragment)> -> _SOURCE_
<android.graphics.Region: java.lang.String toString()> -> _SOURCE_
<android.telephony.UiccSlotInfo: java.lang.String toString()> -> _SOURCE_
<android.telephony.ims.feature.CapabilityChangeRequest$CapabilityPair: int getCapability()> -> _SOURCE_
<android.media.AudioAttributes: int getUsage()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.util.List queryPermissionsByGroup(java.lang.String,int)> -> _SOURCE_
<android.app.usage.StorageStatsManager: java.util.Collection queryCratesForPackage(java.util.UUID,java.lang.String,android.os.UserHandle)> -> _SOURCE_
<android.os.storage.StorageManager: boolean isObbMounted(java.lang.String)> -> _SOURCE_
<com.android.internal.widget.LockscreenCredential: int size()> -> _SOURCE_
<android.telephony.ims.stub.RcsPresenceExchangeImplBase: void onCapabilityRequestResponse(java.util.List,int)> -> _SOURCE_
<android.os.HwParcel: java.util.ArrayList readInt8Vector()> -> _SOURCE_
<android.app.ActivityManagerNative: android.app.IActivityManager getDefault()> -> _SOURCE_
<android.telecom.Call$Details: java.lang.String getTelecomCallId()> -> _SOURCE_
<android.os.UserManager: long getUserCreationTime(android.os.UserHandle)> -> _SOURCE_
<android.hardware.usb.UsbManager: void setCurrentFunction(java.lang.String,boolean)> -> _SOURCE_
<android.telephony.PhoneNumberUtils: byte[] networkPortionToCalledPartyBCDWithLength(java.lang.String)> -> _SOURCE_
<android.hardware.usb.UsbAccessory: java.lang.String getModel()> -> _SOURCE_
<android.provider.DocumentsContract: android.net.Uri buildRootUri(java.lang.String,java.lang.String)> -> _SOURCE_
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getJpegThumbnailSize()> -> _SOURCE_
<android.telephony.data.DataProfile: int getAuthType()> -> _SOURCE_
<android.os.UserManager: boolean isUserNameSet()> -> _SOURCE_
<java.security.cert.X509Certificate: void verify(java.security.PublicKey,java.security.Provider)> -> _SOURCE_
<java.net.URLConnection: java.lang.String getRequestProperty(java.lang.String)> -> _SOURCE_
<android.webkit.CacheManager$CacheResult: java.io.InputStream getInputStream()> -> _SOURCE_
<android.graphics.Paint: java.util.Locale getTextLocale()> -> _SOURCE_
<android.os.UserManager: boolean isUserTypeManagedProfile(java.lang.String)> -> _SOURCE_
<android.location.GnssMeasurement: boolean hasFullInterSignalBiasUncertaintyNanos()> -> _SOURCE_
<java.util.concurrent.locks.ReentrantReadWriteLock: int getReadLockCount()> -> _SOURCE_
<com.android.internal.telephony.cdma.SmsMessage: byte[] getEnvelopeBearerData()> -> _SOURCE_
<android.os.CpuUsageInfo: long getTotal()> -> _SOURCE_
<android.hardware.location.NanoAppMessage: int getMessageType()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isDeviceOwnerAppOnAnyUser(java.lang.String)> -> _SOURCE_
<android.media.AudioManager: int getUiSoundsStreamType()> -> _SOURCE_
<android.content.res.AssetManager: void createSystemAssetsInZygoteLocked(boolean,java.lang.String)> -> _SOURCE_
<android.content.pm.ShortcutInfo: boolean isRankChanged()> -> _SOURCE_
<android.app.ProgressDialog: boolean isIndeterminate()> -> _SOURCE_
<android.content.ContentResolver: void setSyncAutomaticallyAsUser(android.accounts.Account,java.lang.String,boolean,int)> -> _SOURCE_
<com.android.internal.content.om.OverlayScanner: com.android.internal.content.om.OverlayScanner$ParsedOverlayInfo getParsedInfo(java.lang.String)> -> _SOURCE_
<com.android.internal.app.procstats.SparseMappingTable$Table: void writeToParcel(android.os.Parcel)> -> _SOURCE_
<android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityNodeInfo getRootInActiveWindow(int)> -> _SOURCE_
<android.app.assist.AssistStructure$ViewNode: int getScrollY()> -> _SOURCE_
<android.media.tv.tuner.DemuxCapabilities: int getAudioFilterCount()> -> _SOURCE_
<android.content.ContextWrapper: int startActivitiesAsUser(android.content.Intent[],android.os.Bundle,android.os.UserHandle)> -> _SOURCE_
<android.inputmethodservice.KeyboardView: android.inputmethodservice.Keyboard getKeyboard()> -> _SOURCE_
<android.hardware.biometrics.BiometricPrompt$AuthenticationCallback: void onSystemEvent(int)> -> _SOURCE_
<android.widget.TableLayout: android.widget.LinearLayout$LayoutParams generateLayoutParams(android.util.AttributeSet)> -> _SOURCE_
<android.net.TrafficStats: long getUidUdpRxBytes(int)> -> _SOURCE_
<android.app.SearchableInfo: java.lang.String getSuggestAuthority()> -> _SOURCE_
<android.hardware.camera2.impl.CaptureCallback: java.util.concurrent.Executor getExecutor()> -> _SOURCE_
<java.util.logging.Handler: java.util.logging.ErrorManager getErrorManager()> -> _SOURCE_
<android.service.autofill.Dataset$DatasetFieldFilter: java.lang.String toString()> -> _SOURCE_
<android.app.admin.DeviceAdminInfo: android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager)> -> _SOURCE_
<android.telephony.SmsMessage: int getStatus()> -> _SOURCE_
<android.telephony.VisualVoicemailSms: java.lang.String getPrefix()> -> _SOURCE_
<android.telephony.CellIdentityLte: int getEarfcn()> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: int getState()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isOffhook()> -> _SOURCE_
<android.media.AudioPort: int[] formats()> -> _SOURCE_
<android.print.PrintDocumentInfo: int getContentType()> -> _SOURCE_
<android.app.ResourcesManager: android.view.Display getAdjustedDisplay(int,android.content.res.Resources)> -> _SOURCE_
<android.app.ActivityManager$TaskDescription: android.graphics.Bitmap getIcon()> -> _SOURCE_
<android.app.AppOpsManager: java.lang.String opToPermission(int)> -> _SOURCE_
<android.bluetooth.BluetoothGattService: java.util.List getIncludedServices()> -> _SOURCE_
<android.service.resolver.ResolverRankerService: void onDestroy()> -> _SOURCE_
<java.beans.PropertyChangeEvent: java.lang.String getPropertyName()> -> _SOURCE_
<android.hardware.radio.RadioManager$FmBandDescriptor: boolean isRdsSupported()> -> _SOURCE_
<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.String getId()> -> _SOURCE_
<android.net.TrafficStats: long getMobileTcpTxPackets()> -> _SOURCE_
<android.content.pm.ResolveInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)> -> _SOURCE_
<android.telephony.AccessNetworkUtils: int getDuplexModeForEutranBand(int)> -> _SOURCE_
<android.content.pm.ApplicationInfo: boolean hasRtlSupport()> -> _SOURCE_
<android.accessibilityservice.AccessibilityServiceInfo: int describeContents()> -> _SOURCE_
<android.content.pm.PackageInstaller$Session: void fsync(java.io.OutputStream)> -> _SOURCE_
<android.telephony.TelephonyManager$CellInfoCallback: void onError(int,java.lang.Throwable)> -> _SOURCE_
<android.telephony.ims.stub.ImsFeatureConfiguration$FeatureSlotPair: java.lang.String toString()> -> _SOURCE_
<com.android.internal.os.KernelCpuThreadReader: java.util.ArrayList getProcessCpuUsage()> -> _SOURCE_
<com.android.internal.os.BaseCommand: java.lang.String nextOption()> -> _SOURCE_
<java.security.spec.ECPublicKeySpec: java.security.spec.ECPoint getW()> -> _SOURCE_
<android.view.textclassifier.ConversationAction: java.lang.String getType()> -> _SOURCE_
<android.media.RoutingSessionInfo: java.util.List getSelectedRoutes()> -> _SOURCE_
<android.view.InputDevice: java.util.List getMotionRanges()> -> _SOURCE_
<java.util.Date: int getDay()> -> _SOURCE_
<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentPaused(android.app.FragmentManager,android.app.Fragment)> -> _SOURCE_
<android.app.job.JobInfo: long getEstimatedNetworkDownloadBytes()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isNetworkLoggingEnabled(android.content.ComponentName)> -> _SOURCE_
<java.util.Calendar: java.lang.String getDisplayName(int,int,java.util.Locale)> -> _SOURCE_
<android.net.LinkQualityInfo: int getTheoreticalTxBandwidth()> -> _SOURCE_
<android.hardware.display.AmbientDisplayConfiguration: boolean tapGestureEnabled(int)> -> _SOURCE_
<android.service.autofill.FillRequest: java.util.List getFillContexts()> -> _SOURCE_
<android.hardware.face.Face: int describeContents()> -> _SOURCE_
<android.app.slice.SliceQuery: android.app.slice.SliceItem find(android.app.slice.SliceItem,java.lang.String)> -> _SOURCE_
<com.android.internal.util.MemInfoReader: long getKernelUsedSize()> -> _SOURCE_
<android.app.AppOpsManager$AttributedHistoricalOps: android.app.AppOpsManager$HistoricalOp getOpAt(int)> -> _SOURCE_
<android.telephony.SmsCbMessage: int getMessageFormat()> -> _SOURCE_
<android.widget.PopupWindow: boolean isTouchable()> -> _SOURCE_
<android.media.session.MediaSessionManager: java.util.List getActiveSessions(android.content.ComponentName)> -> _SOURCE_
<android.hardware.location.NanoAppInstanceInfo: int getNeededExecMemBytes()> -> _SOURCE_
<android.view.ActionProvider: void onPrepareSubMenu(android.view.SubMenu)> -> _SOURCE_
<android.database.DatabaseUtils: int getTypeOfObject(java.lang.Object)> -> _SOURCE_
<android.bluetooth.BluetoothHearingAid: long getHiSyncId(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<android.graphics.YuvImage: byte[] getYuvData()> -> _SOURCE_
<android.media.tv.tuner.frontend.IsdbtFrontendSettings: int getServiceAreaId()> -> _SOURCE_
<android.telephony.ClosedSubscriberGroupInfo: int getCsgIdentity()> -> _SOURCE_
<android.os.FileUtils: java.lang.String translateModePosixToString(int)> -> _SOURCE_
<android.media.projection.MediaProjection: android.media.projection.IMediaProjection getProjection()> -> _SOURCE_
<android.os.BatterySaverPolicyConfig: float getAdjustBrightnessFactor()> -> _SOURCE_
<android.hardware.camera2.legacy.LegacyCameraDevice: boolean isClosed()> -> _SOURCE_
<android.app.Notification$Action: android.app.RemoteInput[] getDataOnlyRemoteInputs()> -> _SOURCE_
<android.media.tv.TvInputManager: boolean isParentalControlsEnabled()> -> _SOURCE_
<android.media.tv.TvTrackInfo: int getAudioSampleRate()> -> _SOURCE_
<java.util.Locale: java.lang.String getISO3Country()> -> _SOURCE_
<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder insert(int,java.lang.CharSequence)> -> _SOURCE_
<java.net.NetworkInterface: int getIndex()> -> _SOURCE_
<android.telephony.CellInfoLte: android.telephony.CellIdentityLte getCellIdentity()> -> _SOURCE_
<android.widget.BaseExpandableListAdapter: void notifyDataSetChanged()> -> _SOURCE_
<android.content.integrity.IntegrityFormula$Application: android.content.integrity.IntegrityFormula isPreInstalled()> -> _SOURCE_
<java.util.logging.Level: java.lang.String toString()> -> _SOURCE_
<android.net.NetworkRequest: boolean canBeSatisfiedBy(android.net.NetworkCapabilities)> -> _SOURCE_
<android.nfc.tech.NfcF: int getTimeout()> -> _SOURCE_
<android.webkit.WebResourceResponse: java.lang.String getReasonPhrase()> -> _SOURCE_
<java.time.OffsetDateTime: java.time.DayOfWeek getDayOfWeek()> -> _SOURCE_
<java.text.FieldPosition: int getEndIndex()> -> _SOURCE_
<android.security.keystore.AttestationUtils: java.security.cert.X509Certificate[] parseCertificateChain(android.security.keymaster.KeymasterCertificateChain)> -> _SOURCE_
<android.view.textclassifier.TextClassification: java.lang.String toString()> -> _SOURCE_
<android.app.admin.DeviceAdminReceiver: void onPasswordFailed(android.content.Context,android.content.Intent,android.os.UserHandle)> -> _SOURCE_
<android.widget.BaseAdapter: void setAutofillOptions(java.lang.CharSequence[])> -> _SOURCE_
<android.location.GnssStatus: boolean hasCarrierFrequencyHz(int)> -> _SOURCE_
<android.media.tv.TvInputService: java.lang.String onHardwareRemoved(android.media.tv.TvInputHardwareInfo)> -> _SOURCE_
<java.net.Socket: java.net.InetAddress getInetAddress()> -> _SOURCE_
<android.net.metrics.DhcpErrorEvent: java.lang.String toString()> -> _SOURCE_
<android.media.audiofx.Equalizer: java.lang.String getPresetName(short)> -> _SOURCE_
<android.app.admin.FactoryResetProtectionPolicy: boolean isNotEmpty()> -> _SOURCE_
<android.se.omapi.Reader: boolean isSecureElementPresent()> -> _SOURCE_
<android.net.Uri: java.util.List getQueryParameters(java.lang.String)> -> _SOURCE_
<android.hardware.face.FaceManager: long generateChallenge()> -> _SOURCE_
<android.security.Credentials: boolean deleteAllTypesForAlias(android.security.KeyStore,java.lang.String)> -> _SOURCE_
<android.view.DragAndDropPermissions: boolean takeTransient()> -> _SOURCE_
<android.database.CursorWindow: long getLong(int,int)> -> _SOURCE_
<android.telephony.PhoneNumberUtils: java.lang.String convertKeypadLettersToDigits(java.lang.String)> -> _SOURCE_
<android.hardware.usb.UsbDevice: int getDeviceId()> -> _SOURCE_
<android.bluetooth.BluetoothHearingAid: int getConnectionState(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<java.nio.IntBuffer: java.lang.String toString()> -> _SOURCE_
<android.media.VolumeShaper$Configuration: long getDuration()> -> _SOURCE_
<android.os.Debug: void resetGlobalFreedCount()> -> _SOURCE_
<android.media.tv.TvInputService$Session: void notifyTrackSelected(int,java.lang.String)> -> _SOURCE_
<java.time.chrono.Era: java.lang.String getDisplayName(java.time.format.TextStyle,java.util.Locale)> -> _SOURCE_
<android.app.assist.AssistContent: android.net.Uri getWebUri()> -> _SOURCE_
<android.content.pm.DataLoaderParams: android.content.ComponentName getComponentName()> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing$Config: int getPostEqBandCount()> -> _SOURCE_
<android.media.MediaRouter2Manager: java.util.List getAvailableRoutes(java.lang.String)> -> _SOURCE_
<android.security.keystore.recovery.RecoveryController: android.security.keystore.recovery.RecoverySession createRecoverySession()> -> _SOURCE_
<android.telephony.TelephonyManager: void setSimCountryIso(java.lang.String)> -> _SOURCE_
<android.content.ComponentName: java.lang.String toShortString()> -> _SOURCE_
<android.media.tv.TvInputInfo: int getHdmiConnectionRelativePosition()> -> _SOURCE_
<android.telecom.Voicemail: long getTimestampMillis()> -> _SOURCE_
<com.android.internal.view.StandaloneActionMode: android.view.Menu getMenu()> -> _SOURCE_
<android.content.pm.InstantAppRequestInfo: int[] getHostDigestPrefix()> -> _SOURCE_
<android.database.sqlite.SQLiteDirectCursorDriver: java.lang.String toString()> -> _SOURCE_
<javax.crypto.KeyAgreement: javax.crypto.KeyAgreement getInstance(java.lang.String,java.lang.String)> -> _SOURCE_
<android.security.keystore.recovery.WrappedApplicationKey: byte[] getEncryptedKeyMaterial()> -> _SOURCE_
<com.android.internal.telephony.uicc.asn1.Asn1Node: java.lang.String asString()> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: int getDiscoverableTimeout()> -> _SOURCE_
<android.provider.Telephony$ServiceStateTable: android.net.Uri getUriForSubscriptionId(int)> -> _SOURCE_
<android.content.pm.PermissionInfo: int getProtection()> -> _SOURCE_
<android.os.Bundle: java.lang.String toShortString()> -> _SOURCE_
<android.service.watchdog.ExplicitHealthCheckService: android.os.IBinder onBind(android.content.Intent)> -> _SOURCE_
<android.security.KeyStoreParameter: int getFlags()> -> _SOURCE_
<android.content.ComponentName: java.lang.String toString()> -> _SOURCE_
<android.app.ActivityManager: int getPackageImportance(java.lang.String)> -> _SOURCE_
<java.nio.file.Files: long size(java.nio.file.Path)> -> _SOURCE_
<java.lang.System: java.lang.String getenv(java.lang.String)> -> _SOURCE_
<android.app.job.JobParameters: java.lang.String[] getTriggeredContentAuthorities()> -> _SOURCE_
<android.telephony.NetworkRegistrationInfo: java.util.List getAvailableServices()> -> _SOURCE_
<android.net.ConnectivityDiagnosticsManager$ConnectivityReport: android.os.PersistableBundle getAdditionalInfo()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorForPhone(int)> -> _SOURCE_
<android.net.WebAddress: java.lang.String toString()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long computeChargeTimeRemaining(long)> -> _SOURCE_
<com.android.internal.widget.RecyclerView$OnScrollListener: void onScrollStateChanged(com.android.internal.widget.RecyclerView,int)> -> _SOURCE_
<android.net.UrlQuerySanitizer: android.net.UrlQuerySanitizer$ValueSanitizer getAllIllegal()> -> _SOURCE_
<android.os.PowerManager: android.os.PowerSaveState getPowerSaveState(int)> -> _SOURCE_
<android.app.ActivityManager$TaskDescription: android.graphics.drawable.Icon getRawIcon()> -> _SOURCE_
<android.app.Notification$Builder: android.app.Notification getNotification()> -> _SOURCE_
<java.net.NetworkInterface: byte[] getHardwareAddress()> -> _SOURCE_
<android.media.soundtrigger.SoundTriggerManager$Model: int getVersion()> -> _SOURCE_
<android.telephony.SubscriptionManager: void setDefaultDataSubId(int)> -> _SOURCE_
<java.io.File: java.io.File getCanonicalFile()> -> _SOURCE_
<android.media.AudioFormat: int getChannelCount()> -> _SOURCE_
<android.security.net.config.ApplicationConfig: javax.net.ssl.X509TrustManager getTrustManager()> -> _SOURCE_
<android.app.NotificationChannelGroup: java.lang.String toString()> -> _SOURCE_
<android.app.AppOpsManager$HistoricalOp: java.lang.String getOpName()> -> _SOURCE_
<android.telephony.TelephonyManager: android.telephony.VisualVoicemailSmsFilterSettings getVisualVoicemailSmsFilterSettings(int)> -> _SOURCE_
<android.net.NetworkStats: android.net.NetworkStats$Entry getValues(int,android.net.NetworkStats$Entry)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: int getMobileRadioActiveCount(int)> -> _SOURCE_
<android.content.pm.PackageManager: void getPackageSizeInfo(java.lang.String,android.content.pm.IPackageStatsObserver)> -> _SOURCE_
<android.content.pm.PackageInstaller$SessionInfo: int getParentSessionId()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.util.List getOverrideApns(android.content.ComponentName)> -> _SOURCE_
<android.content.res.Resources: android.content.res.AssetManager getAssets()> -> _SOURCE_
<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()> -> _SOURCE_
<android.telephony.SmsManager: int getDefaultSmsSubscriptionId()> -> _SOURCE_
<android.media.Ringtone: java.lang.String getTitle(android.content.Context,android.net.Uri,boolean,boolean)> -> _SOURCE_
<java.util.concurrent.ForkJoinWorkerThread: int getPoolIndex()> -> _SOURCE_
<android.telecom.Conference: java.lang.String getTelecomCallId()> -> _SOURCE_
<com.android.internal.os.KernelWakelockReader: com.android.internal.os.KernelWakelockStats readKernelWakelockStats(com.android.internal.os.KernelWakelockStats)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long getScreenOnTime(long,int)> -> _SOURCE_
<java.util.concurrent.ForkJoinPool: int getPoolSize()> -> _SOURCE_
<android.bluetooth.le.ScanRecord: int getTxPowerLevel()> -> _SOURCE_
<java.util.logging.Logger: java.lang.String getName()> -> _SOURCE_
<android.widget.Adapter: java.lang.CharSequence[] getAutofillOptions()> -> _SOURCE_
<java.lang.invoke.MethodType: java.lang.String toString()> -> _SOURCE_
<android.media.MediaCodec$CryptoInfo$Pattern: int getEncryptBlocks()> -> _SOURCE_
<android.app.UriGrantsManager: android.app.IUriGrantsManager getService()> -> _SOURCE_
<android.app.SearchManager: java.util.List getSearchablesInGlobalSearch()> -> _SOURCE_
<java.security.cert.X509CertSelector: java.util.Collection getSubjectAlternativeNames()> -> _SOURCE_
<com.android.internal.widget.LockPatternUtils$RequestThrottledException: int getTimeoutMs()> -> _SOURCE_
<android.media.MediaRouter$RouteInfo: void requestSetVolume(int)> -> _SOURCE_
<android.app.Instrumentation$ActivityMonitor: android.app.Activity getLastActivity()> -> _SOURCE_
<android.telephony.CdmaEriInformation: int getEriIconIndex()> -> _SOURCE_
<android.app.AppOpsManager: android.app.RuntimeAppOpAccessMessage collectRuntimeAppOpAccessMessage()> -> _SOURCE_
<android.media.tv.tuner.frontend.FrontendInfo: int[] getStatusCapabilities()> -> _SOURCE_
<android.webkit.MimeTypeMap: boolean hasExtension(java.lang.String)> -> _SOURCE_
<android.media.tv.TvContract$Channels: java.lang.String getVideoResolution(java.lang.String)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.lang.CharSequence getDeviceOwnerOrganizationName()> -> _SOURCE_
<android.app.ActivityOptions: java.lang.String getPackageName()> -> _SOURCE_
<android.service.autofill.FieldClassification$Match: java.lang.String getCategoryId()> -> _SOURCE_
<android.os.IncidentReportArgs: boolean isAll()> -> _SOURCE_
<android.view.ScaleGestureDetector: float getCurrentSpan()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.lang.CharSequence getUserBadgedLabel(java.lang.CharSequence,android.os.UserHandle)> -> _SOURCE_
<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendChronologyId()> -> _SOURCE_
<android.print.PrintJobInfo: java.lang.String stateToString(int)> -> _SOURCE_
<android.telecom.Conference: int getConnectionCapabilities()> -> _SOURCE_
<android.location.GnssStatus: int getConstellationType(int)> -> _SOURCE_
<android.content.pm.ShortcutInfo: java.lang.String getResourceTypeAndEntryName(java.lang.String)> -> _SOURCE_
<android.content.ComponentName: java.lang.String getClassName()> -> _SOURCE_
<android.os.UserHandle: java.lang.String formatUid(int)> -> _SOURCE_
<android.app.servertransaction.LaunchActivityItem: java.lang.String toString()> -> _SOURCE_
<com.android.internal.widget.RecyclerView$SmoothScroller: com.android.internal.widget.RecyclerView$LayoutManager getLayoutManager()> -> _SOURCE_
<android.media.Ringtone: android.net.Uri getUri()> -> _SOURCE_
<android.media.MediaSyncEvent: int getAudioSessionId()> -> _SOURCE_
<android.view.inputmethod.InputMethodManager: java.util.List getEnabledInputMethodList()> -> _SOURCE_
<android.telephony.NetworkScanRequest: int getScanType()> -> _SOURCE_
<android.telephony.SubscriptionManager: void invalidateActiveDataSubIdCaches()> -> _SOURCE_
<android.net.NetworkPolicyManager: int getUidPolicy(int)> -> _SOURCE_
<android.os.health.HealthKeys$Constants: int[] getKeys(int)> -> _SOURCE_
<android.app.ApplicationPackageManager: java.lang.String[] getNamesForUids(int[])> -> _SOURCE_
<android.telephony.TelephonyManager: int getCarrierIdFromSimMccMnc()> -> _SOURCE_
<java.util.Arrays: java.lang.String toString(char[])> -> _SOURCE_
<javax.net.ssl.SSLEngineResult: javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus()> -> _SOURCE_
<android.os.Parcel: void writeMap(java.util.Map)> -> _SOURCE_
<android.net.InetAddresses: java.net.InetAddress parseNumericAddress(java.lang.String)> -> _SOURCE_
<android.telephony.mbms.UriPathPair: android.net.Uri getContentUri()> -> _SOURCE_
<java.util.Locale: java.util.Set getUnicodeLocaleAttributes()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long getMobileRadioActiveTime(long,int)> -> _SOURCE_
<android.telephony.TelephonyManager: void requestCellInfoUpdate(java.util.concurrent.Executor,android.telephony.TelephonyManager$CellInfoCallback)> -> _SOURCE_
<java.net.InetAddress: boolean isAnyLocalAddress()> -> _SOURCE_
<android.view.VerifiedMotionEvent: int getMetaState()> -> _SOURCE_
<java.util.concurrent.atomic.AtomicInteger: java.lang.String toString()> -> _SOURCE_
<android.app.NotificationManager$Policy: boolean showPeeking()> -> _SOURCE_
<android.os.LocaleList: int size()> -> _SOURCE_
<android.os.PowerManager: int getPowerSaveModeTrigger()> -> _SOURCE_
<android.media.MicrophoneInfo: java.lang.String getAddress()> -> _SOURCE_
<javax.crypto.spec.PBEParameterSpec: byte[] getSalt()> -> _SOURCE_
<android.app.AppOpsManager: java.lang.String keyToString(long)> -> _SOURCE_
<android.provider.Contacts$Phones: java.lang.CharSequence getDisplayLabel(android.content.Context,int,java.lang.CharSequence,java.lang.CharSequence[])> -> _SOURCE_
<android.telephony.data.ApnSetting: int getMmsProxyPort()> -> _SOURCE_
<java.net.URLConnection: java.lang.String toString()> -> _SOURCE_
<android.net.NetworkCapabilities: java.lang.String transportNameOf(int)> -> _SOURCE_
<android.hardware.camera2.impl.CameraOfflineSessionImpl: android.view.Surface getInputSurface()> -> _SOURCE_
<android.media.MediaRouter$SimpleCallback: void onRouteSelected(android.media.MediaRouter,int,android.media.MediaRouter$RouteInfo)> -> _SOURCE_
<android.telephony.CarrierRestrictionRules: int getMultiSimPolicy()> -> _SOURCE_
<android.util.jar.StrictJarManifest: java.util.jar.Attributes getAttributes(java.lang.String)> -> _SOURCE_
<android.net.UrlQuerySanitizer: android.net.UrlQuerySanitizer$ValueSanitizer getAllButWhitespaceLegal()> -> _SOURCE_
<android.hardware.radio.RadioManager$AmBandDescriptor: boolean isStereoSupported()> -> _SOURCE_
<java.util.MissingResourceException: java.lang.String getKey()> -> _SOURCE_
<android.preference.DialogPreference: android.app.Dialog getDialog()> -> _SOURCE_
<java.security.SecureRandom: java.lang.String getAlgorithm()> -> _SOURCE_
<android.widget.AdapterView: android.widget.AdapterView$OnItemClickListener getOnItemClickListener()> -> _SOURCE_
<android.view.MotionEvent: long getEventTimeNano()> -> _SOURCE_
<android.hardware.usb.UsbPort: java.lang.String powerRoleToString(int)> -> _SOURCE_
<android.location.GnssClock: boolean hasReferenceCodeTypeForIsb()> -> _SOURCE_
<android.service.wallpaper.WallpaperService$Engine: void onSurfaceChanged(android.view.SurfaceHolder,int,int,int)> -> _SOURCE_
<java.lang.invoke.MethodHandles$Lookup: java.lang.invoke.MethodHandle findStaticSetter(java.lang.Class,java.lang.String,java.lang.Class)> -> _SOURCE_
<android.media.AudioAttributes: java.lang.String usageToString()> -> _SOURCE_
<android.provider.DocumentsContract: android.net.Uri buildDocumentUriUsingTree(android.net.Uri,java.lang.String)> -> _SOURCE_
<android.hardware.lights.LightState: int getColor()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getSimOperatorNumericForPhone(int)> -> _SOURCE_
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()> -> _SOURCE_
<java.util.jar.Attributes: int size()> -> _SOURCE_
<android.view.contentcapture.ContentCaptureHelper: java.lang.String getLoggingLevelAsString(int)> -> _SOURCE_
<android.widget.TextView: android.os.LocaleList getTextLocales()> -> _SOURCE_
<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy$Builder penaltyDialog()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.lang.CharSequence getApplicationLabel(android.content.pm.ApplicationInfo)> -> _SOURCE_
<android.renderscript.FileA3D: int getIndexEntryCount()> -> _SOURCE_
<android.content.ContextWrapper: java.io.FileInputStream openFileInput(java.lang.String)> -> _SOURCE_
<android.security.net.config.NetworkSecurityConfig: android.security.net.config.TrustAnchor findTrustAnchorBySubjectAndPublicKey(java.security.cert.X509Certificate)> -> _SOURCE_
<java.net.InetAddress: java.net.InetAddress getByAddress(byte[])> -> _SOURCE_
<android.os.storage.StorageManager: boolean hasIsolatedStorage()> -> _SOURCE_
<android.hardware.hdmi.HdmiDeviceInfo: java.lang.String getDisplayName()> -> _SOURCE_
<android.graphics.Paint: android.graphics.PathEffect getPathEffect()> -> _SOURCE_
<android.hardware.SensorEventCallback: void onFlushCompleted(android.hardware.Sensor)> -> _SOURCE_
<android.content.pm.PackageManager: java.lang.String getContentCaptureServicePackageName()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: android.os.connectivity.WifiBatteryStats getWifiBatteryStats()> -> _SOURCE_
<android.view.autofill.AutofillId: android.view.autofill.AutofillId withoutSession(android.view.autofill.AutofillId)> -> _SOURCE_
<android.nfc.Tag: int getServiceHandle()> -> _SOURCE_
<android.content.pm.SuspendDialogInfo: void saveToXml(org.xmlpull.v1.XmlSerializer)> -> _SOURCE_
<android.view.textclassifier.ConversationActions$Message$Builder: android.view.textclassifier.ConversationActions$Message build()> -> _SOURCE_
<android.media.MediaCodecList: int getCodecCount()> -> _SOURCE_
<android.view.textservice.TextInfo: java.lang.CharSequence getCharSequence()> -> _SOURCE_
<java.util.Vector: int capacity()> -> _SOURCE_
<android.os.UserManager: boolean hasUserRestriction(java.lang.String,android.os.UserHandle)> -> _SOURCE_
<android.location.Address: void setAddressLine(int,java.lang.String)> -> _SOURCE_
<android.os.UserManager: int[] getProfileIdsWithDisabled(int)> -> _SOURCE_
<android.widget.ExpandableListConnector$PositionMetadata: boolean isExpanded()> -> _SOURCE_
<android.app.PictureInPictureParams: android.graphics.Rect getSourceRectHint()> -> _SOURCE_
<android.view.WindowInsets$Type: int all()> -> _SOURCE_
<android.view.VerifiedMotionEvent: long getDownTimeNanos()> -> _SOURCE_
<java.lang.ExceptionInInitializerError: java.lang.Throwable getException()> -> _SOURCE_
<java.lang.EnumConstantNotPresentException: java.lang.String constantName()> -> _SOURCE_
<android.security.net.config.NetworkSecurityTrustManager: void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String,javax.net.ssl.SSLEngine)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long getFlashlightOnTime(long,int)> -> _SOURCE_
<android.provider.Settings: java.lang.String getPackageNameForUid(android.content.Context,int)> -> _SOURCE_
<java.time.Year: int getValue()> -> _SOURCE_
<android.app.Activity: boolean isChild()> -> _SOURCE_
<com.android.internal.widget.RecyclerView: boolean hasPendingAdapterUpdates()> -> _SOURCE_
<java.net.Authenticator: java.net.PasswordAuthentication requestPasswordAuthentication(java.lang.String,java.net.InetAddress,int,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<java.lang.ThreadGroup: boolean isDaemon()> -> _SOURCE_
<android.media.SubtitleController: android.media.SubtitleTrack getDefaultTrack()> -> _SOURCE_
<android.hardware.display.DisplayManager: android.graphics.Point getStableDisplaySize()> -> _SOURCE_
<android.accessibilityservice.AccessibilityService$Callbacks: void onServiceConnected()> -> _SOURCE_
<android.database.sqlite.SQLiteConnectionPool: void dump(android.util.Printer,boolean,android.util.ArraySet)> -> _SOURCE_
<android.content.pm.InstallationFile: android.content.pm.InstallationFileParcel getData()> -> _SOURCE_
<java.time.Month: java.time.Month 'from'(java.time.temporal.TemporalAccessor)> -> _SOURCE_
<android.content.ContentValues: java.util.Set valueSet()> -> _SOURCE_
<android.content.IntentSender: android.content.IIntentSender getTarget()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.util.Set getCrossProfilePackages(android.content.ComponentName)> -> _SOURCE_
<java.util.ResourceBundle: java.util.Set keySet()> -> _SOURCE_
<android.os.Handler: java.lang.String getTraceName(android.os.Message)> -> _SOURCE_
<android.telephony.CellInfoNr: android.telephony.CellSignalStrength getCellSignalStrength()> -> _SOURCE_
<java.text.BreakIterator: java.util.Locale[] getAvailableLocales()> -> _SOURCE_
<android.accounts.AccountManager: android.accounts.AccountManagerFuture removeAccountAsUser(android.accounts.Account,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler,android.os.UserHandle)> -> _SOURCE_
<android.view.Window: android.view.Window getContainer()> -> _SOURCE_
<android.net.TrafficStats: long getUidTxBytes(int)> -> _SOURCE_
<android.service.notification.NotificationStats: int getDismissalSurface()> -> _SOURCE_
<android.app.slice.SliceItem: java.util.List getHints()> -> _SOURCE_
<java.util.concurrent.locks.ReentrantReadWriteLock: int getWaitQueueLength(java.util.concurrent.locks.Condition)> -> _SOURCE_
<android.os.LocaleList: android.os.LocaleList getEmptyLocaleList()> -> _SOURCE_
<android.content.AbstractThreadedSyncAdapter: android.os.IBinder getSyncAdapterBinder()> -> _SOURCE_
<android.widget.ActionMenuView: boolean isOverflowReserved()> -> _SOURCE_
<android.widget.TextView: java.lang.CharSequence getIterableTextForAccessibility()> -> _SOURCE_
<android.app.Notification$MediaStyle: android.widget.RemoteViews makeBigContentView()> -> _SOURCE_
<android.telephony.TelephonyManager: int getSimCardState(int)> -> _SOURCE_
<android.telephony.TelephonyManager: int[] supplyPinReportResult(java.lang.String)> -> _SOURCE_
<android.telephony.SubscriptionManager: void addSubscriptionInfoRecord(java.lang.String,java.lang.String,int,int)> -> _SOURCE_
<android.os.storage.StorageManager: java.util.List getRecentStorageVolumes()> -> _SOURCE_
<android.media.tv.TvContract: android.net.Uri buildProgramUri(long)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: int getEstimatedBatteryCapacity()> -> _SOURCE_
<android.app.job.JobInfo: long getMinPeriodMillis()> -> _SOURCE_
<android.telecom.TelecomManager: void registerPhoneAccount(android.telecom.PhoneAccount)> -> _SOURCE_
<android.provider.FontRequest: java.lang.String getProviderPackage()> -> _SOURCE_
<android.graphics.drawable.VectorDrawable: float getPixelSize()> -> _SOURCE_
<android.inputmethodservice.InputMethodService: void onDestroy()> -> _SOURCE_
<android.media.RingtoneManager: android.net.Uri getCacheForType(int)> -> _SOURCE_
<android.provider.Browser: android.database.Cursor getAllVisitedUrls(android.content.ContentResolver)> -> _SOURCE_
<android.telephony.RadioAccessSpecifier: int[] getBands()> -> _SOURCE_
<java.lang.Class: java.lang.Class[] getClasses()> -> _SOURCE_
<android.media.RingtoneManager: android.net.Uri addCustomExternalRingtone(android.net.Uri,int)> -> _SOURCE_
<android.content.integrity.AppInstallMetadata: java.util.Map getAllowedInstallersAndCertificates()> -> _SOURCE_
<android.location.LocationRequest: long getExpireAt()> -> _SOURCE_
<android.database.sqlite.SQLiteDebug: void dump(android.util.Printer,java.lang.String[])> -> _SOURCE_
<android.view.textclassifier.TextClassificationContext: java.lang.String getPackageName()> -> _SOURCE_
<android.app.PendingIntent: boolean isBroadcast()> -> _SOURCE_
<android.app.AppOpsManager: java.lang.String opToName(int)> -> _SOURCE_
<android.media.tv.tuner.DemuxCapabilities: int getPlaybackCount()> -> _SOURCE_
<java.lang.Short: java.lang.String toString()> -> _SOURCE_
<android.net.Uri: android.net.Uri fromFile(java.io.File)> -> _SOURCE_
<android.content.res.Resources: java.lang.CharSequence getText(int,java.lang.CharSequence)> -> _SOURCE_
<android.bluetooth.BluetoothSocket: android.bluetooth.BluetoothDevice getRemoteDevice()> -> _SOURCE_
<com.android.internal.util.BitwiseInputStream: int available()> -> _SOURCE_
<android.location.GnssMeasurement: double getAccumulatedDeltaRangeMeters()> -> _SOURCE_
<android.text.AutoGrowArray$ByteArray: int size()> -> _SOURCE_
<android.bluetooth.BluetoothSap: java.util.List getConnectedDevices()> -> _SOURCE_
<android.text.DynamicLayout: int[] getBlockEndLines()> -> _SOURCE_
<android.net.wifi.WifiMigration: java.io.InputStream convertAndRetrieveSharedConfigStoreFile(int)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getSimOperatorName()> -> _SOURCE_
<android.os.storage.StorageManager: boolean checkPermissionAndCheckOp(android.content.Context,boolean,int,int,java.lang.String,java.lang.String,int)> -> _SOURCE_
<android.content.res.Resources: java.lang.String getResourceTypeName(int)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: int getParcelVersion()> -> _SOURCE_
<java.util.logging.Logger: java.util.logging.Logger getAnonymousLogger()> -> _SOURCE_
<com.android.ims.internal.uce.options.OptionsCmdStatus: void setUserData(int)> -> _SOURCE_
<android.filterfw.core.FinalPort: java.lang.String toString()> -> _SOURCE_
<android.os.BatterySaverPolicyConfig: java.util.Map getDeviceSpecificSettings()> -> _SOURCE_
<android.view.textservice.TextServicesManager: android.view.textservice.SpellCheckerInfo getCurrentSpellChecker()> -> _SOURCE_
<android.os.storage.StorageVolume: java.lang.String toString()> -> _SOURCE_
<java.lang.StringBuffer: int codePointCount(int,int)> -> _SOURCE_
<android.media.MediaMetrics$Item: android.media.MediaMetrics$Item setPid(int)> -> _SOURCE_
<android.hardware.usb.UsbEndpoint: int getEndpointNumber()> -> _SOURCE_
<android.telephony.SignalStrength: int getCdmaEcio()> -> _SOURCE_
<java.net.URLConnection: boolean getDoInput()> -> _SOURCE_
<android.service.dreams.DreamService: void onContentChanged()> -> _SOURCE_
<android.net.LocalSocket: void connect(android.net.LocalSocketAddress)> -> _SOURCE_
<android.app.Fragment: boolean getUserVisibleHint()> -> _SOURCE_
<android.net.http.SslCertificate$DName: java.lang.String getCName()> -> _SOURCE_
<java.security.Provider$Service: java.security.Provider getProvider()> -> _SOURCE_
<android.content.BroadcastReceiver: android.os.Bundle getResultExtras(boolean)> -> _SOURCE_
<android.app.Activity: boolean isActivityTransitionRunning()> -> _SOURCE_
<java.net.HttpURLConnection: int getResponseCode()> -> _SOURCE_
<android.provider.DocumentsContract: android.net.Uri buildRootsUri(java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.gsm.SmsMessage: boolean isMWIClearMessage()> -> _SOURCE_
<com.android.ims.internal.uce.presence.PresRlmiInfo: boolean isFullState()> -> _SOURCE_
<com.android.internal.widget.LockPatternUtils: int getCredentialTypeForUser(int)> -> _SOURCE_
<android.net.LinkProperties: java.util.List getAllRoutes()> -> _SOURCE_
<android.view.KeyEvent: int getRepeatCount()> -> _SOURCE_
<android.media.MediaCrypto: boolean isCryptoSchemeSupported(java.util.UUID)> -> _SOURCE_
<android.media.session.MediaController: android.os.Bundle getExtras()> -> _SOURCE_
<android.inputmethodservice.MultiClientInputMethodServiceDelegate: boolean isUidAllowedOnDisplay(int,int)> -> _SOURCE_
<com.android.internal.util.StateMachine$LogRec: java.lang.String getInfo()> -> _SOURCE_
<android.app.AppOpsManager: int unsafeCheckOpRaw(java.lang.String,int,java.lang.String)> -> _SOURCE_
<android.content.ClipboardManager: android.content.ClipData getPrimaryClip()> -> _SOURCE_
<android.telephony.TelephonyManager: void setDataNetworkTypeForPhone(int,int)> -> _SOURCE_
<android.view.View: int[] getLocationOnScreen()> -> _SOURCE_
<android.os.Parcel: java.lang.CharSequence readCharSequence()> -> _SOURCE_
<android.nfc.cardemulation.CardEmulation: java.util.List getAidsForService(android.content.ComponentName,java.lang.String)> -> _SOURCE_
<android.hardware.camera2.legacy.RequestHolder: int numPreviewTargets()> -> _SOURCE_
<android.media.audiopolicy.AudioMix: java.lang.String getRegistration()> -> _SOURCE_
<android.telecom.PhoneAccount: java.lang.CharSequence getLabel()> -> _SOURCE_
<android.media.AudioPresentation: int getProgramId()> -> _SOURCE_
<android.os.storage.StorageManager: boolean isFileEncryptedNativeOrEmulated()> -> _SOURCE_
<android.content.pm.IntentFilterVerificationInfo: void writeToXml(org.xmlpull.v1.XmlSerializer)> -> _SOURCE_
<java.security.AccessControlException: java.security.Permission getPermission()> -> _SOURCE_
<java.util.concurrent.SynchronousQueue: void clear()> -> _SOURCE_
<android.view.ViewConfiguration: float getScrollFriction()> -> _SOURCE_
<com.android.internal.widget.RecyclerView$RecycledViewPool: int getRecycledViewCount(int)> -> _SOURCE_
<android.telephony.NetworkService$NetworkServiceProvider: void requestNetworkRegistrationInfo(int,android.telephony.NetworkServiceCallback)> -> _SOURCE_
<android.media.audiofx.BassBoost$Settings: java.lang.String toString()> -> _SOURCE_
<android.view.contentcapture.DataRemovalRequest: java.lang.String getPackageName()> -> _SOURCE_
<android.widget.TimePicker: boolean is24HourView()> -> _SOURCE_
<android.media.session.MediaController: java.lang.CharSequence getQueueTitle()> -> _SOURCE_
<android.net.metrics.IpReachabilityEvent: java.lang.String toString()> -> _SOURCE_
<android.app.backup.BackupAgent: android.os.IBinder onBind()> -> _SOURCE_
<android.view.inputmethod.InputMethodManager: java.util.Map getShortcutInputMethodsAndSubtypes()> -> _SOURCE_
<android.net.NetworkIdentity: java.lang.String[] scrubSubscriberId(java.lang.String[])> -> _SOURCE_
<android.telephony.PhoneNumberUtils: boolean isWellFormedSmsAddress(java.lang.String)> -> _SOURCE_
<android.hardware.biometrics.BiometricPrompt$CryptoObject: javax.crypto.Cipher getCipher()> -> _SOURCE_
<android.media.tv.tuner.frontend.AnalogFrontendSettings: int getType()> -> _SOURCE_
<android.telephony.CellInfoWcdma: android.telephony.CellIdentityWcdma getCellIdentity()> -> _SOURCE_
<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageArchiveInfo(java.lang.String,int)> -> _SOURCE_
<android.service.wallpaper.WallpaperService$Engine: android.app.WallpaperColors onComputeColors()> -> _SOURCE_
<android.media.AudioAttributes: java.lang.String usageToString(int)> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: void invalidateIsOffloadedFilteringSupportedCache()> -> _SOURCE_
<com.android.internal.telephony.GsmAlphabet$TextEncodingDetails: java.lang.String toString()> -> _SOURCE_
<android.preference.PreferenceDataStore: java.util.Set getStringSet(java.lang.String,java.util.Set)> -> _SOURCE_
<android.mtp.MtpObjectInfo$Builder: android.mtp.MtpObjectInfo build()> -> _SOURCE_
<android.app.Instrumentation: android.content.Context getContext()> -> _SOURCE_
<android.webkit.URLUtil: boolean isFileUrl(java.lang.String)> -> _SOURCE_
<android.hardware.soundtrigger.SoundTrigger$KeyphraseRecognitionEvent: java.lang.String toString()> -> _SOURCE_
<java.util.Base64: java.util.Base64$Encoder getUrlEncoder()> -> _SOURCE_
<android.telephony.ims.ImsMmTelManager: int getVoWiFiModeSetting()> -> _SOURCE_
<android.media.TimedMetaData: byte[] getMetaData()> -> _SOURCE_
<android.app.slice.SliceItem: android.os.Bundle getBundle()> -> _SOURCE_
<android.hardware.hdmi.HdmiControlServiceWrapper: void addHdmiControlStatusChangeListener(android.hardware.hdmi.IHdmiControlStatusChangeListener)> -> _SOURCE_
<android.speech.tts.TtsEngines: java.lang.String getHighestRankedEngineName()> -> _SOURCE_
<android.media.AudioRecordingConfiguration: boolean isClientSilenced()> -> _SOURCE_
<android.content.pm.PackageManager: java.util.List queryIntentContentProvidersAsUser(android.content.Intent,int,android.os.UserHandle)> -> _SOURCE_
<android.renderscript.Program: int getTextureCount()> -> _SOURCE_
<android.widget.SearchView: boolean isSubmitButtonEnabled()> -> _SOURCE_
<android.bluetooth.le.ScanFilter: android.os.ParcelUuid getServiceUuid()> -> _SOURCE_
<android.service.notification.NotificationListenerService: void onNotificationPosted(android.service.notification.StatusBarNotification)> -> _SOURCE_
<android.view.accessibility.AccessibilityEvent: int getEventType()> -> _SOURCE_
<android.location.LocationManager: android.location.GnssCapabilities getGnssCapabilities()> -> _SOURCE_
<android.net.util.MacAddressUtils: android.net.MacAddress createRandomUnicastAddress()> -> _SOURCE_
<android.telecom.ConnectionRequest: java.lang.String getTelecomCallId()> -> _SOURCE_
<android.app.admin.SystemUpdatePolicy: java.util.List getFreezePeriods()> -> _SOURCE_
<android.mtp.MtpStorageInfo: long getFreeSpace()> -> _SOURCE_
<android.telephony.TelephonyRegistryManager: void notifyOpportunisticSubscriptionInfoChanged()> -> _SOURCE_
<android.widget.ActionMenuView: android.view.Menu getMenu()> -> _SOURCE_
<com.android.internal.os.KernelSingleUidTimeReader: long[] getDeltaLocked(long[],long[])> -> _SOURCE_
<android.content.rollback.RollbackManager: java.util.List getAvailableRollbacks()> -> _SOURCE_
<android.bluetooth.BluetoothMapClient: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
<android.telecom.Conference: int getVideoState()> -> _SOURCE_
<com.android.internal.widget.LockPatternUtils: boolean isFileEncryptionEnabled()> -> _SOURCE_
<android.widget.ScrollView: void onNestedScroll(android.view.View,int,int,int,int)> -> _SOURCE_
<android.os.PowerManager: int getCurrentThermalStatus()> -> _SOURCE_
<android.app.ActivityManager: java.util.List getProcessesInErrorState()> -> _SOURCE_
<java.time.temporal.TemporalQueries: java.time.temporal.TemporalQuery localDate()> -> _SOURCE_
<java.security.cert.PolicyQualifierInfo: java.lang.String toString()> -> _SOURCE_
<android.telecom.TelecomManager: android.content.ComponentName getDefaultPhoneApp()> -> _SOURCE_
<android.bluetooth.BluetoothHidDevice$Callback: void onSetReport(android.bluetooth.BluetoothDevice,byte,byte,byte[])> -> _SOURCE_
<android.content.RestrictionEntry: java.lang.String[] getChoiceEntries()> -> _SOURCE_
<android.view.inputmethod.InputMethodInfo: int getIsDefaultResourceId()> -> _SOURCE_
<android.view.Window: android.view.View getStatusBarBackgroundView()> -> _SOURCE_
<android.renderscript.Font: android.renderscript.Font createFromFile(android.renderscript.RenderScript,android.content.res.Resources,java.io.File,float)> -> _SOURCE_
<android.media.audiopolicy.AudioMixingRule: java.util.ArrayList getCriteria()> -> _SOURCE_
<android.view.accessibility.AccessibilityRecord: boolean isPassword()> -> _SOURCE_
<android.view.textclassifier.TextClassifier$EntityConfig: java.util.Collection getHints()> -> _SOURCE_
<android.content.res.ColorStateList: int getChangingConfigurations()> -> _SOURCE_
<android.content.integrity.AppInstallMetadata$Builder: android.content.integrity.AppInstallMetadata build()> -> _SOURCE_
<android.security.KeyPairGeneratorSpec: javax.security.auth.x500.X500Principal getSubjectDN()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isUnattendedManagedKiosk()> -> _SOURCE_
<android.app.backup.BackupTransport: int getNextFullRestoreDataChunk(android.os.ParcelFileDescriptor)> -> _SOURCE_
<android.app.Dialog: android.app.ActionBar getActionBar()> -> _SOURCE_
<android.telephony.SubscriptionManager: android.telephony.SubscriptionInfo getDefaultDataSubscriptionInfo()> -> _SOURCE_
<android.os.StrictMode: boolean vmCleartextNetworkEnabled()> -> _SOURCE_
<android.hardware.location.MemoryRegion: boolean isReadable()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getImei()> -> _SOURCE_
<android.preference.PreferenceManager: java.lang.String getSharedPreferencesName()> -> _SOURCE_
<android.media.MediaRoute2Info$Builder: android.media.MediaRoute2Info$Builder setVolume(int)> -> _SOURCE_
<android.os.RecoverySystem: void rebootWipeCache(android.content.Context,java.lang.String)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: int getPasswordMinimumNonLetter(android.content.ComponentName,int)> -> _SOURCE_
<java.util.zip.Inflater: long getBytesRead()> -> _SOURCE_
<android.location.GnssReflectingPlane: double getLongitudeDegrees()> -> _SOURCE_
<android.hardware.usb.UsbConfiguration: void setInterfaces(android.os.Parcelable[])> -> _SOURCE_
<android.view.textclassifier.ExtrasUtils: android.os.Bundle getForeignLanguageExtra(android.view.textclassifier.TextClassification)> -> _SOURCE_
<android.hardware.hdmi.HdmiControlServiceWrapper: int[] getSupportedTypes()> -> _SOURCE_
<java.util.UUID: long getLeastSignificantBits()> -> _SOURCE_
<android.app.ActivityManager$TaskSnapshot: boolean isLowResolution()> -> _SOURCE_
<android.hardware.usb.UsbInterface: int getEndpointCount()> -> _SOURCE_
<android.widget.ToastPresenter: android.os.IBinder getToken()> -> _SOURCE_
<android.media.browse.MediaBrowser: boolean isConnected()> -> _SOURCE_
<android.telephony.CellIdentity: java.lang.String getMncString()> -> _SOURCE_
<android.app.admin.DeviceAdminInfo: android.content.pm.ActivityInfo getActivityInfo()> -> _SOURCE_
<android.telecom.CallerInfoAsyncQuery: android.telecom.CallerInfoAsyncQuery startQuery(int,android.content.Context,java.lang.String,android.telecom.CallerInfoAsyncQuery$OnQueryCompleteListener,java.lang.Object,int)> -> _SOURCE_
<android.animation.ValueAnimator: int getCurrentAnimationsCount()> -> _SOURCE_
<android.app.admin.SystemUpdatePolicy$ValidationFailedException: android.app.admin.SystemUpdatePolicy$ValidationFailedException duplicateOrOverlapPeriods()> -> _SOURCE_
<android.net.ConnectivityManager: android.net.Network getNetworkForType(int)> -> _SOURCE_
<java.security.spec.ECFieldF2m: int getFieldSize()> -> _SOURCE_
<android.widget.CalendarView: boolean getShowWeekNumber()> -> _SOURCE_
<android.security.keystore.AndroidKeyStoreProvider: android.security.keystore.AndroidKeyStorePublicKey getAndroidKeyStorePublicKey(java.lang.String,int,java.lang.String,byte[])> -> _SOURCE_
<android.content.ContextWrapper: java.lang.String[] fileList()> -> _SOURCE_
<android.content.pm.PackageManager: android.content.pm.dex.ArtManager getArtManager()> -> _SOURCE_
<android.media.MediaCodecInfo$VideoCapabilities: android.util.Range getSupportedWidths()> -> _SOURCE_
<android.hardware.camera2.params.OutputConfiguration: java.util.List getSurfaces()> -> _SOURCE_
<android.os.UserManager: boolean isSystemUser()> -> _SOURCE_
<android.media.MediaRoute2ProviderService: android.media.RoutingSessionInfo getSessionInfo(java.lang.String)> -> _SOURCE_
<android.net.NetworkCapabilities: android.net.NetworkSpecifier getNetworkSpecifier()> -> _SOURCE_
<android.bluetooth.BluetoothGattIncludedService: int getType()> -> _SOURCE_
<android.media.midi.MidiDeviceStatus: java.lang.String toString()> -> _SOURCE_
<android.bluetooth.BluetoothHidDevice: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
<android.service.voice.VoiceInteractionSession: void onPrepareShow(android.os.Bundle,int)> -> _SOURCE_
<android.net.TrafficStats: int getThreadStatsTag()> -> _SOURCE_
<android.database.CursorWindow: short getShort(int,int)> -> _SOURCE_
<android.graphics.fonts.Font: android.os.LocaleList getLocaleList()> -> _SOURCE_
<android.app.usage.UsageStats: long getLastTimeUsed()> -> _SOURCE_
<android.service.notification.NotificationListenerService$Ranking: boolean visuallyInterruptive()> -> _SOURCE_
<android.telecom.DisconnectCause: java.lang.CharSequence getDescription()> -> _SOURCE_
<android.os.Handler: android.os.Handler getMain()> -> _SOURCE_
<android.os.health.HealthStats: java.util.Map getMeasurements(int)> -> _SOURCE_
<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtype()> -> _SOURCE_
<android.util.apk.SourceStampVerificationResult: android.util.apk.SourceStampVerificationResult verified(java.security.cert.Certificate)> -> _SOURCE_
<android.widget.TextView: android.text.method.WordIterator getWordIterator()> -> _SOURCE_
<android.media.session.PlaybackState$CustomAction: java.lang.String toString()> -> _SOURCE_
<android.service.autofill.FieldClassification: java.util.List getMatches()> -> _SOURCE_
<javax.net.ssl.HandshakeCompletedEvent: javax.net.ssl.SSLSession getSession()> -> _SOURCE_
<android.content.LocusId: void dump(java.io.PrintWriter)> -> _SOURCE_
<android.media.soundtrigger.SoundTriggerManager$Model: java.util.UUID getModelUuid()> -> _SOURCE_
<android.media.MediaExtractor: android.media.MediaExtractor$CasInfo getCasInfo(int)> -> _SOURCE_
<com.android.internal.telephony.GsmAlphabet: int[] getEnabledLockingShiftTables()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean installCaCert(android.content.ComponentName,byte[])> -> _SOURCE_
<android.media.soundtrigger.SoundTriggerDetectionService: void onDisconnected(java.util.UUID,android.os.Bundle)> -> _SOURCE_
<android.os.storage.StorageManager: boolean isCheckpointSupported()> -> _SOURCE_
<android.widget.CursorAdapter: int getCount()> -> _SOURCE_
<com.android.internal.policy.DecorContext: android.content.AutofillOptions getAutofillOptions()> -> _SOURCE_
<android.widget.TextView: android.text.method.TransformationMethod getTransformationMethod()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isAccessibilityServicePermittedByAdmin(android.content.ComponentName,java.lang.String,int)> -> _SOURCE_
<android.provider.DocumentsContract: boolean matchSearchQueryArguments(android.os.Bundle,java.lang.String,java.lang.String,long,long)> -> _SOURCE_
<android.app.AppOpsManager: int noteOp(int,int,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.view.View: boolean fitsSystemWindows()> -> _SOURCE_
<android.bluetooth.BluetoothSap: int getConnectionState(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<android.telephony.UiccCardInfo: java.lang.String getIccId()> -> _SOURCE_
<android.telecom.TelecomManager: android.telecom.TelecomAnalytics dumpAnalytics()> -> _SOURCE_
<android.os.image.DynamicSystemManager: android.os.image.DynamicSystemManager$Session createPartition(java.lang.String,long,boolean)> -> _SOURCE_
<android.database.sqlite.SQLiteTokenizer: boolean isFunction(java.lang.String)> -> _SOURCE_
<android.nfc.cardemulation.NfcFCardEmulation: boolean registerSystemCodeForService(android.content.ComponentName,java.lang.String)> -> _SOURCE_
<android.location.Location: float getSpeed()> -> _SOURCE_
<android.telephony.mbms.DownloadRequest: byte[] toByteArray()> -> _SOURCE_
<android.util.proto.ProtoUtils: void toAggStatsProto(android.util.proto.ProtoOutputStream,long,long,long,long)> -> _SOURCE_
<android.webkit.CacheManager$CacheResult: java.io.OutputStream getOutputStream()> -> _SOURCE_
<java.text.StringCharacterIterator: int getBeginIndex()> -> _SOURCE_
<android.media.Metadata: byte[] getByteArray(int)> -> _SOURCE_
<java.net.URISyntaxException: java.lang.String getReason()> -> _SOURCE_
<android.webkit.WebViewFragment: android.webkit.WebView getWebView()> -> _SOURCE_
<android.app.AppGlobals: android.permission.IPermissionManager getPermissionManager()> -> _SOURCE_
<org.xml.sax.InputSource: java.io.InputStream getByteStream()> -> _SOURCE_
<com.android.internal.os.LooperStats: long getStartTimeMillis()> -> _SOURCE_
<android.app.usage.StorageStatsManager: android.app.usage.StorageStats queryStatsForPackage(java.lang.String,java.lang.String,android.os.UserHandle)> -> _SOURCE_
<android.view.Display: long getAppVsyncOffsetNanos()> -> _SOURCE_
<android.hardware.camera2.utils.TypeReference: java.lang.String toString()> -> _SOURCE_
<android.telecom.Voicemail: android.telecom.PhoneAccountHandle getPhoneAccount()> -> _SOURCE_
<android.hardware.camera2.CaptureRequest: boolean isPartOfCRequestList()> -> _SOURCE_
<android.app.slice.Slice: java.lang.String toString()> -> _SOURCE_
<android.app.ApplicationExitInfo: int getSubReason()> -> _SOURCE_
<android.telecom.InCallService: android.telecom.AudioState getAudioState()> -> _SOURCE_
<android.app.NotificationManager$Policy: boolean allowMessages()> -> _SOURCE_
<android.view.inputmethod.InputConnectionWrapper: boolean beginBatchEdit()> -> _SOURCE_
<android.preference.TwoStatePreference: java.lang.CharSequence getSummaryOn()> -> _SOURCE_
<android.os.Debug$MemoryInfo: int getOtherPrivateDirty(int)> -> _SOURCE_
<android.app.ActivityOptions: int getCallerDisplayId()> -> _SOURCE_
<android.service.quickaccesswallet.QuickAccessWalletClient: android.service.quickaccesswallet.QuickAccessWalletClient create(android.content.Context)> -> _SOURCE_
<android.webkit.MimeTypeMap: android.webkit.MimeTypeMap getSingleton()> -> _SOURCE_
<android.net.ConnectivityManager: java.lang.String[] getTetherableUsbRegexs()> -> _SOURCE_
<android.provider.SearchIndexableResource: java.lang.String toString()> -> _SOURCE_
<android.service.notification.NotificationListenerService: void onListenerConnected()> -> _SOURCE_
<java.lang.'annotation'.AnnotationTypeMismatchException: java.lang.String foundType()> -> _SOURCE_
<android.telephony.TelephonyManager: void enableServiceHandleCaching()> -> _SOURCE_
<android.os.UserManager: java.lang.CharSequence getBadgedLabelForUser(java.lang.CharSequence,android.os.UserHandle)> -> _SOURCE_
<android.os.Debug$MemoryInfo: int getSummarySystem()> -> _SOURCE_
<android.os.UserManager: int getUserSerialNumber(int)> -> _SOURCE_
<java.lang.Math: double toDegrees(double)> -> _SOURCE_
<android.app.Activity: boolean isTaskRoot()> -> _SOURCE_
<com.android.internal.location.gnssmetrics.GnssMetrics: void logPositionAccuracyMeters(float)> -> _SOURCE_
<android.window.DisplayAreaOrganizer: void unregisterOrganizer()> -> _SOURCE_
<android.util.SparseArrayMap: void delete(int)> -> _SOURCE_
<android.media.RemoteControlClient: android.media.session.MediaSession getMediaSession()> -> _SOURCE_
<android.widget.AdapterViewAnimator: android.view.View getSelectedView()> -> _SOURCE_
<android.bluetooth.BluetoothGatt: void readPhy()> -> _SOURCE_
<java.util.concurrent.ThreadPoolExecutor: int getPoolSize()> -> _SOURCE_
<android.os.BatterySaverPolicyConfig: boolean getForceAllAppsStandby()> -> _SOURCE_
<com.android.internal.telephony.gsm.SmsMessage: boolean isStatusReportMessage()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: long getTimeAtCpuSpeed(int,int,int)> -> _SOURCE_
<android.media.SyncParams: float getFrameRate()> -> _SOURCE_
<com.android.internal.widget.LockscreenCredential: boolean isNone()> -> _SOURCE_
<android.widget.AbsSeekBar: int getKeyProgressIncrement()> -> _SOURCE_
<android.telephony.ims.ImsManager: android.telephony.ims.ImsRcsManager getImsRcsManager(int)> -> _SOURCE_
<android.content.pm.PackageManager: android.content.pm.InstallSourceInfo getInstallSourceInfo(java.lang.String)> -> _SOURCE_
<android.app.backup.RestoreSession: int restoreSome(long,android.app.backup.RestoreObserver,java.lang.String[])> -> _SOURCE_
<java.text.DecimalFormatSymbols: java.util.Currency getCurrency()> -> _SOURCE_
<android.os.storage.StorageEventListener: void onStorageStateChanged(java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.telecom.PhoneAccount: java.lang.String getGroupId()> -> _SOURCE_
<android.telephony.CellSignalStrengthNr: int getCsiSinr()> -> _SOURCE_
<android.net.wifi.nl80211.NativeScanResult: boolean isAssociated()> -> _SOURCE_
<android.telephony.SmsManager: java.lang.String getImsSmsFormat()> -> _SOURCE_
<android.content.pm.PackageManager: boolean hasSigningCertificate(int,byte[],int)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getNetworkCountryIsoForPhone(int)> -> _SOURCE_
<android.telephony.ims.ImsReasonInfo: java.lang.String toString()> -> _SOURCE_
<android.app.Dialog: android.content.Context getContext()> -> _SOURCE_
<android.os.storage.StorageVolume: java.lang.String getMediaStoreVolumeName()> -> _SOURCE_
<android.location.GpsMeasurement: short getState()> -> _SOURCE_
<android.app.ActivityView: android.hardware.display.VirtualDisplay getVirtualDisplay()> -> _SOURCE_
<android.view.WindowManager$LayoutParams: void dumpDimensions(java.lang.StringBuilder)> -> _SOURCE_
<android.provider.DocumentsProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SOURCE_
<android.hardware.location.NanoApp: int getNeededExecMemBytes()> -> _SOURCE_
<android.media.MediaRouter2Manager$Callback: void onSessionReleased(android.media.RoutingSessionInfo)> -> _SOURCE_
<android.media.tv.TvContract: android.net.Uri buildPreviewProgramsUriForChannel(android.net.Uri)> -> _SOURCE_
<android.app.admin.SystemUpdatePolicy$ValidationFailedException: android.app.admin.SystemUpdatePolicy$ValidationFailedException combinedPeriodTooClose(java.lang.String)> -> _SOURCE_
<android.app.NotificationManager: java.util.List getAllowedAssistantAdjustments()> -> _SOURCE_
<android.media.MediaTranscodeManager: android.media.MediaTranscodeManager getInstance(android.content.Context)> -> _SOURCE_
<android.view.SurfaceControl: void openTransaction()> -> _SOURCE_
<android.telecom.PhoneAccount: java.lang.String capabilitiesToString()> -> _SOURCE_
<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewFormats()> -> _SOURCE_
<java.time.chrono.MinguoDate: java.time.chrono.MinguoDate now(java.time.Clock)> -> _SOURCE_
<android.hardware.camera2.CameraCaptureSession$StateCallback: void onActive(android.hardware.camera2.CameraCaptureSession)> -> _SOURCE_
<android.app.backup.BackupDataOutput: int writeEntityHeader(java.lang.String,int)> -> _SOURCE_
<android.app.SearchableInfo: java.lang.String getSuggestSelection()> -> _SOURCE_
<android.widget.OverScroller: int getCurrX()> -> _SOURCE_
<android.net.LinkProperties: java.util.List getStackedLinks()> -> _SOURCE_
<android.print.PrintManager: java.util.List getPrintJobs()> -> _SOURCE_
<android.security.keystore.AndroidKeyStoreSpi: java.util.Enumeration engineAliases()> -> _SOURCE_
<android.app.ApplicationPackageManager: android.content.pm.ModuleInfo getModuleInfo(java.lang.String,int)> -> _SOURCE_
<android.app.usage.UsageEvents$Event: int getEventType()> -> _SOURCE_
<android.view.textclassifier.ConversationAction$Builder: android.view.textclassifier.ConversationAction build()> -> _SOURCE_
<java.util.jar.JarEntry: java.security.CodeSigner[] getCodeSigners()> -> _SOURCE_
<android.telephony.ims.stub.ImsCallSessionImplBase: int getState()> -> _SOURCE_
<android.os.storage.StorageManager: android.os.storage.StorageVolume getStorageVolume(java.io.File)> -> _SOURCE_
<java.util.regex.PatternSyntaxException: java.lang.String getDescription()> -> _SOURCE_
<android.telephony.UiccSlotInfo: boolean isRemovable()> -> _SOURCE_
<java.util.PriorityQueue: java.util.Iterator iterator()> -> _SOURCE_
<android.security.KeyPairGeneratorSpec: android.content.Context getContext()> -> _SOURCE_
<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getApplicationIcon(android.content.pm.ApplicationInfo)> -> _SOURCE_
<android.content.IntentFilter: java.util.Iterator typesIterator()> -> _SOURCE_
<android.net.StaticIpConfiguration: java.util.List getDnsServers()> -> _SOURCE_
<android.app.ApplicationPackageManager: boolean shouldShowRequestPermissionRationale(java.lang.String)> -> _SOURCE_
<android.net.NetworkInfo: java.lang.String toString()> -> _SOURCE_
<java.lang.reflect.Array: short getShort(java.lang.Object,int)> -> _SOURCE_
<android.media.audiopolicy.AudioPolicy: boolean isVolumeController()> -> _SOURCE_
<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()> -> _SOURCE_
<android.speech.tts.TextToSpeech: java.util.Locale getDefaultLanguage()> -> _SOURCE_
<android.hardware.location.ContextHubManager: int loadNanoApp(int,android.hardware.location.NanoApp)> -> _SOURCE_
<android.os.health.HealthStats: java.util.Map getStats(int)> -> _SOURCE_
<java.io.UncheckedIOException: java.io.IOException getCause()> -> _SOURCE_
<javax.crypto.spec.GCMParameterSpec: int getTLen()> -> _SOURCE_
<android.text.style.StrikethroughSpan: int getSpanTypeIdInternal()> -> _SOURCE_
<android.telecom.AuthenticatorService$Authenticator: android.os.Bundle updateCredentials(android.accounts.AccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)> -> _SOURCE_
<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()> -> _SOURCE_
<android.telecom.Logging.Session: java.lang.String getFullMethodPath(boolean)> -> _SOURCE_
<android.provider.Telephony$Mms$Part: android.net.Uri getPartUriForMessage(java.lang.String)> -> _SOURCE_
<java.net.URL: java.lang.String getProtocol()> -> _SOURCE_
<android.app.Fragment: android.app.Fragment getTargetFragment()> -> _SOURCE_
<android.app.ApplicationPackageManager: android.content.pm.PermissionInfo getPermissionInfo(java.lang.String,int)> -> _SOURCE_
<com.android.ims.internal.uce.uceservice.ImsUceManager: com.android.ims.internal.uce.uceservice.IUceService getUceServiceInstance()> -> _SOURCE_
<android.app.usage.ExternalStorageStats: long getTotalBytes()> -> _SOURCE_
<android.service.notification.StatusBarNotification: int getUserId()> -> _SOURCE_
<android.os.Build: java.lang.String getSerial()> -> _SOURCE_
<android.service.notification.StatusBarNotification: java.lang.String getOpPkg()> -> _SOURCE_
<android.app.TaskInfo: java.lang.String toString()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean getCrossProfileCallerIdDisabled(android.os.UserHandle)> -> _SOURCE_
<java.security.AlgorithmParameters: java.lang.String toString()> -> _SOURCE_
<android.app.PendingIntent: android.content.IntentSender getIntentSender()> -> _SOURCE_
<android.media.tv.tuner.filter.PesEvent: int getMpuSequenceNumber()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$DurationTimer: long getTotalDurationMsLocked(long)> -> _SOURCE_
<android.app.UiAutomation: android.view.accessibility.AccessibilityNodeInfo getRootInActiveWindow()> -> _SOURCE_
<android.view.SurfaceControl: int getWidth()> -> _SOURCE_
<javax.crypto.Cipher: java.lang.String getAlgorithm()> -> _SOURCE_
<java.nio.file.FileSystems: java.nio.file.FileSystem getDefault()> -> _SOURCE_
<android.telecom.Call: int getState()> -> _SOURCE_
<android.view.InputDevice: android.view.KeyCharacterMap getKeyCharacterMap()> -> _SOURCE_
<android.media.MediaDrm$SessionException: int getErrorCode()> -> _SOURCE_
<android.content.res.Configuration: boolean isNightModeActive()> -> _SOURCE_
<android.os.connectivity.WifiActivityEnergyInfo: java.lang.String toString()> -> _SOURCE_
<android.location.GnssClock: void resetElapsedRealtimeNanos()> -> _SOURCE_
<android.telephony.UiccCardInfo: java.lang.String getEid()> -> _SOURCE_
<android.media.MediaDrm$KeyRequest: byte[] getData()> -> _SOURCE_
<javax.net.ssl.SSLParameters: java.util.List getServerNames()> -> _SOURCE_
<android.graphics.drawable.VectorDrawable: void clearMutated()> -> _SOURCE_
<android.media.tv.TvTrackInfo$Builder: android.media.tv.TvTrackInfo build()> -> _SOURCE_
<android.hardware.camera2.CameraManager: void registerAvailabilityCallback(java.util.concurrent.Executor,android.hardware.camera2.CameraManager$AvailabilityCallback)> -> _SOURCE_
<android.bluetooth.BluetoothA2dp: android.bluetooth.BluetoothCodecStatus getCodecStatus(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<android.telephony.SubscriptionManager: boolean isSubscriptionEnabled(int)> -> _SOURCE_
<android.app.DialogFragment: boolean getShowsDialog()> -> _SOURCE_
<android.media.MediaRouter$RouteInfo: java.lang.CharSequence getStatus()> -> _SOURCE_
<android.content.pm.IntentFilterVerificationInfo: java.lang.String getStatusStringFromValue(long)> -> _SOURCE_
<android.app.ExpandableListActivity: android.widget.ExpandableListAdapter getExpandableListAdapter()> -> _SOURCE_
<android.transition.Transition: java.util.List getTargetViewNames()> -> _SOURCE_
<android.app.ActivityView: android.graphics.Region getTapExcludeRegion()> -> _SOURCE_
<android.provider.SyncStateContract$Helpers: byte[] get(android.content.ContentProviderClient,android.net.Uri,android.accounts.Account)> -> _SOURCE_
<android.text.TextUtils: java.lang.CharSequence formatSelectedCount(int)> -> _SOURCE_
<android.content.pm.ShortcutInfo: java.lang.String getDisabledReasonForRestoreIssue(android.content.Context,int)> -> _SOURCE_
<android.os.health.HealthStatsWriter: void flattenToParcel(android.os.Parcel)> -> _SOURCE_
<android.os.connectivity.CellularBatteryStats: long getTimeInRatMicros(int)> -> _SOURCE_
<java.security.KeyStore$SecretKeyEntry: javax.crypto.SecretKey getSecretKey()> -> _SOURCE_
<android.webkit.WebViewUpdateService: android.webkit.WebViewProviderInfo[] getAllWebViewPackages()> -> _SOURCE_
<java.util.zip.ZipEntry: java.lang.String getName()> -> _SOURCE_
<android.media.RingtoneManager: boolean getStopPreviousRingtone()> -> _SOURCE_
<android.net.VpnManager: void startProvisionedVpnProfile()> -> _SOURCE_
<com.android.internal.os.BinderCallsStats: void dump(java.io.PrintWriter,com.android.internal.os.AppIdToPackageMap,boolean)> -> _SOURCE_
<java.security.cert.PKIXParameters: java.lang.String toString()> -> _SOURCE_
<android.content.ClipData: int getItemCount()> -> _SOURCE_
<android.content.pm.ShortcutInfo: boolean isManifestShortcut()> -> _SOURCE_
<android.content.pm.PackageInstaller: java.util.List getStagedSessions()> -> _SOURCE_
<android.location.GpsMeasurement: double getElevationUncertaintyInDeg()> -> _SOURCE_
<android.telephony.TelephonyManager: int getCdmaEriIconIndex(int)> -> _SOURCE_
<java.net.DatagramSocket: java.net.InetAddress getInetAddress()> -> _SOURCE_
<android.os.StrictMode$ViolationInfo: java.lang.String getViolationDetails()> -> _SOURCE_
<android.service.euicc.EuiccProfileInfo: int getProfileClass()> -> _SOURCE_
<android.app.Person: boolean isImportant()> -> _SOURCE_
<android.app.Activity: android.content.ComponentName getComponentName()> -> _SOURCE_
<android.bluetooth.BluetoothClass: int getDeviceClass()> -> _SOURCE_
<android.media.soundtrigger.SoundTriggerDetector: void dump(java.lang.String,java.io.PrintWriter)> -> _SOURCE_
<java.util.jar.Manifest: java.util.jar.Attributes getAttributes(java.lang.String)> -> _SOURCE_
<android.appwidget.AppWidgetHost: int allocateAppWidgetId()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: boolean isContentInvalid()> -> _SOURCE_
<java.util.jar.JarEntry: java.util.jar.Attributes getAttributes()> -> _SOURCE_
<android.telephony.ims.RcsUceAdapter$CapabilitiesCallback: void onCapabilitiesReceived(java.util.List)> -> _SOURCE_
<android.hardware.fingerprint.FingerprintManager$AuthenticationCallback: void onAuthenticationError(int,java.lang.CharSequence)> -> _SOURCE_
<android.net.NetworkUtils: int getImplicitNetmask(java.net.Inet4Address)> -> _SOURCE_
<android.app.Fragment: boolean isDetached()> -> _SOURCE_
<android.bluetooth.BluetoothGatt: android.bluetooth.BluetoothDevice getDevice()> -> _SOURCE_
<android.app.slice.SliceManager: java.util.Set getPinnedSpecs(android.net.Uri)> -> _SOURCE_
<android.mtp.MtpObjectInfo: int getImagePixDepth()> -> _SOURCE_
<android.os.Environment$UserEnvironment: java.io.File getExternalStorageDirectory()> -> _SOURCE_
<android.graphics.Path: android.graphics.Path$FillType getFillType()> -> _SOURCE_
<android.provider.Settings: boolean checkAndNoteWriteSettingsOperation(android.content.Context,int,java.lang.String,boolean)> -> _SOURCE_
<android.hardware.SensorManager$DynamicSensorCallback: void onDynamicSensorDisconnected(android.hardware.Sensor)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long computeBatteryRealtime(long,int)> -> _SOURCE_
<android.content.pm.ShortcutInfo: boolean isCached()> -> _SOURCE_
<android.accounts.AccountManager: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)> -> _SOURCE_
<android.bluetooth.BluetoothA2dp: boolean isAvrcpAbsoluteVolumeSupported()> -> _SOURCE_
<android.text.style.LeadingMarginSpan$Standard: int getSpanTypeIdInternal()> -> _SOURCE_
<com.android.internal.app.WindowDecorActionBar$ActionModeImpl: java.lang.CharSequence getTitle()> -> _SOURCE_
<android.media.session.PlaybackState: java.lang.CharSequence getErrorMessage()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.lang.CharSequence getShortSupportMessage(android.content.ComponentName)> -> _SOURCE_
<com.android.internal.os.CachedDeviceState$Readonly: com.android.internal.os.CachedDeviceState$TimeInStateStopwatch createTimeOnBatteryStopwatch()> -> _SOURCE_
<android.net.NetworkPolicyManager: java.lang.String uidRulesToString(int)> -> _SOURCE_
<android.view.textservice.SpellCheckerInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)> -> _SOURCE_
<android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityNodeInfo focusSearch(int,int,long,int)> -> _SOURCE_
<android.net.NetworkAgentConfig: boolean isExplicitlySelected()> -> _SOURCE_
<android.renderscript.Program: android.renderscript.Type getConstant(int)> -> _SOURCE_
<android.bluetooth.le.ScanRecord: java.util.List getServiceUuids()> -> _SOURCE_
<android.app.AppOpsManager: java.util.List getPackagesForOps(int[])> -> _SOURCE_
<java.security.KeyStore$TrustedCertificateEntry: java.security.cert.Certificate getTrustedCertificate()> -> _SOURCE_
<android.content.ContextWrapper: int checkCallingPermission(java.lang.String)> -> _SOURCE_
<android.service.notification.StatusBarNotification: java.lang.String getChannelIdLogTag()> -> _SOURCE_
<android.hardware.hdmi.HdmiDeviceInfo: int getDeviceId()> -> _SOURCE_
<com.android.internal.widget.ViewPager: int getOffscreenPageLimit()> -> _SOURCE_
<android.os.Build$Partition: long getBuildTimeMillis()> -> _SOURCE_
<android.content.res.ApkAssets: android.content.res.loader.AssetsProvider getAssetsProvider()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: android.content.ComponentName getProfileOwnerOrDeviceOwnerSupervisionComponent(android.os.UserHandle)> -> _SOURCE_
<android.telephony.PhoneNumberUtils: int getFormatTypeForLocale(java.util.Locale)> -> _SOURCE_
<android.hardware.Camera$Parameters: void getPreviewFpsRange(int[])> -> _SOURCE_
<android.content.pm.SharedLibraryInfo: boolean isBuiltin()> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing$BandBase: float getCutoffFrequency()> -> _SOURCE_
<android.bluetooth.le.AdvertiseData$Builder: android.bluetooth.le.AdvertiseData build()> -> _SOURCE_
<java.security.cert.CollectionCertStoreParameters: java.lang.String toString()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.lang.CharSequence getLongSupportMessage(android.content.ComponentName)> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing$Config: java.lang.String toString()> -> _SOURCE_
<android.hardware.location.GeofenceHardwareMonitorEvent: int getSourceTechnologies()> -> _SOURCE_
<android.print.PrintJobInfo: android.print.PrinterId getPrinterId()> -> _SOURCE_
<android.telephony.ims.stub.ImsUtImplBase: int transact(android.os.Bundle)> -> _SOURCE_
<android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int)> -> _SOURCE_
<com.android.internal.telephony.cdma.SmsMessage: byte[] getIncomingSmsFingerprint()> -> _SOURCE_
<android.telephony.PhoneNumberUtils: java.lang.String getStrippedReversed(java.lang.String)> -> _SOURCE_
<android.view.View: int getAccessibilitySelectionEnd()> -> _SOURCE_
<android.net.NetworkStats: int internalSize()> -> _SOURCE_
<android.telecom.Call$Details: java.lang.String capabilitiesToString(int)> -> _SOURCE_
<android.telecom.InCallService: void onPhoneDestroyed(android.telecom.Phone)> -> _SOURCE_
<android.security.net.config.ApplicationConfig: android.security.net.config.NetworkSecurityConfig getConfigForHostname(java.lang.String)> -> _SOURCE_
<android.media.tv.TvContentRating: java.lang.String flattenToString()> -> _SOURCE_
<android.util.KeyValueListParser: int[] getIntArray(java.lang.String,int[])> -> _SOURCE_
<android.app.Notification$MessagingStyle$Message: boolean isRemoteInputHistory()> -> _SOURCE_
<android.app.admin.DnsEvent: java.util.List getInetAddresses()> -> _SOURCE_
<android.media.AudioFormat: int getChannelIndexMask()> -> _SOURCE_
<com.android.ims.ImsException: int getCode()> -> _SOURCE_
<android.hardware.SensorPrivacyManager: android.hardware.SensorPrivacyManager getInstance(android.content.Context)> -> _SOURCE_
<com.android.internal.widget.LockPatternUtils$StrongAuthTracker: void onIsNonStrongBiometricAllowedChanged(int)> -> _SOURCE_
<android.media.tv.tuner.filter.AvSettings$Builder: android.media.tv.tuner.filter.AvSettings build()> -> _SOURCE_
<android.app.admin.DeviceAdminReceiver: void onPasswordChanged(android.content.Context,android.content.Intent)> -> _SOURCE_
<android.view.InputEvent: int getSequenceNumber()> -> _SOURCE_
<android.view.Display: int getOwnerUid()> -> _SOURCE_
<android.app.assist.AssistContent: android.os.Bundle getExtras()> -> _SOURCE_
<android.app.job.JobServiceEngine: android.os.IBinder getBinder()> -> _SOURCE_
<android.app.ApplicationPackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)> -> _SOURCE_
<java.lang.Package: java.lang.String getImplementationVendor()> -> _SOURCE_
<android.app.Activity: void onRequestPermissionsResult(int,java.lang.String[],int[])> -> _SOURCE_
<java.text.DecimalFormat: java.text.DecimalFormatSymbols getDecimalFormatSymbols()> -> _SOURCE_
<android.hardware.display.WifiDisplayStatus: android.hardware.display.WifiDisplaySessionInfo getSessionInfo()> -> _SOURCE_
<android.security.keystore.recovery.TrustedRootCertificates: java.util.Map getRootCertificates()> -> _SOURCE_
<android.telephony.CellIdentityGsm: int getMcc()> -> _SOURCE_
<android.database.DatabaseUtils: android.os.ParcelFileDescriptor blobFileDescriptorForQuery(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String[])> -> _SOURCE_
<android.net.MobileLinkQualityInfo: int getEvdoEcio()> -> _SOURCE_
<android.media.AudioTrack: int getState()> -> _SOURCE_
<android.permissionpresenterservice.RuntimePermissionPresenterService: android.os.IBinder onBind(android.content.Intent)> -> _SOURCE_
<java.util.concurrent.CompletableFuture: boolean isDone()> -> _SOURCE_
<android.media.AudioDeviceInfo: int[] getChannelCounts()> -> _SOURCE_
<android.view.MotionEvent: long getDownTime()> -> _SOURCE_
<android.metrics.LogMaker: void deserialize(java.lang.Object[])> -> _SOURCE_
<android.telephony.ServiceState: int getCdmaEriIconIndex()> -> _SOURCE_
<java.text.DecimalFormatSymbols: java.util.Locale[] getAvailableLocales()> -> _SOURCE_
<android.telephony.ImsiEncryptionInfo: int getKeyType()> -> _SOURCE_
<android.app.Activity: android.content.ComponentName autofillClientGetComponentName()> -> _SOURCE_
<android.app.AsyncNotedAppOp: java.lang.String getAttributionTag()> -> _SOURCE_
<android.net.ConnectivityManager: boolean updateLockdownVpn()> -> _SOURCE_
<android.app.backup.BackupTransport: int checkFullBackupSize(long)> -> _SOURCE_
<android.app.TabActivity: android.widget.TabHost getTabHost()> -> _SOURCE_
<android.service.autofill.augmented.FillResponse: android.os.Bundle getClientState()> -> _SOURCE_
<android.hardware.usb.UsbDeviceConnection: android.hardware.usb.UsbRequest requestWait()> -> _SOURCE_
<com.android.internal.infra.GlobalWhitelistState: android.util.ArraySet getWhitelistedComponents(int,java.lang.String)> -> _SOURCE_
<android.app.Notification$WearableExtender: int getHintScreenTimeout()> -> _SOURCE_
<android.hardware.display.ColorDisplayManager: boolean isNightDisplayAvailable(android.content.Context)> -> _SOURCE_
<android.app.timedetector.TelephonyTimeSuggestion$Builder: android.app.timedetector.TelephonyTimeSuggestion build()> -> _SOURCE_
<com.android.internal.telephony.CellNetworkScanResult: java.lang.String toString()> -> _SOURCE_
<java.lang.String: java.lang.String valueOf(char)> -> _SOURCE_
<android.mtp.MtpDeviceInfo: int[] getEventsSupported()> -> _SOURCE_
<javax.net.ssl.KeyManagerFactory: java.lang.String getAlgorithm()> -> _SOURCE_
<android.net.LinkAddress: boolean isIPv6()> -> _SOURCE_
<android.content.pm.PackageManager: android.os.Bundle getSuspendedPackageAppExtras()> -> _SOURCE_
<android.telephony.TelephonyManager: android.telephony.UiccSlotInfo[] getUiccSlotsInfo()> -> _SOURCE_
<android.app.ActivityManager: int getUidImportance(int)> -> _SOURCE_
<android.telecom.TelecomManager: java.util.List getCallCapablePhoneAccounts()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getGroupIdLevel1()> -> _SOURCE_
<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()> -> _SOURCE_
<android.service.autofill.UserData: int getMaxUserDataSize()> -> _SOURCE_
<android.app.backup.BackupTransport: java.lang.String dataManagementLabel()> -> _SOURCE_
<android.media.MicrophoneInfo: float getSensitivity()> -> _SOURCE_
<android.service.notification.NotificationListenerService: void registerAsSystemService(android.content.Context,android.content.ComponentName,int)> -> _SOURCE_
<android.hardware.face.FaceManager$AuthenticationResult: android.hardware.face.Face getFace()> -> _SOURCE_
<android.timezone.TelephonyNetwork: java.lang.String getCountryIsoCode()> -> _SOURCE_
<com.android.internal.app.AssistUtils: boolean shouldDisclose(android.content.Context,android.content.ComponentName)> -> _SOURCE_
<android.app.Notification$TvExtender: java.lang.String getChannel()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isInputMethodPermittedByAdmin(android.content.ComponentName,java.lang.String,int)> -> _SOURCE_
<android.os.ShellCommand: android.os.ParcelFileDescriptor openFileForSystem(java.lang.String,java.lang.String)> -> _SOURCE_
<android.webkit.UserPackage: java.util.List getPackageInfosAllUsers(android.content.Context,java.lang.String,int)> -> _SOURCE_
<android.security.keystore.AttestationUtils: boolean isChainValid(android.security.keymaster.KeymasterCertificateChain)> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: void writeToParcel(android.os.Parcel,int)> -> _SOURCE_
<android.telephony.TelephonyManager: int getCurrentPhoneType()> -> _SOURCE_
<android.view.InputDevice$MotionRange: float getFuzz()> -> _SOURCE_
<android.renderscript.ProgramVertex: int getInputCount()> -> _SOURCE_
<android.view.inputmethod.SparseRectFArray$SparseRectFArrayBuilder: android.view.inputmethod.SparseRectFArray build()> -> _SOURCE_
<android.provider.SettingsStringUtil$ColonDelimitedSet: java.lang.String toString()> -> _SOURCE_
<android.media.RoutingSessionInfo: java.util.List getSelectableRoutes()> -> _SOURCE_
<android.permission.PermissionManager: void revokeDefaultPermissionsFromDisabledTelephonyDataServices(java.lang.String[],android.os.UserHandle,java.util.concurrent.Executor,java.util.function.Consumer)> -> _SOURCE_
<android.location.LocationProvider: boolean supportsAltitude()> -> _SOURCE_
<android.os.WorkSource: int size()> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing$Channel: android.media.audiofx.DynamicsProcessing$EqBand getPreEqBand(int)> -> _SOURCE_
<android.location.GnssClock: java.lang.String getReferenceCodeTypeForIsb()> -> _SOURCE_
<android.os.FileUtils: byte[] digest(java.io.FileDescriptor,java.lang.String)> -> _SOURCE_
<android.util.KeyValueListParser: float getFloat(java.lang.String,float)> -> _SOURCE_
<android.content.ContextWrapper: java.io.File getNoBackupFilesDir()> -> _SOURCE_
<android.telecom.Connection: void onPostDialContinue(boolean)> -> _SOURCE_
<android.widget.QuickContactBadge: void setMode(int)> -> _SOURCE_
<android.content.integrity.RuleSet$Builder: android.content.integrity.RuleSet build()> -> _SOURCE_
<android.telecom.DefaultDialerManager: java.lang.String getDefaultDialerApplication(android.content.Context,int)> -> _SOURCE_
<java.lang.Class: java.lang.reflect.Method[] getMethods()> -> _SOURCE_
<android.location.GpsMeasurement: double getPseudorangeRateUncertaintyInMetersPerSec()> -> _SOURCE_
<java.lang.reflect.AccessibleObject: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()> -> _SOURCE_
<android.net.Ikev2VpnProfile$Builder: android.net.Ikev2VpnProfile build()> -> _SOURCE_
<android.database.sqlite.SQLiteConnection: int getConnectionId()> -> _SOURCE_
<android.service.voice.VoiceInteractionSession$CommandRequest: java.lang.String getCommand()> -> _SOURCE_
<android.telecom.Connection: long getConnectionStartElapsedRealtimeMillis()> -> _SOURCE_
<android.app.AppOpsManager$HistoricalOps: android.app.AppOpsManager$HistoricalOps spliceFromEnd(double)> -> _SOURCE_
<android.telecom.DisconnectCause: java.lang.String toString()> -> _SOURCE_
<android.text.style.TextAppearanceSpan: int getSpanTypeIdInternal()> -> _SOURCE_
<android.text.style.QuoteSpan: int getSpanTypeIdInternal()> -> _SOURCE_
<android.view.textclassifier.TextClassification$Builder: android.view.textclassifier.TextClassification$Builder clearActions()> -> _SOURCE_
<android.telecom.Connection: int getCallerNumberVerificationStatus()> -> _SOURCE_
<java.time.ZoneId: java.util.Set getAvailableZoneIds()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.util.List getActiveAdmins()> -> _SOURCE_
<android.telephony.ims.ImsCallForwardInfo: int getToA()> -> _SOURCE_
<android.app.assist.AssistContent: java.lang.String getStructuredData()> -> _SOURCE_
<android.telecom.CallAudioState: int getRoute()> -> _SOURCE_
<java.lang.StrictMath: double toDegrees(double)> -> _SOURCE_
<android.content.res.TypedArray: android.graphics.drawable.Drawable getDrawable(int)> -> _SOURCE_
<android.telecom.Conference: int getState()> -> _SOURCE_
<javax.crypto.Mac: java.lang.Object clone()> -> _SOURCE_
<android.media.MediaCasStateException: java.lang.String getDiagnosticInfo()> -> _SOURCE_
<android.hardware.display.ColorDisplayManager: boolean isNightDisplayActivated()> -> _SOURCE_
<com.android.internal.view.InlineSuggestionsRequestInfo: android.content.ComponentName getComponentName()> -> _SOURCE_
<android.content.integrity.AppInstallMetadata: boolean isStampVerified()> -> _SOURCE_
<java.lang.System: java.lang.String getProperty(java.lang.String)> -> _SOURCE_
<android.telephony.ims.feature.MmTelFeature: android.telephony.ims.stub.ImsCallSessionImplBase createCallSession(android.telephony.ims.ImsCallProfile)> -> _SOURCE_
<android.printservice.PrintServiceInfo: java.lang.String getAdvancedOptionsActivityName()> -> _SOURCE_
<android.content.pm.PackageInstaller$Session: android.content.pm.DataLoaderParams getDataLoaderParams()> -> _SOURCE_
<java.net.Socket: java.lang.String toString()> -> _SOURCE_
<java.util.UUID: java.lang.String toString()> -> _SOURCE_
<android.service.autofill.InlinePresentation: java.lang.String[] getAutofillHints()> -> _SOURCE_
<android.media.session.MediaSession: android.media.session.MediaController getController()> -> _SOURCE_
<android.net.NetworkAgent: android.net.Network register()> -> _SOURCE_
<com.android.internal.telephony.TelephonyPermissions: boolean checkReadCallLog(android.content.Context,int,int,int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.provider.ContactsContract$CommonDataKinds$Event: int getTypeResource(java.lang.Integer)> -> _SOURCE_
<android.net.NetworkPolicyManager: java.lang.String resolveNetworkId(java.lang.String)> -> _SOURCE_
<com.android.internal.util.StateMachine$LogRec: long getTime()> -> _SOURCE_
<android.database.sqlite.SQLiteQueryBuilder: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.CancellationSignal)> -> _SOURCE_
<android.telecom.RemoteConnection: int getAddressPresentation()> -> _SOURCE_
<android.os.Parcel: android.os.ParcelFileDescriptor readFileDescriptor()> -> _SOURCE_
<android.media.tv.tuner.Tuner: android.media.tv.tuner.filter.TimeFilter openTimeFilter()> -> _SOURCE_
<java.util.concurrent.ConcurrentLinkedQueue: java.util.Iterator iterator()> -> _SOURCE_
<android.hardware.hdmi.HdmiDeviceInfo: boolean isMhlDevice()> -> _SOURCE_
<com.android.internal.widget.LockPatternUtils: int getActivePasswordQuality(int)> -> _SOURCE_
<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setMetadata(android.view.SurfaceControl,int,int)> -> _SOURCE_
<android.security.keystore.KeyInfo: java.lang.String getKeystoreAlias()> -> _SOURCE_
<android.net.metrics.RaEvent: java.lang.String toString()> -> _SOURCE_
<android.telecom.StatusHints: android.graphics.drawable.Drawable getIcon(android.content.Context)> -> _SOURCE_
<java.io.Console: java.io.Console printf(java.lang.String,java.lang.Object[])> -> _SOURCE_
<android.view.MenuItem: java.lang.CharSequence getContentDescription()> -> _SOURCE_
<android.app.ApplicationExitInfo: java.lang.String[] getPackageList()> -> _SOURCE_
<android.database.sqlite.SQLiteStatement: long executeInsert()> -> _SOURCE_
<android.telecom.TelecomManager: java.lang.String getSystemDialerPackage()> -> _SOURCE_
<android.telephony.mbms.MbmsGroupCallSessionCallback: void onServiceInterfaceAvailable(java.lang.String,int)> -> _SOURCE_
<android.telephony.ModemActivityInfo: long getTimestamp()> -> _SOURCE_
<javax.net.ssl.SSLContext: javax.net.ssl.SSLEngine createSSLEngine(java.lang.String,int)> -> _SOURCE_
<java.lang.SecurityManager: java.lang.ThreadGroup getThreadGroup()> -> _SOURCE_
<android.telephony.SubscriptionInfo: int getSimSlotIndex()> -> _SOURCE_
<android.app.AppOpsManager: int permissionToOpCode(java.lang.String)> -> _SOURCE_
<android.hardware.radio.RadioManager$FmBandConfig: java.lang.String toString()> -> _SOURCE_
<android.telecom.Connection: void onDisconnectConferenceParticipant(android.net.Uri)> -> _SOURCE_
<android.security.KeyPairGeneratorSpec: java.lang.String getKeyType()> -> _SOURCE_
<android.media.tv.tuner.frontend.DvbtFrontendCapabilities: int getTransmissionModeCapability()> -> _SOURCE_
<android.app.Notification$Action$WearableExtender: java.lang.CharSequence getInProgressLabel()> -> _SOURCE_
<android.telephony.CellSignalStrengthWcdma: int getBitErrorRate()> -> _SOURCE_
<java.text.DecimalFormat: java.lang.String getPositiveSuffix()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getCdmaMin(int)> -> _SOURCE_
<java.security.spec.ECParameterSpec: java.security.spec.ECPoint getGenerator()> -> _SOURCE_
<android.telephony.SubscriptionManager: android.net.Uri getUriForSubscriptionId(int)> -> _SOURCE_
<javax.security.cert.X509Certificate: javax.security.cert.X509Certificate getInstance(java.io.InputStream)> -> _SOURCE_
<java.net.URLConnection: java.lang.String getContentType()> -> _SOURCE_
<android.hardware.camera2.params.MandatoryStreamCombination$Builder: java.util.List getAvailableMandatoryStreamCombinations()> -> _SOURCE_
<android.app.Notification$TvExtender: boolean isAvailableOnTv()> -> _SOURCE_
<android.media.tv.tuner.frontend.DvbsFrontendCapabilities: int getStandardCapability()> -> _SOURCE_
<android.security.net.config.NetworkSecurityConfig: android.security.net.config.TrustAnchor findTrustAnchorByIssuerAndSignature(java.security.cert.X509Certificate)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.lang.String getAlwaysOnVpnPackage(android.content.ComponentName)> -> _SOURCE_
<android.telephony.SubscriptionManager: android.telephony.SubscriptionInfo getActiveSubscriptionInfo(int)> -> _SOURCE_
<android.nfc.NfcManager: android.nfc.NfcAdapter getDefaultAdapter()> -> _SOURCE_
<android.location.GnssMeasurement: double getCarrierPhase()> -> _SOURCE_
<android.os.BinderProxy$InterfaceCount: java.lang.String toString()> -> _SOURCE_
<android.telephony.SignalStrength: void fillInNotifierBundle(android.os.Bundle)> -> _SOURCE_
<java.lang.Thread: boolean isDaemon()> -> _SOURCE_
<android.hardware.hdmi.HdmiDeviceInfo: boolean isInactivated()> -> _SOURCE_
<java.util.LinkedList: java.lang.Object[] toArray()> -> _SOURCE_
<android.graphics.Canvas: long getNativeCanvasWrapper()> -> _SOURCE_
<android.hardware.fingerprint.FingerprintManager: boolean hasEnrolledFingerprints(int)> -> _SOURCE_
<android.database.sqlite.SQLiteQueryBuilder: boolean isStrictGrammar()> -> _SOURCE_
<android.telephony.CellInfoGsm: android.telephony.CellIdentityGsm getCellIdentity()> -> _SOURCE_
<android.view.textclassifier.TextLanguage: android.os.Bundle getExtras()> -> _SOURCE_
<android.bluetooth.BluetoothGatt: boolean discoverServiceByUuid(java.util.UUID)> -> _SOURCE_
<com.android.internal.app.WindowDecorActionBar$ActionModeImpl: android.view.MenuInflater getMenuInflater()> -> _SOURCE_
<android.net.SSLCertificateSocketFactory: java.lang.String[] getDefaultCipherSuites()> -> _SOURCE_
<android.bluetooth.BluetoothGattCharacteristic: int getPermissions()> -> _SOURCE_
<java.lang.invoke.MethodHandles$Lookup: java.lang.invoke.MethodHandle findStaticGetter(java.lang.Class,java.lang.String,java.lang.Class)> -> _SOURCE_
<android.app.AppOpsManager$OpEntry: android.app.AppOpsManager$OpEventProxyInfo getLastProxyInfo(int)> -> _SOURCE_
<android.media.MediaFormat: boolean containsFeature(java.lang.String)> -> _SOURCE_
<android.os.VibrationAttributes: int getUsageClass()> -> _SOURCE_
<android.util.PackageUtils: byte[] computeSha256DigestBytes(byte[])> -> _SOURCE_
<android.os.Environment: java.io.File getDataVendorDeDirectory(int)> -> _SOURCE_
<android.content.pm.ApplicationInfo: boolean hasRequestedLegacyExternalStorage()> -> _SOURCE_
<android.content.ClipData: android.content.ClipDescription getDescription()> -> _SOURCE_
<android.graphics.drawable.AnimationDrawable: int getNumberOfFrames()> -> _SOURCE_
<android.bluetooth.BluetoothClass: boolean doesClassMatch(int)> -> _SOURCE_
<android.app.DirectAction: android.os.IBinder getActivityId()> -> _SOURCE_
<java.io.File: java.io.File[] listRoots()> -> _SOURCE_
<android.media.VolumeShaper$State: java.lang.String toString()> -> _SOURCE_
<android.hardware.hdmi.HdmiRecordSources: boolean checkRecordSource(byte[])> -> _SOURCE_
<java.security.cert.CertPath: java.lang.String toString()> -> _SOURCE_
<android.net.LinkProperties: java.lang.String getInterfaceName()> -> _SOURCE_
<android.net.TelephonyNetworkSpecifier: int getSubscriptionId()> -> _SOURCE_
<android.appwidget.AppWidgetHostView: android.app.ActivityOptions createSharedElementActivityOptions(int[],java.lang.String[],android.content.Intent)> -> _SOURCE_
<android.net.NetworkStats: android.net.NetworkStats insertEntry(java.lang.String,int,int,int,int,int,int,long,long,long,long,long)> -> _SOURCE_
<android.widget.GridLayout: boolean isColumnOrderPreserved()> -> _SOURCE_
<android.util.MergedConfiguration: android.content.res.Configuration getGlobalConfiguration()> -> _SOURCE_
<android.hardware.hdmi.HdmiPortInfo: int getType()> -> _SOURCE_
<android.os.BatteryStatsManager: android.os.connectivity.CellularBatteryStats getCellularBatteryStats()> -> _SOURCE_
<android.hardware.camera2.CaptureFailure: java.lang.String getPhysicalCameraId()> -> _SOURCE_
<android.os.StrictMode: android.os.StrictMode$ThreadPolicy allowThreadViolations()> -> _SOURCE_
<android.content.pm.PackageManager: android.content.Intent buildRequestPermissionsIntent(java.lang.String[])> -> _SOURCE_
<android.net.ConnectivityManager: boolean requestRouteToHost(int,int)> -> _SOURCE_
<java.text.StringCharacterIterator: char previous()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long getLongestDeviceIdleModeTime(int)> -> _SOURCE_
<android.telephony.DataConnectionRealTimeInfo: long getTime()> -> _SOURCE_
<android.accounts.AccountManager: android.content.IntentSender createRequestAccountAccessIntentSenderAsUser(android.accounts.Account,java.lang.String,android.os.UserHandle)> -> _SOURCE_
<android.nfc.NfcAdapter: android.nfc.NfcAdapter getDefaultAdapter(android.content.Context)> -> _SOURCE_
<android.app.ActivityManager: android.content.pm.ParceledListSlice getGrantedUriPermissions(java.lang.String)> -> _SOURCE_
<android.hardware.Camera$Parameters: java.util.List getFocusAreas()> -> _SOURCE_
<com.android.internal.view.menu.SubMenuBuilder: com.android.internal.view.menu.MenuBuilder getRootMenu()> -> _SOURCE_
<java.net.InterfaceAddress: java.net.InetAddress getAddress()> -> _SOURCE_
<android.os.FileUtils: long roundStorageSize(long)> -> _SOURCE_
<android.telephony.CarrierRestrictionRules: java.lang.String toString()> -> _SOURCE_
<android.media.audiofx.Visualizer: int getSamplingRate()> -> _SOURCE_
<android.telecom.RemoteConference$Callback: void onConnectionPropertiesChanged(android.telecom.RemoteConference,int)> -> _SOURCE_
<android.app.NotificationManager$Policy: boolean allowReminders()> -> _SOURCE_
<android.view.inputmethod.InlineSuggestionInfo: java.lang.String getType()> -> _SOURCE_
<android.widget.SlidingDrawer: boolean isMoving()> -> _SOURCE_
<android.telecom.Conference: java.util.List getConferenceableConnections()> -> _SOURCE_
<java.security.spec.ECFieldF2m: int[] getMidTermsOfReductionPolynomial()> -> _SOURCE_
<android.app.ApplicationPackageManager: boolean isDeviceUpgrading()> -> _SOURCE_
<android.content.ContentProviderOperation: java.lang.String toString()> -> _SOURCE_
<android.net.nsd.NsdServiceInfo: int getPort()> -> _SOURCE_
<java.io.ObjectInputStream: int available()> -> _SOURCE_
<android.media.MediaTimestamp: long getAnchorSytemNanoTime()> -> _SOURCE_
<android.animation.StateListAnimator: java.util.ArrayList getTuples()> -> _SOURCE_
<android.hardware.location.ContextHubManager: android.hardware.location.ContextHubInfo getContextHubInfo(int)> -> _SOURCE_
<android.app.WindowConfiguration: boolean persistTaskBounds()> -> _SOURCE_
<android.app.SearchableInfo: android.content.Context getActivityContext(android.content.Context)> -> _SOURCE_
<com.android.internal.util.StateMachine: int getLogRecCount()> -> _SOURCE_
<android.app.ActivityOptions: android.view.AppTransitionAnimationSpec[] getAnimSpecs()> -> _SOURCE_
<android.hardware.location.ContextHubInfo: int getPlatformVersion()> -> _SOURCE_
<android.service.chooser.ChooserTarget: android.os.Bundle getIntentExtras()> -> _SOURCE_
<android.app.assist.AssistStructure$ViewNode: java.lang.String getClassName()> -> _SOURCE_
<java.nio.FloatBuffer: java.lang.String toString()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: boolean hasExtras()> -> _SOURCE_
<android.app.admin.FactoryResetProtectionPolicy: java.util.List getFactoryResetProtectionAccounts()> -> _SOURCE_
<android.service.autofill.UserData: java.lang.String getFieldClassificationAlgorithmForCategory(java.lang.String)> -> _SOURCE_
<com.android.internal.os.ProcessCpuTracker: long getCpuTimeForPid(int)> -> _SOURCE_
<java.net.URL: java.lang.String getFile()> -> _SOURCE_
<javax.crypto.spec.PBEParameterSpec: java.security.spec.AlgorithmParameterSpec getParameterSpec()> -> _SOURCE_
<android.app.ActivityManager$TaskSnapshot: int getSystemUiVisibility()> -> _SOURCE_
<android.telephony.SmsCbCmasInfo: int getMessageClass()> -> _SOURCE_
<android.media.tv.tuner.frontend.FrontendInfo: int getAcquireRange()> -> _SOURCE_
<java.lang.StringBuffer: java.lang.StringBuffer appendCodePoint(int)> -> _SOURCE_
<android.media.session.MediaController: long getFlags()> -> _SOURCE_
<com.android.internal.telephony.SmsAddress: boolean isNetworkSpecific()> -> _SOURCE_
<java.util.OptionalDouble: java.lang.String toString()> -> _SOURCE_
<android.content.ContentProvider: int getUserIdFromUri(android.net.Uri,int)> -> _SOURCE_
<android.app.ActivityManager: int getLargeMemoryClass()> -> _SOURCE_
<java.net.Inet4Address: boolean isMulticastAddress()> -> _SOURCE_
<android.telephony.ims.ImsSsData: int getServiceType()> -> _SOURCE_
<android.app.NotificationChannel: java.lang.String getId()> -> _SOURCE_
<android.os.UserManager: java.lang.String getUserName()> -> _SOURCE_
<android.graphics.drawable.Icon: void convertToAshmem()> -> _SOURCE_
<android.app.AuthenticationRequiredException: android.app.PendingIntent getUserAction()> -> _SOURCE_
<android.location.LocationRequest: long getInterval()> -> _SOURCE_
<android.app.VrManager: boolean isPersistentVrModeEnabled()> -> _SOURCE_
<android.service.notification.NotificationListenerService$Ranking: int getUserSentiment()> -> _SOURCE_
<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()> -> _SOURCE_
<android.telephony.SubscriptionInfo: java.util.List getAllAccessRules()> -> _SOURCE_
<android.media.MediaScannerConnection: void scanFile(java.lang.String,java.lang.String)> -> _SOURCE_
<android.view.View: void onCloseSystemDialogs(java.lang.String)> -> _SOURCE_
<android.view.textclassifier.TextSelection$Request: android.view.textclassifier.SystemTextClassifierMetadata getSystemTextClassifierMetadata()> -> _SOURCE_
<android.telephony.ims.ImsMmTelManager: boolean isTtyOverVolteEnabled()> -> _SOURCE_
<android.app.SystemServiceRegistry: java.lang.Object getSystemService(android.app.ContextImpl,java.lang.String)> -> _SOURCE_
<android.view.inputmethod.InputConnectionWrapper: boolean finishComposingText()> -> _SOURCE_
<android.net.TrafficStats: void startDataProfiling(android.content.Context)> -> _SOURCE_
<java.net.MulticastSocket: int getTimeToLive()> -> _SOURCE_
<android.security.keystore.recovery.KeyChainProtectionParams: byte[] getSecret()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: long getSystemCpuTimeUs(int)> -> _SOURCE_
<android.os.Process: int myUid()> -> _SOURCE_
<android.net.ConnectivityManager: java.util.List getVpnLockdownWhitelist(int)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getNai(int)> -> _SOURCE_
<android.media.MediaCodecList: java.lang.String findDecoderForFormat(android.media.MediaFormat)> -> _SOURCE_
<android.mtp.MtpDeviceInfo: java.lang.String getManufacturer()> -> _SOURCE_
<android.telephony.UiccCardInfo: boolean isEuicc()> -> _SOURCE_
<android.telecom.RemoteConference: int getState()> -> _SOURCE_
<android.view.View: android.view.WindowInsetsController getWindowInsetsController()> -> _SOURCE_
<android.telephony.ims.ImsStreamMediaProfile: java.lang.String toString()> -> _SOURCE_
<android.location.GpsMeasurement: boolean hasCodePhaseUncertaintyInChips()> -> _SOURCE_
<android.view.ViewGroup: int getTransientViewCount()> -> _SOURCE_
<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.HdmiSwitchClient getSwitchClient()> -> _SOURCE_
<android.hardware.radio.RadioMetadata: java.util.Set keySet()> -> _SOURCE_
<android.view.autofill.AutofillManager: android.service.autofill.FillEventHistory getFillEventHistory()> -> _SOURCE_
<android.bluetooth.BluetoothDevice: boolean isConnected()> -> _SOURCE_
<android.telephony.ims.RcsContactUceCapability: boolean isCapable(java.lang.String)> -> _SOURCE_
<android.telephony.MbmsStreamingSession: android.telephony.mbms.StreamingService startStreaming(android.telephony.mbms.StreamingServiceInfo,java.util.concurrent.Executor,android.telephony.mbms.StreamingServiceCallback)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean setProfileOwner(android.content.ComponentName,java.lang.String,int)> -> _SOURCE_
<android.content.integrity.IntegrityFormula$Application: android.content.integrity.IntegrityFormula packageNameEquals(java.lang.String)> -> _SOURCE_
<android.net.WebAddress: java.lang.String getAuthInfo()> -> _SOURCE_
<android.media.tv.tuner.DemuxCapabilities: int getVideoFilterCount()> -> _SOURCE_
<android.telephony.ims.compat.stub.ImsCallSessionImplBase: boolean isInCall()> -> _SOURCE_
<android.os.ShellCommand: android.os.ResultReceiver adoptResultReceiver()> -> _SOURCE_
<android.service.dreams.DreamService: void onActionModeFinished(android.view.ActionMode)> -> _SOURCE_
<android.app.servertransaction.NewIntentItem: int getPostExecutionState()> -> _SOURCE_
<android.hardware.biometrics.CryptoObject: java.security.Signature getSignature()> -> _SOURCE_
<android.location.GnssMeasurementCorrections: float getEnvironmentBearingUncertaintyDegrees()> -> _SOURCE_
<java.security.cert.CertificateFactory: java.util.Collection generateCRLs(java.io.InputStream)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: long getLastBugReportRequestTime()> -> _SOURCE_
<android.view.textclassifier.SelectionEvent: android.view.textclassifier.TextClassificationSessionId getSessionId()> -> _SOURCE_
<android.app.Notification$MessagingStyle: android.graphics.drawable.Icon getShortcutIcon()> -> _SOURCE_
<java.security.spec.EllipticCurve: java.math.BigInteger getA()> -> _SOURCE_
<com.android.internal.app.procstats.ProcessStats: void updateFragmentation()> -> _SOURCE_
<android.view.InputQueue: void dispose()> -> _SOURCE_
<android.security.KeyPairGeneratorSpec: int getFlags()> -> _SOURCE_
<android.media.audiofx.Visualizer: int getMeasurementPeakRms(android.media.audiofx.Visualizer$MeasurementPeakRms)> -> _SOURCE_
<android.content.pm.PackageInstaller: void updateSessionAppLabel(int,java.lang.CharSequence)> -> _SOURCE_
<android.app.Notification$InboxStyle: android.widget.RemoteViews makeBigContentView()> -> _SOURCE_
<android.bluetooth.BluetoothHidHost: java.util.List getConnectedDevices()> -> _SOURCE_
<android.speech.tts.TextToSpeechService: java.util.List onGetVoices()> -> _SOURCE_
<javax.net.ssl.HttpsURLConnection: javax.net.ssl.SSLSocketFactory getDefaultSSLSocketFactory()> -> _SOURCE_
<android.telephony.SmsMessage: android.telephony.SmsMessage createFromEfRecord(int,byte[],int)> -> _SOURCE_
<android.telephony.TelephonyManager: int getCdmaRoamingMode()> -> _SOURCE_
<android.app.LauncherActivity: java.util.List makeListItems()> -> _SOURCE_
<java.io.ObjectInputStream: java.lang.String readLine()> -> _SOURCE_
<android.app.NotificationManager$Policy: int allowConversationsFrom()> -> _SOURCE_
<android.media.AudioPlaybackConfiguration: java.lang.String toLogFriendlyPlayerType(int)> -> _SOURCE_
<java.net.DatagramPacket: int getLength()> -> _SOURCE_
<java.time.LocalDate: java.time.chrono.IsoChronology getChronology()> -> _SOURCE_
<android.media.AudioAttributes: java.lang.String toString()> -> _SOURCE_
<com.android.internal.os.KernelCpuThreadReaderDiff: int[] getCpuFrequenciesKhz()> -> _SOURCE_
<android.net.ConnectivityManager: boolean isNetworkTypeMobile(int)> -> _SOURCE_
<android.content.pm.PackageInstaller$Session: int getParentSessionId()> -> _SOURCE_
<android.location.Address: java.lang.String getSubThoroughfare()> -> _SOURCE_
<android.hardware.usb.UsbPortStatus: int getCurrentMode()> -> _SOURCE_
<java.net.URI: java.lang.String getUserInfo()> -> _SOURCE_
<android.media.tv.TvInputInfo: android.graphics.drawable.Drawable loadIcon(android.content.Context)> -> _SOURCE_
<android.security.keystore.KeyProtection: boolean isStrongBoxBacked()> -> _SOURCE_
<android.net.http.SslCertificate: java.security.cert.X509Certificate getX509Certificate()> -> _SOURCE_
<android.hardware.usb.UsbDeviceConnection: android.content.Context getContext()> -> _SOURCE_
<android.service.notification.NotificationListenerService$Ranking: boolean isNoisy()> -> _SOURCE_
<android.media.MediaRecorder: java.lang.String toLogFriendlyAudioSource(int)> -> _SOURCE_
<android.util.ArraySet: int hashCode()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean rebootRadio()> -> _SOURCE_
<android.graphics.drawable.BitmapDrawable: android.content.res.ColorStateList getTint()> -> _SOURCE_
<com.android.internal.widget.ResolverDrawerLayout: void onNestedScroll(android.view.View,int,int,int,int)> -> _SOURCE_
<android.widget.TimePicker$AbstractTimePickerDelegate$SavedState: int getHour()> -> _SOURCE_
<android.service.euicc.DownloadSubscriptionResult: int getCardId()> -> _SOURCE_
<android.telephony.mbms.vendor.MbmsDownloadServiceBase: int requestUpdateFileServices(int,java.util.List)> -> _SOURCE_
<android.util.AtomicFile: java.io.File getBaseFile()> -> _SOURCE_
<android.content.pm.SuspendDialogInfo: int getNeutralButtonTextResId()> -> _SOURCE_
<android.content.SyncResult: boolean hasHardError()> -> _SOURCE_
<android.telephony.SmsMessage$SubmitPdu: java.lang.String toString()> -> _SOURCE_
<android.media.AudioTrack: int getAudioSessionId()> -> _SOURCE_
<android.hardware.camera2.CaptureFailure: long getFrameNumber()> -> _SOURCE_
<java.security.Provider: java.security.Provider$Service getService(java.lang.String,java.lang.String)> -> _SOURCE_
<android.media.MediaCodec: android.media.MediaFormat getInputFormat()> -> _SOURCE_
<android.timezone.TelephonyLookup: android.timezone.TelephonyNetworkFinder getTelephonyNetworkFinder()> -> _SOURCE_
<java.text.Collator: java.util.Locale[] getAvailableLocales()> -> _SOURCE_
<android.content.ContentResolver: android.content.IContentProvider acquireUnstableProvider(java.lang.String)> -> _SOURCE_
<android.accessibilityservice.AccessibilityServiceInfo: java.lang.String capabilityToString(int)> -> _SOURCE_
<android.text.DynamicLayout: int getIndexFirstChangedBlock()> -> _SOURCE_
<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)> -> _SOURCE_
<android.os.UserManager: java.util.List getEnabledProfiles()> -> _SOURCE_
<android.net.TrafficStats: long getTotalRxBytes()> -> _SOURCE_
<android.content.SyncStatusInfo$Stats: void writeToParcel(android.os.Parcel)> -> _SOURCE_
<android.location.Criteria: int getVerticalAccuracy()> -> _SOURCE_
<android.telephony.CellBroadcastService$ICellBroadcastServiceWrapper: java.lang.CharSequence getCellBroadcastAreaInfo(int)> -> _SOURCE_
<android.media.AudioPortConfig: java.lang.String toString()> -> _SOURCE_
<android.telecom.AudioState: java.lang.String toString()> -> _SOURCE_
<javax.net.ssl.SSLEngineResult: int bytesProduced()> -> _SOURCE_
<android.media.AudioPatch: android.media.AudioPortConfig[] sources()> -> _SOURCE_
<android.os.Parcel: android.util.SparseIntArray readSparseIntArray()> -> _SOURCE_
<android.drm.DrmUtils$ExtendedMetadataParser: java.lang.String get(java.lang.String)> -> _SOURCE_
<android.mtp.MtpDevice: long getParent(int)> -> _SOURCE_
<android.media.AudioManager: int getRingerModeInternal()> -> _SOURCE_
<android.telephony.SmsCbLocation: boolean isInLocationArea(java.lang.String,int,int)> -> _SOURCE_
<java.util.zip.ZipEntry: int getMethod()> -> _SOURCE_
<android.net.MobileLinkQualityInfo: int getEvdoSnr()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.util.List getPackagesHoldingPermissions(java.lang.String[],int)> -> _SOURCE_
<android.location.GnssClock: boolean hasBiasNanos()> -> _SOURCE_
<android.telecom.TelecomManager: android.telecom.PhoneAccountHandle getSimCallManager()> -> _SOURCE_
<android.app.AsyncNotedAppOp: java.lang.String getMessage()> -> _SOURCE_
<android.os.Debug$MemoryInfo: int getOtherPrivate(int)> -> _SOURCE_
<android.telephony.data.ApnSetting: java.net.InetAddress inetAddressFromString(java.lang.String)> -> _SOURCE_
<android.telephony.PreciseCallState: int getForegroundCallState()> -> _SOURCE_
<android.net.LinkProperties: java.util.List getAllAddresses()> -> _SOURCE_
<android.app.usage.UsageStatsManager: boolean isAppInactive(java.lang.String)> -> _SOURCE_
<android.hardware.fingerprint.FingerprintManager$CryptoObject: android.security.identity.IdentityCredential getIdentityCredential()> -> _SOURCE_
<android.net.ConnectivityManager: android.net.LinkProperties getLinkProperties(android.net.Network)> -> _SOURCE_
<android.media.tv.tuner.DemuxCapabilities: int[] getLinkCapabilities()> -> _SOURCE_
<android.widget.SearchView: void clearFocus()> -> _SOURCE_
<android.telephony.data.ApnSetting: boolean isEnabled()> -> _SOURCE_
<android.net.LinkAddress: int getPrefixLength()> -> _SOURCE_
<android.app.ActivityManager: int handleIncomingUser(int,int,int,boolean,boolean,java.lang.String,java.lang.String)> -> _SOURCE_
<android.bluetooth.BluetoothGatt: int getConnectionState(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<android.telephony.TelephonyManager: int getSimCarrierId()> -> _SOURCE_
<android.location.GnssNavigationMessage: byte[] getData()> -> _SOURCE_
<android.content.pm.ShortcutInfo: java.lang.CharSequence getTitle()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: android.os.connectivity.CellularBatteryStats getCellularBatteryStats()> -> _SOURCE_
<android.renderscript.ProgramStore: boolean isColorMaskRedEnabled()> -> _SOURCE_
<android.view.textclassifier.TextClassifierEvent: int getEventType()> -> _SOURCE_
<android.bluetooth.le.PeriodicAdvertisingCallback: void onSyncLost(int)> -> _SOURCE_
<android.provider.CalendarContract$CalendarAlerts: long findNextAlarmTime(android.content.ContentResolver,long)> -> _SOURCE_
<android.app.Activity: boolean isVoiceInteractionRoot()> -> _SOURCE_
<android.net.wifi.nl80211.NativeScanResult: byte[] getInformationElements()> -> _SOURCE_
<com.android.internal.telephony.TelephonyPermissions: boolean checkCallingOrSelfReadDeviceIdentifiers(android.content.Context,int,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.media.AudioSystem: java.lang.String modeToString(int)> -> _SOURCE_
<android.nfc.NfcAdapter: boolean enableNdefPush()> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: void disableGetProfileConnectionStateCache()> -> _SOURCE_
<android.service.voice.VoiceInteractionSession$AssistState: android.service.voice.VoiceInteractionSession$ActivityId getActivityId()> -> _SOURCE_
<android.location.GnssMeasurement: boolean hasCarrierPhase()> -> _SOURCE_
<android.hardware.display.AmbientBrightnessDayStats: float[] getStats()> -> _SOURCE_
<android.service.media.MediaBrowserService: android.os.Bundle getBrowserRootHints()> -> _SOURCE_
<android.hardware.radio.RadioManager$FmBandConfig$Builder: android.hardware.radio.RadioManager$FmBandConfig build()> -> _SOURCE_
<android.accessibilityservice.AccessibilityServiceInfo: android.content.ComponentName getComponentName()> -> _SOURCE_
<android.telephony.ims.ImsSsData: boolean isTypeCF()> -> _SOURCE_
<android.se.omapi.Channel: byte[] transmit(byte[])> -> _SOURCE_
<javax.crypto.spec.DHParameterSpec: java.math.BigInteger getP()> -> _SOURCE_
<android.content.pm.dex.PackageOptimizationInfo: android.content.pm.dex.PackageOptimizationInfo createWithNoInfo()> -> _SOURCE_
<android.net.Ikev2VpnProfile: boolean isRestrictedToTestNetworks()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: int getDeviceIdlingCount(int,int)> -> _SOURCE_
<android.net.WifiLinkQualityInfo: int getType()> -> _SOURCE_
<java.lang.StackTraceElement: java.lang.String toString()> -> _SOURCE_
<android.media.AudioDeviceInfo: int[] getChannelIndexMasks()> -> _SOURCE_
<android.os.connectivity.WifiBatteryStats: long getSleepTimeMillis()> -> _SOURCE_
<android.telephony.CellSignalStrengthGsm: int getBitErrorRate()> -> _SOURCE_
<java.security.Provider: java.lang.Object get(java.lang.Object)> -> _SOURCE_
<android.content.ContentProviderOperation: int getType()> -> _SOURCE_
<android.app.Activity: boolean onMenuOpened(int,android.view.Menu)> -> _SOURCE_
<android.app.Notification$TvExtender: android.app.PendingIntent getDeleteIntent()> -> _SOURCE_
<android.app.AppOpsManager: int opToDefaultMode(java.lang.String)> -> _SOURCE_
<android.bluetooth.le.ScanResult: int getRssi()> -> _SOURCE_
<android.telephony.SmsMessage: android.telephony.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,java.lang.String,boolean,int)> -> _SOURCE_
<com.android.internal.widget.LockPatternView$Cell: java.lang.String toString()> -> _SOURCE_
<android.view.VerifiedInputEvent: long getEventTimeNanos()> -> _SOURCE_
<com.android.internal.telephony.TelephonyPermissions: void enforeceCallingOrSelfReadPrivilegedPhoneStatePermissionOrCarrierPrivilege(android.content.Context,int,java.lang.String)> -> _SOURCE_
<android.media.MediaCodecInfo$AudioCapabilities: int[] getSupportedSampleRates()> -> _SOURCE_
<java.text.DateFormatSymbols: java.text.DateFormatSymbols getInstance()> -> _SOURCE_
<com.android.internal.telephony.gsm.SmsMessage: boolean isMWISetMessage()> -> _SOURCE_
<android.os.storage.StorageManager: java.util.List getVolumeRecords()> -> _SOURCE_
<android.app.backup.RestoreSession: int getAvailableRestoreSets(android.app.backup.RestoreObserver)> -> _SOURCE_
<android.content.pm.ShortcutManager: int getMaxShortcutCountForActivity()> -> _SOURCE_
<android.media.MediaDrm: boolean isCryptoSchemeSupported(java.util.UUID)> -> _SOURCE_
<android.hardware.location.GeofenceHardwareRequestParcelable: int getNotificationResponsiveness()> -> _SOURCE_
<android.media.AudioManager: java.util.List getAudioVolumeGroups()> -> _SOURCE_
<com.android.internal.telephony.gsm.SmsBroadcastConfigInfo: int getFromServiceId()> -> _SOURCE_
<android.view.KeyboardShortcutGroup: boolean isSystemGroup()> -> _SOURCE_
<android.os.Bundle: char getChar(java.lang.String)> -> _SOURCE_
<android.media.AudioRecordingConfiguration: java.util.List getClientEffects()> -> _SOURCE_
<android.text.format.DateFormat: java.lang.CharSequence format(java.lang.CharSequence,java.util.Date)> -> _SOURCE_
<android.metrics.LogMaker: long getTimestamp()> -> _SOURCE_
<android.app.ApplicationPackageManager: android.content.pm.ProviderInfo resolveContentProvider(java.lang.String,int)> -> _SOURCE_
<android.view.ViewGroup: android.view.View findViewByAccessibilityIdTraversal(int)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: android.os.BatteryStats$Timer getAggregatedPartialWakelockTimer()> -> _SOURCE_
<android.os.incremental.IncrementalManager: boolean isIncrementalPath(java.lang.String)> -> _SOURCE_
<android.media.AudioSystem: java.lang.String forceUseUsageToString(int)> -> _SOURCE_
<android.app.ActivityManager$RunningAppProcessInfo: int importanceToProcState(int)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isUninstallBlocked(android.content.ComponentName,java.lang.String)> -> _SOURCE_
<android.text.format.Formatter: java.lang.String formatShortElapsedTime(android.content.Context,long)> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo$CollectionInfo: int getColumnCount()> -> _SOURCE_
<android.os.SharedMemory: int getSize()> -> _SOURCE_
<java.text.AttributedString: java.text.AttributedCharacterIterator getIterator()> -> _SOURCE_
<android.content.ContentProviderClient: int bulkInsert(android.net.Uri,android.content.ContentValues[])> -> _SOURCE_
<android.service.resolver.ResolverTarget: float getLaunchScore()> -> _SOURCE_
<android.app.NotificationChannel: int getOriginalImportance()> -> _SOURCE_
<android.telephony.data.ApnSetting: java.net.InetAddress getMmsProxyAddress()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: java.lang.String toString()> -> _SOURCE_
<java.net.URLConnection: long getIfModifiedSince()> -> _SOURCE_
<android.app.Activity: android.view.View autofillClientFindViewByAccessibilityIdTraversal(int,int)> -> _SOURCE_
<java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)> -> _SOURCE_
<android.service.notification.ZenPolicy: java.lang.String conversationTypeToString(int)> -> _SOURCE_
<java.net.InetAddress: java.net.InetAddress getLoopbackAddress()> -> _SOURCE_
<android.drm.DrmUtils$ExtendedMetadataParser: java.util.Iterator keyIterator()> -> _SOURCE_
<java.time.LocalDate: int get(java.time.temporal.TemporalField)> -> _SOURCE_
<java.lang.ClassNotFoundException: java.lang.Throwable getCause()> -> _SOURCE_
<android.hardware.face.FaceManager: int getMappedAcquiredInfo(int,int)> -> _SOURCE_
<android.media.session.MediaController: android.app.PendingIntent getSessionActivity()> -> _SOURCE_
<android.telecom.RemoteConnection: int getCallerDisplayNamePresentation()> -> _SOURCE_
<android.telephony.mbms.ServiceInfo: java.util.List getLocales()> -> _SOURCE_
<android.view.inputmethod.CursorAnchorInfo: java.lang.String toString()> -> _SOURCE_
<android.content.pm.LauncherApps$AppUsageLimit: long getUsageRemaining()> -> _SOURCE_
<android.hardware.usb.UsbConfiguration: int getId()> -> _SOURCE_
<android.app.AutomaticZenRule: boolean isModified()> -> _SOURCE_
<android.app.servertransaction.PauseActivityItem: java.lang.String toString()> -> _SOURCE_
<android.app.DirectAction: java.lang.String getId()> -> _SOURCE_
<android.widget.QuickContactBadge: void assignContactFromPhone(java.lang.String,boolean,android.os.Bundle)> -> _SOURCE_
<android.telecom.ParcelableCall: int getProperties()> -> _SOURCE_
<android.hardware.hdmi.HdmiHotplugEvent: boolean isConnected()> -> _SOURCE_
<com.android.internal.inputmethod.MultiClientInputMethodPrivilegedOperations: android.os.IBinder createInputMethodWindowToken(int)> -> _SOURCE_
<android.hardware.display.DisplayManager: android.hardware.display.WifiDisplayStatus getWifiDisplayStatus()> -> _SOURCE_
<android.hardware.display.WifiDisplayStatus: android.hardware.display.WifiDisplay[] getDisplays()> -> _SOURCE_
<android.util.DayOfMonthCursor: int getSelectedMonthOffset()> -> _SOURCE_
<android.content.res.TypedArray: android.content.res.Resources getResources()> -> _SOURCE_
<java.net.URL: java.lang.Object getContent(java.lang.Class[])> -> _SOURCE_
<java.util.Properties: void list(java.io.PrintStream)> -> _SOURCE_
<java.text.DecimalFormat: java.lang.String getPositivePrefix()> -> _SOURCE_
<android.os.storage.StorageVolume: java.lang.String getInternalPath()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: int getCurrentFailedPasswordAttempts(int)> -> _SOURCE_
<android.renderscript.ProgramRaster: android.renderscript.ProgramRaster CULL_FRONT(android.renderscript.RenderScript)> -> _SOURCE_
<java.security.cert.X509CRLEntry: javax.security.auth.x500.X500Principal getCertificateIssuer()> -> _SOURCE_
<android.telephony.ims.ImsCallForwardInfo: java.lang.String toString()> -> _SOURCE_
<com.android.internal.policy.PhoneWindow: android.view.View peekDecorView()> -> _SOURCE_
<java.util.LinkedHashMap: void clear()> -> _SOURCE_
<android.os.StrictMode$ViolationInfo: java.lang.String getStackTrace()> -> _SOURCE_
<android.telephony.CellSignalStrengthLte: int getAsuLevel()> -> _SOURCE_
<android.os.UserManager: int getUserBadgeResId(int)> -> _SOURCE_
<android.media.tv.TvInputInfo$TvInputSettings: void putCustomLabels(android.content.Context,java.util.Map,int)> -> _SOURCE_
<android.view.SurfaceControlViewHost: android.view.IWindow getWindowToken()> -> _SOURCE_
<android.telephony.TelephonyManager: int getDataActivity()> -> _SOURCE_
<android.net.LinkQualityInfo: int getDataSampleDuration()> -> _SOURCE_
<java.time.temporal.ValueRange: boolean isFixed()> -> _SOURCE_
<android.nfc.cardemulation.NfcFCardEmulation: int getMaxNumOfRegisterableSystemCodes()> -> _SOURCE_
<android.content.res.AssetManager: java.io.InputStream openNonAsset(int,java.lang.String)> -> _SOURCE_
<com.android.internal.widget.LockPatternUtils: byte[] getPasswordHistoryHashFactor(com.android.internal.widget.LockscreenCredential,int)> -> _SOURCE_
<android.hardware.radio.RadioManager$FmBandConfig: boolean getTa()> -> _SOURCE_
<android.app.AppOpsManager: void startWatchingActive(java.lang.String[],java.util.concurrent.Executor,android.app.AppOpsManager$OnOpActiveChangedListener)> -> _SOURCE_
<android.print.PrintAttributes$MediaSize: java.lang.String getLabel(android.content.pm.PackageManager)> -> _SOURCE_
<android.media.tv.TvInputManager: android.media.tv.TvInputManager$Hardware acquireTvInputHardware(int,android.media.tv.TvInputManager$HardwareCallback,android.media.tv.TvInputInfo)> -> _SOURCE_
<com.android.internal.app.NetInitiatedActivity: void onClick(android.content.DialogInterface,int)> -> _SOURCE_
<android.content.pm.InstantAppRequestInfo: boolean isRequesterInstantApp()> -> _SOURCE_
<android.hardware.Camera$Parameters: java.lang.String getFocusMode()> -> _SOURCE_
<android.app.ActivityManager$TaskDescription: int getIconResource()> -> _SOURCE_
<android.preference.RingtonePreference: boolean getShowSilent()> -> _SOURCE_
<android.graphics.PointF: java.lang.String toString()> -> _SOURCE_
<android.view.ViewGroup: void onNestedScroll(android.view.View,int,int,int,int)> -> _SOURCE_
<android.net.DhcpResults: java.util.List getRoutes(java.lang.String)> -> _SOURCE_
<android.net.NetworkStats: long getTotalPackets()> -> _SOURCE_
<android.location.LocationManager: void clearTestProviderLocation(java.lang.String)> -> _SOURCE_
<android.app.usage.NetworkStatsManager: void registerNetworkStatsProvider(java.lang.String,android.net.netstats.provider.NetworkStatsProvider)> -> _SOURCE_
<android.util.KeyValueListParser: int size()> -> _SOURCE_
<java.nio.file.Files: java.nio.file.attribute.UserPrincipal getOwner(java.nio.file.Path,java.nio.file.LinkOption[])> -> _SOURCE_
<android.media.MediaCodecInfo$VideoCapabilities: android.util.Range getSupportedFrameRates()> -> _SOURCE_
<java.time.chrono.ThaiBuddhistDate: java.time.chrono.ThaiBuddhistDate now(java.time.ZoneId)> -> _SOURCE_
<android.view.FrameStats: long getStartTimeNano()> -> _SOURCE_
<android.media.MediaRoute2Info: java.lang.CharSequence getDescription()> -> _SOURCE_
<android.net.NetworkPolicyManager$Listener: void onSubscriptionPlansChanged(int,android.telephony.SubscriptionPlan[])> -> _SOURCE_
<android.telephony.PhoneNumberUtils: boolean isPotentialLocalEmergencyNumber(android.content.Context,java.lang.String)> -> _SOURCE_
<android.view.textclassifier.TextLanguage$Request: java.lang.CharSequence getText()> -> _SOURCE_
<android.media.audiofx.LoudnessEnhancer$Settings: java.lang.String toString()> -> _SOURCE_
<java.time.DayOfWeek: java.lang.String getDisplayName(java.time.format.TextStyle,java.util.Locale)> -> _SOURCE_
<android.media.tv.tuner.frontend.DvbtFrontendSettings: int getType()> -> _SOURCE_
<com.android.internal.widget.RecyclerView$LayoutManager: com.android.internal.widget.RecyclerView$LayoutManager$Properties getProperties(android.content.Context,android.util.AttributeSet,int,int)> -> _SOURCE_
<android.app.ApplicationPackageManager: android.content.pm.InstrumentationInfo getInstrumentationInfo(android.content.ComponentName,int)> -> _SOURCE_
<android.telephony.ims.ImsVideoCallProvider: com.android.ims.internal.IImsVideoCallProvider getInterface()> -> _SOURCE_
<android.widget.TableRow: android.widget.LinearLayout$LayoutParams generateLayoutParams(android.util.AttributeSet)> -> _SOURCE_
<android.net.MobileLinkQualityInfo: int getLteCqi()> -> _SOURCE_
<android.app.ApplicationPackageManager: android.content.pm.PermissionGroupInfo getPermissionGroupInfo(java.lang.String,int)> -> _SOURCE_
<android.app.timedetector.TelephonyTimeSuggestion: java.util.List getDebugInfo()> -> _SOURCE_
<android.location.Criteria: boolean isAltitudeRequired()> -> _SOURCE_
<android.app.usage.UsageStatsManager: java.lang.String usageSourceToString(int)> -> _SOURCE_
<com.android.internal.telephony.SmsMessageBase: java.lang.String getMessageBody()> -> _SOURCE_
<android.content.AutofillOptions: java.lang.String toString()> -> _SOURCE_
<android.app.SearchableInfo: android.content.ComponentName getSearchActivity()> -> _SOURCE_
<android.telephony.TelephonyManager: long getPreferredNetworkTypeBitmask()> -> _SOURCE_
<com.android.internal.telephony.gsm.GsmSmsAddress: java.lang.String getAddressString()> -> _SOURCE_
<java.net.Proxy: java.net.SocketAddress address()> -> _SOURCE_
<android.provider.Telephony$CarrierId: android.net.Uri getUriForSubscriptionId(int)> -> _SOURCE_
<android.telephony.ims.stub.ImsUtImplBase: int queryCallForward(int,java.lang.String)> -> _SOURCE_
<java.util.Date: int getMinutes()> -> _SOURCE_
<android.telecom.DefaultDialerManager: java.util.List getInstalledDialerApplications(android.content.Context,int)> -> _SOURCE_
<android.view.WindowManager$LayoutParams: void dumpDebug(android.util.proto.ProtoOutputStream,long)> -> _SOURCE_
<android.widget.CursorTreeAdapter: void notifyDataSetInvalidated()> -> _SOURCE_
<android.content.ClipDescription: java.lang.String getMimeType(int)> -> _SOURCE_
<android.hardware.radio.RadioManager$ModuleProperties: java.lang.String getImplementor()> -> _SOURCE_
<android.location.LocationManager: java.util.List getAllProviders()> -> _SOURCE_
<java.lang.String: java.lang.String valueOf(long)> -> _SOURCE_
<android.telecom.Log: java.lang.String getPackageAbbreviation(java.lang.String)> -> _SOURCE_
<android.telephony.NetworkRegistrationInfo: int getAccessNetworkTechnology()> -> _SOURCE_
<android.os.connectivity.WifiBatteryStats: long getRxTimeMillis()> -> _SOURCE_
<android.telecom.ConnectionService: void onCreateOutgoingConnectionFailed(android.telecom.PhoneAccountHandle,android.telecom.ConnectionRequest)> -> _SOURCE_
<java.time.LocalTime: java.time.LocalTime now()> -> _SOURCE_
<android.view.Window: java.util.List getSystemGestureExclusionRects()> -> _SOURCE_
<android.content.pm.InstantAppInfo: android.content.pm.ApplicationInfo getApplicationInfo()> -> _SOURCE_
<android.app.AppOpsManager$HistoricalOps: int getUidCount()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.util.List getAllIntentFilters(java.lang.String)> -> _SOURCE_
<android.media.audiofx.Equalizer: int[] getBandFreqRange(short)> -> _SOURCE_
<android.net.LinkProperties: boolean hasIpv6DnsServer()> -> _SOURCE_
<android.hardware.camera2.marshal.Marshaler: android.hardware.camera2.utils.TypeReference getTypeReference()> -> _SOURCE_
<android.drm.DrmSupportInfo: java.util.Iterator getFileSuffixIterator()> -> _SOURCE_
<android.view.textclassifier.TextClassifierEvent: android.view.textclassifier.TextClassificationContext getEventContext()> -> _SOURCE_
<android.nfc.NfcAdapter: void setNdefPushMessageCallback(android.nfc.NfcAdapter$CreateNdefMessageCallback,android.app.Activity,int)> -> _SOURCE_
<android.media.AudioManager: boolean isStreamAffectedByMute(int)> -> _SOURCE_
<android.transition.VisibilityPropagation: java.lang.String[] getPropagationProperties()> -> _SOURCE_
<android.media.tv.tuner.frontend.DvbtFrontendSettings: int getPlpGroupId()> -> _SOURCE_
<android.telephony.NetworkRegistrationInfo: boolean isRegistered()> -> _SOURCE_
<android.hardware.radio.RadioManager$ProgramInfo: int getSignalStrength()> -> _SOURCE_
<android.service.carrier.CarrierIdentifier: java.lang.String getMnc()> -> _SOURCE_
<android.app.ApplicationPackageManager: int getUidForSharedUser(java.lang.String)> -> _SOURCE_
<android.app.timezone.DistroFormatVersion: java.lang.String toString()> -> _SOURCE_
<android.telephony.CellSignalStrengthCdma: int getEvdoAsuLevel()> -> _SOURCE_
<android.telecom.ParcelableCall: int getCapabilities()> -> _SOURCE_
<android.service.contentcapture.SnapshotData: android.app.assist.AssistContent getAssistContent()> -> _SOURCE_
<android.app.blob.BlobHandle: java.lang.String toString()> -> _SOURCE_
<android.renderscript.Type: boolean hasFaces()> -> _SOURCE_
<android.app.ActivityOptions: int getLaunchTaskId()> -> _SOURCE_
<android.hardware.camera2.utils.SurfaceUtils: int getSurfaceDataspace(android.view.Surface)> -> _SOURCE_
<android.os.Parcel: java.lang.String[] createString8Array()> -> _SOURCE_
<android.view.textclassifier.TextLinks$TextLinkSpan: java.lang.String getUrl()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$ControllerActivityCounterImpl: com.android.internal.os.BatteryStatsImpl$LongSamplingCounter[] getTxTimeCounters()> -> _SOURCE_
<android.transition.PatternPathMotion: android.graphics.Path getPatternPath()> -> _SOURCE_
<android.media.tv.tuner.frontend.Isdbs3FrontendSettings: android.media.tv.tuner.frontend.Isdbs3FrontendSettings$Builder builder()> -> _SOURCE_
<android.hardware.display.ColorDisplayManager: boolean isSaturationActivated()> -> _SOURCE_
<java.util.concurrent.Semaphore: int getQueueLength()> -> _SOURCE_
<android.app.ActivityOptions: android.os.IRemoteCallback getAnimationStartedListener()> -> _SOURCE_
<android.content.pm.ActivityInfo: boolean isFixedOrientation()> -> _SOURCE_
<android.content.pm.Signature: byte[] toByteArray()> -> _SOURCE_
<android.telephony.TelephonyManager: java.util.List getTelephonyHistograms()> -> _SOURCE_
<android.telephony.mbms.MbmsDownloadSessionCallback: void onMiddlewareReady()> -> _SOURCE_
<java.util.concurrent.locks.AbstractQueuedSynchronizer: int getQueueLength()> -> _SOURCE_
<android.net.ConnectivityManager: java.lang.String getAlwaysOnVpnPackageForUser(int)> -> _SOURCE_
<android.location.GnssClock: java.lang.String toString()> -> _SOURCE_
<android.service.voice.VoiceInteractionSession$AssistState: android.os.Bundle getAssistData()> -> _SOURCE_
<android.os.image.DynamicSystemManager: boolean isInstalled()> -> _SOURCE_
<android.timezone.CountryTimeZones: boolean matchesCountryCode(java.lang.String)> -> _SOURCE_
<android.net.wifi.nl80211.PnoNetwork: byte[] getSsid()> -> _SOURCE_
<android.telephony.CbGeoUtils: java.util.List parseGeometriesFromString(java.lang.String)> -> _SOURCE_
<com.android.ims.internal.uce.presence.PresSipResponse: void setSipResponseCode(int)> -> _SOURCE_
<android.os.Build$Partition: java.lang.String getFingerprint()> -> _SOURCE_
<android.util.KeyValueListParser$IntValue: void parse(android.util.KeyValueListParser)> -> _SOURCE_
<android.view.View: boolean getFitsSystemWindows()> -> _SOURCE_
<android.hardware.camera2.impl.CameraOfflineSessionImpl: boolean isReprocessable()> -> _SOURCE_
<android.media.MediaRouter2Manager: java.util.List getAllRoutes()> -> _SOURCE_
<android.media.tv.tuner.frontend.DvbtFrontendSettings: boolean isMiso()> -> _SOURCE_
<android.net.wifi.nl80211.WifiNl80211Manager: android.net.wifi.nl80211.DeviceWiphyCapabilities getDeviceWiphyCapabilities(java.lang.String)> -> _SOURCE_
<android.media.audiopolicy.AudioVolumeGroup: java.util.List getAudioAttributes()> -> _SOURCE_
<android.text.util.Rfc822Tokenizer: int findTokenEnd(java.lang.CharSequence,int)> -> _SOURCE_
<android.app.job.JobInfo$Builder: android.app.job.JobInfo build()> -> _SOURCE_
<android.provider.DocumentsProvider: android.provider.DocumentsContract$Path findDocumentPath(java.lang.String,java.lang.String)> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec: int getUserAuthenticationType()> -> _SOURCE_
<android.telephony.UiccAccessRule: java.lang.String getCertificateHexString()> -> _SOURCE_
<android.content.pm.ShortcutInfo$Builder: android.content.pm.ShortcutInfo$Builder setText(java.lang.CharSequence)> -> _SOURCE_
<com.android.ims.internal.uce.options.OptionsSipResponse: int getSipResponseCode()> -> _SOURCE_
<java.io.ObjectStreamField: boolean isUnshared()> -> _SOURCE_
<android.app.UiAutomation: java.lang.String toString()> -> _SOURCE_
<android.os.BasicShellCommandHandler: java.io.FileDescriptor getErrFileDescriptor()> -> _SOURCE_
<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(java.lang.CharSequence)> -> _SOURCE_
<android.widget.RadioGroup: android.widget.RadioGroup$LayoutParams generateLayoutParams(android.util.AttributeSet)> -> _SOURCE_
<java.net.Inet4Address: boolean isLoopbackAddress()> -> _SOURCE_
<android.preference.PreferenceFragment: android.widget.ListView getListView()> -> _SOURCE_
<android.telephony.ims.feature.MmTelFeature$Listener: void onRejectedCall(android.telephony.ims.ImsCallProfile,android.telephony.ims.ImsReasonInfo)> -> _SOURCE_
<android.nfc.tech.MifareUltralight: int getType()> -> _SOURCE_
<android.os.PersistableBundle: android.os.PersistableBundle restoreFromXml(org.xmlpull.v1.XmlPullParser)> -> _SOURCE_
<android.telecom.CallScreeningService$CallResponse: boolean getSkipNotification()> -> _SOURCE_
<android.nfc.tech.Ndef: java.lang.String getType()> -> _SOURCE_
<android.bluetooth.BluetoothHeadset: boolean startScoUsingVirtualVoiceCall()> -> _SOURCE_
<android.telephony.TelephonyManager: int getVoiceActivationState(int)> -> _SOURCE_
<android.media.AudioDeviceInfo: java.lang.String getAddress()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getSimSerialNumber(int)> -> _SOURCE_
<android.bluetooth.le.ScanSettings: int getMatchMode()> -> _SOURCE_
<android.widget.ScrollBarDrawable: java.lang.String toString()> -> _SOURCE_
<android.content.integrity.AtomicFormula$LongAtomicFormula: java.lang.String toString()> -> _SOURCE_
<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle throwException(java.lang.Class,java.lang.Class)> -> _SOURCE_
<android.os.UserHandle: void writeToParcel(android.os.UserHandle,android.os.Parcel)> -> _SOURCE_
<android.bluetooth.BluetoothCodecConfig: int getChannelMode()> -> _SOURCE_
<javax.net.ssl.HttpsURLConnection: java.security.Principal getLocalPrincipal()> -> _SOURCE_
<android.telephony.CallQuality: int getAverageRelativeJitter()> -> _SOURCE_
<android.telecom.AuthenticatorService$Authenticator: android.os.Bundle confirmCredentials(android.accounts.AccountAuthenticatorResponse,android.accounts.Account,android.os.Bundle)> -> _SOURCE_
<android.telephony.data.DataProfile: boolean isEnabled()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: int getMobileRadioActiveUnknownCount(int)> -> _SOURCE_
<android.appwidget.AppWidgetManager: java.util.List getInstalledProviders()> -> _SOURCE_
<java.time.Instant: java.time.Instant now()> -> _SOURCE_
<android.net.NetworkPolicyManager$Listener: void onSubscriptionOverride(int,int,int)> -> _SOURCE_
<android.telephony.ims.ImsCallSession$Listener: void callSessionTransferred(android.telephony.ims.ImsCallSession)> -> _SOURCE_
<java.util.stream.LongStream: java.util.stream.LongStream$Builder builder()> -> _SOURCE_
<android.os.storage.StorageManager: boolean checkPermissionReadImages(boolean,int,int,java.lang.String,java.lang.String)> -> _SOURCE_
<java.time.ZoneId: java.lang.String toString()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean hasCarrierPrivileges(int)> -> _SOURCE_
<android.app.NotificationManager: java.util.List getNotificationChannelGroups()> -> _SOURCE_
<android.os.StrictMode: boolean vmUntaggedSocketEnabled()> -> _SOURCE_
<android.hardware.soundtrigger.SoundTrigger$ModelParamRange: java.lang.String toString()> -> _SOURCE_
<android.print.PrintJob: android.print.PrintJobInfo getInfo()> -> _SOURCE_
<android.view.VelocityTracker$Estimator: float getXCoeff(int)> -> _SOURCE_
<android.bluetooth.BluetoothA2dpSink: android.bluetooth.BluetoothAudioConfig getAudioConfig(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()> -> _SOURCE_
<android.net.wifi.nl80211.NativeScanResult: long getTsf()> -> _SOURCE_
<android.net.DnsResolver: void query(android.net.Network,java.lang.String,int,int,java.util.concurrent.Executor,android.os.CancellationSignal,android.net.DnsResolver$Callback)> -> _SOURCE_
<android.hardware.camera2.params.LensShadingMap: int getRowCount()> -> _SOURCE_
<android.content.pm.PackageManager: java.lang.String getSystemTextClassifierPackageName()> -> _SOURCE_
<android.content.pm.PackageInfo: boolean isStaticOverlayPackage()> -> _SOURCE_
<com.android.internal.telephony.uicc.IccUtils: java.lang.String cdmaBcdToString(byte[],int,int)> -> _SOURCE_
<android.graphics.fonts.FontFamily: int getSize()> -> _SOURCE_
<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getHighSpeedVideoSizes()> -> _SOURCE_
<android.media.AudioPlaybackCaptureConfiguration$Builder: android.media.AudioPlaybackCaptureConfiguration build()> -> _SOURCE_
<android.media.tv.tuner.frontend.AtscFrontendSettings$Builder: android.media.tv.tuner.frontend.AtscFrontendSettings build()> -> _SOURCE_
<android.telephony.mbms.StreamingService: android.telephony.mbms.InternalStreamingServiceCallback getCallback()> -> _SOURCE_
<android.telephony.SubscriptionInfo: boolean areUiccApplicationsEnabled()> -> _SOURCE_
<java.net.JarURLConnection: java.net.URL getJarFileURL()> -> _SOURCE_
<android.text.SpannableStringBuilder: int getTextWatcherDepth()> -> _SOURCE_
<android.text.FontConfig$Family: android.text.FontConfig$Font[] getFonts()> -> _SOURCE_
<android.app.AppOpsManager$HistoricalPackageOps: android.app.AppOpsManager$HistoricalOp getOp(java.lang.String)> -> _SOURCE_
<android.telephony.TelephonyManager: int getCarrierPrivilegeStatus(int)> -> _SOURCE_
<android.telecom.ParcelableCallAnalytics: boolean isVideoCall()> -> _SOURCE_
<android.media.AudioTrack: boolean isDirectPlaybackSupported(android.media.AudioFormat,android.media.AudioAttributes)> -> _SOURCE_
<android.hardware.camera2.legacy.ParameterUtils: boolean containsSize(java.util.List,int,int)> -> _SOURCE_
<android.content.pm.PackageInstaller: java.util.List getAllSessions()> -> _SOURCE_
<java.text.DecimalFormat: java.util.Currency getCurrency()> -> _SOURCE_
<android.telephony.TelephonyManager: java.util.List getAllCellInfo()> -> _SOURCE_
<android.media.DrmInitData: android.media.DrmInitData$SchemeInitData getSchemeInitDataAt(int)> -> _SOURCE_
<android.app.servertransaction.ActivityRelaunchItem: java.lang.String toString()> -> _SOURCE_
<java.time.ZonedDateTime: java.time.ZonedDateTime now()> -> _SOURCE_
<java.lang.reflect.Executable: java.lang.reflect.Parameter[] getParameters()> -> _SOURCE_
<android.view.textclassifier.TextClassificationContext: java.lang.String toString()> -> _SOURCE_
<android.os.Handler: java.lang.String getMessageName(android.os.Message)> -> _SOURCE_
<android.os.SystemVibrator: int[] areEffectsSupported(int[])> -> _SOURCE_
<android.telephony.SignalStrength: int getAsuLevel()> -> _SOURCE_
<android.location.GpsClock: double getBiasUncertaintyInNs()> -> _SOURCE_
<javax.crypto.spec.RC5ParameterSpec: byte[] getIV()> -> _SOURCE_
<android.provider.ContactsContract$SyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])> -> _SOURCE_
<android.service.autofill.UserData: android.util.ArrayMap getFieldClassificationArgs()> -> _SOURCE_
<android.hardware.location.MemoryRegion: int getCapacityBytes()> -> _SOURCE_
<com.android.internal.telephony.gsm.SmsMessage: int getTPLayerLengthForPDU(java.lang.String)> -> _SOURCE_
<java.util.regex.Pattern: int flags()> -> _SOURCE_
<android.nfc.dta.NfcDta: android.nfc.dta.NfcDta getInstance(android.nfc.NfcAdapter)> -> _SOURCE_
<android.content.pm.LauncherApps$AppUsageLimit: long getTotalUsageLimit()> -> _SOURCE_
<android.telephony.SubscriptionManager: int getDefaultVoiceSubscriptionId()> -> _SOURCE_
<android.os.RecoverySystem: java.lang.String handleAftermath(android.content.Context)> -> _SOURCE_
<android.security.KeyChain: android.security.KeyChain$KeyChainConnection bindAsUser(android.content.Context,android.os.UserHandle)> -> _SOURCE_
<android.app.StatusBarManager$DisableInfo: boolean areAllComponentsDisabled()> -> _SOURCE_
<android.view.Display: java.lang.String getUniqueId()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.util.Set getAlwaysOnVpnLockdownWhitelist(android.content.ComponentName)> -> _SOURCE_
<android.app.NotificationManager: void allowAssistantAdjustment(java.lang.String)> -> _SOURCE_
<android.content.IntentFilter: boolean isVisibleToInstantApp()> -> _SOURCE_
<android.telecom.Phone: android.telecom.CallAudioState getCallAudioState()> -> _SOURCE_
<android.hardware.location.ContextHubInfo: float getPeakMips()> -> _SOURCE_
<android.telephony.ims.feature.MmTelFeature: int shouldProcessCall(java.lang.String[])> -> _SOURCE_
<android.media.MediaRouter2Manager: android.media.MediaRouter2Manager getInstance(android.content.Context)> -> _SOURCE_
<com.android.internal.widget.RecyclerView$State: java.lang.String toString()> -> _SOURCE_
<android.location.GpsMeasurement: double getCodePhaseUncertaintyInChips()> -> _SOURCE_
<android.net.MailTo: java.lang.String getCc()> -> _SOURCE_
<android.media.audiopolicy.AudioPolicy: boolean hasFocusListener()> -> _SOURCE_
<android.bluetooth.BluetoothPbapClient: java.util.List getConnectedDevices()> -> _SOURCE_
<android.location.GpsMeasurement: boolean hasElevationUncertaintyInDeg()> -> _SOURCE_
<android.media.MicrophoneInfo: java.util.List getChannelMapping()> -> _SOURCE_
<android.telephony.mbms.vendor.MbmsDownloadServiceBase: int requestDownloadState(android.telephony.mbms.DownloadRequest,android.telephony.mbms.FileInfo)> -> _SOURCE_
<java.util.concurrent.ForkJoinTask: boolean isCompletedAbnormally()> -> _SOURCE_
<android.telecom.Call$Details: int getCallerNumberVerificationStatus()> -> _SOURCE_
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: java.util.Set getHighSpeedVideoSizes()> -> _SOURCE_
<android.hardware.radio.RadioManager$ProgramInfo: java.util.Map getVendorInfo()> -> _SOURCE_
<android.net.UrlQuerySanitizer: java.util.Set getParameterSet()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: int getPasswordComplexity()> -> _SOURCE_
<android.view.ViewStub: android.view.LayoutInflater getLayoutInflater()> -> _SOURCE_
<android.content.ComponentName: java.lang.String flattenToShortString(android.content.ComponentName)> -> _SOURCE_
<android.view.textclassifier.TextClassificationSessionId: java.lang.String toString()> -> _SOURCE_
<android.telecom.Call$Details: int getCallCapabilities()> -> _SOURCE_
<android.telecom.CallAudioState: java.lang.String toString()> -> _SOURCE_
<android.os.UserManager: boolean isRestrictedProfile()> -> _SOURCE_
<android.view.textclassifier.SelectionEvent: int getSmartEnd()> -> _SOURCE_
<android.telephony.ims.stub.ImsCallSessionImplBase: android.telephony.ims.ImsCallProfile getLocalCallProfile()> -> _SOURCE_
<android.app.NotificationChannelGroup: java.util.List getChannels()> -> _SOURCE_
<android.telecom.RemoteConnection: int getState()> -> _SOURCE_
<android.util.LongArrayQueue: java.lang.String toString()> -> _SOURCE_
<java.security.SecureRandom: byte[] getSeed(int)> -> _SOURCE_
<android.telephony.ServiceState: int getDataRegState()> -> _SOURCE_
<android.util.TimeUtils: java.lang.String formatForLogging(long)> -> _SOURCE_
<android.widget.AbsListView: android.util.SparseBooleanArray getCheckedItemPositions()> -> _SOURCE_
<android.telecom.RemoteConnection$Callback: void onAddressChanged(android.telecom.RemoteConnection,android.net.Uri,int)> -> _SOURCE_
<android.renderscript.Script$LaunchOptions: int getXStart()> -> _SOURCE_
<android.bluetooth.BluetoothHearingAid: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
<android.media.midi.MidiDeviceServer: android.media.midi.MidiReceiver[] getOutputPortReceivers()> -> _SOURCE_
<android.view.autofill.AutofillId: void resetSessionId()> -> _SOURCE_
<android.hardware.location.NanoAppMessage: long getNanoAppId()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isDeviceIdAttestationSupported()> -> _SOURCE_
<android.printservice.PrintServiceInfo: android.content.pm.ResolveInfo getResolveInfo()> -> _SOURCE_
<android.permission.PermissionManager: java.util.Set getAutoRevokeExemptionGrantedPackages()> -> _SOURCE_
<android.media.MediaRouter2Manager$Callback: void onPreferredFeaturesChanged(java.lang.String,java.util.List)> -> _SOURCE_
<android.renderscript.Script$LaunchOptions: int getYStart()> -> _SOURCE_
<android.util.KeyValueListParser$LongValue: long getDefaultValue()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo: int describeContents()> -> _SOURCE_
<android.telecom.CallScreeningService$CallResponse: boolean getDisallowCall()> -> _SOURCE_
<android.content.ContentResolver: int delete(android.net.Uri,java.lang.String,java.lang.String[])> -> _SOURCE_
<android.media.session.MediaSessionManager$RemoteUserInfo: int getPid()> -> _SOURCE_
<android.content.RestrictionEntry: java.lang.String[] getChoiceValues()> -> _SOURCE_
<android.hardware.camera2.params.HighSpeedVideoConfiguration: int getFpsMax()> -> _SOURCE_
<android.net.InvalidPacketException: int getError()> -> _SOURCE_
<android.view.contentcapture.ContentCaptureManager: android.content.ComponentName getServiceComponentName()> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing$BandBase: java.lang.String toString()> -> _SOURCE_
<android.media.tv.tuner.filter.PesSettings: boolean isRaw()> -> _SOURCE_
<android.bluetooth.BluetoothHeadsetClientCall: int getId()> -> _SOURCE_
<android.view.View: android.view.View$OnFocusChangeListener getOnFocusChangeListener()> -> _SOURCE_
<android.app.MediaRouteButton: int getRouteTypes()> -> _SOURCE_
<android.content.IntentSender: android.os.IBinder getWhitelistToken()> -> _SOURCE_
<android.location.GpsMeasurement: byte getPrn()> -> _SOURCE_
<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object clone()> -> _SOURCE_
<android.media.RouteDiscoveryPreference: boolean shouldPerformActiveScan()> -> _SOURCE_
<javax.crypto.KeyGenerator: java.lang.String getAlgorithm()> -> _SOURCE_
<android.os.HidlMemory: android.os.NativeHandle releaseHandle()> -> _SOURCE_
<android.app.ActivityThread$ActivityClientRecord: java.lang.String toString()> -> _SOURCE_
<java.time.ZonedDateTime: java.time.DayOfWeek getDayOfWeek()> -> _SOURCE_
<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)> -> _SOURCE_
<com.android.internal.util.BitUtils: int flagsUpTo(int)> -> _SOURCE_
<android.app.AppOpsManager: void stopWatchingNoted(android.app.AppOpsManager$OnOpNotedListener)> -> _SOURCE_
<android.telecom.Log: java.lang.String getPackageAbbreviation(android.content.ComponentName)> -> _SOURCE_
<android.net.metrics.IpManagerEvent: java.lang.String toString()> -> _SOURCE_
<android.os.Process: boolean isCoreUid(int)> -> _SOURCE_
<android.hardware.usb.UsbManager: void grantPermission(android.hardware.usb.UsbDevice)> -> _SOURCE_
<android.view.ViewGroup: android.view.View findViewByAutofillIdTraversal(int)> -> _SOURCE_
<android.content.pm.ApplicationInfo: java.lang.CharSequence loadDescription(android.content.pm.PackageManager)> -> _SOURCE_
<android.media.MediaRouter$RouteInfo: boolean isConnecting()> -> _SOURCE_
<android.app.ActivityTaskManager: boolean currentUiModeSupportsErrorDialogs(android.content.Context)> -> _SOURCE_
<java.util.ResourceBundle: java.lang.String[] getStringArray(java.lang.String)> -> _SOURCE_
<android.app.DownloadManager: android.database.Cursor query(android.app.DownloadManager$Query)> -> _SOURCE_
<android.hardware.location.ContextHubIntentEvent: int getNanoAppAbortCode()> -> _SOURCE_
<android.widget.ActivityChooserModel: android.content.Intent getIntent()> -> _SOURCE_
<android.telephony.CarrierConfigManager: android.os.PersistableBundle getConfigByComponentForSubId(java.lang.String,int)> -> _SOURCE_
<android.media.MediaCodecList: android.media.MediaCodecInfo[] getCodecInfos()> -> _SOURCE_
<android.content.pm.SharedLibraryInfo: android.content.pm.VersionedPackage getDeclaringPackage()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: int getHighDischargeAmountSinceCharge()> -> _SOURCE_
<android.content.pm.PackageManager: java.lang.CharSequence getHarmfulAppWarning(java.lang.String)> -> _SOURCE_
<android.provider.DocumentsProvider: java.lang.String moveDocument(java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.telephony.ims.ImsSsData: int getResult()> -> _SOURCE_
<android.content.pm.parsing.component.ComponentParseUtils: java.lang.CharSequence getNonLocalizedLabel(android.content.pm.parsing.component.ParsedComponent)> -> _SOURCE_
<android.provider.Telephony$Mms: boolean isEmailAddress(java.lang.String)> -> _SOURCE_
<android.os.storage.VolumeInfo: java.lang.String toString()> -> _SOURCE_
<android.app.usage.UsageEvents$Event: java.lang.String getTaskRootClassName()> -> _SOURCE_
<android.app.PackageInstallObserver: void onPackageInstalled(java.lang.String,int,java.lang.String,android.os.Bundle)> -> _SOURCE_
<android.view.SurfaceControl$DisplayConfig: java.lang.String toString()> -> _SOURCE_
<com.android.internal.telephony.uicc.asn1.Asn1Node: int getEncodedLength()> -> _SOURCE_
<java.net.URISyntaxException: java.lang.String getInput()> -> _SOURCE_
<com.android.internal.telephony.cdma.sms.CdmaSmsAddress: byte[] parseToDtmf(java.lang.String)> -> _SOURCE_
<android.telecom.Call: void mergeConference()> -> _SOURCE_
<android.nfc.NfcAdapter: java.util.List getSupportedOffHostSecureElements()> -> _SOURCE_
<android.hardware.Camera$Parameters: java.util.List getSupportedFlashModes()> -> _SOURCE_
<android.hardware.camera2.CameraCharacteristics: java.util.List getAvailablePhysicalCameraRequestKeys()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: int getStorageEncryptionStatus()> -> _SOURCE_
<android.telephony.CarrierConfigManager: java.lang.String getDefaultCarrierServicePackageName()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: void setLocationEnabled(android.content.ComponentName,boolean)> -> _SOURCE_
<android.telecom.ParcelableCall: java.lang.String getActiveChildCallId()> -> _SOURCE_
<javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String,java.security.Provider)> -> _SOURCE_
<android.media.browse.MediaBrowser: android.os.Bundle getExtras()> -> _SOURCE_
<android.content.Intent: java.io.Serializable getSerializableExtra(java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.gsm.SmsMessage: com.android.internal.telephony.gsm.SmsMessage$SubmitPdu getDeliverPdu(java.lang.String,java.lang.String,java.lang.String,long)> -> _SOURCE_
<android.nfc.tech.IsoDep: byte[] getHistoricalBytes()> -> _SOURCE_
<android.content.pm.PackagePartitions$SystemPartition: boolean containsApp(java.io.File)> -> _SOURCE_
<android.timezone.TelephonyLookup: android.timezone.TelephonyLookup getInstance()> -> _SOURCE_
<com.android.internal.os.ClassLoaderFactory: java.lang.ClassLoader createClassLoader(java.lang.String,java.lang.String,java.lang.String,java.lang.ClassLoader,int,boolean,java.lang.String)> -> _SOURCE_
<android.media.midi.MidiDeviceInfo$PortInfo: int getType()> -> _SOURCE_
<com.android.internal.telephony.SmsMessageBase: java.lang.String getRecipientAddress()> -> _SOURCE_
<com.android.internal.app.procstats.SysMemUsageTable: long[] getTotalMemUsage()> -> _SOURCE_
<com.android.internal.view.StandaloneActionMode: java.lang.CharSequence getTitle()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.util.List getInstalledPackagesAsUser(int,int)> -> _SOURCE_
<android.app.ActivityThread: java.util.Map getActivitiesToBeDestroyed()> -> _SOURCE_
<android.content.ContentProvider: android.content.Context getContext()> -> _SOURCE_
<android.content.pm.ShortcutInfo: int getImplicitRank()> -> _SOURCE_
<android.app.AppOpsManager$AttributedOpEntry: android.app.AppOpsManager$OpEventProxyInfo getLastProxyInfo(int)> -> _SOURCE_
<android.telephony.TelephonyManager: int getNetworkType()> -> _SOURCE_
<android.location.GnssMeasurement: boolean hasSatelliteInterSignalBiasUncertaintyNanos()> -> _SOURCE_
<android.media.audiofx.AudioEffect: android.media.audiofx.AudioEffect$Descriptor getDescriptor()> -> _SOURCE_
<android.widget.SearchView: boolean isQueryRefinementEnabled()> -> _SOURCE_
<android.media.tv.TvInputService: android.media.tv.TvInputService$RecordingSession onCreateRecordingSession(java.lang.String,java.lang.String)> -> _SOURCE_
<java.time.Duration: java.time.Duration ofNanos(long)> -> _SOURCE_
<android.view.FocusFinder: android.view.View findNextKeyboardNavigationCluster(android.view.View,android.view.View,int)> -> _SOURCE_
<android.telephony.TelephonyManager: java.util.Map getEmergencyNumberList(int)> -> _SOURCE_
<com.android.internal.util.EmergencyAffordanceManager: void performEmergencyCall()> -> _SOURCE_
<android.media.AudioRecordingConfiguration: int getClientAudioSessionId()> -> _SOURCE_
<android.content.ContextWrapper: java.io.File getSharedPreferencesPath(java.lang.String)> -> _SOURCE_
<android.os.Environment: java.io.File getDataPreloadsDemoDirectory()> -> _SOURCE_
<android.hardware.location.ContextHubInfo: java.lang.String toString()> -> _SOURCE_
<android.view.View: boolean isHapticFeedbackEnabled()> -> _SOURCE_
<android.location.LocationRequest: int getQuality()> -> _SOURCE_
<android.bluetooth.BluetoothHeadsetClient: int getAudioState(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<android.database.DatabaseUtils: java.lang.String stringForQuery(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String[])> -> _SOURCE_
<android.app.blob.BlobStoreManager: long getRemainingLeaseQuotaBytes()> -> _SOURCE_
<android.media.soundtrigger.SoundTriggerDetectionService: android.os.IBinder onBind(android.content.Intent)> -> _SOURCE_
<android.hardware.display.WifiDisplay: java.lang.String getDeviceName()> -> _SOURCE_
<android.telecom.GatewayInfo: void writeToParcel(android.os.Parcel,int)> -> _SOURCE_
<android.hardware.radio.RadioManager$ModuleProperties: java.lang.String toString()> -> _SOURCE_
<android.hardware.camera2.CaptureRequest$Key: java.lang.String toString()> -> _SOURCE_
<android.window.WindowContainerTransaction: java.util.Map getChanges()> -> _SOURCE_
<android.net.Network: javax.net.SocketFactory getSocketFactory()> -> _SOURCE_
<android.net.Ikev2VpnProfile: android.net.ProxyInfo getProxyInfo()> -> _SOURCE_
<android.service.contentcapture.ActivityEvent: java.lang.String toString()> -> _SOURCE_
<java.time.chrono.MinguoChronology: java.lang.String getCalendarType()> -> _SOURCE_
<android.media.tv.tuner.dvr.DvrSettings: long getPacketSize()> -> _SOURCE_
<android.print.PrintManager: android.print.PrinterDiscoverySession createPrinterDiscoverySession()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean getScreenCaptureDisabled(android.content.ComponentName,int)> -> _SOURCE_
<com.android.internal.util.CallbackRegistry: java.util.ArrayList copyListeners()> -> _SOURCE_
<android.net.TrafficStats: long getLoopbackTxBytes()> -> _SOURCE_
<java.security.AlgorithmParameters: java.security.Provider getProvider()> -> _SOURCE_
<android.telecom.RemoteConnection: int getConnectionCapabilities()> -> _SOURCE_
<android.media.MediaPlayer$TrackInfo: int getTrackType()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: void installSystemUpdate(android.content.ComponentName,android.net.Uri,java.util.concurrent.Executor,android.app.admin.DevicePolicyManager$InstallSystemUpdateCallback)> -> _SOURCE_
<android.os.Temperature: java.lang.String toString()> -> _SOURCE_
<android.telephony.CarrierConfigManager: android.os.PersistableBundle getConfigForSubId(int)> -> _SOURCE_
<android.content.ContentResolver: java.util.List getOutgoingUriPermissions()> -> _SOURCE_
<android.net.RouteInfo: android.net.RouteInfo selectBestRoute(java.util.Collection,java.net.InetAddress)> -> _SOURCE_
<com.android.ims.internal.uce.presence.PresRlmiInfo: int getSubscriptionExpireTime()> -> _SOURCE_
<android.telephony.MbmsDownloadSession: void requestDownloadState(android.telephony.mbms.DownloadRequest,android.telephony.mbms.FileInfo)> -> _SOURCE_
<android.content.pm.PackageItemInfo: android.graphics.drawable.Drawable loadLogo(android.content.pm.PackageManager)> -> _SOURCE_
<android.timezone.CountryTimeZones$OffsetResult: boolean isOnlyMatch()> -> _SOURCE_
<android.bluetooth.BluetoothHealth: boolean registerSinkAppConfiguration(java.lang.String,int,android.bluetooth.BluetoothHealthCallback)> -> _SOURCE_
<com.android.internal.app.LocaleStore$LocaleInfo: java.lang.String toString()> -> _SOURCE_
<android.os.PowerManager: java.lang.String sleepReasonToString(int)> -> _SOURCE_
<android.text.style.LocaleSpan: android.os.LocaleList getLocales()> -> _SOURCE_
<java.security.DigestInputStream: java.lang.String toString()> -> _SOURCE_
<android.bluetooth.BluetoothGattServerCallback: void onNotificationSent(android.bluetooth.BluetoothDevice,int)> -> _SOURCE_
<android.animation.StateListAnimator$Tuple: int[] getSpecs()> -> _SOURCE_
<android.net.NetworkUtils: java.math.BigInteger routedIPv6AddressCount(java.util.TreeSet)> -> _SOURCE_
<android.bluetooth.BluetoothGattService: java.util.UUID getUuid()> -> _SOURCE_
<android.hardware.hdmi.HdmiDeviceInfo: int getLogicalAddress()> -> _SOURCE_
<android.filterfw.core.NativeFrame: java.lang.String toString()> -> _SOURCE_
<android.os.WorkSource: java.lang.String toString()> -> _SOURCE_
<android.telecom.Connection: void onHold()> -> _SOURCE_
<android.provider.Browser: android.database.Cursor getAllBookmarks(android.content.ContentResolver)> -> _SOURCE_
<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder detectActivityLeaks()> -> _SOURCE_
<android.transition.TransitionListenerAdapter: void onTransitionStart(android.transition.Transition)> -> _SOURCE_
<android.text.DynamicLayout: android.util.ArraySet getBlocksAlwaysNeedToBeRedrawn()> -> _SOURCE_
<android.view.WindowInsets$Type: int navigationBars()> -> _SOURCE_
<java.net.HttpCookie: boolean getDiscard()> -> _SOURCE_
<android.content.LocusId: java.lang.String getId()> -> _SOURCE_
<android.app.RemoteInput: boolean getAllowFreeFormInput()> -> _SOURCE_
<com.android.internal.graphics.palette.Palette$Swatch: java.lang.String toString()> -> _SOURCE_
<android.location.Address: int getMaxAddressLineIndex()> -> _SOURCE_
<android.renderscript.Font: android.renderscript.Font createFromFile(android.renderscript.RenderScript,android.content.res.Resources,java.lang.String,float)> -> _SOURCE_
<android.hardware.usb.UsbInterface: android.hardware.usb.UsbEndpoint getEndpoint(int)> -> _SOURCE_
<android.widget.RemoteViews: boolean startPendingIntent(android.view.View,android.app.PendingIntent,android.util.Pair)> -> _SOURCE_
<android.window.TaskOrganizer: java.util.List getRootTasks(int,int[])> -> _SOURCE_
<com.android.internal.telephony.cdma.SmsMessage: android.telephony.SmsCbMessage parseBroadcastSms(java.lang.String,int,int)> -> _SOURCE_
<android.telephony.ServiceState: int getBitmaskFromString(java.lang.String)> -> _SOURCE_
<android.hardware.radio.RadioManager$FmBandConfig: boolean getStereo()> -> _SOURCE_
<android.provider.Telephony$Mms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[])> -> _SOURCE_
<android.webkit.PluginData: java.util.Map getHeaders()> -> _SOURCE_
<java.util.logging.Handler: java.util.logging.Filter getFilter()> -> _SOURCE_
<java.text.Collator: java.text.Collator getInstance()> -> _SOURCE_
<android.hardware.soundtrigger.KeyphraseEnrollmentInfo: java.lang.String toString()> -> _SOURCE_
<android.app.job.JobInfo: boolean isRequireCharging()> -> _SOURCE_
<javax.crypto.SecretKeyFactory: java.lang.String getAlgorithm()> -> _SOURCE_
<android.nfc.tech.IsoDep: byte[] getHiLayerResponse()> -> _SOURCE_
<java.security.MessageDigest: java.lang.String getAlgorithm()> -> _SOURCE_
<org.xml.sax.SAXParseException: int getColumnNumber()> -> _SOURCE_
<android.os.storage.StorageManager: boolean checkPermissionWriteImages(boolean,int,int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.app.NotificationManager: java.lang.String getNotificationDelegate()> -> _SOURCE_
<android.media.session.MediaSessionManager: boolean isGlobalPriorityActive()> -> _SOURCE_
<android.security.KeyStore: boolean isEmpty(int)> -> _SOURCE_
<android.view.Display: java.lang.String typeToString(int)> -> _SOURCE_
<android.telephony.PhoneNumberUtils: java.lang.String cdmaCheckAndProcessPlusCode(java.lang.String)> -> _SOURCE_
<android.telephony.CarrierConfigManager: void updateConfigForPhoneId(int,java.lang.String)> -> _SOURCE_
<android.widget.TextView$SavedState: java.lang.String toString()> -> _SOURCE_
<java.time.chrono.ChronoLocalDate: java.time.chrono.ChronoLocalDate minus(java.time.temporal.TemporalAmount)> -> _SOURCE_
<android.media.Rating: float getPercentRating()> -> _SOURCE_
<android.media.tv.tuner.frontend.Isdbs3FrontendSettings$Builder: android.media.tv.tuner.frontend.Isdbs3FrontendSettings build()> -> _SOURCE_
<android.app.backup.BackupManager: android.app.backup.RestoreSession beginRestoreSession()> -> _SOURCE_
<android.print.PrinterInfo: java.lang.String toString()> -> _SOURCE_
<android.app.Notification$Builder: java.lang.CharSequence getHeadsUpStatusBarText(boolean)> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isVisualVoicemailEnabled(android.telecom.PhoneAccountHandle)> -> _SOURCE_
<android.security.keystore.recovery.KeyChainSnapshot: java.util.List getWrappedApplicationKeys()> -> _SOURCE_
<android.app.ApplicationLoaders: java.lang.ClassLoader getCachedNonBootclasspathSystemLib(java.lang.String,java.lang.ClassLoader,java.lang.String,java.util.List)> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothClass getBluetoothClass()> -> _SOURCE_
<android.app.NotificationHistory: void poolStringsFromNotifications()> -> _SOURCE_
<android.telecom.CallerInfo: void updateGeoDescription(android.content.Context,java.lang.String)> -> _SOURCE_
<android.provider.Settings: boolean isInSystemServer()> -> _SOURCE_
<android.location.GnssMeasurementCorrections: double getVerticalPositionUncertaintyMeters()> -> _SOURCE_
<android.telecom.PhoneAccountSuggestionService: void onAccountSuggestionRequest(java.lang.String)> -> _SOURCE_
<android.media.MediaCodec: android.media.Image getOutputImage(int)> -> _SOURCE_
<java.security.cert.PKIXCertPathValidatorResult: java.security.cert.TrustAnchor getTrustAnchor()> -> _SOURCE_
<android.content.pm.ShortcutManager: java.util.List getManifestShortcuts()> -> _SOURCE_
<android.media.AudioRecord: android.media.AudioDeviceInfo getPreferredDevice()> -> _SOURCE_
<android.telephony.CellIdentity: int getChannelNumber()> -> _SOURCE_
<android.content.ContextWrapper: java.lang.String getOpPackageName()> -> _SOURCE_
<android.telephony.SubscriptionInfo: android.os.ParcelUuid getGroupUuid()> -> _SOURCE_
<jdk.net.SocketFlow: jdk.net.SocketFlow$Status status()> -> _SOURCE_
<android.provider.Contacts$People: void markAsContacted(android.content.ContentResolver,long)> -> _SOURCE_
<android.os.Debug$MemoryInfo: int getSummaryNativeHeapRss()> -> _SOURCE_
<android.metrics.MetricsReader: android.metrics.LogMaker next()> -> _SOURCE_
<android.widget.DatePicker: boolean getCalendarViewShown()> -> _SOURCE_
<android.telephony.ims.stub.ImsCallSessionImplBase: java.lang.String getCallId()> -> _SOURCE_
<android.widget.Gallery: boolean showContextMenu()> -> _SOURCE_
<android.net.NetworkUtils: long routedIPv4AddressCount(java.util.TreeSet)> -> _SOURCE_
<android.net.wifi.nl80211.PnoNetwork: int[] getFrequenciesMhz()> -> _SOURCE_
<android.view.inputmethod.InputMethodManager: boolean isActive()> -> _SOURCE_
<android.app.ActivityOptions: boolean isReturning()> -> _SOURCE_
<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaFormat getDefaultFormat()> -> _SOURCE_
<android.provider.DocumentsProvider: android.database.Cursor queryRecentDocuments(java.lang.String,java.lang.String[])> -> _SOURCE_
<java.security.KeyStore: java.security.Provider getProvider()> -> _SOURCE_
<android.media.session.PlaybackState: java.lang.String toString()> -> _SOURCE_
<android.media.audiopolicy.AudioPolicy: int getFocusDuckingBehavior()> -> _SOURCE_
<java.security.cert.PolicyQualifierInfo: java.lang.String getPolicyQualifierId()> -> _SOURCE_
<android.animation.LayoutTransition: java.util.List getTransitionListeners()> -> _SOURCE_
<android.location.GnssClock: boolean hasReferenceCarrierFrequencyHzForIsb()> -> _SOURCE_
<java.beans.PropertyChangeEvent: java.lang.Object getOldValue()> -> _SOURCE_
<java.util.logging.Logger: java.util.logging.Filter getFilter()> -> _SOURCE_
<com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException: int getTag()> -> _SOURCE_
<java.nio.charset.CoderResult: void throwException()> -> _SOURCE_
<android.widget.DatePicker: long getMaxDate()> -> _SOURCE_
<android.media.MediaMetadata$Builder: android.media.MediaMetadata build()> -> _SOURCE_
<android.security.net.config.NetworkSecurityTrustManager: void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String,java.net.Socket)> -> _SOURCE_
<java.net.Inet6Address: boolean isAnyLocalAddress()> -> _SOURCE_
<android.media.MediaCodecInfo$AudioCapabilities: android.util.Range getBitrateRange()> -> _SOURCE_
<android.media.tv.tuner.frontend.FrontendStatus: boolean[] getLayerErrors()> -> _SOURCE_
<android.telecom.TelecomManager: boolean isOutgoingCallPermitted(android.telecom.PhoneAccountHandle)> -> _SOURCE_
<android.widget.DateTimeView: boolean isShowRelativeTime()> -> _SOURCE_
<com.android.internal.os.PowerProfile: double getBatteryCapacity()> -> _SOURCE_
<android.telephony.IccOpenLogicalChannelResponse: int getChannel()> -> _SOURCE_
<java.util.IllegalFormatConversionException: java.lang.Class getArgumentClass()> -> _SOURCE_
<android.telecom.ParcelableConnection: int getConnectionCapabilities()> -> _SOURCE_
<java.security.cert.PKIXParameters: void setTrustAnchors(java.util.Set)> -> _SOURCE_
<android.view.ViewConfiguration: int getKeyRepeatDelay()> -> _SOURCE_
<android.telephony.ims.feature.CapabilityChangeRequest$CapabilityPair: int getRadioTech()> -> _SOURCE_
<java.lang.Package: boolean isAnnotationPresent(java.lang.Class)> -> _SOURCE_
<android.os.Binder: int getCallingUidOrThrow()> -> _SOURCE_
<android.os.health.HealthStats: int getTimerCount(int)> -> _SOURCE_
<java.lang.reflect.Executable: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()> -> _SOURCE_
<android.app.assist.AssistStructure$ViewNode: int getInputType()> -> _SOURCE_
<android.net.VpnService$Builder: android.net.VpnService$Builder addDnsServer(java.lang.String)> -> _SOURCE_
<android.telephony.cdma.CdmaSmsCbProgramData: int getOperation()> -> _SOURCE_
<android.view.contentcapture.ContentCaptureEvent: long getEventTime()> -> _SOURCE_
<android.telecom.DisconnectCause: java.lang.String getReason()> -> _SOURCE_
<com.android.internal.content.om.OverlayScanner$ParsedOverlayInfo: java.lang.String toString()> -> _SOURCE_
<android.media.AudioSystem: boolean isSingleVolume(android.content.Context)> -> _SOURCE_
<android.view.textclassifier.TextClassification$Request$Builder: android.view.textclassifier.TextClassification$Request build()> -> _SOURCE_
<android.app.AppOpsManager$HistoricalOps: long getBeginTimeMillis()> -> _SOURCE_
<android.media.RingtoneManager: int getRingtonePosition(android.net.Uri)> -> _SOURCE_
<android.webkit.URLUtil: boolean isHttpUrl(java.lang.String)> -> _SOURCE_
<android.telecom.Call: void splitFromConference()> -> _SOURCE_
<android.telephony.TelephonyManager: int getNetworkSelectionMode()> -> _SOURCE_
<android.text.style.TtsSpan$ElectronicBuilder: android.text.style.TtsSpan$ElectronicBuilder setPassword(java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.SmsMessageBase: java.lang.String getDisplayMessageBody()> -> _SOURCE_
<android.service.notification.NotificationListenerService$Ranking: boolean isBubble()> -> _SOURCE_
<android.net.Ikev2VpnProfile: java.security.PrivateKey getRsaPrivateKey()> -> _SOURCE_
<java.nio.channels.SocketChannel: long write(java.nio.ByteBuffer[])> -> _SOURCE_
<android.net.NetworkRequest$Builder: android.net.NetworkRequest$Builder setLinkUpstreamBandwidthKbps(int)> -> _SOURCE_
<android.net.LinkQualityInfo: long getPacketCount()> -> _SOURCE_
<android.telephony.cdma.CdmaSmsCbProgramData: java.lang.String getCategoryName()> -> _SOURCE_
<android.telephony.data.DataCallResponse: int getSuggestedRetryTime()> -> _SOURCE_
<android.app.ActivityTaskManager: void clearLaunchParamsForPackages(java.util.List)> -> _SOURCE_
<android.view.textclassifier.TextClassifierEvent: int getEventIndex()> -> _SOURCE_
<android.view.Display: java.lang.String stateToString(int)> -> _SOURCE_
<android.widget.DatePicker: int getAutofillType()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv: int getLaunches(int)> -> _SOURCE_
<android.os.ServiceManager: android.os.IBinder checkService(java.lang.String)> -> _SOURCE_
<android.app.ActivityManager$TaskSnapshot: int getOrientation()> -> _SOURCE_
<java.nio.file.attribute.PosixFilePermissions: java.lang.String toString(java.util.Set)> -> _SOURCE_
<android.app.admin.PasswordMetrics: android.app.admin.PasswordMetrics merge(java.util.List)> -> _SOURCE_
<android.os.UserHandle: int getIdentifier()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: int getPhoneSignalStrengthCount(int,int)> -> _SOURCE_
<android.app.timedetector.TelephonyTimeSuggestion: void addDebugInfo(java.lang.String)> -> _SOURCE_
<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)> -> _SOURCE_
<android.hardware.location.NanoAppInstanceInfo: java.lang.String toString()> -> _SOURCE_
<android.telephony.cdma.CdmaCellLocation: int getBaseStationLongitude()> -> _SOURCE_
<android.media.AudioPresentation: boolean hasSpokenSubtitles()> -> _SOURCE_
<android.widget.ActivityChooserView: void setActivityChooserModel(android.widget.ActivityChooserModel)> -> _SOURCE_
<android.drm.DrmUtils$ExtendedMetadataParser: java.util.Iterator iterator()> -> _SOURCE_
<android.telephony.ims.compat.stub.ImsConfigImplBase: void getFeatureValue(int,int,com.android.ims.ImsConfigListener)> -> _SOURCE_
<android.os.DropBoxManager$Entry: java.lang.String getTag()> -> _SOURCE_
<java.util.UUID: long getMostSignificantBits()> -> _SOURCE_
<android.view.View: android.view.View$OnLongClickListener getOnLongClickListener()> -> _SOURCE_
<android.security.keystore.AttestationUtils: android.security.keymaster.KeymasterArguments prepareAttestationArguments(android.content.Context,int[],byte[])> -> _SOURCE_
<android.app.timezonedetector.ManualTimeZoneSuggestion: android.app.timezonedetector.ManualTimeZoneSuggestion parseCommandLineArg(android.os.ShellCommand)> -> _SOURCE_
<android.telecom.RemoteConnection: int getConnectionProperties()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: int getNumConnectivityChange(int)> -> _SOURCE_
<android.telephony.CallForwardingInfo: int getReason()> -> _SOURCE_
<android.window.TaskOrganizerTaskEmbedder: int getId()> -> _SOURCE_
<android.inputmethodservice.InputMethodService: void onBindInput()> -> _SOURCE_
<android.hardware.camera2.legacy.RequestHandlerThread: android.os.Handler getHandler()> -> _SOURCE_
<android.telephony.data.DataCallResponse: java.util.List getGatewayAddresses()> -> _SOURCE_
<android.app.role.RoleControllerManager: void onClearRoleHolders(java.lang.String,int,android.os.RemoteCallback)> -> _SOURCE_
<java.util.Locale: java.lang.String getDisplayCountry()> -> _SOURCE_
<android.media.AudioDevicePort: java.lang.String address()> -> _SOURCE_
<android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildQuery(java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.renderscript.Allocation: android.renderscript.Type getType()> -> _SOURCE_
<java.security.KeyStore$PasswordProtection: boolean isDestroyed()> -> _SOURCE_
<android.telephony.ims.ImsReasonInfo: java.lang.String getExtraMessage()> -> _SOURCE_
<android.content.pm.ShortcutInfo: java.lang.String getIconResName()> -> _SOURCE_
<android.net.NetworkTemplate: android.net.NetworkTemplate buildTemplateEthernet()> -> _SOURCE_
<javax.net.ssl.SSLParameters: java.security.AlgorithmConstraints getAlgorithmConstraints()> -> _SOURCE_
<android.net.http.SslCertificate: java.util.Date getValidNotBeforeDate()> -> _SOURCE_
<android.hardware.hdmi.HdmiSwitchClient: java.util.List getPortInfo()> -> _SOURCE_
<android.permission.PermissionControllerService: void onOneTimePermissionSessionTimeout(java.lang.String)> -> _SOURCE_
<android.media.midi.MidiManager$DeviceCallback: void onDeviceRemoved(android.media.midi.MidiDeviceInfo)> -> _SOURCE_
<android.net.NetworkStats$Entry: java.lang.String toString()> -> _SOURCE_
<android.telecom.Connection: android.telecom.AudioState getAudioState()> -> _SOURCE_
<android.location.GnssSingleSatCorrection: boolean hasReflectingPlane()> -> _SOURCE_
<android.app.AppOpsManager$HistoricalUidOps: int getUid()> -> _SOURCE_
<android.telecom.ConnectionRequest: boolean shouldShowIncomingCallUi()> -> _SOURCE_
<android.telephony.CellInfoWcdma: android.telephony.CellSignalStrengthWcdma getCellSignalStrength()> -> _SOURCE_
<java.time.chrono.ChronoZonedDateTime: java.time.chrono.Chronology getChronology()> -> _SOURCE_
<java.security.Signature: java.security.Signature getInstance(java.lang.String,java.lang.String)> -> _SOURCE_
<android.transition.TransitionListenerAdapter: void onTransitionResume(android.transition.Transition)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: void updateMobileRadioState(android.telephony.ModemActivityInfo)> -> _SOURCE_
<android.media.AudioManager: boolean isBluetoothA2dpOn()> -> _SOURCE_
<android.telecom.RemoteConnection$Callback: void onConnectionEvent(android.telecom.RemoteConnection,java.lang.String,android.os.Bundle)> -> _SOURCE_
<java.time.format.DateTimeFormatter: java.lang.String toString()> -> _SOURCE_
<android.app.Notification$Builder: android.widget.RemoteViews createHeadsUpContentView()> -> _SOURCE_
<android.content.RestrictionEntry: java.lang.String getTitle()> -> _SOURCE_
<android.media.JetPlayer: android.media.JetPlayer getJetPlayer()> -> _SOURCE_
<android.content.pm.ShortcutManager: boolean isRequestPinShortcutSupported()> -> _SOURCE_
<android.app.ActivityManager: boolean switchUser(android.os.UserHandle)> -> _SOURCE_
<android.os.Environment: java.io.File getDataDirectory(java.lang.String)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getTelephonyProperty(java.lang.String,java.lang.String)> -> _SOURCE_
<android.os.connectivity.WifiBatteryStats: long getKernelActiveTimeMillis()> -> _SOURCE_
<android.view.MotionEvent: int getHistorySize()> -> _SOURCE_
<java.time.chrono.ThaiBuddhistDate: java.time.chrono.ThaiBuddhistDate now()> -> _SOURCE_
<android.text.PrecomputedText: void setSpan(java.lang.Object,int,int,int)> -> _SOURCE_
<android.hardware.camera2.utils.TypeReference: android.hardware.camera2.utils.TypeReference getComponentType()> -> _SOURCE_
<android.hardware.location.NanoApp: int getAppVersion()> -> _SOURCE_
<android.content.ContentProviderOperation: boolean isReadOperation()> -> _SOURCE_
<android.nfc.NdefMessage: android.nfc.NdefRecord[] getRecords()> -> _SOURCE_
<android.content.SyncStats: java.lang.String toString()> -> _SOURCE_
<android.service.voice.AlwaysOnHotwordDetector$EventPayload: android.media.AudioFormat getCaptureAudioFormat()> -> _SOURCE_
<android.os.Looper: java.lang.String toString()> -> _SOURCE_
<android.hardware.radio.ProgramSelector$Identifier: java.lang.String toString()> -> _SOURCE_
<android.graphics.ImageDecoder: android.graphics.ImageDecoder$Source createSource(java.io.File)> -> _SOURCE_
<android.app.role.RoleManager: java.util.List getRoleHolders(java.lang.String)> -> _SOURCE_
<android.view.View: android.graphics.drawable.Drawable getHorizontalScrollbarTrackDrawable()> -> _SOURCE_
<javax.net.ssl.HandshakeCompletedEvent: java.security.Principal getLocalPrincipal()> -> _SOURCE_
<android.content.BroadcastReceiver: android.os.UserHandle getSendingUser()> -> _SOURCE_
<android.view.View: int getScrollBarDefaultDelayBeforeFade()> -> _SOURCE_
<java.util.SimpleTimeZone: int getDSTSavings()> -> _SOURCE_
<android.content.rollback.PackageRollbackInfo: int getRollbackDataPolicy()> -> _SOURCE_
<android.app.Notification$BigPictureStyle: void purgeResources()> -> _SOURCE_
<android.app.NotificationChannel: boolean isDemoted()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: int getMaximumFailedPasswordsForWipe(android.content.ComponentName)> -> _SOURCE_
<java.security.cert.CertificateFactorySpi: java.security.cert.CertPath engineGenerateCertPath(java.io.InputStream,java.lang.String)> -> _SOURCE_
<java.text.FieldPosition: java.lang.String toString()> -> _SOURCE_
<android.telephony.euicc.EuiccManager: java.util.List getUnsupportedCountries()> -> _SOURCE_
<android.telephony.TelephonyManager: int getCallWaitingStatus()> -> _SOURCE_
<android.mtp.MtpStorageManager: android.mtp.MtpStorageManager$MtpObject getObject(int)> -> _SOURCE_
<android.net.LinkProperties: java.util.List getPcscfServers()> -> _SOURCE_
<android.database.DefaultDatabaseErrorHandler: void onCorruption(android.database.sqlite.SQLiteDatabase)> -> _SOURCE_
<android.webkit.WebViewDelegate: java.lang.String getErrorString(android.content.Context,int)> -> _SOURCE_
<java.util.concurrent.CountedCompleter: java.util.concurrent.CountedCompleter getRoot()> -> _SOURCE_
<android.telephony.NumberVerificationCallback: void onCallReceived(java.lang.String)> -> _SOURCE_
<android.app.StatusBarManager: java.lang.String windowStateToString(int)> -> _SOURCE_
<android.app.ActivityOptions: boolean canTaskOverlayResume()> -> _SOURCE_
<android.net.NetworkPolicy: java.lang.String toString()> -> _SOURCE_
<java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)> -> _SOURCE_
<android.app.ActivityManager: int getPackageScreenCompatMode(java.lang.String)> -> _SOURCE_
<org.xml.sax.InputSource: java.lang.String getPublicId()> -> _SOURCE_
<android.content.integrity.CompoundFormula: java.lang.String toString()> -> _SOURCE_
<javax.security.auth.Subject: java.lang.String toString()> -> _SOURCE_
<java.nio.channels.Pipe$SourceChannel: int validOps()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: java.util.List getAttachedDbs()> -> _SOURCE_
<java.security.Provider: java.lang.String toString()> -> _SOURCE_
<com.android.internal.telephony.cdma.SmsMessage: com.android.internal.telephony.cdma.SmsMessage createFromPdu(byte[])> -> _SOURCE_
<android.provider.Settings$System: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)> -> _SOURCE_
<android.view.ScrollCaptureSession: android.graphics.Point getPositionInWindow()> -> _SOURCE_
<android.net.MailTo: java.lang.String toString()> -> _SOURCE_
<android.print.PrintAttributes$Margins: int getTopMils()> -> _SOURCE_
<android.hardware.face.FaceManager: boolean isHardwareDetected()> -> _SOURCE_
<android.service.textclassifier.TextClassifierService: android.view.textclassifier.TextClassifier getDefaultTextClassifierImplementation(android.content.Context)> -> _SOURCE_
<java.time.temporal.TemporalField: java.lang.String getDisplayName(java.util.Locale)> -> _SOURCE_
<android.provider.CalendarContract$Reminders: android.database.Cursor query(android.content.ContentResolver,long,java.lang.String[])> -> _SOURCE_
<android.net.Ikev2VpnProfile: java.lang.String getUserIdentity()> -> _SOURCE_
<com.android.internal.colorextraction.ColorExtractor$GradientColors: java.lang.String toString()> -> _SOURCE_
<android.view.VelocityTracker: float getYVelocity(int)> -> _SOURCE_
<android.view.KeyEvent: java.lang.String toString()> -> _SOURCE_
<java.security.KeyStore: boolean isCertificateEntry(java.lang.String)> -> _SOURCE_
<android.service.dreams.DreamService: boolean onCreatePanelMenu(int,android.view.Menu)> -> _SOURCE_
<android.telephony.ims.compat.stub.ImsCallSessionImplBase: java.lang.String getCallId()> -> _SOURCE_
<android.os.FileUtils: int translateModePfdToPosix(int)> -> _SOURCE_
<java.time.Year: java.time.Year parse(java.lang.CharSequence)> -> _SOURCE_
<android.content.pm.ComponentInfo: java.lang.CharSequence loadUnsafeLabel(android.content.pm.PackageManager)> -> _SOURCE_
<android.os.Environment: boolean isExternalStorageManager(java.io.File)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: int getPasswordMinimumUpperCase(android.content.ComponentName)> -> _SOURCE_
<android.app.ApplicationPackageManager: android.content.res.Resources getResourcesForApplicationAsUser(java.lang.String,int)> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: java.util.List getActionList()> -> _SOURCE_
<android.service.notification.ZenModeConfig: java.lang.String toString()> -> _SOURCE_
<java.security.Security: java.security.Provider[] getProviders()> -> _SOURCE_
<android.os.TelephonyServiceManager: android.os.TelephonyServiceManager$ServiceRegisterer getOpportunisticNetworkServiceRegisterer()> -> _SOURCE_
<android.util.proto.ProtoStream: java.lang.String getWireTypeString(int)> -> _SOURCE_
<android.net.LinkProperties: boolean isIPv6Provisioned()> -> _SOURCE_
<android.preference.PreferenceDataStore: long getLong(java.lang.String,long)> -> _SOURCE_
<android.telephony.ServiceState: android.telephony.NetworkRegistrationInfo getNetworkRegistrationInfo(int,int)> -> _SOURCE_
<android.app.backup.BackupManager: android.content.ComponentName getCurrentTransportComponent()> -> _SOURCE_
<android.app.ActivityManager: void dumpPackageStateStatic(java.io.FileDescriptor,java.lang.String)> -> _SOURCE_
<android.graphics.drawable.ShapeDrawable: void clearMutated()> -> _SOURCE_
<android.renderscript.Script$LaunchOptions: int getXEnd()> -> _SOURCE_
<android.content.Intent: java.lang.String toUri(int)> -> _SOURCE_
<android.view.InputDevice: int getProductId()> -> _SOURCE_
<android.os.BinderProxy: void dumpProxyDebugInfo()> -> _SOURCE_
<android.app.Instrumentation: android.content.Context getTargetContext()> -> _SOURCE_
<android.telephony.ims.compat.stub.ImsConfigImplBase$ImsConfigStub: void getFeatureValue(int,int,com.android.ims.ImsConfigListener)> -> _SOURCE_
<android.hardware.display.BrightnessConfiguration: android.hardware.display.BrightnessConfiguration loadFromXml(org.xmlpull.v1.XmlPullParser)> -> _SOURCE_
<android.view.textclassifier.SelectionEvent: java.lang.String getPackageName()> -> _SOURCE_
<android.bluetooth.BluetoothHeadsetClient: android.os.Bundle getCurrentAgFeatures(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<android.os.UserManager: int getUserHandle(int)> -> _SOURCE_
<android.app.ActivityOptions: android.window.WindowContainerToken getLaunchTaskDisplayArea()> -> _SOURCE_
<com.android.ims.internal.uce.options.OptionsSipResponse: int getRetryAfter()> -> _SOURCE_
<android.net.Network: int getNetIdForResolv()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isSystemOnlyUser(android.content.ComponentName)> -> _SOURCE_
<java.lang.SecurityManager: boolean getInCheck()> -> _SOURCE_
<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder permitNonSdkApiUsage()> -> _SOURCE_
<android.os.Process: int myPpid()> -> _SOURCE_
<android.util.ArraySet: int size()> -> _SOURCE_
<android.content.res.Resources$Theme: android.graphics.drawable.Drawable getDrawable(int)> -> _SOURCE_
<android.app.usage.UsageEvents$Event: boolean isInstantApp()> -> _SOURCE_
<android.telephony.ims.ImsCallSession$Listener: void callSessionHeld(android.telephony.ims.ImsCallSession,android.telephony.ims.ImsCallProfile)> -> _SOURCE_
<android.location.Criteria: int getPowerRequirement()> -> _SOURCE_
<android.hardware.camera2.legacy.RequestHolder: boolean isRepeating()> -> _SOURCE_
<android.app.ApplicationExitInfo: void setPid(int)> -> _SOURCE_
<com.android.internal.accessibility.AccessibilityShortcutController$ToggleableFrameworkFeatureInfo: java.lang.String getSettingOnValue()> -> _SOURCE_
<android.media.MediaDrm$ProvisionRequest: java.lang.String getDefaultUrl()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean hasGrantedPolicy(android.content.ComponentName,int)> -> _SOURCE_
<android.net.UrlQuerySanitizer: boolean getAllowUnregisteredParamaters()> -> _SOURCE_
<com.android.internal.util.StateMachine: boolean isDbg()> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing$MbcBand: java.lang.String toString()> -> _SOURCE_
<android.os.WorkSource: android.os.WorkSource withoutNames()> -> _SOURCE_
<android.view.WindowInsets$Type: int statusBars()> -> _SOURCE_
<android.media.tv.TvView: void timeShiftPlay(java.lang.String,android.net.Uri)> -> _SOURCE_
<android.net.DhcpResults: java.lang.String toString()> -> _SOURCE_
<android.media.RemoteControlClient: void registerWithSession(android.media.session.MediaSessionLegacyHelper)> -> _SOURCE_
<java.time.MonthDay: java.time.MonthDay now(java.time.Clock)> -> _SOURCE_
<java.util.Date: java.lang.Object clone()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isLogoutEnabled()> -> _SOURCE_
<android.provider.DocumentsContract: android.net.Uri buildChildDocumentsUri(java.lang.String,java.lang.String)> -> _SOURCE_
<android.app.slice.SliceManager: java.util.Collection getSliceDescendants(android.net.Uri)> -> _SOURCE_
<jdk.net.SocketFlow: jdk.net.SocketFlow bandwidth(long)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: long getForegroundTime(int)> -> _SOURCE_
<android.widget.Editor$SelectionModifierCursorController: boolean isDragAcceleratorActive()> -> _SOURCE_
<android.content.BroadcastReceiver$PendingResult: android.os.Bundle getResultExtras(boolean)> -> _SOURCE_
<android.text.style.LocaleSpan: int getSpanTypeIdInternal()> -> _SOURCE_
<android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildUnionSubQuery(java.lang.String,java.lang.String[],java.util.Set,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.location.GpsSatellite: float getSnr()> -> _SOURCE_
<android.net.wifi.nl80211.DeviceWiphyCapabilities: int getMaxNumberRxSpatialStreams()> -> _SOURCE_
<android.app.PendingIntent: java.lang.String toString()> -> _SOURCE_
<com.android.internal.app.ResolverMultiProfilePagerAdapter: com.android.internal.app.ResolverListAdapter getInactiveListAdapter()> -> _SOURCE_
<android.view.ViewDebug: void trace(android.view.View,android.view.ViewDebug$HierarchyTraceType)> -> _SOURCE_
<android.hardware.Sensor: int getMinDelay()> -> _SOURCE_
<android.os.Environment: java.io.File getDataMiscDeDirectory(int)> -> _SOURCE_
<android.app.SearchableInfo: java.lang.String getSuggestIntentData()> -> _SOURCE_
<android.bluetooth.BluetoothActivityEnergyInfo: boolean isValid()> -> _SOURCE_
<java.beans.PropertyChangeEvent: java.lang.Object getNewValue()> -> _SOURCE_
<android.hardware.radio.RadioManager$ModuleProperties: java.lang.String getServiceName()> -> _SOURCE_
<android.view.Window: void requestScrollCapture(android.view.IScrollCaptureController)> -> _SOURCE_
<android.net.lowpan.LowpanInterface: java.lang.String getRole()> -> _SOURCE_
<android.telecom.ParcelableCall: android.net.Uri getHandle()> -> _SOURCE_
<android.webkit.URLUtil: boolean isHttpsUrl(java.lang.String)> -> _SOURCE_
<android.service.notification.NotificationListenerService$Ranking: boolean isSuspended()> -> _SOURCE_
<android.app.ApplicationPackageManager: android.content.ComponentName getInstantAppInstallerComponent()> -> _SOURCE_
<android.view.InputDevice: java.lang.String getName()> -> _SOURCE_
<java.lang.reflect.Method: int getParameterCount()> -> _SOURCE_
<android.drm.DrmRights: java.lang.String getAccountId()> -> _SOURCE_
<android.net.MobileLinkQualityInfo: void setEvdoEcio(int)> -> _SOURCE_
<android.webkit.WebChromeClient: void onPermissionRequestCanceled(android.webkit.PermissionRequest)> -> _SOURCE_
<com.android.internal.util.LocationPermissionChecker: void enforceLocationPermission(java.lang.String,java.lang.String,int,java.lang.String)> -> _SOURCE_
<android.content.pm.PackageItemInfo: android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager)> -> _SOURCE_
<android.content.pm.SELinuxUtil: java.lang.String assignSeinfoUser(android.content.pm.PackageUserState)> -> _SOURCE_
<android.provider.DocumentsContract$Path: java.lang.String getRootId()> -> _SOURCE_
<android.telecom.InCallAdapter: void answerCall(java.lang.String,int)> -> _SOURCE_
<android.net.TrafficStats: long getUidRxPackets(int)> -> _SOURCE_
<android.content.res.AssetFileDescriptor: long getDeclaredLength()> -> _SOURCE_
<android.util.proto.EncodedBuffer: int getWritePos()> -> _SOURCE_
<android.app.Notification$WearableExtender: java.util.List getPages()> -> _SOURCE_
<android.media.midi.MidiDeviceInfo: int getId()> -> _SOURCE_
<java.lang.Class: java.lang.reflect.Method getEnclosingMethod()> -> _SOURCE_
<android.service.notification.NotificationListenerService: void onDestroy()> -> _SOURCE_
<android.telephony.CellIdentityTdscdma: int getCid()> -> _SOURCE_
<android.telephony.mbms.vendor.MbmsDownloadServiceBase: java.util.List listPendingDownloads(int)> -> _SOURCE_
<android.location.GnssCapabilities: boolean hasNavMessages()> -> _SOURCE_
<android.net.RouteInfo: android.net.RouteInfo$RouteKey getRouteKey()> -> _SOURCE_
<com.android.internal.telephony.cdma.SmsMessage: int getNextMessageId()> -> _SOURCE_
<android.telephony.emergency.EmergencyNumber: int getEmergencyNumberSourceBitmask()> -> _SOURCE_
<android.nfc.cardemulation.CardEmulation: android.nfc.cardemulation.CardEmulation getInstance(android.nfc.NfcAdapter)> -> _SOURCE_
<android.content.pm.ShortcutInfo: boolean hasRank()> -> _SOURCE_
<android.telephony.TelephonyManager: int getImsRegTechnologyForMmTel()> -> _SOURCE_
<android.hardware.camera2.params.OutputConfiguration: int getRotation()> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing$Channel: float getInputGain()> -> _SOURCE_
<android.app.admin.PasswordMetrics: int complexityLevelToMinQuality(int)> -> _SOURCE_
<android.permission.PermissionManager: void disablePackageNamePermissionCache()> -> _SOURCE_
<android.media.audiopolicy.AudioProductStrategy: int getId()> -> _SOURCE_
<android.telephony.SubscriptionInfo: int getSubscriptionId()> -> _SOURCE_
<android.inputmethodservice.InputMethodService: android.view.inputmethod.InputBinding getCurrentInputBinding()> -> _SOURCE_
<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder setExtras(android.os.Bundle)> -> _SOURCE_
<java.nio.CharBuffer: boolean hasArray()> -> _SOURCE_
<android.companion.BluetoothLeDeviceFilter: byte[] getRawDataFilter()> -> _SOURCE_
<android.content.pm.SharedLibraryInfo: int getType()> -> _SOURCE_
<android.widget.NumberPicker: boolean getWrapSelectorWheel()> -> _SOURCE_
<android.print.PrintAttributes$Resolution: int getVerticalDpi()> -> _SOURCE_
<android.net.http.X509TrustManagerExtensions: java.util.List checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String,java.lang.String)> -> _SOURCE_
<android.hardware.usb.UsbDevice: int getDeviceClass()> -> _SOURCE_
<com.android.internal.widget.LockPatternUtils: void requireStrongAuth(int,int)> -> _SOURCE_
<android.telephony.MbmsDownloadSession: void requestUpdateFileServices(java.util.List)> -> _SOURCE_
<java.io.DataInputStream: java.lang.String readUTF()> -> _SOURCE_
<android.database.DatabaseUtils$InsertHelper: int getColumnIndex(java.lang.String)> -> _SOURCE_
<android.app.SearchableInfo: boolean queryAfterZeroResults()> -> _SOURCE_
<android.location.GnssClock: long getTimeNanos()> -> _SOURCE_
<com.android.internal.widget.NumericTextView: int getRangeMaximum()> -> _SOURCE_
<android.media.Rating: android.media.Rating newStarRating(int,float)> -> _SOURCE_
<android.service.autofill.augmented.FillRequest: android.content.ComponentName getActivityComponent()> -> _SOURCE_
<java.util.concurrent.atomic.AtomicMarkableReference: boolean isMarked()> -> _SOURCE_
<android.content.res.Resources: int[] getIntArray(int)> -> _SOURCE_
<android.hardware.location.ContextHubInfo: int getStaticSwVersion()> -> _SOURCE_
<android.renderscript.Type: int getYuv()> -> _SOURCE_
<android.view.ViewDebug: long getViewRootImplCount()> -> _SOURCE_
<android.app.WallpaperInfo: java.lang.String getPackageName()> -> _SOURCE_
<android.renderscript.Type: int getCount()> -> _SOURCE_
<android.provider.FontsContract: android.provider.FontsContract$FontInfo[] getFontFromProvider(android.content.Context,android.provider.FontRequest,java.lang.String,android.os.CancellationSignal)> -> _SOURCE_
<android.telephony.TelephonyManager: int getSimCardState()> -> _SOURCE_
<java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getUncaughtExceptionHandler()> -> _SOURCE_
<android.os.UserManager: int[] getEnabledProfileIds(int)> -> _SOURCE_
<android.os.RemoteCallbackList: int getRegisteredCallbackCount()> -> _SOURCE_
<com.android.internal.content.FileSystemProvider: android.database.Cursor queryChildDocuments(java.lang.String,java.lang.String[],java.lang.String)> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: android.graphics.Rect getBoundsInScreen()> -> _SOURCE_
<android.net.netstats.provider.NetworkStatsProvider: void setProviderCallbackBinder(android.net.netstats.provider.INetworkStatsProviderCallback)> -> _SOURCE_
<java.util.Calendar: java.lang.String getCalendarType()> -> _SOURCE_
<android.view.WindowInsets$Side: int all()> -> _SOURCE_
<android.net.ConnectivityManager: int getRestrictBackgroundStatus()> -> _SOURCE_
<java.time.chrono.JapaneseDate: java.time.chrono.JapaneseDate now(java.time.Clock)> -> _SOURCE_
<android.media.MediaTimestamp: long getAnchorMediaTimeUs()> -> _SOURCE_
<java.security.KeyStore: java.lang.String getType()> -> _SOURCE_
<android.telephony.TelephonyManager: void silenceRinger()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isDataCapable()> -> _SOURCE_
<android.view.SurfaceControl: boolean clearContentFrameStats()> -> _SOURCE_
<javax.crypto.spec.RC2ParameterSpec: int getEffectiveKeyBits()> -> _SOURCE_
<android.location.GnssCapabilities: boolean hasGnssAntennaInfo()> -> _SOURCE_
<android.location.Address: boolean hasLatitude()> -> _SOURCE_
<android.app.KeyguardManager: boolean isDeviceSecure()> -> _SOURCE_
<android.telephony.SubscriptionManager: boolean isSubscriptionVisible(android.telephony.SubscriptionInfo)> -> _SOURCE_
<android.accounts.AbstractAccountAuthenticator: android.os.IBinder getIBinder()> -> _SOURCE_
<android.os.health.HealthStats: int getMeasurementsKeyCount()> -> _SOURCE_
<android.telecom.TelecomManager: boolean isInManagedCall()> -> _SOURCE_
<android.telephony.SubscriptionManager: android.telephony.SubscriptionInfo getDefaultVoiceSubscriptionInfo()> -> _SOURCE_
<android.content.ContentResolver: android.net.Uri canonicalize(android.net.Uri)> -> _SOURCE_
<android.media.MediaMetadataRetriever: android.graphics.Bitmap getPrimaryImage(android.media.MediaMetadataRetriever$BitmapParams)> -> _SOURCE_
<android.content.ContextWrapper: boolean isDeviceProtectedStorage()> -> _SOURCE_
<android.service.autofill.SaveInfo: android.service.autofill.CustomDescription getCustomDescription()> -> _SOURCE_
<android.media.tv.tuner.Tuner: android.media.tv.tuner.DemuxCapabilities getDemuxCapabilities()> -> _SOURCE_
<android.accounts.AbstractAccountAuthenticator: android.os.Bundle isCredentialsUpdateSuggested(android.accounts.AccountAuthenticatorResponse,android.accounts.Account,java.lang.String)> -> _SOURCE_
<android.telephony.ims.ImsCallForwardInfo: int getCondition()> -> _SOURCE_
<android.app.ActivityOptions: int getCustomExitResId()> -> _SOURCE_
<android.provider.Contacts$ContactMethods: java.lang.String encodeCustomImProtocol(java.lang.String)> -> _SOURCE_
<android.media.tv.tuner.frontend.Isdbs3FrontendSettings: int getType()> -> _SOURCE_
<android.net.NetworkAgent: void sendNetworkScore(int)> -> _SOURCE_
<android.view.textclassifier.TextSelection$Request: boolean isDarkLaunchAllowed()> -> _SOURCE_
<android.animation.ValueAnimator: java.lang.String toString()> -> _SOURCE_
<android.app.ActivityManager: boolean updateMccMncConfiguration(java.lang.String,java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.gsm.SmsMessage: com.android.internal.telephony.gsm.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,java.lang.String,boolean,byte[])> -> _SOURCE_
<java.util.IntSummaryStatistics: double getAverage()> -> _SOURCE_
<android.webkit.WebViewDelegate: int getPackageId(android.content.res.Resources,java.lang.String)> -> _SOURCE_
<android.telephony.SubscriptionManager: void invalidateDefaultSubIdCaches()> -> _SOURCE_
<android.net.wifi.nl80211.DeviceWiphyCapabilities: boolean isWifiStandardSupported(int)> -> _SOURCE_
<android.hardware.camera2.params.HighSpeedVideoConfiguration: int getBatchSizeMax()> -> _SOURCE_
<android.os.BatteryStats: void dumpLocked(android.content.Context,java.io.PrintWriter,int,int,long)> -> _SOURCE_
<android.text.MeasuredParagraph: android.text.Layout$Directions getDirections(int,int)> -> _SOURCE_
<android.telephony.DataFailCause: java.lang.String toString(int)> -> _SOURCE_
<android.app.WallpaperInfo: android.content.pm.ServiceInfo getServiceInfo()> -> _SOURCE_
<android.media.tv.tuner.dvr.DvrSettings: int getDataFormat()> -> _SOURCE_
<android.media.tv.tuner.frontend.Atsc3FrontendCapabilities: int getPlpCodeRateCapability()> -> _SOURCE_
<android.text.SpannableStringBuilder: android.text.InputFilter[] getFilters()> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: java.util.List getMostRecentlyConnectedDevices()> -> _SOURCE_
<android.location.GpsMeasurement: long getReceivedGpsTowUncertaintyInNs()> -> _SOURCE_
<android.bluetooth.le.ScanFilter$Builder: android.bluetooth.le.ScanFilter$Builder setDeviceAddress(java.lang.String)> -> _SOURCE_
<android.service.euicc.GetDownloadableSubscriptionMetadataResult: android.telephony.euicc.DownloadableSubscription getDownloadableSubscription()> -> _SOURCE_
<android.telephony.PreciseCallState: java.lang.String toString()> -> _SOURCE_
<android.view.textclassifier.SelectionEvent: java.lang.String toString()> -> _SOURCE_
<com.android.internal.inputmethod.InputMethodPrivilegedOperations: void notifyUserAction()> -> _SOURCE_
<java.time.chrono.HijrahDate: java.time.chrono.HijrahDate now()> -> _SOURCE_
<android.os.TelephonyServiceManager: android.os.TelephonyServiceManager$ServiceRegisterer getEuiccControllerService()> -> _SOURCE_
<android.net.MobileLinkQualityInfo: int getEvdoDbm()> -> _SOURCE_
<android.content.ContextWrapper: int getUserId()> -> _SOURCE_
<android.view.ContextThemeWrapper: android.content.res.AssetManager getAssets()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isNetworkRoaming()> -> _SOURCE_
<android.util.TimeUtils: java.lang.String getTimeZoneDatabaseVersion()> -> _SOURCE_
<android.net.lowpan.LowpanInterface: android.net.lowpan.LowpanScanner createScanner()> -> _SOURCE_
<android.app.admin.SystemUpdatePolicy: android.util.Pair getCurrentFreezePeriod(java.time.LocalDate)> -> _SOURCE_
<java.beans.PropertyChangeEvent: java.lang.Object getPropagationId()> -> _SOURCE_
<android.app.admin.ConnectEvent: java.lang.String toString()> -> _SOURCE_
<android.telephony.TelephonyManager: void setSimOperatorNameForPhone(int,java.lang.String)> -> _SOURCE_
<android.media.midi.MidiDeviceService: android.media.midi.MidiReceiver[] getOutputPortReceivers()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.lang.String getServicesSystemSharedLibraryPackageName()> -> _SOURCE_
<android.os.Process: int getParentPid(int)> -> _SOURCE_
<android.telephony.CallQuality: int getCallDuration()> -> _SOURCE_
<android.app.NotificationManager$Policy: boolean showLights()> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec: java.util.Date getKeyValidityStart()> -> _SOURCE_
<android.view.View: boolean hasWindowInsetsAnimationCallback()> -> _SOURCE_
<android.net.wifi.nl80211.PnoSettings: long getIntervalMillis()> -> _SOURCE_
<android.webkit.WebMessagePort$WebMessageCallback: void onMessage(android.webkit.WebMessagePort,android.webkit.WebMessage)> -> _SOURCE_
<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle arrayElementSetter(java.lang.Class)> -> _SOURCE_
<android.content.pm.PackageInstaller$SessionInfo: android.os.UserHandle getUser()> -> _SOURCE_
<android.widget.ImeAwareEditText: android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo)> -> _SOURCE_
<android.app.SearchManager: android.database.Cursor getSuggestions(android.app.SearchableInfo,java.lang.String,int)> -> _SOURCE_
<android.hardware.soundtrigger.SoundTrigger$ModuleProperties: boolean isCaptureTransitionSupported()> -> _SOURCE_
<android.location.GpsClock: java.lang.String toString()> -> _SOURCE_
<android.telephony.ims.compat.ImsService: android.telephony.ims.compat.feature.MMTelFeature onCreateEmergencyMMTelImsFeature(int)> -> _SOURCE_
<android.media.session.MediaSession: java.lang.String getCallingPackage()> -> _SOURCE_
<android.net.Uri: java.lang.String getQueryParameter(java.lang.String)> -> _SOURCE_
<android.content.pm.PackageManager: java.util.List getDeclaredSharedLibraries(java.lang.String,int)> -> _SOURCE_
<android.net.Ikev2VpnProfile: java.util.List getAllowedAlgorithms()> -> _SOURCE_
<java.util.Locale: java.lang.String getDisplayVariant(java.util.Locale)> -> _SOURCE_
<java.util.StringTokenizer: java.lang.Object nextElement()> -> _SOURCE_
<android.app.ActivityOptions: android.os.ResultReceiver getResultReceiver()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.util.List queryContentProviders(java.lang.String,int,int)> -> _SOURCE_
<android.view.MagnificationSpec: java.lang.String toString()> -> _SOURCE_
<java.time.format.DecimalStyle: char getPositiveSign()> -> _SOURCE_
<android.printservice.recommendation.RecommendationInfo: java.lang.CharSequence getPackageName()> -> _SOURCE_
<android.location.LocationManager: java.util.List getProviderPackages(java.lang.String)> -> _SOURCE_
<android.app.timezone.DistroFormatVersion: boolean supports(android.app.timezone.DistroFormatVersion)> -> _SOURCE_
<android.os.Debug: void resetGlobalGcInvocationCount()> -> _SOURCE_
<android.hardware.radio.RadioManager$ModuleProperties: int getNumAudioSources()> -> _SOURCE_
<android.view.Display: int getType()> -> _SOURCE_
<android.media.MicrophoneInfo: int getDirectionality()> -> _SOURCE_
<android.hardware.display.WifiDisplaySessionInfo: java.lang.String toString()> -> _SOURCE_
<android.os.Environment: java.io.File getStorageDirectory()> -> _SOURCE_
<android.renderscript.Allocation: android.view.Surface getSurface()> -> _SOURCE_
<android.telephony.PreciseCallState: int getRingingCallState()> -> _SOURCE_
<android.print.PrinterInfo: int getStatus()> -> _SOURCE_
<android.app.DreamManager: boolean isDreaming()> -> _SOURCE_
<android.telecom.DefaultDialerManager: boolean setDefaultDialerApplication(android.content.Context,java.lang.String,int)> -> _SOURCE_
<android.location.LocationProvider: boolean supportsSpeed()> -> _SOURCE_
<android.content.Intent: java.lang.String getAction()> -> _SOURCE_
<android.telephony.euicc.DownloadableSubscription: java.lang.String getEncodedActivationCode()> -> _SOURCE_
<android.media.session.MediaController: android.media.session.PlaybackState getPlaybackState()> -> _SOURCE_
<android.app.ActivityManager: android.app.IActivityManager getService()> -> _SOURCE_
<android.telecom.Connection: int getConnectionCapabilities()> -> _SOURCE_
<android.content.pm.PackageInstaller$SessionParams: void dump(com.android.internal.util.IndentingPrintWriter)> -> _SOURCE_
<android.bluetooth.BluetoothHearingAid: java.util.List getConnectedDevices()> -> _SOURCE_
<android.view.ViewGroup: void transformPointToViewLocal(float[],android.view.View)> -> _SOURCE_
<android.net.NetworkKey: java.lang.String toString()> -> _SOURCE_
<android.os.Environment: java.io.File getDataPreloadsDirectory()> -> _SOURCE_
<android.telephony.TelephonyManager: int getCallStateForSlot(int)> -> _SOURCE_
<android.content.pm.PackageItemInfo: void dumpDebug(android.util.proto.ProtoOutputStream,long,int)> -> _SOURCE_
<java.util.concurrent.atomic.AtomicInteger: int intValue()> -> _SOURCE_
<android.widget.CursorAdapter: android.database.Cursor getCursor()> -> _SOURCE_
<android.os.Parcel: int getExceptionCode(java.lang.Throwable)> -> _SOURCE_
<android.telecom.ConnectionRequest: android.os.ParcelFileDescriptor getRttPipeToInCall()> -> _SOURCE_
<android.util.MonthDisplayHelper: int getNumberOfDaysInMonth()> -> _SOURCE_
<android.telephony.TelephonyManager: int getSimSpecificCarrierId()> -> _SOURCE_
<android.location.GpsMeasurement: double getAzimuthUncertaintyInDeg()> -> _SOURCE_
<android.service.controls.Control: java.lang.CharSequence getStatusText()> -> _SOURCE_
<android.webkit.WebViewClient: void onPageFinished(android.webkit.WebView,java.lang.String)> -> _SOURCE_
<android.print.PrinterCapabilitiesInfo: int getDuplexModes()> -> _SOURCE_
<android.net.RouteInfo: java.lang.String getInterface()> -> _SOURCE_
<android.content.pm.ShortcutInfo: boolean hasAnyResources()> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: boolean isDiscovering()> -> _SOURCE_
<android.service.carrier.CarrierIdentifier: java.lang.String getImsi()> -> _SOURCE_
<android.service.euicc.GetEuiccProfileInfoListResult: java.util.List getProfiles()> -> _SOURCE_
<android.app.Application$ActivityLifecycleCallbacks: void onActivityPreDestroyed(android.app.Activity)> -> _SOURCE_
<android.hardware.fingerprint.FingerprintManager$AuthenticationResult: int getUserId()> -> _SOURCE_
<android.telephony.SmsCbEtwsInfo: int getWarningType()> -> _SOURCE_
<java.net.HttpURLConnection: java.lang.String getRequestMethod()> -> _SOURCE_
<android.widget.Toast: int getYOffset()> -> _SOURCE_
<android.media.MediaRouter$SimpleCallback: void onRouteUnselected(android.media.MediaRouter,int,android.media.MediaRouter$RouteInfo)> -> _SOURCE_
<android.net.MobileLinkQualityInfo: int getCdmaDbm()> -> _SOURCE_
<android.app.AppOpsManager: android.os.IBinder getClientId()> -> _SOURCE_
<android.hardware.usb.UsbDevice: int getProductId()> -> _SOURCE_
<android.bluetooth.BluetoothCodecStatus: android.bluetooth.BluetoothCodecConfig getCodecConfig()> -> _SOURCE_
<android.view.animation.AnticipateInterpolator: long createNativeInterpolator()> -> _SOURCE_
<android.location.GnssMeasurement: boolean hasSnrInDb()> -> _SOURCE_
<android.media.MediaCas: void forceResourceLost()> -> _SOURCE_
<android.media.MediaFile: int getFileTypeForMimeType(java.lang.String)> -> _SOURCE_
<android.hardware.camera2.impl.CameraMetadataNative: int getEntryCount()> -> _SOURCE_
<android.content.integrity.IntegrityFormula$SourceStamp: android.content.integrity.IntegrityFormula notTrusted()> -> _SOURCE_
<android.graphics.Matrix: void toShortString(java.lang.StringBuilder)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.util.List getPermittedAccessibilityServices(int)> -> _SOURCE_
<android.service.autofill.augmented.FillResponse: java.util.List getInlineSuggestions()> -> _SOURCE_
<android.os.storage.StorageManager: android.os.storage.VolumeInfo findEmulatedForPrivate(android.os.storage.VolumeInfo)> -> _SOURCE_
<com.android.internal.os.ProcessCpuTracker: int getLastIrqTime()> -> _SOURCE_
<android.hardware.usb.UsbDevice: android.hardware.usb.UsbConfiguration getConfiguration(int)> -> _SOURCE_
<android.nfc.NfcAdapter: android.nfc.INfcCardEmulation getCardEmulationService()> -> _SOURCE_
<android.widget.Scroller: int timePassed()> -> _SOURCE_
<android.net.MailTo: java.util.Map getHeaders()> -> _SOURCE_
<android.telephony.CellSignalStrengthNr: int getCsiRsrq()> -> _SOURCE_
<android.view.InputQueue: long getNativePtr()> -> _SOURCE_
<android.text.format.DateFormat: boolean is24HourLocale(java.util.Locale)> -> _SOURCE_
<android.view.contentcapture.ContentCaptureManager: void onActivityResumed()> -> _SOURCE_
<android.net.ConnectivityManager: boolean isNetworkTypeWifi(int)> -> _SOURCE_
<android.media.tv.tuner.frontend.DvbtFrontendSettings: int getPlpId()> -> _SOURCE_
<android.os.ProxyFileDescriptorCallback: long onGetSize()> -> _SOURCE_
<android.view.contentcapture.DataRemovalRequest$Builder: android.view.contentcapture.DataRemovalRequest build()> -> _SOURCE_
<android.media.Metadata: int lastSytemId()> -> _SOURCE_
<android.content.integrity.AtomicFormula$StringAtomicFormula: java.lang.String toString()> -> _SOURCE_
<android.hardware.biometrics.CryptoObject: javax.crypto.Mac getMac()> -> _SOURCE_
<android.hardware.usb.AccessoryFilter: java.lang.String toString()> -> _SOURCE_
<android.os.Broadcaster: void dumpRegistrations()> -> _SOURCE_
<java.security.PrivilegedActionException: java.lang.Exception getException()> -> _SOURCE_
<android.telephony.DisconnectCause: java.lang.String toString(int)> -> _SOURCE_
<android.provider.DocumentsProvider: android.database.Cursor querySearchDocuments(java.lang.String,java.lang.String,java.lang.String[])> -> _SOURCE_
<android.media.AudioAttributes: int getCapturePreset()> -> _SOURCE_
<android.app.assist.AssistStructure$ViewNode: android.view.ViewStructure$HtmlInfo getHtmlInfo()> -> _SOURCE_
<android.bluetooth.BluetoothDevice: boolean fetchUuidsWithSdp()> -> _SOURCE_
<android.os.TestLooperManager: android.os.MessageQueue getQueue()> -> _SOURCE_
<android.media.MediaDrm$CryptoSession: boolean verify(byte[],byte[],byte[])> -> _SOURCE_
<android.content.ContextWrapper: int checkPermission(java.lang.String,int,int,android.os.IBinder)> -> _SOURCE_
<android.os.UserManager: boolean isDemoUser()> -> _SOURCE_
<android.net.http.SslError: android.net.http.SslCertificate getCertificate()> -> _SOURCE_
<android.provider.BrowserContract$SyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)> -> _SOURCE_
<android.app.servertransaction.BaseClientRequest: void postExecute(android.app.ClientTransactionHandler,android.os.IBinder,android.app.servertransaction.PendingTransactionActions)> -> _SOURCE_
<android.app.job.JobParameters: android.os.PersistableBundle getExtras()> -> _SOURCE_
<android.hardware.camera2.CaptureRequest$Builder: android.hardware.camera2.CaptureRequest build()> -> _SOURCE_
<android.media.tv.tuner.frontend.DvbsFrontendSettings: int getStandard()> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing$MbcBand: float getExpanderRatio()> -> _SOURCE_
<android.content.res.Resources: android.graphics.Movie getMovie(int)> -> _SOURCE_
<android.hardware.radio.RadioManager$BandConfig: java.lang.String toString()> -> _SOURCE_
<android.bluetooth.le.ScanFilter: boolean matchesServiceUuids(android.os.ParcelUuid,android.os.ParcelUuid,java.util.List)> -> _SOURCE_
<android.os.BaseBundle: boolean isParcelled()> -> _SOURCE_
<com.android.ims.internal.uce.common.CapInfo: long getCapTimestamp()> -> _SOURCE_
<com.android.ims.internal.uce.options.OptionsSipResponse: int getRequestId()> -> _SOURCE_
<java.util.Objects: java.lang.String toString(java.lang.Object)> -> _SOURCE_
<android.telephony.data.DataProfile: int getMtuV6()> -> _SOURCE_
<android.telephony.SignalStrength: int getLteLevel()> -> _SOURCE_
<android.net.TrafficStats: long getTxBytes(java.lang.String)> -> _SOURCE_
<android.hardware.radio.RadioManager$ModuleProperties: android.hardware.radio.RadioManager$BandDescriptor[] getBands()> -> _SOURCE_
<android.mtp.MtpStorageManager: boolean endCopyObject(android.mtp.MtpStorageManager$MtpObject,boolean)> -> _SOURCE_
<android.app.job.JobInfo: long getMinBackoffMillis()> -> _SOURCE_
<android.nfc.NfcActivityManager: void onActivityDestroyed(android.app.Activity)> -> _SOURCE_
<java.nio.channels.DatagramChannel: int validOps()> -> _SOURCE_
<android.telephony.data.DataProfile: java.lang.String getApn()> -> _SOURCE_
<android.view.inputmethod.InlineSuggestionsRequest: int getMaxSuggestionCount()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String dataStateToString(int)> -> _SOURCE_
<android.media.AudioTrack: boolean isOffloadedPlayback()> -> _SOURCE_
<android.hardware.radio.RadioTuner$Callback: void onMetadataChanged(android.hardware.radio.RadioMetadata)> -> _SOURCE_
<android.sax.RootElement: org.xml.sax.ContentHandler getContentHandler()> -> _SOURCE_
<android.content.pm.dex.DexMetadataHelper: void validateDexPaths(java.lang.String[])> -> _SOURCE_
<android.view.View: boolean willNotDraw()> -> _SOURCE_
<java.text.Collator: java.text.Collator getInstance(java.util.Locale)> -> _SOURCE_
<android.telephony.SignalStrength: long getTimestampMillis()> -> _SOURCE_
<android.telephony.euicc.EuiccNotification: int getSeq()> -> _SOURCE_
<java.util.GregorianCalendar: int getLeastMaximum(int)> -> _SOURCE_
<android.app.ApplicationPackageManager: java.lang.String getSetupWizardPackageName()> -> _SOURCE_
<android.service.notification.ZenPolicy: int getPriorityCategoryCalls()> -> _SOURCE_
<android.app.ActivityManager$TaskSnapshot: int getRotation()> -> _SOURCE_
<android.view.ViewGroup: boolean resolveLayoutDirection()> -> _SOURCE_
<android.widget.Toolbar: boolean isOverflowMenuShowPending()> -> _SOURCE_
<android.os.BatterySaverPolicyConfig$Builder: android.os.BatterySaverPolicyConfig build()> -> _SOURCE_
<android.telephony.TelephonyManager: void refreshUiccProfile()> -> _SOURCE_
<android.content.ContextWrapper: android.content.Context createAttributionContext(java.lang.String)> -> _SOURCE_
<android.media.AudioPort: int[] channelMasks()> -> _SOURCE_
<android.media.AudioDevicePortConfig: android.media.AudioDevicePort port()> -> _SOURCE_
<android.permission.PermissionControllerService: void onRestoreRuntimePermissionsBackup(android.os.UserHandle,java.io.InputStream,java.lang.Runnable)> -> _SOURCE_
<android.content.pm.ApplicationInfo: boolean isInstantApp()> -> _SOURCE_
<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.contentcapture.ViewNode getNode()> -> _SOURCE_
<android.print.PrintAttributes$Builder: android.print.PrintAttributes build()> -> _SOURCE_
<java.time.chrono.ChronoLocalDateTime: java.time.chrono.ChronoLocalDateTime minus(long,java.time.temporal.TemporalUnit)> -> _SOURCE_
<android.telephony.ImsiEncryptionInfo: java.lang.String getMcc()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long getCameraOnTime(long,int)> -> _SOURCE_
<android.content.pm.ShortcutInfo: int getUserId()> -> _SOURCE_
<android.telephony.ims.ImsCallForwardInfo: int getStatus()> -> _SOURCE_
<javax.crypto.spec.DHPublicKeySpec: java.math.BigInteger getY()> -> _SOURCE_
<java.util.Arrays: java.lang.String toString(double[])> -> _SOURCE_
<android.app.admin.DevicePolicyManager: int getMaximumFailedPasswordsForWipe(android.content.ComponentName,int)> -> _SOURCE_
<android.view.View: android.view.ViewRootImpl getViewRootImpl()> -> _SOURCE_
<android.telephony.euicc.EuiccManager: int getOtaStatus()> -> _SOURCE_
<android.telephony.CellSignalStrengthLte: int getLevel()> -> _SOURCE_
<android.os.Messenger: android.os.IBinder getBinder()> -> _SOURCE_
<android.content.ContextWrapper: int getDisplayId()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: boolean needUpgrade(int)> -> _SOURCE_
<android.nfc.cardemulation.NfcFCardEmulation: java.util.List getNfcFServices()> -> _SOURCE_
<android.view.animation.PathInterpolator: long createNativeInterpolator()> -> _SOURCE_
<android.net.NetworkRequest: boolean isBackgroundRequest()> -> _SOURCE_
<android.os.Environment: java.lang.String getExternalStorageState(java.io.File)> -> _SOURCE_
<android.net.NetworkUtils: java.net.InetAddress getNetworkPart(java.net.InetAddress,int)> -> _SOURCE_
<android.debug.PairDevice: java.lang.String getDeviceName()> -> _SOURCE_
<com.android.internal.telephony.cdma.SmsMessage: boolean isMWISetMessage()> -> _SOURCE_
<android.hardware.location.NanoAppBinary: long getNanoAppId()> -> _SOURCE_
<android.telephony.ims.RegistrationManager$RegistrationCallback: void setExecutor(java.util.concurrent.Executor)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long getWifiSignalStrengthTime(int,long,int)> -> _SOURCE_
<android.net.LinkProperties: boolean hasIpv6UnreachableDefaultRoute()> -> _SOURCE_
<android.view.inputmethod.InputConnectionWrapper: void closeConnection()> -> _SOURCE_
<java.lang.reflect.Executable: java.lang.reflect.Type[] getGenericExceptionTypes()> -> _SOURCE_
<java.util.logging.LogRecord: java.util.logging.Level getLevel()> -> _SOURCE_
<android.media.ExifInterface: byte[] getAttributeBytes(java.lang.String)> -> _SOURCE_
<android.mtp.MtpStorageManager: java.util.List getObjects(int,int,int)> -> _SOURCE_
<android.app.DownloadManager: java.lang.String getMimeTypeForDownloadedFile(long)> -> _SOURCE_
<android.provider.DocumentsContract: android.os.Bundle getDocumentMetadata(android.content.ContentResolver,android.net.Uri)> -> _SOURCE_
<android.app.admin.DeviceStateCache: android.app.admin.DeviceStateCache getInstance()> -> _SOURCE_
<android.service.autofill.Dataset: android.service.autofill.Dataset$DatasetFieldFilter getFilter(int)> -> _SOURCE_
<android.app.prediction.AppPredictionContext: java.lang.String getPackageName()> -> _SOURCE_
<android.telephony.ims.feature.MmTelFeature: android.telephony.ims.aidl.IImsMmTelFeature getBinder()> -> _SOURCE_
<android.view.autofill.AutofillPopupWindow: android.view.View getContentView()> -> _SOURCE_
<android.app.NotificationManager: java.util.List getEnabledNotificationListeners(int)> -> _SOURCE_
<android.content.pm.ShortcutInfo: java.lang.CharSequence getText()> -> _SOURCE_
<android.bluetooth.le.ScanResult: int getAdvertisingSid()> -> _SOURCE_
<android.hardware.soundtrigger.SoundTrigger$GenericRecognitionEvent: java.lang.String toString()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean getScreenCaptureDisabled(android.content.ComponentName)> -> _SOURCE_
<android.telephony.CarrierConfigManager: android.os.PersistableBundle getDefaultConfig()> -> _SOURCE_
<android.service.vr.VrListenerService: android.os.IBinder onBind(android.content.Intent)> -> _SOURCE_
<java.util.OptionalLong: java.lang.String toString()> -> _SOURCE_
<android.hardware.camera2.CameraCharacteristics: java.util.Set getPhysicalCameraIds()> -> _SOURCE_
<android.bluetooth.BluetoothActivityEnergyInfo: long getControllerEnergyUsed()> -> _SOURCE_
<android.print.PrinterCapabilitiesInfo: android.print.PrintAttributes$Margins getMinMargins()> -> _SOURCE_
<android.os.Bundle: boolean hasFileDescriptors()> -> _SOURCE_
<android.telecom.Conference: void onAnswer(int)> -> _SOURCE_
<android.os.Environment: java.util.Collection getInternalMediaDirectories()> -> _SOURCE_
<android.hardware.camera2.CameraManager$AvailabilityCallback: void onPhysicalCameraAvailable(java.lang.String,java.lang.String)> -> _SOURCE_
<android.telephony.CbGeoUtils$LatLng: java.lang.String toString()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getMmsUAProfUrl()> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: java.lang.String toString()> -> _SOURCE_
<java.lang.Integer: java.lang.String toUnsignedString(int)> -> _SOURCE_
<android.telephony.data.DataCallResponse: java.util.List getPcscfAddresses()> -> _SOURCE_
<android.app.job.JobParameters: int getJobId()> -> _SOURCE_
<android.telephony.TelephonyManager: int getCurrentPhoneTypeForSlot(int)> -> _SOURCE_
<android.webkit.CacheManager$CacheResult: java.lang.String getLastModified()> -> _SOURCE_
<android.os.WorkSource$WorkChain: java.lang.String[] getTags()> -> _SOURCE_
<android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Object[])> -> _SOURCE_
<android.os.storage.StorageManager: boolean isEncryptable()> -> _SOURCE_
<android.content.SyncRequest: android.accounts.Account getAccount()> -> _SOURCE_
<android.media.MediaDrm: boolean isCryptoSchemeSupported(java.util.UUID,java.lang.String)> -> _SOURCE_
<android.app.AppOpsManager$NoteOpEvent: long getNoteTime()> -> _SOURCE_
<android.drm.DrmInfo: java.lang.String getMimeType()> -> _SOURCE_
<android.hardware.soundtrigger.SoundTrigger$RecognitionEvent: android.media.AudioFormat getCaptureFormat()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$ControllerActivityCounterImpl: com.android.internal.os.BatteryStatsImpl$LongSamplingCounter getPowerCounter()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.util.List getPermittedAccessibilityServices(android.content.ComponentName)> -> _SOURCE_
<android.drm.DrmManagerClient: java.util.Collection getAvailableDrmSupportInfo()> -> _SOURCE_
<android.webkit.WebStorage: void getQuotaForOrigin(java.lang.String,android.webkit.ValueCallback)> -> _SOURCE_
<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$CodecCapabilities createFromProfileLevel(java.lang.String,int,int)> -> _SOURCE_
<android.telephony.ServiceState: boolean isUsingCarrierAggregation()> -> _SOURCE_
<android.media.tv.TvInputInfo: boolean isHardwareInput()> -> _SOURCE_
<android.media.AudioRecord: int getPortId()> -> _SOURCE_
<android.app.blob.BlobInfo: java.lang.String toString()> -> _SOURCE_
<android.content.integrity.AppIntegrityManager: java.lang.String getCurrentRuleSetVersion()> -> _SOURCE_
<android.app.DownloadManager$Request: android.app.DownloadManager$Request setRequiresCharging(boolean)> -> _SOURCE_
<android.net.KeepalivePacketData: byte[] getPacket()> -> _SOURCE_
<android.app.TaskStackListener: void onActivityLaunchOnSecondaryDisplayFailed()> -> _SOURCE_
<java.lang.StringBuilder: java.lang.String toString()> -> _SOURCE_
<android.media.tv.tunerresourcemanager.TunerDescramblerRequest: int getClientId()> -> _SOURCE_
<java.lang.Class: java.lang.ClassLoader getClassLoader()> -> _SOURCE_
<android.hardware.face.FaceManager: java.lang.String getAcquiredString(android.content.Context,int,int)> -> _SOURCE_
<android.app.ActivityManager: android.app.PendingIntent getRunningServiceControlPanel(android.content.ComponentName)> -> _SOURCE_
<android.content.pm.ModuleInfo: java.lang.String getPackageName()> -> _SOURCE_
<android.app.VoiceInteractor$Prompt: java.lang.CharSequence getVisualPrompt()> -> _SOURCE_
<android.media.tv.TvInputManager: android.media.tv.TvInputManager$Hardware acquireTvInputHardware(int,android.media.tv.TvInputInfo,java.lang.String,int,java.util.concurrent.Executor,android.media.tv.TvInputManager$HardwareCallback)> -> _SOURCE_
<java.time.MonthDay: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)> -> _SOURCE_
<android.app.usage.UsageStatsManager: java.util.List queryUsageStats(int,long,long)> -> _SOURCE_
<android.telecom.CallerInfoAsyncQuery: android.telecom.CallerInfoAsyncQuery startQuery(int,android.content.Context,java.lang.String,android.telecom.CallerInfoAsyncQuery$OnQueryCompleteListener,java.lang.Object)> -> _SOURCE_
<com.android.internal.ml.clustering.KMeans$Mean: java.lang.String toString()> -> _SOURCE_
<android.telephony.SubscriptionInfo: int getIconTint()> -> _SOURCE_
<android.app.ActivityManager$TaskDescription: java.lang.String getIconResourcePackage()> -> _SOURCE_
<android.view.contentcapture.ViewNode$ViewStructureImpl: int getTextSelectionStart()> -> _SOURCE_
<android.content.pm.PackageManager: void disableApplicationInfoCache()> -> _SOURCE_
<android.database.CursorToBulkCursorAdaptor: android.database.BulkCursorDescriptor getBulkCursorDescriptor()> -> _SOURCE_
<org.xml.sax.SAXParseException: java.lang.String getSystemId()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: java.util.Map getScreenOffRpmStats()> -> _SOURCE_
<android.telephony.data.ApnSetting: int getProtocolIntFromString(java.lang.String)> -> _SOURCE_
<android.media.AudioRecord: int getRecordingState()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: android.os.BatteryStats$Timer getPhoneSignalScanningTimer()> -> _SOURCE_
<com.android.internal.net.VpnConfig: java.lang.String toString()> -> _SOURCE_
<android.telecom.DisconnectCause: int getTone()> -> _SOURCE_
<android.location.GnssMeasurementsEvent: android.location.GnssClock getClock()> -> _SOURCE_
<android.content.BroadcastReceiver$PendingResult: boolean getAbortBroadcast()> -> _SOURCE_
<android.hardware.Camera$Parameters: java.lang.String getWhiteBalance()> -> _SOURCE_
<android.location.CountryDetector: android.location.Country detectCountry()> -> _SOURCE_
<android.view.textclassifier.TextClassifierEvent$TextSelectionEvent: int getRelativeWordStartIndex()> -> _SOURCE_
<android.media.MediaFile: boolean isPlayListFileType(int)> -> _SOURCE_
<android.printservice.PrintDocument: android.os.ParcelFileDescriptor getData()> -> _SOURCE_
<android.telephony.NetworkScanRequest: android.telephony.RadioAccessSpecifier[] getSpecifiers()> -> _SOURCE_
<android.preference.Preference: java.lang.String toString()> -> _SOURCE_
<com.android.internal.os.BatteryStatsHistory: boolean startIteratingHistory()> -> _SOURCE_
<android.database.Cursor: java.util.List getNotificationUris()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: boolean hasModemActivityReporting()> -> _SOURCE_
<android.hardware.hdmi.HdmiRecordListener$TimerStatusData: boolean isOverlapped()> -> _SOURCE_
<android.media.tv.tuner.filter.DownloadSettings$Builder: android.media.tv.tuner.filter.DownloadSettings build()> -> _SOURCE_
<android.printservice.PrintJob: java.lang.String getAdvancedStringOption(java.lang.String)> -> _SOURCE_
<android.telephony.TelephonyManager: void setNetworkOperatorNumericForPhone(int,java.lang.String)> -> _SOURCE_
<android.bluetooth.BluetoothSap: int getState()> -> _SOURCE_
<android.hardware.display.Curve: java.lang.String toString()> -> _SOURCE_
<android.app.backup.BackupManager: android.os.UserHandle getUserForAncestralSerialNumber(long)> -> _SOURCE_
<java.util.logging.Handler: java.lang.String getEncoding()> -> _SOURCE_
<android.net.Uri: boolean isAbsolute()> -> _SOURCE_
<android.telecom.RemoteConnection: int getVideoState()> -> _SOURCE_
<android.location.GpsMeasurement: short getAccumulatedDeltaRangeState()> -> _SOURCE_
<android.text.method.DigitsKeyListener: android.text.method.DigitsKeyListener getInstance()> -> _SOURCE_
<java.lang.reflect.Executable: int getParameterCount()> -> _SOURCE_
<android.hardware.display.DisplayManager: android.util.Pair getMinimumBrightnessCurve()> -> _SOURCE_
<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getInputSizes(int)> -> _SOURCE_
<android.app.usage.UsageStats: long getLastTimeVisible()> -> _SOURCE_
<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(char)> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: int describeContents()> -> _SOURCE_
<android.app.ActivityOptions: java.util.ArrayList getSharedElementNames()> -> _SOURCE_
<android.service.notification.ZenPolicy$Builder: android.service.notification.ZenPolicy$Builder showAllVisualEffects()> -> _SOURCE_
<android.location.GnssMeasurement: boolean hasCarrierFrequencyHz()> -> _SOURCE_
<android.os.UserHandle: int getCallingAppId()> -> _SOURCE_
<android.webkit.WebSettings: java.lang.String getPluginsPath()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: void uninstallCaCert(android.content.ComponentName,byte[])> -> _SOURCE_
<android.telephony.MbmsStreamingSession: android.telephony.MbmsStreamingSession create(android.content.Context,java.util.concurrent.Executor,android.telephony.mbms.MbmsStreamingSessionCallback)> -> _SOURCE_
<java.util.logging.LogRecord: long getSequenceNumber()> -> _SOURCE_
<android.media.AudioAttributes: int getAllFlags()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$ControllerActivityCounterImpl: com.android.internal.os.BatteryStatsImpl$LongSamplingCounter getRxTimeCounter()> -> _SOURCE_
<java.nio.charset.CharsetDecoder: java.nio.charset.CodingErrorAction malformedInputAction()> -> _SOURCE_
<android.telephony.ims.stub.ImsUtImplBase: int queryCLIR()> -> _SOURCE_
<android.hardware.hdmi.HdmiDeviceInfo: int getDevicePowerStatus()> -> _SOURCE_
<android.provider.Telephony$Sms: java.lang.String getDefaultSmsPackage(android.content.Context)> -> _SOURCE_
<android.app.WallpaperManager: android.app.WallpaperManager getInstance(android.content.Context)> -> _SOURCE_
<android.hardware.hdmi.HdmiRecordSources: android.hardware.hdmi.HdmiRecordSources$ExternalPhysicalAddress ofExternalPhysicalAddress(int)> -> _SOURCE_
<android.service.voice.VoiceInteractionSession$AssistState: boolean isFocused()> -> _SOURCE_
<android.telephony.SmsCbMessage: int getSlotIndex()> -> _SOURCE_
<android.preference.Preference: android.os.Bundle peekExtras()> -> _SOURCE_
<android.bluetooth.BluetoothHeadset: void setAudioRouteAllowed(boolean)> -> _SOURCE_
<android.telephony.PhoneStateListener: void onCarrierNetworkChange(boolean)> -> _SOURCE_
<android.os.BatteryStats: void dumpProtoLocked(android.content.Context,java.io.FileDescriptor,java.util.List,int,long)> -> _SOURCE_
<android.telephony.CellSignalStrengthGsm: int getRssi()> -> _SOURCE_
<android.telephony.LocationAccessPolicy$LocationPermissionQuery$Builder: android.telephony.LocationAccessPolicy$LocationPermissionQuery build()> -> _SOURCE_
<android.content.pm.PackageInstaller$SessionInfo: int getInstallLocation()> -> _SOURCE_
<android.telephony.data.DataCallResponse: int getMtu()> -> _SOURCE_
<android.telecom.CallAudioState: java.util.Collection getSupportedBluetoothDevices()> -> _SOURCE_
<android.app.AlarmManager$AlarmClockInfo: long getTriggerTime()> -> _SOURCE_
<android.service.carrier.CarrierIdentifier: int getSpecificCarrierId()> -> _SOURCE_
<android.media.AudioPresentation: java.util.Locale getLocale()> -> _SOURCE_
<android.hardware.location.GeofenceHardwareMonitorEvent: android.location.Location getLocation()> -> _SOURCE_
<android.os.Bundle: float[] getFloatArray(java.lang.String)> -> _SOURCE_
<android.widget.ViewFlipper: int getFlipInterval()> -> _SOURCE_
<android.nfc.NdefRecord: android.net.Uri toUri()> -> _SOURCE_
<android.content.pm.UserInfo: java.lang.String toFullString()> -> _SOURCE_
<android.view.contentcapture.ContentCaptureEvent: java.lang.String toString()> -> _SOURCE_
<android.view.InputEventSender: void dispose()> -> _SOURCE_
<com.android.internal.logging.testing.UiEventLoggerFake: int eventId(int)> -> _SOURCE_
<android.app.Instrumentation: void startAllocCounting()> -> _SOURCE_
<android.app.Fragment: int getTargetRequestCode()> -> _SOURCE_
<java.net.URISyntaxException: java.lang.String getMessage()> -> _SOURCE_
<android.provider.DocumentsContract: java.lang.String[] getHandledQueryArguments(android.os.Bundle)> -> _SOURCE_
<android.telephony.CellIdentityGsm: int getBsic()> -> _SOURCE_
<com.android.internal.telephony.SmsApplication: boolean isDefaultSmsApplication(android.content.Context,java.lang.String)> -> _SOURCE_
<android.content.PermissionChecker: int checkSelfPermissionForPreflight(android.content.Context,java.lang.String)> -> _SOURCE_
<android.bluetooth.BluetoothGattCharacteristic: java.lang.Integer getIntValue(int,int)> -> _SOURCE_
<android.database.sqlite.SQLiteStatement: int executeUpdateDelete()> -> _SOURCE_
<com.android.internal.widget.RecyclerView$Adapter: boolean hasStableIds()> -> _SOURCE_
<android.telephony.PhoneNumberUtils: boolean isPotentialEmergencyNumber(java.lang.String)> -> _SOURCE_
<android.content.pm.Signature: java.security.PublicKey getPublicKey()> -> _SOURCE_
<android.app.slice.Slice: android.app.slice.SliceSpec getSpec()> -> _SOURCE_
<android.content.IntentFilter: int countActions()> -> _SOURCE_
<android.telephony.CellIdentityWcdma: int getMnc()> -> _SOURCE_
<java.security.spec.DSAPublicKeySpec: java.math.BigInteger getY()> -> _SOURCE_
<android.media.MediaRouter$RouteInfo: java.lang.String toString()> -> _SOURCE_
<android.media.MediaRecorder: int getAudioSourceMax()> -> _SOURCE_
<android.os.BatteryStats$Timer: long getTotalDurationMsLocked(long)> -> _SOURCE_
<android.net.LocalSocket: java.io.FileDescriptor getFileDescriptor()> -> _SOURCE_
<android.telephony.CellSignalStrengthCdma: int getEvdoEcio()> -> _SOURCE_
<android.net.DhcpResults: android.net.StaticIpConfiguration toStaticIpConfiguration()> -> _SOURCE_
<android.app.ApplicationPackageManager: boolean isWirelessConsentModeEnabled()> -> _SOURCE_
<android.service.textservice.SpellCheckerService$Session: java.lang.String getLocale()> -> _SOURCE_
<android.content.Context: android.view.autofill.AutofillManager$AutofillClient getAutofillClient()> -> _SOURCE_
<android.nfc.cardemulation.ApduServiceInfo: java.util.List getAids()> -> _SOURCE_
<android.bluetooth.BluetoothGattCharacteristic: java.util.UUID getUuid()> -> _SOURCE_
<android.os.UserManager: int getUserIconBadgeResId(int)> -> _SOURCE_
<android.security.keystore.KeyInfo: java.util.Date getKeyValidityStart()> -> _SOURCE_
<android.util.Half: java.lang.String toString(short)> -> _SOURCE_
<android.service.autofill.FillEventHistory$Event: java.util.Set getSelectedDatasetIds()> -> _SOURCE_
<android.media.tv.TvInputService$Session: void notifyVideoUnavailable(int)> -> _SOURCE_
<android.os.Debug$MemoryInfo: int getOtherSharedClean(int)> -> _SOURCE_
<android.hardware.biometrics.BiometricAuthenticator: boolean hasEnrolledTemplates()> -> _SOURCE_
<android.hardware.camera2.CameraAccessException: int getReason()> -> _SOURCE_
<android.provider.ContactsContract$Contacts: java.io.InputStream openContactPhotoInputStream(android.content.ContentResolver,android.net.Uri,boolean)> -> _SOURCE_
<android.os.PowerManager: boolean isAmbientDisplayAvailable()> -> _SOURCE_
<android.service.carrier.CarrierMessagingService$SendSmsResult: int getSendStatus()> -> _SOURCE_
<android.media.midi.MidiDeviceInfo: int getType()> -> _SOURCE_
<android.app.ApplicationPackageManager: android.content.pm.VerifierDeviceIdentity getVerifierDeviceIdentity()> -> _SOURCE_
<java.util.concurrent.SynchronousQueue: int size()> -> _SOURCE_
<java.lang.reflect.Parameter: java.lang.reflect.Executable getDeclaringExecutable()> -> _SOURCE_
<android.telephony.CallQuality: int getNumRtpPacketsNotReceived()> -> _SOURCE_
<com.android.internal.os.BatterySipper: void add(com.android.internal.os.BatterySipper)> -> _SOURCE_
<android.app.prediction.AppTargetEvent: android.app.prediction.AppTarget getTarget()> -> _SOURCE_
<android.telecom.Connection: int getState()> -> _SOURCE_
<android.view.DisplayInfo: java.lang.String toString()> -> _SOURCE_
<javax.net.ssl.HttpsURLConnection: javax.net.ssl.HostnameVerifier getDefaultHostnameVerifier()> -> _SOURCE_
<java.io.Console: char[] readPassword()> -> _SOURCE_
<java.lang.reflect.Constructor: java.lang.'annotation'.Annotation[][] getParameterAnnotations()> -> _SOURCE_
<javax.security.auth.Subject: java.util.Set getPrincipals(java.lang.Class)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: int getPermissionGrantState(android.content.ComponentName,java.lang.String,java.lang.String)> -> _SOURCE_
<android.media.MediaDrm: android.media.MediaDrm$Certificate provideCertificateResponse(byte[])> -> _SOURCE_
<android.net.MailTo: java.lang.String getSubject()> -> _SOURCE_
<java.util.regex.Pattern: java.lang.String toString()> -> _SOURCE_
<com.android.internal.policy.PhoneWindow: android.media.session.MediaController getMediaController()> -> _SOURCE_
<javax.security.auth.Subject: java.util.Set getPrivateCredentials(java.lang.Class)> -> _SOURCE_
<com.android.internal.policy.DecorView: android.content.res.Resources getResources()> -> _SOURCE_
<android.os.UserManager: boolean isRestrictedProfile(android.os.UserHandle)> -> _SOURCE_
<android.content.SyncAdapterType: java.lang.String getPackageName()> -> _SOURCE_
<android.telephony.SmsMessage: boolean shouldAppendPageNumberAsPrefix()> -> _SOURCE_
<android.app.servertransaction.StartActivityItem: void writeToParcel(android.os.Parcel,int)> -> _SOURCE_
<com.android.internal.util.FastPrintWriter: void println(char)> -> _SOURCE_
<java.lang.StringBuffer: int lastIndexOf(java.lang.String,int)> -> _SOURCE_
<android.view.DragEvent: com.android.internal.view.IDragAndDropPermissions getDragAndDropPermissions()> -> _SOURCE_
<android.telecom.Conference: int getCallDirection()> -> _SOURCE_
<android.os.MemoryFile: java.io.FileDescriptor getFileDescriptor()> -> _SOURCE_
<android.app.backup.BackupDataInput: int getDataSize()> -> _SOURCE_
<android.telephony.ims.feature.RcsFeature: android.telephony.ims.aidl.IImsRcsFeature getBinder()> -> _SOURCE_
<android.view.ViewConfiguration: int getHoverTooltipShowTimeout()> -> _SOURCE_
<java.lang.reflect.Constructor: int getParameterCount()> -> _SOURCE_
<android.telecom.StatusHints: android.content.ComponentName getPackageName()> -> _SOURCE_
<android.net.NetworkInfo: android.net.NetworkInfo$DetailedState getDetailedState()> -> _SOURCE_
<com.android.server.job.JobSchedulerInternal$JobStorePersistStats: void dumpDebug(android.util.proto.ProtoOutputStream,long)> -> _SOURCE_
<android.view.Display: android.view.DisplayAdjustments getDisplayAdjustments()> -> _SOURCE_
<android.os.connectivity.WifiBatteryStats: long getNumPacketsTx()> -> _SOURCE_
<android.os.Debug: int getThreadAllocSize()> -> _SOURCE_
<android.os.TelephonyServiceManager: android.os.TelephonyServiceManager$ServiceRegisterer getTelephonyRcsMessageServiceRegisterer()> -> _SOURCE_
<android.telecom.TelecomManager: int getCallState()> -> _SOURCE_
<android.view.inputmethod.InputBinding: android.view.inputmethod.InputConnection getConnection()> -> _SOURCE_
<android.telephony.NetworkRegistrationInfo: boolean isInService()> -> _SOURCE_
<com.android.ims.internal.uce.common.CapInfo: boolean isVsDuringCSSupported()> -> _SOURCE_
<android.bluetooth.BluetoothGattServer: int getConnectionState(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<com.android.internal.telephony.uicc.asn1.Asn1Node: long asRawLong()> -> _SOURCE_
<android.os.SystemUpdateManager: android.os.Bundle retrieveSystemUpdateInfo()> -> _SOURCE_
<android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder setSubtypeLocale(java.lang.String)> -> _SOURCE_
<java.text.NumberFormat: boolean isParseIntegerOnly()> -> _SOURCE_
<android.telephony.ims.stub.RcsSipOptionsImplBase: void onCapabilityRequestResponse(int,java.lang.String,android.telephony.ims.RcsContactUceCapability,int)> -> _SOURCE_
<com.android.internal.widget.SimpleItemAnimator: boolean getSupportsChangeAnimations()> -> _SOURCE_
<android.app.backup.BackupManager: int requestBackup(java.lang.String[],android.app.backup.BackupObserver,android.app.backup.BackupManagerMonitor,int)> -> _SOURCE_
<android.os.Environment: java.io.File getDataProfilesDePackageDirectory(int,java.lang.String)> -> _SOURCE_
<android.view.contentcapture.ViewNode: java.lang.String getIdPackage()> -> _SOURCE_
<android.view.contentcapture.ContentCaptureEvent: java.util.List getIds()> -> _SOURCE_
<android.telephony.SubscriptionManager: boolean isUsableSubIdValue(int)> -> _SOURCE_
<android.os.Environment: boolean isExternalStorageEmulated()> -> _SOURCE_
<android.os.StatFs: long getAvailableBlocksLong()> -> _SOURCE_
<android.app.job.JobParameters: java.lang.String getReasonCodeDescription(int)> -> _SOURCE_
<android.content.pm.SuspendDialogInfo: int getIconResId()> -> _SOURCE_
<android.telecom.DisconnectCause: int getCode()> -> _SOURCE_
<android.accessibilityservice.AccessibilityGestureEvent: int describeContents()> -> _SOURCE_
<android.app.Notification: java.lang.String getChannel()> -> _SOURCE_
<android.location.Address: double getLongitude()> -> _SOURCE_
<android.security.keystore.recovery.KeyChainSnapshot: byte[] getServerParams()> -> _SOURCE_
<android.bluetooth.BluetoothClass: byte[] getClassOfDeviceBytes()> -> _SOURCE_
<android.media.session.PlaybackState: long getActions()> -> _SOURCE_
<android.app.Dialog: boolean onPreparePanel(int,android.view.View,android.view.Menu)> -> _SOURCE_
<android.content.pm.PackageInstaller$SessionParams: boolean getEnableRollback()> -> _SOURCE_
<android.renderscript.ProgramStore: boolean isColorMaskAlphaEnabled()> -> _SOURCE_
<android.security.keystore.recovery.KeyChainSnapshot: int getSnapshotVersion()> -> _SOURCE_
<android.app.admin.SecurityLog$SecurityEvent: long getTimeNanos()> -> _SOURCE_
<android.media.tv.TvInputService$Session: void notifyTracksChanged(java.util.List)> -> _SOURCE_
<android.security.keystore.AndroidKeyStoreSpi: int engineSize()> -> _SOURCE_
<android.app.ActivityThread: android.permission.IPermissionManager getPermissionManager()> -> _SOURCE_
<android.os.UserManager: int getMaxSupportedUsers()> -> _SOURCE_
<android.net.ConnectivityManager: boolean isNetworkSupported(int)> -> _SOURCE_
<com.android.internal.telephony.gsm.GsmSmsAddress: boolean isAlphanumeric()> -> _SOURCE_
<java.security.SecureRandom: byte[] generateSeed(int)> -> _SOURCE_
<android.telephony.CellSignalStrengthLte: int getRssi()> -> _SOURCE_
<android.app.AppOpsManager$HistoricalPackageOps: int getOpCount()> -> _SOURCE_
<com.android.internal.os.PowerProfile: int getNumElements(java.lang.String)> -> _SOURCE_
<android.hardware.camera2.legacy.BurstHolder: int getNumberOfRequests()> -> _SOURCE_
<java.net.DatagramSocket: boolean getBroadcast()> -> _SOURCE_
<android.hardware.face.FaceManager: boolean hasEnrolledTemplates()> -> _SOURCE_
<android.provider.BlockedNumberContract$SystemContract: java.lang.String blockStatusToString(int)> -> _SOURCE_
<com.android.internal.view.ScrollCaptureInternal: int detectScrollingType(android.view.View)> -> _SOURCE_
<android.app.Notification: android.content.LocusId getLocusId()> -> _SOURCE_
<android.app.NotificationManager$Policy: boolean showStatusBarIcons()> -> _SOURCE_
<android.text.FontConfig: android.text.FontConfig$Alias[] getAliases()> -> _SOURCE_
<android.telecom.AuthenticatorService$Authenticator: android.os.Bundle getAuthToken(android.accounts.AccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)> -> _SOURCE_
<android.telephony.SmsMessage: java.lang.String getServiceCenterAddress()> -> _SOURCE_
<android.view.ViewConfiguration: boolean shouldShowMenuShortcutsWhenKeyboardPresent()> -> _SOURCE_
<jdk.net.SocketFlow: long bandwidth()> -> _SOURCE_
<android.view.View: boolean isAutofilled()> -> _SOURCE_
<android.text.style.AbsoluteSizeSpan: int getSize()> -> _SOURCE_
<android.telephony.ims.stub.ImsUtImplBase: int queryCallWaiting()> -> _SOURCE_
<android.telephony.data.ApnSetting: java.lang.String getMvnoTypeStringFromInt(int)> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: java.lang.String getAddress()> -> _SOURCE_
<android.app.usage.UsageEvents$Event: int getInstanceId()> -> _SOURCE_
<android.os.StrictMode: boolean vmIncorrectContextUseEnabled()> -> _SOURCE_
<android.media.RoutingSessionInfo: java.util.List getTransferableRoutes()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.util.Set getDefaultCrossProfilePackages()> -> _SOURCE_
<android.os.PowerManager: int getLastSleepReason()> -> _SOURCE_
<java.nio.charset.CharsetDecoder: java.nio.charset.Charset charset()> -> _SOURCE_
<android.media.MediaPlayer: android.os.PersistableBundle getMetrics()> -> _SOURCE_
<android.telephony.SubscriptionManager: boolean isNetworkRoaming(int)> -> _SOURCE_
<java.time.MonthDay: int getMonthValue()> -> _SOURCE_
<com.android.internal.telephony.cdma.SmsMessage: int getTPLayerLengthForPDU(java.lang.String)> -> _SOURCE_
<android.widget.Chronometer: java.lang.String getFormat()> -> _SOURCE_
<android.bluetooth.le.AdvertiseData: java.util.List getServiceUuids()> -> _SOURCE_
<java.text.StringCharacterIterator: int getIndex()> -> _SOURCE_
<android.telecom.Connection: int getConnectionProperties()> -> _SOURCE_
<android.os.Process: android.os.UserHandle myUserHandle()> -> _SOURCE_
<java.util.SimpleTimeZone: java.lang.String toString()> -> _SOURCE_
<android.os.SystemService: void waitForAnyStopped(java.lang.String[])> -> _SOURCE_
<com.android.internal.midi.MidiEventScheduler$MidiEvent: java.lang.String toString()> -> _SOURCE_
<android.os.Parcel: java.lang.Object getClassCookie(java.lang.Class)> -> _SOURCE_
<android.telephony.CellInfoTdscdma: android.telephony.CellSignalStrengthTdscdma getCellSignalStrength()> -> _SOURCE_
<android.content.ComponentName: java.lang.String getShortClassName()> -> _SOURCE_
<android.bluetooth.BluetoothGattDescriptor: java.util.UUID getUuid()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String nvReadItem(int)> -> _SOURCE_
<android.hardware.hdmi.HdmiClient: android.hardware.hdmi.HdmiDeviceInfo getActiveSource()> -> _SOURCE_
<android.os.health.SystemHealthManager: android.os.health.HealthStats[] takeUidSnapshots(int[])> -> _SOURCE_
<android.bluetooth.BluetoothGattCharacteristic: java.lang.Float getFloatValue(int,int)> -> _SOURCE_
<android.telephony.TelephonyManager: android.content.ComponentName getAndUpdateDefaultRespondViaMessageApplication()> -> _SOURCE_
<android.database.sqlite.SQLiteQuery: java.lang.String toString()> -> _SOURCE_
<java.time.chrono.ChronoLocalDateTime: java.time.chrono.Chronology getChronology()> -> _SOURCE_
<android.location.GnssStatus: float getElevationDegrees(int)> -> _SOURCE_
<javax.crypto.Mac: java.lang.String getAlgorithm()> -> _SOURCE_
<android.media.tv.tuner.dvr.DvrSettings: android.media.tv.tuner.dvr.DvrSettings$Builder builder()> -> _SOURCE_
<android.content.ContentProviderClient: java.lang.String getType(android.net.Uri)> -> _SOURCE_
<android.hardware.hdmi.HdmiPlaybackClient: void queryDisplayStatus(android.hardware.hdmi.HdmiPlaybackClient$DisplayStatusCallback)> -> _SOURCE_
<android.widget.RadialTimePickerView: int getCurrentHour()> -> _SOURCE_
<android.hardware.biometrics.BiometricAuthenticator: boolean isHardwareDetected()> -> _SOURCE_
<com.android.internal.policy.DecorContext: android.content.res.Resources getResources()> -> _SOURCE_
<android.content.RestrictionsManager: java.util.List getManifestRestrictions(java.lang.String)> -> _SOURCE_
<java.nio.charset.CharsetDecoder: java.nio.charset.CodingErrorAction unmappableCharacterAction()> -> _SOURCE_
<android.telephony.ServiceState: int getCdmaNetworkId()> -> _SOURCE_
<android.content.pm.IntentFilterVerificationInfo: java.lang.String getDomainsString()> -> _SOURCE_
<java.net.URL: java.lang.String toString()> -> _SOURCE_
<com.android.internal.telephony.ExponentialBackoff: long getCurrentDelay()> -> _SOURCE_
<android.widget.AdapterView: android.widget.AdapterView$OnItemLongClickListener getOnItemLongClickListener()> -> _SOURCE_
<android.os.UserManager$UserOperationException: android.os.UserManager$UserOperationException 'from'(android.os.ServiceSpecificException)> -> _SOURCE_
<android.app.job.JobService: android.os.IBinder onBind(android.content.Intent)> -> _SOURCE_
<java.nio.charset.CharsetEncoder: java.nio.charset.Charset charset()> -> _SOURCE_
<android.os.connectivity.WifiActivityEnergyInfo: long getControllerRxDurationMillis()> -> _SOURCE_
<android.net.ConnectivityManager: android.net.ConnectivityManager 'from'(android.content.Context)> -> _SOURCE_
<android.widget.AutoCompleteTextView: android.widget.ListAdapter getAdapter()> -> _SOURCE_
<android.graphics.ColorSpace$Model: int getComponentCount()> -> _SOURCE_
<android.hardware.location.GeofenceHardwareRequestParcelable: java.lang.String toString()> -> _SOURCE_
<android.media.MediaRouter: int getCategoryCount()> -> _SOURCE_
<java.lang.reflect.Method: int getModifiers()> -> _SOURCE_
<android.app.usage.UsageStatsManager: void setAppStandbyBuckets(java.util.Map)> -> _SOURCE_
<android.content.pm.PackageManager: java.lang.String getDefaultTextClassifierPackageName()> -> _SOURCE_
<android.telephony.SignalStrength: int getLteCqi()> -> _SOURCE_
<android.app.prediction.AppPredictionContext$Builder: android.app.prediction.AppPredictionContext$Builder setPredictedTargetCount(int)> -> _SOURCE_
<android.media.tv.TvRecordingClient$RecordingCallback: void onDisconnected(java.lang.String)> -> _SOURCE_
<com.android.ims.internal.uce.common.CapInfo: boolean isChatbotSupported()> -> _SOURCE_
<android.hardware.camera2.legacy.ParameterUtils: android.util.Size[] convertSizeListToArray(java.util.List)> -> _SOURCE_
<android.net.TrafficStats: long getUidTxPackets(int)> -> _SOURCE_
<android.app.ApplicationPackageManager: android.content.pm.InstallSourceInfo getInstallSourceInfo(java.lang.String)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getCdmaEriText(int)> -> _SOURCE_
<android.telephony.CellSignalStrengthGsm: int getLevel()> -> _SOURCE_
<android.telephony.euicc.EuiccCardManager: void requestEuiccInfo2(java.lang.String,java.util.concurrent.Executor,android.telephony.euicc.EuiccCardManager$ResultCallback)> -> _SOURCE_
<android.net.lowpan.LowpanManager: android.net.lowpan.LowpanInterface getInterface(android.net.lowpan.ILowpanInterface)> -> _SOURCE_
<android.os.UserManager$UserOperationException: int getUserOperationResult()> -> _SOURCE_
<android.bluetooth.BluetoothHidDevice: boolean connect(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<android.media.MediaDrm: android.media.MediaDrm$ProvisionRequest getProvisionRequest()> -> _SOURCE_
<java.security.cert.PKIXParameters: boolean isAnyPolicyInhibited()> -> _SOURCE_
<android.location.LocationRequest: java.lang.String toString()> -> _SOURCE_
<android.graphics.drawable.BitmapDrawable: void clearMutated()> -> _SOURCE_
<android.view.VelocityTracker: float getXVelocity(int)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: int getPasswordHistoryLength(android.content.ComponentName,int)> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec: java.util.Date getKeyValidityForOriginationEnd()> -> _SOURCE_
<android.content.ContentResolver: android.os.ParcelFileDescriptor openFileDescriptor(android.net.Uri,java.lang.String)> -> _SOURCE_
<android.media.Ringtone: java.lang.String getTitle(android.content.Context)> -> _SOURCE_
<android.location.GpsClock: boolean hasDriftUncertaintyInNsPerSec()> -> _SOURCE_
<android.view.InputDevice: int getVendorId()> -> _SOURCE_
<android.preference.Preference: android.content.Context getContext()> -> _SOURCE_
<com.android.ims.internal.uce.presence.PresResInstanceInfo: int getResInstanceState()> -> _SOURCE_
<android.app.Notification$WearableExtender: boolean getHintHideIcon()> -> _SOURCE_
<android.provider.Contacts$Settings: java.lang.String getSetting(android.content.ContentResolver,java.lang.String,java.lang.String)> -> _SOURCE_
<android.net.MailTo: boolean isMailTo(java.lang.String)> -> _SOURCE_
<android.util.apk.ApkSignatureSchemeV2Verifier: java.security.cert.X509Certificate[][] unsafeGetCertsWithoutVerification(java.lang.String)> -> _SOURCE_
<android.content.SyncResult: java.lang.String toString()> -> _SOURCE_
<java.time.LocalTime: int getHour()> -> _SOURCE_
<android.print.PrintAttributes$Resolution: java.lang.String getLabel()> -> _SOURCE_
<android.location.GpsSatellite: boolean hasEphemeris()> -> _SOURCE_
<android.content.integrity.AtomicFormula$StringAtomicFormula: boolean isAppCertificateFormula()> -> _SOURCE_
<android.widget.CursorTreeAdapter: java.lang.String convertToString(android.database.Cursor)> -> _SOURCE_
<android.provider.ContactsContract$SyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)> -> _SOURCE_
<android.app.NotificationManager: boolean areNotificationsPaused()> -> _SOURCE_
<android.util.jar.StrictJarManifest: java.util.Map getEntries()> -> _SOURCE_
<com.android.internal.midi.EventScheduler$SchedulableEvent: long getTimestamp()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: java.util.Map getRpmStats()> -> _SOURCE_
<android.print.PrinterInfo: boolean getHasCustomPrinterIcon()> -> _SOURCE_
<android.view.ViewRootImpl: android.view.View getAccessibilityFocusedHost()> -> _SOURCE_
<java.lang.Enum: java.lang.Class getDeclaringClass()> -> _SOURCE_
<java.io.ObjectStreamClass: java.io.ObjectStreamField[] getFields()> -> _SOURCE_
<android.net.EthernetManager: boolean isAvailable(java.lang.String)> -> _SOURCE_
<android.graphics.Matrix: long ni()> -> _SOURCE_
<android.bluetooth.le.ScanCallback: void onBatchScanResults(java.util.List)> -> _SOURCE_
<android.view.contentcapture.ContentCaptureHelper: int getDefaultLoggingLevel()> -> _SOURCE_
<android.os.Debug$MemoryInfo: int getOtherSwappablePss(int)> -> _SOURCE_
<android.net.LinkProperties: java.util.List getAllLinkAddresses()> -> _SOURCE_
<android.location.GnssClock: double getBiasNanos()> -> _SOURCE_
<android.os.Binder: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<javax.net.ssl.SSLParameters: boolean getUseCipherSuitesOrder()> -> _SOURCE_
<android.net.LinkProperties: boolean hasIPv6DefaultRoute()> -> _SOURCE_
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthTokenLabel(java.lang.String,java.lang.String,android.accounts.AccountManagerCallback,android.os.Handler)> -> _SOURCE_
<java.util.concurrent.ThreadPoolExecutor: void shutdown()> -> _SOURCE_
<android.content.pm.PackageInstaller$SessionInfo: java.lang.String getInstallerPackageName()> -> _SOURCE_
<java.time.chrono.JapaneseEra: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)> -> _SOURCE_
<android.app.ActivityTaskManager: void removeAllVisibleRecentTasks()> -> _SOURCE_
<android.app.DownloadManager: long getActiveNetworkWarningBytes(android.content.Context)> -> _SOURCE_
<android.net.NetworkInfo: java.lang.String getExtraInfo()> -> _SOURCE_
<java.text.CollationKey: java.lang.String getSourceString()> -> _SOURCE_
<android.service.autofill.Dataset: java.lang.String toString()> -> _SOURCE_
<android.content.pm.VerifierDeviceIdentity: java.lang.String toString()> -> _SOURCE_
<android.net.NetworkStatsHistory: void recordEntireHistory(android.net.NetworkStatsHistory)> -> _SOURCE_
<android.app.usage.CacheQuotaService: android.os.IBinder onBind(android.content.Intent)> -> _SOURCE_
<java.util.concurrent.ForkJoinTask: java.util.concurrent.ForkJoinPool getPool()> -> _SOURCE_
<android.media.MediaCodecInfo: android.media.MediaCodecInfo$CodecCapabilities getCapabilitiesForType(java.lang.String)> -> _SOURCE_
<java.util.DoubleSummaryStatistics: long getCount()> -> _SOURCE_
<android.hardware.display.DisplayManager: android.hardware.display.BrightnessConfiguration getBrightnessConfiguration()> -> _SOURCE_
<android.service.quickaccesswallet.WalletServiceEventListenerRequest: java.lang.String getListenerId()> -> _SOURCE_
<android.telephony.ServiceState: java.lang.String getRoamingLogString(int)> -> _SOURCE_
<android.telephony.ModemActivityInfo: java.lang.String toString()> -> _SOURCE_
<android.view.inputmethod.InputMethodInfo: java.lang.String toString()> -> _SOURCE_
<android.gesture.Gesture: int getStrokesCount()> -> _SOURCE_
<android.content.pm.InstallSourceInfo: java.lang.String getInitiatingPackageName()> -> _SOURCE_
<com.android.internal.app.procstats.SparseMappingTable$Table: int getKeyCount()> -> _SOURCE_
<android.database.sqlite.SQLiteConnection: int executeForCursorWindow(java.lang.String,java.lang.Object[],android.database.CursorWindow,int,int,boolean,android.os.CancellationSignal)> -> _SOURCE_
<android.os.TelephonyServiceManager$ServiceRegisterer: android.os.IBinder tryGet()> -> _SOURCE_
<java.time.Period: java.util.List getUnits()> -> _SOURCE_
<android.view.FrameMetrics: long getMetric(int)> -> _SOURCE_
<android.media.MediaRouter2Manager$Callback: void onRoutesChanged(java.util.List)> -> _SOURCE_
<android.hardware.hdmi.HdmiControlServiceWrapper: java.util.List getInputDevices()> -> _SOURCE_
<android.content.PermissionChecker: int checkPermissionForPreflight(android.content.Context,java.lang.String,int,int,java.lang.String)> -> _SOURCE_
<android.os.Environment: java.io.File getExpandDirectory()> -> _SOURCE_
<android.view.InputChannel: java.lang.String getName()> -> _SOURCE_
<android.nfc.cardemulation.NfcFCardEmulation: java.lang.String getNfcid2ForService(android.content.ComponentName)> -> _SOURCE_
<android.telephony.TelephonyRegistryManager: void notifyDataActivityChanged(int,int)> -> _SOURCE_
<java.security.cert.PKIXCertPathValidatorResult: java.security.PublicKey getPublicKey()> -> _SOURCE_
<android.service.voice.VoiceInteractionSession: void onHide()> -> _SOURCE_
<android.widget.GridLayout: int getRowCount()> -> _SOURCE_
<java.net.InetAddress: boolean isLoopbackAddress()> -> _SOURCE_
<android.os.PowerManager: boolean isIgnoringBatteryOptimizations(java.lang.String)> -> _SOURCE_
<android.bluetooth.BluetoothAvrcpController: java.util.List getConnectedDevices()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isConcurrentVoiceAndDataSupported()> -> _SOURCE_
<com.android.ims.internal.uce.presence.PresCmdStatus: com.android.ims.internal.uce.presence.PresCmdId getCmdId()> -> _SOURCE_
<android.bluetooth.BluetoothSap: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
<java.net.URLConnection: int getContentLength()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long getDeviceIdleModeTime(int,long,int)> -> _SOURCE_
<android.bluetooth.BluetoothSocket: int getMaxReceivePacketSize()> -> _SOURCE_
<android.content.res.TypedArray: java.lang.String getPositionDescription()> -> _SOURCE_
<android.net.RssiCurve: java.lang.String toString()> -> _SOURCE_
<android.service.controls.templates.ControlTemplate: java.lang.String getTemplateId()> -> _SOURCE_
<android.content.ContentProviderClient: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SOURCE_
<android.hardware.radio.RadioManager$AmBandConfig$Builder: android.hardware.radio.RadioManager$AmBandConfig build()> -> _SOURCE_
<android.os.connectivity.WifiBatteryStats: long getNumBytesRx()> -> _SOURCE_
<android.app.Instrumentation: android.content.ComponentName getComponentName()> -> _SOURCE_
<java.util.zip.Deflater: int getTotalIn()> -> _SOURCE_
<android.view.Display: java.lang.String toString()> -> _SOURCE_
<android.content.ContextWrapper: android.content.Context createConfigurationContext(android.content.res.Configuration)> -> _SOURCE_
<android.service.autofill.FillResponse: android.os.Bundle getClientState()> -> _SOURCE_
<android.hardware.hdmi.HdmiPortInfo: boolean isArcSupported()> -> _SOURCE_
<com.android.ims.internal.uce.presence.PresServiceInfo: java.lang.String getServiceId()> -> _SOURCE_
<android.app.WallpaperInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)> -> _SOURCE_
<android.net.NetworkPolicyManager$SubscriptionCallbackProxy: void onSubscriptionPlansChanged(int,android.telephony.SubscriptionPlan[])> -> _SOURCE_
<android.telephony.ims.stub.ImsConfigImplBase: void updateImsCarrierConfigs(android.os.PersistableBundle)> -> _SOURCE_
<android.bluetooth.BluetoothActivityEnergyInfo: long getControllerTxTimeMillis()> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing$Limiter: float getAttackTime()> -> _SOURCE_
<android.app.NotificationHistory: void removeNotificationsFromWrite(java.lang.String)> -> _SOURCE_
<android.widget.TextView: int getAutofillType()> -> _SOURCE_
<java.lang.reflect.Parameter: java.lang.reflect.Type getParameterizedType()> -> _SOURCE_
<com.android.internal.app.ResolverMultiProfilePagerAdapter: com.android.internal.app.ResolverListAdapter getActiveListAdapter()> -> _SOURCE_
<android.app.Notification$WearableExtender: android.app.PendingIntent getDisplayIntent()> -> _SOURCE_
<com.android.ims.internal.uce.presence.PresResInstanceInfo: java.lang.String getPresentityUri()> -> _SOURCE_
<android.telephony.TelephonyManager: int getPreferredOpportunisticDataSubscription()> -> _SOURCE_
<android.telephony.TelephonyManager: int getVoiceNetworkType(int)> -> _SOURCE_
<android.app.DirectAction$Builder: android.app.DirectAction build()> -> _SOURCE_
<android.view.View: boolean isShown()> -> _SOURCE_
<android.service.autofill.SaveInfo: int getType()> -> _SOURCE_
<java.net.InetSocketAddress: boolean isUnresolved()> -> _SOURCE_
<android.content.pm.ShortcutManager: java.util.List getShortcuts(int)> -> _SOURCE_
<java.net.DatagramSocket: boolean isClosed()> -> _SOURCE_
<android.telephony.data.ApnSetting: int getApnTypesBitmaskFromString(java.lang.String)> -> _SOURCE_
<android.inputmethodservice.InputMethodService$InputMethodImpl: void startInput(android.view.inputmethod.InputConnection,android.view.inputmethod.EditorInfo)> -> _SOURCE_
<android.widget.SearchView: int getInputType()> -> _SOURCE_
<com.android.internal.telephony.cdma.SmsMessage: com.android.internal.telephony.cdma.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,com.android.internal.telephony.cdma.sms.UserData,boolean)> -> _SOURCE_
<com.android.internal.widget.RecyclerView: com.android.internal.widget.RecyclerView$LayoutManager getLayoutManager()> -> _SOURCE_
<android.content.ContentResolver: android.net.Uri translateDeprecatedDataPath(java.lang.String)> -> _SOURCE_
<android.hardware.camera2.params.Capability: android.util.Size getMaxStreamingSize()> -> _SOURCE_
<android.media.MediaFormat: java.lang.Number getNumber(java.lang.String)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$LongSamplingCounter: void onTimeStarted(long,long,long)> -> _SOURCE_
<android.media.tv.TvContentRating: java.util.List getSubRatings()> -> _SOURCE_
<android.telecom.ParcelableCall: long getCreationTimeMillis()> -> _SOURCE_
<java.lang.reflect.Parameter: boolean isNamePresent()> -> _SOURCE_
<android.net.StringNetworkSpecifier: java.lang.String toString()> -> _SOURCE_
<android.app.WallpaperManager: boolean isSetWallpaperAllowed()> -> _SOURCE_
<android.view.PointerIcon: android.view.PointerIcon getDefaultIcon(android.content.Context)> -> _SOURCE_
<android.app.AppOpsManager$OpEventProxyInfo: java.lang.String getPackageName()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.util.List retrievePreRebootSecurityLogs(android.content.ComponentName)> -> _SOURCE_
<android.content.ContentResolver: void startSync(android.net.Uri,android.os.Bundle)> -> _SOURCE_
<android.app.StatusBarManager$DisableInfo: boolean isSearchDisabled()> -> _SOURCE_
<android.service.autofill.SaveInfo: android.view.autofill.AutofillId[][] getSanitizerValues()> -> _SOURCE_
<android.media.VolumeShaper$Configuration: float[] getVolumes()> -> _SOURCE_
<android.telecom.TelecomManager: void clearPhoneAccounts()> -> _SOURCE_
<android.drm.DrmManagerClient: void notify(java.lang.Object,int,int,java.lang.String)> -> _SOURCE_
<android.os.UserManager: boolean hasBadge()> -> _SOURCE_
<android.mtp.MtpDevice: android.mtp.MtpStorageInfo getStorageInfo(int)> -> _SOURCE_
<javax.net.ssl.SSLParameters: void setCipherSuites(java.lang.String[])> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getIsimImpi()> -> _SOURCE_
<android.content.res.Resources: int getAttributeSetSourceResId(android.util.AttributeSet)> -> _SOURCE_
<android.os.health.HealthStats: int getTimersKeyCount()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean hasCarrierPrivileges()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isManagedKiosk()> -> _SOURCE_
<android.os.VibrationAttributes: java.lang.String usageToString(int)> -> _SOURCE_
<android.app.NotificationChannelGroup: java.lang.String getDescription()> -> _SOURCE_
<java.util.logging.Logger: java.util.logging.Handler[] getHandlers()> -> _SOURCE_
<android.location.GpsClock: long getFullBiasInNs()> -> _SOURCE_
<android.app.AppOpsManager$HistoricalOps: long getEndTimeMillis()> -> _SOURCE_
<android.widget.AlphabetIndexer: int getPositionForSection(int)> -> _SOURCE_
<android.telecom.ParcelableConnection: java.lang.String toString()> -> _SOURCE_
<com.android.internal.location.gnssmetrics.GnssMetrics: java.lang.String dumpGnssMetricsAsProtoString()> -> _SOURCE_
<android.hardware.camera2.impl.CameraDeviceImpl$CameraDeviceCallbacks: void onRequestQueueEmpty()> -> _SOURCE_
<android.location.GnssMeasurement: double getSatelliteInterSignalBiasNanos()> -> _SOURCE_
<android.telecom.Call$Details: java.lang.String toString()> -> _SOURCE_
<android.media.MediaCodec: android.os.PersistableBundle getMetrics()> -> _SOURCE_
<android.telephony.ims.stub.ImsUtImplBase: int queryColp()> -> _SOURCE_
<android.telephony.mbms.vendor.MbmsStreamingServiceBase: android.net.Uri getPlaybackUri(int,java.lang.String)> -> _SOURCE_
<android.service.notification.ZenPolicy: void dumpDebug(android.util.proto.ProtoOutputStream,long)> -> _SOURCE_
<android.net.NetworkCapabilities: java.lang.String describeFirstNonRequestableCapability()> -> _SOURCE_
<android.util.TimingsTraceLog: void logDuration(java.lang.String,long)> -> _SOURCE_
<android.view.SurfaceControl: android.os.IBinder getPhysicalDisplayToken(long)> -> _SOURCE_
<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])> -> _SOURCE_
<android.content.pm.KeySet: android.os.IBinder getToken()> -> _SOURCE_
<android.se.omapi.Session: boolean isClosed()> -> _SOURCE_
<android.media.tv.tuner.frontend.IsdbtFrontendSettings: int getType()> -> _SOURCE_
<android.service.controls.Control: java.lang.CharSequence getTitle()> -> _SOURCE_
<com.android.internal.app.procstats.SparseMappingTable: void readFromParcel(android.os.Parcel)> -> _SOURCE_
<android.view.ViewConfiguration: long getScreenshotChordKeyTimeout()> -> _SOURCE_
<android.media.audiopolicy.AudioMix: int getMixState()> -> _SOURCE_
<android.bluetooth.le.PeriodicAdvertisingReport: int getSyncHandle()> -> _SOURCE_
<android.printservice.recommendation.RecommendationInfo: java.lang.CharSequence getName()> -> _SOURCE_
<android.net.ConnectivityDiagnosticsManager$DataStallReport: android.net.Network getNetwork()> -> _SOURCE_
<android.hardware.Camera$Parameters: int getMaxNumMeteringAreas()> -> _SOURCE_
<android.text.style.TtsSpan$TelephoneBuilder: android.text.style.TtsSpan$TelephoneBuilder setExtension(java.lang.String)> -> _SOURCE_
<android.telephony.ims.ImsSsData: java.util.List getSuppServiceInfo()> -> _SOURCE_
<android.app.NotificationManager: android.app.NotificationManager 'from'(android.content.Context)> -> _SOURCE_
<android.hardware.camera2.CaptureRequest: android.hardware.camera2.impl.CameraMetadataNative getNativeCopy()> -> _SOURCE_
<android.telephony.PhoneNumberUtils: boolean isEmergencyNumber(java.lang.String)> -> _SOURCE_
<android.content.res.AssetManager$AssetInputStream: long getNativeAsset()> -> _SOURCE_
<android.content.ContentProvider: java.lang.String getCallingAttributionTag()> -> _SOURCE_
<java.util.ResourceBundle: java.lang.String getString(java.lang.String)> -> _SOURCE_
<android.net.TrafficStats: long getRxBytes(java.lang.String)> -> _SOURCE_
<android.os.storage.StorageManager: java.lang.String[] getVolumePaths()> -> _SOURCE_
<android.telephony.SubscriptionManager: java.util.List getActiveSubscriptionInfoList()> -> _SOURCE_
<android.renderscript.Allocation: long getTimeStamp()> -> _SOURCE_
<com.android.internal.graphics.palette.Target: float getTargetLightness()> -> _SOURCE_
<android.os.RemoteCallbackList: java.lang.Object getBroadcastCookie(int)> -> _SOURCE_
<android.security.keystore.recovery.TrustedRootCertificates: java.security.cert.X509Certificate getTestOnlyInsecureCertificate()> -> _SOURCE_
<java.util.concurrent.LinkedBlockingQueue: int size()> -> _SOURCE_
<android.service.dreams.DreamService: void onDetachedFromWindow()> -> _SOURCE_
<android.telephony.emergency.EmergencyNumber: java.lang.String getCountryIso()> -> _SOURCE_
<android.service.carrier.CarrierIdentifier: java.lang.String getSpn()> -> _SOURCE_
<android.app.backup.FullBackupDataOutput: int getTransportFlags()> -> _SOURCE_
<java.util.regex.Pattern: java.lang.String pattern()> -> _SOURCE_
<android.telecom.ParcelableCall: java.lang.String getId()> -> _SOURCE_
<android.telecom.VideoProfile: boolean isReceptionEnabled(int)> -> _SOURCE_
<com.android.internal.telephony.gsm.SmsCbHeader: boolean isEtwsPrimaryNotification()> -> _SOURCE_
<android.media.SyncParams: int getSyncSource()> -> _SOURCE_
<com.android.internal.util.StateMachine: android.os.Message getCurrentMessage()> -> _SOURCE_
<android.view.KeyEvent: void recycleIfNeededAfterDispatch()> -> _SOURCE_
<android.mtp.MtpObjectInfo: int getStorageId()> -> _SOURCE_
<android.telecom.GatewayInfo: android.net.Uri getGatewayAddress()> -> _SOURCE_
<android.app.Activity: android.content.ComponentName contentCaptureClientGetComponentName()> -> _SOURCE_
<android.view.textclassifier.ConversationActions: java.lang.String getId()> -> _SOURCE_
<com.android.internal.content.NativeLibraryHelper: int findSupportedAbi(com.android.internal.content.NativeLibraryHelper$Handle,java.lang.String[])> -> _SOURCE_
<android.telephony.SignalStrength: int getEvdoSnr()> -> _SOURCE_
<android.app.WindowConfiguration: boolean hasWindowDecorCaption()> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: boolean startDiscovery()> -> _SOURCE_
<android.service.voice.VoiceInteractionService: android.media.voice.KeyphraseModelManager createKeyphraseModelManager()> -> _SOURCE_
<java.lang.ClassNotFoundException: java.lang.Throwable getException()> -> _SOURCE_
<android.provider.DeviceConfig: int getInt(java.lang.String,java.lang.String,int)> -> _SOURCE_
<android.app.backup.BackupManager: int requestBackup(java.lang.String[],android.app.backup.BackupObserver)> -> _SOURCE_
<android.app.ApplicationPackageManager: android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName,int)> -> _SOURCE_
<android.media.MicrophoneInfo: float getMaxSpl()> -> _SOURCE_
<android.telephony.TelephonyManager: android.telephony.ims.aidl.IImsMmTelFeature getImsMmTelFeatureAndListen(int,com.android.ims.internal.IImsServiceFeatureCallback)> -> _SOURCE_
<java.util.stream.IntStream: java.util.stream.IntStream$Builder builder()> -> _SOURCE_
<android.speech.RecognitionService$Callback: int getCallingUid()> -> _SOURCE_
<android.app.ApplicationPackageManager: int getComponentEnabledSetting(android.content.ComponentName)> -> _SOURCE_
<android.content.pm.InstallationFile: long getLengthBytes()> -> _SOURCE_
<android.print.PrinterId: android.content.ComponentName getServiceName()> -> _SOURCE_
<android.os.health.HealthKeys$Constants: java.lang.String getDataType()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: android.util.LongArray getChildNodeIds()> -> _SOURCE_
<android.net.TelephonyNetworkSpecifier: int hashCode()> -> _SOURCE_
<android.content.pm.SuspendDialogInfo: int getDialogMessageResId()> -> _SOURCE_
<android.media.AudioManager: void registerRemoteControlClient(android.media.RemoteControlClient)> -> _SOURCE_
<android.hardware.usb.UsbInterface: int getAlternateSetting()> -> _SOURCE_
<android.media.VolumePolicy: java.lang.String toString()> -> _SOURCE_
<android.view.accessibility.AccessibilityWindowInfo: java.lang.CharSequence getTitle()> -> _SOURCE_
<android.hardware.soundtrigger.SoundTrigger$ModuleProperties: java.lang.String toString()> -> _SOURCE_
<com.android.internal.telephony.util.TelephonyUtils: java.lang.RuntimeException rethrowAsRuntimeException(android.os.RemoteException)> -> _SOURCE_
<android.widget.AbsSpinner: int getCount()> -> _SOURCE_
<java.lang.ClassLoader: java.net.URL getSystemResource(java.lang.String)> -> _SOURCE_
<java.time.LocalTime: java.time.LocalTime now(java.time.Clock)> -> _SOURCE_
<com.android.internal.os.BaseCommand: void showUsage()> -> _SOURCE_
<com.android.internal.telephony.gsm.SmsMessage: boolean isCphsMwiMessage()> -> _SOURCE_
<android.media.MicrophoneInfo: int getIndexInTheGroup()> -> _SOURCE_
<android.view.animation.Transformation: java.lang.String toString()> -> _SOURCE_
<android.content.pm.PackageInstaller$SessionParams: boolean areHiddenOptionsSet()> -> _SOURCE_
<com.android.internal.view.StandaloneActionMode: android.view.MenuInflater getMenuInflater()> -> _SOURCE_
<android.telecom.ConnectionRequest: android.os.ParcelFileDescriptor getRttPipeFromInCall()> -> _SOURCE_
<java.security.spec.PSSParameterSpec: int getTrailerField()> -> _SOURCE_
<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)> -> _SOURCE_
<com.android.internal.widget.LockPatternUtils$StrongAuthTracker: int getStrongAuthForUser(int)> -> _SOURCE_
<android.security.keystore.AndroidKeyStoreSpi: java.lang.String engineGetCertificateAlias(java.security.cert.Certificate)> -> _SOURCE_
<android.telephony.SubscriptionManager: android.telephony.SubscriptionInfo getDefaultSmsSubscriptionInfo()> -> _SOURCE_
<android.view.SurfaceControlViewHost: android.view.WindowlessWindowManager getWindowlessWM()> -> _SOURCE_
<android.location.GpsClock: boolean hasFullBiasInNs()> -> _SOURCE_
<android.print.PrinterCapabilitiesInfo: android.print.PrintAttributes getDefaults()> -> _SOURCE_
<android.content.pm.parsing.result.ParseTypeImpl: android.content.pm.parsing.result.ParseTypeImpl forDefaultParsing()> -> _SOURCE_
<android.graphics.drawable.BitmapDrawable: int getGravity()> -> _SOURCE_
<android.app.Notification$MessagingStyle: android.app.Person getUser()> -> _SOURCE_
<java.net.InetAddress: boolean isSiteLocalAddress()> -> _SOURCE_
<android.telephony.CellIdentityNr: int[] getBands()> -> _SOURCE_
<android.app.AutomaticZenRule: android.content.ComponentName getConfigurationActivity()> -> _SOURCE_
<android.content.ContentValues: java.lang.Object get(java.lang.String)> -> _SOURCE_
<android.view.animation.AccelerateDecelerateInterpolator: long createNativeInterpolator()> -> _SOURCE_
<android.service.autofill.FillRequest: int getId()> -> _SOURCE_
<android.net.NetworkCapabilities: boolean equalsAdministratorUids(android.net.NetworkCapabilities)> -> _SOURCE_
<android.hardware.location.MemoryRegion: int getFreeCapacityBytes()> -> _SOURCE_
<android.media.AudioTrack: android.media.AudioDeviceInfo getPreferredDevice()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: int getWifiMulticastWakelockCount(int)> -> _SOURCE_
<android.location.GnssStatus: float getAzimuthDegrees(int)> -> _SOURCE_
<android.hardware.usb.UsbDevice: boolean getHasVideoPlayback()> -> _SOURCE_
<android.content.pm.PackagePartitions$SystemPartition: java.io.File getAppFolder()> -> _SOURCE_
<android.service.autofill.FillEventHistory$Event: android.os.Bundle getClientState()> -> _SOURCE_
<android.inputmethodservice.KeyboardView: boolean isPreviewEnabled()> -> _SOURCE_
<java.net.InetAddress: boolean isLinkLocalAddress()> -> _SOURCE_
<android.os.IncidentManager$IncidentReport: java.io.InputStream getInputStream()> -> _SOURCE_
<java.text.ChoiceFormat: java.lang.Object[] getFormats()> -> _SOURCE_
<android.app.Activity: boolean autofillClientIsCompatibilityModeEnabled()> -> _SOURCE_
<android.telephony.ims.compat.feature.MMTelFeature: com.android.ims.internal.IImsMMTelFeature getBinder()> -> _SOURCE_
<android.os.SystemService: void start(java.lang.String)> -> _SOURCE_
<android.location.GnssMeasurementCorrections: long getToaGpsNanosecondsOfWeek()> -> _SOURCE_
<android.app.job.JobParameters: android.net.Network getNetwork()> -> _SOURCE_
<android.hardware.usb.UsbEndpoint: int getType()> -> _SOURCE_
<android.app.prediction.AppPredictor: void sortTargets(java.util.List,java.util.concurrent.Executor,java.util.function.Consumer)> -> _SOURCE_
<android.graphics.Typeface$CustomFallbackBuilder: int getMaxCustomFallbackCount()> -> _SOURCE_
<android.security.keystore.KeyProtection: boolean isDigestsSpecified()> -> _SOURCE_
<com.android.ims.internal.uce.presence.PresCmdId: int getCmdId()> -> _SOURCE_
<android.service.autofill.augmented.PresentationParams$Area: java.lang.String toString()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getSimOperatorNumeric()> -> _SOURCE_
<android.os.RecoverySystem: void processPackage(android.content.Context,java.io.File,android.os.RecoverySystem$ProgressListener,android.os.Handler)> -> _SOURCE_
<android.location.GnssMeasurement: double getTimeOffsetNanos()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.lang.String getAttentionServicePackageName()> -> _SOURCE_
<android.database.sqlite.SQLiteQueryBuilder: boolean isDistinct()> -> _SOURCE_
<android.hardware.soundtrigger.SoundTrigger$Keyphrase: android.hardware.soundtrigger.SoundTrigger$Keyphrase readFromParcel(android.os.Parcel)> -> _SOURCE_
<android.app.ApplicationPackageManager: java.util.Set getMimeGroup(java.lang.String)> -> _SOURCE_
<android.media.tv.tuner.dvr.DvrRecorder: int start()> -> _SOURCE_
<android.telephony.SubscriptionPlan: long getDataUsageTime()> -> _SOURCE_
<com.android.internal.statusbar.NotificationVisibility: java.lang.String toString()> -> _SOURCE_
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(long,java.lang.String)> -> _SOURCE_
<android.transition.TransitionManager: android.transition.Transition getDefaultTransition()> -> _SOURCE_
<android.hardware.display.DisplayManager: android.hardware.display.BrightnessConfiguration getDefaultBrightnessConfiguration()> -> _SOURCE_
<android.location.LocationProvider: int getPowerRequirement()> -> _SOURCE_
<android.content.ClipDescription: android.os.PersistableBundle getExtras()> -> _SOURCE_
<android.security.keystore.KeyProtection: boolean isUserConfirmationRequired()> -> _SOURCE_
<android.location.LocationRequest: long getExpireIn()> -> _SOURCE_
<android.app.ApplicationPackageManager: android.content.pm.ChangedPackages getChangedPackages(int)> -> _SOURCE_
<android.media.MediaRoute2ProviderInfo$Builder: android.media.MediaRoute2ProviderInfo build()> -> _SOURCE_
<java.lang.Integer: java.lang.String toString()> -> _SOURCE_
<java.security.cert.X509CertSelector: java.util.Set getExtendedKeyUsage()> -> _SOURCE_
<android.widget.ActivityChooserModel: int getActivityCount()> -> _SOURCE_
<android.os.UserHandle: int getUserGid(int)> -> _SOURCE_
<android.nfc.NfcAdapter: int getAdapterState()> -> _SOURCE_
<android.app.ApplicationPackageManager: boolean isUpgrade()> -> _SOURCE_
<android.util.apk.VerityBuilder: android.util.apk.VerityBuilder$VerityResult generateApkVerityTree(java.io.RandomAccessFile,android.util.apk.SignatureInfo,android.util.apk.ByteBufferFactory)> -> _SOURCE_
<android.content.IntentFilter: int countDataAuthorities()> -> _SOURCE_
<android.hardware.display.DeviceProductInfo: int[] getRelativeAddress()> -> _SOURCE_
<android.view.inputmethod.InputConnectionWrapper: boolean requestCursorUpdates(int)> -> _SOURCE_
<android.telephony.CellSignalStrengthNr: int getAsuLevel()> -> _SOURCE_
<javax.crypto.spec.RC2ParameterSpec: byte[] getIV()> -> _SOURCE_
<android.view.textclassifier.ConversationActions$Message: java.lang.CharSequence getText()> -> _SOURCE_
<android.hardware.display.WifiDisplay: boolean canConnect()> -> _SOURCE_
<android.graphics.ColorSpace$Rgb: android.graphics.ColorSpace$Rgb$TransferParameters getTransferParameters()> -> _SOURCE_
<android.content.pm.KeySet: void writeToParcel(android.os.Parcel,int)> -> _SOURCE_
<android.view.View: void requestKeyboardShortcuts(java.util.List,int)> -> _SOURCE_
<com.android.ims.internal.uce.presence.PresSipResponse: java.lang.String getReasonPhrase()> -> _SOURCE_
<android.telecom.Connection: android.telecom.DisconnectCause getDisconnectCause()> -> _SOURCE_
<android.hardware.display.WifiDisplay: boolean equals(android.hardware.display.WifiDisplay)> -> _SOURCE_
<android.webkit.ServiceWorkerController: android.webkit.ServiceWorkerController getInstance()> -> _SOURCE_
<android.widget.Toolbar: android.view.View getNavigationView()> -> _SOURCE_
<android.os.Temperature: boolean isValidStatus(int)> -> _SOURCE_
<android.app.Notification: boolean getAllowSystemGeneratedContextualActions()> -> _SOURCE_
<android.service.autofill.FillResponse: android.service.autofill.InlinePresentation getInlinePresentation()> -> _SOURCE_
<android.net.NetworkCapabilities: int getOwnerUid()> -> _SOURCE_
<java.security.Signature: java.lang.Object getParameter(java.lang.String)> -> _SOURCE_
<android.content.ContentProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)> -> _SOURCE_
<android.webkit.CookieSyncManager: void startSync()> -> _SOURCE_
<android.content.ContextWrapper: java.io.File getCodeCacheDir()> -> _SOURCE_
<java.util.zip.ZipEntry: long getCrc()> -> _SOURCE_
<android.telephony.ims.ImsCallSession$Listener: void callSessionUpdated(android.telephony.ims.ImsCallSession,android.telephony.ims.ImsCallProfile)> -> _SOURCE_
<android.animation.AnimatorListenerAdapter: void onAnimationStart(android.animation.Animator)> -> _SOURCE_
<android.os.Debug$MemoryInfo: int getOtherRss(int)> -> _SOURCE_
<android.content.ApexEnvironment: java.io.File getCredentialProtectedDataDirForUser(android.os.UserHandle)> -> _SOURCE_
<android.app.AppOpsManager$OpEntry: android.app.AppOpsManager$OpEventProxyInfo getLastProxyInfo(int,int,int)> -> _SOURCE_
<com.android.internal.telephony.GsmAlphabet: byte[] stringToGsm7BitPacked(java.lang.String)> -> _SOURCE_
<android.accessibilityservice.AccessibilityServiceInfo: android.content.pm.ResolveInfo getResolveInfo()> -> _SOURCE_
<com.android.internal.os.BatterySipper: double sumPower()> -> _SOURCE_
<android.preference.PreferenceManager: boolean isStorageCredentialProtected()> -> _SOURCE_
<android.app.WindowConfiguration: int updateFrom(android.app.WindowConfiguration)> -> _SOURCE_
<android.bluetooth.le.ScanRecord: byte[] getBytes()> -> _SOURCE_
<android.telephony.mbms.ServiceInfo: java.lang.String getServiceClassName()> -> _SOURCE_
<android.hardware.usb.UsbPort: boolean supportsEnableContaminantPresenceDetection()> -> _SOURCE_
<java.lang.StringBuffer: java.lang.StringBuffer reverse()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: int getMinLearnedBatteryCapacity()> -> _SOURCE_
<android.location.GpsMeasurement: double getAccumulatedDeltaRangeUncertaintyInMeters()> -> _SOURCE_
<android.service.autofill.CustomDescription: java.util.ArrayList getUpdates()> -> _SOURCE_
<com.android.internal.widget.RecyclerView$LayoutManager: boolean isAttachedToWindow()> -> _SOURCE_
<android.renderscript.RenderScript: void contextDump()> -> _SOURCE_
<android.accessibilityservice.AccessibilityService$ScreenshotResult: long getTimestamp()> -> _SOURCE_
<android.telephony.SubscriptionManager: int getDefaultSmsSubscriptionId()> -> _SOURCE_
<android.provider.DocumentsContract: boolean isRootsUri(android.content.Context,android.net.Uri)> -> _SOURCE_
<android.media.AudioSystem: int setPhoneState(int)> -> _SOURCE_
<android.media.AudioManager: boolean isOffloadedPlaybackSupported(android.media.AudioFormat,android.media.AudioAttributes)> -> _SOURCE_
<android.app.KeyguardManager: boolean inKeyguardRestrictedInputMode()> -> _SOURCE_
<android.net.UrlQuerySanitizer: android.net.UrlQuerySanitizer$ValueSanitizer getAmpAndSpaceLegal()> -> _SOURCE_
<javax.crypto.SecretKeyFactory: java.security.Provider getProvider()> -> _SOURCE_
<java.nio.file.attribute.UserPrincipalNotFoundException: java.lang.String getName()> -> _SOURCE_
<android.location.Address: java.lang.String getPhone()> -> _SOURCE_
<android.os.Temperature: int getStatus()> -> _SOURCE_
<java.net.InetSocketAddress: java.net.InetSocketAddress createUnresolved(java.lang.String,int)> -> _SOURCE_
<android.webkit.WebViewClient: void onReceivedLoginRequest(android.webkit.WebView,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.view.inputmethod.InputMethodSubtype: java.lang.String getExtraValue()> -> _SOURCE_
<android.graphics.fonts.Font: java.lang.String toString()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$DurationTimer: long getCurrentDurationMsLocked(long)> -> _SOURCE_
<android.telecom.InCallService: android.telecom.Phone getPhone()> -> _SOURCE_
<android.os.connectivity.WifiBatteryStats: long getScanTimeMillis()> -> _SOURCE_
<android.media.MediaRouter2: java.util.List getControllers()> -> _SOURCE_
<android.service.autofill.FillResponse: int[] getCancelIds()> -> _SOURCE_
<android.content.res.Resources: float getDimension(int)> -> _SOURCE_
<android.companion.CompanionDeviceManager: java.util.List getAssociations()> -> _SOURCE_
<android.media.tv.tuner.filter.PesSettings$Builder: android.media.tv.tuner.filter.PesSettings build()> -> _SOURCE_
<android.media.AudioTrack: int getTimestampWithStatus(android.media.AudioTimestamp)> -> _SOURCE_
<android.view.View: boolean isHardwareAccelerated()> -> _SOURCE_
<android.telephony.CellIdentityLte: int getCi()> -> _SOURCE_
<android.app.WindowContext: java.lang.Object getSystemService(java.lang.String)> -> _SOURCE_
<android.os.Debug: java.lang.String getCallers(int)> -> _SOURCE_
<java.util.concurrent.ConcurrentHashMap: boolean isEmpty()> -> _SOURCE_
<com.android.internal.telephony.gsm.SmsBroadcastConfigInfo: int getToCodeScheme()> -> _SOURCE_
<android.view.View: boolean isScrollContainer()> -> _SOURCE_
<android.location.LocationProvider: boolean hasMonetaryCost()> -> _SOURCE_
<android.view.MotionEvent: float getTouchMinor(int)> -> _SOURCE_
<android.content.ContentProvider: android.net.Uri validateIncomingUri(android.net.Uri)> -> _SOURCE_
<android.telephony.CellSignalStrengthWcdma: int getLevel()> -> _SOURCE_
<android.media.MediaRouter$RouteInfo: android.graphics.drawable.Drawable getIconDrawable()> -> _SOURCE_
<android.view.contentcapture.ContentCaptureManager: void dump(java.lang.String,java.io.PrintWriter)> -> _SOURCE_
<android.hardware.location.NanoAppBinary: byte getTargetChreApiMinorVersion()> -> _SOURCE_
<java.time.Duration: java.lang.String toString()> -> _SOURCE_
<android.app.usage.UsageStatsManager: int getAppStandbyBucket(java.lang.String)> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: int getVersion()> -> _SOURCE_
<android.hardware.radio.RadioManager$BandDescriptor: boolean isFmBand()> -> _SOURCE_
<android.app.Notification$DecoratedCustomViewStyle: android.widget.RemoteViews makeBigContentView()> -> _SOURCE_
<java.lang.ThreadGroup: int activeGroupCount()> -> _SOURCE_
<android.hardware.camera2.legacy.RequestHolder: boolean requestFailed()> -> _SOURCE_
<android.graphics.ColorSpace: android.graphics.ColorSpace$Model getModel()> -> _SOURCE_
<android.os.UserManager: java.util.List getAllProfiles()> -> _SOURCE_
<android.view.DragEvent: java.lang.String toString()> -> _SOURCE_
<android.telephony.ServiceState: java.lang.String getOperatorAlphaShort()> -> _SOURCE_
<android.util.MonthDisplayHelper: int[] getDigitsForRow(int)> -> _SOURCE_
<android.app.FragmentController: android.app.FragmentController createController(android.app.FragmentHostCallback)> -> _SOURCE_
<java.util.Base64: java.util.Base64$Decoder getDecoder()> -> _SOURCE_
<android.content.pm.ApplicationInfo: boolean isPrivilegedApp()> -> _SOURCE_
<android.content.pm.SigningInfo: android.content.pm.Signature[] getApkContentsSigners()> -> _SOURCE_
<android.service.autofill.ValueFinder: java.lang.String findByAutofillId(android.view.autofill.AutofillId)> -> _SOURCE_
<com.android.internal.widget.RecyclerView$SmoothScroller: int getChildCount()> -> _SOURCE_
<android.service.notification.ZenModeConfig$ScheduleInfo: java.lang.String toString()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: int getChildCount()> -> _SOURCE_
<javax.crypto.ExemptionMechanism: java.security.Provider getProvider()> -> _SOURCE_
<android.service.controls.templates.RangeTemplate: float getCurrentValue()> -> _SOURCE_
<android.os.Parcel: int dataCapacity()> -> _SOURCE_
<android.widget.ActivityChooserModel: int getActivityIndex(android.content.pm.ResolveInfo)> -> _SOURCE_
<android.os.HidlMemoryUtil: byte[] hidlMemoryToByteArray(android.os.HidlMemory)> -> _SOURCE_
<android.content.ContentResolver: android.content.IContentProvider acquireProvider(java.lang.String)> -> _SOURCE_
<java.net.NetworkInterface: java.lang.String getDisplayName()> -> _SOURCE_
<android.os.UserHandle: void formatUid(java.lang.StringBuilder,int)> -> _SOURCE_
<android.media.tv.TvContract: android.net.Uri buildRecordedProgramUri(long)> -> _SOURCE_
<android.hardware.camera2.impl.CameraDeviceImpl: void createCaptureSession(android.hardware.camera2.params.SessionConfiguration)> -> _SOURCE_
<android.hardware.camera2.legacy.ParameterUtils: java.lang.String stringFromAreaList(java.util.List)> -> _SOURCE_
<android.telecom.Connection$VideoProvider: com.android.internal.telecom.IVideoProvider getInterface()> -> _SOURCE_
<android.nfc.NfcAdapter: boolean isSecureNfcSupported()> -> _SOURCE_
<android.telephony.ims.feature.ImsFeature: android.telephony.ims.feature.ImsFeature$Capabilities queryCapabilityStatus()> -> _SOURCE_
<android.service.autofill.Dataset: android.widget.RemoteViews getFieldPresentation(int)> -> _SOURCE_
<java.lang.Class: java.lang.Package getPackage()> -> _SOURCE_
<android.content.IntentFilter: int countDataPaths()> -> _SOURCE_
<android.media.MediaCodecInfo: boolean isEncoder()> -> _SOURCE_
<android.net.apf.ApfCapabilities: java.lang.String toString()> -> _SOURCE_
<android.bluetooth.BluetoothSocket: java.io.InputStream getInputStream()> -> _SOURCE_
<android.widget.AutoCompleteTextView: java.lang.CharSequence getCompletionHint()> -> _SOURCE_
<android.content.PermissionChecker: int checkCallingPermissionForPreflight(android.content.Context,java.lang.String,java.lang.String)> -> _SOURCE_
<android.view.contentcapture.ViewNode: android.view.autofill.AutofillId getAutofillId()> -> _SOURCE_
<android.os.BatteryStats$HistoryItem: boolean isDeltaData()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean setLine1NumberForDisplay(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.bluetooth.BluetoothAvrcpController: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
<android.hardware.location.GeofenceHardwareRequestParcelable: int getUnknownTimer()> -> _SOURCE_
<android.media.tv.TvInputInfo: android.hardware.hdmi.HdmiDeviceInfo getHdmiDeviceInfo()> -> _SOURCE_
<android.telephony.ModemActivityInfo: java.util.List getTransmitPowerInfo()> -> _SOURCE_
<android.security.keystore.KeyProtection: boolean isUserPresenceRequired()> -> _SOURCE_
<android.net.apf.ApfCapabilities: boolean hasDataAccess()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo getTouchDelegateInfo()> -> _SOURCE_
<android.media.tv.tuner.frontend.IsdbsFrontendSettings$Builder: android.media.tv.tuner.frontend.IsdbsFrontendSettings build()> -> _SOURCE_
<android.net.MacAddress: boolean isLocallyAssigned()> -> _SOURCE_
<android.media.tv.tuner.filter.IpFilterConfiguration: byte[] getSrcIpAddress()> -> _SOURCE_
<java.util.logging.LogRecord: java.lang.String getResourceBundleName()> -> _SOURCE_
<android.graphics.RectF: java.lang.String toString()> -> _SOURCE_
<com.android.internal.widget.RecyclerView$SmoothScroller: int getTargetPosition()> -> _SOURCE_
<android.app.prediction.AppPredictor: void requestPredictionUpdate()> -> _SOURCE_
<android.media.EncoderCapabilities: java.util.List getVideoEncoders()> -> _SOURCE_
<android.hardware.usb.UsbPort: android.hardware.usb.UsbPortStatus getStatus()> -> _SOURCE_
<android.bluetooth.BluetoothHealthAppConfiguration: java.lang.String getName()> -> _SOURCE_
<android.media.tv.tuner.frontend.AnalogFrontendCapabilities: int getSignalTypeCapability()> -> _SOURCE_
<android.os.FactoryTest: int getMode()> -> _SOURCE_
<java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String,java.lang.String)> -> _SOURCE_
<android.graphics.RenderNode: void endAllAnimators()> -> _SOURCE_
<android.view.accessibility.AccessibilityInteractionClient: void setFindAccessibilityNodeInfosResult(java.util.List,int)> -> _SOURCE_
<android.os.ExternalVibration: java.lang.String toString()> -> _SOURCE_
<android.content.pm.dex.DexMetadataHelper: java.io.File findDexMetadataForFile(java.io.File)> -> _SOURCE_
<android.media.AudioTrack: int getOffloadDelay()> -> _SOURCE_
<android.media.tv.TvContract: boolean isChannelUriForPassthroughInput(android.net.Uri)> -> _SOURCE_
<android.preference.PreferenceManager: android.preference.PreferenceDataStore getPreferenceDataStore()> -> _SOURCE_
<android.security.keystore.recovery.KeyChainSnapshot: int getMaxAttempts()> -> _SOURCE_
<java.security.KeyStore$PrivateKeyEntry: java.util.Set getAttributes()> -> _SOURCE_
<android.bluetooth.le.ScanFilter: android.os.ParcelUuid getServiceSolicitationUuidMask()> -> _SOURCE_
<android.security.keystore.KeyProtection: java.lang.String[] getEncryptionPaddings()> -> _SOURCE_
<android.widget.ViewAnimator: android.view.View getCurrentView()> -> _SOURCE_
<android.bluetooth.le.AdvertiseSettings: java.lang.String toString()> -> _SOURCE_
<android.net.NetworkAgentConfig: java.lang.String getSubscriberId()> -> _SOURCE_
<java.util.Arrays: java.lang.String toString(int[])> -> _SOURCE_
<android.net.LinkProperties: java.util.List getValidatedPrivateDnsServers()> -> _SOURCE_
<android.content.pm.ApplicationInfo: java.lang.String getBaseResourcePath()> -> _SOURCE_
<android.net.metrics.ValidationProbeEvent: java.lang.String getProbeName(int)> -> _SOURCE_
<android.util.KeyValueListParser$IntValue: void dump(java.io.PrintWriter,java.lang.String)> -> _SOURCE_
<android.hardware.biometrics.BiometricPrompt$AuthenticationCallback: void onAuthenticationFailed()> -> _SOURCE_
<android.media.Metadata: java.util.Set keySet()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean getCrossProfileCallerIdDisabled(android.content.ComponentName)> -> _SOURCE_
<java.security.KeyFactory: java.lang.String getAlgorithm()> -> _SOURCE_
<android.telephony.TelephonyManager: android.util.Pair getRadioHalVersion()> -> _SOURCE_
<android.media.tv.tuner.frontend.DvbsFrontendSettings: int getType()> -> _SOURCE_
<android.nfc.Tag: java.lang.String[] getTechList()> -> _SOURCE_
<android.telephony.SignalStrength: int getEvdoAsuLevel()> -> _SOURCE_
<android.os.NativeHandle: java.io.FileDescriptor getFileDescriptor()> -> _SOURCE_
<android.location.GnssMeasurement: int getState()> -> _SOURCE_
<android.permission.PermissionControllerService: void onApplyStagedRuntimePermissionBackup(java.lang.String,android.os.UserHandle,java.util.function.Consumer)> -> _SOURCE_
<java.util.Currency: java.lang.String getDisplayName()> -> _SOURCE_
<android.media.soundtrigger.SoundTriggerDetector$EventPayload: byte[] getTriggerAudio()> -> _SOURCE_
<java.text.DecimalFormat: int getMinimumFractionDigits()> -> _SOURCE_
<android.telephony.IccOpenLogicalChannelResponse: int getStatus()> -> _SOURCE_
<android.content.ClipData$Item: java.lang.String getHtmlText()> -> _SOURCE_
<javax.net.ssl.HttpsURLConnection: javax.net.ssl.SSLSocketFactory getSSLSocketFactory()> -> _SOURCE_
<com.android.internal.view.menu.ListMenuPresenter: android.widget.ListAdapter getAdapter()> -> _SOURCE_
<java.util.regex.PatternSyntaxException: int getIndex()> -> _SOURCE_
<java.util.EventObject: java.lang.String toString()> -> _SOURCE_
<com.android.ims.internal.uce.common.UceLong: int getClientId()> -> _SOURCE_
<android.app.Activity: int getRequestedOrientation()> -> _SOURCE_
<android.media.AudioMetadata: java.nio.ByteBuffer toByteBuffer(android.media.AudioMetadata$BaseMap,java.nio.ByteOrder)> -> _SOURCE_
<android.speech.tts.TtsEngines: java.lang.String getDefaultEngine()> -> _SOURCE_
<android.app.ActivityManager$RunningAppProcessInfo: int procStateToImportance(int)> -> _SOURCE_
<android.telecom.AuthenticatorService$Authenticator: java.lang.String getAuthTokenLabel(java.lang.String)> -> _SOURCE_
<android.telecom.TelecomManager: java.lang.String getDefaultDialerPackage()> -> _SOURCE_
<android.media.tv.TvInputInfo: android.graphics.drawable.Drawable loadIcon(android.content.Context,int)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean clearResetPasswordToken(android.content.ComponentName)> -> _SOURCE_
<android.net.NetworkCapabilities: int[] getCapabilities()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: int getPasswordMinimumLowerCase(android.content.ComponentName)> -> _SOURCE_
<android.bluetooth.BluetoothGattServerCallback: void onMtuChanged(android.bluetooth.BluetoothDevice,int)> -> _SOURCE_
<android.telephony.euicc.EuiccCardManager: void retrieveNotification(java.lang.String,int,java.util.concurrent.Executor,android.telephony.euicc.EuiccCardManager$ResultCallback)> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing: int getChannelCount()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getStateDescription()> -> _SOURCE_
<android.media.session.PlaybackState: long getActiveQueueItemId()> -> _SOURCE_
<android.app.AppOpsManager: int strDebugOpToOp(java.lang.String)> -> _SOURCE_
<java.time.chrono.ChronoZonedDateTime: java.time.chrono.ChronoZonedDateTime minus(long,java.time.temporal.TemporalUnit)> -> _SOURCE_
<android.bluetooth.BluetoothHeadset: boolean setActiveDevice(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<android.telephony.ClientRequestStats: java.lang.String toString()> -> _SOURCE_
<android.bluetooth.SdpPseRecord: java.lang.String toString()> -> _SOURCE_
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: java.util.Set getOutputFormats()> -> _SOURCE_
<android.content.res.Resources: android.content.res.Configuration[] getSizeConfigurations()> -> _SOURCE_
<com.android.internal.util.TypedProperties: double getDouble(java.lang.String)> -> _SOURCE_
<android.media.AudioRecordingMonitorImpl: android.media.AudioRecordingConfiguration getActiveRecordingConfiguration()> -> _SOURCE_
<android.inputmethodservice.MultiClientInputMethodServiceDelegate: void onDestroy()> -> _SOURCE_
<android.app.slice.SliceProvider: java.util.Collection onGetSliceDescendants(android.net.Uri)> -> _SOURCE_
<android.view.contentcapture.ContentCaptureContext: int getFlags()> -> _SOURCE_
<android.media.ExifInterface: boolean hasThumbnail()> -> _SOURCE_
<android.hardware.radio.RadioManager$ModuleProperties: java.lang.String getSerial()> -> _SOURCE_
<android.view.autofill.AutofillValue: int getListValue()> -> _SOURCE_
<android.provider.FontRequest: java.lang.String getIdentifier()> -> _SOURCE_
<android.net.util.NetUtils: boolean addressTypeMatches(java.net.InetAddress,java.net.InetAddress)> -> _SOURCE_
<android.timezone.CountryTimeZones: java.lang.String toString()> -> _SOURCE_
<android.net.IpConfiguration: java.lang.String toString()> -> _SOURCE_
<android.webkit.PacProcessor: android.webkit.PacProcessor getInstance()> -> _SOURCE_
<android.security.keystore.KeyInfo: boolean isUserAuthenticationRequirementEnforcedBySecureHardware()> -> _SOURCE_
<android.media.AudioPlaybackCaptureConfiguration: int[] getExcludeUsages()> -> _SOURCE_
<android.telephony.TelephonyManager: void setCarrierTestOverride(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.nfc.NfcAdapter: boolean invokeBeam(android.nfc.BeamShareData)> -> _SOURCE_
<java.lang.String: boolean contains(java.lang.CharSequence)> -> _SOURCE_
<java.time.YearMonth: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)> -> _SOURCE_
<android.location.LocationProvider: boolean requiresCell()> -> _SOURCE_
<android.net.LinkProperties: boolean isIdenticalWakeOnLan(android.net.LinkProperties)> -> _SOURCE_
<android.permission.PermissionManager: void grantDefaultPermissionsToEnabledCarrierApps(java.lang.String[],android.os.UserHandle,java.util.concurrent.Executor,java.util.function.Consumer)> -> _SOURCE_
<android.app.usage.UsageEvents$Event: java.lang.String getShortcutId()> -> _SOURCE_
<android.app.trust.TrustManager: boolean isTrustUsuallyManaged(int)> -> _SOURCE_
<android.view.textclassifier.TextClassifierEvent: int[] getActionIndices()> -> _SOURCE_
<android.telephony.ims.stub.ImsUtImplBase: com.android.ims.internal.IImsUt getInterface()> -> _SOURCE_
<android.bluetooth.BluetoothSap: boolean isConnected(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<android.app.SystemServiceRegistry: java.lang.Object[] createServiceCache()> -> _SOURCE_
<android.view.ViewRootImpl: android.view.View keyboardNavigationClusterSearch(android.view.View,int)> -> _SOURCE_
<java.time.LocalDate: java.lang.String toString()> -> _SOURCE_
<java.util.concurrent.atomic.AtomicInteger: int get()> -> _SOURCE_
<android.service.quickaccesswallet.GetWalletCardsRequest: int getMaxCards()> -> _SOURCE_
<android.content.res.Resources: android.view.DisplayAdjustments getDisplayAdjustments()> -> _SOURCE_
<java.io.Console: java.io.PrintWriter writer()> -> _SOURCE_
<android.app.Person: android.net.Uri getIconUri()> -> _SOURCE_
<android.view.animation.BounceInterpolator: long createNativeInterpolator()> -> _SOURCE_
<android.app.backup.BackupTransport: long requestFullBackupTime()> -> _SOURCE_
<java.util.logging.LogRecord: int getThreadID()> -> _SOURCE_
<android.telephony.ims.feature.RcsFeature: android.telephony.ims.stub.RcsPresenceExchangeImplBase getPresenceExchangeImpl()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeIdManager: void registerViewWithId(android.view.View,int)> -> _SOURCE_
<android.content.Context: android.content.AutofillOptions getAutofillOptions()> -> _SOURCE_
<android.provider.BlockedNumberContract$SystemContract: void endBlockSuppression(android.content.Context)> -> _SOURCE_
<android.os.SystemProperties: java.lang.String get(java.lang.String)> -> _SOURCE_
<android.content.pm.PackageItemInfo: android.content.res.XmlResourceParser loadXmlMetaData(android.content.pm.PackageManager,java.lang.String)> -> _SOURCE_
<android.hardware.usb.UsbPort: java.lang.String contaminantPresenceStatusToString(int)> -> _SOURCE_
<android.os.Environment: java.io.File getSystemExtDirectory()> -> _SOURCE_
<android.media.tv.tunerresourcemanager.TunerDemuxRequest: int getClientId()> -> _SOURCE_
<android.content.pm.PackageManager: java.lang.String permissionFlagToString(int)> -> _SOURCE_
<android.telecom.ConnectionService: java.util.Collection getAllConferences()> -> _SOURCE_
<android.os.connectivity.CellularBatteryStats: long getSleepTimeMillis()> -> _SOURCE_
<com.android.internal.content.FileSystemProvider: android.os.Bundle getDocumentMetadata(java.lang.String)> -> _SOURCE_
<android.content.ContextWrapper: android.content.pm.PackageManager getPackageManager()> -> _SOURCE_
<android.os.SharedMemory: android.os.ParcelFileDescriptor getFdDup()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.CharSequence getSimSpecificCarrierIdName()> -> _SOURCE_
<android.media.AudioDeviceCallback: void onAudioDevicesRemoved(android.media.AudioDeviceInfo[])> -> _SOURCE_
<android.bluetooth.BluetoothManager: java.util.List getConnectedDevices(int)> -> _SOURCE_
<android.location.GnssMeasurement: double getCn0DbHz()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: long forceNetworkLogs()> -> _SOURCE_
<java.net.JarURLConnection: java.util.jar.Manifest getManifest()> -> _SOURCE_
<android.media.AudioFormat: java.lang.String toString()> -> _SOURCE_
<android.app.RemoteInput$Builder: android.app.RemoteInput build()> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec: boolean isDigestsSpecified()> -> _SOURCE_
<java.net.ProxySelector: java.net.ProxySelector getDefault()> -> _SOURCE_
<android.view.MotionEvent: int getId()> -> _SOURCE_
<android.location.Location: boolean hasVerticalAccuracy()> -> _SOURCE_
<android.view.accessibility.AccessibilityEvent: int getRecordCount()> -> _SOURCE_
<android.telephony.PcoData: java.lang.String toString()> -> _SOURCE_
<java.util.SimpleTimeZone: java.lang.Object clone()> -> _SOURCE_
<android.graphics.fonts.Font: java.io.File getFile()> -> _SOURCE_
<android.service.notification.Adjustment: java.lang.String getIssuer()> -> _SOURCE_
<android.location.LocationManager: void flushGnssBatch()> -> _SOURCE_
<android.view.KeyEvent: java.lang.String getCharacters()> -> _SOURCE_
<android.security.FileIntegrityManager: boolean isApkVeritySupported()> -> _SOURCE_
<android.content.ContextWrapper: android.content.Context createDeviceProtectedStorageContext()> -> _SOURCE_
<java.time.YearMonth: long getLong(java.time.temporal.TemporalField)> -> _SOURCE_
<android.view.ViewConfiguration: int getKeyRepeatTimeout()> -> _SOURCE_
<android.telephony.mbms.FileServiceInfo: java.util.List getFiles()> -> _SOURCE_
<android.view.textclassifier.ConversationActions$Request: java.lang.String getCallingPackageName()> -> _SOURCE_
<android.content.ContentProvider: int getUserIdFromUri(android.net.Uri)> -> _SOURCE_
<android.os.UserManager: boolean isUserTypeRestricted(java.lang.String)> -> _SOURCE_
<com.android.internal.app.ChooserActivityLogger: void logSharesheetDirectLoadComplete()> -> _SOURCE_
<android.view.WindowInsets$Type: int systemBars()> -> _SOURCE_
<java.lang.Package: java.lang.String getSpecificationVendor()> -> _SOURCE_
<java.net.URLConnection: long getContentLengthLong()> -> _SOURCE_
<android.view.inputmethod.InputMethodManager: void notifySuggestionPicked(android.text.style.SuggestionSpan,java.lang.String,int)> -> _SOURCE_
<android.telephony.SmsManager: boolean isImsSmsSupported()> -> _SOURCE_
<android.security.net.config.RootTrustManager: void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String,javax.net.ssl.SSLEngine)> -> _SOURCE_
<android.content.res.ApkAssets: boolean isForLoader()> -> _SOURCE_
<java.security.MessageDigest: java.lang.String toString()> -> _SOURCE_
<android.net.NetworkPolicyManager: java.lang.String uidPoliciesToString(int)> -> _SOURCE_
<android.os.storage.StorageManager: java.lang.String getPrimaryStorageUuid()> -> _SOURCE_
<android.provider.DocumentsProvider: java.lang.String copyDocument(java.lang.String,java.lang.String)> -> _SOURCE_
<android.media.tv.tunerresourcemanager.ResourceClientProfile: int getUseCase()> -> _SOURCE_
<android.service.voice.VoiceInteractionService: java.util.Set onGetSupportedVoiceActions(java.util.Set)> -> _SOURCE_
<com.android.internal.telephony.uicc.asn1.Asn1Node: int getDataLength()> -> _SOURCE_
<android.os.connectivity.WifiActivityEnergyInfo: long getControllerScanDurationMillis()> -> _SOURCE_
<android.content.pm.LauncherApps: void registerCallback(android.content.pm.LauncherApps$Callback,android.os.Handler)> -> _SOURCE_
<android.telephony.ServiceState: int getCdmaEriIconMode()> -> _SOURCE_
<android.app.LoaderManager: android.content.Loader getLoader(int)> -> _SOURCE_
<android.view.autofill.AutofillManager: java.lang.String getDefaultFieldClassificationAlgorithm()> -> _SOURCE_
<android.content.rollback.PackageRollbackInfo: android.util.IntArray getPendingBackups()> -> _SOURCE_
<android.media.MediaDrm: java.util.List getSupportedCryptoSchemes()> -> _SOURCE_
<android.app.admin.SecurityLog$SecurityEvent: long getId()> -> _SOURCE_
<android.content.pm.LauncherApps: java.util.List getAllPackageInstallerSessions()> -> _SOURCE_
<android.app.AppOpsManager$HistoricalOps: android.app.AppOpsManager$HistoricalOps spliceFromBeginning(double)> -> _SOURCE_
<android.telephony.ims.stub.RcsSipOptionsImplBase: void respondToCapabilityRequest(java.lang.String,android.telephony.ims.RcsContactUceCapability,int)> -> _SOURCE_
<android.telephony.TelephonyManager: int getCurrentPhoneType(int)> -> _SOURCE_
<android.media.MediaRouter2Utils: java.lang.String getProviderId(java.lang.String)> -> _SOURCE_
<android.view.DisplayAddress: android.view.DisplayAddress$Network fromMacAddress(java.lang.String)> -> _SOURCE_
<android.telephony.PhoneStateListener: void onRegistrationFailed(android.telephony.CellIdentity,java.lang.String,int,int,int)> -> _SOURCE_
<java.lang.Package: java.lang.Package getPackage(java.lang.String)> -> _SOURCE_
<android.os.Bundle: char[] getCharArray(java.lang.String)> -> _SOURCE_
<javax.security.auth.callback.PasswordCallback: java.lang.String getPrompt()> -> _SOURCE_
<com.android.internal.telephony.SmsApplication: android.content.ComponentName getDefaultMmsApplication(android.content.Context,boolean)> -> _SOURCE_
<android.app.backup.BackupDataInput: void skipEntityData()> -> _SOURCE_
<android.widget.Toolbar: boolean canShowOverflowMenu()> -> _SOURCE_
<android.provider.ContactsContract$ProfileSyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)> -> _SOURCE_
<android.os.UserManager: android.os.Bundle getUserRestrictions()> -> _SOURCE_
<android.content.pm.PermissionGroupInfo: java.lang.CharSequence loadDescription(android.content.pm.PackageManager)> -> _SOURCE_
<android.telephony.mbms.vendor.MbmsGroupCallServiceBase: void updateGroupCall(int,long,java.util.List,java.util.List)> -> _SOURCE_
<android.view.Display: int getState()> -> _SOURCE_
<android.text.format.DateFormat: java.lang.CharSequence format(java.lang.CharSequence,long)> -> _SOURCE_
<android.os.LocaleList: int getFirstMatchIndex(java.lang.String[])> -> _SOURCE_
<android.telephony.SubscriptionManager: int getActiveSubscriptionInfoCount()> -> _SOURCE_
<android.security.KeyPairGeneratorSpec$Builder: android.security.KeyPairGeneratorSpec$Builder setAlias(java.lang.String)> -> _SOURCE_
<android.content.AutofillOptions: void dumpShort(java.io.PrintWriter)> -> _SOURCE_
<android.view.contentcapture.ViewNode: android.os.LocaleList getLocaleList()> -> _SOURCE_
<android.debug.PairDevice: java.lang.String getGuid()> -> _SOURCE_
<android.preference.PreferenceManager: int getSharedPreferencesMode()> -> _SOURCE_
<com.android.internal.os.ProcessCpuTracker: int getLastSystemTime()> -> _SOURCE_
<javax.net.ssl.SSLContext: java.security.Provider getProvider()> -> _SOURCE_
<android.view.inputmethod.InputMethodInfo: boolean isDefault(android.content.Context)> -> _SOURCE_
<java.util.AbstractCollection: java.lang.String toString()> -> _SOURCE_
<android.hardware.camera2.params.OisSample: java.lang.String toString()> -> _SOURCE_
<android.hardware.display.AmbientDisplayConfiguration: java.lang.String longPressSensorType()> -> _SOURCE_
<android.telecom.Call$Details: android.os.Bundle getExtras()> -> _SOURCE_
<java.lang.Character: java.lang.String toString(char)> -> _SOURCE_
<android.view.contentcapture.ViewNode: android.os.Bundle getExtras()> -> _SOURCE_
<com.android.internal.widget.LockscreenCredential: com.android.internal.widget.LockscreenCredential createPinOrNone(java.lang.CharSequence)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getDeviceSoftwareVersion()> -> _SOURCE_
<android.content.Context: android.content.Context createFeatureContext(java.lang.String)> -> _SOURCE_
<android.hardware.camera2.impl.CameraMetadataNative: java.util.ArrayList getRecommendedStreamConfigurations()> -> _SOURCE_
<android.service.voice.VoiceInteractionSession: void onHandleScreenshot(android.graphics.Bitmap)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()> -> _SOURCE_
<android.view.autofill.AutofillManager: boolean hasAutofillFeature()> -> _SOURCE_
<java.security.spec.PSSParameterSpec: java.lang.String getDigestAlgorithm()> -> _SOURCE_
<android.text.style.SuggestionSpan: java.lang.String getLocale()> -> _SOURCE_
<java.time.zone.ZoneOffsetTransitionRule: java.lang.String toString()> -> _SOURCE_
<android.location.Criteria: int getAccuracy()> -> _SOURCE_
<android.util.EventLog$Event: int getThreadId()> -> _SOURCE_
<android.graphics.Point: java.lang.String toString()> -> _SOURCE_
<android.media.RingtoneManager: void setActualDefaultRingtoneUri(android.content.Context,int,android.net.Uri)> -> _SOURCE_
<android.mtp.MtpStorageInfo: java.lang.String getVolumeIdentifier()> -> _SOURCE_
<java.time.zone.ZoneOffsetTransition: java.lang.String toString()> -> _SOURCE_
<android.util.SparseIntArray: int[] copyKeys()> -> _SOURCE_
<android.location.GpsMeasurement: double getCarrierPhaseUncertainty()> -> _SOURCE_
<com.android.ims.internal.uce.presence.PresResInfo: java.lang.String getResUri()> -> _SOURCE_
<android.os.UserManager: boolean isManagedProfile(int)> -> _SOURCE_
<java.lang.Character$Subset: java.lang.String toString()> -> _SOURCE_
<com.android.internal.policy.PhoneWindow: int getStatusBarColor()> -> _SOURCE_
<android.os.storage.StorageManager: android.os.storage.VolumeInfo getPrimaryPhysicalVolume()> -> _SOURCE_
<android.service.voice.VoiceInteractionSessionService: android.os.IBinder onBind(android.content.Intent)> -> _SOURCE_
<android.hardware.biometrics.CryptoObject: javax.crypto.Cipher getCipher()> -> _SOURCE_
<android.hardware.display.DisplayManagerGlobal: boolean isUidPresentOnDisplay(int,int)> -> _SOURCE_
<com.android.internal.telephony.SmsApplication: void setDefaultApplicationAsUser(java.lang.String,android.content.Context,int)> -> _SOURCE_
<android.widget.SearchView: java.lang.CharSequence getQuery()> -> _SOURCE_
<android.security.KeyStore: java.security.InvalidKeyException getInvalidKeyException(java.lang.String,int,android.security.KeyStoreException)> -> _SOURCE_
<android.hardware.location.NanoAppInstanceInfo: int getNeededReadMemBytes()> -> _SOURCE_
<java.net.URL: java.lang.String getUserInfo()> -> _SOURCE_
<android.app.NotificationHistory: void addNewNotificationToWrite(android.app.NotificationHistory$HistoricalNotification)> -> _SOURCE_
<android.os.Parcel: java.lang.String readStringNoHelper()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: int getDischargeAmountScreenOn()> -> _SOURCE_
<android.app.ApplicationPackageManager: void verifyIntentFilter(int,int,java.util.List)> -> _SOURCE_
<android.hardware.usb.UsbDevice: int getConfigurationCount()> -> _SOURCE_
<android.bluetooth.BluetoothGattCallback: void onConnectionUpdated(android.bluetooth.BluetoothGatt,int,int,int,int)> -> _SOURCE_
<android.os.LocaleList: java.util.Locale getFirstMatchWithEnglishSupported(java.lang.String[])> -> _SOURCE_
<android.os.Debug: void resetGlobalAllocCount()> -> _SOURCE_
<android.service.dreams.DreamService: void onWindowFocusChanged(boolean)> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo: void writeToParcel(android.os.Parcel,int)> -> _SOURCE_
<android.os.Debug: java.lang.String[] getVmFeatureList()> -> _SOURCE_
<android.telephony.euicc.EuiccCardManager: void listNotifications(java.lang.String,int,java.util.concurrent.Executor,android.telephony.euicc.EuiccCardManager$ResultCallback)> -> _SOURCE_
<android.app.AppOpsManager: boolean opAllowsReset(int)> -> _SOURCE_
<android.os.Bundle: java.util.ArrayList getIntegerArrayList(java.lang.String)> -> _SOURCE_
<android.view.accessibility.AccessibilityWindowInfo: java.lang.String toString()> -> _SOURCE_
<java.nio.channels.ServerSocketChannel: int validOps()> -> _SOURCE_
<android.media.tv.tunerresourcemanager.TunerLnbRequest: java.lang.String toString()> -> _SOURCE_
<android.telephony.ims.stub.ImsCallSessionImplBase: void sendRttModifyResponse(boolean)> -> _SOURCE_
<android.content.pm.PermissionInfo: int fixProtectionLevel(int)> -> _SOURCE_
<android.app.backup.FullBackupDataOutput: android.app.backup.BackupDataOutput getData()> -> _SOURCE_
<android.content.ContextWrapper: android.content.Context createContextForSplit(java.lang.String)> -> _SOURCE_
<android.hardware.radio.RadioManager$BandDescriptor: int getRegion()> -> _SOURCE_
<android.content.ClipData: android.content.ClipData newHtmlText(java.lang.CharSequence,java.lang.CharSequence,java.lang.String)> -> _SOURCE_
<javax.security.auth.Subject: java.util.Set getPublicCredentials(java.lang.Class)> -> _SOURCE_
<android.hardware.camera2.CameraCharacteristics$Key: java.lang.String toString()> -> _SOURCE_
<android.widget.RemoteViews: android.widget.RemoteViews clone()> -> _SOURCE_
<android.media.tv.tuner.dvr.DvrPlayback: int configure(android.media.tv.tuner.dvr.DvrSettings)> -> _SOURCE_
<java.io.ObjectStreamClass: java.lang.Class forClass()> -> _SOURCE_
<android.app.admin.SystemUpdateInfo: int getSecurityPatchState()> -> _SOURCE_
<android.appwidget.AppWidgetHost: int[] getAppWidgetIds()> -> _SOURCE_
<android.hardware.usb.UsbPortStatus: int getContaminantDetectionStatus()> -> _SOURCE_
<android.media.tv.tuner.frontend.Atsc3FrontendCapabilities: int getDemodOutputFormatCapability()> -> _SOURCE_
<android.view.contentcapture.ViewNode: int getId()> -> _SOURCE_
<android.telephony.cdma.CdmaSmsCbProgramData: java.lang.String toString()> -> _SOURCE_
<android.app.DownloadManager: void onMediaStoreDownloadsDeleted(android.util.LongSparseArray)> -> _SOURCE_
<android.content.rollback.PackageRollbackInfo: boolean isApkInApex()> -> _SOURCE_
<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: boolean allUidTimesAvailable()> -> _SOURCE_
<android.telephony.ims.RcsUceAdapter: boolean isUceSettingEnabled()> -> _SOURCE_
<android.companion.WifiDeviceFilter: android.net.MacAddress getBssid()> -> _SOURCE_
<android.media.tv.tuner.filter.PesEvent: int getStreamId()> -> _SOURCE_
<android.content.res.loader.ResourcesProvider: android.content.res.ApkAssets getApkAssets()> -> _SOURCE_
<android.view.Display: android.view.DisplayAddress getAddress()> -> _SOURCE_
<android.telephony.TelephonyDisplayInfo: int getNetworkType()> -> _SOURCE_
<com.android.internal.app.ChooserActivity: boolean isAppPredictionServiceAvailable()> -> _SOURCE_
<java.security.cert.CertPathValidator: java.lang.String getAlgorithm()> -> _SOURCE_
<android.filterfw.core.ProgramPort: java.lang.String toString()> -> _SOURCE_
<android.media.session.MediaController$PlaybackInfo: java.lang.String getVolumeControlId()> -> _SOURCE_
<android.media.tv.tuner.filter.IpFilterConfiguration$Builder: android.media.tv.tuner.filter.IpFilterConfiguration$Builder setSrcIpAddress(byte[])> -> _SOURCE_
<android.bluetooth.le.AdvertiseData: java.lang.String toString()> -> _SOURCE_
<android.app.timezone.RulesState: java.lang.String toString()> -> _SOURCE_
<android.text.format.DateUtils: java.lang.CharSequence formatDuration(long)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getNetworkOperator(int)> -> _SOURCE_
<java.net.URLConnection: java.lang.Object getContent(java.lang.Class[])> -> _SOURCE_
<android.content.ContextWrapper: java.lang.String getSystemServiceName(java.lang.Class)> -> _SOURCE_
<java.nio.charset.CharsetEncoder: float averageBytesPerChar()> -> _SOURCE_
<android.telephony.PhoneNumberUtils: int getMinMatchForTest()> -> _SOURCE_
<android.media.tv.TvInputInfo$Builder: android.media.tv.TvInputInfo$Builder setHdmiDeviceInfo(android.hardware.hdmi.HdmiDeviceInfo)> -> _SOURCE_
<android.security.keystore.recovery.RecoveryCertPath: java.security.cert.CertPath getCertPath()> -> _SOURCE_
<android.app.LocalActivityManager: java.lang.String getCurrentId()> -> _SOURCE_
<android.content.ContextWrapper: android.graphics.drawable.Drawable getWallpaper()> -> _SOURCE_
<javax.net.ssl.SSLParameters: void setProtocols(java.lang.String[])> -> _SOURCE_
<com.android.internal.app.ChooserActivityLogger: void logSharesheetDirectLoadTimeout()> -> _SOURCE_
<android.telecom.PhoneAccount: android.telecom.PhoneAccount$Builder toBuilder()> -> _SOURCE_
<android.view.inputmethod.CursorAnchorInfo: android.graphics.RectF getCharacterBounds(int)> -> _SOURCE_
<android.app.admin.SystemUpdatePolicy: android.app.admin.SystemUpdatePolicy$InstallationOption getInstallationOptionAt(long)> -> _SOURCE_
<android.speech.tts.SynthesisRequest: int getSpeechRate()> -> _SOURCE_
<java.net.HttpURLConnection: boolean getFollowRedirects()> -> _SOURCE_
<com.android.internal.widget.RecyclerView: com.android.internal.widget.RecyclerView$OnFlingListener getOnFlingListener()> -> _SOURCE_
<android.app.ApplicationPackageManager: int movePrimaryStorage(android.os.storage.VolumeInfo)> -> _SOURCE_
<android.provider.MetadataReader: boolean isSupportedMimeType(java.lang.String)> -> _SOURCE_
<java.util.Properties: java.lang.String getProperty(java.lang.String)> -> _SOURCE_
<android.security.keystore.recovery.KeyChainSnapshot: long getCounterId()> -> _SOURCE_
<android.media.RoutingSessionInfo: int getVolume()> -> _SOURCE_
<java.security.KeyStore: java.security.Key getKey(java.lang.String,char[])> -> _SOURCE_
<android.app.AppOpsManager: java.lang.String opToRestriction(int)> -> _SOURCE_
<android.app.Activity: android.transition.Scene getContentScene()> -> _SOURCE_
<android.graphics.drawable.AnimatedStateListDrawable: void clearMutated()> -> _SOURCE_
<android.print.PrinterInfo: java.lang.String getDescription()> -> _SOURCE_
<java.nio.charset.CoderResult: java.nio.charset.CoderResult malformedForLength(int)> -> _SOURCE_
<android.os.Binder: java.lang.String getTransactionName(int)> -> _SOURCE_
<android.hardware.camera2.params.HighSpeedVideoConfiguration: int getFpsMin()> -> _SOURCE_
<android.media.JetPlayer: int getMaxTracks()> -> _SOURCE_
<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)> -> _SOURCE_
<java.util.logging.LogRecord: long getMillis()> -> _SOURCE_
<android.speech.tts.TextToSpeech: java.lang.String getDefaultEngine()> -> _SOURCE_
<android.util.AtomicFile: boolean exists()> -> _SOURCE_
<android.hardware.location.ContextHubInfo: int getId()> -> _SOURCE_
<android.widget.Editor$EditOperation: java.lang.String toString()> -> _SOURCE_
<android.telephony.mbms.DownloadRequest: int getMaxAppIntentSize()> -> _SOURCE_
<android.print.PrintAttributes: boolean isPortrait()> -> _SOURCE_
<java.net.NetworkInterface: java.lang.String getName()> -> _SOURCE_
<android.media.audiofx.AutomaticGainControl: boolean isAvailable()> -> _SOURCE_
<android.widget.AbsListView: void addTouchables(java.util.ArrayList)> -> _SOURCE_
<com.android.internal.os.ClassLoaderFactory: boolean isPathClassLoaderName(java.lang.String)> -> _SOURCE_
<java.util.concurrent.ForkJoinPool: java.lang.String toString()> -> _SOURCE_
<android.telecom.PhoneAccount: java.lang.String toString()> -> _SOURCE_
<com.android.internal.util.DumpUtils: java.util.function.Predicate filterRecord(java.lang.String)> -> _SOURCE_
<android.timezone.TzDataSetVersion: int currentFormatMinorVersion()> -> _SOURCE_
<android.telephony.CellIdentityCdma: int getSystemId()> -> _SOURCE_
<android.content.integrity.IntegrityFormula: android.content.integrity.IntegrityFormula not(android.content.integrity.IntegrityFormula)> -> _SOURCE_
<android.speech.tts.TextToSpeech: int isLanguageAvailable(java.util.Locale)> -> _SOURCE_
<android.animation.ObjectAnimator: java.lang.String getPropertyName()> -> _SOURCE_
<android.widget.TextView: boolean getLinksClickable()> -> _SOURCE_
<android.net.LocalSocket: java.io.OutputStream getOutputStream()> -> _SOURCE_
<android.content.res.ResourcesKey: java.lang.String toString()> -> _SOURCE_
<android.renderscript.Mesh: android.renderscript.Mesh$Primitive getPrimitive(int)> -> _SOURCE_
<android.graphics.drawable.AnimationDrawable: void clearMutated()> -> _SOURCE_
<android.telecom.Connection: android.telecom.CallAudioState getCallAudioState()> -> _SOURCE_
<android.bluetooth.BluetoothUuid: boolean containsAnyUuid(android.os.ParcelUuid[],android.os.ParcelUuid[])> -> _SOURCE_
<java.lang.ThreadGroup: void list()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getNetworkCountryIso()> -> _SOURCE_
<java.util.logging.Level: java.lang.String getLocalizedName()> -> _SOURCE_
<android.hardware.display.DisplayManagerGlobal: android.view.Display getCompatibleDisplay(int,android.view.DisplayAdjustments)> -> _SOURCE_
<android.location.GnssClock: boolean hasDriftNanosPerSecond()> -> _SOURCE_
<android.telephony.SmsMessage: boolean isEmail()> -> _SOURCE_
<android.app.Notification$Builder: android.app.Notification$Builder setRemoteInputHistory(android.app.RemoteInputHistoryItem[])> -> _SOURCE_
<android.media.audiopolicy.AudioPolicy: android.media.audiopolicy.AudioPolicyConfig getConfig()> -> _SOURCE_
<android.app.JobSchedulerImpl: java.util.List getAllPendingJobs()> -> _SOURCE_
<android.app.FragmentController: android.os.Parcelable saveAllState()> -> _SOURCE_
<android.location.GpsMeasurement: long getReceivedGpsTowInNs()> -> _SOURCE_
<android.bluetooth.le.ScanRecord: java.util.Map getServiceData()> -> _SOURCE_
<android.app.blob.BlobStoreManager$Session: android.os.ParcelFileDescriptor openRead()> -> _SOURCE_
<android.service.autofill.FillEventHistory$Event: java.util.Set getIgnoredDatasetIds()> -> _SOURCE_
<java.time.chrono.JapaneseChronology: java.lang.String getId()> -> _SOURCE_
<android.view.WindowId: java.lang.String toString()> -> _SOURCE_
<android.media.MediaRoute2Info: int getType()> -> _SOURCE_
<android.accessibilityservice.GestureDescription: int getDisplayId()> -> _SOURCE_
<java.net.URI: java.lang.String getRawPath()> -> _SOURCE_
<java.net.ServerSocket: boolean isClosed()> -> _SOURCE_
<android.media.tv.TvContract: android.net.Uri buildChannelsUriForInput(java.lang.String)> -> _SOURCE_
<android.telephony.MbmsDownloadSession: java.io.File getTempFileRootDirectory()> -> _SOURCE_
<android.util.apk.ApkSignatureSchemeV3Verifier: android.util.apk.ApkSignatureSchemeV3Verifier$VerifiedSigner verify(java.lang.String)> -> _SOURCE_
<android.hardware.location.MemoryRegion: java.lang.String toString()> -> _SOURCE_
<android.location.Address: java.lang.String getSubAdminArea()> -> _SOURCE_
<android.media.tv.tuner.frontend.IsdbsFrontendSettings: int getStreamIdType()> -> _SOURCE_
<android.media.MediaRoute2Info: java.lang.String getProviderId()> -> _SOURCE_
<android.content.res.AssetManager: android.util.SparseArray getAssignedPackageIdentifiers()> -> _SOURCE_
<android.app.ApplicationPackageManager: int[] getPackageGids(java.lang.String,int)> -> _SOURCE_
<android.net.NetworkAgentConfig: boolean isNat64DetectionEnabled()> -> _SOURCE_
<android.media.tv.tuner.filter.AlpFilterConfiguration: int getPacketType()> -> _SOURCE_
<android.location.GnssClock: boolean hasBiasUncertaintyNanos()> -> _SOURCE_
<android.telephony.ServiceState: java.lang.String getVoiceOperatorNumeric()> -> _SOURCE_
<android.telephony.PreciseDataConnectionState: int getDataConnectionNetworkType()> -> _SOURCE_
<android.telecom.RemoteConnection: android.net.Uri getAddress()> -> _SOURCE_
<android.hardware.camera2.params.MandatoryStreamCombination$MandatoryStreamInformation: int getFormat()> -> _SOURCE_
<android.telephony.TelephonyRegistryManager: void notifyEmergencyNumberList(int,int)> -> _SOURCE_
<android.app.usage.UsageStatsManager: void onCarrierPrivilegedAppsChanged()> -> _SOURCE_
<android.view.accessibility.AccessibilityRecord: java.lang.CharSequence getClassName()> -> _SOURCE_
<android.telecom.PhoneAccountHandle: boolean areFromSamePackage(android.telecom.PhoneAccountHandle,android.telecom.PhoneAccountHandle)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isCallerApplicationRestrictionsManagingPackage()> -> _SOURCE_
<android.media.tv.tuner.frontend.FrontendStatus: long getInnerFec()> -> _SOURCE_
<android.service.notification.StatusBarNotification: android.metrics.LogMaker getLogMaker()> -> _SOURCE_
<android.app.Notification$MessagingStyle$Message: android.app.Notification$MessagingStyle$Message getMessageFromBundle(android.os.Bundle)> -> _SOURCE_
<android.permission.PermissionManager: void grantDefaultPermissionsToLuiApp(java.lang.String,android.os.UserHandle,java.util.concurrent.Executor,java.util.function.Consumer)> -> _SOURCE_
<android.hardware.location.NanoAppInstanceInfo: int[] getOutputEvents()> -> _SOURCE_
<android.app.ProgressDialog: int getSecondaryProgress()> -> _SOURCE_
<android.hardware.radio.RadioManager$BandDescriptor: int getLowerLimit()> -> _SOURCE_
<android.view.animation.Transformation: void printShortString(java.io.PrintWriter)> -> _SOURCE_
<java.time.chrono.ThaiBuddhistDate: java.time.chrono.ThaiBuddhistDate now(java.time.Clock)> -> _SOURCE_
<android.app.Notification$MessagingStyle: java.util.List getMessages()> -> _SOURCE_
<android.webkit.URLUtil: boolean isAssetUrl(java.lang.String)> -> _SOURCE_
<android.net.Uri$Builder: android.net.Uri build()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isDataRoamingEnabled()> -> _SOURCE_
<android.content.ContextWrapper: int getWallpaperDesiredMinimumHeight()> -> _SOURCE_
<android.net.LinkProperties: boolean hasIPv4DefaultRoute()> -> _SOURCE_
<java.text.DecimalFormat: java.lang.String getNegativePrefix()> -> _SOURCE_
<android.widget.ZoomButtonsController: boolean isAutoDismissed()> -> _SOURCE_
<java.lang.reflect.Parameter: java.lang.'annotation'.Annotation[] getAnnotations()> -> _SOURCE_
<android.net.IpSecManager$SpiUnavailableException: int getSpi()> -> _SOURCE_
<android.view.textclassifier.TextSelection$Builder: android.view.textclassifier.TextSelection build()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: android.content.ComponentName getProfileOwnerAsUser(int)> -> _SOURCE_
<java.security.Provider: java.lang.String getInfo()> -> _SOURCE_
<android.hardware.hdmi.HdmiControlServiceWrapper: void setInputChangeListener(android.hardware.hdmi.IHdmiInputChangeListener)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isDeviceProvisioningConfigApplied()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getMsisdn()> -> _SOURCE_
<com.android.internal.app.ChooserActivity$ChooserGridAdapter: int getContentPreviewRowCount()> -> _SOURCE_
<android.hardware.location.ContextHubInfo: short getChrePatchVersion()> -> _SOURCE_
<android.graphics.drawable.VectorDrawable: long getNativeTree()> -> _SOURCE_
<android.os.Debug$MemoryInfo: int getSummaryCode()> -> _SOURCE_
<android.os.PersistableBundle: void saveToXml(org.xmlpull.v1.XmlSerializer)> -> _SOURCE_
<android.bluetooth.BluetoothDevice: int getType()> -> _SOURCE_
<android.net.NetworkCapabilities: java.lang.String getRequestorPackageName()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean getCrossProfileContactsSearchDisabled(android.content.ComponentName)> -> _SOURCE_
<android.util.EventLog: int getTagCode(java.lang.String)> -> _SOURCE_
<com.android.internal.widget.ResolverDrawerLayout: void onNestedScrollAccepted(android.view.View,android.view.View,int)> -> _SOURCE_
<android.hardware.fingerprint.FingerprintManager$AuthenticationCallback: void onAuthenticationFailed()> -> _SOURCE_
<com.android.ims.internal.uce.common.CapInfo: java.lang.String[] getExts()> -> _SOURCE_
<android.location.GnssNavigationMessage: int getSubmessageId()> -> _SOURCE_
<android.os.Process: boolean isApplicationUid(int)> -> _SOURCE_
<android.preference.Preference: android.preference.PreferenceManager getPreferenceManager()> -> _SOURCE_
<android.net.NetworkStats: android.net.NetworkStats$Entry getTotal(android.net.NetworkStats$Entry,java.util.HashSet)> -> _SOURCE_
<android.media.AudioTrack: int getStreamType()> -> _SOURCE_
<android.app.backup.FullBackupAgent: void onBackup(android.os.ParcelFileDescriptor,android.app.backup.BackupDataOutput,android.os.ParcelFileDescriptor)> -> _SOURCE_
<android.media.MediaRouter2Manager: java.util.List getSelectableRoutes(android.media.RoutingSessionInfo)> -> _SOURCE_
<com.android.internal.telephony.SmsMessageBase: com.android.internal.telephony.SmsHeader getUserDataHeader()> -> _SOURCE_
<android.telephony.SubscriptionManager: void addSubscriptionsIntoGroup(java.util.List,android.os.ParcelUuid)> -> _SOURCE_
<android.app.ActivityManager: void printCapabilitiesFull(java.io.PrintWriter,int)> -> _SOURCE_
<android.media.tv.TvContentRating: java.lang.String getDomain()> -> _SOURCE_
<android.webkit.WebViewDelegate: java.lang.String getDataDirectorySuffix()> -> _SOURCE_
<java.lang.invoke.MethodHandleInfo: java.lang.String referenceKindToString(int)> -> _SOURCE_
<android.media.AudioManager: android.media.AudioDeviceInfo[] getDevicesStatic(int)> -> _SOURCE_
<android.os.Debug: java.lang.String getCallers(int,int)> -> _SOURCE_
<android.media.MediaMetadata: java.lang.String getKeyFromMetadataEditorKey(int)> -> _SOURCE_
<android.telephony.ims.ImsConferenceState: int getConnectionStateForStatus(java.lang.String)> -> _SOURCE_
<android.app.usage.UsageStatsManager: java.util.Map getAppStandbyBuckets()> -> _SOURCE_
<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getHighResolutionOutputSizes(int)> -> _SOURCE_
<android.view.textclassifier.ConversationActions$Request: int getMaxSuggestions()> -> _SOURCE_
<android.webkit.CacheManager$CacheResult: long getContentLength()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo$CollectionInfo: boolean isHierarchical()> -> _SOURCE_
<android.content.integrity.IntegrityFormula$Application: android.content.integrity.IntegrityFormula certificatesContain(java.lang.String)> -> _SOURCE_
<android.bluetooth.BluetoothClass: int getClassOfDevice()> -> _SOURCE_
<android.telecom.Phone: android.telecom.AudioState getAudioState()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getCdmaEriText()> -> _SOURCE_
<android.drm.DrmEvent: java.lang.Object getAttribute(java.lang.String)> -> _SOURCE_
<android.telecom.Connection: int getCallDirection()> -> _SOURCE_
<android.content.res.Configuration: int diff(android.content.res.Configuration)> -> _SOURCE_
<android.telephony.PinResult: int getAttemptsRemaining()> -> _SOURCE_
<android.app.NotificationChannelGroup: boolean isBlocked()> -> _SOURCE_
<java.util.zip.Inflater: int getTotalIn()> -> _SOURCE_
<java.util.logging.LogRecord: java.lang.String getSourceClassName()> -> _SOURCE_
<android.telephony.UiccAccessRule: int getCarrierPrivilegeStatus(android.content.pm.PackageInfo)> -> _SOURCE_
<android.content.integrity.AppInstallMetadata$Builder: android.content.integrity.AppInstallMetadata$Builder setInstallerCertificates(java.util.List)> -> _SOURCE_
<android.media.MediaCodec$CodecException: int getErrorCode()> -> _SOURCE_
<android.content.pm.ShortcutManager: void disableShortcuts(java.util.List,int)> -> _SOURCE_
<android.view.textservice.SuggestionsInfo: int getCookie()> -> _SOURCE_
<android.content.pm.PackagePartitions$SystemPartition: java.io.File getOverlayFolder()> -> _SOURCE_
<android.telephony.ims.ImsCallSession: int getState()> -> _SOURCE_
<android.preference.PreferenceFrameLayout: android.preference.PreferenceFrameLayout$LayoutParams generateLayoutParams(android.util.AttributeSet)> -> _SOURCE_
<android.bluetooth.le.PeriodicAdvertisingReport: android.bluetooth.le.ScanRecord getData()> -> _SOURCE_
<android.media.ImageWriter: android.media.Image dequeueInputImage()> -> _SOURCE_
<java.net.URL: java.net.URI toURI()> -> _SOURCE_
<android.media.tv.tuner.frontend.AnalogFrontendSettings: int getSignalType()> -> _SOURCE_
<android.telephony.ims.ImsCallSession$Listener: void callSessionRttModifyRequestReceived(android.telephony.ims.ImsCallSession,android.telephony.ims.ImsCallProfile)> -> _SOURCE_
<java.net.MulticastSocket: java.net.NetworkInterface getNetworkInterface()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isManualNetworkSelectionAllowed()> -> _SOURCE_
<android.media.tv.tuner.dvr.DvrRecorder: int stop()> -> _SOURCE_
<android.os.storage.StorageManager: boolean inCryptKeeperBounce()> -> _SOURCE_
<java.util.concurrent.ThreadPoolExecutor: long getTaskCount()> -> _SOURCE_
<android.telephony.ServiceState: int getState()> -> _SOURCE_
<android.widget.ListPopupWindow: boolean isInputMethodNotNeeded()> -> _SOURCE_
<java.net.JarURLConnection: java.lang.String getEntryName()> -> _SOURCE_
<android.location.GpsMeasurement: double getPseudorangeUncertaintyInMeters()> -> _SOURCE_
<android.telephony.PhoneNumberUtils: android.text.style.TtsSpan createTtsSpan(java.lang.String)> -> _SOURCE_
<android.net.util.NetUtils: android.net.RouteInfo selectBestRoute(java.util.Collection,java.net.InetAddress)> -> _SOURCE_
<android.content.res.Resources: int selectSystemTheme(int,int,int,int,int,int)> -> _SOURCE_
<java.time.format.DecimalStyle: char getZeroDigit()> -> _SOURCE_
<android.app.SearchManager: java.util.List getGlobalSearchActivities()> -> _SOURCE_
<android.content.pm.RegisteredServicesCache: boolean getBindInstantServiceAllowed(int)> -> _SOURCE_
<android.telecom.Voicemail: boolean hasContent()> -> _SOURCE_
<android.os.SystemClock: long currentNetworkTimeMillis()> -> _SOURCE_
<android.view.autofill.AutofillManager: android.service.autofill.UserData getUserData()> -> _SOURCE_
<android.content.pm.ApplicationInfo: boolean isSignedWithPlatformKey()> -> _SOURCE_
<android.provider.CallLog$Calls: android.net.Uri addCall(android.telecom.CallerInfo,android.content.Context,java.lang.String,int,int,int,android.telecom.PhoneAccountHandle,long,int,java.lang.Long)> -> _SOURCE_
<android.content.om.OverlayInfo: java.lang.String getPackageName()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean setVoiceMailNumber(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.service.notification.NotificationListenerService$Ranking: java.lang.String getOverrideGroupKey()> -> _SOURCE_
<com.android.internal.content.PackageMonitor: void onPackageRemovedAllUsers(java.lang.String,int)> -> _SOURCE_
<android.os.health.HealthStats: java.util.Map getTimers(int)> -> _SOURCE_
<android.database.sqlite.SQLiteCursor: android.database.sqlite.SQLiteDatabase getDatabase()> -> _SOURCE_
<java.lang.invoke.MethodType: java.lang.Class[] parameterArray()> -> _SOURCE_
<android.bluetooth.le.AdvertisingSetCallback: void onPeriodicAdvertisingParametersUpdated(android.bluetooth.le.AdvertisingSet,int)> -> _SOURCE_
<android.hardware.usb.UsbPort: java.lang.String modeToString(int)> -> _SOURCE_
<android.app.BroadcastOptions: long getTemporaryAppWhitelistDuration()> -> _SOURCE_
<android.content.pm.VersionedPackage: int getVersionCode()> -> _SOURCE_
<android.content.pm.ShortcutInfo: boolean isFloating()> -> _SOURCE_
<android.net.TrafficStats: long getTotalTxBytes()> -> _SOURCE_
<java.time.Year: java.time.Year now(java.time.Clock)> -> _SOURCE_
<android.media.tv.tuner.frontend.Isdbs3FrontendCapabilities: int getCodeRateCapability()> -> _SOURCE_
<android.net.LinkAddress: boolean isIpv4()> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing$Limiter: java.lang.String toString()> -> _SOURCE_
<android.app.admin.DeviceAdminReceiver: void onBugreportSharingDeclined(android.content.Context,android.content.Intent)> -> _SOURCE_
<android.view.View: android.view.contentcapture.ContentCaptureSession getContentCaptureSession()> -> _SOURCE_
<android.os.Environment: java.io.File maybeTranslateEmulatedPathToInternal(java.io.File)> -> _SOURCE_
<android.os.Environment: java.io.File getOemDirectory()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long getBluetoothScanTime(long,int)> -> _SOURCE_
<android.os.incremental.IncrementalStorage: byte[] getFileMetadata(java.util.UUID)> -> _SOURCE_
<android.content.res.Resources: java.util.List getLoaders()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean hasIccCard()> -> _SOURCE_
<android.net.MacAddress: android.net.MacAddress createRandomUnicastAddressWithGoogleBase()> -> _SOURCE_
<android.service.notification.StatusBarNotification: android.os.UserHandle getUser()> -> _SOURCE_
<android.view.textclassifier.SystemTextClassifierMetadata: java.lang.String toString()> -> _SOURCE_
<android.app.backup.BackupManager: android.content.Intent getConfigurationIntent(java.lang.String)> -> _SOURCE_
<android.security.KeyStore: java.lang.String[] list(java.lang.String,int)> -> _SOURCE_
<android.media.VolumeProvider: int getVolumeControl()> -> _SOURCE_
<android.view.inputmethod.CompletionInfo: java.lang.String toString()> -> _SOURCE_
<android.view.contentcapture.ContentCaptureEvent: android.view.contentcapture.ViewNode getViewNode()> -> _SOURCE_
<android.media.MediaRouter2Manager: android.media.RoutingSessionInfo getRoutingSessionForMediaController(android.media.session.MediaController)> -> _SOURCE_
<android.app.KeyguardManager: boolean getPrivateNotificationsAllowed()> -> _SOURCE_
<android.service.persistentdata.PersistentDataBlockManager: byte[] read()> -> _SOURCE_
<android.app.assist.AssistStructure$ViewNode: java.lang.String getIdPackage()> -> _SOURCE_
<java.time.chrono.IsoChronology: java.time.LocalDate dateNow(java.time.Clock)> -> _SOURCE_
<android.content.pm.dex.DexMetadataHelper: void validateDexMetadataFile(java.lang.String)> -> _SOURCE_
<com.android.server.usage.AppStandbyInternal$AppIdleStateChangeListener: void onUserInteractionStarted(java.lang.String,int)> -> _SOURCE_
<android.inputmethodservice.InputMethodService: void onUpdateCursor(android.graphics.Rect)> -> _SOURCE_
<java.time.chrono.JapaneseEra: java.lang.String toString()> -> _SOURCE_
<android.telephony.ims.compat.stub.ImsConfigImplBase: int getProvisionedValue(int)> -> _SOURCE_
<com.android.internal.app.LocaleStore$LocaleInfo: java.lang.String getFullNameInUiLanguage()> -> _SOURCE_
<android.telecom.InCallService: void onBringToForeground(boolean)> -> _SOURCE_
<java.time.OffsetDateTime: int get(java.time.temporal.TemporalField)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isMeteredDataDisabledPackageForUser(android.content.ComponentName,java.lang.String,int)> -> _SOURCE_
<android.net.ConnectivityManager: android.net.Network[] getAllNetworks()> -> _SOURCE_
<android.database.DatabaseUtils: java.lang.Object[] deepCopyOf(java.lang.Object[])> -> _SOURCE_
<android.media.AudioRecordingConfiguration: java.util.List getEffects()> -> _SOURCE_
<android.view.autofill.AutofillManager: boolean isCompatibilityModeEnabledLocked()> -> _SOURCE_
<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setMetadata(int,int)> -> _SOURCE_
<android.telephony.data.DataCallResponse: java.util.List getDnsAddresses()> -> _SOURCE_
<android.telecom.Call$Details: android.telecom.GatewayInfo getGatewayInfo()> -> _SOURCE_
<java.net.URLConnection: long getExpiration()> -> _SOURCE_
<android.os.storage.StorageManager: long getStorageLowBytes(java.io.File)> -> _SOURCE_
<android.database.DatabaseUtils: void cursorShortToContentValuesIfPresent(android.database.Cursor,android.content.ContentValues,java.lang.String)> -> _SOURCE_
<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder detectCredentialProtectedWhileLocked()> -> _SOURCE_
<android.net.lowpan.LowpanInterface: java.lang.String getPartitionId()> -> _SOURCE_
<java.io.ObjectStreamField: java.lang.Class getType()> -> _SOURCE_
<android.service.voice.VoiceInteractionSession: boolean[] onGetSupportedCommands(java.lang.String[])> -> _SOURCE_
<android.service.autofill.FillEventHistory: java.lang.String toString()> -> _SOURCE_
<android.media.Ringtone: int getStreamType()> -> _SOURCE_
<android.content.pm.UserInfo: boolean supportsSwitchTo()> -> _SOURCE_
<android.print.PrintDocumentInfo$Builder: android.print.PrintDocumentInfo build()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Timer: int getCountLocked(int)> -> _SOURCE_
<android.media.AudioAttributes: int getFlags()> -> _SOURCE_
<android.util.jar.StrictJarManifest: java.util.jar.Attributes getMainAttributes()> -> _SOURCE_
<com.android.internal.telephony.gsm.SmsMessage: boolean isMwiDontStore()> -> _SOURCE_
<java.net.URL: java.lang.Object getContent()> -> _SOURCE_
<android.net.util.nsd.DnsSdTxtRecord: int size()> -> _SOURCE_
<android.media.tv.tuner.frontend.FrontendStatus: android.media.tv.tuner.frontend.FrontendStatus$Atsc3PlpTuningInfo[] getAtsc3PlpTuningInfo()> -> _SOURCE_
<android.app.Activity: void dispatchEnterAnimationComplete()> -> _SOURCE_
<android.telephony.SubscriptionInfo: java.util.List getEhplmns()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getLine1AlphaTag()> -> _SOURCE_
<java.util.TreeMap: java.util.NavigableSet navigableKeySet()> -> _SOURCE_
<android.telephony.SubscriptionManager: int[] getSubscriptionIds(int)> -> _SOURCE_
<javax.crypto.spec.RC5ParameterSpec: int getVersion()> -> _SOURCE_
<android.bluetooth.BluetoothGattServerCallback: void onDescriptorWriteRequest(android.bluetooth.BluetoothDevice,int,android.bluetooth.BluetoothGattDescriptor,boolean,boolean,int,byte[])> -> _SOURCE_
<android.os.storage.StorageManager: long getStorageBytesUntilLow(java.io.File)> -> _SOURCE_
<android.os.image.DynamicSystemManager: boolean startInstallation(java.lang.String)> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo$RangeInfo: float getCurrent()> -> _SOURCE_
<android.media.MediaRouter2Manager: java.util.List getDeselectableRoutes(android.media.RoutingSessionInfo)> -> _SOURCE_
<android.media.tv.tuner.filter.AlpFilterConfiguration: int getLengthType()> -> _SOURCE_
<android.app.AlarmManager$AlarmClockInfo: android.app.PendingIntent getShowIntent()> -> _SOURCE_
<android.telephony.SmsMessage: boolean hasEmsSupport()> -> _SOURCE_
<android.content.Loader: java.lang.String toString()> -> _SOURCE_
<android.app.NotificationChannel: boolean shouldVibrate()> -> _SOURCE_
<android.os.storage.StorageVolume: java.lang.String dump()> -> _SOURCE_
<android.hardware.radio.RadioMetadata: int size()> -> _SOURCE_
<java.lang.reflect.Field: java.lang.String toGenericString()> -> _SOURCE_
<android.widget.ProgressBar: boolean isIndeterminate()> -> _SOURCE_
<java.lang.reflect.Field: java.lang.String toString()> -> _SOURCE_
<android.webkit.WebSettings: int getForceDark()> -> _SOURCE_
<android.telephony.ims.ImsCallSession: java.lang.String getCallId()> -> _SOURCE_
<android.media.tv.tuner.DemuxCapabilities: int getSectionFilterCount()> -> _SOURCE_
<android.location.GnssStatus$Callback: void onSatelliteStatusChanged(android.location.GnssStatus)> -> _SOURCE_
<android.hardware.camera2.utils.ConcurrentCameraIdCombination: java.util.Set getConcurrentCameraIdCombination()> -> _SOURCE_
<android.app.admin.DeviceAdminReceiver: void onPasswordFailed(android.content.Context,android.content.Intent)> -> _SOURCE_
<android.os.BasicShellCommandHandler: java.io.OutputStream getRawErrorStream()> -> _SOURCE_
<android.app.AppOpsManager$HistoricalOp: int getOpCode()> -> _SOURCE_
<android.hardware.radio.ProgramSelector: android.hardware.radio.ProgramSelector$Identifier getPrimaryId()> -> _SOURCE_
<java.io.ObjectOutputStream: void writeFields()> -> _SOURCE_
<android.content.IntentFilter: int countMimeGroups()> -> _SOURCE_
<android.os.BasicShellCommandHandler: java.io.FileDescriptor getInFileDescriptor()> -> _SOURCE_
<com.android.internal.infra.AbstractRemoteService: android.content.ComponentName getComponentName()> -> _SOURCE_
<com.android.internal.app.procstats.ProcessStats: void writeToParcel(android.os.Parcel,long,int)> -> _SOURCE_
<android.app.DialogFragment: boolean isCancelable()> -> _SOURCE_
<android.bluetooth.BluetoothAvrcpController: android.bluetooth.BluetoothAvrcpPlayerSettings getPlayerSettings(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<java.io.ObjectStreamClass: java.lang.String getName()> -> _SOURCE_
<android.hardware.radio.ProgramList$Filter: boolean areCategoriesIncluded()> -> _SOURCE_
<android.telephony.SmsMessage: java.lang.String getPseudoSubject()> -> _SOURCE_
<android.hardware.usb.UsbPort: java.lang.String getId()> -> _SOURCE_
<android.hardware.location.GeofenceHardwareService: void onDestroy()> -> _SOURCE_
<android.net.NetworkCapabilities: boolean satisfiedByNetworkCapabilities(android.net.NetworkCapabilities)> -> _SOURCE_
<java.util.Currency: java.lang.String toString()> -> _SOURCE_
<android.util.KeyValueListParser: boolean getBoolean(java.lang.String,boolean)> -> _SOURCE_
<android.timezone.TimeZoneFinder: android.timezone.CountryTimeZones lookupCountryTimeZones(java.lang.String)> -> _SOURCE_
<android.telephony.mbms.MbmsStreamingSessionCallback: void onError(int,java.lang.String)> -> _SOURCE_
<android.telephony.SubscriptionManager$OnSubscriptionsChangedListener: com.android.internal.telephony.util.HandlerExecutor getHandlerExecutor()> -> _SOURCE_
<java.time.DayOfWeek: int get(java.time.temporal.TemporalField)> -> _SOURCE_
<android.view.VerifiedKeyEvent: long getDownTimeNanos()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo: android.graphics.Region getRegionAt(int)> -> _SOURCE_
<android.net.UrlQuerySanitizer: android.net.UrlQuerySanitizer$ValueSanitizer getAmpLegal()> -> _SOURCE_
<android.hardware.display.WifiDisplayStatus: int getFeatureState()> -> _SOURCE_
<java.util.zip.Deflater: long getBytesRead()> -> _SOURCE_
<java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getDefaultUncaughtExceptionHandler()> -> _SOURCE_
<com.android.ims.internal.uce.common.StatusCode: int getStatusCode()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getIccAuthentication(int,int,int,java.lang.String)> -> _SOURCE_
<java.lang.Package: java.lang.Package[] getPackages()> -> _SOURCE_
<android.telephony.SignalStrength: int getLteRssnr()> -> _SOURCE_
<android.service.autofill.FillResponse: android.widget.RemoteViews getFooter()> -> _SOURCE_
<java.security.KeyStore$PrivateKeyEntry: java.security.PrivateKey getPrivateKey()> -> _SOURCE_
<android.telecom.InCallAdapter: void enterBackgroundAudioProcessing(java.lang.String)> -> _SOURCE_
<android.view.VerifiedKeyEvent: int getRepeatCount()> -> _SOURCE_
<android.telephony.ims.compat.feature.MMTelFeature: android.telephony.ims.stub.ImsUtImplBase getUtInterface()> -> _SOURCE_
<android.media.FaceDetector$Face: float confidence()> -> _SOURCE_
<android.telephony.CellIdentityCdma: android.telephony.CellIdentityCdma sanitizeLocationInfo()> -> _SOURCE_
<android.database.DataSetObserver: void onInvalidated()> -> _SOURCE_
<java.util.UUID: int hashCode()> -> _SOURCE_
<android.os.StatsServiceManager: android.os.StatsServiceManager$ServiceRegisterer getStatsManagerServiceRegisterer()> -> _SOURCE_
<android.net.NetworkStats: java.lang.String meteredToString(int)> -> _SOURCE_
<java.io.File: java.lang.String getAbsolutePath()> -> _SOURCE_
<android.media.tv.tuner.filter.AudioDescriptor: byte getAdGainCenter()> -> _SOURCE_
<android.telephony.cdma.CdmaSmsCbProgramData: int getLanguage()> -> _SOURCE_
<android.telephony.emergency.EmergencyNumber: int getEmergencyServiceCategoryBitmaskInternalDial()> -> _SOURCE_
<android.database.sqlite.SQLiteQueryBuilder: boolean isStrict()> -> _SOURCE_
<android.animation.ValueAnimator: float getDurationScale()> -> _SOURCE_
<android.app.ActivityManager: void scheduleApplicationInfoChanged(java.util.List,int)> -> _SOURCE_
<android.app.admin.DeviceAdminReceiver: void onLockTaskModeExiting(android.content.Context,android.content.Intent)> -> _SOURCE_
<android.view.textclassifier.TextClassifierEvent: java.lang.String[] getEntityTypes()> -> _SOURCE_
<android.view.contentcapture.ContentCaptureSession: int getId()> -> _SOURCE_
<android.app.timezonedetector.TelephonyTimeZoneSuggestion: java.util.List getDebugInfo()> -> _SOURCE_
<java.security.spec.ECGenParameterSpec: java.lang.String getName()> -> _SOURCE_
<android.hardware.usb.UsbEndpoint: int getAddress()> -> _SOURCE_
<android.media.tv.TvContentRating: android.media.tv.TvContentRating createRating(java.lang.String,java.lang.String,java.lang.String,java.lang.String[])> -> _SOURCE_
<android.content.rollback.PackageRollbackInfo: android.content.pm.VersionedPackage getVersionRolledBackTo()> -> _SOURCE_
<java.security.cert.X509CertSelector: java.math.BigInteger getSerialNumber()> -> _SOURCE_
<android.hardware.camera2.params.HighSpeedVideoConfiguration: int getWidth()> -> _SOURCE_
<com.android.internal.widget.LockPatternUtils: boolean isVisiblePatternEnabled(int)> -> _SOURCE_
<android.widget.TextView: int getImeOptions()> -> _SOURCE_
<android.media.tv.tunerresourcemanager.TunerFrontendRequest: int getFrontendType()> -> _SOURCE_
<android.app.ApplicationPackageManager: int getMoveStatus(int)> -> _SOURCE_
<android.app.KeyguardManager: boolean isKeyguardSecure()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.lang.String getGlobalPrivateDnsHost(android.content.ComponentName)> -> _SOURCE_
<android.content.ContentResolver: java.util.List getPersistedUriPermissions()> -> _SOURCE_
<android.app.Notification$Action$WearableExtender: java.lang.CharSequence getConfirmLabel()> -> _SOURCE_
<android.telephony.CellIdentityWcdma: java.util.Set getAdditionalPlmns()> -> _SOURCE_
<android.net.WifiLinkQualityInfo: java.lang.String getBssid()> -> _SOURCE_
<android.os.Process: int myPid()> -> _SOURCE_
<android.media.AudioManager: int getOutputLatency(int)> -> _SOURCE_
<java.util.EventObject: java.lang.Object getSource()> -> _SOURCE_
<android.telecom.ParcelableCall: java.lang.String getParentCallId()> -> _SOURCE_
<android.media.CameraProfile: int getJpegEncodingQualityParameter(int)> -> _SOURCE_
<android.hardware.display.AmbientDisplayConfiguration: boolean alwaysOnAvailable()> -> _SOURCE_
<android.database.CursorWrapper: android.database.Cursor getWrappedCursor()> -> _SOURCE_
<android.service.voice.AlwaysOnHotwordDetector: android.content.Intent createUnEnrollIntent()> -> _SOURCE_
<android.widget.SearchView: void onActionViewExpanded()> -> _SOURCE_
<android.os.PersistableBundle: android.os.PersistableBundle getPersistableBundle(java.lang.String)> -> _SOURCE_
<javax.net.ssl.SSLParameters: java.lang.String[] getCipherSuites()> -> _SOURCE_
<android.permission.PermissionManager$SplitPermissionInfo: int getTargetSdk()> -> _SOURCE_
<android.app.Notification$MessagingStyle: boolean isGroupConversation()> -> _SOURCE_
<android.telephony.CellSignalStrengthLte: int getRsrq()> -> _SOURCE_
<android.app.ApplicationPackageManager: boolean isPackageStateProtected(java.lang.String,int)> -> _SOURCE_
<android.telecom.VideoCallImpl: void requestCallDataUsage()> -> _SOURCE_
<android.media.audiopolicy.AudioPolicy: boolean removeUserIdDeviceAffinity(int)> -> _SOURCE_
<java.security.spec.RSAPublicKeySpec: java.math.BigInteger getPublicExponent()> -> _SOURCE_
<android.view.textclassifier.ExtrasUtils: java.lang.String getEntityType(android.os.Bundle)> -> _SOURCE_
<java.util.concurrent.LinkedBlockingDeque: int drainTo(java.util.Collection)> -> _SOURCE_
<android.telephony.data.DataProfile: int getSupportedApnTypesBitmask()> -> _SOURCE_
<android.content.pm.ApplicationInfo: boolean hasFragileUserData()> -> _SOURCE_
<android.location.Criteria: int getBearingAccuracy()> -> _SOURCE_
<android.os.BaseBundle: java.util.Set keySet()> -> _SOURCE_
<android.content.integrity.AtomicFormula$BooleanAtomicFormula: java.lang.String toString()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean getSmsSendCapable(boolean)> -> _SOURCE_
<android.printservice.PrintJob: boolean isStarted()> -> _SOURCE_
<android.view.ViewConfiguration: int getScaledMinimumFlingVelocity()> -> _SOURCE_
<com.android.internal.compat.CompatibilityChangeInfo: java.lang.String toString()> -> _SOURCE_
<android.service.notification.NotificationStats: java.lang.String toString()> -> _SOURCE_
<android.os.UserHandle: int getAppIdFromSharedAppGid(int)> -> _SOURCE_
<java.util.LongSummaryStatistics: double getAverage()> -> _SOURCE_
<android.content.pm.ShortcutManager: int getMaxShortcutCountPerActivity()> -> _SOURCE_
<java.net.HttpCookie: boolean hasExpired()> -> _SOURCE_
<android.view.autofill.AutofillManager: java.lang.String getSmartSuggestionModeToString(int)> -> _SOURCE_
<android.hardware.display.DisplayManagerGlobal: android.view.DisplayInfo getDisplayInfo(int)> -> _SOURCE_
<android.view.WindowInsets$Type: int ime()> -> _SOURCE_
<android.telephony.LteVopsSupportInfo: int getVopsSupport()> -> _SOURCE_
<android.os.DropBoxManager: void addData(java.lang.String,byte[],int)> -> _SOURCE_
<javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String,java.security.Provider)> -> _SOURCE_
<android.widget.VideoView: void setSubtitleWidget(android.media.SubtitleTrack$RenderingWidget)> -> _SOURCE_
<android.provider.DocumentsContract: android.net.Uri buildDocumentUriMaybeUsingTree(android.net.Uri,java.lang.String)> -> _SOURCE_
<android.bluetooth.BluetoothHearingAid: int getDeviceSide(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<android.telephony.SubscriptionManager: android.telephony.SubscriptionManager 'from'(android.content.Context)> -> _SOURCE_
<com.android.internal.net.VpnConfig: android.app.PendingIntent getIntentForStatusPanel(android.content.Context)> -> _SOURCE_
<android.util.apk.ApkSignatureVerifier: int getMinimumSignatureSchemeVersionForTargetSdk(int)> -> _SOURCE_
<android.telephony.ims.feature.CapabilityChangeRequest: java.util.List getCapabilitiesToEnable()> -> _SOURCE_
<android.webkit.GeolocationPermissions: void getAllowed(java.lang.String,android.webkit.ValueCallback)> -> _SOURCE_
<android.view.textservice.SpellCheckerSession: com.android.internal.textservice.ISpellCheckerSessionListener getSpellCheckerSessionListener()> -> _SOURCE_
<android.content.ClipData$Item: android.net.Uri getUri()> -> _SOURCE_
<android.telephony.CellSignalStrengthWcdma: int getDbm()> -> _SOURCE_
<android.os.StatFs: long getBlockCountLong()> -> _SOURCE_
<android.net.MobileLinkQualityInfo: int getLteSignalStrength()> -> _SOURCE_
<android.view.contentcapture.ViewNode: java.lang.String getClassName()> -> _SOURCE_
<android.hardware.camera2.params.MandatoryStreamCombination$MandatoryStreamInformation: boolean isInput()> -> _SOURCE_
<android.os.DeviceIdleManager: java.lang.String[] getSystemPowerWhitelistExceptIdle()> -> _SOURCE_
<android.content.integrity.AppInstallMetadata: boolean isStampPresent()> -> _SOURCE_
<java.util.Locale: java.lang.String getDisplayCountry(java.util.Locale)> -> _SOURCE_
<android.view.autofill.AutofillManager: boolean isAutofillUiShowing()> -> _SOURCE_
<android.provider.Settings$Secure: java.lang.String getString(android.content.ContentResolver,java.lang.String)> -> _SOURCE_
<android.nfc.Tag: int[] getTechCodeList()> -> _SOURCE_
<android.renderscript.Type: int getArrayCount()> -> _SOURCE_
<java.time.chrono.HijrahDate: java.time.chrono.HijrahDate now(java.time.ZoneId)> -> _SOURCE_
<android.hardware.camera2.params.LensShadingMap: int getColumnCount()> -> _SOURCE_
<android.hardware.radio.RadioManager$BandConfig: int getType()> -> _SOURCE_
<android.view.inputmethod.InlineSuggestion: java.lang.String toString()> -> _SOURCE_
<android.view.textservice.SpellCheckerInfo: int getSubtypeCount()> -> _SOURCE_
<android.graphics.drawable.StateListDrawable: void clearMutated()> -> _SOURCE_
<android.service.notification.ZenPolicy: int getPriorityCategoryConversations()> -> _SOURCE_
<android.media.tv.tuner.filter.PesSettings: int getStreamId()> -> _SOURCE_
<android.media.AudioTrack: int getSampleRate()> -> _SOURCE_
<java.time.ZonedDateTime: int get(java.time.temporal.TemporalField)> -> _SOURCE_
<android.renderscript.Type: int getX()> -> _SOURCE_
<android.content.pm.PackagePartitions$SystemPartition: java.io.File getFolder()> -> _SOURCE_
<java.net.URI: java.lang.String getFragment()> -> _SOURCE_
<android.os.RecoverySystem: void rebootWipeCache(android.content.Context)> -> _SOURCE_
<android.text.DynamicLayout: int getNumberOfBlocks()> -> _SOURCE_
<android.accounts.AccountManager: boolean hasAccountAccess(android.accounts.Account,java.lang.String,android.os.UserHandle)> -> _SOURCE_
<android.app.slice.Slice: android.net.Uri getUri()> -> _SOURCE_
<android.content.ContextWrapper: java.io.File getPreloadsFileCache()> -> _SOURCE_
<android.hardware.fingerprint.FingerprintManager$CryptoObject: javax.crypto.Mac getMac()> -> _SOURCE_
<com.android.internal.view.InputBindResult: java.lang.String toString()> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing$Channel: android.media.audiofx.DynamicsProcessing$Mbc getMbc()> -> _SOURCE_
<android.media.AudioGain: int minValue()> -> _SOURCE_
<android.net.UrlQuerySanitizer: boolean getPreferFirstRepeatedParameter()> -> _SOURCE_
<android.database.sqlite.SQLiteStatement: void execute()> -> _SOURCE_
<android.widget.ListPopupWindow: java.lang.Object getSelectedItem()> -> _SOURCE_
<android.app.AppOpsManager$AttributedOpEntry: android.app.AppOpsManager$OpEventProxyInfo getLastForegroundProxyInfo(int)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isCaCertApproved(java.lang.String,int)> -> _SOURCE_
<java.time.YearMonth: java.lang.String toString()> -> _SOURCE_
<android.hardware.biometrics.BiometricPrompt$AuthenticationCallback: void onAuthenticationHelp(int,java.lang.CharSequence)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getLocaleFromDefaultSim()> -> _SOURCE_
<android.telephony.euicc.EuiccNotification: java.lang.String getTargetAddr()> -> _SOURCE_
<android.preference.DialogPreference: java.lang.CharSequence getDialogTitle()> -> _SOURCE_
<android.graphics.Color: int getComponentCount()> -> _SOURCE_
<android.os.connectivity.WifiBatteryStats: long getNumPacketsRx()> -> _SOURCE_
<android.media.tv.tuner.Tuner: android.media.tv.tuner.frontend.FrontendStatus getFrontendStatus(int[])> -> _SOURCE_
<android.app.Notification$CarExtender$UnreadConversation: android.app.PendingIntent getReplyPendingIntent()> -> _SOURCE_
<android.hardware.camera2.CameraManager: boolean isConcurrentSessionConfigurationSupported(java.util.Map)> -> _SOURCE_
<android.service.voice.VoiceInteractionSession$Request: java.lang.String toString()> -> _SOURCE_
<android.app.NotificationManager: android.content.ComponentName getAllowedNotificationAssistant()> -> _SOURCE_
<android.os.storage.StorageManager: boolean isFileEncryptedNativeOnly()> -> _SOURCE_
<android.content.AutofillOptions: boolean isAutofillDisabledLocked(android.content.ComponentName)> -> _SOURCE_
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: int getRecommendedUseCase()> -> _SOURCE_
<android.provider.CalendarContract$CalendarAlerts: boolean alarmExists(android.content.ContentResolver,long,long,long)> -> _SOURCE_
<android.net.LinkProperties: java.lang.String getTcpBufferSizes()> -> _SOURCE_
<android.content.res.Resources: int getInteger(int)> -> _SOURCE_
<android.telecom.CallRedirectionService: void placeCallUnmodified()> -> _SOURCE_
<android.app.Activity: java.lang.String getLocalClassName()> -> _SOURCE_
<android.view.inputmethod.CorrectionInfo: java.lang.CharSequence getOldText()> -> _SOURCE_
<java.io.ObjectStreamField: java.lang.String toString()> -> _SOURCE_
<android.bluetooth.BluetoothDevice: java.lang.String getName()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Counter: int getCountLocked(int)> -> _SOURCE_
<android.content.res.TypedArray: int getIndexCount()> -> _SOURCE_
<android.telephony.DataSpecificRegistrationInfo: java.lang.String toString()> -> _SOURCE_
<android.location.GpsSatellite: boolean hasAlmanac()> -> _SOURCE_
<android.hardware.camera2.legacy.LegacyResultMapper: android.hardware.camera2.impl.CameraMetadataNative cachedConvertResultMetadata(android.hardware.camera2.legacy.LegacyRequest,long)> -> _SOURCE_
<android.media.Image: android.hardware.HardwareBuffer getHardwareBuffer()> -> _SOURCE_
<java.security.cert.TrustAnchor: java.lang.String getCAName()> -> _SOURCE_
<android.app.usage.NetworkStats$Bucket: long getTxBytes()> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: void requestControllerActivityEnergyInfo(android.os.ResultReceiver)> -> _SOURCE_
<android.app.backup.BackupObserver: void backupFinished(int)> -> _SOURCE_
<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setMmsProxyAddress(java.lang.String)> -> _SOURCE_
<android.app.Notification$WearableExtender: boolean getHintContentIntentLaunchesActivity()> -> _SOURCE_
<android.os.RecoverySystem: void rebootWipeUserData(android.content.Context,java.lang.String)> -> _SOURCE_
<android.os.storage.StorageManager: boolean checkPermissionReadVideo(boolean,int,int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.filterfw.core.VertexFrame: java.lang.String toString()> -> _SOURCE_
<java.lang.StringBuffer: int codePointBefore(int)> -> _SOURCE_
<android.app.Presentation: android.content.res.Resources getResources()> -> _SOURCE_
<android.net.wifi.nl80211.NativeScanResult: java.util.List getRadioChainInfos()> -> _SOURCE_
<android.accounts.AuthenticatorDescription: int describeContents()> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec: boolean isStrongBoxBacked()> -> _SOURCE_
<android.service.notification.ZenPolicy: int getVisualEffectFullScreenIntent()> -> _SOURCE_
<android.telephony.PhysicalChannelConfig: int getConnectionStatus()> -> _SOURCE_
<java.net.Proxy: java.net.Proxy$Type type()> -> _SOURCE_
<android.preference.MultiSelectListPreference: java.lang.CharSequence[] getEntryValues()> -> _SOURCE_
<android.telecom.PhoneAccountHandle: java.lang.String getId()> -> _SOURCE_
<android.location.GnssSingleSatCorrection: int getSatelliteId()> -> _SOURCE_
<android.content.SyncRequest$Builder: android.content.SyncRequest build()> -> _SOURCE_
<android.widget.ProgressBar: android.graphics.drawable.Drawable getCurrentDrawable()> -> _SOURCE_
<android.app.backup.BackupTransport: int finishBackup()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean getStorageEncryption(android.content.ComponentName)> -> _SOURCE_
<java.util.Currency: java.lang.String getSymbol()> -> _SOURCE_
<org.apache.http.params.HttpConnectionParams: int getSoTimeout(org.apache.http.params.HttpParams)> -> _SOURCE_
<android.nfc.NfcActivityManager: android.nfc.BeamShareData createBeamShareData(byte)> -> _SOURCE_
<android.media.RouteDiscoveryPreference$Builder: android.media.RouteDiscoveryPreference build()> -> _SOURCE_
<android.net.MatchAllNetworkSpecifier: void checkNotMatchAllNetworkSpecifier(android.net.NetworkSpecifier)> -> _SOURCE_
<android.telephony.NetworkRegistrationInfo: int getDomain()> -> _SOURCE_
<android.util.apk.SourceStampVerifier: android.util.apk.SourceStampVerificationResult verify(java.lang.String)> -> _SOURCE_
<android.telephony.ims.ImsService: android.telephony.ims.stub.ImsConfigImplBase getConfig(int)> -> _SOURCE_
<java.util.logging.LogRecord: java.lang.Object[] getParameters()> -> _SOURCE_
<android.telephony.emergency.EmergencyNumber: java.util.List getEmergencyServiceCategories()> -> _SOURCE_
<android.telephony.NetworkRegistrationInfo: int getRegistrationState()> -> _SOURCE_
<android.content.ContextWrapper: int checkCallingUriPermission(android.net.Uri,int)> -> _SOURCE_
<android.app.Notification$Action: boolean getAllowGeneratedReplies()> -> _SOURCE_
<android.view.textclassifier.TextSelection$Request: android.os.LocaleList getDefaultLocales()> -> _SOURCE_
<android.app.ApplicationPackageManager: int checkSignatures(int,int)> -> _SOURCE_
<android.telephony.ServiceState: boolean isSearching()> -> _SOURCE_
<android.hardware.camera2.legacy.CaptureCollector: android.hardware.camera2.legacy.RequestHolder jpegCaptured(long)> -> _SOURCE_
<java.net.URI: java.lang.String getRawFragment()> -> _SOURCE_
<android.media.MediaDrm: android.media.MediaDrm$CertificateRequest getCertificateRequest(int,java.lang.String)> -> _SOURCE_
<android.nfc.tech.NfcB: byte[] getApplicationData()> -> _SOURCE_
<android.telephony.CellIdentityNr: int getChannelNumber()> -> _SOURCE_
<com.android.ims.internal.uce.presence.PresSubscriptionState: int getPresSubscriptionStateValue()> -> _SOURCE_
<android.app.NotificationChannel: boolean canBubble()> -> _SOURCE_
<android.os.connectivity.WifiBatteryStats: long getNumBytesTx()> -> _SOURCE_
<android.media.tv.tuner.Tuner: android.media.tv.tuner.Descrambler openDescrambler()> -> _SOURCE_
<android.app.Fragment: boolean isRemoving()> -> _SOURCE_
<android.net.NetworkStats: android.net.NetworkStats removeEmptyEntries()> -> _SOURCE_
<android.os.Parcel: android.os.PersistableBundle readPersistableBundle()> -> _SOURCE_
<android.graphics.drawable.GradientDrawable: void clearMutated()> -> _SOURCE_
<android.media.AudioManager: int listPreviousAudioDevicePorts(java.util.ArrayList)> -> _SOURCE_
<android.hardware.display.WifiDisplay: java.lang.String getDeviceAlias()> -> _SOURCE_
<android.content.IntentSender: int getCreatorUid()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: android.os.BatteryStats$Timer getWifiSignalStrengthTimer(int)> -> _SOURCE_
<java.time.chrono.Era: int get(java.time.temporal.TemporalField)> -> _SOURCE_
<com.android.internal.widget.PagerAdapter: void startUpdate(android.view.View)> -> _SOURCE_
<android.location.GnssReflectingPlane: double getAltitudeMeters()> -> _SOURCE_
<android.app.Notification$InboxStyle: android.app.Notification$InboxStyle addLine(java.lang.CharSequence)> -> _SOURCE_
<android.location.Criteria: boolean isSpeedRequired()> -> _SOURCE_
<android.app.ActivityManager: int getLauncherLargeIconDensity()> -> _SOURCE_
<android.net.NetworkUtils: java.net.InetAddress intToInetAddress(int)> -> _SOURCE_
<android.telephony.SmsCbCmasInfo: int getCategory()> -> _SOURCE_
<android.view.View: boolean isScrollbarFadingEnabled()> -> _SOURCE_
<android.telecom.ParcelableCall: int getState()> -> _SOURCE_
<javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String,java.lang.String)> -> _SOURCE_
<android.app.slice.SliceItem: android.widget.RemoteViews getRemoteView()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long computeRealtime(long,int)> -> _SOURCE_
<android.drm.ProcessedData: java.lang.String getAccountId()> -> _SOURCE_
<com.android.internal.widget.LockPatternView: boolean isInStealthMode()> -> _SOURCE_
<android.mtp.MtpStorageInfo: int getStorageId()> -> _SOURCE_
<android.os.ServiceManager: java.lang.String[] listServices()> -> _SOURCE_
<android.media.tv.tuner.filter.MmtpFilterConfiguration$Builder: android.media.tv.tuner.filter.MmtpFilterConfiguration build()> -> _SOURCE_
<android.media.AudioPresentation: int getPresentationId()> -> _SOURCE_
<android.telephony.ServiceState: int getRadioTechnology()> -> _SOURCE_
<android.app.backup.BackupDataInputStream: java.lang.String getKey()> -> _SOURCE_
<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence,int,int)> -> _SOURCE_
<android.service.autofill.Validators: android.service.autofill.Validator not(android.service.autofill.Validator)> -> _SOURCE_
<android.os.connectivity.WifiBatteryStats: long getAppScanRequestCount()> -> _SOURCE_
<android.bluetooth.BluetoothHeadsetClient: void setAudioRouteAllowed(android.bluetooth.BluetoothDevice,boolean)> -> _SOURCE_
<android.media.tv.tuner.filter.IpFilterConfiguration$Builder: android.media.tv.tuner.filter.IpFilterConfiguration build()> -> _SOURCE_
<android.content.ContextWrapper: int checkPermission(java.lang.String,int,int)> -> _SOURCE_
<android.telephony.ServiceState: java.lang.String rilRadioTechnologyToString(int)> -> _SOURCE_
<android.util.EventLog$Event: int getProcessId()> -> _SOURCE_
<android.telephony.PhoneNumberUtils: java.lang.String stripSeparators(java.lang.String)> -> _SOURCE_
<android.hardware.location.NanoAppMessage: java.lang.String toString()> -> _SOURCE_
<com.android.internal.policy.PhoneWindow: void setVolumeControlStream(int)> -> _SOURCE_
<android.os.Environment: java.io.File getDataPreloadsMediaDirectory()> -> _SOURCE_
<android.os.Bundle: java.lang.ClassLoader getClassLoader()> -> _SOURCE_
<android.app.assist.AssistStructure: void ensureDataForAutofill()> -> _SOURCE_
<javax.net.ssl.SNIServerName: int getType()> -> _SOURCE_
<android.content.ContentResolver: android.content.SyncAdapterType[] getSyncAdapterTypes()> -> _SOURCE_
<android.view.contentcapture.DataRemovalRequest$LocusIdRequest: int getFlags()> -> _SOURCE_
<android.text.format.DateUtils: java.lang.CharSequence getRelativeTimeSpanString(long)> -> _SOURCE_
<android.os.Parcel: int readInt()> -> _SOURCE_
<android.content.pm.parsing.PackageInfoWithoutStateUtils: int appInfoFlags(android.content.pm.parsing.ParsingPackageRead)> -> _SOURCE_
<android.view.View: int getRawTextDirection()> -> _SOURCE_
<com.android.internal.widget.LinearLayoutManager: int getInitialItemPrefetchCount()> -> _SOURCE_
<java.util.logging.LogManager: java.util.Enumeration getLoggerNames()> -> _SOURCE_
<android.app.ProgressDialog: int getProgress()> -> _SOURCE_
<android.content.pm.ApplicationInfo: java.lang.String getCodePath()> -> _SOURCE_
<com.android.internal.widget.LockPatternUtils: boolean isBiometricAllowedForUser(int)> -> _SOURCE_
<android.hardware.camera2.legacy.LegacyCameraDevice: int detectSurfaceDataspace(android.view.Surface)> -> _SOURCE_
<android.util.proto.ProtoStream: java.lang.String token2String(long)> -> _SOURCE_
<android.service.carrier.ApnService: android.os.IBinder onBind(android.content.Intent)> -> _SOURCE_
<android.database.sqlite.SQLiteCompatibilityWalFlags: boolean isLegacyCompatibilityWalEnabled()> -> _SOURCE_
<java.security.cert.PKIXCertPathValidatorResult: java.lang.Object clone()> -> _SOURCE_
<android.content.res.TypedArray: int getInteger(int,int)> -> _SOURCE_
<android.media.soundtrigger.SoundTriggerManager: android.media.soundtrigger.SoundTriggerManager$Model getModel(java.util.UUID)> -> _SOURCE_
<android.media.RouteDiscoveryPreference: java.lang.String toString()> -> _SOURCE_
<android.os.Debug: void resetGlobalExternalFreedSize()> -> _SOURCE_
<java.security.Provider: java.util.Set entrySet()> -> _SOURCE_
<android.hardware.camera2.impl.RequestLastFrameNumbersHolder: int getRequestId()> -> _SOURCE_
<android.hardware.fingerprint.FingerprintManager$AuthenticationResult: android.hardware.fingerprint.Fingerprint getFingerprint()> -> _SOURCE_
<com.android.server.backup.AccountSyncSettingsBackupHelper: void accountAdded(android.content.Context,int)> -> _SOURCE_
<android.app.NotificationChannel: int getUserLockedFields()> -> _SOURCE_
<android.media.MediaFormat: java.lang.String toString()> -> _SOURCE_
<java.net.InetAddress: boolean isMulticastAddress()> -> _SOURCE_
<android.net.lowpan.LowpanEnergyScanResult: java.lang.String toString()> -> _SOURCE_
<android.app.slice.SliceProvider: void attachInfo(android.content.Context,android.content.pm.ProviderInfo)> -> _SOURCE_
<android.app.StatusBarManager$DisableInfo: boolean areSystemIconsDisabled()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getImei(int)> -> _SOURCE_
<java.util.Observable: int countObservers()> -> _SOURCE_
<android.app.AppOpsManager$PackageOps: int getUid()> -> _SOURCE_
<android.webkit.CacheManager$CacheResult: java.lang.String getEncoding()> -> _SOURCE_
<android.telecom.CallerInfo: android.net.Uri getContactDisplayPhotoUri()> -> _SOURCE_
<android.os.TestLooperManager: android.os.MessageQueue getMessageQueue()> -> _SOURCE_
<android.view.contentcapture.ViewNode: java.lang.CharSequence[] getAutofillOptions()> -> _SOURCE_
<java.lang.reflect.Method: java.lang.'annotation'.Annotation[][] getParameterAnnotations()> -> _SOURCE_
<android.widget.CursorAdapter: android.widget.FilterQueryProvider getFilterQueryProvider()> -> _SOURCE_
<android.content.pm.PackageManager: java.lang.String getAppPredictionServicePackageName()> -> _SOURCE_
<android.hardware.hdmi.HdmiControlServiceWrapper: void setSystemAudioVolume(int,int,int)> -> _SOURCE_
<android.mtp.MtpObjectInfo: int getAssociationType()> -> _SOURCE_
<java.util.concurrent.ThreadPoolExecutor: java.util.List shutdownNow()> -> _SOURCE_
<android.net.wifi.WifiMigration$SettingsMigrationData: boolean isScanAlwaysAvailable()> -> _SOURCE_
<android.media.browse.MediaBrowser: android.content.ComponentName getServiceComponent()> -> _SOURCE_
<android.media.tv.TvContract: android.net.Uri buildChannelUri(long)> -> _SOURCE_
<android.net.MacAddress: android.net.MacAddress fromBytes(byte[])> -> _SOURCE_
<android.webkit.WebStorage: void getUsageForOrigin(java.lang.String,android.webkit.ValueCallback)> -> _SOURCE_
<javax.crypto.SecretKeyFactory: java.security.spec.KeySpec getKeySpec(javax.crypto.SecretKey,java.lang.Class)> -> _SOURCE_
<android.webkit.WebStorage$Origin: long getUsage()> -> _SOURCE_
<java.net.URL: java.lang.String getHost()> -> _SOURCE_
<android.media.MediaCodecList: android.media.MediaCodecInfo getCodecInfoAt(int)> -> _SOURCE_
<android.media.MediaCodecInfo$EncoderCapabilities: android.util.Range getQualityRange()> -> _SOURCE_
<android.net.WifiLinkQualityInfo: int getRssi()> -> _SOURCE_
<java.nio.channels.Pipe$SinkChannel: int validOps()> -> _SOURCE_
<android.os.storage.StorageManager: android.os.storage.StorageManager 'from'(android.content.Context)> -> _SOURCE_
<android.hardware.camera2.params.OutputConfiguration: android.view.Surface getSurface()> -> _SOURCE_
<android.telecom.ConnectionService: void onCreateConnectionComplete(android.telecom.Connection)> -> _SOURCE_
<android.hardware.hdmi.HdmiRecordListener$TimerStatusData: boolean isProgrammed()> -> _SOURCE_
<android.net.http.X509TrustManagerExtensions: boolean isSameTrustConfiguration(java.lang.String,java.lang.String)> -> _SOURCE_
<android.net.LinkAddress: java.net.InetAddress getAddress()> -> _SOURCE_
<android.telephony.data.ApnSetting: java.lang.String getPassword()> -> _SOURCE_
<android.speech.tts.TextToSpeech: android.speech.tts.Voice getVoice()> -> _SOURCE_
<android.content.pm.dex.DexMetadataHelper: long getPackageDexMetadataSize(android.content.pm.PackageParser$PackageLite)> -> _SOURCE_
<android.service.notification.NotificationListenerService$Ranking: java.util.List getSmartActions()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.lang.String getNameForUid(int)> -> _SOURCE_
<java.io.Console: java.lang.String readLine(java.lang.String,java.lang.Object[])> -> _SOURCE_
<android.telecom.Voicemail: boolean isRead()> -> _SOURCE_
<android.hardware.camera2.params.SessionConfiguration: int getSessionType()> -> _SOURCE_
<android.telecom.Connection: android.telecom.Conference getConference()> -> _SOURCE_
<android.hardware.usb.UsbInterface: int getInterfaceProtocol()> -> _SOURCE_
<android.accessibilityservice.AccessibilityService: android.accessibilityservice.FingerprintGestureController getFingerprintGestureController()> -> _SOURCE_
<android.service.autofill.FillRequest: android.view.inputmethod.InlineSuggestionsRequest getInlineSuggestionsRequest()> -> _SOURCE_
<android.widget.ActivityChooserModel: int getHistorySize()> -> _SOURCE_
<android.hardware.camera2.utils.TypeReference: java.lang.Class getRawType()> -> _SOURCE_
<android.app.admin.DnsEvent: java.lang.String toString()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: int getDischargeAmountScreenOnSinceCharge()> -> _SOURCE_
<android.os.storage.StorageManager: android.os.storage.StorageVolume getPrimaryVolume()> -> _SOURCE_
<com.android.ims.internal.uce.common.CapInfo: boolean isIpVideoSupported()> -> _SOURCE_
<android.media.tv.DvbDeviceInfo: int getDeviceId()> -> _SOURCE_
<android.nfc.NdefRecord: byte[] getType()> -> _SOURCE_
<android.media.AudioPortConfig: android.media.AudioGainConfig gain()> -> _SOURCE_
<android.content.pm.PermissionInfo: boolean isRuntime()> -> _SOURCE_
<android.app.assist.AssistStructure$ViewNode: java.lang.String getHintIdEntry()> -> _SOURCE_
<android.widget.Toolbar: java.lang.CharSequence getNavigationContentDescription()> -> _SOURCE_
<android.webkit.URLUtil: boolean isValidUrl(java.lang.String)> -> _SOURCE_
<android.telephony.data.ApnSetting: int getAuthType()> -> _SOURCE_
<android.media.MediaFile: boolean isDrmFileType(int)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isCurrentInputMethodSetByOwner()> -> _SOURCE_
<java.lang.StringBuffer: int indexOf(java.lang.String,int)> -> _SOURCE_
<android.security.keystore.AndroidKeyStoreSpi: boolean engineContainsAlias(java.lang.String)> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec: java.lang.String getKeystoreAlias()> -> _SOURCE_
<android.content.IntentSender: java.lang.String getCreatorPackage()> -> _SOURCE_
<java.net.ServerSocket: boolean isBound()> -> _SOURCE_
<android.telecom.ParcelableCall: int getHandlePresentation()> -> _SOURCE_
<android.app.ActivityManager: java.util.List getRunningExternalApplications()> -> _SOURCE_
<android.media.MediaRouter: android.media.MediaRouter$RouteInfo getFallbackRoute()> -> _SOURCE_
<android.app.AppOpsManager: java.lang.String historicalModeToString(int)> -> _SOURCE_
<android.media.session.PlaybackState: long getBufferedPosition()> -> _SOURCE_
<android.media.browse.MediaBrowser$MediaItem: android.media.MediaDescription getDescription()> -> _SOURCE_
<android.se.omapi.Session: android.se.omapi.Channel openBasicChannel(byte[])> -> _SOURCE_
<android.service.settings.suggestions.SuggestionService: android.os.IBinder onBind(android.content.Intent)> -> _SOURCE_
<android.content.pm.parsing.ApkLiteParseUtils: android.content.pm.parsing.result.ParseResult parseApkLite(android.content.pm.parsing.result.ParseInput,java.io.File,int)> -> _SOURCE_
<android.telephony.ims.ImsCallSession: android.telephony.ims.ImsCallProfile getCallProfile()> -> _SOURCE_
<android.media.RouteDiscoveryPreference: android.os.Bundle getExtras()> -> _SOURCE_
<android.telecom.TelecomManager: boolean isTtySupported()> -> _SOURCE_
<android.media.AudioManager: int getFocusRampTimeMs(int,android.media.AudioAttributes)> -> _SOURCE_
<android.net.http.HttpResponseCache: int getHitCount()> -> _SOURCE_
<java.util.BitSet: boolean isEmpty()> -> _SOURCE_
<android.app.usage.UsageStatsManager: void setAppInactive(java.lang.String,boolean)> -> _SOURCE_
<android.graphics.ColorMatrix: float[] getArray()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: int getNumCrashes(int)> -> _SOURCE_
<android.hardware.biometrics.BiometricManager: boolean hasEnrolledBiometrics(int)> -> _SOURCE_
<android.telecom.GatewayInfo: android.net.Uri getOriginalAddress()> -> _SOURCE_
<android.telephony.TelephonyManager: android.os.Bundle getVisualVoicemailSettings()> -> _SOURCE_
<android.telephony.data.DataCallResponse: java.util.List getAddresses()> -> _SOURCE_
<android.location.Location: boolean hasAccuracy()> -> _SOURCE_
<android.media.session.MediaSession$Callback: void onCommand(java.lang.String,android.os.Bundle,android.os.ResultReceiver)> -> _SOURCE_
<java.util.jar.Manifest: java.lang.Object clone()> -> _SOURCE_
<java.security.cert.PKIXParameters: void setCertStores(java.util.List)> -> _SOURCE_
<android.telephony.ims.compat.stub.ImsConfigImplBase$ImsConfigStub: int setProvisionedStringValue(int,java.lang.String)> -> _SOURCE_
<java.lang.reflect.Constructor: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()> -> _SOURCE_
<android.location.GnssMeasurement: int getConstellationType()> -> _SOURCE_
<java.security.Signature: java.security.Provider getProvider()> -> _SOURCE_
<android.telecom.Connection: int getAddressPresentation()> -> _SOURCE_
<android.renderscript.Element: int getVectorSize()> -> _SOURCE_
<android.telephony.euicc.EuiccManager: java.util.List getSupportedCountries()> -> _SOURCE_
<android.view.View: int getMeasuredHeight()> -> _SOURCE_
<android.telephony.CellInfoTdscdma: android.telephony.CellIdentityTdscdma getCellIdentity()> -> _SOURCE_
<android.widget.AdapterViewAnimator: android.view.View getCurrentView()> -> _SOURCE_
<android.graphics.fonts.FontFamily: long getNativePtr()> -> _SOURCE_
<java.net.HttpRetryException: java.lang.String getReason()> -> _SOURCE_
<android.bluetooth.BluetoothDevice: boolean cancelPairing()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: android.os.BatteryStats$Timer getWifiSupplStateTimer(int)> -> _SOURCE_
<android.app.PendingIntent: android.app.PendingIntent getBroadcastAsUser(android.content.Context,int,android.content.Intent,int,android.os.UserHandle)> -> _SOURCE_
<javax.crypto.spec.DHParameterSpec: java.math.BigInteger getG()> -> _SOURCE_
<android.telecom.ParcelableCall: java.lang.String getContactDisplayName()> -> _SOURCE_
<android.view.accessibility.AccessibilityEvent: int getMovementGranularity()> -> _SOURCE_
<android.app.PictureInPictureParams$Builder: android.app.PictureInPictureParams build()> -> _SOURCE_
<android.content.pm.LauncherApps$PinItemRequest: android.content.pm.ShortcutInfo getShortcutInfo()> -> _SOURCE_
<android.mtp.MtpObjectInfo: int getObjectHandle()> -> _SOURCE_
<android.media.AudioPresentation: boolean hasAudioDescription()> -> _SOURCE_
<java.lang.StackTraceElement: int getLineNumber()> -> _SOURCE_
<android.view.accessibility.AccessibilityRecord: long getSourceNodeId()> -> _SOURCE_
<android.content.ContentProvider: android.os.Bundle call(java.lang.String,java.lang.String,java.lang.String,android.os.Bundle)> -> _SOURCE_
<android.telephony.TelephonyManager: int getActiveModemCount()> -> _SOURCE_
<java.time.ZonedDateTime: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)> -> _SOURCE_
<android.privacy.internal.longitudinalreporting.LongitudinalReportingConfig: java.lang.String toString()> -> _SOURCE_
<android.hardware.fingerprint.FingerprintManager$AuthenticationCallback: void onAuthenticationSucceeded(android.hardware.fingerprint.FingerprintManager$AuthenticationResult)> -> _SOURCE_
<android.nfc.cardemulation.CardEmulation: java.util.List getServices(java.lang.String)> -> _SOURCE_
<android.app.AppOpsManager$OpEntry: android.app.AppOpsManager$OpEventProxyInfo getLastBackgroundProxyInfo(int)> -> _SOURCE_
<java.io.RandomAccessFile: long getFilePointer()> -> _SOURCE_
<android.telecom.Call: android.telecom.Call$RttCall getRttCall()> -> _SOURCE_
<android.service.quickaccesswallet.GetWalletCardsRequest: int describeContents()> -> _SOURCE_
<android.app.Activity: android.view.contentcapture.ContentCaptureManager$ContentCaptureClient getContentCaptureClient()> -> _SOURCE_
<android.media.AudioRecordingConfiguration: int getClientAudioSource()> -> _SOURCE_
<android.telephony.euicc.EuiccNotification: byte[] getData()> -> _SOURCE_
<android.media.AudioManager: java.util.List getActivePlaybackConfigurations()> -> _SOURCE_
<android.media.MediaCodecInfo$VideoCapabilities: int getHeightAlignment()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.util.List getKeepUninstalledPackages(android.content.ComponentName)> -> _SOURCE_
<android.telephony.ims.ProvisioningManager: java.lang.String getProvisioningStringValue(int)> -> _SOURCE_
<android.database.sqlite.SQLiteSession: int executeForCursorWindow(java.lang.String,java.lang.Object[],android.database.CursorWindow,int,int,boolean,int,android.os.CancellationSignal)> -> _SOURCE_
<android.database.DatabaseUtils: void cursorIntToContentValuesIfPresent(android.database.Cursor,android.content.ContentValues,java.lang.String)> -> _SOURCE_
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: java.util.Set getInputFormats()> -> _SOURCE_
<android.telecom.Call$Details: long getCreationTimeMillis()> -> _SOURCE_
<java.lang.Boolean: java.lang.String toString()> -> _SOURCE_
<android.media.AudioRecord: int getAudioSessionId()> -> _SOURCE_
<java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()> -> _SOURCE_
<android.telephony.SmsMessage: android.telephony.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,java.lang.String,boolean)> -> _SOURCE_
<android.media.AudioRecordingConfiguration: int getClientPortId()> -> _SOURCE_
<android.text.format.Formatter: java.lang.String formatShortElapsedTimeRoundingUpToMinutes(android.content.Context,long)> -> _SOURCE_
<android.app.AppOpsManager$OpEntry: java.lang.String getOpStr()> -> _SOURCE_
<com.android.internal.os.BatteryStatsHelper: boolean shouldHideSipper(com.android.internal.os.BatterySipper)> -> _SOURCE_
<android.media.MediaRouter2$RoutingController: int getVolume()> -> _SOURCE_
<android.hardware.camera2.legacy.CameraDeviceState: boolean setIdle()> -> _SOURCE_
<android.location.GpsMeasurement: byte getMultipathIndicator()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getVoiceMailNumber()> -> _SOURCE_
<com.android.internal.os.BaseCommand: java.lang.String nextArg()> -> _SOURCE_
<android.telephony.ims.compat.stub.ImsConfigImplBase: java.lang.String getProvisionedStringValue(int)> -> _SOURCE_
<android.service.notification.NotificationStats: int getDismissalSentiment()> -> _SOURCE_
<android.telephony.ModemActivityInfo: int getReceiveTimeMillis()> -> _SOURCE_
<android.net.NetworkCapabilities: java.lang.String capabilityNameOf(int)> -> _SOURCE_
<android.telephony.CellSignalStrengthWcdma: android.telephony.CellSignalStrengthWcdma copy()> -> _SOURCE_
<android.media.tv.tunerresourcemanager.TunerDemuxRequest: java.lang.String toString()> -> _SOURCE_
<android.app.ActivityManager$TaskSnapshot: android.content.ComponentName getTopActivityComponent()> -> _SOURCE_
<com.android.internal.logging.MetricsLogger: void write(android.metrics.LogMaker)> -> _SOURCE_
<java.text.NumberFormat: java.util.Currency getCurrency()> -> _SOURCE_
<android.content.integrity.IntegrityFormula: android.content.integrity.IntegrityFormula readFromParcel(android.os.Parcel)> -> _SOURCE_
<android.widget.TableLayout: void addView(android.view.View,int)> -> _SOURCE_
<android.telecom.TelecomManager: java.util.List getSelfManagedPhoneAccounts()> -> _SOURCE_
<android.os.connectivity.CellularBatteryStats: long getTimeInRxSignalStrengthLevelMicros(int)> -> _SOURCE_
<android.net.NetworkCapabilities: void appendStringRepresentationOfBitMaskToStringBuilder(java.lang.StringBuilder,long,android.net.NetworkCapabilities$NameOf,java.lang.String)> -> _SOURCE_
<android.view.animation.OvershootInterpolator: long createNativeInterpolator()> -> _SOURCE_
<android.app.admin.SecurityLog$SecurityEvent: android.app.admin.SecurityLog$SecurityEvent redact(int)> -> _SOURCE_
<java.time.chrono.HijrahDate: java.time.chrono.HijrahChronology getChronology()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long getGpsBatteryDrainMaMs()> -> _SOURCE_
<android.content.pm.InstallationFile: int getLocation()> -> _SOURCE_
<android.net.UrlQuerySanitizer: android.net.UrlQuerySanitizer$ValueSanitizer getAllButNulAndAngleBracketsLegal()> -> _SOURCE_
<android.content.integrity.InstallerAllowedByManifestFormula: boolean isAppCertificateFormula()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.lang.String[] getAccountTypesWithManagementDisabledAsUser(int)> -> _SOURCE_
<android.printservice.recommendation.RecommendationService: android.os.IBinder onBind(android.content.Intent)> -> _SOURCE_
<java.net.HttpCookie: void setDomain(java.lang.String)> -> _SOURCE_
<android.os.storage.StorageManager: boolean checkPermissionReadAudio(boolean,int,int,java.lang.String,java.lang.String)> -> _SOURCE_
<java.time.chrono.Chronology: java.lang.String getDisplayName(java.time.format.TextStyle,java.util.Locale)> -> _SOURCE_
<android.location.LocationManager: java.lang.String getGnssHardwareModelName()> -> _SOURCE_
<android.telephony.LocationAccessPolicy$LocationPermissionQuery$Builder: android.telephony.LocationAccessPolicy$LocationPermissionQuery$Builder setMinSdkVersionForFine(int)> -> _SOURCE_
<android.service.voice.VoiceInteractionSession$AssistState: android.app.assist.AssistStructure getAssistStructure()> -> _SOURCE_
<android.media.MediaMetrics$Item: android.os.Bundle toBundle()> -> _SOURCE_
<android.media.tv.TvInputManager: int getClientPid(java.lang.String)> -> _SOURCE_
<android.util.jar.StrictJarFile: java.security.cert.Certificate[][] getCertificateChains(java.util.zip.ZipEntry)> -> _SOURCE_
<android.hardware.camera2.params.StreamConfigurationMap: java.lang.String toString()> -> _SOURCE_
<com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.ArgumentPlaceholder __()> -> _SOURCE_
<android.widget.GridLayout: boolean isRowOrderPreserved()> -> _SOURCE_
<android.app.NotificationManager: void setZenMode(int,android.net.Uri,java.lang.String)> -> _SOURCE_
<android.content.pm.PackagePartitions$SystemPartition: java.io.File getPrivAppFolder()> -> _SOURCE_
<android.util.KeyValueListParser$FloatValue: void dump(java.io.PrintWriter,java.lang.String)> -> _SOURCE_
<android.content.pm.permission.RuntimePermissionPresentationInfo: java.lang.CharSequence getLabel()> -> _SOURCE_
<android.media.MediaCodecInfo$VideoCapabilities: android.util.Size getBlockSize()> -> _SOURCE_
<android.bluetooth.le.ScanSettings: int getNumOfMatches()> -> _SOURCE_
<android.app.slice.Slice: boolean hasHint(java.lang.String)> -> _SOURCE_
<java.time.YearMonth: java.time.YearMonth now(java.time.Clock)> -> _SOURCE_
<android.media.tv.tuner.frontend.FrontendStatus: int getPerBer()> -> _SOURCE_
<java.util.Scanner: java.lang.String toString()> -> _SOURCE_
<android.view.contentcapture.ContentCaptureHelper: void setLoggingLevel()> -> _SOURCE_
<android.accessibilityservice.AccessibilityService$MagnificationController: float getCenterX()> -> _SOURCE_
<android.content.ContextWrapper: java.io.File getObbDir()> -> _SOURCE_
<android.content.pm.ApplicationInfo: void initForUser(int)> -> _SOURCE_
<android.view.textclassifier.SelectionEvent: java.lang.String getEntityType()> -> _SOURCE_
<android.app.Fragment: android.app.FragmentManager getFragmentManager()> -> _SOURCE_
<android.telephony.PhoneStateListener: void onCallStateChanged(int,java.lang.String)> -> _SOURCE_
<android.app.admin.DevicePolicyEventLogger: long getTimePeriod()> -> _SOURCE_
<java.security.cert.PKIXParameters: java.security.cert.CertSelector getTargetCertConstraints()> -> _SOURCE_
<android.media.MediaRoute2Info: java.lang.CharSequence getName()> -> _SOURCE_
<android.telephony.CellSignalStrengthLte: int getRssnr()> -> _SOURCE_
<android.app.NotificationManager: void notifyAsUser(java.lang.String,int,android.app.Notification,android.os.UserHandle)> -> _SOURCE_
<android.content.pm.PackageInstaller$SessionInfo: int getRollbackDataPolicy()> -> _SOURCE_
<android.view.ThreadedRenderer$SimpleRenderer: android.graphics.RenderNode getRootNode()> -> _SOURCE_
<android.content.ContentProvider: android.net.Uri maybeAddUserId(android.net.Uri,int)> -> _SOURCE_
<java.util.IntSummaryStatistics: long getSum()> -> _SOURCE_
<android.view.contentcapture.ContentCaptureSession: android.view.contentcapture.ContentCaptureContext getContentCaptureContext()> -> _SOURCE_
<android.telephony.PhysicalChannelConfig: java.lang.String toString()> -> _SOURCE_
<java.util.stream.DoubleStream: java.util.stream.DoubleStream$Builder builder()> -> _SOURCE_
<android.hardware.display.ColorDisplayManager: boolean isDeviceColorManaged()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isBackupServiceEnabled(android.content.ComponentName)> -> _SOURCE_
<com.android.internal.os.AtomicDirectory: boolean exists()> -> _SOURCE_
<android.telephony.SubscriptionManager: void invalidateSlotIndexCaches()> -> _SOURCE_
<android.hardware.usb.UsbEndpoint: int getAttributes()> -> _SOURCE_
<android.content.ApexEnvironment: java.io.File getDeviceProtectedDataDirForUser(android.os.UserHandle)> -> _SOURCE_
<javax.net.ssl.HandshakeCompletedEvent: java.security.Principal getPeerPrincipal()> -> _SOURCE_
<android.location.GnssStatus: int getSatelliteCount()> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec: long getBoundToSpecificSecureUserId()> -> _SOURCE_
<android.animation.PathKeyframes: android.animation.Keyframes$IntKeyframes createXIntKeyframes()> -> _SOURCE_
<android.content.pm.LauncherApps: android.os.ParcelFileDescriptor getShortcutIconFd(java.lang.String,java.lang.String,android.os.UserHandle)> -> _SOURCE_
<android.bluetooth.BluetoothDevice: int getPhonebookAccessPermission()> -> _SOURCE_
<android.location.GnssClock: double getReferenceCarrierFrequencyHzForIsb()> -> _SOURCE_
<android.media.MediaCodecList: java.lang.String findEncoderForFormat(android.media.MediaFormat)> -> _SOURCE_
<java.security.cert.CertPathBuilder: java.security.Provider getProvider()> -> _SOURCE_
<android.os.Environment$UserEnvironment: java.io.File[] buildExternalStoragePublicDirs(java.lang.String)> -> _SOURCE_
<android.os.Parcel: java.io.Serializable readSerializable()> -> _SOURCE_
<java.util.TreeMap: java.util.NavigableMap descendingMap()> -> _SOURCE_
<android.media.VolumeProvider: int getCurrentVolume()> -> _SOURCE_
<android.service.autofill.UserData: int getMaxFieldClassificationIdsSize()> -> _SOURCE_
<android.ddm.DdmHandleThread: void register()> -> _SOURCE_
<android.hardware.biometrics.BiometricPrompt$CryptoObject: java.security.Signature getSignature()> -> _SOURCE_
<android.graphics.Typeface: android.graphics.Typeface create(java.lang.String,int)> -> _SOURCE_
<android.location.GpsStatus: java.lang.Iterable getSatellites()> -> _SOURCE_
<android.telecom.PhoneAccount: boolean isSelfManaged()> -> _SOURCE_
<java.util.logging.LogRecord: java.lang.String getSourceMethodName()> -> _SOURCE_
<android.media.MediaCodecInfo$VideoCapabilities: android.util.Range getSupportedWidthsFor(int)> -> _SOURCE_
<com.android.internal.os.PowerCalculator: void calculateRemaining(com.android.internal.os.BatterySipper,android.os.BatteryStats,long,long,int)> -> _SOURCE_
<android.telephony.SmsMessage: long getTimestampMillis()> -> _SOURCE_
<android.hardware.location.ActivityRecognitionEvent: java.lang.String toString()> -> _SOURCE_
<android.view.View: int getAccessibilityTraversalBefore()> -> _SOURCE_
<android.drm.DrmRights: java.lang.String getMimeType()> -> _SOURCE_
<android.telephony.NetworkScanRequest: int getSearchPeriodicity()> -> _SOURCE_
<android.service.voice.VoiceInteractionService: boolean isKeyphraseAndLocaleSupportedForHotword(java.lang.String,java.util.Locale)> -> _SOURCE_
<android.telephony.TelephonyManager: void call(java.lang.String,java.lang.String)> -> _SOURCE_
<android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder setSubtypeMode(java.lang.String)> -> _SOURCE_
<java.lang.System: java.io.Console console()> -> _SOURCE_
<android.se.omapi.Channel: android.se.omapi.Session getSession()> -> _SOURCE_
<java.net.InetSocketAddress: java.lang.String getHostName()> -> _SOURCE_
<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandles$Lookup publicLookup()> -> _SOURCE_
<android.text.style.SubscriptSpan: int getSpanTypeIdInternal()> -> _SOURCE_
<android.service.notification.NotificationListenerService$Ranking: int getImportance()> -> _SOURCE_
<android.telephony.CbGeoUtils$Polygon: java.lang.String toString()> -> _SOURCE_
<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)> -> _SOURCE_
<android.media.MediaCas$Session: byte[] getSessionId()> -> _SOURCE_
<android.os.UserManager: boolean someUserHasSeedAccount(java.lang.String,java.lang.String)> -> _SOURCE_
<android.view.accessibility.AccessibilityInteractionClient: android.util.SparseArray getWindowsOnAllDisplays(int)> -> _SOURCE_
<android.webkit.UrlInterceptRegistry: android.webkit.PluginData getPluginData(java.lang.String,java.util.Map)> -> _SOURCE_
<android.content.pm.PackageParser: android.content.pm.PackageParser$ApkLite parseApkLite(java.io.FileDescriptor,java.lang.String,int)> -> _SOURCE_
<android.service.euicc.EuiccProfileInfo: java.lang.String toString()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getLine1AlphaTag(int)> -> _SOURCE_
<android.permission.RuntimePermissionUsageInfo: int getAppAccessCount()> -> _SOURCE_
<android.drm.DrmEvent: int getType()> -> _SOURCE_
<android.security.keystore.AttestationUtils: java.security.cert.X509Certificate[] attestDeviceIds(android.content.Context,int[],byte[])> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: int getDischargeStartLevel()> -> _SOURCE_
<java.util.Locale: java.util.Locale getDefault()> -> _SOURCE_
<android.app.Notification$MessagingStyle: java.util.List getHistoricMessages()> -> _SOURCE_
<android.telephony.ims.compat.stub.ImsCallSessionImplBase: void start(java.lang.String,android.telephony.ims.ImsCallProfile)> -> _SOURCE_
<android.telephony.SubscriptionInfo: int getCarrierId()> -> _SOURCE_
<android.net.SntpClient: long getRoundTripTime()> -> _SOURCE_
<android.telephony.SubscriptionManager: int getEnabledSubscriptionId(int)> -> _SOURCE_
<android.net.NetworkCapabilities: int getLinkDownstreamBandwidthKbps()> -> _SOURCE_
<android.telecom.ConnectionRequest: java.util.List getParticipants()> -> _SOURCE_
<com.android.internal.view.ScrollViewCaptureHelper: void onPrepareForStart(android.view.ViewGroup,android.graphics.Rect)> -> _SOURCE_
<android.print.PrintJobInfo: java.lang.String getPrinterName()> -> _SOURCE_
<android.view.textservice.SpellCheckerSession: android.view.textservice.SpellCheckerInfo getSpellChecker()> -> _SOURCE_
<android.app.blob.BlobStoreManager: java.util.List getLeasedBlobs()> -> _SOURCE_
<android.app.servertransaction.PendingTransactionActions: boolean shouldCallOnPostCreate()> -> _SOURCE_
<android.util.TimeUtils: void dumpTimeWithDelta(java.io.PrintWriter,long,long)> -> _SOURCE_
<android.app.AppOpsManager$AttributedOpEntry: android.app.AppOpsManager$OpEventProxyInfo getLastProxyInfo(int,int,int)> -> _SOURCE_
<android.os.storage.StorageVolume: java.lang.String getId()> -> _SOURCE_
<android.service.contentcapture.ContentCaptureService: void onDataRemovalRequest(android.view.contentcapture.DataRemovalRequest)> -> _SOURCE_
<android.telephony.SmsManager: boolean isSMSPromptEnabled()> -> _SOURCE_
<android.widget.ScrollBarDrawable: android.graphics.drawable.Drawable getHorizontalTrackDrawable()> -> _SOURCE_
<android.media.MediaRouter$RouteCategory: int getSupportedTypes()> -> _SOURCE_
<android.view.View: android.graphics.drawable.Drawable getVerticalScrollbarThumbDrawable()> -> _SOURCE_
<android.net.ConnectivityManager: android.net.NetworkCapabilities networkCapabilitiesForType(int)> -> _SOURCE_
<android.renderscript.Element: int getSubElementCount()> -> _SOURCE_
<android.location.GpsMeasurement: boolean isPseudorangeRateCorrected()> -> _SOURCE_
<java.util.Currency: java.lang.String getSymbol(java.util.Locale)> -> _SOURCE_
<android.content.ContextWrapper: android.content.res.AssetManager getAssets()> -> _SOURCE_
<android.bluetooth.BluetoothGattCallback: void onConnectionStateChange(android.bluetooth.BluetoothGatt,int,int)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: int getPasswordMinimumLetters(android.content.ComponentName)> -> _SOURCE_
<java.net.NetworkInterface: boolean isVirtual()> -> _SOURCE_
<android.app.AppOpsManager: void finishOp(int,int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.content.integrity.AtomicFormula$StringAtomicFormula: boolean isInstallerFormula()> -> _SOURCE_
<android.os.storage.StorageManager: boolean isUsbMassStorageEnabled()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$ControllerActivityCounterImpl: com.android.internal.os.BatteryStatsImpl$LongSamplingCounter getSleepTimeCounter()> -> _SOURCE_
<android.app.assist.AssistStructure$ViewNode: java.lang.String getIdType()> -> _SOURCE_
<android.view.inputmethod.InputMethodInfo: java.lang.String getSettingsActivity()> -> _SOURCE_
<java.lang.Throwable: java.lang.Throwable fillInStackTrace()> -> _SOURCE_
<java.util.PriorityQueue: java.util.Comparator comparator()> -> _SOURCE_
<android.net.TrafficStats: long getMobileRxBytes()> -> _SOURCE_
<android.media.RemoteDisplayState$RemoteDisplayInfo: java.lang.String toString()> -> _SOURCE_
<android.view.Gravity: java.lang.String toString(int)> -> _SOURCE_
<android.telephony.mbms.ServiceInfo: java.lang.CharSequence getNameForLocale(java.util.Locale)> -> _SOURCE_
<android.net.NetworkAgentConfig: java.lang.String getLegacyExtraInfo()> -> _SOURCE_
<android.hardware.Camera$Parameters: java.util.List getSupportedVideoSizes()> -> _SOURCE_
<android.media.tv.tunerresourcemanager.TunerDescramblerRequest: java.lang.String toString()> -> _SOURCE_
<android.provider.Telephony$Mms$Addr: android.net.Uri getAddrUriForMessage(java.lang.String)> -> _SOURCE_
<android.telephony.data.DataService$DataServiceProvider: void notifyDataCallListChanged(java.util.List)> -> _SOURCE_
<android.telephony.SmsMessage: int getIndexOnSim()> -> _SOURCE_
<android.telephony.SignalStrength: int getDbm()> -> _SOURCE_
<android.widget.SearchView: boolean isIconifiedByDefault()> -> _SOURCE_
<android.telephony.TelephonyFrameworkInitializer: void registerServiceWrappers()> -> _SOURCE_
<android.content.pm.InstantAppResolveInfo: int getVersionCode()> -> _SOURCE_
<java.security.KeyStore$SecretKeyEntry: java.lang.String toString()> -> _SOURCE_
<java.time.chrono.ChronoLocalDate: java.time.chrono.ChronoLocalDate minus(long,java.time.temporal.TemporalUnit)> -> _SOURCE_
<android.telecom.Call$Details: int getSupportedAudioRoutes()> -> _SOURCE_
<android.media.tv.tuner.filter.MediaEvent: int getStreamId()> -> _SOURCE_
<java.net.NetworkInterface: java.util.Enumeration getSubInterfaces()> -> _SOURCE_
<android.content.Context: android.view.contentcapture.ContentCaptureManager$ContentCaptureClient getContentCaptureClient()> -> _SOURCE_
<android.webkit.TracingConfig: java.util.List getCustomIncludedCategories()> -> _SOURCE_
<com.android.internal.util.StateMachine$LogRec: java.lang.String toString()> -> _SOURCE_
<android.provider.Settings$System: java.lang.String getString(android.content.ContentResolver,java.lang.String)> -> _SOURCE_
<android.content.ContentProviderResult: java.lang.String toString()> -> _SOURCE_
<android.view.textservice.SentenceSuggestionsInfo: int getOffsetAt(int)> -> _SOURCE_
<android.app.usage.NetworkStatsManager: void registerUsageCallback(int,java.lang.String,long,android.app.usage.NetworkStatsManager$UsageCallback)> -> _SOURCE_
<android.media.tv.TvContract: boolean isChannelUriForTunerInput(android.net.Uri)> -> _SOURCE_
<com.android.internal.telephony.SmsMessageBase: java.lang.String getOriginatingAddress()> -> _SOURCE_
<android.app.role.RoleManager: java.util.List getHeldRolesFromController(java.lang.String)> -> _SOURCE_
<android.security.keystore.KeyInfo: java.lang.String[] getSignaturePaddings()> -> _SOURCE_
<android.database.sqlite.SQLiteSession: boolean hasNestedTransaction()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: android.os.BatteryStats$ControllerActivityCounter getModemControllerActivity()> -> _SOURCE_
<android.hardware.Sensor: java.lang.String getRequiredPermission()> -> _SOURCE_
<android.view.inputmethod.InputMethodSubtype: boolean hasSubtypeId()> -> _SOURCE_
<android.widget.SimpleCursorAdapter: android.widget.SimpleCursorAdapter$CursorToStringConverter getCursorToStringConverter()> -> _SOURCE_
<javax.net.ssl.KeyManagerFactory: java.security.Provider getProvider()> -> _SOURCE_
<android.graphics.ColorSpace: int getComponentCount()> -> _SOURCE_
<javax.crypto.spec.DHParameterSpec: int getL()> -> _SOURCE_
<android.metrics.LogMaker: android.metrics.LogMaker setTimestamp(long)> -> _SOURCE_
<android.content.om.OverlayInfo: java.lang.String toString()> -> _SOURCE_
<android.os.TelephonyServiceManager: android.os.TelephonyServiceManager$ServiceRegisterer getCarrierConfigServiceRegisterer()> -> _SOURCE_
<android.net.IpSecAlgorithm: java.lang.String toString()> -> _SOURCE_
<android.util.SparseArrayMap: int numMaps()> -> _SOURCE_
<android.net.ConnectivityDiagnosticsManager$DataStallReport: android.net.NetworkCapabilities getNetworkCapabilities()> -> _SOURCE_
<android.service.notification.ZenModeConfig: android.net.Uri toCountdownConditionId(long,boolean)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: int getDischargeAmountScreenOffSinceCharge()> -> _SOURCE_
<android.permission.RuntimePermissionPresentationInfo: java.lang.CharSequence getLabel()> -> _SOURCE_
<android.os.Process: int getUidForPid(int)> -> _SOURCE_
<android.metrics.LogMaker: android.metrics.LogMaker setUid(int)> -> _SOURCE_
<android.bluetooth.BluetoothDevice: int getMessageAccessPermission()> -> _SOURCE_
<android.os.Debug$MemoryInfo: int getTotalRss()> -> _SOURCE_
<android.view.ContextThemeWrapper: android.content.res.Resources getResources()> -> _SOURCE_
<com.android.internal.os.ClassLoaderFactory: java.lang.String getPathClassLoaderName()> -> _SOURCE_
<com.android.internal.os.BinderCallsStats: java.util.ArrayList getExportedCallStats()> -> _SOURCE_
<android.app.PictureInPictureParams: boolean empty()> -> _SOURCE_
<android.app.job.JobParameters: android.os.Bundle getTransientExtras()> -> _SOURCE_
<android.app.StatusBarManager$DisableInfo: boolean isStatusBarExpansionDisabled()> -> _SOURCE_
<android.telecom.ConnectionService: java.util.Collection getAllConnections()> -> _SOURCE_
<android.app.prediction.AppPredictionContext: int getPredictedTargetCount()> -> _SOURCE_
<android.media.RoutingSessionInfo: java.lang.String toString()> -> _SOURCE_
<android.hardware.location.NanoAppInstanceInfo: int getAppVersion()> -> _SOURCE_
<android.view.textclassifier.ExtrasUtils: java.lang.String getModelName(android.os.Bundle)> -> _SOURCE_
<android.hardware.camera2.TotalCaptureResult: int getSessionId()> -> _SOURCE_
<android.hardware.camera2.CameraCharacteristics: java.util.List getAvailableCaptureRequestKeys()> -> _SOURCE_
<android.net.TrafficStats: long getRxPackets(java.lang.String)> -> _SOURCE_
<android.service.voice.VoiceInteractionSession$AssistState: int getIndex()> -> _SOURCE_
<android.text.AutoGrowArray$IntArray: int size()> -> _SOURCE_
<java.time.LocalDateTime: int get(java.time.temporal.TemporalField)> -> _SOURCE_
<android.hardware.location.NanoAppInstanceInfo: long getAppId()> -> _SOURCE_
<android.media.MediaRoute2ProviderService: void notifyRoutes(java.util.Collection)> -> _SOURCE_
<android.media.tv.tuner.Tuner: long getAvSyncTime(int)> -> _SOURCE_
<android.telephony.ims.compat.feature.MMTelFeature: android.telephony.ims.stub.ImsMultiEndpointImplBase getMultiEndpointInterface()> -> _SOURCE_
<android.view.ViewGroup: int getPersistentDrawingCache()> -> _SOURCE_
<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy$Builder penaltyLog()> -> _SOURCE_
<android.app.admin.SecurityLog$SecurityEvent: int getIntegerData(int)> -> _SOURCE_
<com.android.internal.policy.DecorContext: android.content.ContentCaptureOptions getContentCaptureOptions()> -> _SOURCE_
<android.media.session.PlaybackState$Builder: android.media.session.PlaybackState build()> -> _SOURCE_
<java.security.KeyStore$Entry: java.util.Set getAttributes()> -> _SOURCE_
<android.util.Property: java.lang.Class getType()> -> _SOURCE_
<android.media.session.MediaController: android.media.MediaMetadata getMetadata()> -> _SOURCE_
<android.webkit.URLUtil: boolean isAboutUrl(java.lang.String)> -> _SOURCE_
<android.media.MicrophoneInfo: float getMinSpl()> -> _SOURCE_
<android.net.NetworkCapabilities: android.net.TransportInfo getTransportInfo()> -> _SOURCE_
<javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)> -> _SOURCE_
<java.security.cert.CertStore: java.security.cert.CertStore getInstance(java.lang.String,java.security.cert.CertStoreParameters,java.lang.String)> -> _SOURCE_
<android.telephony.ims.stub.RcsPresenceExchangeImplBase: void onUnpublish()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.lang.String[] getAccountTypesWithManagementDisabled()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: int getPasswordQuality(android.content.ComponentName,int)> -> _SOURCE_
<android.hardware.camera2.impl.CameraCaptureSessionImpl: boolean isAborting()> -> _SOURCE_
<android.view.accessibility.AccessibilityRecord: int getRemovedCount()> -> _SOURCE_
<android.location.GnssMeasurement: int getSvid()> -> _SOURCE_
<android.app.blob.BlobStoreManager$Session: boolean isPackageAccessAllowed(java.lang.String,byte[])> -> _SOURCE_
<android.media.RoutingSessionInfo: java.lang.CharSequence getName()> -> _SOURCE_
<android.print.PrintAttributes$Resolution: int getHorizontalDpi()> -> _SOURCE_
<android.app.Activity: android.content.ComponentName getCallingActivity()> -> _SOURCE_
<android.text.format.Time: java.lang.String format3339(boolean)> -> _SOURCE_
<android.telephony.ims.compat.feature.MMTelFeature: com.android.ims.internal.IImsCallSession getPendingCallSession(int,java.lang.String)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean approveCaCert(java.lang.String,int,boolean)> -> _SOURCE_
<android.database.DatabaseUtils: long queryNumEntries(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String)> -> _SOURCE_
<android.os.SystemProperties$Handle: java.lang.String get()> -> _SOURCE_
<java.security.spec.EncodedKeySpec: byte[] getEncoded()> -> _SOURCE_
<android.service.notification.ZenPolicy: byte[] toProto()> -> _SOURCE_
<android.media.audiopolicy.AudioProductStrategy: android.media.AudioAttributes getAudioAttributes()> -> _SOURCE_
<android.hardware.Camera$Parameters: int getPictureFormat()> -> _SOURCE_
<android.service.notification.NotificationListenerService$Ranking: java.util.List getSmartReplies()> -> _SOURCE_
<android.bluetooth.BluetoothA2dp: java.util.List getConnectedDevices()> -> _SOURCE_
<android.metrics.LogMaker: int getSubtype()> -> _SOURCE_
<android.os.Parcel: android.util.SizeF readSizeF()> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec: java.util.Date getCertificateNotAfter()> -> _SOURCE_
<android.telephony.mbms.FileInfo: java.lang.String getMimeType()> -> _SOURCE_
<java.util.jar.Attributes: java.util.Set entrySet()> -> _SOURCE_
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.impl.CameraMetadataNative getNativeCopy()> -> _SOURCE_
<com.android.internal.widget.RecyclerView: com.android.internal.widget.RecyclerView$Adapter getAdapter()> -> _SOURCE_
<android.app.AppOpsManager$HistoricalOp: long getRejectCount(int,int,int)> -> _SOURCE_
<android.content.res.CompatResources: void setContext(android.content.Context)> -> _SOURCE_
<com.android.internal.util.SyncResultReceiver: java.util.ArrayList getParcelableListResult()> -> _SOURCE_
<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()> -> _SOURCE_
<android.view.ScrollCaptureClient$DelayedAction: boolean timeoutNow()> -> _SOURCE_
<android.view.View: java.lang.String getTransitionName()> -> _SOURCE_
<android.view.WindowManagerGlobal: java.util.ArrayList getWindowViews()> -> _SOURCE_
<android.preference.PreferenceFragment: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> -> _SOURCE_
<android.view.inputmethod.InputMethodSubtype: int getNameResId()> -> _SOURCE_
<java.net.InetSocketAddress: java.lang.String getHostString()> -> _SOURCE_
<android.media.MediaRouter$RouteGroup: java.lang.String toString()> -> _SOURCE_
<android.media.session.MediaSessionManager$RemoteUserInfo: java.lang.String getPackageName()> -> _SOURCE_
<android.content.ContextWrapper: int checkSelfPermission(java.lang.String)> -> _SOURCE_
<android.hardware.location.NanoAppState: boolean isEnabled()> -> _SOURCE_
<java.security.cert.TrustAnchor: java.lang.String toString()> -> _SOURCE_
<android.app.KeyguardManager: android.content.Intent createConfirmDeviceCredentialIntent(java.lang.CharSequence,java.lang.CharSequence,int)> -> _SOURCE_
<com.android.internal.telephony.SmsApplication: android.content.ComponentName getDefaultSimFullApplication(android.content.Context,boolean)> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isImsRegistered(int)> -> _SOURCE_
<android.renderscript.Element: int getBytesSize()> -> _SOURCE_
<android.location.GnssClock: int getHardwareClockDiscontinuityCount()> -> _SOURCE_
<android.view.accessibility.AccessibilityManager: boolean addTouchExplorationStateChangeListener(android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener)> -> _SOURCE_
<android.print.PrintAttributes$Resolution: java.lang.String toString()> -> _SOURCE_
<android.telephony.PhysicalChannelConfig: int[] getContextIds()> -> _SOURCE_
<android.widget.AbsSeekBar: int getThumbOffset()> -> _SOURCE_
<android.hardware.usb.UsbDevice: boolean getHasAudioCapture()> -> _SOURCE_
<android.bluetooth.BluetoothHeadset: boolean isInbandRingingSupported(android.content.Context)> -> _SOURCE_
<android.bluetooth.SdpMasRecord: java.lang.String toString()> -> _SOURCE_
<android.media.RingtoneManager: int inferStreamType()> -> _SOURCE_
<android.location.GeocoderParams: java.lang.String getClientPackage()> -> _SOURCE_
<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)> -> _SOURCE_
<android.hardware.display.WifiDisplay: java.lang.String toString()> -> _SOURCE_
<android.media.AudioAttributes: int toLegacyStreamType(android.media.AudioAttributes)> -> _SOURCE_
<java.util.concurrent.ConcurrentHashMap: int size()> -> _SOURCE_
<android.app.NotificationManager: boolean areNotificationsEnabled()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean setLine1NumberForDisplay(java.lang.String,java.lang.String)> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: int releaseMemory()> -> _SOURCE_
<android.telecom.CallAudioState: int describeContents()> -> _SOURCE_
<android.app.NotificationHistory: boolean hasNextNotification()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long getPowerSaveModeEnabledTime(long,int)> -> _SOURCE_
<android.view.autofill.AutofillManager: void requestHideFillUi()> -> _SOURCE_
<android.view.textclassifier.TextLinks: java.lang.String toString()> -> _SOURCE_
<android.location.GnssMeasurementCorrections: java.util.List getSingleSatelliteCorrectionList()> -> _SOURCE_
<android.hardware.location.NanoAppBinary: int getFlags()> -> _SOURCE_
<java.util.logging.LogManager: java.util.logging.Logger getLogger(java.lang.String)> -> _SOURCE_
<android.view.accessibility.AccessibilityWindowInfo: int getDisplayId()> -> _SOURCE_
<android.os.UserManager: boolean isPrimaryUser()> -> _SOURCE_
<com.android.internal.os.ProcStatsUtil: java.lang.String readSingleLineProcFile(java.lang.String)> -> _SOURCE_
<android.content.UndoOwner: java.lang.String toString()> -> _SOURCE_
<android.os.health.HealthStats: long getMeasurement(int)> -> _SOURCE_
<android.telephony.CellIdentityWcdma: android.telephony.gsm.GsmCellLocation asCellLocation()> -> _SOURCE_
<android.app.timedetector.TelephonyTimeSuggestion$Builder: android.app.timedetector.TelephonyTimeSuggestion$Builder addDebugInfo(java.lang.String)> -> _SOURCE_
<android.media.AudioMetadata: android.media.AudioMetadataMap createMap()> -> _SOURCE_
<android.security.keystore.recovery.RecoveryController: java.util.List getAliases()> -> _SOURCE_
<com.android.ims.internal.uce.common.CapInfo: boolean isFtThumbSupported()> -> _SOURCE_
<android.bluetooth.BluetoothHeadsetClientCall: boolean isMultiParty()> -> _SOURCE_
<android.content.ContextWrapper: void reloadSharedPreferences()> -> _SOURCE_
<android.graphics.Paint$FontMetricsInt: java.lang.String toString()> -> _SOURCE_
<android.app.AppOpsManager$HistoricalOps: android.app.AppOpsManager$HistoricalUidOps getUidOpsAt(int)> -> _SOURCE_
<android.view.textclassifier.TextLanguage: int getLocaleHypothesisCount()> -> _SOURCE_
<android.app.Activity: android.view.SearchEvent getSearchEvent()> -> _SOURCE_
<android.media.Rating: android.media.Rating newPercentageRating(float)> -> _SOURCE_
<android.text.style.TtsSpan$CardinalBuilder: android.text.style.TtsSpan$CardinalBuilder setNumber(long)> -> _SOURCE_
<android.net.NetworkStats: int size()> -> _SOURCE_
<android.graphics.drawable.ColorDrawable: android.graphics.Xfermode getXfermode()> -> _SOURCE_
<android.net.util.KeepaliveUtils: int getSupportedKeepalivesForNetworkCapabilities(int[],android.net.NetworkCapabilities)> -> _SOURCE_
<android.app.Fragment: void onSaveInstanceState(android.os.Bundle)> -> _SOURCE_
<android.location.GpsNavigationMessage: byte[] getData()> -> _SOURCE_
<android.provider.CalendarContract$CalendarEntity: android.content.EntityIterator newEntityIterator(android.database.Cursor)> -> _SOURCE_
<android.os.storage.StorageVolume: java.lang.String getDescription(android.content.Context)> -> _SOURCE_
<android.net.NetworkUtils: java.lang.String trimV4AddrZeros(java.lang.String)> -> _SOURCE_
<android.app.slice.SliceProvider: java.lang.CharSequence getPermissionString(android.content.Context,java.lang.String)> -> _SOURCE_
<android.media.MediaMetadata: java.util.Set keySet()> -> _SOURCE_
<android.app.job.JobParameters: int getStopReason()> -> _SOURCE_
<android.telecom.Connection: android.net.Uri getAddress()> -> _SOURCE_
<android.service.autofill.FillEventHistory: android.os.Bundle getClientState()> -> _SOURCE_
<android.telephony.SmsCbLocation: int getLac()> -> _SOURCE_
<android.mtp.MtpEvent: int getDevicePropCode()> -> _SOURCE_
<java.lang.Long: java.lang.String toString()> -> _SOURCE_
<java.time.Clock: java.time.Clock systemDefaultZone()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean setPreferredNetworkTypeToGlobal()> -> _SOURCE_
<android.telephony.CellIdentityCdma: int getLongitude()> -> _SOURCE_
<android.bluetooth.BluetoothHeadsetClient: java.util.List getConnectedDevices()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.lang.String getSystemTextClassifierPackageName()> -> _SOURCE_
<android.os.Debug: int getGlobalFreedCount()> -> _SOURCE_
<android.net.SntpClient: long getNtpTime()> -> _SOURCE_
<android.telephony.ServiceState: int getCdmaDefaultRoamingIndicator()> -> _SOURCE_
<com.android.internal.util.SyncResultReceiver: int getOptionalExtraIntResult(int)> -> _SOURCE_
<java.security.KeyPair: java.security.PublicKey getPublic()> -> _SOURCE_
<android.telecom.PhoneAccount: int getCapabilities()> -> _SOURCE_
<android.telecom.Conference: java.util.List getConnections()> -> _SOURCE_
<android.text.style.AccessibilityURLSpan: int getSpanTypeIdInternal()> -> _SOURCE_
<android.telephony.data.ApnSetting: java.lang.String getApnTypeString(int)> -> _SOURCE_
<android.net.ConnectivityManager: android.net.Network registerNetworkAgent(android.os.Messenger,android.net.NetworkInfo,android.net.LinkProperties,android.net.NetworkCapabilities,int,android.net.NetworkAgentConfig,int)> -> _SOURCE_
<android.telecom.RemoteConnection: void unregisterCallback(android.telecom.RemoteConnection$Callback)> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isDataConnectivityPossible()> -> _SOURCE_
<android.content.ContentValues: boolean isEmpty()> -> _SOURCE_
<java.util.concurrent.CountDownLatch: java.lang.String toString()> -> _SOURCE_
<android.app.WallpaperManager: android.os.ParcelFileDescriptor getWallpaperFile(int,int)> -> _SOURCE_
<android.hardware.soundtrigger.SoundTrigger$ModuleProperties: int getVersion()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.util.List retrieveSecurityLogs(android.content.ComponentName)> -> _SOURCE_
<android.app.ExpandableListActivity: android.widget.ExpandableListView getExpandableListView()> -> _SOURCE_
<android.bluetooth.le.ScanSettings: long getReportDelayMillis()> -> _SOURCE_
<android.hardware.radio.RadioManager$ProgramInfo: boolean isStereo()> -> _SOURCE_
<android.telephony.ims.ImsCallSession: com.android.ims.internal.IImsVideoCallProvider getVideoCallProvider()> -> _SOURCE_
<java.lang.reflect.Parameter: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()> -> _SOURCE_
<java.security.cert.X509CertSelector: java.lang.String getSubjectPublicKeyAlgID()> -> _SOURCE_
<android.telephony.SmsCbEtwsInfo: byte[] getPrimaryNotificationSignature()> -> _SOURCE_
<android.os.PowerManager: void invalidatePowerSaveModeCaches()> -> _SOURCE_
<android.app.ApplicationPackageManager: int getPermissionFlags(java.lang.String,java.lang.String,android.os.UserHandle)> -> _SOURCE_
<android.app.ActivityOptions: boolean getLockTaskMode()> -> _SOURCE_
<android.os.health.HealthStats: int getMeasurementKeyAt(int)> -> _SOURCE_
<android.view.inputmethod.InlineSuggestionsRequest: android.os.IBinder getHostInputToken()> -> _SOURCE_
<android.content.pm.ShortcutInfo: int getDisabledMessageResourceId()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getSimOperator(int)> -> _SOURCE_
<android.telecom.Logging.SessionManager: void startSession(java.lang.String,java.lang.String)> -> _SOURCE_
<android.bluetooth.BluetoothHidDevice: java.lang.String getUserAppName()> -> _SOURCE_
<android.media.midi.MidiDeviceInfo: android.media.midi.MidiDeviceInfo$PortInfo[] getPorts()> -> _SOURCE_
<android.app.ApplicationExitInfo: int getRealUid()> -> _SOURCE_
<com.android.internal.location.gnssmetrics.GnssMetrics: void logCn0(float[],int,float[])> -> _SOURCE_
<java.net.NetworkInterface: java.util.Enumeration getInetAddresses()> -> _SOURCE_
<android.telephony.ims.ImsCallProfile: int getCallerNumberVerificationStatus()> -> _SOURCE_
<android.util.EventLog$Event: android.util.EventLog$Event fromBytes(byte[])> -> _SOURCE_
<android.net.wifi.nl80211.PnoSettings: int getMin6gRssiDbm()> -> _SOURCE_
<android.media.MediaCodecInfo$VideoCapabilities: android.util.Range getBlockCountRange()> -> _SOURCE_
<android.provider.ContactsContract$Contacts: android.net.Uri createCorpLookupUriFromEnterpriseLookupUri(android.net.Uri)> -> _SOURCE_
<android.os.Temperature: int getType()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long computeBatteryScreenOffRealtime(long,int)> -> _SOURCE_
<android.content.pm.PackageInstaller$SessionInfo: boolean isMultiPackage()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: int getPasswordMinimumLength(android.content.ComponentName,int)> -> _SOURCE_
<android.view.MotionEvent: float getTouchMajor(int)> -> _SOURCE_
<android.telephony.CellSignalStrengthNr: int getSsSinr()> -> _SOURCE_
<android.app.slice.SliceProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],android.os.Bundle,android.os.CancellationSignal)> -> _SOURCE_
<android.net.CaptivePortalData$Builder: android.net.CaptivePortalData build()> -> _SOURCE_
<java.io.File: long getTotalSpace()> -> _SOURCE_
<android.app.DownloadManager$Request: android.app.DownloadManager$Request setDescription(java.lang.CharSequence)> -> _SOURCE_
<android.app.JobSchedulerImpl: java.util.List getAllJobSnapshots()> -> _SOURCE_
<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder permitCredentialProtectedWhileLocked()> -> _SOURCE_
<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],android.os.Bundle,android.os.CancellationSignal)> -> _SOURCE_
<android.app.WallpaperInfo: android.net.Uri getSettingsSliceUri()> -> _SOURCE_
<android.widget.TextView: int getAutoLinkMask()> -> _SOURCE_
<android.net.IpPrefix: boolean contains(java.net.InetAddress)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getNetworkOperator()> -> _SOURCE_
<android.permission.RuntimePermissionPresentationInfo: boolean isStandard()> -> _SOURCE_
<android.telephony.TelephonyManager: java.util.List getCarrierPrivilegedPackagesForAllActiveSubscriptions()> -> _SOURCE_
<android.content.pm.PackageManager: android.content.pm.ModuleInfo getModuleInfo(java.lang.String,int)> -> _SOURCE_
<android.os.connectivity.CellularBatteryStats: long getLoggingDurationMillis()> -> _SOURCE_
<java.net.URI: java.lang.String getRawQuery()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: com.android.internal.os.BatteryStatsImpl$Uid getAvailableUidStatsLocked(int)> -> _SOURCE_
<android.app.BroadcastOptions: boolean isDontSendToRestrictedApps()> -> _SOURCE_
<android.nfc.cardemulation.CardEmulation: boolean supportsAidPrefixRegistration()> -> _SOURCE_
<android.net.ConnectivityManager: boolean isAlwaysOnVpnPackageSupportedForUser(int,java.lang.String)> -> _SOURCE_
<android.os.storage.StorageManager: int getProxyFileDescriptorMountPointId()> -> _SOURCE_
<android.os.Parcel: java.util.ArrayList readCharSequenceList()> -> _SOURCE_
<android.content.ContextWrapper: android.content.AutofillOptions getAutofillOptions()> -> _SOURCE_
<android.nfc.cardemulation.CardEmulation: java.lang.CharSequence getDescriptionForPreferredPaymentService()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: android.content.ComponentName getProfileOwner()> -> _SOURCE_
<android.media.MediaPlayer$TrackInfo: void writeToParcel(android.os.Parcel,int)> -> _SOURCE_
<com.android.internal.view.FloatingActionMode: java.lang.CharSequence getTitle()> -> _SOURCE_
<android.mtp.MtpDeviceInfo: java.lang.String getSerialNumber()> -> _SOURCE_
<android.telephony.euicc.EuiccNotification: java.lang.String toString()> -> _SOURCE_
<android.hardware.location.ContextHubInfo: int[] getSupportedSensors()> -> _SOURCE_
<android.timezone.TelephonyNetwork: java.lang.String getMcc()> -> _SOURCE_
<android.content.pm.LauncherApps: java.util.List getShortcuts(android.content.pm.LauncherApps$ShortcutQuery,android.os.UserHandle)> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isDataConnectionAllowed()> -> _SOURCE_
<android.view.MotionEvent: java.lang.String buttonStateToString(int)> -> _SOURCE_
<java.util.LongSummaryStatistics: long getCount()> -> _SOURCE_
<android.telephony.ServiceState: boolean getVoiceRoaming()> -> _SOURCE_
<java.net.HttpCookie: java.lang.String getDomain()> -> _SOURCE_
<android.telephony.cdma.CdmaSmsCbProgramResults: int getCategory()> -> _SOURCE_
<java.security.Provider: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)> -> _SOURCE_
<android.view.textclassifier.SelectionEvent: java.lang.String getWidgetVersion()> -> _SOURCE_
<com.android.internal.telephony.cdma.SmsMessage: boolean isMwiDontStore()> -> _SOURCE_
<android.media.audiopolicy.AudioProductStrategy: int getLegacyStreamTypeForStrategyWithAudioAttributes(android.media.AudioAttributes)> -> _SOURCE_
<javax.net.ssl.SNIServerName: byte[] getEncoded()> -> _SOURCE_
<android.provider.Settings$Secure: void clearProviderForTest()> -> _SOURCE_
<java.text.DateFormat: java.util.Locale[] getAvailableLocales()> -> _SOURCE_
<java.net.Inet6Address: boolean isIPv4CompatibleAddress()> -> _SOURCE_
<android.telecom.ConnectionService: android.os.Handler getHandler()> -> _SOURCE_
<android.os.HwParcel: java.util.ArrayList readBoolVector()> -> _SOURCE_
<android.telecom.ConnectionRequest: android.net.Uri getAddress()> -> _SOURCE_
<android.telephony.ims.ImsMmTelManager$RegistrationCallback: void onUnregistered(android.telephony.ims.ImsReasonInfo)> -> _SOURCE_
<android.app.backup.BackupTransport: android.app.backup.RestoreDescription nextRestorePackage()> -> _SOURCE_
<android.app.SearchDialog: void launchQuerySearch()> -> _SOURCE_
<com.android.internal.os.BatterySipper: java.lang.String[] getPackages()> -> _SOURCE_
<java.util.Base64: java.util.Base64$Decoder getUrlDecoder()> -> _SOURCE_
<android.telephony.ims.compat.stub.ImsUtListenerImplBase: void utConfigurationQueried(com.android.ims.internal.IImsUt,int,android.os.Bundle)> -> _SOURCE_
<java.util.Date: java.lang.String toLocaleString()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String[] getForbiddenPlmns(int,int)> -> _SOURCE_
<android.app.WallpaperManager: java.io.InputStream openDefaultWallpaper(android.content.Context,int)> -> _SOURCE_
<android.telephony.TelephonyManager: void setBasebandVersion(java.lang.String)> -> _SOURCE_
<android.telephony.data.DataProfile: int getProfileId()> -> _SOURCE_
<android.app.usage.UsageStats: long getLastTimeForegroundServiceUsed()> -> _SOURCE_
<android.content.res.Resources: java.lang.String[] getStringArray(int)> -> _SOURCE_
<android.os.IncidentManager$PendingReport: java.lang.String toString()> -> _SOURCE_
<android.hardware.location.GeofenceHardwareRequest: double getLatitude()> -> _SOURCE_
<android.view.inputmethod.InputMethodManager: boolean isAcceptingText()> -> _SOURCE_
<android.drm.ProcessedData: java.lang.String getSubscriptionId()> -> _SOURCE_
<android.telephony.CellIdentityTdscdma: int getUarfcn()> -> _SOURCE_
<android.hardware.camera2.CameraDevice: boolean isSessionConfigurationSupported(android.hardware.camera2.params.SessionConfiguration)> -> _SOURCE_
<android.telecom.PhoneAccount: boolean hasAudioRoutes(int)> -> _SOURCE_
<android.media.MediaCodec: android.media.MediaCodecInfo getCodecInfo()> -> _SOURCE_
<android.net.Network: long getNetworkHandle()> -> _SOURCE_
<android.app.timezonedetector.TelephonyTimeZoneSuggestion: int getQuality()> -> _SOURCE_
<android.view.TextureView: int getLayerType()> -> _SOURCE_
<android.location.LocationRequest: boolean isLocationSettingsIgnored()> -> _SOURCE_
<android.security.KeyStore: int addAuthToken(byte[])> -> _SOURCE_
<android.view.inputmethod.CorrectionInfo: java.lang.String toString()> -> _SOURCE_
<java.net.URLConnection: java.lang.String guessContentTypeFromStream(java.io.InputStream)> -> _SOURCE_
<android.hardware.display.DisplayManager: java.util.List getBrightnessEvents()> -> _SOURCE_
<android.hardware.hdmi.HdmiControlServiceWrapper: void removeHdmiControlStatusChangeListener(android.hardware.hdmi.IHdmiControlStatusChangeListener)> -> _SOURCE_
<android.bluetooth.BluetoothDevice: android.os.ParcelUuid[] getUuids()> -> _SOURCE_
<android.net.NetworkScorerAppData: java.lang.String toString()> -> _SOURCE_
<java.time.OffsetDateTime: java.time.OffsetDateTime now()> -> _SOURCE_
<android.webkit.WebStorage: android.webkit.WebStorage getInstance()> -> _SOURCE_
<android.content.pm.InstallSourceInfo: android.content.pm.SigningInfo getInitiatingPackageSigningInfo()> -> _SOURCE_
<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getOutputSizes(int)> -> _SOURCE_
<android.telephony.ims.feature.MmTelFeature$Listener: void onVoiceMessageCountUpdate(int)> -> _SOURCE_
<android.speech.RecognitionService: android.os.IBinder onBind(android.content.Intent)> -> _SOURCE_
<android.security.KeyStore: boolean lock(int)> -> _SOURCE_
<java.io.BufferedReader: java.lang.String readLine()> -> _SOURCE_
<android.net.WifiLinkQualityInfo: long getTxGood()> -> _SOURCE_
<android.os.storage.CrateInfo: java.lang.CharSequence getLabel()> -> _SOURCE_
<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)> -> _SOURCE_
<android.telecom.TelecomManager: android.telecom.PhoneAccountHandle getSimCallManager(int)> -> _SOURCE_
<android.view.ScaleGestureDetector: float getCurrentSpanY()> -> _SOURCE_
<android.content.ContentResolver: int getIsSyncable(android.accounts.Account,java.lang.String)> -> _SOURCE_
<android.text.util.Rfc822Tokenizer: int findTokenStart(java.lang.CharSequence,int)> -> _SOURCE_
<org.apache.http.conn.ssl.SSLSocketFactory: java.net.Socket connectSocket(java.net.Socket,java.lang.String,int,java.net.InetAddress,int,org.apache.http.params.HttpParams)> -> _SOURCE_
<java.util.zip.Inflater: int getAdler()> -> _SOURCE_
<android.view.inputmethod.InputConnectionWrapper: boolean performPrivateCommand(java.lang.String,android.os.Bundle)> -> _SOURCE_
<android.location.GnssStatus: boolean hasAlmanacData(int)> -> _SOURCE_
<android.net.LinkAddress: long getExpirationTime()> -> _SOURCE_
<android.content.res.AssetManager: java.lang.String[] getApkPaths()> -> _SOURCE_
<android.view.textclassifier.TextClassificationContext: android.view.textclassifier.SystemTextClassifierMetadata getSystemTextClassifierMetadata()> -> _SOURCE_
<java.net.HttpURLConnection: java.lang.String getResponseMessage()> -> _SOURCE_
<android.media.audiofx.AudioEffect: int command(int,byte[],byte[])> -> _SOURCE_
<com.android.internal.telephony.uicc.IccUtils: java.lang.String bcdPlmnToString(byte[],int)> -> _SOURCE_
<android.widget.ListView: boolean getItemsCanFocus()> -> _SOURCE_
<android.hardware.soundtrigger.SoundTrigger$RecognitionEvent: boolean isCaptureAvailable()> -> _SOURCE_
<android.app.StatusBarManager$DisableInfo: boolean isRecentsDisabled()> -> _SOURCE_
<android.location.GpsMeasurement: double getPseudorangeInMeters()> -> _SOURCE_
<com.android.internal.util.LocationPermissionChecker: int checkLocationPermissionWithDetailInfo(java.lang.String,java.lang.String,int,java.lang.String)> -> _SOURCE_
<android.app.ActivityManagerNative: void noteWakeupAlarm(android.app.PendingIntent,int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.telephony.ims.stub.ImsSmsImplBase: void onReady()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean canChangeDtmfToneLength()> -> _SOURCE_
<android.provider.SearchIndexableData: java.lang.String toString()> -> _SOURCE_
<android.drm.DrmManagerClient: int checkRightsStatus(java.lang.String)> -> _SOURCE_
<android.graphics.RectF: java.lang.String toShortString(java.lang.StringBuilder)> -> _SOURCE_
<android.nfc.tech.NfcBarcode: byte[] getBarcode()> -> _SOURCE_
<com.android.internal.telephony.uicc.IccUtils: byte[] encodeFplmns(java.util.List,int)> -> _SOURCE_
<android.security.keystore.KeyInfo: java.lang.String[] getEncryptionPaddings()> -> _SOURCE_
<android.view.textclassifier.TextLinks$Request$Builder: android.view.textclassifier.TextLinks$Request build()> -> _SOURCE_
<android.graphics.RenderNode: boolean isAttached()> -> _SOURCE_
<android.net.UidRange: int count()> -> _SOURCE_
<android.net.NetworkScoreManager: java.util.List getAllValidScorers()> -> _SOURCE_
<android.telephony.mbms.DownloadRequest: java.lang.String getFileServiceId()> -> _SOURCE_
<com.android.internal.util.CollectionUtils: int size(java.util.Map)> -> _SOURCE_
<android.hardware.display.DisplayManagerGlobal: void invalidateLocalDisplayInfoCaches()> -> _SOURCE_
<android.nfc.NfcAdapter: android.nfc.INfcDta getNfcDtaInterface()> -> _SOURCE_
<android.telecom.ConnectionService: android.os.IBinder onBind(android.content.Intent)> -> _SOURCE_
<android.telecom.PhoneAccountHandle: android.os.UserHandle getUserHandle()> -> _SOURCE_
<java.time.Month: int get(java.time.temporal.TemporalField)> -> _SOURCE_
<android.webkit.WebStorage: void deleteAllData()> -> _SOURCE_
<android.companion.BluetoothLeDeviceFilter: int getMediumType()> -> _SOURCE_
<android.hardware.location.NanoApp: int[] getOutputEvents()> -> _SOURCE_
<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: long[] readFreqs(com.android.internal.os.PowerProfile)> -> _SOURCE_
<android.media.AudioAttributes: int getSystemUsage()> -> _SOURCE_
<android.bluetooth.le.ScanResult: int getPrimaryPhy()> -> _SOURCE_
<android.widget.CalendarView: void setShowWeekNumber(boolean)> -> _SOURCE_
<android.app.AppOpsManager: void reloadNonHistoricalState()> -> _SOURCE_
<android.bluetooth.BluetoothMapClient: boolean isUploadingSupported(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<android.media.ImageReader: android.media.Image acquireNextImage()> -> _SOURCE_
<android.app.Notification$DecoratedMediaCustomViewStyle: android.widget.RemoteViews makeBigContentView()> -> _SOURCE_
<java.time.LocalTime: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)> -> _SOURCE_
<android.appwidget.AppWidgetHostView: android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet)> -> _SOURCE_
<android.hardware.camera2.legacy.CameraDeviceState: void setRequestQueueEmpty()> -> _SOURCE_
<android.telephony.SubscriptionManager: boolean canDisablePhysicalSubscription()> -> _SOURCE_
<android.location.Location: boolean hasAltitude()> -> _SOURCE_
<android.telephony.ServiceState: void addNetworkRegistrationInfo(android.telephony.NetworkRegistrationInfo)> -> _SOURCE_
<android.ddm.DdmHandleExit: void register()> -> _SOURCE_
<android.widget.TimePicker: int getHour()> -> _SOURCE_
<java.time.OffsetTime: java.time.LocalTime toLocalTime()> -> _SOURCE_
<android.companion.WifiDeviceFilter: int getMediumType()> -> _SOURCE_
<android.net.LinkProperties: boolean addPcscfServer(java.net.InetAddress)> -> _SOURCE_
<android.net.TrafficStats: int getThreadStatsUid()> -> _SOURCE_
<java.net.URLConnection: long getDate()> -> _SOURCE_
<android.media.AudioManager: android.media.AudioDeviceAttributes getPreferredDeviceForStrategy(android.media.audiopolicy.AudioProductStrategy)> -> _SOURCE_
<java.net.URLClassLoader: java.util.Enumeration findResources(java.lang.String)> -> _SOURCE_
<android.hardware.camera2.impl.CameraCaptureSessionImpl: void abortCaptures()> -> _SOURCE_
<android.os.Binder: android.os.TransactionTracker getTransactionTracker()> -> _SOURCE_
<android.location.GnssMeasurement: double getCarrierPhaseUncertainty()> -> _SOURCE_
<android.preference.PreferenceFrameLayout: android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet)> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: boolean isPassword()> -> _SOURCE_
<android.telecom.ParcelableCall: android.telecom.VideoCallImpl getVideoCallImpl(java.lang.String,int)> -> _SOURCE_
<android.app.job.JobParameters: android.net.Uri[] getTriggeredContentUris()> -> _SOURCE_
<android.content.pm.ProviderInfoList: java.util.List getList()> -> _SOURCE_
<java.util.Calendar: java.util.Set getAvailableCalendarTypes()> -> _SOURCE_
<android.hardware.Sensor: float getResolution()> -> _SOURCE_
<android.app.admin.DeviceAdminInfo: boolean supportsTransferOwnership()> -> _SOURCE_
<android.hardware.display.DisplayManagerGlobal: android.hardware.display.BrightnessConfiguration getBrightnessConfigurationForUser(int)> -> _SOURCE_
<android.telephony.SmsCbMessage: boolean isEmergencyMessage()> -> _SOURCE_
<android.os.storage.StorageManager: android.util.Pair getPrimaryStoragePathAndSize()> -> _SOURCE_
<android.app.ActivityOptions: int getCustomInPlaceResId()> -> _SOURCE_
<android.security.keystore.KeyInfo: boolean isUserConfirmationRequired()> -> _SOURCE_
<android.os.storage.StorageManager: android.os.ParcelFileDescriptor openProxyFileDescriptor(int,android.os.ProxyFileDescriptorCallback,android.os.Handler)> -> _SOURCE_
<android.bluetooth.BluetoothGattDescriptor: int getPermissions()> -> _SOURCE_
<android.location.Geofence: double getLongitude()> -> _SOURCE_
<android.hardware.hdmi.HdmiDeviceInfo: int idForMhlDevice(int)> -> _SOURCE_
<android.media.AudioManager: boolean isHdmiSystemAudioSupported()> -> _SOURCE_
<android.telephony.CarrierRestrictionRules: java.util.List getExcludedCarriers()> -> _SOURCE_
<android.widget.SearchView: boolean isIconified()> -> _SOURCE_
<android.os.incremental.IncrementalStorage: byte[] getFileMetadata(java.lang.String)> -> _SOURCE_
<android.telephony.SmsMessage: byte[] getUserData()> -> _SOURCE_
<android.net.NetworkScoreManager: boolean requestScores(java.util.Collection)> -> _SOURCE_
<android.bluetooth.le.ScanSettings: boolean getLegacy()> -> _SOURCE_
<android.widget.TextView: java.lang.CharSequence getTransformed()> -> _SOURCE_
<android.telephony.CellIdentityCdma: int getBasestationId()> -> _SOURCE_
<android.telephony.ims.ImsCallSession: java.lang.String toString()> -> _SOURCE_
<java.nio.channels.AsynchronousServerSocketChannel: java.nio.channels.spi.AsynchronousChannelProvider provider()> -> _SOURCE_
<android.app.NotificationChannel: java.lang.String getConversationId()> -> _SOURCE_
<android.view.DisplayCutout$ParcelableWrapper: java.lang.String toString()> -> _SOURCE_
<java.nio.channels.FileLock: java.nio.channels.FileChannel channel()> -> _SOURCE_
<android.widget.ActionMenuView: boolean isOverflowMenuShowPending()> -> _SOURCE_
<android.hardware.display.WifiDisplay: boolean isRemembered()> -> _SOURCE_
<android.location.GnssClock: double getElapsedRealtimeUncertaintyNanos()> -> _SOURCE_
<android.content.res.Configuration: boolean isScreenRound()> -> _SOURCE_
<java.security.cert.PKIXParameters: boolean isExplicitPolicyRequired()> -> _SOURCE_
<android.app.admin.DeviceAdminInfo: java.lang.String getTagForPolicy(int)> -> _SOURCE_
<android.telephony.CellIdentityNr: int getPci()> -> _SOURCE_
<android.app.SearchManager: android.content.ComponentName getWebSearchActivity()> -> _SOURCE_
<android.media.session.MediaController: java.lang.String getTag()> -> _SOURCE_
<android.app.DownloadManager: int markRowDeleted(long[])> -> _SOURCE_
<java.nio.charset.CharsetEncoder: java.nio.charset.CodingErrorAction unmappableCharacterAction()> -> _SOURCE_
<java.security.cert.X509CRLSelector: java.util.Collection getIssuerNames()> -> _SOURCE_
<android.os.Message: android.os.Handler getTarget()> -> _SOURCE_
<android.telecom.TelecomManager: boolean isInCall()> -> _SOURCE_
<java.security.cert.X509CertSelector: java.lang.Object clone()> -> _SOURCE_
<android.media.tv.DvbDeviceInfo: int getAdapterId()> -> _SOURCE_
<android.os.Debug: int getThreadGcInvocationCount()> -> _SOURCE_
<android.media.audiopolicy.AudioProductStrategy: java.lang.String toString()> -> _SOURCE_
<android.media.tv.tuner.filter.TlvFilterConfiguration$Builder: android.media.tv.tuner.filter.TlvFilterConfiguration build()> -> _SOURCE_
<android.view.WindowInsets$Builder: android.view.WindowInsets build()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory)> -> _SOURCE_
<android.telecom.Call$Details: int getHandlePresentation()> -> _SOURCE_
<android.telephony.SubscriptionInfo: java.lang.String getCardString()> -> _SOURCE_
<android.location.GpsClock: boolean hasTimeUncertaintyInNs()> -> _SOURCE_
<com.android.ims.ImsConfig: int getConfigInt(int)> -> _SOURCE_
<android.os.Environment: java.io.File getDataPreloadsAppsDirectory()> -> _SOURCE_
<java.time.chrono.HijrahEra: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)> -> _SOURCE_
<android.media.tv.TvContract: android.net.Uri buildProgramsUriForChannel(android.net.Uri,long,long)> -> _SOURCE_
<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.HdmiClient getClient(int)> -> _SOURCE_
<android.net.VpnService$Builder: android.os.ParcelFileDescriptor establish()> -> _SOURCE_
<android.os.RecoverySystem: void installPackage(android.content.Context,java.io.File)> -> _SOURCE_
<android.telephony.TelephonyManager: int getSimCount()> -> _SOURCE_
<android.telephony.mbms.GroupCallCallback: void onError(int,java.lang.String)> -> _SOURCE_
<android.graphics.RectF: void printShortString(java.io.PrintWriter)> -> _SOURCE_
<android.net.Uri$Builder: android.net.Uri$Builder query(java.lang.String)> -> _SOURCE_
<android.bluetooth.BluetoothHealth: java.util.List getConnectedDevices()> -> _SOURCE_
<com.android.internal.widget.RecyclerView: boolean isAnimating()> -> _SOURCE_
<android.bluetooth.BluetoothHeadsetClient: android.bluetooth.BluetoothHeadsetClientCall dial(android.bluetooth.BluetoothDevice,java.lang.String)> -> _SOURCE_
<android.telephony.CarrierConfigManager: void notifyConfigChangedForSubId(int)> -> _SOURCE_
<android.os.Debug: void resetGlobalExternalFreedCount()> -> _SOURCE_
<android.content.pm.LauncherApps$Callback: void onShortcutsChanged(java.lang.String,java.util.List,android.os.UserHandle)> -> _SOURCE_
<android.app.usage.UsageEvents$Event: int getStandbyReason()> -> _SOURCE_
<android.hardware.biometrics.BiometricPrompt$AuthenticationCallback: void onAuthenticationSucceeded(android.hardware.biometrics.BiometricPrompt$AuthenticationResult)> -> _SOURCE_
<android.telephony.CarrierConfigManager: android.os.PersistableBundle getConfig()> -> _SOURCE_
<android.media.session.MediaController: void registerCallback(android.media.session.MediaController$Callback)> -> _SOURCE_
<android.telephony.PhoneNumberUtils: boolean isPotentialEmergencyNumber(int,java.lang.String)> -> _SOURCE_
<android.media.MediaFormat: boolean containsKey(java.lang.String)> -> _SOURCE_
<android.bluetooth.le.ScanRecord: byte[] getServiceData(android.os.ParcelUuid)> -> _SOURCE_
<android.hardware.biometrics.BiometricAuthenticator$AuthenticationResult: int getAuthenticationType()> -> _SOURCE_
<android.net.LinkProperties: boolean hasIpv4DnsServer()> -> _SOURCE_
<android.telephony.SubscriptionManager: int setDisplayName(java.lang.String,int,int)> -> _SOURCE_
<android.media.MediaRouter2$RoutingController: java.lang.String toString()> -> _SOURCE_
<android.hardware.hdmi.HdmiTvClient: java.util.List getDeviceList()> -> _SOURCE_
<com.android.internal.widget.LockscreenCredential: int getStorageCryptType()> -> _SOURCE_
<android.net.util.nsd.DnsSdTxtRecord: java.lang.String toString()> -> _SOURCE_
<android.app.FragmentController: android.app.FragmentManagerNonConfig retainNestedNonConfig()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long getPhoneSignalScanningTime(long,int)> -> _SOURCE_
<android.view.Window$Callback: void onProvideKeyboardShortcuts(java.util.List,android.view.Menu,int)> -> _SOURCE_
<android.net.Uri: android.net.Uri getCanonicalUri()> -> _SOURCE_
<java.time.chrono.MinguoDate: java.time.chrono.MinguoEra getEra()> -> _SOURCE_
<android.service.autofill.SaveInfo: android.service.autofill.InternalValidator getValidator()> -> _SOURCE_
<android.os.health.HealthStats: int getTimerKeyCount()> -> _SOURCE_
<android.location.GnssMeasurement: double getFullInterSignalBiasNanos()> -> _SOURCE_
<com.android.internal.app.AssistUtils: void getActiveServiceSupportedActions(java.util.Set,com.android.internal.app.IVoiceActionCheckCallback)> -> _SOURCE_
<android.telecom.PhoneAccount: java.util.List getSupportedUriSchemes()> -> _SOURCE_
<com.android.internal.telephony.uicc.IccUtils: java.lang.String bchToString(byte[],int,int)> -> _SOURCE_
<android.mtp.MtpObjectInfo: long getDateCreated()> -> _SOURCE_
<android.view.accessibility.AccessibilityRequestPreparer: android.view.View getView()> -> _SOURCE_
<android.view.ViewGroup: boolean resolveRtlPropertiesIfNeeded()> -> _SOURCE_
<android.net.wifi.nl80211.WifiNl80211Manager: int[] getChannelsMhzForBand(int)> -> _SOURCE_
<android.telephony.TelephonyManager: boolean getSmsReceiveCapable(boolean)> -> _SOURCE_
<android.media.Rating: float getStarRating()> -> _SOURCE_
<android.media.midi.MidiDeviceInfo: boolean isPrivate()> -> _SOURCE_
<android.content.Context: java.io.File getSharedPrefsFile(java.lang.String)> -> _SOURCE_
<android.os.Debug: boolean dumpService(java.lang.String,java.io.FileDescriptor,java.lang.String[])> -> _SOURCE_
<android.os.Parcel: java.util.Map copyClassCookies()> -> _SOURCE_
<javax.net.ssl.SSLParameters: java.lang.String getEndpointIdentificationAlgorithm()> -> _SOURCE_
<android.security.Credentials: byte[] convertToPem(java.security.cert.Certificate[])> -> _SOURCE_
<android.location.Country: java.lang.String getCountryIso()> -> _SOURCE_
<android.telephony.ims.ImsCallSession: android.telephony.ims.ImsCallProfile getRemoteCallProfile()> -> _SOURCE_
<android.mtp.MtpStorageManager: void dump()> -> _SOURCE_
<android.app.admin.DelegatedAdminReceiver: java.lang.String onChoosePrivateKeyAlias(android.content.Context,android.content.Intent,int,android.net.Uri,java.lang.String)> -> _SOURCE_
<android.media.MediaRouter$RouteInfo: android.media.MediaRouter$RouteCategory getCategory()> -> _SOURCE_
<android.os.UserManager: boolean isUserUnlocked(android.os.UserHandle)> -> _SOURCE_
<android.media.tv.tuner.frontend.Atsc3PlpSettings$Builder: android.media.tv.tuner.frontend.Atsc3PlpSettings build()> -> _SOURCE_
<android.telephony.SmsManager: int getSmsCapacityOnIcc()> -> _SOURCE_
<com.android.internal.inputmethod.CancellationGroup: boolean isCanceled()> -> _SOURCE_
<android.nfc.NfcActivityManager: void onActivityResumed(android.app.Activity)> -> _SOURCE_
<android.app.ApplicationPackageManager: int getPackageUid(java.lang.String,int)> -> _SOURCE_
<android.service.notification.ZenPolicy: int getPriorityCategoryRepeatCallers()> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec: java.util.Date getKeyValidityForConsumptionEnd()> -> _SOURCE_
<java.security.Security: java.security.Provider[] getProviders(java.util.Map)> -> _SOURCE_
<com.android.internal.os.WakelockPowerCalculator: void calculateRemaining(com.android.internal.os.BatterySipper,android.os.BatteryStats,long,long,int)> -> _SOURCE_
<android.app.backup.BackupDataInputStream: int size()> -> _SOURCE_
<java.security.cert.X509CertSelector: java.security.PublicKey getSubjectPublicKey()> -> _SOURCE_
<android.bluetooth.BluetoothA2dp: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
<android.app.backup.BackupDataInput: java.lang.String getKey()> -> _SOURCE_
<com.android.internal.widget.LockPatternUtils: boolean hasPendingEscrowToken(int)> -> _SOURCE_
<android.content.pm.dex.ArtManager: java.io.File getProfileSnapshotFileForName(java.lang.String,java.lang.String)> -> _SOURCE_
<java.util.IntSummaryStatistics: long getCount()> -> _SOURCE_
<android.os.PowerManager: boolean isLightDeviceIdleMode()> -> _SOURCE_
<android.view.textclassifier.SelectionEvent: android.view.textclassifier.SystemTextClassifierMetadata getSystemTextClassifierMetadata()> -> _SOURCE_
<javax.crypto.spec.OAEPParameterSpec: javax.crypto.spec.PSource getPSource()> -> _SOURCE_
<android.app.RuntimeAppOpAccessMessage: java.lang.String getPackageName()> -> _SOURCE_
<android.bluetooth.BluetoothDevice: int getBatteryLevel()> -> _SOURCE_
<android.content.ContextWrapper: java.io.File[] getObbDirs()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: java.lang.String toString()> -> _SOURCE_
<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)> -> _SOURCE_
<android.telephony.mbms.DownloadRequest: int getMaxDestinationUriSize()> -> _SOURCE_
<android.app.job.JobInfo: boolean hasLateConstraint()> -> _SOURCE_
<java.nio.file.InvalidPathException: java.lang.String getInput()> -> _SOURCE_
<android.net.NetworkInfo: java.lang.String getReason()> -> _SOURCE_
<android.content.ContextWrapper: android.content.ContentResolver getContentResolver()> -> _SOURCE_
<javax.crypto.spec.SecretKeySpec: java.lang.String getAlgorithm()> -> _SOURCE_
<java.net.URI: java.lang.String toASCIIString()> -> _SOURCE_
<java.lang.Package: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()> -> _SOURCE_
<android.telephony.emergency.EmergencyNumber: java.lang.String getNumber()> -> _SOURCE_
<android.service.autofill.augmented.FillRequest: int getTaskId()> -> _SOURCE_
<android.hardware.radio.RadioManager: int listModules(java.util.List)> -> _SOURCE_
<com.android.internal.os.BinderCallsStats: android.util.ArrayMap getExportedExceptionStats()> -> _SOURCE_
<android.webkit.JsPromptResult: java.lang.String getStringResult()> -> _SOURCE_
<java.security.KeyStore$SecretKeyEntry: java.util.Set getAttributes()> -> _SOURCE_
<java.security.cert.X509CertSelector: java.util.Date getCertificateValid()> -> _SOURCE_
<android.net.Network: java.net.InetAddress[] getAllByName(java.lang.String)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long getWifiOnTime(long,int)> -> _SOURCE_
<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentActivityCreated(android.app.FragmentManager,android.app.Fragment,android.os.Bundle)> -> _SOURCE_
<android.nfc.cardemulation.AidGroup: java.lang.String toString()> -> _SOURCE_
<android.os.UserManager: android.content.pm.UserInfo getPrimaryUser()> -> _SOURCE_
<com.android.internal.telephony.GsmAlphabet: java.lang.String gsm7BitPackedToString(byte[],int,int,int,int,int)> -> _SOURCE_
<android.text.style.BackgroundColorSpan: int getSpanTypeIdInternal()> -> _SOURCE_
<com.android.internal.widget.RecyclerView$LayoutManager: int getBaseline()> -> _SOURCE_
<com.android.internal.telephony.CarrierAppUtils: java.util.List getDefaultCarrierApps(android.telephony.TelephonyManager,int,android.content.Context)> -> _SOURCE_
<android.widget.TextView: int getInputType()> -> _SOURCE_
<android.telephony.TelephonyManager: int getDataNetworkType()> -> _SOURCE_
<android.security.keystore.KeyProtection: boolean isCriticalToDeviceEncryption()> -> _SOURCE_
<android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint: boolean covers(android.media.MediaFormat)> -> _SOURCE_
<android.text.FontConfig$Font: android.net.Uri getUri()> -> _SOURCE_
<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String,java.security.Provider)> -> _SOURCE_
<android.view.textclassifier.SystemTextClassifierMetadata: java.lang.String getCallingPackageName()> -> _SOURCE_
<android.bluetooth.BluetoothHeadset: void clccResponse(int,int,int,int,boolean,java.lang.String,int)> -> _SOURCE_
<android.content.pm.CrossProfileApps: boolean canInteractAcrossProfiles()> -> _SOURCE_
<java.net.URLConnection: java.lang.String guessContentTypeFromName(java.lang.String)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: android.util.ArrayMap getWakelockStats()> -> _SOURCE_
<android.hardware.radio.RadioManager$ProgramInfo: boolean isLive()> -> _SOURCE_
<android.view.autofill.AutofillValue: boolean isText()> -> _SOURCE_
<android.media.tv.TvInputService: void onHdmiDeviceUpdated(android.hardware.hdmi.HdmiDeviceInfo)> -> _SOURCE_
<android.telephony.CellIdentityTdscdma: android.telephony.gsm.GsmCellLocation asCellLocation()> -> _SOURCE_
<com.android.internal.util.CallbackRegistry: boolean isEmpty()> -> _SOURCE_
<java.time.OffsetDateTime: java.lang.String toString()> -> _SOURCE_
<android.content.res.AssetManager: java.util.Map getOverlayableMap(java.lang.String)> -> _SOURCE_
<java.util.concurrent.ForkJoinTask: int getSurplusQueuedTaskCount()> -> _SOURCE_
<android.widget.SimpleAdapter: java.lang.Object getItem(int)> -> _SOURCE_
<android.content.ContextWrapper: java.io.File getExternalCacheDir()> -> _SOURCE_
<android.telephony.TelephonyManager: int getSimApplicationState()> -> _SOURCE_
<com.android.internal.widget.RecyclerView$State: boolean hasTargetScrollPosition()> -> _SOURCE_
<android.telephony.CellIdentityNr: android.telephony.CellIdentityNr sanitizeLocationInfo()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getOtaSpNumberSchemaForPhone(int,java.lang.String)> -> _SOURCE_
<android.os.StatFs: long getFreeBytes()> -> _SOURCE_
<android.location.Address: double getLatitude()> -> _SOURCE_
<android.content.pm.PackageInstaller$Session: int[] getChildSessionIds()> -> _SOURCE_
<android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithContentUri(android.net.Uri)> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: java.lang.String getName()> -> _SOURCE_
<android.security.ConfirmationPrompt: boolean isSupported(android.content.Context)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long getMobileRadioActiveAdjustedTime(int)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean installKeyPair(android.content.ComponentName,java.security.PrivateKey,java.security.cert.Certificate[],java.lang.String,boolean)> -> _SOURCE_
<android.os.connectivity.WifiBatteryStats: long getEnergyConsumedMaMillis()> -> _SOURCE_
<android.location.GpsMeasurement: boolean hasBitNumber()> -> _SOURCE_
<android.accounts.AccountManager: android.accounts.Account[] getAccountsByTypeAsUser(java.lang.String,android.os.UserHandle)> -> _SOURCE_
<android.telephony.TelephonyManager: boolean handlePinMmiForSubscriber(int,java.lang.String)> -> _SOURCE_
<android.window.DisplayAreaInfo: java.lang.String toString()> -> _SOURCE_
<android.service.autofill.BatchUpdates: android.widget.RemoteViews getUpdates()> -> _SOURCE_
<android.accessibilityservice.AccessibilityService$MagnificationController: float getCenterY()> -> _SOURCE_
<android.hardware.radio.RadioManager$ModuleProperties: int getClassId()> -> _SOURCE_
<android.service.controls.actions.ControlAction: android.service.controls.actions.ControlAction getErrorAction()> -> _SOURCE_
<java.security.Provider$Service: java.lang.String getClassName()> -> _SOURCE_
<android.app.contentsuggestions.SelectionsRequest: int getTaskId()> -> _SOURCE_
<android.os.UserManager: boolean isHeadlessSystemUserMode()> -> _SOURCE_
<java.util.IdentityHashMap: int size()> -> _SOURCE_
<java.util.TreeSet: java.util.NavigableSet descendingSet()> -> _SOURCE_
<android.service.trust.TrustAgentService: void isEscrowTokenActive(long,android.os.UserHandle)> -> _SOURCE_
<android.telecom.PhoneAccountSuggestionService: android.os.IBinder onBind(android.content.Intent)> -> _SOURCE_
<android.content.IntentFilter: boolean hasMimeGroup(java.lang.String)> -> _SOURCE_
<javax.net.ssl.SSLEngine: int getPeerPort()> -> _SOURCE_
<android.hardware.location.NanoApp: int getNeededWriteMemBytes()> -> _SOURCE_
<android.telephony.PackageChangeReceiver: void onHandleForceStop(java.lang.String[],boolean)> -> _SOURCE_
<android.telephony.CellSignalStrengthCdma: void setEvdoEcio(int)> -> _SOURCE_
<android.bluetooth.BluetoothSocket: boolean isConnected()> -> _SOURCE_
<android.telephony.ims.stub.ImsRegistrationImplBase: int getConnectionType()> -> _SOURCE_
<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewFpsRange()> -> _SOURCE_
<android.app.RemoteInput: int getResultsSource(android.content.Intent)> -> _SOURCE_
<android.telephony.ims.compat.stub.ImsConfigImplBase$ImsConfigStub: int getProvisionedValue(int)> -> _SOURCE_
<android.telecom.ParcelableCall: java.util.List getChildCallIds()> -> _SOURCE_
<android.content.ComponentName: java.lang.String flattenToString()> -> _SOURCE_
<android.app.NotificationChannelGroup: java.lang.String getId()> -> _SOURCE_
<android.app.Dialog: android.view.Window getWindow()> -> _SOURCE_
<android.net.CaptivePortalData: long getRefreshTimeMillis()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: void updateRailStatsLocked()> -> _SOURCE_
<com.android.internal.app.procstats.SparseMappingTable$Table: int getKey(byte)> -> _SOURCE_
<android.telephony.ims.ImsService: android.telephony.ims.stub.ImsRegistrationImplBase getRegistration(int)> -> _SOURCE_
<android.hardware.location.GeofenceHardwareMonitorEvent: int getMonitoringStatus()> -> _SOURCE_
<android.text.format.Time: java.lang.String format(java.lang.String)> -> _SOURCE_
<android.view.MotionEvent: long getHistoricalEventTimeNano(int)> -> _SOURCE_
<android.os.UserManager: boolean hasRestrictedProfiles()> -> _SOURCE_
<android.location.GnssSingleSatCorrection: int getConstellationType()> -> _SOURCE_
<android.content.pm.PackageInstaller$SessionInfo: java.lang.String getAppPackageName()> -> _SOURCE_
<android.telephony.cdma.CdmaCellLocation: int getBaseStationId()> -> _SOURCE_
<android.media.soundtrigger.SoundTriggerDetectionService: void operationFinished(java.util.UUID,int)> -> _SOURCE_
<android.os.HwParcel: java.util.ArrayList readNativeHandleVector()> -> _SOURCE_
<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()> -> _SOURCE_
<com.android.internal.os.MemoryPowerCalculator: void calculateRemaining(com.android.internal.os.BatterySipper,android.os.BatteryStats,long,long,int)> -> _SOURCE_
<javax.crypto.KeyGenerator: java.security.Provider getProvider()> -> _SOURCE_
<android.net.ScoredNetwork: java.lang.String toString()> -> _SOURCE_
<android.content.integrity.AppInstallMetadata$Builder: android.content.integrity.AppInstallMetadata$Builder setInstallerName(java.lang.String)> -> _SOURCE_
<android.app.ActivityOptions: int getCustomEnterResId()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getCdmaMdn(int)> -> _SOURCE_
<android.view.Choreographer: android.view.Choreographer getMainThreadInstance()> -> _SOURCE_
<android.app.assist.AssistStructure$ViewNode: android.os.LocaleList getLocaleList()> -> _SOURCE_
<java.time.Period: java.lang.String toString()> -> _SOURCE_
<android.telephony.SmsCbCmasInfo: int getCertainty()> -> _SOURCE_
<android.telephony.CellIdentityWcdma: int getMcc()> -> _SOURCE_
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()> -> _SOURCE_
<java.util.logging.Formatter: java.lang.String getHead(java.util.logging.Handler)> -> _SOURCE_
<android.telephony.PreciseCallState: int getDisconnectCause()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.lang.String getProfileOwnerName()> -> _SOURCE_
<android.telephony.SmsManager: android.telephony.SmsManager getSmsManagerForSubscriptionId(int)> -> _SOURCE_
<android.media.audiofx.PresetReverb$Settings: java.lang.String toString()> -> _SOURCE_
<android.app.ActivityManager$TaskDescription: int getMinWidth()> -> _SOURCE_
<android.net.ProxyInfo: java.lang.String getHost()> -> _SOURCE_
<android.view.textclassifier.TextClassificationSessionId: java.lang.String getValue()> -> _SOURCE_
<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder permitUntaggedSockets()> -> _SOURCE_
<java.time.OffsetDateTime: java.time.LocalDateTime toLocalDateTime()> -> _SOURCE_
<android.app.Activity: android.app.ActionBar getActionBar()> -> _SOURCE_
<java.security.cert.PKIXCertPathBuilderResult: java.lang.String toString()> -> _SOURCE_
<android.bluetooth.BluetoothHeadsetClient: boolean sendVendorAtCommand(android.bluetooth.BluetoothDevice,int,java.lang.String)> -> _SOURCE_
<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getApplicationLogo(android.content.pm.ApplicationInfo)> -> _SOURCE_
<android.telephony.PhoneNumberUtils: boolean isEmergencyNumber(int,java.lang.String)> -> _SOURCE_
<android.app.Vr2dDisplayProperties: java.lang.String toString()> -> _SOURCE_
<java.net.HttpURLConnection: boolean getInstanceFollowRedirects()> -> _SOURCE_
<java.io.BufferedReader: int read()> -> _SOURCE_
<android.hardware.display.DisplayManagerGlobal: android.view.Display getRealDisplay(int)> -> _SOURCE_
<android.nfc.dta.NfcDta: boolean enableDta()> -> _SOURCE_
<javax.crypto.Cipher: java.security.Provider getProvider()> -> _SOURCE_
<java.net.HttpCookie: boolean getSecure()> -> _SOURCE_
<android.content.pm.ApplicationInfo: boolean isProfileableByShell()> -> _SOURCE_
<android.app.Activity: boolean isInPictureInPictureMode()> -> _SOURCE_
<android.se.omapi.Channel: boolean isBasicChannel()> -> _SOURCE_
<android.view.MotionEvent: long getHistoricalEventTime(int)> -> _SOURCE_
<com.android.internal.logging.testing.UiEventLoggerFake: java.util.List getLogs()> -> _SOURCE_
<com.android.internal.widget.LockPatternUtils: boolean isTrustUsuallyManaged(int)> -> _SOURCE_
<android.bluetooth.BluetoothMapClient: boolean isConnected(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<android.security.keystore.recovery.RecoveryController: java.security.Key generateKey(java.lang.String,byte[])> -> _SOURCE_
<android.service.autofill.FillResponse: android.view.autofill.AutofillId[] getAuthenticationIds()> -> _SOURCE_
<android.media.tv.TvInputManager$TvInputCallback: void onInputStateChanged(java.lang.String,int)> -> _SOURCE_
<android.os.PowerManager: boolean isPowerSaveMode()> -> _SOURCE_
<android.telephony.ims.stub.ImsCallSessionImplBase: void deflect(java.lang.String)> -> _SOURCE_
<android.telephony.SmsMessage: boolean isStatusReportMessage()> -> _SOURCE_
<android.security.KeyPairGeneratorSpec: int getKeySize()> -> _SOURCE_
<org.xml.sax.SAXException: java.lang.Exception getException()> -> _SOURCE_
<com.android.internal.widget.FloatingToolbar: boolean isHidden()> -> _SOURCE_
<android.telephony.CellSignalStrengthGsm: android.telephony.CellSignalStrengthGsm copy()> -> _SOURCE_
<android.app.NotificationChannel: long[] getVibrationPattern()> -> _SOURCE_
<android.app.ActivityThread$ActivityClientRecord: int getLifecycleState()> -> _SOURCE_
<android.service.quicksettings.Tile: java.lang.CharSequence getContentDescription()> -> _SOURCE_
<java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale,java.util.ResourceBundle$Control)> -> _SOURCE_
<com.android.internal.telephony.TelephonyPermissions: boolean checkCallingOrSelfReadPhoneNumber(android.content.Context,int,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.media.AudioDeviceInfo: android.media.AudioDevicePort getPort()> -> _SOURCE_
<android.location.GnssStatus: android.location.GnssStatus wrap(int,int[],float[],float[],float[],float[],float[])> -> _SOURCE_
<android.app.blob.BlobHandle: void dump(com.android.internal.util.IndentingPrintWriter,boolean)> -> _SOURCE_
<android.view.Display: android.view.Display$HdrCapabilities getHdrCapabilities()> -> _SOURCE_
<java.text.MessageFormat: java.lang.String toPattern()> -> _SOURCE_
<com.android.internal.os.BatteryStatsHistory: void writeToParcel(android.os.Parcel)> -> _SOURCE_
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothClass getBluetoothClass()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: int getMobileRadioActiveCount(int)> -> _SOURCE_
<android.service.autofill.FillResponse: boolean supportsInlineSuggestions()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isNotificationListenerServicePermitted(java.lang.String,int)> -> _SOURCE_
<android.animation.PropertyValuesHolder: java.lang.String toString()> -> _SOURCE_
<android.print.PrintJobInfo: int getAdvancedIntOption(java.lang.String)> -> _SOURCE_
<android.telephony.BarringInfo$BarringServiceInfo: int getConditionalBarringFactor()> -> _SOURCE_
<java.time.chrono.JapaneseDate: java.time.chrono.JapaneseDate now()> -> _SOURCE_
<android.location.GnssRequest: java.lang.String toString()> -> _SOURCE_
<android.timezone.TzDataSetVersion: java.lang.String getRulesVersion()> -> _SOURCE_
<android.telecom.CallerInfo: long getContactId()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.util.List getDeclaredSharedLibraries(java.lang.String,int)> -> _SOURCE_
<java.time.OffsetDateTime: int getYear()> -> _SOURCE_
<android.telephony.ServiceState: int getCdmaRoamingIndicator()> -> _SOURCE_
<android.os.WorkSource: boolean isChainedBatteryAttributionEnabled(android.content.Context)> -> _SOURCE_
<com.android.internal.util.DumpUtils: boolean isPlatformPackage(android.content.ComponentName)> -> _SOURCE_
<com.android.internal.policy.PhoneWindow: android.os.Bundle saveHierarchyState()> -> _SOURCE_
<java.security.cert.X509CertSelector: javax.security.auth.x500.X500Principal getIssuer()> -> _SOURCE_
<android.os.VibrationEffect$OneShot: java.lang.String toString()> -> _SOURCE_
<android.service.autofill.InlineSuggestionRenderService: android.os.Bundle onGetInlineSuggestionsRendererInfo()> -> _SOURCE_
<android.app.SystemServiceRegistry: java.lang.String getSystemServiceName(java.lang.Class)> -> _SOURCE_
<android.app.AppOpsManager: int getNumOps()> -> _SOURCE_
<android.app.ApplicationExitInfo: int getPid()> -> _SOURCE_
<android.view.View: android.view.ScrollCaptureCallback createScrollCaptureCallbackInternal(android.graphics.Rect,android.graphics.Point)> -> _SOURCE_
<android.telephony.SubscriptionInfo: java.lang.String givePrintableIccid(java.lang.String)> -> _SOURCE_
<android.hardware.usb.UsbManager: java.util.HashMap getDeviceList()> -> _SOURCE_
<android.media.AudioManager: int listAudioDevicePorts(java.util.ArrayList)> -> _SOURCE_
<android.net.IpPrefix: java.net.InetAddress getAddress()> -> _SOURCE_
<android.drm.DrmManagerClient: int getDrmObjectType(android.net.Uri,java.lang.String)> -> _SOURCE_
<android.view.accessibility.AccessibilityEvent: java.lang.String eventTypeToString(int)> -> _SOURCE_
<android.app.AppOpsManager: java.lang.String opToPublicName(int)> -> _SOURCE_
<android.view.inputmethod.InputMethodSubtype: int getSubtypeId()> -> _SOURCE_
<java.security.Signature: java.lang.String toString()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Timer: long getTotalTimeLocked(long,int)> -> _SOURCE_
<com.android.internal.app.ToolbarActionBar: java.lang.CharSequence getTitle()> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing$Stage: java.lang.String toString()> -> _SOURCE_
<android.service.autofill.SaveInfo: android.view.autofill.AutofillId[] getRequiredIds()> -> _SOURCE_
<android.net.NetworkIdentity: java.lang.String scrubSubscriberId(java.lang.String)> -> _SOURCE_
<android.telephony.SmsMessage: boolean isMwiDontStore()> -> _SOURCE_
<android.app.backup.BackupTransport: int abortFullRestore()> -> _SOURCE_
<android.hardware.soundtrigger.SoundTrigger$ModuleProperties: java.lang.String getDescription()> -> _SOURCE_
<java.io.FileOutputStream: java.io.FileDescriptor getFD()> -> _SOURCE_
<android.app.ActivityManager$TaskSnapshot: android.graphics.Rect getContentInsets()> -> _SOURCE_
<android.content.res.AssetManager: android.content.res.XmlResourceParser openXmlResourceParser(int,java.lang.String)> -> _SOURCE_
<android.location.GpsMeasurement: short getTimeFromLastBitInMs()> -> _SOURCE_
<android.telephony.PreciseDataConnectionState: android.net.LinkProperties getDataConnectionLinkProperties()> -> _SOURCE_
<android.telephony.SignalStrength: int getEvdoLevel()> -> _SOURCE_
<android.app.ProfilerInfo: android.app.ProfilerInfo setAgent(java.lang.String,boolean)> -> _SOURCE_
<android.debug.PairDevice: java.lang.String toString()> -> _SOURCE_
<java.lang.Class: java.lang.String getCanonicalName()> -> _SOURCE_
<android.content.pm.AppsQueryHelper: java.util.List queryApps(int,boolean,android.os.UserHandle)> -> _SOURCE_
<android.media.MediaDrm$Certificate: byte[] getContent()> -> _SOURCE_
<android.hardware.Sensor: java.lang.String getName()> -> _SOURCE_
<android.telephony.ims.compat.stub.ImsCallSessionImplBase: android.telephony.ims.ImsCallProfile getRemoteCallProfile()> -> _SOURCE_
<android.media.tv.tuner.frontend.FrontendStatus: int getSignalStrength()> -> _SOURCE_
<android.telephony.TelephonyRegistryManager: void notifyCellInfoChanged(int,java.util.List)> -> _SOURCE_
<com.android.internal.os.ProcessCpuTracker: int getLastUserTime()> -> _SOURCE_
<com.android.internal.app.LocalePicker$LocaleInfo: java.lang.String toString()> -> _SOURCE_
<android.text.Layout$Directions: int getRunCount()> -> _SOURCE_
<android.app.job.JobInfo$Builder: java.lang.String summarize()> -> _SOURCE_
<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder detectAll()> -> _SOURCE_
<android.os.UserManager$CheckedUserOperationException: android.os.ServiceSpecificException toServiceSpecificException()> -> _SOURCE_
<android.hardware.camera2.CaptureResult: android.hardware.camera2.impl.CameraMetadataNative getNativeCopy()> -> _SOURCE_
<android.view.textclassifier.TextClassification: java.lang.String getEntity(int)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long getScreenDozeTime(long,int)> -> _SOURCE_
<com.android.ims.internal.uce.options.OptionsSipResponse: com.android.ims.internal.uce.options.OptionsCmdId getCmdId()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: void wipeDetected(java.lang.String,java.lang.String)> -> _SOURCE_
<android.location.GpsClock: boolean hasDriftInNsPerSec()> -> _SOURCE_
<android.service.notification.StatusBarNotification: java.lang.String getGroupKey()> -> _SOURCE_
<android.widget.TableLayout: android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet)> -> _SOURCE_
<android.media.AudioManager: boolean isBluetoothScoOn()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: void updateRpmStatsLocked()> -> _SOURCE_
<com.android.internal.infra.WhitelistHelper: java.lang.String toString()> -> _SOURCE_
<java.util.concurrent.CompletableFuture: java.lang.String toString()> -> _SOURCE_
<android.bluetooth.le.ScanResult: android.bluetooth.BluetoothDevice getDevice()> -> _SOURCE_
<android.app.Notification$WearableExtender: java.util.List getActions()> -> _SOURCE_
<android.media.MediaRouter: android.media.MediaRouter$RouteInfo getSelectedRoute(int)> -> _SOURCE_
<java.util.UUID: int version()> -> _SOURCE_
<android.view.InputWindowHandle: java.lang.String toString()> -> _SOURCE_
<android.os.HardwarePropertiesManager: float[] getFanSpeeds()> -> _SOURCE_
<android.app.NotificationChannel: boolean isDeleted()> -> _SOURCE_
<android.media.AudioDeviceInfo: java.lang.CharSequence getProductName()> -> _SOURCE_
<java.util.concurrent.locks.AbstractQueuedSynchronizer: int getWaitQueueLength(java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)> -> _SOURCE_
<android.media.tv.tuner.frontend.FrontendStatus: int getPlpId()> -> _SOURCE_
<android.hardware.Camera: android.hardware.Camera open()> -> _SOURCE_
<java.util.concurrent.locks.ReentrantReadWriteLock: int getQueueLength()> -> _SOURCE_
<android.media.MediaRoute2ProviderInfo$Builder: android.media.MediaRoute2ProviderInfo$Builder addRoutes(java.util.Collection)> -> _SOURCE_
<android.animation.KeyframeSet: java.lang.String toString()> -> _SOURCE_
<android.net.TrafficStats: long getLoopbackRxPackets()> -> _SOURCE_
<android.content.pm.ApplicationInfo: boolean isRequiredForSystemUser()> -> _SOURCE_
<com.android.server.net.NetlinkTracker: android.net.LinkProperties getLinkProperties()> -> _SOURCE_
<android.media.MediaRecorder: android.os.PersistableBundle getMetrics()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: android.content.ComponentName getDeviceOwnerComponentOnCallingUser()> -> _SOURCE_
<com.android.internal.telephony.util.TelephonyUtils: java.lang.String emptyIfNull(java.lang.String)> -> _SOURCE_
<android.app.Activity: android.view.MenuInflater getMenuInflater()> -> _SOURCE_
<android.view.inputmethod.InputMethodManager: boolean isInputMethodPickerShown()> -> _SOURCE_
<android.inputmethodservice.InputMethodService: android.view.inputmethod.InlineSuggestionsRequest onCreateInlineSuggestionsRequest(android.os.Bundle)> -> _SOURCE_
<android.telephony.SubscriptionManager: boolean canManageSubscription(android.telephony.SubscriptionInfo)> -> _SOURCE_
<android.accessibilityservice.AccessibilityServiceInfo: java.lang.String flagToString(int)> -> _SOURCE_
<android.location.Criteria: int getHorizontalAccuracy()> -> _SOURCE_
<javax.crypto.Cipher: java.security.AlgorithmParameters getParameters()> -> _SOURCE_
<java.lang.String: java.lang.String valueOf(java.lang.Object)> -> _SOURCE_
<android.media.tv.tuner.filter.TsFilterConfiguration: int getTpid()> -> _SOURCE_
<android.net.ConnectivityManager: android.net.Network getBoundNetworkForProcess()> -> _SOURCE_
<android.net.LinkProperties: java.util.List getRoutes()> -> _SOURCE_
<android.app.ActivityTaskManager: int getMaxAppRecentsLimitStatic()> -> _SOURCE_
<android.media.MediaCas: boolean isSystemIdSupported(int)> -> _SOURCE_
<android.view.ViewConfiguration: boolean hasPermanentMenuKey()> -> _SOURCE_
<android.view.accessibility.AccessibilityCache: android.util.SparseArray getWindowsOnAllDisplays()> -> _SOURCE_
<android.app.admin.DevicePolicyEventLogger: java.lang.String getAdminPackageName()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isDataEnabledForApn(int)> -> _SOURCE_
<android.content.ContentResolver: int getUserId()> -> _SOURCE_
<java.time.OffsetDateTime: java.time.OffsetDateTime now(java.time.Clock)> -> _SOURCE_
<java.lang.reflect.Array: double getDouble(java.lang.Object,int)> -> _SOURCE_
<android.app.prediction.AppTarget: java.lang.String getPackageName()> -> _SOURCE_
<android.metrics.LogMaker: android.metrics.LogMaker setProcessId(int)> -> _SOURCE_
<com.android.ims.ImsConfig: int setProvisionedStringValue(int,java.lang.String)> -> _SOURCE_
<android.service.dreams.DreamService: boolean onMenuOpened(int,android.view.Menu)> -> _SOURCE_
<android.hardware.radio.RadioManager$ModuleProperties: int getId()> -> _SOURCE_
<android.app.NotificationManager: java.util.List getNotificationChannels()> -> _SOURCE_
<android.appwidget.AppWidgetManager: boolean hasBindAppWidgetPermission(java.lang.String,int)> -> _SOURCE_
<android.app.admin.DeviceAdminInfo: java.lang.CharSequence loadDescription(android.content.pm.PackageManager)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: long getSystemTime(int)> -> _SOURCE_
<java.lang.String: boolean startsWith(java.lang.String,int)> -> _SOURCE_
<android.telephony.CellSignalStrengthCdma: int getCdmaLevel()> -> _SOURCE_
<android.hardware.soundtrigger.SoundTrigger$SoundModel: byte[] getData()> -> _SOURCE_
<android.widget.GridLayout: android.util.Printer getPrinter()> -> _SOURCE_
<android.service.quickaccesswallet.WalletCard: android.graphics.drawable.Icon getCardIcon()> -> _SOURCE_
<android.text.method.TimeKeyListener: android.text.method.TimeKeyListener getInstance()> -> _SOURCE_
<android.preference.ListPreference: java.lang.CharSequence[] getEntries()> -> _SOURCE_
<android.database.DatabaseUtils: long longForQuery(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String[])> -> _SOURCE_
<android.os.PowerWhitelistManager: void addToWhitelist(java.util.List)> -> _SOURCE_
<android.telephony.SmsManager: int checkSmsShortCodeDestination(java.lang.String,java.lang.String)> -> _SOURCE_
<android.provider.Telephony$RcsColumns$RcsCanonicalAddressHelper: long getOrCreateCanonicalAddressId(android.content.ContentResolver,java.lang.String)> -> _SOURCE_
<android.hardware.soundtrigger.SoundTrigger$SoundModel: int getType()> -> _SOURCE_
<android.os.Environment: java.io.File getDataSystemDeDirectory()> -> _SOURCE_
<android.media.tv.tuner.TunerUtils: int getFilterSubtype(int,int)> -> _SOURCE_
<android.bluetooth.BluetoothGatt: android.bluetooth.BluetoothGattService getService(java.util.UUID)> -> _SOURCE_
<android.net.MacAddress: java.lang.String toOuiString()> -> _SOURCE_
<java.time.MonthDay: java.time.MonthDay now()> -> _SOURCE_
<android.content.IntentFilter: boolean hasDataScheme(java.lang.String)> -> _SOURCE_
<android.content.pm.ShortcutManager: boolean hasShareTargets(java.lang.String)> -> _SOURCE_
<android.view.KeyEvent: int getDeviceId()> -> _SOURCE_
<android.bluetooth.BluetoothHeadset: android.bluetooth.BluetoothDevice getActiveDevice()> -> _SOURCE_
<android.telecom.InCallService: java.util.List getCalls()> -> _SOURCE_
<android.app.Notification: java.lang.String priorityToString(int)> -> _SOURCE_
<android.util.TimeUtils: java.lang.String logTimeOfDay(long)> -> _SOURCE_
<android.os.storage.StorageVolume: void dump(com.android.internal.util.IndentingPrintWriter)> -> _SOURCE_
<android.text.TextUtils: java.lang.String withoutPrefix(java.lang.String,java.lang.String)> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: java.lang.String getFileTimestamps(java.lang.String)> -> _SOURCE_
<android.location.LocationManager: void removeTestProvider(java.lang.String)> -> _SOURCE_
<android.view.VerifiedMotionEvent: int getFlags()> -> _SOURCE_
<android.app.ApplicationExitInfo: byte[] getProcessStateSummary()> -> _SOURCE_
<android.os.TelephonyServiceManager: android.os.TelephonyServiceManager$ServiceRegisterer getEuiccCardControllerServiceRegisterer()> -> _SOURCE_
<android.os.SystemProperties: int getInt(java.lang.String,int)> -> _SOURCE_
<android.telecom.AuthenticatorService$Authenticator: android.os.Bundle hasFeatures(android.accounts.AccountAuthenticatorResponse,android.accounts.Account,java.lang.String[])> -> _SOURCE_
<android.app.Notification$Builder: android.app.Notification$Builder setSubText(java.lang.CharSequence)> -> _SOURCE_
<java.security.KeyStore: java.security.cert.Certificate getCertificate(java.lang.String)> -> _SOURCE_
<android.media.tv.TvInputHardwareInfo: java.lang.String toString()> -> _SOURCE_
<android.media.tv.tuner.filter.DownloadSettings: int getDownloadId()> -> _SOURCE_
<android.os.BinderProxy: android.os.BinderProxy$InterfaceCount[] getSortedInterfaceCounts(int)> -> _SOURCE_
<android.service.carrier.CarrierMessagingService$SendMmsResult: byte[] getSendConfPdu()> -> _SOURCE_
<com.android.internal.view.InputBindResult: android.graphics.Matrix getActivityViewToScreenMatrix()> -> _SOURCE_
<android.service.autofill.FillResponse: android.widget.RemoteViews getPresentation()> -> _SOURCE_
<android.app.PictureInPictureParams: java.util.List getActions()> -> _SOURCE_
<android.net.UrlQuerySanitizer: android.net.UrlQuerySanitizer$ValueSanitizer getAllButNulLegal()> -> _SOURCE_
<android.service.notification.ZenPolicy: int getVisualEffectAmbient()> -> _SOURCE_
<android.inputmethodservice.InputMethodService$InputMethodImpl: void changeInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)> -> _SOURCE_
<com.android.internal.telephony.uicc.asn1.Asn1Node: boolean asBoolean()> -> _SOURCE_
<android.view.textclassifier.ConversationActions: java.util.List getConversationActions()> -> _SOURCE_
<android.media.AudioRoutesInfo: java.lang.String toString()> -> _SOURCE_
<android.drm.DrmInfo: java.util.Iterator iterator()> -> _SOURCE_
<com.android.internal.midi.MidiEventScheduler: android.media.midi.MidiReceiver getReceiver()> -> _SOURCE_
<android.app.admin.DeviceAdminReceiver: void onSystemUpdatePending(android.content.Context,android.content.Intent,long)> -> _SOURCE_
<android.media.AudioDeviceInfo: boolean isSource()> -> _SOURCE_
<java.lang.reflect.Array: int getInt(java.lang.Object,int)> -> _SOURCE_
<android.security.keystore.AndroidKeyStoreSpi: boolean engineIsKeyEntry(java.lang.String)> -> _SOURCE_
<android.location.LocationManager: void addProximityAlert(double,double,float,long,android.app.PendingIntent)> -> _SOURCE_
<android.media.audiopolicy.AudioMixingRule: boolean voiceCommunicationCaptureAllowed()> -> _SOURCE_
<android.preference.MultiCheckPreference: boolean getValue(int)> -> _SOURCE_
<android.net.wifi.nl80211.WifiNl80211Manager: android.net.wifi.nl80211.WifiNl80211Manager$OemSecurityType parseOemSecurityTypeElement(int,int,byte[])> -> _SOURCE_
<android.app.KeyguardManager: void requestDismissKeyguard(android.app.Activity,android.app.KeyguardManager$KeyguardDismissCallback)> -> _SOURCE_
<com.android.internal.view.menu.MenuItemImpl: java.lang.String toString()> -> _SOURCE_
<java.time.LocalDateTime: java.time.LocalDate toLocalDate()> -> _SOURCE_
<com.android.internal.accessibility.util.AccessibilityUtils: java.util.Set getEnabledServicesFromSettings(android.content.Context,int)> -> _SOURCE_
<java.util.concurrent.ForkJoinPool: boolean hasQueuedSubmissions()> -> _SOURCE_
<android.text.SpannableStringBuilder: java.lang.String substring(int,int)> -> _SOURCE_
<android.telephony.ims.feature.ImsFeature$Capabilities: java.lang.String toString()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getNetworkSpecifier()> -> _SOURCE_
<android.app.ActivityManager$TaskSnapshot: boolean isRealSnapshot()> -> _SOURCE_
<android.media.MediaFormat: java.nio.ByteBuffer getByteBuffer(java.lang.String)> -> _SOURCE_
<android.widget.TabHost: int getCurrentTab()> -> _SOURCE_
<com.android.internal.widget.LockscreenCredential: com.android.internal.widget.LockscreenCredential createPasswordOrNone(java.lang.CharSequence)> -> _SOURCE_
<android.os.Debug$MemoryInfo: int getSummaryStackRss()> -> _SOURCE_
<android.app.slice.SliceManager: int checkSlicePermission(android.net.Uri,int,int)> -> _SOURCE_
<android.content.pm.PackageManager: void corkPackageInfoCache()> -> _SOURCE_
<android.provider.FontsContract: android.content.pm.ProviderInfo getProvider(android.content.pm.PackageManager,android.provider.FontRequest)> -> _SOURCE_
<android.media.AudioDeviceInfo: int getId()> -> _SOURCE_
<android.telecom.TelecomManager: android.telecom.TelecomManager 'from'(android.content.Context)> -> _SOURCE_
<java.net.URI: boolean isAbsolute()> -> _SOURCE_
<android.os.PowerWhitelistManager: int[] getWhitelistedAppIds(boolean)> -> _SOURCE_
<java.net.URLConnection: java.lang.String getDefaultRequestProperty(java.lang.String)> -> _SOURCE_
<android.content.res.Configuration: android.os.LocaleList getLocales()> -> _SOURCE_
<android.net.NetworkInfo: int getSubtype()> -> _SOURCE_
<android.hardware.display.BrightnessConfiguration$Builder: int getMaxCorrectionsByPackageName()> -> _SOURCE_
<com.android.internal.inputmethod.InputMethodPrivilegedOperations: void updateStatusIcon(java.lang.String,int)> -> _SOURCE_
<android.bluetooth.BluetoothActivityEnergyInfo: long getControllerRxTimeMillis()> -> _SOURCE_
<android.app.ApplicationPackageManager: boolean setInstantAppCookie(byte[])> -> _SOURCE_
<android.location.GnssMeasurement: boolean hasFullInterSignalBiasNanos()> -> _SOURCE_
<android.preference.PreferenceScreen: android.widget.ListAdapter getRootAdapter()> -> _SOURCE_
<android.telephony.mbms.ServiceInfo: java.lang.String getServiceId()> -> _SOURCE_
<android.os.Looper: boolean isCurrentThread()> -> _SOURCE_
<com.android.internal.widget.LockPatternUtils: boolean isSeparateProfileChallengeAllowed(int)> -> _SOURCE_
<android.telephony.data.ApnSetting: android.net.Uri getMmsc()> -> _SOURCE_
<android.hardware.hdmi.HdmiRecordSources: android.hardware.hdmi.HdmiRecordSources$DigitalServiceSource ofAtsc(int,android.hardware.hdmi.HdmiRecordSources$AtscData)> -> _SOURCE_
<android.media.tv.TvInputService$RecordingSession: void notifyRecordingStopped(android.net.Uri)> -> _SOURCE_
<java.security.cert.PKIXBuilderParameters: int getMaxPathLength()> -> _SOURCE_
<android.app.WallpaperInfo: java.lang.String getServiceName()> -> _SOURCE_
<android.location.Location: float getBearingAccuracyDegrees()> -> _SOURCE_
<android.view.accessibility.AccessibilityWindowInfo: int getType()> -> _SOURCE_
<java.lang.Class: java.lang.reflect.Constructor getEnclosingConstructor()> -> _SOURCE_
<java.util.logging.Logger: boolean getUseParentHandlers()> -> _SOURCE_
<android.app.FragmentController: android.app.FragmentManager getFragmentManager()> -> _SOURCE_
<android.webkit.WebViewUpdateService: android.webkit.WebViewProviderInfo[] getValidWebViewPackages()> -> _SOURCE_
<android.net.ConnectivityManager: java.lang.String getCallbackName(int)> -> _SOURCE_
<java.lang.invoke.MethodType: int parameterCount()> -> _SOURCE_
<android.service.euicc.EuiccProfileInfo: int getState()> -> _SOURCE_
<android.privacy.internal.rappor.RapporConfig: java.lang.String toString()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isSeparateProfileChallengeAllowed(int)> -> _SOURCE_
<android.telephony.ims.stub.ImsCallSessionImplBase: android.telephony.ims.ImsCallProfile getRemoteCallProfile()> -> _SOURCE_
<android.app.ActivityManager$TaskSnapshot: android.graphics.Point getTaskSize()> -> _SOURCE_
<android.content.pm.ShortcutInfo: void setIconPendingSave()> -> _SOURCE_
<android.app.TaskStackBuilder: int getIntentCount()> -> _SOURCE_
<android.bluetooth.le.ScanResult: boolean isConnectable()> -> _SOURCE_
<com.android.internal.app.ResolverListAdapter: java.util.List getTopComponentNames(int)> -> _SOURCE_
<android.telephony.ims.stub.ImsRegistrationImplBase: android.telephony.ims.aidl.IImsRegistration getBinder()> -> _SOURCE_
<android.printservice.PrintService: java.util.List getActivePrintJobs()> -> _SOURCE_
<java.util.concurrent.ThreadPoolExecutor: long getCompletedTaskCount()> -> _SOURCE_
<android.content.res.TypedArray: int getChangingConfigurations()> -> _SOURCE_
<android.telephony.data.ApnSetting: int getProtocol()> -> _SOURCE_
<android.app.backup.BackupTransport: int performBackup(android.content.pm.PackageInfo,android.os.ParcelFileDescriptor)> -> _SOURCE_
<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewFrameRates()> -> _SOURCE_
<android.service.dreams.DreamService: android.view.View onCreatePanelView(int)> -> _SOURCE_
<android.printservice.recommendation.RecommendationInfo: boolean recommendsMultiVendorService()> -> _SOURCE_
<android.os.UserHandle: java.lang.String toString()> -> _SOURCE_
<android.media.AudioFocusRequest: android.media.AudioAttributes getAudioAttributes()> -> _SOURCE_
<android.telephony.NetworkRegistrationInfo: boolean isEmergencyEnabled()> -> _SOURCE_
<com.android.ims.internal.uce.presence.PresRlmiInfo: java.lang.String getUri()> -> _SOURCE_
<android.text.style.TtsSpan$Builder: android.text.style.TtsSpan build()> -> _SOURCE_
<java.lang.StringBuffer: java.lang.CharSequence subSequence(int,int)> -> _SOURCE_
<android.telephony.ims.compat.stub.ImsUtListenerImplBase: void lineIdentificationSupplementaryServiceResponse(int,android.telephony.ims.ImsSsInfo)> -> _SOURCE_
<android.telecom.ConnectionRequest: android.os.Bundle getExtras()> -> _SOURCE_
<android.os.Environment: boolean isStandardDirectory(java.lang.String)> -> _SOURCE_
<android.app.SearchableInfo$ActionKeyInfo: java.lang.String getSuggestActionMsgColumn()> -> _SOURCE_
<android.database.sqlite.SQLiteSession: boolean hasTransaction()> -> _SOURCE_
<android.media.AudioTrack$TunerConfiguration: int getContentId()> -> _SOURCE_
<android.media.audiofx.AudioEffect: boolean isEffectSupportedForDevice(java.util.UUID,android.media.AudioDeviceAttributes)> -> _SOURCE_
<android.content.ContextWrapper: int checkCallingOrSelfPermission(java.lang.String)> -> _SOURCE_
<android.hardware.location.ContextHubInfo: byte getChreApiMajorVersion()> -> _SOURCE_
<android.telephony.cdma.CdmaCellLocation: java.lang.String toString()> -> _SOURCE_
<java.util.concurrent.ForkJoinPool: long getStealCount()> -> _SOURCE_
<android.net.metrics.DhcpClientEvent: java.lang.String toString()> -> _SOURCE_
<android.service.notification.StatusBarNotification: long getPostTime()> -> _SOURCE_
<android.content.pm.CrossProfileApps: java.util.List getTargetUserProfiles()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabaseConfiguration: boolean isInMemoryDb()> -> _SOURCE_
<android.hardware.location.ContextHubMessage: int getMsgType()> -> _SOURCE_
<android.telephony.VoLteServiceState: java.lang.String toString()> -> _SOURCE_
<android.telephony.SubscriptionPlan: android.util.RecurrenceRule getCycleRule()> -> _SOURCE_
<android.media.tv.TvContract: android.net.Uri buildPreviewProgramUri(long)> -> _SOURCE_
<android.app.usage.NetworkStats$Bucket: long getStartTimeStamp()> -> _SOURCE_
<android.telephony.mbms.MbmsTempFileProvider: java.io.File getEmbmsTempFileDir(android.content.Context)> -> _SOURCE_
<android.security.FileIntegrityManager: boolean isAppSourceCertificateTrusted(java.security.cert.X509Certificate)> -> _SOURCE_
<android.app.slice.SliceProvider: java.lang.String getType(android.net.Uri)> -> _SOURCE_
<android.app.AppOpsManager$AttributedOpEntry: boolean isRunning()> -> _SOURCE_
<android.net.nsd.NsdServiceInfo: java.lang.String getServiceType()> -> _SOURCE_
<android.hardware.location.ActivityChangedEvent: java.lang.String toString()> -> _SOURCE_
<android.hardware.biometrics.BiometricPrompt$AuthenticationResult: int getAuthenticationType()> -> _SOURCE_
<android.bluetooth.BluetoothServerSocket: java.lang.String toString()> -> _SOURCE_
<android.service.voice.VoiceInteractionSession$AbortVoiceRequest: java.lang.CharSequence getMessage()> -> _SOURCE_
<android.preference.Preference: boolean isSelectable()> -> _SOURCE_
<java.net.InetAddress: boolean isMCGlobal()> -> _SOURCE_
<android.content.pm.PackageInstaller: java.util.List getActiveStagedSessions()> -> _SOURCE_
<android.text.PrecomputedText: android.text.PrecomputedText$ParagraphInfo[] getParagraphInfo()> -> _SOURCE_
<android.location.LocationRequest: android.location.LocationRequest setProvider(java.lang.String)> -> _SOURCE_
<android.content.IntentSender: java.lang.String getTargetPackage()> -> _SOURCE_
<android.graphics.fonts.Font: long getNativePtr()> -> _SOURCE_
<android.telephony.ims.ImsConferenceState: java.lang.String toString()> -> _SOURCE_
<java.security.spec.PSSParameterSpec: java.lang.String getMGFAlgorithm()> -> _SOURCE_
<android.media.tv.TvTrackInfo: boolean isEncrypted()> -> _SOURCE_
<java.time.OffsetDateTime: java.time.LocalTime toLocalTime()> -> _SOURCE_
<android.content.Context: android.graphics.drawable.Drawable getDrawable(int)> -> _SOURCE_
<android.service.notification.StatusBarNotification: int getInitialPid()> -> _SOURCE_
<android.net.ConnectivityManager: android.net.Network getActiveNetwork()> -> _SOURCE_
<android.app.NotificationHistory: java.util.List getNotificationsToWrite()> -> _SOURCE_
<javax.net.ServerSocketFactory: java.net.ServerSocket createServerSocket()> -> _SOURCE_
<android.media.VolumeShaper$Configuration: float[] getTimes()> -> _SOURCE_
<android.widget.Chronometer: android.widget.Chronometer$OnChronometerTickListener getOnChronometerTickListener()> -> _SOURCE_
<android.net.util.MacAddressUtils: boolean isMulticastAddress(android.net.MacAddress)> -> _SOURCE_
<android.app.AppOpsManager$OpEntry: long getLastAccessTime(int,int,int)> -> _SOURCE_
<android.app.ApplicationPackageManager: android.os.storage.VolumeInfo getPrimaryStorageCurrentVolume()> -> _SOURCE_
<android.app.assist.AssistStructure$ViewNode: java.lang.String[] getAutofillHints()> -> _SOURCE_
<android.timezone.TzDataSetVersion: int currentFormatMajorVersion()> -> _SOURCE_
<android.security.keystore.KeyInfo: boolean isTrustedUserPresenceRequired()> -> _SOURCE_
<android.view.ScrollCaptureClient: java.lang.String toString()> -> _SOURCE_
<java.text.DateFormatSymbols: java.text.DateFormatSymbols getInstance(java.util.Locale)> -> _SOURCE_
<java.util.Properties: java.util.Enumeration propertyNames()> -> _SOURCE_
<android.location.GpsMeasurement: double getAzimuthInDeg()> -> _SOURCE_
<android.hardware.location.ContextHubInfo: java.lang.String getVendor()> -> _SOURCE_
<java.lang.invoke.MethodHandles$Lookup: int lookupModes()> -> _SOURCE_
<android.provider.Settings$Global: void clearProviderForTest()> -> _SOURCE_
<android.telephony.SmsMessage: int getSubId()> -> _SOURCE_
<com.android.internal.telephony.gsm.SmsMessage: com.android.internal.telephony.gsm.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,java.lang.String,boolean,byte[],int,int,int)> -> _SOURCE_
<android.app.Activity: android.view.Window getWindow()> -> _SOURCE_
<android.view.contentcapture.ViewNode: android.view.autofill.AutofillValue getAutofillValue()> -> _SOURCE_
<android.telephony.TelephonyManager: android.telephony.ServiceState getServiceState()> -> _SOURCE_
<android.view.Display: int getPixelFormat()> -> _SOURCE_
<android.app.GrantedUriPermission: java.lang.String toString()> -> _SOURCE_
<android.widget.TextClock: boolean is24HourModeEnabled()> -> _SOURCE_
<android.os.FileUtils: boolean isValidFatFilename(java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.cdma.sms.CdmaSmsAddress: java.lang.String toString()> -> _SOURCE_
<android.hardware.location.ContextHubInfo: int getToolchainVersion()> -> _SOURCE_
<android.util.KeyValueListParser: java.lang.String keyAt(int)> -> _SOURCE_
<com.android.internal.policy.DecorView: java.lang.String toString()> -> _SOURCE_
<android.telephony.TelephonyManager: java.util.List getUiccCardsInfo()> -> _SOURCE_
<android.service.notification.ZenPolicy$Builder: android.service.notification.ZenPolicy$Builder showVisualEffect(int,boolean)> -> _SOURCE_
<android.view.DisplayAddress: android.view.DisplayAddress$Physical fromPhysicalDisplayId(long)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: int getLowDischargeAmountSinceCharge()> -> _SOURCE_
<android.app.admin.NetworkEvent: long getTimestamp()> -> _SOURCE_
<android.content.pm.InstantAppInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)> -> _SOURCE_
<android.telephony.PhoneNumberUtils: android.net.Uri convertSipUriToTelUri(android.net.Uri)> -> _SOURCE_
<android.hardware.radio.RadioManager$BandDescriptor: boolean isAmBand()> -> _SOURCE_
<android.app.backup.RestoreSession: int restorePackages(long,android.app.backup.RestoreObserver,java.util.Set)> -> _SOURCE_
<android.location.LocationManager: android.location.GpsStatus getGpsStatus(android.location.GpsStatus)> -> _SOURCE_
<com.android.internal.view.InputConnectionWrapper: java.lang.String toString()> -> _SOURCE_
<android.service.autofill.FillResponse: android.view.autofill.AutofillId[] getIgnoredIds()> -> _SOURCE_
<android.content.pm.LauncherActivityInfo: long getFirstInstallTime()> -> _SOURCE_
<android.content.pm.ShortcutInfo: android.content.Intent[] getIntentsNoExtras()> -> _SOURCE_
<android.os.StatFs: long getBlockSizeLong()> -> _SOURCE_
<java.lang.Package: boolean isSealed()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: com.android.internal.os.BatteryStatsImpl$SamplingTimer getScreenOffRpmTimerLocked(java.lang.String)> -> _SOURCE_
<java.lang.invoke.MethodHandles$Lookup: java.lang.invoke.MethodHandle findSetter(java.lang.Class,java.lang.String,java.lang.Class)> -> _SOURCE_
<android.net.NetworkUtils: int netmaskIntToPrefixLength(int)> -> _SOURCE_
<android.telephony.CellIdentityGsm: int getCid()> -> _SOURCE_
<android.app.admin.DeviceAdminInfo: java.lang.String getPackageName()> -> _SOURCE_
<android.telephony.TelephonyHistogram: java.lang.String toString()> -> _SOURCE_
<android.print.PrintAttributes$MediaSize: java.lang.String toString()> -> _SOURCE_
<com.android.internal.os.ProcessCpuTracker: int getLastSoftIrqTime()> -> _SOURCE_
<android.content.Intent: int describeContents()> -> _SOURCE_
<android.content.Context: android.content.Context createAttributionContext(java.lang.String)> -> _SOURCE_
<android.telephony.SubscriptionManager: java.util.List getAccessibleSubscriptionInfoList()> -> _SOURCE_
<android.telecom.TelecomManager: android.telecom.PhoneAccountHandle getDefaultOutgoingPhoneAccount(java.lang.String)> -> _SOURCE_
<android.bluetooth.BluetoothGattServerCallback: void onCharacteristicReadRequest(android.bluetooth.BluetoothDevice,int,int,android.bluetooth.BluetoothGattCharacteristic)> -> _SOURCE_
<android.os.RecoverySystem: boolean verifyPackageCompatibility(java.io.File)> -> _SOURCE_
<android.view.SurfaceControlViewHost: android.view.SurfaceControlViewHost$SurfacePackage getSurfacePackage()> -> _SOURCE_
<android.hardware.location.ContextHubManager: int[] getContextHubHandles()> -> _SOURCE_
<android.telephony.ims.ImsSsInfo: int getProvisionStatus()> -> _SOURCE_
<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy$Builder penaltyDropBox()> -> _SOURCE_
<android.media.tv.tuner.frontend.Atsc3PlpSettings: android.media.tv.tuner.frontend.Atsc3PlpSettings$Builder builder()> -> _SOURCE_
<android.webkit.MimeTypeMap: java.lang.String getExtensionFromMimeType(java.lang.String)> -> _SOURCE_
<android.print.PrintAttributes: android.print.PrintAttributes$Resolution getResolution()> -> _SOURCE_
<android.bluetooth.BluetoothMap: java.util.List getConnectedDevices()> -> _SOURCE_
<android.location.GpsClock: boolean hasLeapSecond()> -> _SOURCE_
<java.time.OffsetDateTime: int getHour()> -> _SOURCE_
<android.service.notification.StatusBarNotification: int getUid()> -> _SOURCE_
<android.service.notification.ZenPolicy: int getVisualEffectPeek()> -> _SOURCE_
<android.location.GpsMeasurement: double getCarrierPhase()> -> _SOURCE_
<android.content.pm.ShortcutInfo: java.lang.String toInsecureString()> -> _SOURCE_
<javax.net.ssl.HandshakeCompletedEvent: javax.net.ssl.SSLSocket getSocket()> -> _SOURCE_
<java.util.logging.Logger: java.util.logging.Logger getGlobal()> -> _SOURCE_
<android.view.contentcapture.ContentCaptureContext: android.view.contentcapture.ContentCaptureContext forLocusId(java.lang.String)> -> _SOURCE_
<android.os.Process: int myTid()> -> _SOURCE_
<android.hardware.camera2.params.HighSpeedVideoConfiguration: android.util.Size getSize()> -> _SOURCE_
<android.telephony.TelephonyRegistryManager: void notifySubscriptionInfoChanged()> -> _SOURCE_
<android.graphics.Path: boolean isConvex()> -> _SOURCE_
<android.util.DebugUtils: java.lang.String sizeValueToString(long,java.lang.StringBuilder)> -> _SOURCE_
<java.security.cert.X509CRLSelector: java.math.BigInteger getMaxCRL()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: java.lang.CharSequence getLabel()> -> _SOURCE_
<android.app.Activity: android.app.Application getApplication()> -> _SOURCE_
<android.media.tv.tuner.frontend.DvbtFrontendSettings: int getLowPriorityCodeRate()> -> _SOURCE_
<android.text.style.SuggestionRangeSpan: int getSpanTypeIdInternal()> -> _SOURCE_
<java.util.regex.Matcher: int groupCount()> -> _SOURCE_
<android.bluetooth.le.PeriodicAdvertisingParameters$Builder: android.bluetooth.le.PeriodicAdvertisingParameters build()> -> _SOURCE_
<android.net.ConnectivityManager: android.net.NetworkQuotaInfo getActiveNetworkQuotaInfo()> -> _SOURCE_
<java.lang.reflect.Field: int getModifiers()> -> _SOURCE_
<android.privacy.internal.rappor.RapporEncoder: android.privacy.internal.rappor.RapporEncoder createInsecureEncoderForTest(android.privacy.internal.rappor.RapporConfig)> -> _SOURCE_
<android.app.RuntimeAppOpAccessMessage: int getUid()> -> _SOURCE_
<android.net.MacAddress: java.lang.String stringAddrFromByteAddr(byte[])> -> _SOURCE_
<android.telecom.GatewayInfo: boolean isEmpty()> -> _SOURCE_
<android.os.Bundle: int describeContents()> -> _SOURCE_
<android.view.DragEvent: android.content.ClipDescription getClipDescription()> -> _SOURCE_
<android.database.sqlite.SQLiteOpenHelper: void onBeforeDelete(android.database.sqlite.SQLiteDatabase)> -> _SOURCE_
<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()> -> _SOURCE_
<android.service.quicksettings.TileService: boolean isLocked()> -> _SOURCE_
<java.time.chrono.Era: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)> -> _SOURCE_
<android.telephony.CallQuality: boolean isIncomingSilenceDetectedAtCallSetup()> -> _SOURCE_
<android.media.MediaCodecInfo: boolean isVendor()> -> _SOURCE_
<android.service.notification.NotificationAssistantService: void onNotificationDirectReplied(java.lang.String)> -> _SOURCE_
<android.app.Activity: android.media.session.MediaController getMediaController()> -> _SOURCE_
<android.view.MotionEvent: int getDeviceId()> -> _SOURCE_
<android.view.inputmethod.InlineSuggestionsRequest: java.lang.String getHostPackageName()> -> _SOURCE_
<android.telecom.TelecomManager: java.util.List getPhoneAccountsSupportingScheme(java.lang.String)> -> _SOURCE_
<android.net.EthernetManager: boolean isAvailable()> -> _SOURCE_
<android.view.DragEvent: java.lang.Object getLocalState()> -> _SOURCE_
<android.provider.FontRequest: java.lang.String toString()> -> _SOURCE_
<android.os.BatteryManager: long computeChargeTimeRemaining()> -> _SOURCE_
<java.util.regex.PatternSyntaxException: java.lang.String getPattern()> -> _SOURCE_
<android.os.image.DynamicSystemManager: boolean isInUse()> -> _SOURCE_
<android.widget.TwoLineListItem: android.widget.TextView getText1()> -> _SOURCE_
<android.provider.SearchIndexablesProvider: java.lang.String getType(android.net.Uri)> -> _SOURCE_
<android.bluetooth.BluetoothAudioConfig: java.lang.String toString()> -> _SOURCE_
<android.app.NotificationChannel: android.net.Uri getSound()> -> _SOURCE_
<android.text.format.DateUtils: java.lang.String getAMPMString(int)> -> _SOURCE_
<android.media.MicrophoneInfo: java.util.List getFrequencyResponse()> -> _SOURCE_
<android.app.Notification$Builder: java.lang.String loadHeaderAppName()> -> _SOURCE_
<android.hardware.camera2.CameraCharacteristics: java.util.List getAvailableSessionKeys()> -> _SOURCE_
<android.net.ConnectivityManager: int getMultipathPreference(android.net.Network)> -> _SOURCE_
<android.os.LocaleList: java.lang.String toLanguageTags()> -> _SOURCE_
<android.os.IncidentManager: android.os.IncidentManager$IncidentReport getIncidentReport(android.net.Uri)> -> _SOURCE_
<com.android.internal.widget.LockscreenCredential: com.android.internal.widget.LockscreenCredential createNone()> -> _SOURCE_
<android.telephony.ims.feature.RcsFeature: android.telephony.ims.stub.RcsSipOptionsImplBase getOptionsExchangeImpl()> -> _SOURCE_
<android.app.Notification: void dumpDebug(android.util.proto.ProtoOutputStream,long)> -> _SOURCE_
<java.nio.charset.Charset: java.lang.String toString()> -> _SOURCE_
<android.database.DatabaseUtils: java.lang.String dumpCurrentRowToString(android.database.Cursor)> -> _SOURCE_
<android.content.pm.PackageInstaller$SessionInfo: boolean isOpen()> -> _SOURCE_
<java.net.NetworkInterface: java.net.NetworkInterface getByInetAddress(java.net.InetAddress)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isDeviceOwnerAppOnCallingUser(java.lang.String)> -> _SOURCE_
<android.hardware.radio.ProgramList$Filter: java.util.Set getIdentifierTypes()> -> _SOURCE_
<android.media.AudioRecordingConfiguration: int getAudioSource()> -> _SOURCE_
<android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int,android.content.res.Resources$Theme)> -> _SOURCE_
<android.telephony.TelephonyManager: void notifyUserActivity()> -> _SOURCE_
<android.net.metrics.NetworkMetrics: void addConnectResult(int,int,java.lang.String)> -> _SOURCE_
<android.provider.DeviceConfig$Properties: java.lang.String getNamespace()> -> _SOURCE_
<android.window.WindowContainerTransaction: java.util.List getHierarchyOps()> -> _SOURCE_
<android.view.View: void outputDirtyFlags(java.lang.String,boolean,int)> -> _SOURCE_
<android.hardware.radio.ProgramList: void registerListCallback(android.hardware.radio.ProgramList$ListCallback)> -> _SOURCE_
<android.location.GpsClock: long getTimeInNs()> -> _SOURCE_
<android.preference.PreferenceActivity: android.preference.PreferenceScreen getPreferenceScreen()> -> _SOURCE_
<android.provider.ContactsContract$Directory: boolean isRemoteDirectoryId(long)> -> _SOURCE_
<android.media.RouteDiscoveryPreference: java.util.List getPreferredFeatures()> -> _SOURCE_
<android.os.ParcelUuid: java.util.UUID getUuid()> -> _SOURCE_
<android.app.assist.AssistStructure$ViewNode: android.view.autofill.AutofillId getAutofillId()> -> _SOURCE_
<android.filterfw.core.SerializedFrame: java.lang.String toString()> -> _SOURCE_
<android.hardware.usb.UsbDevice: java.lang.String toString()> -> _SOURCE_
<javax.net.ssl.SSLEngineResult: javax.net.ssl.SSLEngineResult$Status getStatus()> -> _SOURCE_
<android.view.accessibility.CaptioningManager$CaptionStyle: android.view.accessibility.CaptioningManager$CaptionStyle getCustomStyle(android.content.ContentResolver)> -> _SOURCE_
<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentPreCreated(android.app.FragmentManager,android.app.Fragment,android.os.Bundle)> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: void setVersion(int)> -> _SOURCE_
<android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl: android.view.Surface getInputSurface()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getAidForAppType(int)> -> _SOURCE_
<android.telephony.CellIdentityLte: int getChannelNumber()> -> _SOURCE_
<android.hardware.camera2.CameraCaptureSession$StateCallback: void onCaptureQueueEmpty(android.hardware.camera2.CameraCaptureSession)> -> _SOURCE_
<android.app.servertransaction.ActivityResultItem: java.lang.String toString()> -> _SOURCE_
<android.os.storage.StorageManager: android.os.storage.StorageVolume getPrimaryVolume(android.os.storage.StorageVolume[])> -> _SOURCE_
<java.io.ObjectOutputStream: void flush()> -> _SOURCE_
<android.telephony.SubscriptionManager: int getSlotIndex(int)> -> _SOURCE_
<android.accounts.AuthenticatorDescription: void writeToParcel(android.os.Parcel,int)> -> _SOURCE_
<android.media.tv.tuner.filter.MediaEvent: boolean isPrivateData()> -> _SOURCE_
<java.security.cert.X509CertSelector: int getBasicConstraints()> -> _SOURCE_
<android.content.ContextWrapper: int checkUriPermission(android.net.Uri,int,int,int)> -> _SOURCE_
<android.view.WindowInsetsAnimation$Bounds: java.lang.String toString()> -> _SOURCE_
<android.bluetooth.BluetoothCodecConfig: java.lang.String toString()> -> _SOURCE_
<android.speech.tts.TextToSpeech: java.util.List getEngines()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: int getScreenOnCount(int)> -> _SOURCE_
<com.android.internal.widget.RecyclerView$ItemAnimator: long getMoveDuration()> -> _SOURCE_
<android.view.MotionEvent: float getYPrecision()> -> _SOURCE_
<android.app.SearchableInfo: int getSettingsDescriptionId()> -> _SOURCE_
<android.telephony.data.DataCallResponse: java.lang.String toString()> -> _SOURCE_
<android.content.pm.PackageInstaller$SessionInfo: boolean isForceQueryable()> -> _SOURCE_
<java.time.temporal.WeekFields: java.time.temporal.TemporalField weekOfYear()> -> _SOURCE_
<android.net.ProxyInfo: boolean isValid()> -> _SOURCE_
<android.location.GnssCapabilities: boolean hasLowPowerMode()> -> _SOURCE_
<android.service.euicc.EuiccProfileInfo: java.util.List getUiccAccessRules()> -> _SOURCE_
<android.app.servertransaction.TopResumedActivityChangeItem: java.lang.String toString()> -> _SOURCE_
<android.os.GraphicsEnvironment: void setLayerPaths(java.lang.ClassLoader,java.lang.String,java.lang.String)> -> _SOURCE_
<android.widget.AbsListView: void onNestedScroll(android.view.View,int,int,int,int)> -> _SOURCE_
<android.bluetooth.BluetoothHearingAid: int getConnectionPolicy(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<com.android.internal.util.MemInfoReader: long getFreeSize()> -> _SOURCE_
<com.android.internal.app.WindowDecorActionBar$ActionModeImpl: android.view.Menu getMenu()> -> _SOURCE_
<android.location.Address: java.lang.String getSubLocality()> -> _SOURCE_
<android.hardware.camera2.legacy.LegacyExceptionUtils: void throwOnServiceError(int)> -> _SOURCE_
<android.renderscript.Type: boolean hasMipmaps()> -> _SOURCE_
<android.location.GnssAntennaInfo$Builder: android.location.GnssAntennaInfo build()> -> _SOURCE_
<android.widget.ExpandableListView: android.widget.ExpandableListAdapter getExpandableListAdapter()> -> _SOURCE_
<android.content.integrity.IntegrityFormula$Application: android.content.integrity.IntegrityFormula versionCodeGreaterThan(long)> -> _SOURCE_
<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setRequiresStorageNotLow(boolean)> -> _SOURCE_
<android.os.UserManager: android.os.Bundle getApplicationRestrictions(java.lang.String,android.os.UserHandle)> -> _SOURCE_
<java.net.URI: java.lang.String getSchemeSpecificPart()> -> _SOURCE_
<android.os.Looper: android.os.MessageQueue myQueue()> -> _SOURCE_
<android.bluetooth.BluetoothGattIncludedService: int getInstanceId()> -> _SOURCE_
<android.content.CursorLoader: void deliverResult(android.database.Cursor)> -> _SOURCE_
<android.media.tv.tuner.dvr.DvrSettings$Builder: android.media.tv.tuner.dvr.DvrSettings build()> -> _SOURCE_
<android.content.pm.PermissionInfo: int calculateFootprint()> -> _SOURCE_
<android.provider.DocumentsProvider: java.lang.String getDocumentType(java.lang.String)> -> _SOURCE_
<android.app.ActivityManager$TaskDescription: java.lang.String toString()> -> _SOURCE_
<android.os.health.HealthKeys$Constants: int getSize(int)> -> _SOURCE_
<android.view.textservice.TextInfo: int getSequence()> -> _SOURCE_
<java.net.URL: int getPort()> -> _SOURCE_
<android.drm.DrmManagerClient: android.content.ContentValues getMetadata(java.lang.String)> -> _SOURCE_
<android.media.midi.MidiDeviceInfo: int getInputPortCount()> -> _SOURCE_
<android.location.GpsNavigationMessage: byte getType()> -> _SOURCE_
<android.media.tv.TvView: java.lang.String getSelectedTrack(int)> -> _SOURCE_
<android.bluetooth.BluetoothHeadset: boolean isBluetoothVoiceDialingEnabled(android.content.Context)> -> _SOURCE_
<android.content.pm.PackageParser$Package: void setApplicationInfoBaseResourcePath(java.lang.String)> -> _SOURCE_
<javax.security.auth.callback.PasswordCallback: boolean isEchoOn()> -> _SOURCE_
<com.android.ims.internal.uce.common.CapInfo: boolean isVsSupported()> -> _SOURCE_
<com.android.internal.policy.DecorContext: android.content.res.AssetManager getAssets()> -> _SOURCE_
<android.telecom.AuthenticatorService$Authenticator: android.os.Bundle addAccount(android.accounts.AccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)> -> _SOURCE_
<android.appwidget.AppWidgetManager: java.util.List getInstalledProvidersForProfile(android.os.UserHandle)> -> _SOURCE_
<android.view.InputDevice$MotionRange: int getSource()> -> _SOURCE_
<android.telephony.PhysicalChannelConfig: int getCellBandwidthDownlink()> -> _SOURCE_
<android.hardware.usb.UsbManager: long usbFunctionsFromString(java.lang.String)> -> _SOURCE_
<android.drm.DrmRights: java.lang.String getSubscriptionId()> -> _SOURCE_
<android.app.ActivityOptions: android.app.PendingIntent getUsageTimeReport()> -> _SOURCE_
<android.service.autofill.FillContext: android.app.assist.AssistStructure getStructure()> -> _SOURCE_
<java.security.spec.EllipticCurve: byte[] getSeed()> -> _SOURCE_
<android.telephony.SubscriptionPlan: int[] getNetworkTypes()> -> _SOURCE_
<android.hardware.hdmi.HdmiRecordListener$TimerStatusData: int getProgrammedInfo()> -> _SOURCE_
<android.util.apk.ApkSignatureSchemeV3Verifier: boolean hasSignature(java.lang.String)> -> _SOURCE_
<android.os.Debug: void dumpReferenceTables()> -> _SOURCE_
<android.webkit.CacheManager: android.webkit.CacheManager$CacheResult getCacheFile(java.lang.String,java.util.Map)> -> _SOURCE_
<android.graphics.Rect: java.lang.String toShortString(java.lang.StringBuilder)> -> _SOURCE_
<android.hardware.location.ContextHubInfo: android.hardware.location.MemoryRegion[] getMemoryRegions()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String sendEnvelopeWithStatus(int,java.lang.String)> -> _SOURCE_
<android.content.ContentProvider: android.content.Context requireContext()> -> _SOURCE_
<java.net.URLClassLoader: java.net.URL[] getURLs()> -> _SOURCE_
<android.app.Person: java.lang.String getKey()> -> _SOURCE_
<android.os.storage.StorageManager: java.util.List getVolumes()> -> _SOURCE_
<android.content.pm.LauncherApps$PinItemRequest: int getRequestType()> -> _SOURCE_
<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentSaveInstanceState(android.app.FragmentManager,android.app.Fragment,android.os.Bundle)> -> _SOURCE_
<android.telephony.PreciseCallState: int getBackgroundCallState()> -> _SOURCE_
<android.telephony.TelephonyManager: int getNumberOfModemsWithSimultaneousDataConnections()> -> _SOURCE_
<android.media.AudioRecord: int getPositionNotificationPeriod()> -> _SOURCE_
<java.security.spec.DSAPublicKeySpec: java.math.BigInteger getQ()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.util.List getInstalledPackages(int)> -> _SOURCE_
<android.widget.ProgressBar: boolean getMirrorForRtl()> -> _SOURCE_
<java.security.cert.CertStore: java.security.cert.CertStoreParameters getCertStoreParameters()> -> _SOURCE_
<android.view.animation.Transformation: void toShortString(java.lang.StringBuilder)> -> _SOURCE_
<android.view.contentcapture.ViewNode: int getScrollY()> -> _SOURCE_
<android.content.ContentProvider: android.app.AppOpsManager getAppOpsManager()> -> _SOURCE_
<android.window.WindowContainerToken: android.os.IBinder asBinder()> -> _SOURCE_
<android.graphics.drawable.shapes.ArcShape: float getStartAngle()> -> _SOURCE_
<android.telephony.PhoneNumberUtils: boolean isVoiceMailNumber(android.content.Context,int,java.lang.String)> -> _SOURCE_
<android.app.Notification$WearableExtender: boolean getContentIntentAvailableOffline()> -> _SOURCE_
<android.content.ContentResolver: android.content.IContentProvider acquireExistingProvider(android.net.Uri)> -> _SOURCE_
<android.bluetooth.BluetoothSocket: int getMaxTransmitPacketSize()> -> _SOURCE_
<android.net.LinkProperties: java.lang.String getPrivateDnsServerName()> -> _SOURCE_
<android.app.AppGlobals: int getIntCoreSetting(java.lang.String,int)> -> _SOURCE_
<android.app.assist.AssistStructure$ViewNode: java.lang.CharSequence[] getAutofillOptions()> -> _SOURCE_
<android.view.animation.AccelerateInterpolator: long createNativeInterpolator()> -> _SOURCE_
<android.telephony.TelephonyManager: int getPreferredNetworkType(int)> -> _SOURCE_
<android.view.textclassifier.TextLinks$Request: android.view.textclassifier.SystemTextClassifierMetadata getSystemTextClassifierMetadata()> -> _SOURCE_
<android.os.Parcel: java.io.FileDescriptor readRawFileDescriptor()> -> _SOURCE_
<android.media.MediaRouter2$RoutingController: java.lang.String getId()> -> _SOURCE_
<android.app.job.JobInfo: java.lang.String toString()> -> _SOURCE_
<android.app.ActivityManager$TaskDescription: int getNavigationBarColor()> -> _SOURCE_
<android.widget.ScrollBarDrawable: android.graphics.drawable.Drawable getVerticalThumbDrawable()> -> _SOURCE_
<android.print.PrintDocumentAdapter$WriteResultCallback: void onWriteFinished(android.print.PageRange[])> -> _SOURCE_
<com.android.internal.util.StateMachine: void addLogRec(java.lang.String)> -> _SOURCE_
<android.app.NotificationManager$Policy: java.lang.String conversationSendersToString(int)> -> _SOURCE_
<android.drm.DrmManagerClient: int processDrmInfo(android.drm.DrmInfo)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: android.os.BatteryStats$Timer getWifiStateTimer(int)> -> _SOURCE_
<android.content.RestrictionEntry: java.lang.String getDescription()> -> _SOURCE_
<java.security.cert.X509CertSelector: javax.security.auth.x500.X500Principal getSubject()> -> _SOURCE_
<android.telephony.ims.stub.RcsPresenceExchangeImplBase: void onNotifyUpdateCapabilites(int)> -> _SOURCE_
<android.bluetooth.BluetoothA2dp: boolean setActiveDevice(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<android.os.Handler: android.os.Looper getLooper()> -> _SOURCE_
<android.content.pm.DataLoaderManager: boolean bindToDataLoader(int,android.content.pm.DataLoaderParamsParcel,android.content.pm.IDataLoaderStatusListener)> -> _SOURCE_
<android.media.tv.tuner.dvr.DvrPlayback: int start()> -> _SOURCE_
<android.text.style.TtsSpan$MeasureBuilder: android.text.style.TtsSpan$MeasureBuilder setNumber(long)> -> _SOURCE_
<android.content.ContextWrapper: boolean deleteFile(java.lang.String)> -> _SOURCE_
<android.content.res.AssetManager: android.content.res.ApkAssets[] getApkAssets()> -> _SOURCE_
<android.hardware.usb.UsbEndpoint: java.lang.String toString()> -> _SOURCE_
<android.text.PrecomputedText: int getMemoryUsage()> -> _SOURCE_
<android.telephony.euicc.EuiccRulesAuthTable: boolean match(java.lang.String,java.lang.String)> -> _SOURCE_
<android.widget.TableLayout: boolean isStretchAllColumns()> -> _SOURCE_
<android.app.backup.BackupTransport: java.lang.CharSequence dataManagementIntentLabel()> -> _SOURCE_
<java.util.concurrent.ForkJoinTask: int getQueuedTaskCount()> -> _SOURCE_
<com.android.ims.internal.uce.presence.PresTupleInfo: java.lang.String getFeatureTag()> -> _SOURCE_
<android.telephony.VisualVoicemailSms: android.telecom.PhoneAccountHandle getPhoneAccountHandle()> -> _SOURCE_
<android.view.inputmethod.CursorAnchorInfo: int getCharacterBoundsFlags(int)> -> _SOURCE_
<android.app.admin.DeviceAdminReceiver: void onBugreportShared(android.content.Context,android.content.Intent,java.lang.String)> -> _SOURCE_
<java.io.InvalidClassException: java.lang.String getMessage()> -> _SOURCE_
<android.app.assist.AssistStructure$ViewNode: int getChildCount()> -> _SOURCE_
<java.time.YearMonth: int getMonthValue()> -> _SOURCE_
<android.telephony.mbms.vendor.MbmsGroupCallServiceBase: android.os.IBinder onBind(android.content.Intent)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: void uninstallAllUserCaCerts(android.content.ComponentName)> -> _SOURCE_
<android.app.usage.ExternalStorageStats: long getAppBytes()> -> _SOURCE_
<java.util.ArrayDeque: java.lang.Object[] toArray()> -> _SOURCE_
<android.hardware.soundtrigger.SoundTrigger$Keyphrase: java.lang.String toString()> -> _SOURCE_
<android.content.ContextWrapper: java.io.File getDatabasePath(java.lang.String)> -> _SOURCE_
<android.telephony.ServiceState: java.lang.String rilServiceStateToString(int)> -> _SOURCE_
<android.content.pm.LauncherApps: java.util.List getShortcutInfo(java.lang.String,java.util.List,android.os.UserHandle)> -> _SOURCE_
<android.net.InterfaceConfiguration: boolean isActive()> -> _SOURCE_
<android.media.MediaCodec$OutputFrame: java.util.Set getChangedKeys()> -> _SOURCE_
<com.android.internal.telephony.TelephonyPermissions: void enforceCallingOrSelfCarrierPrivilege(android.content.Context,int,java.lang.String)> -> _SOURCE_
<javax.net.ssl.SSLContext: javax.net.ssl.SSLParameters getSupportedSSLParameters()> -> _SOURCE_
<android.content.pm.Signature: android.content.pm.Signature[] getChainSignatures()> -> _SOURCE_
<android.view.contentcapture.ViewNode: int getInputType()> -> _SOURCE_
<android.view.DisplayAddress: android.view.DisplayAddress$Physical fromPortAndModel(byte,java.lang.Long)> -> _SOURCE_
<com.android.internal.app.procstats.AssociationState$SourceState: java.lang.String toString()> -> _SOURCE_
<android.hardware.radio.ProgramSelector: long[] getVendorIds()> -> _SOURCE_
<android.view.Display$Mode: int getModeId()> -> _SOURCE_
<android.telecom.Conference: android.telecom.Connection getPrimaryConnection()> -> _SOURCE_
<android.app.contentsuggestions.ContentSuggestionsManager: boolean isEnabled()> -> _SOURCE_
<com.android.internal.util.MemInfoReader: long getTotalSize()> -> _SOURCE_
<android.hardware.hdmi.HdmiPortInfo: boolean isCecSupported()> -> _SOURCE_
<android.media.tv.TvInputService$Session: void notifySessionEvent(java.lang.String,android.os.Bundle)> -> _SOURCE_
<java.text.DecimalFormatSymbols: char getDigit()> -> _SOURCE_
<android.security.Credentials: boolean deleteUserKeyTypeForAlias(android.security.KeyStore,java.lang.String,int)> -> _SOURCE_
<java.lang.ProcessBuilder$Redirect: java.io.File file()> -> _SOURCE_
<android.os.BatterySaverPolicyConfig: boolean getDeferKeyValueBackup()> -> _SOURCE_
<android.appwidget.AppWidgetProviderInfo: java.lang.String loadLabel(android.content.pm.PackageManager)> -> _SOURCE_
<android.permission.PermissionManager: java.util.Set getAutoRevokeExemptionRequestedPackages()> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: java.lang.Boolean getResizeableActivity()> -> _SOURCE_
<android.content.pm.ShortcutInfo: int lookUpResourceId(android.content.res.Resources,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.media.AudioTrack: int getOffloadPadding()> -> _SOURCE_
<android.hardware.camera2.marshal.MarshalHelpers: java.lang.String toStringNativeType(int)> -> _SOURCE_
<android.app.usage.NetworkStats$Bucket: int getState()> -> _SOURCE_
<java.lang.Class: boolean isAnnotationPresent(java.lang.Class)> -> _SOURCE_
<com.android.ims.internal.uce.presence.PresRlmiInfo: java.lang.String getSubscriptionTerminatedReason()> -> _SOURCE_
<android.service.quickaccesswallet.WalletCard: java.lang.String getCardId()> -> _SOURCE_
<com.android.internal.telephony.gsm.SmsCbHeader: java.lang.String toString()> -> _SOURCE_
<android.telephony.NetworkRegistrationInfo: java.lang.String serviceTypeToString(int)> -> _SOURCE_
<android.app.ActivityOptions: int getLaunchWindowingMode()> -> _SOURCE_
<android.bluetooth.BluetoothSocket: int getConnectionType()> -> _SOURCE_
<android.hardware.display.AmbientDisplayConfiguration: boolean pulseOnLongPressEnabled(int)> -> _SOURCE_
<android.view.inputmethod.InputContentInfo: int describeContents()> -> _SOURCE_
<java.util.Locale: java.lang.String getDisplayVariant()> -> _SOURCE_
<java.net.PasswordAuthentication: char[] getPassword()> -> _SOURCE_
<android.content.res.Resources: java.lang.String getResourceName(int)> -> _SOURCE_
<android.view.RemoteAnimationAdapter: int getCallingUid()> -> _SOURCE_
<android.text.TextUtils: java.lang.String emptyIfNull(java.lang.String)> -> _SOURCE_
<android.drm.DrmManagerClient: boolean canHandle(java.lang.String,java.lang.String)> -> _SOURCE_
<java.util.Date: java.lang.String toString()> -> _SOURCE_
<android.view.ViewRootImpl: android.view.accessibility.AccessibilityNodeInfo getAccessibilityFocusedVirtualView()> -> _SOURCE_
<java.time.LocalDate: int getDayOfYear()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isRadioOn()> -> _SOURCE_
<android.app.AppOpsManager$HistoricalOp: android.util.LongSparseArray collectKeys()> -> _SOURCE_
<android.service.textservice.SpellCheckerService$Session: android.os.Bundle getBundle()> -> _SOURCE_
<android.view.animation.Transformation: java.lang.String toShortString()> -> _SOURCE_
<javax.net.ServerSocketFactory: javax.net.ServerSocketFactory getDefault()> -> _SOURCE_
<com.android.internal.inputmethod.InputMethodDebug: java.lang.String softInputDisplayReasonToString(int)> -> _SOURCE_
<android.os.BasicShellCommandHandler: java.io.OutputStream getRawOutputStream()> -> _SOURCE_
<android.media.AudioFocusInfo: int getSdkTarget()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.lang.String getWifiMacAddress(android.content.ComponentName)> -> _SOURCE_
<android.nfc.NfcAdapter: boolean disableNdefPush()> -> _SOURCE_
<android.media.MediaDrm$CertificateRequest: java.lang.String getDefaultUrl()> -> _SOURCE_
<android.telephony.TelephonyManager: int getSupportedModemCount()> -> _SOURCE_
<com.android.internal.telephony.cdma.SmsMessage: com.android.internal.telephony.cdma.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,int,byte[],boolean)> -> _SOURCE_
<java.io.ObjectInputStream: byte readByte()> -> _SOURCE_
<android.bluetooth.SdpRecord: java.lang.String toString()> -> _SOURCE_
<android.hardware.usb.UsbAccessory: java.lang.String getUri()> -> _SOURCE_
<android.telecom.ParcelableCall: android.telecom.DisconnectCause getDisconnectCause()> -> _SOURCE_
<android.print.PrintJob: boolean isQueued()> -> _SOURCE_
<java.text.NumberFormat: java.text.NumberFormat getInstance()> -> _SOURCE_
<android.os.health.SystemHealthManager: android.os.health.SystemHealthManager 'from'(android.content.Context)> -> _SOURCE_
<android.widget.TimePicker: int getAutofillType()> -> _SOURCE_
<android.app.AppOpsManager: void checkPackage(int,java.lang.String)> -> _SOURCE_
<com.android.internal.view.ScrollViewCaptureHelper: void onPrepareForEnd(android.view.ViewGroup)> -> _SOURCE_
<android.bluetooth.le.ScanSettings: int getPhy()> -> _SOURCE_
<android.hardware.Camera$Parameters: int getJpegThumbnailQuality()> -> _SOURCE_
<android.security.keystore.KeystoreResponse: java.lang.String getErrorMessage()> -> _SOURCE_
<android.bluetooth.BluetoothGattCallback: void onCharacteristicWrite(android.bluetooth.BluetoothGatt,android.bluetooth.BluetoothGattCharacteristic,int)> -> _SOURCE_
<android.app.usage.NetworkStatsManager: android.app.usage.NetworkStats queryDetailsForUid(int,java.lang.String,long,long,int)> -> _SOURCE_
<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy$Builder permitResourceMismatches()> -> _SOURCE_
<java.lang.reflect.Method: boolean isDefault()> -> _SOURCE_
<android.app.backup.FullBackup$BackupScheme: java.util.Map maybeParseAndGetCanonicalIncludePaths()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isMultiSimEnabled()> -> _SOURCE_
<android.net.SSLCertificateSocketFactory: java.lang.String[] getSupportedCipherSuites()> -> _SOURCE_
<android.provider.DocumentsContract: java.lang.String getDocumentId(android.net.Uri)> -> _SOURCE_
<android.telephony.ModemActivityInfo: int getSleepTimeMillis()> -> _SOURCE_
<android.drm.DrmEvent: java.lang.String getMessage()> -> _SOURCE_
<android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()> -> _SOURCE_
<android.app.usage.UsageEvents: boolean hasNextEvent()> -> _SOURCE_
<android.hardware.usb.UsbAccessory: java.lang.String getDescription()> -> _SOURCE_
<java.text.DecimalFormatSymbols: char getZeroDigit()> -> _SOURCE_
<com.android.internal.graphics.palette.Target$Builder: com.android.internal.graphics.palette.Target build()> -> _SOURCE_
<java.net.URL: java.lang.String toExternalForm()> -> _SOURCE_
<android.telephony.PackageChangeReceiver: void onPackageDisappeared()> -> _SOURCE_
<com.android.internal.widget.RecyclerView$LayoutParams: boolean isViewInvalid()> -> _SOURCE_
<java.security.cert.CertificateFactory: java.security.Provider getProvider()> -> _SOURCE_
<android.bluetooth.BluetoothServerSocket: int getPsm()> -> _SOURCE_
<android.telephony.cdma.CdmaSmsCbProgramResults: java.lang.String toString()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean getBluetoothContactSharingDisabled(android.os.UserHandle)> -> _SOURCE_
<android.appwidget.AppWidgetProviderInfo: android.os.UserHandle getProfile()> -> _SOURCE_
<android.media.AudioFormat: int[] filterPublicFormats(int[])> -> _SOURCE_
<android.provider.ContactsContract$SyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)> -> _SOURCE_
<android.metrics.LogMaker: java.lang.String getCounterName()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.util.List getPermittedInputMethods(android.content.ComponentName)> -> _SOURCE_
<android.os.Debug$MemoryInfo: int getSummaryCodeRss()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getSimOperatorName(int)> -> _SOURCE_
<android.os.TelephonyServiceManager: android.os.TelephonyServiceManager$ServiceRegisterer getIccPhoneBookServiceRegisterer()> -> _SOURCE_
<android.accessibilityservice.FingerprintGestureController: boolean isGestureDetectionAvailable()> -> _SOURCE_
<com.android.internal.widget.RecyclerView: boolean hasFixedSize()> -> _SOURCE_
<android.view.textservice.SpellCheckerSubtype: java.lang.String getExtraValue()> -> _SOURCE_
<android.hardware.biometrics.BiometricAuthenticator$AuthenticationResult: android.hardware.biometrics.CryptoObject getCryptoObject()> -> _SOURCE_
<android.os.Debug$MemoryInfo: boolean hasSwappedOutPss()> -> _SOURCE_
<android.telephony.ims.ImsCallForwardInfo: java.lang.String getNumber()> -> _SOURCE_
<java.security.KeyFactory: java.security.Provider getProvider()> -> _SOURCE_
<android.telephony.DataConnectionRealTimeInfo: int getDcPowerState()> -> _SOURCE_
<android.net.ConnectivityManager: byte[] getNetworkWatchlistConfigHash()> -> _SOURCE_
<java.net.HttpCookie: java.lang.String getPath()> -> _SOURCE_
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,java.util.concurrent.Executor,android.location.LocationListener)> -> _SOURCE_
<android.net.NetworkRequest: int getRequestorUid()> -> _SOURCE_
<android.print.PrinterCapabilitiesInfo: java.lang.String toString()> -> _SOURCE_
<android.util.apk.SourceStampVerifier: android.util.apk.SourceStampVerificationResult verify(java.util.List)> -> _SOURCE_
<android.telephony.ims.ImsCallSession: void deflect(java.lang.String)> -> _SOURCE_
<android.app.Notification: android.util.Pair findRemoteInputActionPair(boolean)> -> _SOURCE_
<android.telephony.CellIdentityTdscdma: int getChannelNumber()> -> _SOURCE_
<android.app.NotificationChannelGroup: int getUserLockedFields()> -> _SOURCE_
<android.widget.QuickContactBadge: void assignContactFromEmail(java.lang.String,boolean)> -> _SOURCE_
<android.mtp.MtpDevice: int[] getStorageIds()> -> _SOURCE_
<android.media.audiofx.DynamicsProcessing$Config: boolean isPreEqInUse()> -> _SOURCE_
<android.net.lowpan.LowpanManager: java.lang.String[] getInterfaceList()> -> _SOURCE_
<android.util.NtpTrustedTime: android.util.NtpTrustedTime$TimeResult getCachedTimeResult()> -> _SOURCE_
<android.widget.AbsListView: void onRemoteAdapterDisconnected()> -> _SOURCE_
<android.content.BroadcastReceiver: boolean isOrderedBroadcast()> -> _SOURCE_
<android.hardware.location.NanoAppBinary: byte getTargetChreApiMajorVersion()> -> _SOURCE_
<com.android.internal.widget.RecyclerView$LayoutManager: boolean isAutoMeasureEnabled()> -> _SOURCE_
<android.service.notification.Condition: java.lang.String toString()> -> _SOURCE_
<android.view.accessibility.AccessibilityManager: void addTouchExplorationStateChangeListener(android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener,android.os.Handler)> -> _SOURCE_
<android.widget.TimePicker: android.view.View getMinuteView()> -> _SOURCE_
<android.accounts.AbstractAccountAuthenticator: android.os.Bundle addAccountFromCredentials(android.accounts.AccountAuthenticatorResponse,android.accounts.Account,android.os.Bundle)> -> _SOURCE_
