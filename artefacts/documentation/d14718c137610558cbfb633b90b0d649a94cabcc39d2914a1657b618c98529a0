
     * Initializes the device for encrypted backup, by generating a recoverable secondary key, then
     * sending that alias to the backup server and saving it in local settings.
     *
     * <p>If there is already an active secondary key then does nothing. If the active secondary key
     * is destroyed then throws {@link InvalidKeyException}.
     *
     * <p>If a key rotation is pending and able to finish (i.e., the new key has synced with the
     * remote trusted hardware module), then it completes the rotation before returning the key.
     *
     * @return The active secondary key.
     * @throws InvalidKeyException if the secondary key is in a bad state.
     