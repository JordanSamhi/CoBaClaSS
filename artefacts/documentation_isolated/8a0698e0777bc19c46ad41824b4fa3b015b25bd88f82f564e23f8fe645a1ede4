
     * Decrypts {@code encryptedPayload} by using {@code ourPrivateKey} and/or {@code sharedSecret}.
     * At least one of {@code ourPrivateKey} and {@code sharedSecret} must be non-null, and an empty
     * {@code sharedSecret} is equivalent to null.
     *
     * <p>Note that {@code header} should be the same data used for {@link #encrypt}, which is
     * authenticated (but not encrypted) together with {@code payload}; otherwise, an {@code
     * AEADBadTagException} will be thrown.
     *
     * @param ourPrivateKey the recipient's private key, or null if the payload was encrypted only
     *     with the shared secret
     * @param sharedSecret the secret shared between the sender and the recipient, or null if the
     *     payload was encrypted only with the recipient's public key
     * @param header the data that was authenticated with the original payload but not encrypted, or
     *     null if the data is empty
     * @param encryptedPayload the data to be decrypted
     * @return the original payload that was encrypted
     * @throws NoSuchAlgorithmException if any underlying crypto algorithm is not supported
     * @throws InvalidKeyException if the provided key is invalid for underlying crypto algorithms
     * @throws AEADBadTagException if the authentication tag contained in {@code encryptedPayload}
     *     cannot be validated, or if the payload is not a valid SecureBox V2 payload.
     * @hide
     