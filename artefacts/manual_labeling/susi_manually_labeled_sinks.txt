<android.accessibilityservice.AccessibilityService: android.content.ComponentName startService(android.content.Intent)>
<android.accessibilityservice.AccessibilityService: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)>
<android.accessibilityservice.AccessibilityService: void setWallpaper(android.graphics.Bitmap)>
<android.accounts.AccountAuthenticatorActivity: android.content.ComponentName startService(android.content.Intent)>
<android.accounts.AccountAuthenticatorActivity: void sendBroadcast(android.content.Intent,java.lang.String)>
<android.accounts.AccountAuthenticatorActivity: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.accounts.AccountAuthenticatorActivity: void setRequestedOrientation(int)>
<android.accounts.AccountAuthenticatorActivity: void setWallpaper(java.io.InputStream)>
<android.accounts.AccountManager: void setPassword(android.accounts.Account,java.lang.String)>
<android.accounts.AccountManagerService: void getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)>
<android.accounts.AccountManagerService: void setPassword(android.accounts.Account,java.lang.String)>
<android.accounts.IAccountManager$Stub$Proxy: void removeAccount(android.accounts.IAccountManagerResponse,android.accounts.Account)>
<android.accounts.IAccountManager$Stub$Proxy: void setPassword(android.accounts.Account,java.lang.String)>
<android.app.Activity: boolean startNextMatchingActivity(android.content.Intent)>
<android.app.Activity: void startSearch(java.lang.String,boolean,android.os.Bundle,boolean)>
<android.app.ActivityManagerNative: boolean startNextMatchingActivity(android.os.IBinder,android.content.Intent)>
<android.app.ActivityManagerNative: int startActivityWithConfig(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.net.Uri[],int,android.os.IBinder,java.lang.String,int,boolean,boolean,android.content.res.Configuration)>
<android.app.ActivityManagerNative: void broadcastStickyIntent(android.content.Intent,java.lang.String)>
<android.app.Application: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)>
<android.app.ContextImpl: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.app.ExpandableListActivity: boolean setSelectedChild(int,int,boolean)>
<android.app.IWallpaperManager$Stub$Proxy: void setWallpaperComponent(android.content.ComponentName)>
<android.app.backup.BackupAgentHelper: void setWallpaper(android.graphics.Bitmap)>
<android.app.backup.IBackupManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>
<android.bluetooth.IBluetooth$Stub$Proxy: boolean disconnectInputDevice(android.bluetooth.BluetoothDevice)>
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean startScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice)>
<android.bluetooth.IBluetoothHeadset$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>
<android.bluetooth.ScoSocket: void onConnected
<android.content.ContentService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.content.ContentService: void dump(java.io.FileDescriptor,java.lang.String[])>
<android.content.ContentService: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)>
<android.content.IContentService$Stub$Proxy: void setIsSyncable(android.accounts.Account,java.lang.String,int)>
<android.content.SyncManager$ActiveSyncContext: void onServiceConnected(android.content.ComponentName,android.os.IBinder)>
<android.content.SyncManager$SyncHandler: long maybeStartNextSyncLocked()>
<android.filterpacks.videosink.MediaEncoderFilter: void open(android.filterfw.core.FilterContext)>
<android.location.ILocationManager$Stub$Proxy: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)>
<android.media.AudioService: void setMode(int,android.os.IBinder)>
<android.media.IAudioService$Stub$Proxy: void setBluetoothScoOn(boolean)>
<android.media.effect.FilterGraphEffect: void apply(int,int,int,int)>
<android.media.effect.effects.BackDropperEffect: void apply(int,int,int,int)>
<android.net.IConnectivityManager$Stub$Proxy: boolean setRadios(boolean)>
<android.net.IConnectivityManager$Stub$Proxy: void setMobileDataEnabled(boolean)>
<android.net.sip.ISipService$Stub$Proxy: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener)>
<android.net.wifi.p2p.IWifiP2pManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>
<android.os.IPowerManager$Stub$Proxy: void setAttentionLight(boolean,int)>
<android.os.IVibratorService$Stub$Proxy: void vibrate(long,android.os.IBinder)>
<android.os.storage.IMountService$Stub$Proxy: void shutdown(android.os.storage.IMountShutdownObserver)>
<android.server.BluetoothEventLoop: void onDeviceRemoved(java.lang.String)>
<android.telephony.SmsManager: boolean deleteMessageFromIcc(int)>
<android.telephony.SmsManager: boolean disableCellBroadcast(int)>
<android.telephony.gsm.SmsManager: boolean updateMessageOnSim(int,int,byte[])>
<android.telephony.gsm.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)>
<android.util.Log: int println(int,java.lang.String,java.lang.String)>
<android.util.Log: int v(java.lang.String,java.lang.String)>
<android.util.Slog: int v(java.lang.String,java.lang.String,java.lang.Throwable)>
<android.view.IWindowManager$Stub$Proxy: void reenableKeyguard(android.os.IBinder)>
<android.view.IWindowManager$Stub$Proxy: void setNewConfiguration(android.content.res.Configuration)>
<android.view.IWindowManager$Stub$Proxy: void stopAppFreezingScreen(android.os.IBinder,boolean)>
<android.view.IWindowSession$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>
<com.android.bluetooth.pbap.BluetoothPbapObexServer: int pullVcardListing(byte[],com.android.bluetooth.pbap.BluetoothPbapObexServer$AppParamValue,javax.obex.HeaderSet,javax.obex.Operation)>
<com.android.bluetooth.pbap.BluetoothPbapService$SocketAcceptThread: void run()>
<com.android.calendar.widget.CalendarAppWidgetProvider: void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])>
<com.android.contacts.editor.EventFieldEditorView: void onFieldChanged(java.lang.String,java.lang.String)>
<com.android.contacts.editor.RawContactEditorView: void setPhotoBitmap(android.graphics.Bitmap)>
<com.android.deskclock.HandleSetAlarm: void onCreate(android.os.Bundle)>
<com.android.email.Controller$LegacyListener: void synchronizeMailboxStarted(long,long)>
<com.android.email.SecurityPolicy: void onPasswordExpiring(android.content.Context)>
<com.android.email.service.MailService$ControllerResults: void updateMailboxCallback(com.android.emailcommon.mail.MessagingException,long,long,int,int,java.util.ArrayList)>
<com.android.exchange.ExchangeService: void startManualSync(long,int,com.android.exchange.Request)>
<com.android.inputmethod.accessibility.AccessibilityEntityProvider: boolean performAction(int,int,android.os.Bundle)>
<com.android.inputmethod.keyboard.LatinKeyboardView$KeyTimerHandler: void startLongPressTimer(int)>
<com.android.internal.policy.impl.KeyguardViewBase: boolean dispatchKeyEvent(android.view.KeyEvent)>
<com.android.internal.policy.impl.KeyguardViewMediator: void keyguardDone(boolean)>
<com.android.internal.policy.impl.keyguard.KeyguardMultiUserAvatar: void setPressed(boolean)>
<com.android.internal.telephony.AdnRecordCache: void updateAdnByIndex(int,com.android.internal.telephony.AdnRecord,int,java.lang.String,android.os.Message)>
<com.android.internal.telephony.CommandsInterface: void setSmscAddress(java.lang.String,android.os.Message)>
<com.android.internal.telephony.ISms$Stub$Proxy: boolean disableCellBroadcast(int)>
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean supplyPin(java.lang.String)>
<com.android.internal.telephony.IccRecords: void setMsisdnNumber(java.lang.String,java.lang.String,android.os.Message)>
<com.android.internal.telephony.MccTable: void setSystemLocale(android.content.Context,java.lang.String,java.lang.String)>
<com.android.internal.telephony.Phone: void setSmscAddress(java.lang.String,android.os.Message)>
<com.android.internal.telephony.PhoneBase: void notifyDataConnection(java.lang.String,java.lang.String)>
<com.android.internal.telephony.PhoneBase: void setCdmaSubscription(int,android.os.Message)>
<com.android.internal.telephony.PhoneBase: void setSmscAddress(java.lang.String,android.os.Message)>
<com.android.internal.telephony.RIL: void setSmscAddress(java.lang.String,android.os.Message)>
<com.android.internal.telephony.SMSDispatcher: int processMessagePart(byte[],java.lang.String,int,int,int,long,int,boolean)>
<com.android.internal.telephony.SMSDispatcher: void dispatch(android.content.Intent,java.lang.String)>
<com.android.internal.telephony.SMSDispatcher: void dispatch(android.content.Intent,java.lang.String,android.content.BroadcastReceiver)>
<com.android.internal.telephony.cdma.CDMALTEPhone: void setBandMode(int,android.os.Message)>
<com.android.internal.telephony.cdma.CDMALTEPhone: void setSmscAddress(java.lang.String,android.os.Message)>
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.Connection dial(java.lang.String)>
<com.android.internal.telephony.cdma.CDMAPhone: void enableEnhancedVoicePrivacy(boolean,android.os.Message)>
<com.android.internal.telephony.cdma.CDMAPhone: void sendDtmf(char)>
<com.android.internal.telephony.cdma.CDMAPhone: void setSmscAddress(java.lang.String,android.os.Message)>
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void fixTimeZone(java.lang.String)>
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)>
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void fixTimeZone(java.lang.String)>
<com.android.internal.telephony.gsm.GSMPhone: void notifyServiceStateChanged(android.telephony.ServiceState)>
<com.android.internal.telephony.gsm.GSMPhone: void setSmscAddress(java.lang.String,android.os.Message)>
<com.android.internal.telephony.gsm.GsmDataConnection: void onConnect(com.android.internal.telephony.DataConnection$ConnectionParams)>
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void dispatch(android.content.Intent,java.lang.String)>
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void dispatch(android.content.Intent,java.lang.String,android.content.BroadcastReceiver)>
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void sendNewSubmitPdu(java.lang.String,java.lang.String,java.lang.String,com.android.internal.telephony.SmsHeader,int,android.app.PendingIntent,android.app.PendingIntent,boolean)>
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)>
<com.android.internal.telephony.sip.SipPhone: void setSmscAddress(java.lang.String,android.os.Message)>
<com.android.internal.telephony.sip.SipPhoneBase: void restoreSavedNetworkSelection(android.os.Message)>
<com.android.internal.telephony.sip.SipPhoneBase: void setCdmaSubscription(int,android.os.Message)>
<com.android.internal.telephony.sip.SipPhoneBase: void setLine1Number(java.lang.String,java.lang.String,android.os.Message)>
<com.android.internal.telephony.sip.SipPhoneBase: void setSmscAddress(java.lang.String,android.os.Message)>
<com.android.mms.transaction.MessageStatusService: android.telephony.SmsMessage updateMessageStatus(android.content.Context,android.net.Uri,byte[],java.lang.String)>
<com.android.mms.transaction.SendTransaction: byte[] sendPdu(long,byte[],java.lang.String)>
<com.android.mms.transaction.Transaction: byte[] sendPdu(byte[],java.lang.String)>
<com.android.mms.ui.ClassZeroActivity: void saveMessage()>
<com.android.mms.ui.ConversationListItem: void updateAvatarView()>
<com.android.mms.ui.ConversationListItem: void updateFromView()>
<com.android.mms.ui.ManageSimMessages: void startQuery()>
<com.android.nfc.NfcService: void sendMockNdefTag(android.nfc.NdefMessage)>
<com.android.phone.BluetoothHandsfree: android.bluetooth.AtCommandResult redial()>
<com.android.phone.PhoneUtils$2: void onClick(android.content.DialogInterface,int)>
<com.android.phone.RespondViaSmsManager$RespondViaSmsItemClickListener: void onItemClick(android.widget.AdapterView,android.view.View,int,long)>
<com.android.providers.contacts.LegacyApiSupport: int updateSettings(android.content.ContentValues)>
<com.android.providers.telephony.SmsProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>
<com.android.providers.userdictionary.DictionaryBackupAgent: void onRestore(android.app.backup.BackupDataInput,int,android.os.ParcelFileDescriptor)>
<com.android.server.AlarmManagerService: void setTimeZone(java.lang.String)>
<com.android.server.ConnectivityService: void setNetworkPreference(int)>
<com.android.server.InputMethodManagerService$InputMethodSettings: void addSubtypeToHistory(java.lang.String,java.lang.String)>
<com.android.server.InputMethodManagerService$InputMethodSettings: void putSelectedSubtype(int)>
<com.android.server.LocationManagerService$Receiver: boolean callStatusChangedLocked(java.lang.String,int,android.os.Bundle)>
<com.android.server.LocationManagerService: void requestLocationUpdatesLocked(java.lang.String,long,float,boolean,com.android.server.LocationManagerService$Receiver)>
<com.android.server.TelephonyRegistry: void notifyDataConnectionFailed(java.lang.String,java.lang.String)>
<com.android.server.WifiService: void setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)>
<com.android.server.am.ActivityManagerService: void setAlwaysFinish(boolean)>
<com.android.server.am.BatteryStatsService: void setBatteryState(int,int,int,int,int,int)>
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: boolean turnOnUpstreamMobileConnection(int)>
<com.android.server.net.NetworkPolicyManagerService: void addNetworkPolicyLocked(android.net.NetworkPolicy)>
<com.android.server.net.NetworkStatsService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.server.sip.SipService: void notifyProfileRemoved(android.net.sip.SipProfile)>
<com.android.settings.DataUsageSummary: void setRestrictBackground(boolean)>
<com.android.settings.SoundSettings: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)>
<com.android.systemui.screenshot.GlobalScreenshot: void notifyScreenshotError(android.content.Context,android.app.NotificationManager)>
<com.google.android.mms.pdu.PduPersister: void updateHeaders(android.net.Uri,com.google.android.mms.pdu.SendReq)>
<java.net.URL: java.net.URLConnection openConnection()>
