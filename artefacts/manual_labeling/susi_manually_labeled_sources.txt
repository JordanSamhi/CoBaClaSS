<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAccountsByTypeAndFeatures(java.lang.String,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)>
<android.accounts.AccountManagerService: android.accounts.Account[] getAccounts(java.lang.String)>
<android.bluetooth.BluetoothDevice: java.lang.String getName()>
<android.bluetooth.BluetoothHeadset: int getConnectionState(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothPan: boolean isTetheringOn()>
<android.bluetooth.IBluetooth$Stub: int getBondState(java.lang.String)>
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: java.util.List getConnectedDevices()>
<android.bluetooth.IBluetoothPbap$Stub$Proxy: android.bluetooth.BluetoothDevice getClient()>
<android.content.ContentProviderClient: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>
<android.content.ContentResolver: android.content.SyncInfo getCurrentSync()>
<android.content.ContentResolver: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)>
<android.content.ContentService: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)>
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>
<android.net.sip.SipManager: android.net.sip.SipAudioCall takeAudioCall(android.content.Intent,android.net.sip.SipAudioCall$Listener)>
<android.net.wifi.IWifiManager$Stub$Proxy: android.net.wifi.WifiInfo getConnectionInfo()>
<android.net.wifi.WifiManager: android.net.wifi.WifiInfo getConnectionInfo()>
<android.net.wifi.p2p.IWifiP2pManager$Stub$Proxy: android.os.Messenger getMessenger()>
<android.nfc.INfcAdapterExtras$Stub$Proxy: int getCardEmulationRoute(java.lang.String)>
<android.nfc.NdefRecord: int getByteLength()>
<android.nfc.tech.NfcB: byte[] transceive(byte[],boolean)>
<android.provider.CalendarContract$Instances: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],long,long)>
<android.provider.ContactsContract$ProfileSyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)>
<android.provider.Telephony$Sms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[])>
<android.telephony.CellInfoCdma: android.telephony.CellSignalStrengthCdma getCellSignalStrength()>
<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()>
<android.telephony.TelephonyManager: java.lang.String getCompleteVoiceMailNumber()>
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.test.mock.MockContentResolver: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)>
<android.webkit.WebSettings: boolean getJavaScriptCanOpenWindowsAutomatically()>
<com.android.browser.provider.BrowserProvider2: int getUrlCount(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String)>
<com.android.calendar.CalendarUtils$TimeZoneUtils: java.lang.String getTimeZone(android.content.Context,java.lang.Runnable)>
<com.android.camera.ListPreference: java.lang.String getKey()>
<com.android.contacts.list.CustomContactListFilterActivity$CustomFilterConfigurationLoader: com.android.contacts.list.CustomContactListFilterActivity$AccountSet loadInBackground()>
<com.android.contacts.list.JoinContactListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)>
<com.android.contacts.list.LegacyContactListAdapter: android.net.Uri getPersonUri(int)>
<com.android.contacts.list.LegacyPhoneNumberListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)>
<com.android.contacts.list.ProfileAndContactsLoader: android.database.Cursor loadInBackground()>
<com.android.contacts.list.ProfileAndContactsLoader: java.lang.Object loadInBackground()>
<com.android.contacts.vcard.NfcImportVCardActivity$ImportTask: com.android.contacts.vcard.ImportRequest doInBackground(com.android.contacts.vcard.VCardService[])>
<com.android.gallery3d.data.SingleItemAlbum: java.lang.String getName()>
<com.android.gallery3d.exif.ExifTag: int getLong(int)>
<com.android.internal.telephony.CommandsInterface: void getSmscAddress(android.os.Message)>
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getDeviceSvn()>
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getVoiceMailNumber()>
<com.android.internal.telephony.IPhoneSubInfo$Stub: java.lang.String getLine1Number()>
<com.android.internal.telephony.ITelephony$Stub$Proxy: android.os.Bundle getCellLocation()>
<com.android.internal.telephony.OperatorInfo: java.lang.String toString()>
<com.android.internal.telephony.PhoneBase: void getPreferredNetworkType(android.os.Message)>
<com.android.internal.telephony.PhoneBase: void getSmscAddress(android.os.Message)>
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getSubscriberId()>
<com.android.internal.telephony.RIL: void getSmscAddress(android.os.Message)>
<com.android.internal.telephony.cdma.CDMALTEPhone: void getSmscAddress(android.os.Message)>
<com.android.internal.telephony.cdma.CdmaConnection: long getCreateTime()>
<com.android.internal.telephony.gsm.GSMPhone: void getSmscAddress(android.os.Message)>
<com.android.internal.telephony.sip.SipPhone: void getSmscAddress(android.os.Message)>
<com.android.mms.data.ContactList: com.android.mms.data.ContactList getByNumbers(java.lang.String,boolean,boolean)>
<com.android.mms.transaction.RetrieveTransaction: byte[] getPdu(java.lang.String)>
<com.android.mms.transaction.SmsReceiverService: int moveOutboxMessagesToFailedBox()>
<com.android.mms.util.Recycler$MmsRecycler: android.database.Cursor getAllThreads(android.content.Context)>
<com.android.mms.util.Recycler$SmsRecycler: android.database.Cursor getAllThreads(android.content.Context)>
<com.android.nfc.handover.HandoverManager: android.nfc.NdefRecord createBluetoothOobDataRecord()>
<com.android.org.bouncycastle.asn1.ASN1Object: com.android.org.bouncycastle.asn1.ASN1Primitive toASN1Object()>
<com.android.phone.BluetoothAtPhonebook$3: android.bluetooth.AtCommandResult handleReadCommand()>
<com.android.providers.contacts.CallLogProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<com.android.providers.contacts.ContactsProvider2: int deleteData(java.lang.String,java.lang.String[],boolean)>
<com.android.providers.contacts.LegacyApiSupport: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String)>
<com.android.providers.contacts.LegacyApiSupport: java.lang.String getContactMethodType(android.net.Uri)>
<com.android.providers.downloads.DownloadInfo$Reader: com.android.providers.downloads.DownloadInfo newDownloadInfo(android.content.Context,com.android.providers.downloads.SystemFacade)>
<com.android.providers.media.MediaProvider: android.os.ParcelFileDescriptor getThumb(com.android.providers.media.MediaProvider$DatabaseHelper,android.database.sqlite.SQLiteDatabase,java.lang.String,long,android.net.Uri)>
<com.android.providers.settings.SettingsBackupAgent: void onRestoreFile(android.os.ParcelFileDescriptor,long,int,java.lang.String,java.lang.String,long,long)>
<com.android.server.ConnectivityService: android.net.LinkProperties getLinkProperties(int)>
<com.android.server.LocationManagerService: java.lang.String getBestProvider(android.location.Criteria,boolean)>
<com.android.server.NetworkManagementService: android.net.NetworkStats getNetworkStatsTethering(java.lang.String[])>
<com.android.server.location.LocationBasedCountryDetector: android.location.Country detectCountry()>
<com.android.server.location.PassiveProvider: com.android.internal.location.ProviderProperties getProperties()>
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: long getPollInterval()>
<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName,int,int)>
<com.android.systemui.statusbar.phone.PhoneStatusBar: com.android.systemui.statusbar.phone.PhoneStatusBarView makeStatusBarView()>
<com.android.vcard.VCardProperty: byte[] getByteValue()>
<com.android.vcard.VCardProperty: java.util.List getValueList()>
<com.google.android.mms.pdu.DeliveryInd: byte[] getMessageId()>
<com.google.common.collect.ForwardingMap: java.lang.Object get(java.lang.Object)>
<com.google.common.io.CharStreams$4: java.lang.Object getInput()>
<gov.nist.javax.sip.SipStackImpl: java.lang.String[] getEnabledCipherSuites()>
<java.util.UUID: long getLeastSignificantBits()>
<org.apache.harmony.xml.dom.InnerNodeImpl: void getElementsByTagName(org.apache.harmony.xml.dom.NodeListImpl,java.lang.String)>
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: java.lang.String[] getEnabledProtocols()>
<org.apache.harmony.xnet.provider.jsse.SSLInputStream: long readUint32()>
<org.apache.harmony.xnet.provider.jsse.SSLSocketFactoryImpl: java.lang.String[] getDefaultCipherSuites()>
<org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion parseProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>
<org.apache.http.protocol.DefaultedHttpContext: java.lang.Object getAttribute(java.lang.String)>
