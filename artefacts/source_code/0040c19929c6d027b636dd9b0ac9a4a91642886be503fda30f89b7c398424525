public int addToDisplay(IWindow window, int seq, WindowManager.LayoutParams attrs, int viewVisibility, int displayId, Rect outFrame, Rect outContentInsets, Rect outStableInsets, DisplayCutout.ParcelableWrapper outDisplayCutout, InputChannel outInputChannel, InsetsState outInsetsState, InsetsSourceControl[] outActiveControls){
    final SurfaceControl.Builder b = new SurfaceControl.Builder(mSurfaceSession).setParent(mRootSurface).setFormat(attrs.format).setBufferSize(getSurfaceWidth(attrs), getSurfaceHeight(attrs)).setName(attrs.getTitle().toString()).setCallsite("WindowlessWindowManager.addToDisplay");
    final SurfaceControl sc = b.build();
    if (((attrs.inputFeatures & WindowManager.LayoutParams.INPUT_FEATURE_NO_INPUT_CHANNEL) == 0)) {
        try {
            mRealWm.grantInputChannel(displayId, sc, window, mHostInputToken, attrs.flags, attrs.type, outInputChannel);
        } catch (RemoteException e) {
            Log.e(TAG, "Failed to grant input to surface: ", e);
        }
    }
    final State state = new State(sc, attrs, displayId, outInputChannel != null ? outInputChannel.getToken() : null);
    synchronized (this) {
        mStateForWindow.put(window.asBinder(), state);
    }
    return WindowManagerGlobal.ADD_OKAY | WindowManagerGlobal.ADD_FLAG_APP_VISIBLE;
}