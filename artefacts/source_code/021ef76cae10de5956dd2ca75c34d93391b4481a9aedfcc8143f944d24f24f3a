public long[] computeDelta(int uid, @NonNull long[] latestCpuTimesMs){
    synchronized (this) {
        if (!mSingleUidCpuTimesAvailable) {
            return null;
        }
        final long[] lastCpuTimesMs = mLastUidCpuTimeMs.get(uid);
        final long[] deltaTimesMs = getDeltaLocked(lastCpuTimesMs, latestCpuTimesMs);
        if (deltaTimesMs == null) {
            if (DBG)
                Slog.e(TAG, "Malformed data read for uid=" + uid + "; last=" + Arrays.toString(lastCpuTimesMs) + "; latest=" + Arrays.toString(latestCpuTimesMs));
            return null;
        }
        boolean hasNonZero = false;
        for (int i = deltaTimesMs.length - 1; i >= 0; --i) {
            if (deltaTimesMs[i] > 0) {
                hasNonZero = true;
                break;
            }
        }
        if (hasNonZero) {
            mLastUidCpuTimeMs.put(uid, latestCpuTimesMs);
            return deltaTimesMs;
        } else {
            return null;
        }
    }
}