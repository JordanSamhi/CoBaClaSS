public final Cursor query(Uri uri, String[] projection, Bundle queryArgs, CancellationSignal cancellationSignal){
    try {
        switch(mMatcher.match(uri)) {
            case MATCH_ROOTS:
                return queryRoots(projection);
            case MATCH_RECENT:
                return queryRecentDocuments(getRootId(uri), projection, queryArgs, cancellationSignal);
            case MATCH_SEARCH:
                return querySearchDocuments(getRootId(uri), projection, queryArgs);
            case MATCH_DOCUMENT:
            case MATCH_DOCUMENT_TREE:
                enforceTree(uri);
                return queryDocument(getDocumentId(uri), projection);
            case MATCH_CHILDREN:
            case MATCH_CHILDREN_TREE:
                enforceTree(uri);
                if (DocumentsContract.isManageMode(uri)) {
                    return queryChildDocumentsForManage(getDocumentId(uri), projection, getSortClause(queryArgs));
                } else {
                    return queryChildDocuments(getDocumentId(uri), projection, queryArgs);
                }
            default:
                throw new UnsupportedOperationException("Unsupported Uri " + uri);
        }
    } catch (FileNotFoundException e) {
        Log.w(TAG, "Failed during query", e);
        return null;
    }
}