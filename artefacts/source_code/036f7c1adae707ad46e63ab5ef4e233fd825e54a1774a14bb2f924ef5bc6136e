public AuthenticationResult unwrapPasswordBasedSyntheticPassword(IGateKeeperService gatekeeper, long handle, @NonNull LockscreenCredential credential, int userId, ICheckCredentialProgressCallback progressCallback){
    AuthenticationResult result = new AuthenticationResult();
    PasswordData pwd = PasswordData.fromBytes(loadState(PASSWORD_DATA_NAME, handle, userId));
    if (!credential.checkAgainstStoredType(pwd.credentialType)) {
        Slog.e(TAG, String.format("Credential type mismatch: expected %d actual %d", pwd.credentialType, credential.getType()));
        result.gkResponse = VerifyCredentialResponse.ERROR;
        return result;
    }
    byte[] pwdToken = computePasswordToken(credential, pwd);
    final byte[] applicationId;
    final long sid;
    int weaverSlot = loadWeaverSlot(handle, userId);
    if (weaverSlot != INVALID_WEAVER_SLOT) {
        if (!isWeaverAvailable()) {
            Slog.e(TAG, "No weaver service to unwrap password based SP");
            result.gkResponse = VerifyCredentialResponse.ERROR;
            return result;
        }
        result.gkResponse = weaverVerify(weaverSlot, passwordTokenToWeaverKey(pwdToken));
        if (result.gkResponse.getResponseCode() != VerifyCredentialResponse.RESPONSE_OK) {
            return result;
        }
        sid = GateKeeper.INVALID_SECURE_USER_ID;
        applicationId = transformUnderWeaverSecret(pwdToken, result.gkResponse.getPayload());
    } else {
        byte[] gkPwdToken = passwordTokenToGkInput(pwdToken);
        GateKeeperResponse response;
        try {
            response = gatekeeper.verifyChallenge(fakeUid(userId), 0L, pwd.passwordHandle, gkPwdToken);
        } catch (RemoteException e) {
            Slog.e(TAG, "gatekeeper verify failed", e);
            result.gkResponse = VerifyCredentialResponse.ERROR;
            return result;
        }
        int responseCode = response.getResponseCode();
        if (responseCode == GateKeeperResponse.RESPONSE_OK) {
            result.gkResponse = VerifyCredentialResponse.OK;
            if (response.getShouldReEnroll()) {
                GateKeeperResponse reenrollResponse;
                try {
                    reenrollResponse = gatekeeper.enroll(fakeUid(userId), pwd.passwordHandle, gkPwdToken, gkPwdToken);
                } catch (RemoteException e) {
                    Slog.w(TAG, "Fail to invoke gatekeeper.enroll", e);
                    reenrollResponse = GateKeeperResponse.ERROR;
                }
                if (reenrollResponse.getResponseCode() == GateKeeperResponse.RESPONSE_OK) {
                    pwd.passwordHandle = reenrollResponse.getPayload();
                    pwd.credentialType = credential.getType();
                    saveState(PASSWORD_DATA_NAME, pwd.toBytes(), handle, userId);
                    synchronizeFrpPassword(pwd, 0, userId);
                } else {
                    Slog.w(TAG, "Fail to re-enroll user password for user " + userId);
                }
            }
        } else if (responseCode == GateKeeperResponse.RESPONSE_RETRY) {
            result.gkResponse = new VerifyCredentialResponse(response.getTimeout());
            return result;
        } else {
            result.gkResponse = VerifyCredentialResponse.ERROR;
            return result;
        }
        sid = sidFromPasswordHandle(pwd.passwordHandle);
        applicationId = transformUnderSecdiscardable(pwdToken, loadSecdiscardable(handle, userId));
    }
    if (progressCallback != null) {
        try {
            progressCallback.onCredentialVerified();
        } catch (RemoteException e) {
            Slog.w(TAG, "progressCallback throws exception", e);
        }
    }
    result.authToken = unwrapSyntheticPasswordBlob(handle, SYNTHETIC_PASSWORD_PASSWORD_BASED, applicationId, sid, userId);
    result.gkResponse = verifyChallenge(gatekeeper, result.authToken, 0L, userId);
    if (result.authToken != null && !hasPasswordMetrics(handle, userId)) {
        savePasswordMetrics(credential, result.authToken, handle, userId);
    }
    return result;
}