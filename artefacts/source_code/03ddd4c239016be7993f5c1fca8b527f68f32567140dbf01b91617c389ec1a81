public IRestoreSession beginRestoreSession(String packageName, String transport){
    if (DEBUG) {
        Slog.v(TAG, addUserIdToLogMessage(mUserId, "beginRestoreSession: pkg=" + packageName + " transport=" + transport));
    }
    boolean needPermission = true;
    if (transport == null) {
        transport = mTransportManager.getCurrentTransportName();
        if (packageName != null) {
            PackageInfo app = null;
            try {
                app = mPackageManager.getPackageInfoAsUser(packageName, 0, mUserId);
            } catch (NameNotFoundException nnf) {
                Slog.w(TAG, addUserIdToLogMessage(mUserId, "Asked to restore nonexistent pkg " + packageName));
                throw new IllegalArgumentException("Package " + packageName + " not found");
            }
            if (app.applicationInfo.uid == Binder.getCallingUid()) {
                needPermission = false;
            }
        }
    }
    if (needPermission) {
        mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP, "beginRestoreSession");
    } else {
        if (DEBUG) {
            Slog.d(TAG, addUserIdToLogMessage(mUserId, "restoring self on current transport; no permission needed"));
        }
    }
    synchronized (this) {
        if (mActiveRestoreSession != null) {
            Slog.i(TAG, addUserIdToLogMessage(mUserId, "Restore session requested but one already active"));
            return null;
        }
        if (mBackupRunning) {
            Slog.i(TAG, addUserIdToLogMessage(mUserId, "Restore session requested but currently running backups"));
            return null;
        }
        mActiveRestoreSession = new ActiveRestoreSession(this, packageName, transport);
        mBackupHandler.sendEmptyMessageDelayed(MSG_RESTORE_SESSION_TIMEOUT, mAgentTimeoutParameters.getRestoreAgentTimeoutMillis());
    }
    return mActiveRestoreSession;
}