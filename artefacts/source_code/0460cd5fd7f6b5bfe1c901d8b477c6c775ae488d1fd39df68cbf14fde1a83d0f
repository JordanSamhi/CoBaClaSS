public static boolean isPermanentFailure(@NonNull Context context, @DataFailureCause int failCause, int subId){
    synchronized (sPermanentFailureCache) {
        Set<Integer> permanentFailureSet = sPermanentFailureCache.get(subId);
        if (permanentFailureSet == null) {
            CarrierConfigManager configManager = (CarrierConfigManager) context.getSystemService(Context.CARRIER_CONFIG_SERVICE);
            if (configManager != null) {
                PersistableBundle b = configManager.getConfigForSubId(subId);
                if (b != null) {
                    String[] permanentFailureStrings = b.getStringArray(CarrierConfigManager.KEY_CARRIER_DATA_CALL_PERMANENT_FAILURE_STRINGS);
                    if (permanentFailureStrings != null) {
                        permanentFailureSet = new HashSet<>();
                        for (Map.Entry<Integer, String> e : sFailCauseMap.entrySet()) {
                            if (ArrayUtils.contains(permanentFailureStrings, e.getValue())) {
                                permanentFailureSet.add(e.getKey());
                            }
                        }
                    }
                }
            }
            if (permanentFailureSet == null) {
                permanentFailureSet = new HashSet<Integer>() {

                    {
                        add(OPERATOR_BARRED);
                        add(MISSING_UNKNOWN_APN);
                        add(UNKNOWN_PDP_ADDRESS_TYPE);
                        add(USER_AUTHENTICATION);
                        add(ACTIVATION_REJECT_GGSN);
                        add(SERVICE_OPTION_NOT_SUPPORTED);
                        add(SERVICE_OPTION_NOT_SUBSCRIBED);
                        add(NSAPI_IN_USE);
                        add(ONLY_IPV4_ALLOWED);
                        add(ONLY_IPV6_ALLOWED);
                        add(PROTOCOL_ERRORS);
                        add(RADIO_POWER_OFF);
                        add(TETHERED_CALL_ACTIVE);
                        add(RADIO_NOT_AVAILABLE);
                        add(UNACCEPTABLE_NETWORK_PARAMETER);
                        add(SIGNAL_LOST);
                    }
                };
            }
            sPermanentFailureCache.put(subId, permanentFailureSet);
        }
        return permanentFailureSet.contains(failCause);
    }
}