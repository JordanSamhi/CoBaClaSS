public Animator onDisappear(ViewGroup sceneRoot, TransitionValues startValues, int startVisibility, TransitionValues endValues, int endVisibility){
    if ((mMode & MODE_OUT) != MODE_OUT) {
        return null;
    }
    if (startValues == null) {
        return null;
    }
    final View startView = startValues.view;
    final View endView = (endValues != null) ? endValues.view : null;
    View overlayView = null;
    View viewToKeep = null;
    boolean reusingOverlayView = false;
    View savedOverlayView = (View) startView.getTag(R.id.transition_overlay_view_tag);
    if (savedOverlayView != null) {
        overlayView = savedOverlayView;
        reusingOverlayView = true;
    } else {
        boolean needOverlayForStartView = false;
        if (endView == null || endView.getParent() == null) {
            if (endView != null) {
                overlayView = endView;
            } else {
                needOverlayForStartView = true;
            }
        } else {
            if (endVisibility == View.INVISIBLE) {
                viewToKeep = endView;
            } else {
                if (startView == endView) {
                    viewToKeep = endView;
                } else {
                    needOverlayForStartView = true;
                }
            }
        }
        if (needOverlayForStartView) {
            if (startView.getParent() == null) {
                overlayView = startView;
            } else if (startView.getParent() instanceof View) {
                View startParent = (View) startView.getParent();
                TransitionValues startParentValues = getTransitionValues(startParent, true);
                TransitionValues endParentValues = getMatchedTransitionValues(startParent, true);
                VisibilityInfo parentVisibilityInfo = getVisibilityChangeInfo(startParentValues, endParentValues);
                if (!parentVisibilityInfo.visibilityChange) {
                    overlayView = TransitionUtils.copyViewImage(sceneRoot, startView, startParent);
                } else {
                    int id = startParent.getId();
                    if (startParent.getParent() == null && id != View.NO_ID && sceneRoot.findViewById(id) != null && mCanRemoveViews) {
                        overlayView = startView;
                    } else {
                    }
                }
            }
        }
    }
    if (overlayView != null) {
        final ViewGroupOverlay overlay;
        if (!reusingOverlayView) {
            overlay = sceneRoot.getOverlay();
            int[] screenLoc = (int[]) startValues.values.get(PROPNAME_SCREEN_LOCATION);
            int screenX = screenLoc[0];
            int screenY = screenLoc[1];
            int[] loc = new int[2];
            sceneRoot.getLocationOnScreen(loc);
            overlayView.offsetLeftAndRight((screenX - loc[0]) - overlayView.getLeft());
            overlayView.offsetTopAndBottom((screenY - loc[1]) - overlayView.getTop());
            overlay.add(overlayView);
        } else {
            overlay = null;
        }
        Animator animator = onDisappear(sceneRoot, overlayView, startValues, endValues);
        if (!reusingOverlayView) {
            if (animator == null) {
                overlay.remove(overlayView);
            } else {
                startView.setTagInternal(R.id.transition_overlay_view_tag, overlayView);
                final View finalOverlayView = overlayView;
                addListener(new TransitionListenerAdapter() {

                    @Override
                    public void onTransitionPause(Transition transition) {
                        overlay.remove(finalOverlayView);
                    }

                    @Override
                    public void onTransitionResume(Transition transition) {
                        if (finalOverlayView.getParent() == null) {
                            overlay.add(finalOverlayView);
                        } else {
                            cancel();
                        }
                    }

                    @Override
                    public void onTransitionEnd(Transition transition) {
                        startView.setTagInternal(R.id.transition_overlay_view_tag, null);
                        overlay.remove(finalOverlayView);
                        transition.removeListener(this);
                    }
                });
            }
        }
        return animator;
    }
    if (viewToKeep != null) {
        int originalVisibility = viewToKeep.getVisibility();
        viewToKeep.setTransitionVisibility(View.VISIBLE);
        Animator animator = onDisappear(sceneRoot, viewToKeep, startValues, endValues);
        if (animator != null) {
            DisappearListener disappearListener = new DisappearListener(viewToKeep, endVisibility, mSuppressLayout);
            animator.addListener(disappearListener);
            animator.addPauseListener(disappearListener);
            addListener(disappearListener);
        } else {
            viewToKeep.setTransitionVisibility(originalVisibility);
        }
        return animator;
    }
    return null;
}