public static View inflatePreference(@NonNull BridgeContext bridgeContext, @NonNull XmlPullParser parser, @Nullable ViewGroup root){
    String preferencePackageName = null;
    String preferenceManagerClassName = null;
    for (int i = PREFERENCES_PKG_NAMES.length - 1; i >= 0; i--) {
        preferencePackageName = PREFERENCES_PKG_NAMES[i];
        preferenceManagerClassName = preferencePackageName + ".PreferenceManager";
        try {
            bridgeContext.getLayoutlibCallback().findClass(preferenceManagerClassName);
            break;
        } catch (ClassNotFoundException ignore) {
        }
    }
    assert preferencePackageName != null;
    String preferenceGroupClassName = preferencePackageName + ".PreferenceGroup";
    String preferenceGroupAdapterClassName = preferencePackageName + ".PreferenceGroupAdapter";
    String preferenceInflaterClassName = preferencePackageName + ".PreferenceInflater";
    try {
        LayoutlibCallback callback = bridgeContext.getLayoutlibCallback();
        Context context = getThemedContext(bridgeContext);
        Object preferenceManager = instantiateClass(callback, preferenceManagerClassName, new Class[] { Context.class }, new Object[] { context });
        Object preferenceScreen = invoke(getMethod(preferenceManager.getClass(), "createPreferenceScreen", Context.class), preferenceManager, context);
        if (preferenceScreen == null) {
            return null;
        }
        ArrayList<Object> viewCookie = new ArrayList<>();
        if (parser instanceof BridgeXmlBlockParser) {
            parser = new BridgeXmlBlockParser(parser, null, ((BridgeXmlBlockParser) parser).getFileResourceNamespace()) {

                @Override
                public Object getViewCookie() {
                    return ((BridgeXmlBlockParser) getParser()).getViewCookie();
                }

                @Override
                public int next() throws XmlPullParserException, IOException {
                    int ev = super.next();
                    if (ev == XmlPullParser.START_TAG) {
                        viewCookie.add(this.getViewCookie());
                    }
                    return ev;
                }
            };
        }
        Object inflatedPreference = createInflatedPreference(callback, preferenceGroupClassName, preferenceInflaterClassName, context, parser, preferenceScreen, preferenceManager);
        Object preferenceGroupAdapter = createPreferenceGroupAdapter(callback, preferenceGroupClassName, preferenceGroupAdapterClassName, inflatedPreference);
        LinearLayout listView = setUpPreferencesListView(bridgeContext, context, viewCookie, preferenceGroupAdapter);
        ScrollView scrollView = new ScrollView(context);
        scrollView.setLayoutParams(new ViewGroup.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
        scrollView.addView(listView);
        if (root != null) {
            root.addView(scrollView);
        }
        return scrollView;
    } catch (ReflectionException e) {
        return null;
    }
}