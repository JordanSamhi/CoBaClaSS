public static String bindSelection(@Nullable String selection, @Nullable Object... selectionArgs){
    if (selection == null)
        return null;
    if (ArrayUtils.isEmpty(selectionArgs))
        return selection;
    if (selection.indexOf('?') == -1)
        return selection;
    char before = ' ';
    char after = ' ';
    int argIndex = 0;
    final int len = selection.length();
    final StringBuilder res = new StringBuilder(len);
    for (int i = 0; i < len; ) {
        char c = selection.charAt(i++);
        if (c == '?') {
            after = ' ';
            int start = i;
            for (; i < len; i++) {
                c = selection.charAt(i);
                if (c < '0' || c > '9') {
                    after = c;
                    break;
                }
            }
            if (start != i) {
                argIndex = Integer.parseInt(selection.substring(start, i)) - 1;
            }
            final Object arg = selectionArgs[argIndex++];
            if (before != ' ' && before != '=')
                res.append(' ');
            switch(DatabaseUtils.getTypeOfObject(arg)) {
                case Cursor.FIELD_TYPE_NULL:
                    res.append("NULL");
                    break;
                case Cursor.FIELD_TYPE_INTEGER:
                    res.append(((Number) arg).longValue());
                    break;
                case Cursor.FIELD_TYPE_FLOAT:
                    res.append(((Number) arg).doubleValue());
                    break;
                case Cursor.FIELD_TYPE_BLOB:
                    throw new IllegalArgumentException("Blobs not supported");
                case Cursor.FIELD_TYPE_STRING:
                default:
                    if (arg instanceof Boolean) {
                        res.append(((Boolean) arg).booleanValue() ? 1 : 0);
                    } else {
                        res.append('\'');
                        res.append(arg.toString());
                        res.append('\'');
                    }
                    break;
            }
            if (after != ' ')
                res.append(' ');
        } else {
            res.append(c);
            before = c;
        }
    }
    return res.toString();
}