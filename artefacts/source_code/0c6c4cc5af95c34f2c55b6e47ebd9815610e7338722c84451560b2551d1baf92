public Set<ExtendedWifiNetworkSuggestion> getNetworkSuggestionsForWifiConfiguration(@NonNull WifiConfiguration wifiConfiguration, @Nullable String bssid){
    Set<ExtendedWifiNetworkSuggestion> extNetworkSuggestions = null;
    if (wifiConfiguration.isPasspoint()) {
        extNetworkSuggestions = getNetworkSuggestionsForFqdnMatch(wifiConfiguration.FQDN);
    } else {
        try {
            ScanResultMatchInfo scanResultMatchInfo = ScanResultMatchInfo.fromWifiConfiguration(wifiConfiguration);
            extNetworkSuggestions = getNetworkSuggestionsForScanResultMatchInfo(scanResultMatchInfo, bssid == null ? null : MacAddress.fromString(bssid));
        } catch (IllegalArgumentException e) {
            Log.e(TAG, "Failed to lookup network from scan result match info map", e);
        }
    }
    if (extNetworkSuggestions == null || extNetworkSuggestions.isEmpty()) {
        return null;
    }
    final String activeScorerPackage = mNetworkScoreManager.getActiveScorerPackage();
    Set<ExtendedWifiNetworkSuggestion> approvedExtNetworkSuggestions = extNetworkSuggestions.stream().filter(n -> n.perAppInfo.isApproved(activeScorerPackage)).collect(Collectors.toSet());
    if (approvedExtNetworkSuggestions.isEmpty()) {
        return null;
    }
    if (mVerboseLoggingEnabled) {
        Log.v(TAG, "getNetworkSuggestionsForWifiConfiguration Found " + approvedExtNetworkSuggestions + " for " + wifiConfiguration.SSID + wifiConfiguration.FQDN + "[" + wifiConfiguration.allowedKeyManagement + "]");
    }
    return approvedExtNetworkSuggestions;
}