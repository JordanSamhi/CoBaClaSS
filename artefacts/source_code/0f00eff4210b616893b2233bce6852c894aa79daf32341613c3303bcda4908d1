public void copyFromAllUidsCpuTimes(boolean onBattery, boolean onBatteryScreenOff){
    synchronized (BatteryStatsImpl.this) {
        if (!mConstants.TRACK_CPU_TIMES_BY_PROC_STATE) {
            return;
        }
        if (!initKernelSingleUidTimeReaderLocked()) {
            return;
        }
        final SparseArray<long[]> allUidCpuFreqTimesMs = mCpuUidFreqTimeReader.getAllUidCpuFreqTimeMs();
        if (mIsPerProcessStateCpuDataStale) {
            mKernelSingleUidTimeReader.setAllUidsCpuTimesMs(allUidCpuFreqTimesMs);
            mIsPerProcessStateCpuDataStale = false;
            mPendingUids.clear();
            return;
        }
        for (int i = allUidCpuFreqTimesMs.size() - 1; i >= 0; --i) {
            final int uid = allUidCpuFreqTimesMs.keyAt(i);
            final Uid u = getAvailableUidStatsLocked(mapUid(uid));
            if (u == null) {
                continue;
            }
            final long[] cpuTimesMs = allUidCpuFreqTimesMs.valueAt(i);
            if (cpuTimesMs == null) {
                continue;
            }
            final long[] deltaTimesMs = mKernelSingleUidTimeReader.computeDelta(uid, cpuTimesMs.clone());
            if (onBattery && deltaTimesMs != null) {
                final int procState;
                final int idx = mPendingUids.indexOfKey(uid);
                if (idx >= 0) {
                    procState = mPendingUids.valueAt(idx);
                    mPendingUids.removeAt(idx);
                } else {
                    procState = u.mProcessState;
                }
                if (procState >= 0 && procState < Uid.NUM_PROCESS_STATE) {
                    u.addProcStateTimesMs(procState, deltaTimesMs, onBattery);
                    u.addProcStateScreenOffTimesMs(procState, deltaTimesMs, onBatteryScreenOff);
                }
            }
        }
    }
}