public void convertSurfaceToStreamId(final SparseArray<OutputConfiguration> configuredOutputs){
    synchronized (mSurfacesLock) {
        if (mSurfaceConverted) {
            Log.v(TAG, "Cannot convert already converted surfaces!");
            return;
        }
        mStreamIdxArray = new int[mSurfaceSet.size()];
        mSurfaceIdxArray = new int[mSurfaceSet.size()];
        int i = 0;
        for (Surface s : mSurfaceSet) {
            boolean streamFound = false;
            for (int j = 0; j < configuredOutputs.size(); ++j) {
                int streamId = configuredOutputs.keyAt(j);
                OutputConfiguration outConfig = configuredOutputs.valueAt(j);
                int surfaceId = 0;
                for (Surface outSurface : outConfig.getSurfaces()) {
                    if (s == outSurface) {
                        streamFound = true;
                        mStreamIdxArray[i] = streamId;
                        mSurfaceIdxArray[i] = surfaceId;
                        i++;
                        break;
                    }
                    surfaceId++;
                }
                if (streamFound) {
                    break;
                }
            }
            if (!streamFound) {
                long reqSurfaceId = SurfaceUtils.getSurfaceId(s);
                for (int j = 0; j < configuredOutputs.size(); ++j) {
                    int streamId = configuredOutputs.keyAt(j);
                    OutputConfiguration outConfig = configuredOutputs.valueAt(j);
                    int surfaceId = 0;
                    for (Surface outSurface : outConfig.getSurfaces()) {
                        if (reqSurfaceId == SurfaceUtils.getSurfaceId(outSurface)) {
                            streamFound = true;
                            mStreamIdxArray[i] = streamId;
                            mSurfaceIdxArray[i] = surfaceId;
                            i++;
                            break;
                        }
                        surfaceId++;
                    }
                    if (streamFound) {
                        break;
                    }
                }
            }
            if (!streamFound) {
                mStreamIdxArray = null;
                mSurfaceIdxArray = null;
                throw new IllegalArgumentException("CaptureRequest contains unconfigured Input/Output Surface!");
            }
        }
        mSurfaceConverted = true;
    }
}