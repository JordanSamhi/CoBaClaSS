public void writeSummaryToParcel(Parcel out, boolean inclHistory){
    pullPendingStateUpdatesLocked();
    getStartClockTime();
    final long NOW_SYS = mClocks.uptimeMillis() * 1000;
    final long NOWREAL_SYS = mClocks.elapsedRealtime() * 1000;
    out.writeInt(VERSION);
    out.writeBoolean(inclHistory);
    if (inclHistory) {
        writeHistoryBuffer(out, true, true);
        mBatteryStatsHistory.writeToParcel(out);
    }
    out.writeInt(mHistoryTagPool.size());
    for (HashMap.Entry<HistoryTag, Integer> ent : mHistoryTagPool.entrySet()) {
        HistoryTag tag = ent.getKey();
        out.writeInt(ent.getValue());
        out.writeString(tag.string);
        out.writeInt(tag.uid);
    }
    out.writeInt(mStartCount);
    out.writeLong(computeUptime(NOW_SYS, STATS_SINCE_CHARGED));
    out.writeLong(computeRealtime(NOWREAL_SYS, STATS_SINCE_CHARGED));
    out.writeLong(mStartClockTime);
    out.writeString(mStartPlatformVersion);
    out.writeString(mEndPlatformVersion);
    mOnBatteryTimeBase.writeSummaryToParcel(out, NOW_SYS, NOWREAL_SYS);
    mOnBatteryScreenOffTimeBase.writeSummaryToParcel(out, NOW_SYS, NOWREAL_SYS);
    out.writeInt(mDischargeUnplugLevel);
    out.writeInt(mDischargePlugLevel);
    out.writeInt(mDischargeCurrentLevel);
    out.writeInt(mCurrentBatteryLevel);
    out.writeInt(mEstimatedBatteryCapacity);
    out.writeInt(mMinLearnedBatteryCapacity);
    out.writeInt(mMaxLearnedBatteryCapacity);
    out.writeInt(getLowDischargeAmountSinceCharge());
    out.writeInt(getHighDischargeAmountSinceCharge());
    out.writeInt(getDischargeAmountScreenOnSinceCharge());
    out.writeInt(getDischargeAmountScreenOffSinceCharge());
    out.writeInt(getDischargeAmountScreenDozeSinceCharge());
    mDischargeStepTracker.writeToParcel(out);
    mChargeStepTracker.writeToParcel(out);
    mDailyDischargeStepTracker.writeToParcel(out);
    mDailyChargeStepTracker.writeToParcel(out);
    mDischargeCounter.writeSummaryFromParcelLocked(out);
    mDischargeScreenOffCounter.writeSummaryFromParcelLocked(out);
    mDischargeScreenDozeCounter.writeSummaryFromParcelLocked(out);
    mDischargeLightDozeCounter.writeSummaryFromParcelLocked(out);
    mDischargeDeepDozeCounter.writeSummaryFromParcelLocked(out);
    if (mDailyPackageChanges != null) {
        final int NPKG = mDailyPackageChanges.size();
        out.writeInt(NPKG);
        for (int i = 0; i < NPKG; i++) {
            PackageChange pc = mDailyPackageChanges.get(i);
            out.writeString(pc.mPackageName);
            out.writeInt(pc.mUpdate ? 1 : 0);
            out.writeLong(pc.mVersionCode);
        }
    } else {
        out.writeInt(0);
    }
    out.writeLong(mDailyStartTime);
    out.writeLong(mNextMinDailyDeadline);
    out.writeLong(mNextMaxDailyDeadline);
    mScreenOnTimer.writeSummaryFromParcelLocked(out, NOWREAL_SYS);
    mScreenDozeTimer.writeSummaryFromParcelLocked(out, NOWREAL_SYS);
    for (int i = 0; i < NUM_SCREEN_BRIGHTNESS_BINS; i++) {
        mScreenBrightnessTimer[i].writeSummaryFromParcelLocked(out, NOWREAL_SYS);
    }
    mInteractiveTimer.writeSummaryFromParcelLocked(out, NOWREAL_SYS);
    mPowerSaveModeEnabledTimer.writeSummaryFromParcelLocked(out, NOWREAL_SYS);
    out.writeLong(mLongestLightIdleTime);
    out.writeLong(mLongestFullIdleTime);
    mDeviceIdleModeLightTimer.writeSummaryFromParcelLocked(out, NOWREAL_SYS);
    mDeviceIdleModeFullTimer.writeSummaryFromParcelLocked(out, NOWREAL_SYS);
    mDeviceLightIdlingTimer.writeSummaryFromParcelLocked(out, NOWREAL_SYS);
    mDeviceIdlingTimer.writeSummaryFromParcelLocked(out, NOWREAL_SYS);
    mPhoneOnTimer.writeSummaryFromParcelLocked(out, NOWREAL_SYS);
    for (int i = 0; i < CellSignalStrength.getNumSignalStrengthLevels(); i++) {
        mPhoneSignalStrengthsTimer[i].writeSummaryFromParcelLocked(out, NOWREAL_SYS);
    }
    mPhoneSignalScanningTimer.writeSummaryFromParcelLocked(out, NOWREAL_SYS);
    for (int i = 0; i < NUM_DATA_CONNECTION_TYPES; i++) {
        mPhoneDataConnectionsTimer[i].writeSummaryFromParcelLocked(out, NOWREAL_SYS);
    }
    for (int i = 0; i < NUM_NETWORK_ACTIVITY_TYPES; i++) {
        mNetworkByteActivityCounters[i].writeSummaryFromParcelLocked(out);
        mNetworkPacketActivityCounters[i].writeSummaryFromParcelLocked(out);
    }
    mMobileRadioActiveTimer.writeSummaryFromParcelLocked(out, NOWREAL_SYS);
    mMobileRadioActivePerAppTimer.writeSummaryFromParcelLocked(out, NOWREAL_SYS);
    mMobileRadioActiveAdjustedTime.writeSummaryFromParcelLocked(out);
    mMobileRadioActiveUnknownTime.writeSummaryFromParcelLocked(out);
    mMobileRadioActiveUnknownCount.writeSummaryFromParcelLocked(out);
    mWifiMulticastWakelockTimer.writeSummaryFromParcelLocked(out, NOWREAL_SYS);
    mWifiOnTimer.writeSummaryFromParcelLocked(out, NOWREAL_SYS);
    mGlobalWifiRunningTimer.writeSummaryFromParcelLocked(out, NOWREAL_SYS);
    for (int i = 0; i < NUM_WIFI_STATES; i++) {
        mWifiStateTimer[i].writeSummaryFromParcelLocked(out, NOWREAL_SYS);
    }
    for (int i = 0; i < NUM_WIFI_SUPPL_STATES; i++) {
        mWifiSupplStateTimer[i].writeSummaryFromParcelLocked(out, NOWREAL_SYS);
    }
    for (int i = 0; i < NUM_WIFI_SIGNAL_STRENGTH_BINS; i++) {
        mWifiSignalStrengthsTimer[i].writeSummaryFromParcelLocked(out, NOWREAL_SYS);
    }
    mWifiActiveTimer.writeSummaryFromParcelLocked(out, NOWREAL_SYS);
    mWifiActivity.writeSummaryToParcel(out);
    for (int i = 0; i < GnssMetrics.NUM_GPS_SIGNAL_QUALITY_LEVELS; i++) {
        mGpsSignalQualityTimer[i].writeSummaryFromParcelLocked(out, NOWREAL_SYS);
    }
    mBluetoothActivity.writeSummaryToParcel(out);
    mModemActivity.writeSummaryToParcel(out);
    out.writeInt(mHasWifiReporting ? 1 : 0);
    out.writeInt(mHasBluetoothReporting ? 1 : 0);
    out.writeInt(mHasModemReporting ? 1 : 0);
    out.writeInt(mNumConnectivityChange);
    mFlashlightOnTimer.writeSummaryFromParcelLocked(out, NOWREAL_SYS);
    mCameraOnTimer.writeSummaryFromParcelLocked(out, NOWREAL_SYS);
    mBluetoothScanTimer.writeSummaryFromParcelLocked(out, NOWREAL_SYS);
    out.writeInt(mRpmStats.size());
    for (Map.Entry<String, SamplingTimer> ent : mRpmStats.entrySet()) {
        Timer rpmt = ent.getValue();
        if (rpmt != null) {
            out.writeInt(1);
            out.writeString(ent.getKey());
            rpmt.writeSummaryFromParcelLocked(out, NOWREAL_SYS);
        } else {
            out.writeInt(0);
        }
    }
    out.writeInt(mScreenOffRpmStats.size());
    for (Map.Entry<String, SamplingTimer> ent : mScreenOffRpmStats.entrySet()) {
        Timer rpmt = ent.getValue();
        if (rpmt != null) {
            out.writeInt(1);
            out.writeString(ent.getKey());
            rpmt.writeSummaryFromParcelLocked(out, NOWREAL_SYS);
        } else {
            out.writeInt(0);
        }
    }
    out.writeInt(mKernelWakelockStats.size());
    for (Map.Entry<String, SamplingTimer> ent : mKernelWakelockStats.entrySet()) {
        Timer kwlt = ent.getValue();
        if (kwlt != null) {
            out.writeInt(1);
            out.writeString(ent.getKey());
            kwlt.writeSummaryFromParcelLocked(out, NOWREAL_SYS);
        } else {
            out.writeInt(0);
        }
    }
    out.writeInt(mWakeupReasonStats.size());
    for (Map.Entry<String, SamplingTimer> ent : mWakeupReasonStats.entrySet()) {
        SamplingTimer timer = ent.getValue();
        if (timer != null) {
            out.writeInt(1);
            out.writeString(ent.getKey());
            timer.writeSummaryFromParcelLocked(out, NOWREAL_SYS);
        } else {
            out.writeInt(0);
        }
    }
    out.writeInt(mKernelMemoryStats.size());
    for (int i = 0; i < mKernelMemoryStats.size(); i++) {
        Timer kmt = mKernelMemoryStats.valueAt(i);
        if (kmt != null) {
            out.writeInt(1);
            out.writeLong(mKernelMemoryStats.keyAt(i));
            kmt.writeSummaryFromParcelLocked(out, NOWREAL_SYS);
        } else {
            out.writeInt(0);
        }
    }
    final int NU = mUidStats.size();
    out.writeInt(NU);
    for (int iu = 0; iu < NU; iu++) {
        out.writeInt(mUidStats.keyAt(iu));
        Uid u = mUidStats.valueAt(iu);
        u.mOnBatteryBackgroundTimeBase.writeSummaryToParcel(out, NOW_SYS, NOWREAL_SYS);
        u.mOnBatteryScreenOffBackgroundTimeBase.writeSummaryToParcel(out, NOW_SYS, NOWREAL_SYS);
        if (u.mWifiRunningTimer != null) {
            out.writeInt(1);
            u.mWifiRunningTimer.writeSummaryFromParcelLocked(out, NOWREAL_SYS);
        } else {
            out.writeInt(0);
        }
        if (u.mFullWifiLockTimer != null) {
            out.writeInt(1);
            u.mFullWifiLockTimer.writeSummaryFromParcelLocked(out, NOWREAL_SYS);
        } else {
            out.writeInt(0);
        }
        if (u.mWifiScanTimer != null) {
            out.writeInt(1);
            u.mWifiScanTimer.writeSummaryFromParcelLocked(out, NOWREAL_SYS);
        } else {
            out.writeInt(0);
        }
        for (int i = 0; i < Uid.NUM_WIFI_BATCHED_SCAN_BINS; i++) {
            if (u.mWifiBatchedScanTimer[i] != null) {
                out.writeInt(1);
                u.mWifiBatchedScanTimer[i].writeSummaryFromParcelLocked(out, NOWREAL_SYS);
            } else {
                out.writeInt(0);
            }
        }
        if (u.mWifiMulticastTimer != null) {
            out.writeInt(1);
            u.mWifiMulticastTimer.writeSummaryFromParcelLocked(out, NOWREAL_SYS);
        } else {
            out.writeInt(0);
        }
        if (u.mAudioTurnedOnTimer != null) {
            out.writeInt(1);
            u.mAudioTurnedOnTimer.writeSummaryFromParcelLocked(out, NOWREAL_SYS);
        } else {
            out.writeInt(0);
        }
        if (u.mVideoTurnedOnTimer != null) {
            out.writeInt(1);
            u.mVideoTurnedOnTimer.writeSummaryFromParcelLocked(out, NOWREAL_SYS);
        } else {
            out.writeInt(0);
        }
        if (u.mFlashlightTurnedOnTimer != null) {
            out.writeInt(1);
            u.mFlashlightTurnedOnTimer.writeSummaryFromParcelLocked(out, NOWREAL_SYS);
        } else {
            out.writeInt(0);
        }
        if (u.mCameraTurnedOnTimer != null) {
            out.writeInt(1);
            u.mCameraTurnedOnTimer.writeSummaryFromParcelLocked(out, NOWREAL_SYS);
        } else {
            out.writeInt(0);
        }
        if (u.mForegroundActivityTimer != null) {
            out.writeInt(1);
            u.mForegroundActivityTimer.writeSummaryFromParcelLocked(out, NOWREAL_SYS);
        } else {
            out.writeInt(0);
        }
        if (u.mForegroundServiceTimer != null) {
            out.writeInt(1);
            u.mForegroundServiceTimer.writeSummaryFromParcelLocked(out, NOWREAL_SYS);
        } else {
            out.writeInt(0);
        }
        if (u.mAggregatedPartialWakelockTimer != null) {
            out.writeInt(1);
            u.mAggregatedPartialWakelockTimer.writeSummaryFromParcelLocked(out, NOWREAL_SYS);
        } else {
            out.writeInt(0);
        }
        if (u.mBluetoothScanTimer != null) {
            out.writeInt(1);
            u.mBluetoothScanTimer.writeSummaryFromParcelLocked(out, NOWREAL_SYS);
        } else {
            out.writeInt(0);
        }
        if (u.mBluetoothUnoptimizedScanTimer != null) {
            out.writeInt(1);
            u.mBluetoothUnoptimizedScanTimer.writeSummaryFromParcelLocked(out, NOWREAL_SYS);
        } else {
            out.writeInt(0);
        }
        if (u.mBluetoothScanResultCounter != null) {
            out.writeInt(1);
            u.mBluetoothScanResultCounter.writeSummaryFromParcelLocked(out);
        } else {
            out.writeInt(0);
        }
        if (u.mBluetoothScanResultBgCounter != null) {
            out.writeInt(1);
            u.mBluetoothScanResultBgCounter.writeSummaryFromParcelLocked(out);
        } else {
            out.writeInt(0);
        }
        for (int i = 0; i < Uid.NUM_PROCESS_STATE; i++) {
            if (u.mProcessStateTimer[i] != null) {
                out.writeInt(1);
                u.mProcessStateTimer[i].writeSummaryFromParcelLocked(out, NOWREAL_SYS);
            } else {
                out.writeInt(0);
            }
        }
        if (u.mVibratorOnTimer != null) {
            out.writeInt(1);
            u.mVibratorOnTimer.writeSummaryFromParcelLocked(out, NOWREAL_SYS);
        } else {
            out.writeInt(0);
        }
        if (u.mUserActivityCounters == null) {
            out.writeInt(0);
        } else {
            out.writeInt(1);
            for (int i = 0; i < Uid.NUM_USER_ACTIVITY_TYPES; i++) {
                u.mUserActivityCounters[i].writeSummaryFromParcelLocked(out);
            }
        }
        if (u.mNetworkByteActivityCounters == null) {
            out.writeInt(0);
        } else {
            out.writeInt(1);
            for (int i = 0; i < NUM_NETWORK_ACTIVITY_TYPES; i++) {
                u.mNetworkByteActivityCounters[i].writeSummaryFromParcelLocked(out);
                u.mNetworkPacketActivityCounters[i].writeSummaryFromParcelLocked(out);
            }
            u.mMobileRadioActiveTime.writeSummaryFromParcelLocked(out);
            u.mMobileRadioActiveCount.writeSummaryFromParcelLocked(out);
        }
        u.mUserCpuTime.writeSummaryFromParcelLocked(out);
        u.mSystemCpuTime.writeSummaryFromParcelLocked(out);
        if (u.mCpuClusterSpeedTimesUs != null) {
            out.writeInt(1);
            out.writeInt(u.mCpuClusterSpeedTimesUs.length);
            for (LongSamplingCounter[] cpuSpeeds : u.mCpuClusterSpeedTimesUs) {
                if (cpuSpeeds != null) {
                    out.writeInt(1);
                    out.writeInt(cpuSpeeds.length);
                    for (LongSamplingCounter c : cpuSpeeds) {
                        if (c != null) {
                            out.writeInt(1);
                            c.writeSummaryFromParcelLocked(out);
                        } else {
                            out.writeInt(0);
                        }
                    }
                } else {
                    out.writeInt(0);
                }
            }
        } else {
            out.writeInt(0);
        }
        LongSamplingCounterArray.writeSummaryToParcelLocked(out, u.mCpuFreqTimeMs);
        LongSamplingCounterArray.writeSummaryToParcelLocked(out, u.mScreenOffCpuFreqTimeMs);
        u.mCpuActiveTimeMs.writeSummaryFromParcelLocked(out);
        u.mCpuClusterTimesMs.writeSummaryToParcelLocked(out);
        if (u.mProcStateTimeMs != null) {
            out.writeInt(u.mProcStateTimeMs.length);
            for (LongSamplingCounterArray counters : u.mProcStateTimeMs) {
                LongSamplingCounterArray.writeSummaryToParcelLocked(out, counters);
            }
        } else {
            out.writeInt(0);
        }
        if (u.mProcStateScreenOffTimeMs != null) {
            out.writeInt(u.mProcStateScreenOffTimeMs.length);
            for (LongSamplingCounterArray counters : u.mProcStateScreenOffTimeMs) {
                LongSamplingCounterArray.writeSummaryToParcelLocked(out, counters);
            }
        } else {
            out.writeInt(0);
        }
        if (u.mMobileRadioApWakeupCount != null) {
            out.writeInt(1);
            u.mMobileRadioApWakeupCount.writeSummaryFromParcelLocked(out);
        } else {
            out.writeInt(0);
        }
        if (u.mWifiRadioApWakeupCount != null) {
            out.writeInt(1);
            u.mWifiRadioApWakeupCount.writeSummaryFromParcelLocked(out);
        } else {
            out.writeInt(0);
        }
        final ArrayMap<String, Uid.Wakelock> wakeStats = u.mWakelockStats.getMap();
        int NW = wakeStats.size();
        out.writeInt(NW);
        for (int iw = 0; iw < NW; iw++) {
            out.writeString(wakeStats.keyAt(iw));
            Uid.Wakelock wl = wakeStats.valueAt(iw);
            if (wl.mTimerFull != null) {
                out.writeInt(1);
                wl.mTimerFull.writeSummaryFromParcelLocked(out, NOWREAL_SYS);
            } else {
                out.writeInt(0);
            }
            if (wl.mTimerPartial != null) {
                out.writeInt(1);
                wl.mTimerPartial.writeSummaryFromParcelLocked(out, NOWREAL_SYS);
            } else {
                out.writeInt(0);
            }
            if (wl.mTimerWindow != null) {
                out.writeInt(1);
                wl.mTimerWindow.writeSummaryFromParcelLocked(out, NOWREAL_SYS);
            } else {
                out.writeInt(0);
            }
            if (wl.mTimerDraw != null) {
                out.writeInt(1);
                wl.mTimerDraw.writeSummaryFromParcelLocked(out, NOWREAL_SYS);
            } else {
                out.writeInt(0);
            }
        }
        final ArrayMap<String, DualTimer> syncStats = u.mSyncStats.getMap();
        int NS = syncStats.size();
        out.writeInt(NS);
        for (int is = 0; is < NS; is++) {
            out.writeString(syncStats.keyAt(is));
            syncStats.valueAt(is).writeSummaryFromParcelLocked(out, NOWREAL_SYS);
        }
        final ArrayMap<String, DualTimer> jobStats = u.mJobStats.getMap();
        int NJ = jobStats.size();
        out.writeInt(NJ);
        for (int ij = 0; ij < NJ; ij++) {
            out.writeString(jobStats.keyAt(ij));
            jobStats.valueAt(ij).writeSummaryFromParcelLocked(out, NOWREAL_SYS);
        }
        u.writeJobCompletionsToParcelLocked(out);
        u.mJobsDeferredEventCount.writeSummaryFromParcelLocked(out);
        u.mJobsDeferredCount.writeSummaryFromParcelLocked(out);
        u.mJobsFreshnessTimeMs.writeSummaryFromParcelLocked(out);
        for (int i = 0; i < JOB_FRESHNESS_BUCKETS.length; i++) {
            if (u.mJobsFreshnessBuckets[i] != null) {
                out.writeInt(1);
                u.mJobsFreshnessBuckets[i].writeSummaryFromParcelLocked(out);
            } else {
                out.writeInt(0);
            }
        }
        int NSE = u.mSensorStats.size();
        out.writeInt(NSE);
        for (int ise = 0; ise < NSE; ise++) {
            out.writeInt(u.mSensorStats.keyAt(ise));
            Uid.Sensor se = u.mSensorStats.valueAt(ise);
            if (se.mTimer != null) {
                out.writeInt(1);
                se.mTimer.writeSummaryFromParcelLocked(out, NOWREAL_SYS);
            } else {
                out.writeInt(0);
            }
        }
        int NP = u.mProcessStats.size();
        out.writeInt(NP);
        for (int ip = 0; ip < NP; ip++) {
            out.writeString(u.mProcessStats.keyAt(ip));
            Uid.Proc ps = u.mProcessStats.valueAt(ip);
            out.writeLong(ps.mUserTime);
            out.writeLong(ps.mSystemTime);
            out.writeLong(ps.mForegroundTime);
            out.writeInt(ps.mStarts);
            out.writeInt(ps.mNumCrashes);
            out.writeInt(ps.mNumAnrs);
            ps.writeExcessivePowerToParcelLocked(out);
        }
        NP = u.mPackageStats.size();
        out.writeInt(NP);
        if (NP > 0) {
            for (Map.Entry<String, BatteryStatsImpl.Uid.Pkg> ent : u.mPackageStats.entrySet()) {
                out.writeString(ent.getKey());
                Uid.Pkg ps = ent.getValue();
                final int NWA = ps.mWakeupAlarms.size();
                out.writeInt(NWA);
                for (int iwa = 0; iwa < NWA; iwa++) {
                    out.writeString(ps.mWakeupAlarms.keyAt(iwa));
                    ps.mWakeupAlarms.valueAt(iwa).writeSummaryFromParcelLocked(out);
                }
                NS = ps.mServiceStats.size();
                out.writeInt(NS);
                for (int is = 0; is < NS; is++) {
                    out.writeString(ps.mServiceStats.keyAt(is));
                    BatteryStatsImpl.Uid.Pkg.Serv ss = ps.mServiceStats.valueAt(is);
                    long time = ss.getStartTimeToNowLocked(mOnBatteryTimeBase.getUptime(NOW_SYS));
                    out.writeLong(time);
                    out.writeInt(ss.mStarts);
                    out.writeInt(ss.mLaunches);
                }
            }
        }
    }
}