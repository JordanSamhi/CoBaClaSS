public void startAdvertising(AdvertiseSettings settings, AdvertiseData advertiseData, AdvertiseData scanResponse, final AdvertiseCallback callback){
    synchronized (mLegacyAdvertisers) {
        BluetoothLeUtils.checkAdapterStateOn(mBluetoothAdapter);
        if (callback == null) {
            throw new IllegalArgumentException("callback cannot be null");
        }
        boolean isConnectable = settings.isConnectable();
        if (totalBytes(advertiseData, isConnectable) > MAX_LEGACY_ADVERTISING_DATA_BYTES || totalBytes(scanResponse, false) > MAX_LEGACY_ADVERTISING_DATA_BYTES) {
            postStartFailure(callback, AdvertiseCallback.ADVERTISE_FAILED_DATA_TOO_LARGE);
            return;
        }
        if (mLegacyAdvertisers.containsKey(callback)) {
            postStartFailure(callback, AdvertiseCallback.ADVERTISE_FAILED_ALREADY_STARTED);
            return;
        }
        AdvertisingSetParameters.Builder parameters = new AdvertisingSetParameters.Builder();
        parameters.setLegacyMode(true);
        parameters.setConnectable(isConnectable);
        parameters.setScannable(true);
        if (settings.getMode() == AdvertiseSettings.ADVERTISE_MODE_LOW_POWER) {
            parameters.setInterval(1600);
        } else if (settings.getMode() == AdvertiseSettings.ADVERTISE_MODE_BALANCED) {
            parameters.setInterval(400);
        } else if (settings.getMode() == AdvertiseSettings.ADVERTISE_MODE_LOW_LATENCY) {
            parameters.setInterval(160);
        }
        if (settings.getTxPowerLevel() == AdvertiseSettings.ADVERTISE_TX_POWER_ULTRA_LOW) {
            parameters.setTxPowerLevel(-21);
        } else if (settings.getTxPowerLevel() == AdvertiseSettings.ADVERTISE_TX_POWER_LOW) {
            parameters.setTxPowerLevel(-15);
        } else if (settings.getTxPowerLevel() == AdvertiseSettings.ADVERTISE_TX_POWER_MEDIUM) {
            parameters.setTxPowerLevel(-7);
        } else if (settings.getTxPowerLevel() == AdvertiseSettings.ADVERTISE_TX_POWER_HIGH) {
            parameters.setTxPowerLevel(1);
        }
        int duration = 0;
        int timeoutMillis = settings.getTimeout();
        if (timeoutMillis > 0) {
            duration = (timeoutMillis < 10) ? 1 : timeoutMillis / 10;
        }
        AdvertisingSetCallback wrapped = wrapOldCallback(callback, settings);
        mLegacyAdvertisers.put(callback, wrapped);
        startAdvertisingSet(parameters.build(), advertiseData, scanResponse, null, null, duration, 0, wrapped);
    }
}