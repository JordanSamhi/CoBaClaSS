public void setBackupEnabled(boolean enable){
    mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP, "setBackupEnabled");
    Slog.i(TAG, addUserIdToLogMessage(mUserId, "Backup enabled => " + enable));
    long oldId = Binder.clearCallingIdentity();
    try {
        boolean wasEnabled = mEnabled;
        synchronized (this) {
            UserBackupManagerFilePersistedSettings.writeBackupEnableState(mUserId, enable);
            mEnabled = enable;
        }
        synchronized (mQueueLock) {
            if (enable && !wasEnabled && mSetupComplete) {
                KeyValueBackupJob.schedule(mUserId, mContext, mConstants);
                scheduleNextFullBackupJob(0);
            } else if (!enable) {
                if (MORE_DEBUG) {
                    Slog.i(TAG, addUserIdToLogMessage(mUserId, "Opting out of backup"));
                }
                KeyValueBackupJob.cancel(mUserId, mContext);
                if (wasEnabled && mSetupComplete) {
                    List<String> transportNames = new ArrayList<>();
                    List<String> transportDirNames = new ArrayList<>();
                    mTransportManager.forEachRegisteredTransport(name -> {
                        final String dirName;
                        try {
                            dirName = mTransportManager.getTransportDirName(name);
                        } catch (TransportNotRegisteredException e) {
                            Slog.e(TAG, addUserIdToLogMessage(mUserId, "Unexpected unregistered transport"), e);
                            return;
                        }
                        transportNames.add(name);
                        transportDirNames.add(dirName);
                    });
                    for (int i = 0; i < transportNames.size(); i++) {
                        recordInitPending(true, transportNames.get(i), transportDirNames.get(i));
                    }
                    mAlarmManager.set(AlarmManager.RTC_WAKEUP, System.currentTimeMillis(), mRunInitIntent);
                }
            }
        }
    } finally {
        Binder.restoreCallingIdentity(oldId);
    }
}