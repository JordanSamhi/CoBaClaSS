public void install(final String packageName, ParcelFileDescriptor parcelFileDescriptor, final InstallListener callback){
    try {
        PackageInstaller.Session session = null;
        PackageInstaller.SessionInfo sessionInfo = mSessionInfoMap.get(packageName);
        if (sessionInfo != null) {
            session = getSession(packageName);
        }
        if (session == null) {
            try {
                innerCreateSession(packageName);
            } catch (IOException ioe) {
                Log.e(TAG, "Can't create session for " + packageName + ": " + ioe.getMessage());
                callback.installFailed(InstallerConstants.ERROR_INSTALL_CREATE_SESSION, "Could not create session");
                mSessionInfoMap.remove(packageName);
                return;
            }
            sessionInfo = mSessionInfoMap.get(packageName);
            try {
                session = mPackageInstaller.openSession(sessionInfo.getSessionId());
                mOpenSessionMap.put(packageName, session);
            } catch (SecurityException se) {
                Log.e(TAG, "Can't open session for " + packageName + ": " + se.getMessage());
                callback.installFailed(InstallerConstants.ERROR_INSTALL_OPEN_SESSION, "Can't open session");
                mSessionInfoMap.remove(packageName);
                return;
            }
        }
        InstallTask task = new InstallTask(mContext, packageName, parcelFileDescriptor, callback, session, getCommitCallback(packageName, sessionInfo.getSessionId(), callback));
        task.execute();
        if (task.isError()) {
            cancelSession(sessionInfo.getSessionId(), packageName);
        }
    } catch (Exception e) {
        Log.e(TAG, "Unexpected exception while installing: " + packageName + ": " + e.getMessage());
        callback.installFailed(InstallerConstants.ERROR_INSTALL_SESSION_EXCEPTION, "Unexpected exception while installing " + packageName);
    }
}