public void testRecentsAnimation() throws Throwable{
    final ManualBenchmarkState state = mPerfStatusReporter.getBenchmarkState();
    final IActivityTaskManager atm = ActivityTaskManager.getService();
    final ArrayList<Pair<String, Boolean>> finishCases = new ArrayList<>();
    finishCases.add(new Pair<>("finishMoveToTop", true));
    finishCases.add(new Pair<>("finishCancel", false));
    final Semaphore recentsSemaphore = new Semaphore(1);
    final int testActivityTaskId = mActivityRule.getActivity().getTaskId();
    final IRecentsAnimationRunner.Stub anim = new IRecentsAnimationRunner.Stub() {

        int mIteration;

        @Override
        public void onAnimationStart(IRecentsAnimationController controller, RemoteAnimationTarget[] apps, RemoteAnimationTarget[] wallpapers, Rect homeContentInsets, Rect minimizedHomeBounds) throws RemoteException {
            final Pair<String, Boolean> finishCase = finishCases.get(mIteration++ % 2);
            final boolean moveRecentsToTop = finishCase.second;
            makeInterval();
            long startTime = SystemClock.elapsedRealtimeNanos();
            controller.finish(moveRecentsToTop, false);
            final long elapsedTimeNsOfFinish = SystemClock.elapsedRealtimeNanos() - startTime;
            mMeasuredTimeNs += elapsedTimeNsOfFinish;
            state.addExtraResult(finishCase.first, elapsedTimeNsOfFinish);
            if (moveRecentsToTop) {
                mActivityRule.waitForIdleSync(Stage.STOPPED);
                startTime = SystemClock.elapsedRealtimeNanos();
                atm.startActivityFromRecents(testActivityTaskId, null);
                final long elapsedTimeNs = SystemClock.elapsedRealtimeNanos() - startTime;
                mMeasuredTimeNs += elapsedTimeNs;
                state.addExtraResult("startFromRecents", elapsedTimeNs);
                mActivityRule.waitForIdleSync(Stage.RESUMED);
            }
            makeInterval();
            recentsSemaphore.release();
        }

        @Override
        public void onAnimationCanceled(TaskSnapshot taskSnapshot) throws RemoteException {
            Assume.assumeNoException(new AssertionError("onAnimationCanceled should not be called"));
        }

        @Override
        public void onTaskAppeared(RemoteAnimationTarget app) throws RemoteException {
        }
    };
    recentsSemaphore.tryAcquire();
    while (state.keepRunning(mMeasuredTimeNs)) {
        mMeasuredTimeNs = 0;
        final long startTime = SystemClock.elapsedRealtimeNanos();
        atm.startRecentsActivity(sRecentsIntent, null, anim);
        final long elapsedTimeNsOfStart = SystemClock.elapsedRealtimeNanos() - startTime;
        mMeasuredTimeNs += elapsedTimeNsOfStart;
        state.addExtraResult("start", elapsedTimeNsOfStart);
        Assume.assumeTrue(recentsSemaphore.tryAcquire(TIME_5_S_IN_NS, TimeUnit.NANOSECONDS));
    }
}