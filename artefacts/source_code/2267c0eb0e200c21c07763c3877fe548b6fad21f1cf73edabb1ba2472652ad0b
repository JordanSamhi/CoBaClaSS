public int add(List<WifiNetworkSuggestion> networkSuggestions, int uid, String packageName, @Nullable String featureId){
    if (!mUserDataLoaded) {
        Log.e(TAG, "Add Network suggestion before boot complete is not allowed.");
        return WifiManager.STATUS_NETWORK_SUGGESTIONS_ERROR_INTERNAL;
    }
    if (networkSuggestions == null || networkSuggestions.isEmpty()) {
        Log.w(TAG, "Empty list of network suggestions for " + packageName + ". Ignoring");
        return WifiManager.STATUS_NETWORK_SUGGESTIONS_SUCCESS;
    }
    if (mVerboseLoggingEnabled) {
        Log.v(TAG, "Adding " + networkSuggestions.size() + " networks from " + packageName);
    }
    if (!validateNetworkSuggestions(networkSuggestions)) {
        Log.e(TAG, "Invalid suggestion add from app: " + packageName);
        return WifiManager.STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_INVALID;
    }
    if (!validateCarrierNetworkSuggestions(networkSuggestions, uid, packageName)) {
        Log.e(TAG, "bad wifi suggestion from app: " + packageName);
        return WifiManager.STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_NOT_ALLOWED;
    }
    int carrierId = mWifiCarrierInfoManager.getCarrierIdForPackageWithCarrierPrivileges(packageName);
    final String activeScorerPackage = mNetworkScoreManager.getActiveScorerPackage();
    PerAppInfo perAppInfo = mActiveNetworkSuggestionsPerApp.get(packageName);
    if (perAppInfo == null) {
        perAppInfo = new PerAppInfo(uid, packageName, featureId);
        mActiveNetworkSuggestionsPerApp.put(packageName, perAppInfo);
        if (mWifiPermissionsUtil.checkNetworkCarrierProvisioningPermission(uid)) {
            Log.i(TAG, "Setting the carrier provisioning app approved");
            perAppInfo.hasUserApproved = true;
            mWifiMetrics.incrementNetworkSuggestionApiUsageNumOfAppInType(APP_TYPE_NETWORK_PROVISIONING);
        } else if (carrierId != TelephonyManager.UNKNOWN_CARRIER_ID) {
            Log.i(TAG, "Setting the carrier privileged app approved");
            perAppInfo.carrierId = carrierId;
            mWifiMetrics.incrementNetworkSuggestionApiUsageNumOfAppInType(APP_TYPE_CARRIER_PRIVILEGED);
        } else if (perAppInfo.packageName.equals(activeScorerPackage)) {
            Log.i(TAG, "Exempting the active scorer app");
            mWifiMetrics.incrementNetworkSuggestionApiUsageNumOfAppInType(APP_TYPE_NON_PRIVILEGED);
        } else {
            if (isSuggestionFromForegroundApp(packageName)) {
                sendUserApprovalDialog(packageName, uid);
            } else {
                sendUserApprovalNotificationIfNotApproved(packageName, uid);
            }
            mWifiMetrics.incrementNetworkSuggestionApiUsageNumOfAppInType(APP_TYPE_NON_PRIVILEGED);
        }
    }
    perAppInfo.setUid(uid);
    Set<ExtendedWifiNetworkSuggestion> extNetworkSuggestions = convertToExtendedWnsSet(networkSuggestions, perAppInfo);
    boolean isLowRamDevice = mActivityManager.isLowRamDevice();
    int networkSuggestionsMaxPerApp = WifiManager.getMaxNumberOfNetworkSuggestionsPerApp(isLowRamDevice);
    if (perAppInfo.extNetworkSuggestions.size() + extNetworkSuggestions.size() > networkSuggestionsMaxPerApp) {
        Set<ExtendedWifiNetworkSuggestion> savedNetworkSuggestions = new HashSet<>(perAppInfo.extNetworkSuggestions);
        savedNetworkSuggestions.addAll(extNetworkSuggestions);
        if (savedNetworkSuggestions.size() > networkSuggestionsMaxPerApp) {
            Log.e(TAG, "Failed to add network suggestions for " + packageName + ". Exceeds max per app, current list size: " + perAppInfo.extNetworkSuggestions.size() + ", new list size: " + extNetworkSuggestions.size());
            return WifiManager.STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_EXCEEDS_MAX_PER_APP;
        }
    }
    if (perAppInfo.extNetworkSuggestions.isEmpty()) {
        startTrackingAppOpsChange(packageName, uid);
    }
    for (ExtendedWifiNetworkSuggestion ewns : extNetworkSuggestions) {
        if (carrierId != TelephonyManager.UNKNOWN_CARRIER_ID) {
            ewns.setCarrierId(carrierId);
        }
        if (isSimBasedSuggestion(ewns)) {
            int subId = mWifiCarrierInfoManager.getMatchingSubId(getCarrierIdFromSuggestion(ewns));
            if (!(mWifiCarrierInfoManager.requiresImsiEncryption(subId) || mWifiCarrierInfoManager.hasUserApprovedImsiPrivacyExemptionForCarrier(getCarrierIdFromSuggestion(ewns)))) {
                ewns.isAutojoinEnabled = false;
            }
        }
        if (ewns.wns.passpointConfiguration == null) {
            if (ewns.wns.wifiConfiguration.isEnterprise()) {
                if (!mWifiKeyStore.updateNetworkKeys(ewns.wns.wifiConfiguration, null)) {
                    Log.e(TAG, "Enterprise network install failure for SSID: " + ewns.wns.wifiConfiguration.SSID);
                    continue;
                }
            }
            updateWifiConfigInWcmIfPresent(ewns.createInternalWifiConfiguration(), uid, packageName);
            addToScanResultMatchInfoMap(ewns);
        } else {
            ewns.wns.passpointConfiguration.setAutojoinEnabled(ewns.isAutojoinEnabled);
            if (!mWifiInjector.getPasspointManager().addOrUpdateProvider(ewns.wns.passpointConfiguration, uid, packageName, true, !ewns.wns.isUntrusted())) {
                Log.e(TAG, "Passpoint profile install failure for FQDN: " + ewns.wns.wifiConfiguration.FQDN);
                continue;
            }
            addToPasspointInfoMap(ewns);
        }
        perAppInfo.extNetworkSuggestions.remove(ewns);
        perAppInfo.extNetworkSuggestions.add(ewns);
    }
    for (OnSuggestionUpdateListener listener : mListeners) {
        listener.onSuggestionsAddedOrUpdated(networkSuggestions);
    }
    perAppInfo.maxSize = Math.max(perAppInfo.extNetworkSuggestions.size(), perAppInfo.maxSize);
    saveToStore();
    mWifiMetrics.incrementNetworkSuggestionApiNumModification();
    mWifiMetrics.noteNetworkSuggestionApiListSizeHistogram(getAllMaxSizes());
    return WifiManager.STATUS_NETWORK_SUGGESTIONS_SUCCESS;
}