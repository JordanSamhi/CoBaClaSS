public static CharSequence getGmtOffsetText(TimeZoneFormat tzFormatter, Locale locale, TimeZone tz, Date now){
    final SpannableStringBuilder builder = new SpannableStringBuilder();
    final String gmtPattern = tzFormatter.getGMTPattern();
    final int placeholderIndex = gmtPattern.indexOf("{0}");
    final String gmtPatternPrefix, gmtPatternSuffix;
    if (placeholderIndex == -1) {
        gmtPatternPrefix = "GMT";
        gmtPatternSuffix = "";
    } else {
        gmtPatternPrefix = gmtPattern.substring(0, placeholderIndex);
        gmtPatternSuffix = gmtPattern.substring(placeholderIndex + 3);
    }
    if (!gmtPatternPrefix.isEmpty()) {
        appendWithTtsSpan(builder, gmtPatternPrefix, new TtsSpan.TextBuilder(gmtPatternPrefix).build());
    }
    int offsetMillis = tz.getOffset(now.getTime());
    final boolean negative = offsetMillis < 0;
    final TimeZoneFormat.GMTOffsetPatternType patternType;
    if (negative) {
        offsetMillis = -offsetMillis;
        patternType = TimeZoneFormat.GMTOffsetPatternType.NEGATIVE_HM;
    } else {
        patternType = TimeZoneFormat.GMTOffsetPatternType.POSITIVE_HM;
    }
    final String gmtOffsetPattern = tzFormatter.getGMTOffsetPattern(patternType);
    final String localizedDigits = tzFormatter.getGMTOffsetDigits();
    final int offsetHours = (int) (offsetMillis / DateUtils.HOUR_IN_MILLIS);
    final int offsetMinutes = (int) (offsetMillis / DateUtils.MINUTE_IN_MILLIS);
    final int offsetMinutesRemaining = Math.abs(offsetMinutes) % 60;
    for (int i = 0; i < gmtOffsetPattern.length(); i++) {
        char c = gmtOffsetPattern.charAt(i);
        if (c == '+' || c == '-' || c == '\u2212') {
            final String sign = String.valueOf(c);
            appendWithTtsSpan(builder, sign, new TtsSpan.VerbatimBuilder(sign).build());
        } else if (c == 'H' || c == 'm') {
            final int numDigits;
            if (i + 1 < gmtOffsetPattern.length() && gmtOffsetPattern.charAt(i + 1) == c) {
                numDigits = 2;
                i++;
            } else {
                numDigits = 1;
            }
            final int number;
            final String unit;
            if (c == 'H') {
                number = offsetHours;
                unit = "hour";
            } else {
                number = offsetMinutesRemaining;
                unit = "minute";
            }
            appendWithTtsSpan(builder, formatDigits(number, numDigits, localizedDigits), new TtsSpan.MeasureBuilder().setNumber(number).setUnit(unit).build());
        } else {
            builder.append(c);
        }
    }
    if (!gmtPatternSuffix.isEmpty()) {
        appendWithTtsSpan(builder, gmtPatternSuffix, new TtsSpan.TextBuilder(gmtPatternSuffix).build());
    }
    CharSequence gmtText = new SpannableString(builder);
    final BidiFormatter bidiFormatter = BidiFormatter.getInstance();
    boolean isRtl = TextUtils.getLayoutDirectionFromLocale(locale) == View.LAYOUT_DIRECTION_RTL;
    gmtText = bidiFormatter.unicodeWrap(gmtText, isRtl ? TextDirectionHeuristicsCompat.RTL : TextDirectionHeuristicsCompat.LTR);
    return gmtText;
}