public Asn1Node nextNode() throws InvalidAsn1DataException{
    if (mPosition >= mEnd) {
        throw new IllegalStateException("No bytes to parse.");
    }
    int offset = mPosition;
    int tagStart = offset;
    byte b = mSrc[offset++];
    if ((b & 0x1F) == 0x1F) {
        while (offset < mEnd && (mSrc[offset++] & 0x80) != 0) {
        }
    }
    if (offset >= mEnd) {
        throw new InvalidAsn1DataException(0, "Invalid length at position: " + offset);
    }
    int tag;
    try {
        tag = IccUtils.bytesToInt(mSrc, tagStart, offset - tagStart);
    } catch (IllegalArgumentException e) {
        throw new InvalidAsn1DataException(0, "Cannot parse tag at position: " + tagStart, e);
    }
    int dataLen;
    b = mSrc[offset++];
    if ((b & 0x80) == 0) {
        dataLen = b;
    } else {
        int lenLen = b & 0x7F;
        if (offset + lenLen > mEnd) {
            throw new InvalidAsn1DataException(tag, "Cannot parse length at position: " + offset);
        }
        try {
            dataLen = IccUtils.bytesToInt(mSrc, offset, lenLen);
        } catch (IllegalArgumentException e) {
            throw new InvalidAsn1DataException(tag, "Cannot parse length at position: " + offset, e);
        }
        offset += lenLen;
    }
    if (offset + dataLen > mEnd) {
        throw new InvalidAsn1DataException(tag, "Incomplete data at position: " + offset + ", expected bytes: " + dataLen + ", actual bytes: " + (mEnd - offset));
    }
    Asn1Node root = new Asn1Node(tag, mSrc, offset, dataLen);
    mPosition = offset + dataLen;
    return root;
}