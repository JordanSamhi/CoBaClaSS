public void removeSubscriptionsFromGroup(int[] subIdList, ParcelUuid groupUuid, String callingPackage){
    if (subIdList == null || subIdList.length == 0) {
        return;
    }
    mAppOps.checkPackage(Binder.getCallingUid(), callingPackage);
    if (mContext.checkCallingOrSelfPermission(android.Manifest.permission.MODIFY_PHONE_STATE) != PERMISSION_GRANTED && !(checkCarrierPrivilegeOnSubList(subIdList, callingPackage) && canPackageManageGroup(groupUuid, callingPackage))) {
        throw new SecurityException("removeSubscriptionsFromGroup needs MODIFY_PHONE_STATE or" + " carrier privilege permission on all specified subscriptions");
    }
    long identity = Binder.clearCallingIdentity();
    try {
        List<SubscriptionInfo> subInfoList = getSubInfo(getSelectionForSubIdList(subIdList), null);
        for (SubscriptionInfo info : subInfoList) {
            if (!groupUuid.equals(info.getGroupUuid())) {
                throw new IllegalArgumentException("Subscription " + info.getSubscriptionId() + " doesn't belong to group " + groupUuid);
            }
        }
        ContentValues value = new ContentValues();
        value.put(SubscriptionManager.GROUP_UUID, (String) null);
        value.put(SubscriptionManager.GROUP_OWNER, (String) null);
        int result = mContext.getContentResolver().update(SubscriptionManager.CONTENT_URI, value, getSelectionForSubIdList(subIdList), null);
        if (DBG)
            logdl("removeSubscriptionsFromGroup update DB result: " + result);
        if (result > 0) {
            updateGroupOwner(groupUuid, callingPackage);
            refreshCachedActiveSubscriptionInfoList();
            notifySubscriptionInfoChanged();
        }
    } finally {
        Binder.restoreCallingIdentity(identity);
    }
}