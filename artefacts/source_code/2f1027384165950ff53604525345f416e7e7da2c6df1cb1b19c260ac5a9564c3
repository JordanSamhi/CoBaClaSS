public BridgeTypedArray internalObtainStyledAttributes(@Nullable AttributeSet set, int[] attrs, int defStyleAttr, int defStyleRes){
    Map<ResourceReference, ResourceValue> defaultPropMap = null;
    Object key = null;
    ResourceNamespace currentFileNamespace;
    ResourceNamespace.Resolver resolver;
    if (set instanceof BridgeXmlBlockParser) {
        BridgeXmlBlockParser parser;
        parser = (BridgeXmlBlockParser) set;
        key = parser.getViewCookie();
        if (key != null) {
            defaultPropMap = mDefaultPropMaps.computeIfAbsent(key, k -> new HashMap<>());
        }
        currentFileNamespace = parser.getFileResourceNamespace();
        resolver = new XmlPullParserResolver(parser, mLayoutlibCallback.getImplicitNamespaces());
    } else if (set instanceof BridgeLayoutParamsMapAttributes) {
        currentFileNamespace = ResourceNamespace.RES_AUTO;
        resolver = Resolver.EMPTY_RESOLVER;
    } else if (set != null) {
        Bridge.getLog().error(LayoutLog.TAG_BROKEN, "Parser is not a BridgeXmlBlockParser!", null, null);
        return null;
    } else {
        currentFileNamespace = ResourceNamespace.RES_AUTO;
        resolver = Resolver.EMPTY_RESOLVER;
    }
    List<AttributeHolder> attributeList = searchAttrs(attrs);
    BridgeTypedArray ta = Resources_Delegate.newTypeArray(mSystemResources, attrs.length);
    StyleResourceValue customStyleValues = null;
    if (set != null) {
        String customStyle = set.getAttributeValue(null, "style");
        if (customStyle != null) {
            ResourceValue resolved = mRenderResources.resolveResValue(new UnresolvedResourceValue(customStyle, currentFileNamespace, resolver));
            if (resolved instanceof StyleResourceValue) {
                customStyleValues = (StyleResourceValue) resolved;
            }
        }
    }
    StyleResourceValue defStyleValues = null;
    if (defStyleAttr != 0) {
        ResourceReference defStyleAttribute = searchAttr(defStyleAttr);
        if (defStyleAttribute == null) {
            Bridge.getLog().error(LayoutLog.TAG_RESOURCES_RESOLVE, "Failed to find the style corresponding to the id " + defStyleAttr, null, null);
        } else {
            ResourceValue item = mRenderResources.findItemInTheme(defStyleAttribute);
            if (item != null) {
                if (key != null) {
                    mDefaultStyleMap.put(key, defStyleAttribute);
                }
                item = mRenderResources.resolveResValue(item);
                if (item instanceof StyleResourceValue) {
                    defStyleValues = (StyleResourceValue) item;
                }
            }
        }
    }
    if (defStyleValues == null && defStyleRes != 0) {
        StyleResourceValue item = getStyleByDynamicId(defStyleRes);
        if (item != null) {
            defStyleValues = item;
        } else {
            ResourceReference value = Bridge.resolveResourceId(defStyleRes);
            if (value == null) {
                value = mLayoutlibCallback.resolveResourceId(defStyleRes);
            }
            if (value != null) {
                if ((value.getResourceType() == ResourceType.STYLE)) {
                    item = mRenderResources.getStyle(value);
                    if (item != null) {
                        if (key != null) {
                            mDefaultStyleMap.put(key, item.asReference());
                        }
                        defStyleValues = item;
                    } else {
                        Bridge.getLog().error(null, String.format("Style with id 0x%x (resolved to '%s') does not exist.", defStyleRes, value.getName()), null, null);
                    }
                } else {
                    Bridge.getLog().error(null, String.format("Resource id 0x%x is not of type STYLE (instead %s)", defStyleRes, value.getResourceType().name()), null, null);
                }
            } else {
                Bridge.getLog().error(null, String.format("Failed to find style with id 0x%x in current theme", defStyleRes), null, null);
            }
        }
    }
    if (attributeList != null) {
        for (int index = 0; index < attributeList.size(); index++) {
            AttributeHolder attributeHolder = attributeList.get(index);
            if (attributeHolder == null) {
                continue;
            }
            String attrName = attributeHolder.getName();
            String value = null;
            if (set != null) {
                value = set.getAttributeValue(attributeHolder.getNamespace().getXmlNamespaceUri(), attrName);
                if (attributeHolder.getNamespace() != ResourceNamespace.ANDROID && value == null) {
                    value = set.getAttributeValue(BridgeConstants.NS_APP_RES_AUTO, attrName);
                }
            }
            ResourceValue defaultValue = null;
            if (defaultPropMap != null || value == null) {
                ResourceReference attrRef = attributeHolder.asReference();
                if (customStyleValues != null) {
                    defaultValue = mRenderResources.findItemInStyle(customStyleValues, attrRef);
                }
                if (defaultValue == null && defStyleValues != null) {
                    defaultValue = mRenderResources.findItemInStyle(defStyleValues, attrRef);
                }
                if (defaultValue == null) {
                    defaultValue = mRenderResources.findItemInTheme(attrRef);
                }
                if (defaultValue != null) {
                    if (defaultPropMap != null) {
                        defaultPropMap.put(attrRef, defaultValue);
                    }
                    defaultValue = mRenderResources.resolveResValue(defaultValue);
                }
            }
            if (value == null) {
                if (attributeHolder.getNamespace() == ResourceNamespace.ANDROID) {
                    ResourceValue patchedValue = FRAMEWORK_PATCHED_VALUES.get(attrName);
                    if (patchedValue != null) {
                        defaultValue = patchedValue;
                    }
                }
                if (defaultValue != null) {
                    String val = defaultValue.getValue();
                    if (val != null && val.startsWith(SdkConstants.PREFIX_THEME_REF)) {
                        ResourceReference reference = defaultValue.getReference();
                        defaultValue = FRAMEWORK_REPLACE_VALUES.get(attrName);
                        if (defaultValue == null && (getApplicationInfo().targetSdkVersion < JELLY_BEAN_MR1 || !attrName.equals(RTL_ATTRS.get(val)))) {
                            if (reference != null) {
                                val = reference.getResourceUrl().toString();
                            }
                            Bridge.getLog().warning(LayoutLog.TAG_RESOURCES_RESOLVE_THEME_ATTR, String.format("Failed to find '%s' in current theme.", val), null, val);
                        }
                    }
                }
                ta.bridgeSetValue(index, attrName, attributeHolder.getNamespace(), attributeHolder.getResourceId(), defaultValue);
            } else {
                ta.bridgeSetValue(index, attrName, attributeHolder.getNamespace(), attributeHolder.getResourceId(), mRenderResources.resolveResValue(new UnresolvedResourceValue(value, currentFileNamespace, resolver)));
            }
        }
    }
    ta.sealArray();
    return ta;
}