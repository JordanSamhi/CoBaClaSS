public synchronized void updateWiredDeviceConnectionState(boolean enable){
    if (!mSelected) {
        Slog.e(TAG, "updateWiredDeviceConnectionState on unselected AlsaDevice!");
        return;
    }
    String alsaCardDeviceString = getAlsaCardDeviceString();
    if (alsaCardDeviceString == null) {
        return;
    }
    try {
        if (mHasOutput) {
            int device = mIsOutputHeadset ? AudioSystem.DEVICE_OUT_USB_HEADSET : AudioSystem.DEVICE_OUT_USB_DEVICE;
            if (DEBUG) {
                Slog.d(TAG, "pre-call device:0x" + Integer.toHexString(device) + " addr:" + alsaCardDeviceString + " name:" + mDeviceName);
            }
            boolean connected = isOutputJackConnected();
            Slog.i(TAG, "OUTPUT JACK connected: " + connected);
            int outputState = (enable && connected) ? 1 : 0;
            if (outputState != mOutputState) {
                mOutputState = outputState;
                mAudioService.setWiredDeviceConnectionState(device, outputState, alsaCardDeviceString, mDeviceName, TAG);
            }
        }
        if (mHasInput) {
            int device = mIsInputHeadset ? AudioSystem.DEVICE_IN_USB_HEADSET : AudioSystem.DEVICE_IN_USB_DEVICE;
            boolean connected = isInputJackConnected();
            Slog.i(TAG, "INPUT JACK connected: " + connected);
            int inputState = (enable && connected) ? 1 : 0;
            if (inputState != mInputState) {
                mInputState = inputState;
                mAudioService.setWiredDeviceConnectionState(device, inputState, alsaCardDeviceString, mDeviceName, TAG);
            }
        }
    } catch (RemoteException e) {
        Slog.e(TAG, "RemoteException in setWiredDeviceConnectionState");
    }
}