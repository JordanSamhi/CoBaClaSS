public void updateSavedPasspointProfilesInfo(Map<String, PasspointProvider> providers){
    int passpointType;
    int eapType;
    PasspointConfiguration config;
    synchronized (mLock) {
        mInstalledPasspointProfileTypeForR1.clear();
        mInstalledPasspointProfileTypeForR2.clear();
        for (Map.Entry<String, PasspointProvider> entry : providers.entrySet()) {
            config = entry.getValue().getConfig();
            if (config.getCredential().getUserCredential() != null) {
                eapType = EAPConstants.EAP_TTLS;
            } else if (config.getCredential().getCertCredential() != null) {
                eapType = EAPConstants.EAP_TLS;
            } else if (config.getCredential().getSimCredential() != null) {
                eapType = config.getCredential().getSimCredential().getEapType();
            } else {
                eapType = -1;
            }
            switch(eapType) {
                case EAPConstants.EAP_TLS:
                    passpointType = WifiMetricsProto.PasspointProfileTypeCount.TYPE_EAP_TLS;
                    break;
                case EAPConstants.EAP_TTLS:
                    passpointType = WifiMetricsProto.PasspointProfileTypeCount.TYPE_EAP_TTLS;
                    break;
                case EAPConstants.EAP_SIM:
                    passpointType = WifiMetricsProto.PasspointProfileTypeCount.TYPE_EAP_SIM;
                    break;
                case EAPConstants.EAP_AKA:
                    passpointType = WifiMetricsProto.PasspointProfileTypeCount.TYPE_EAP_AKA;
                    break;
                case EAPConstants.EAP_AKA_PRIME:
                    passpointType = WifiMetricsProto.PasspointProfileTypeCount.TYPE_EAP_AKA_PRIME;
                    break;
                default:
                    passpointType = WifiMetricsProto.PasspointProfileTypeCount.TYPE_UNKNOWN;
            }
            if (config.validateForR2()) {
                mInstalledPasspointProfileTypeForR2.increment(passpointType);
            } else {
                mInstalledPasspointProfileTypeForR1.increment(passpointType);
            }
        }
    }
}