public synchronized void applyTunnelModeTransform(int tunnelResourceId, int direction, int transformResourceId, String callingPackage) throws RemoteException{
    enforceTunnelFeatureAndPermissions(callingPackage);
    checkDirection(direction);
    int callingUid = Binder.getCallingUid();
    UserRecord userRecord = mUserResourceTracker.getUserRecord(callingUid);
    TransformRecord transformInfo = userRecord.mTransformRecords.getResourceOrThrow(transformResourceId);
    TunnelInterfaceRecord tunnelInterfaceInfo = userRecord.mTunnelInterfaceRecords.getResourceOrThrow(tunnelResourceId);
    IpSecConfig c = transformInfo.getConfig();
    Preconditions.checkArgument(c.getMode() == IpSecTransform.MODE_TUNNEL, "Transform mode was not Tunnel mode; cannot be applied to a tunnel interface");
    EncapSocketRecord socketRecord = null;
    if (c.getEncapType() != IpSecTransform.ENCAP_NONE) {
        socketRecord = userRecord.mEncapSocketRecords.getResourceOrThrow(c.getEncapSocketResourceId());
    }
    SpiRecord spiRecord = transformInfo.getSpiRecord();
    int mark = (direction == IpSecManager.DIRECTION_OUT) ? tunnelInterfaceInfo.getOkey() : tunnelInterfaceInfo.getIkey();
    try {
        int spi = IpSecManager.INVALID_SECURITY_PARAMETER_INDEX;
        c.setXfrmInterfaceId(tunnelInterfaceInfo.getIfId());
        if (direction == IpSecManager.DIRECTION_OUT) {
            c.setNetwork(tunnelInterfaceInfo.getUnderlyingNetwork());
            spi = spiRecord.getSpi();
        }
        for (int selAddrFamily : ADDRESS_FAMILIES) {
            mSrvConfig.getNetdInstance().ipSecUpdateSecurityPolicy(callingUid, selAddrFamily, direction, transformInfo.getConfig().getSourceAddress(), transformInfo.getConfig().getDestinationAddress(), spi, mark, 0xffffffff, c.getXfrmInterfaceId());
        }
        createOrUpdateTransform(c, transformResourceId, spiRecord, socketRecord);
    } catch (ServiceSpecificException e) {
        if (e.errorCode == EINVAL) {
            throw new IllegalArgumentException(e.toString());
        } else {
            throw e;
        }
    }
}