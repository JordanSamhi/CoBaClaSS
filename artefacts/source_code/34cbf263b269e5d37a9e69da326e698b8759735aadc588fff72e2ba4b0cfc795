public void findAll(@NonNull List<ShortcutInfo> result, @Nullable Predicate<ShortcutInfo> query, int cloneFlag, @Nullable String callingLauncher, int launcherUserId, boolean getPinnedByAnyLauncher){
    if (getPackageInfo().isShadow()) {
        return;
    }
    final ShortcutService s = mShortcutUser.mService;
    final ArraySet<String> pinnedByCallerSet = (callingLauncher == null) ? null : s.getLauncherShortcutsLocked(callingLauncher, getPackageUserId(), launcherUserId).getPinnedShortcutIds(getPackageName(), getPackageUserId());
    for (int i = 0; i < mShortcuts.size(); i++) {
        final ShortcutInfo si = mShortcuts.valueAt(i);
        final boolean isPinnedByCaller = (callingLauncher == null) || ((pinnedByCallerSet != null) && pinnedByCallerSet.contains(si.getId()));
        if (!getPinnedByAnyLauncher) {
            if (si.isFloating()) {
                if (!isPinnedByCaller) {
                    continue;
                }
            }
        }
        final ShortcutInfo clone = si.clone(cloneFlag);
        if (!getPinnedByAnyLauncher) {
            if (!isPinnedByCaller) {
                clone.clearFlags(ShortcutInfo.FLAG_PINNED);
            }
        }
        if (query == null || query.test(clone)) {
            if (!isPinnedByCaller) {
                clone.clearFlags(ShortcutInfo.FLAG_PINNED);
            }
            result.add(clone);
        }
    }
}