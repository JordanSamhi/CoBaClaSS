public boolean onTextContextMenuItem(int id){
    int min = 0;
    int max = mText.length();
    if (isFocused()) {
        final int selStart = getSelectionStart();
        final int selEnd = getSelectionEnd();
        min = Math.max(0, Math.min(selStart, selEnd));
        max = Math.max(0, Math.max(selStart, selEnd));
    }
    switch(id) {
        case ID_SELECT_ALL:
            final boolean hadSelection = hasSelection();
            selectAllText();
            if (mEditor != null && hadSelection) {
                mEditor.invalidateActionModeAsync();
            }
            return true;
        case ID_UNDO:
            if (mEditor != null) {
                mEditor.undo();
            }
            return true;
        case ID_REDO:
            if (mEditor != null) {
                mEditor.redo();
            }
            return true;
        case ID_PASTE:
            paste(min, max, true);
            return true;
        case ID_PASTE_AS_PLAIN_TEXT:
            paste(min, max, false);
            return true;
        case ID_CUT:
            final ClipData cutData = ClipData.newPlainText(null, getTransformedText(min, max));
            if (setPrimaryClip(cutData)) {
                deleteText_internal(min, max);
            } else {
                Toast.makeText(getContext(), com.android.internal.R.string.failed_to_copy_to_clipboard, Toast.LENGTH_SHORT).show();
            }
            return true;
        case ID_COPY:
            final int selStart = getSelectionStart();
            final int selEnd = getSelectionEnd();
            min = Math.max(0, Math.min(selStart, selEnd));
            max = Math.max(0, Math.max(selStart, selEnd));
            final ClipData copyData = ClipData.newPlainText(null, getTransformedText(min, max));
            if (setPrimaryClip(copyData)) {
                stopTextActionMode();
            } else {
                Toast.makeText(getContext(), com.android.internal.R.string.failed_to_copy_to_clipboard, Toast.LENGTH_SHORT).show();
            }
            return true;
        case ID_REPLACE:
            if (mEditor != null) {
                mEditor.replace();
            }
            return true;
        case ID_SHARE:
            shareSelectedText();
            return true;
        case ID_AUTOFILL:
            requestAutofill();
            stopTextActionMode();
            return true;
    }
    return false;
}