public void loadBoundProfilePackage(byte[] boundProfilePackage, AsyncResultCallback<byte[]> callback, Handler handler){
    sendApdu(newRequestProvider((RequestBuilder requestBuilder) -> {
        Asn1Node bppNode = new Asn1Decoder(boundProfilePackage).nextNode();
        int actualLength = bppNode.getDataLength();
        int segmentedLength = 0;
        Asn1Node initialiseSecureChannelRequest = bppNode.getChild(Tags.TAG_INITIALISE_SECURE_CHANNEL);
        segmentedLength += initialiseSecureChannelRequest.getEncodedLength();
        Asn1Node firstSequenceOf87 = bppNode.getChild(Tags.TAG_CTX_COMP_0);
        segmentedLength += firstSequenceOf87.getEncodedLength();
        Asn1Node sequenceOf88 = bppNode.getChild(Tags.TAG_CTX_COMP_1);
        List<Asn1Node> metaDataSeqs = sequenceOf88.getChildren(Tags.TAG_CTX_8);
        segmentedLength += sequenceOf88.getEncodedLength();
        Asn1Node secondSequenceOf87 = null;
        if (bppNode.hasChild(Tags.TAG_CTX_COMP_2)) {
            secondSequenceOf87 = bppNode.getChild(Tags.TAG_CTX_COMP_2);
            segmentedLength += secondSequenceOf87.getEncodedLength();
        }
        Asn1Node sequenceOf86 = bppNode.getChild(Tags.TAG_CTX_COMP_3);
        List<Asn1Node> elementSeqs = sequenceOf86.getChildren(Tags.TAG_CTX_6);
        segmentedLength += sequenceOf86.getEncodedLength();
        if (mSpecVersion.compareTo(SGP22_V_2_1) >= 0) {
            if (elementSeqs == null || elementSeqs.isEmpty()) {
                throw new EuiccCardException("No profile elements in BPP");
            } else if (actualLength != segmentedLength) {
                throw new EuiccCardException("Actual BPP length (" + actualLength + ") does not match segmented length (" + segmentedLength + "), this must be due to a malformed BPP");
            }
        }
        requestBuilder.addStoreData(bppNode.getHeadAsHex() + initialiseSecureChannelRequest.toHex());
        requestBuilder.addStoreData(firstSequenceOf87.toHex());
        requestBuilder.addStoreData(sequenceOf88.getHeadAsHex());
        int size = metaDataSeqs.size();
        for (int i = 0; i < size; i++) {
            requestBuilder.addStoreData(metaDataSeqs.get(i).toHex());
        }
        if (secondSequenceOf87 != null) {
            requestBuilder.addStoreData(secondSequenceOf87.toHex());
        }
        requestBuilder.addStoreData(sequenceOf86.getHeadAsHex());
        size = elementSeqs.size();
        for (int i = 0; i < size; i++) {
            requestBuilder.addStoreData(elementSeqs.get(i).toHex());
        }
    }), response -> {
        Asn1Node root = parseResponse(response);
        if (root.hasChild(Tags.TAG_PROFILE_INSTALLATION_RESULT_DATA, Tags.TAG_CTX_COMP_2, Tags.TAG_CTX_COMP_1, Tags.TAG_CTX_1)) {
            Asn1Node errorNode = root.getChild(Tags.TAG_PROFILE_INSTALLATION_RESULT_DATA, Tags.TAG_CTX_COMP_2, Tags.TAG_CTX_COMP_1, Tags.TAG_CTX_1);
            throw new EuiccCardErrorException(EuiccCardErrorException.OPERATION_LOAD_BOUND_PROFILE_PACKAGE, errorNode.asInteger(), errorNode);
        }
        return root.toBytes();
    }, intermediateResult -> {
        byte[] payload = intermediateResult.payload;
        if (payload != null && payload.length > 2) {
            int tag = (payload[0] & 0xFF) << 8 | (payload[1] & 0xFF);
            if (tag == Tags.TAG_PROFILE_INSTALLATION_RESULT) {
                logd("loadBoundProfilePackage failed due to an early error.");
                return false;
            }
        }
        return true;
    }, callback, handler);
}