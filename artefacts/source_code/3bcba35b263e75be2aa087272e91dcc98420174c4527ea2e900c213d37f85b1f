public boolean updateConnectedClients(Iterable<IpServer> ipServers, @Nullable List<WifiClient> wifiClients){
    final long now = mClock.elapsedRealtime();
    if (wifiClients != null) {
        mLastWifiClients = wifiClients;
    }
    final Set<MacAddress> wifiClientMacs = getClientMacs(mLastWifiClients);
    final Map<MacAddress, TetheredClient> clientsMap = new HashMap<>();
    for (IpServer server : ipServers) {
        for (TetheredClient client : server.getAllLeases()) {
            if (client.getTetheringType() == TETHERING_WIFI && !wifiClientMacs.contains(client.getMacAddress())) {
                continue;
            }
            final TetheredClient prunedClient = pruneExpired(client, now);
            if (prunedClient == null)
                continue;
            addLease(clientsMap, prunedClient);
        }
    }
    for (MacAddress client : wifiClientMacs) {
        if (clientsMap.containsKey(client))
            continue;
        clientsMap.put(client, new TetheredClient(client, Collections.emptyList(), TETHERING_WIFI));
    }
    final HashSet<TetheredClient> clients = new HashSet<>(clientsMap.values());
    final boolean clientsChanged = clients.size() != mLastTetheredClients.size() || !clients.containsAll(mLastTetheredClients);
    mLastTetheredClients = Collections.unmodifiableList(new ArrayList<>(clients));
    return clientsChanged;
}