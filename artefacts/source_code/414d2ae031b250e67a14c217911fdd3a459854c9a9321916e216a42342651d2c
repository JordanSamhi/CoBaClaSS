public static void onVmPolicyViolation(Violation violation, boolean forceDeath){
    final boolean penaltyDropbox = (sVmPolicy.mask & PENALTY_DROPBOX) != 0;
    final boolean penaltyDeath = ((sVmPolicy.mask & PENALTY_DEATH) != 0) || forceDeath;
    final boolean penaltyLog = (sVmPolicy.mask & PENALTY_LOG) != 0;
    final int penaltyMask = (sVmPolicy.mask & PENALTY_ALL);
    final ViolationInfo info = new ViolationInfo(violation, penaltyMask);
    info.numAnimationsRunning = 0;
    info.tags = null;
    info.broadcastIntentAction = null;
    final Integer fingerprint = info.hashCode();
    final long now = SystemClock.uptimeMillis();
    long lastViolationTime;
    long timeSinceLastViolationMillis = Long.MAX_VALUE;
    if (sLogger == LOGCAT_LOGGER) {
        synchronized (sLastVmViolationTime) {
            if (sLastVmViolationTime.containsKey(fingerprint)) {
                lastViolationTime = sLastVmViolationTime.get(fingerprint);
                timeSinceLastViolationMillis = now - lastViolationTime;
            }
            if (timeSinceLastViolationMillis > MIN_VM_INTERVAL_MS) {
                sLastVmViolationTime.put(fingerprint, now);
            }
            clampViolationTimeMap(sLastVmViolationTime, now - Math.max(MIN_VM_INTERVAL_MS, MIN_LOG_INTERVAL_MS));
        }
    }
    if (timeSinceLastViolationMillis <= MIN_VM_INTERVAL_MS) {
        return;
    }
    if (penaltyLog && sLogger != null && timeSinceLastViolationMillis > MIN_LOG_INTERVAL_MS) {
        sLogger.log(info);
    }
    if (penaltyDropbox) {
        if (penaltyDeath) {
            handleApplicationStrictModeViolation(PENALTY_DROPBOX, info);
        } else {
            dropboxViolationAsync(PENALTY_DROPBOX, info);
        }
    }
    if (penaltyDeath) {
        System.err.println("StrictMode VmPolicy violation with POLICY_DEATH; shutting down.");
        Process.killProcess(Process.myPid());
        System.exit(10);
    }
    if (sVmPolicy.mListener != null && sVmPolicy.mCallbackExecutor != null) {
        final OnVmViolationListener listener = sVmPolicy.mListener;
        try {
            sVmPolicy.mCallbackExecutor.execute(() -> {
                VmPolicy oldPolicy = allowVmViolations();
                try {
                    listener.onVmViolation(violation);
                } finally {
                    setVmPolicy(oldPolicy);
                }
            });
        } catch (RejectedExecutionException e) {
            Log.e(TAG, "VmPolicy penaltyCallback failed", e);
        }
    }
}