public static int getOrientation(final InputStream inputStream, final long byteSize){
    if (inputStream == null) {
        return 0;
    }
    final int lookAhead = 16;
    final int readBackwards = 4;
    final InputStreamBuffer jpeg = new InputStreamBuffer(inputStream, lookAhead, false);
    int offset = 0;
    int length = 0;
    if (has(jpeg, byteSize, 1)) {
        final boolean possibleJpegFormat = jpeg.get(0) == (byte) 0xFF && jpeg.get(1) == (byte) 0xD8;
        if (!possibleJpegFormat) {
            return 0;
        }
    }
    while (has(jpeg, byteSize, offset + 3) && (jpeg.get(offset++) & 0xFF) == 0xFF) {
        final int marker = jpeg.get(offset) & 0xFF;
        if (marker == 0xFF) {
            continue;
        }
        offset++;
        if (marker == 0xD8 || marker == 0x01) {
            continue;
        }
        if (marker == 0xD9 || marker == 0xDA) {
            jpeg.advanceTo(offset - readBackwards);
            break;
        }
        length = pack(jpeg, offset, 2, false);
        if (length < 2 || !has(jpeg, byteSize, offset + length - 1)) {
            Log.e(TAG, "Invalid length");
            return 0;
        }
        if (marker == 0xE1 && length >= 8 && pack(jpeg, offset + 2, 4, false) == 0x45786966 && pack(jpeg, offset + 6, 2, false) == 0) {
            offset += 8;
            length -= 8;
            jpeg.advanceTo(offset - readBackwards);
            break;
        }
        offset += length;
        length = 0;
        jpeg.advanceTo(offset - readBackwards);
    }
    if (length > 8) {
        int tag = pack(jpeg, offset, 4, false);
        if (tag != 0x49492A00 && tag != 0x4D4D002A) {
            Log.e(TAG, "Invalid byte order");
            return 0;
        }
        final boolean littleEndian = (tag == 0x49492A00);
        int count = pack(jpeg, offset + 4, 4, littleEndian) + 2;
        if (count < 10 || count > length) {
            Log.e(TAG, "Invalid offset");
            return 0;
        }
        offset += count;
        length -= count;
        jpeg.advanceTo(offset - readBackwards);
        count = pack(jpeg, offset - 2, 2, littleEndian);
        while (count-- > 0 && length >= 12) {
            tag = pack(jpeg, offset, 2, littleEndian);
            if (tag == 0x0112) {
                final int orientation = pack(jpeg, offset + 8, 2, littleEndian);
                switch(orientation) {
                    case 1:
                        return 0;
                    case 3:
                        return 180;
                    case 6:
                        return 90;
                    case 8:
                        return 270;
                }
                Log.i(TAG, "Unsupported orientation");
                return 0;
            }
            offset += 12;
            length -= 12;
            jpeg.advanceTo(offset - readBackwards);
        }
    }
    return 0;
}