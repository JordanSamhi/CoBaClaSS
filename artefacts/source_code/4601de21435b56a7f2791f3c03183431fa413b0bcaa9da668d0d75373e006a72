public void removePackage(PackageSetting setting){
    mStateProvider.runWithState((settings, users) -> {
        final int userCount = users.length;
        for (int u = 0; u < userCount; u++) {
            final int userId = users[u].id;
            final int removingUid = UserHandle.getUid(userId, setting.appId);
            mImplicitlyQueryable.remove(removingUid);
            for (int i = mImplicitlyQueryable.size() - 1; i >= 0; i--) {
                mImplicitlyQueryable.remove(mImplicitlyQueryable.keyAt(i), removingUid);
            }
        }
        if (!mQueriesViaComponentRequireRecompute) {
            mQueriesViaComponent.remove(setting.appId);
            for (int i = mQueriesViaComponent.size() - 1; i >= 0; i--) {
                mQueriesViaComponent.remove(mQueriesViaComponent.keyAt(i), setting.appId);
            }
        }
        mQueriesViaPackage.remove(setting.appId);
        for (int i = mQueriesViaPackage.size() - 1; i >= 0; i--) {
            mQueriesViaPackage.remove(mQueriesViaPackage.keyAt(i), setting.appId);
        }
        mForceQueryable.remove(setting.appId);
        if (setting.pkg != null && !setting.pkg.getProtectedBroadcasts().isEmpty()) {
            final String removingPackageName = setting.pkg.getPackageName();
            final Set<String> protectedBroadcasts = mProtectedBroadcasts;
            mProtectedBroadcasts = collectProtectedBroadcasts(settings, removingPackageName);
            if (!mProtectedBroadcasts.containsAll(protectedBroadcasts)) {
                mQueriesViaComponentRequireRecompute = true;
            }
        }
        mOverlayReferenceMapper.removePkg(setting.name);
        mFeatureConfig.updatePackageState(setting, true);
        if (setting.sharedUser != null) {
            for (int i = setting.sharedUser.packages.size() - 1; i >= 0; i--) {
                if (setting.sharedUser.packages.valueAt(i) == setting) {
                    continue;
                }
                addPackageInternal(setting.sharedUser.packages.valueAt(i), settings);
            }
        }
        removeAppIdFromVisibilityCache(setting.appId);
        if (mShouldFilterCache != null && setting.sharedUser != null) {
            for (int i = setting.sharedUser.packages.size() - 1; i >= 0; i--) {
                PackageSetting siblingSetting = setting.sharedUser.packages.valueAt(i);
                if (siblingSetting == setting) {
                    continue;
                }
                updateShouldFilterCacheForPackage(setting.name, siblingSetting, settings, users, settings.size());
            }
        }
    });
}