public final void notifySessionCreated(long requestId, @NonNull RoutingSessionInfo sessionInfo){
    Objects.requireNonNull(sessionInfo, "sessionInfo must not be null");
    if (DEBUG) {
        Log.d(TAG, "notifySessionCreated: Creating a session. requestId=" + requestId + ", sessionInfo=" + sessionInfo);
    }
    if (requestId != REQUEST_ID_NONE && !removeRequestId(requestId)) {
        Log.w(TAG, "notifySessionCreated: The requestId doesn't exist. requestId=" + requestId);
        return;
    }
    String sessionId = sessionInfo.getId();
    synchronized (mSessionLock) {
        if (mSessionInfo.containsKey(sessionId)) {
            Log.w(TAG, "notifySessionCreated: Ignoring duplicate session id.");
            return;
        }
        mSessionInfo.put(sessionInfo.getId(), sessionInfo);
        if (mRemoteCallback == null) {
            return;
        }
        try {
            mRemoteCallback.notifySessionCreated(requestId, sessionInfo);
        } catch (RemoteException ex) {
            Log.w(TAG, "Failed to notify session created.");
        }
    }
}