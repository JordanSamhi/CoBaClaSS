public UsageStatsManagerInternal.AppUsageLimitData getAppUsageLimit(String packageName, UserHandle user){
    synchronized (mLock) {
        final UserData userData = getOrCreateUserDataLocked(user.getIdentifier());
        if (userData == null) {
            return null;
        }
        final ArrayList<UsageGroup> usageGroups = userData.observedMap.get(packageName);
        if (usageGroups == null || usageGroups.isEmpty()) {
            return null;
        }
        final ArraySet<AppUsageLimitGroup> usageLimitGroups = new ArraySet<>();
        for (int i = 0; i < usageGroups.size(); i++) {
            if (usageGroups.get(i) instanceof AppUsageLimitGroup) {
                final AppUsageLimitGroup group = (AppUsageLimitGroup) usageGroups.get(i);
                for (int j = 0; j < group.mObserved.length; j++) {
                    if (group.mObserved[j].equals(packageName)) {
                        usageLimitGroups.add(group);
                        break;
                    }
                }
            }
        }
        if (usageLimitGroups.isEmpty()) {
            return null;
        }
        AppUsageLimitGroup smallestGroup = usageLimitGroups.valueAt(0);
        for (int i = 1; i < usageLimitGroups.size(); i++) {
            final AppUsageLimitGroup otherGroup = usageLimitGroups.valueAt(i);
            if (otherGroup.getUsageRemaining() < smallestGroup.getUsageRemaining()) {
                smallestGroup = otherGroup;
            }
        }
        return new UsageStatsManagerInternal.AppUsageLimitData(smallestGroup.getTotaUsageLimit(), smallestGroup.getUsageRemaining());
    }
}