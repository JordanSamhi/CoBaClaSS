public void storePassword(int userId, LockscreenCredential password){
    synchronized (mEncryptedPasswords) {
        if (mEncryptedPasswords.contains(userId)) {
            return;
        }
        UserInfo parent = mUserManager.getProfileParent(userId);
        if (parent == null || parent.id != UserHandle.USER_SYSTEM) {
            return;
        }
        String keyName = getEncryptionKeyName(userId);
        KeyGenerator generator;
        SecretKey key;
        try {
            generator = KeyGenerator.getInstance(KeyProperties.KEY_ALGORITHM_AES, AndroidKeyStoreSpi.NAME);
            generator.init(new KeyGenParameterSpec.Builder(keyName, KeyProperties.PURPOSE_ENCRYPT | KeyProperties.PURPOSE_DECRYPT).setKeySize(KEY_LENGTH).setBlockModes(KeyProperties.BLOCK_MODE_GCM).setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_NONE).setUserAuthenticationRequired(true).setUserAuthenticationValidityDurationSeconds(CACHE_TIMEOUT_SECONDS).build());
            key = generator.generateKey();
        } catch (GeneralSecurityException e) {
            Slog.e(TAG, "Cannot generate key", e);
            return;
        }
        Cipher cipher;
        try {
            cipher = Cipher.getInstance("AES/GCM/NoPadding");
            cipher.init(Cipher.ENCRYPT_MODE, key);
            byte[] ciphertext = cipher.doFinal(password.getCredential());
            byte[] iv = cipher.getIV();
            byte[] block = Arrays.copyOf(iv, ciphertext.length + iv.length);
            System.arraycopy(ciphertext, 0, block, iv.length, ciphertext.length);
            mEncryptedPasswords.put(userId, block);
        } catch (GeneralSecurityException e) {
            Slog.d(TAG, "Cannot encrypt", e);
        }
    }
}