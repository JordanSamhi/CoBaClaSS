public boolean dexoptSecondaryDex(DexoptOptions options){
    if (PLATFORM_PACKAGE_NAME.equals(options.getPackageName())) {
        Slog.wtf(TAG, "System server jars should be optimized with dexoptSystemServer");
        return false;
    }
    PackageDexOptimizer pdo = getPackageDexOptimizer(options);
    String packageName = options.getPackageName();
    PackageUseInfo useInfo = getPackageUseInfoOrDefault(packageName);
    if (useInfo.getDexUseInfoMap().isEmpty()) {
        if (DEBUG) {
            Slog.d(TAG, "No secondary dex use for package:" + packageName);
        }
        return true;
    }
    boolean success = true;
    for (Map.Entry<String, DexUseInfo> entry : useInfo.getDexUseInfoMap().entrySet()) {
        String dexPath = entry.getKey();
        DexUseInfo dexUseInfo = entry.getValue();
        PackageInfo pkg;
        try {
            pkg = mPackageManager.getPackageInfo(packageName, 0, dexUseInfo.getOwnerUserId());
        } catch (RemoteException e) {
            throw new AssertionError(e);
        }
        if (pkg == null) {
            Slog.d(TAG, "Could not find package when compiling secondary dex " + packageName + " for user " + dexUseInfo.getOwnerUserId());
            mPackageDexUsage.removeUserPackage(packageName, dexUseInfo.getOwnerUserId());
            continue;
        }
        int result = pdo.dexOptSecondaryDexPath(pkg.applicationInfo, dexPath, dexUseInfo, options);
        success = success && (result != PackageDexOptimizer.DEX_OPT_FAILED);
    }
    return success;
}