public void handleMessage(Message msg){
    RILRequest rr;
    switch(msg.what) {
        case EVENT_WAKE_LOCK_TIMEOUT:
            synchronized (mRequestList) {
                if (msg.arg1 == mWlSequenceNum && clearWakeLock(FOR_WAKELOCK)) {
                    if (mRadioBugDetector != null) {
                        mRadioBugDetector.processWakelockTimeout();
                    }
                    if (RILJ_LOGD) {
                        int count = mRequestList.size();
                        Rlog.d(RILJ_LOG_TAG, "WAKE_LOCK_TIMEOUT " + " mRequestList=" + count);
                        for (int i = 0; i < count; i++) {
                            rr = mRequestList.valueAt(i);
                            Rlog.d(RILJ_LOG_TAG, i + ": [" + rr.mSerial + "] " + requestToString(rr.mRequest));
                        }
                    }
                }
            }
            break;
        case EVENT_ACK_WAKE_LOCK_TIMEOUT:
            if (msg.arg1 == mAckWlSequenceNum && clearWakeLock(FOR_ACK_WAKELOCK)) {
                if (RILJ_LOGV) {
                    Rlog.d(RILJ_LOG_TAG, "ACK_WAKE_LOCK_TIMEOUT");
                }
            }
            break;
        case EVENT_BLOCKING_RESPONSE_TIMEOUT:
            int serial = msg.arg1;
            rr = findAndRemoveRequestFromList(serial);
            if (rr == null) {
                break;
            }
            if (rr.mResult != null) {
                Object timeoutResponse = getResponseForTimedOutRILRequest(rr);
                AsyncResult.forMessage(rr.mResult, timeoutResponse, null);
                rr.mResult.sendToTarget();
                mMetrics.writeOnRilTimeoutResponse(mPhoneId, rr.mSerial, rr.mRequest);
            }
            decrementWakeLock(rr);
            rr.release();
            break;
        case EVENT_RADIO_PROXY_DEAD:
            riljLog("handleMessage: EVENT_RADIO_PROXY_DEAD cookie = " + msg.obj + " mRadioProxyCookie = " + mRadioProxyCookie.get());
            if ((long) msg.obj == mRadioProxyCookie.get()) {
                resetProxyAndRequestList();
            }
            break;
    }
}