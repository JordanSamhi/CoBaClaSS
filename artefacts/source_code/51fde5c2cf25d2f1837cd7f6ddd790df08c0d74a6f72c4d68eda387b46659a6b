public void addOnRoleHoldersChangedListenerAsUser(@CallbackExecutor @NonNull Executor executor, @NonNull OnRoleHoldersChangedListener listener, @NonNull UserHandle user){
    Objects.requireNonNull(executor, "executor cannot be null");
    Objects.requireNonNull(listener, "listener cannot be null");
    Objects.requireNonNull(user, "user cannot be null");
    int userId = user.getIdentifier();
    synchronized (mListenersLock) {
        ArrayMap<OnRoleHoldersChangedListener, OnRoleHoldersChangedListenerDelegate> listeners = mListeners.get(userId);
        if (listeners == null) {
            listeners = new ArrayMap<>();
            mListeners.put(userId, listeners);
        } else {
            if (listeners.containsKey(listener)) {
                return;
            }
        }
        OnRoleHoldersChangedListenerDelegate listenerDelegate = new OnRoleHoldersChangedListenerDelegate(executor, listener);
        try {
            mService.addOnRoleHoldersChangedListenerAsUser(listenerDelegate, userId);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
        listeners.put(listener, listenerDelegate);
    }
}