public void startNetworkScan(NetworkScanRequest networkScanRequest, Message result){
    final NetworkScanRequest nsr = networkScanRequest;
    IRadio radioProxy = getRadioProxy(result);
    if (radioProxy != null) {
        HalVersion overrideHalVersion = getCompatVersion(RIL_REQUEST_START_NETWORK_SCAN);
        if (RILJ_LOGD) {
            riljLog("startNetworkScan: overrideHalVersion=" + overrideHalVersion);
        }
        if ((overrideHalVersion == null || overrideHalVersion.greaterOrEqual(RADIO_HAL_VERSION_1_5)) && mRadioVersion.greaterOrEqual(RADIO_HAL_VERSION_1_5)) {
            android.hardware.radio.V1_5.NetworkScanRequest request = new android.hardware.radio.V1_5.NetworkScanRequest();
            request.type = nsr.getScanType();
            request.interval = nsr.getSearchPeriodicity();
            request.maxSearchTime = nsr.getMaxSearchTime();
            request.incrementalResultsPeriodicity = nsr.getIncrementalResultsPeriodicity();
            request.incrementalResults = nsr.getIncrementalResults();
            for (RadioAccessSpecifier ras : nsr.getSpecifiers()) {
                android.hardware.radio.V1_5.RadioAccessSpecifier rasInHalFormat = convertRadioAccessSpecifierToRadioHAL_1_5(ras);
                if (rasInHalFormat == null) {
                    AsyncResult.forMessage(result, null, CommandException.fromRilErrno(REQUEST_NOT_SUPPORTED));
                    result.sendToTarget();
                    return;
                }
                request.specifiers.add(rasInHalFormat);
            }
            request.mccMncs.addAll(nsr.getPlmns());
            RILRequest rr = obtainRequest(RIL_REQUEST_START_NETWORK_SCAN, result, mRILDefaultWorkSource, nsr);
            if (RILJ_LOGD) {
                riljLog(rr.serialString() + "> " + requestToString(rr.mRequest));
            }
            try {
                android.hardware.radio.V1_5.IRadio radioProxy15 = (android.hardware.radio.V1_5.IRadio) radioProxy;
                radioProxy15.startNetworkScan_1_5(rr.mSerial, request);
            } catch (RemoteException | RuntimeException e) {
                handleRadioProxyExceptionForRR(rr, "startNetworkScan", e);
            }
        } else if (mRadioVersion.greaterOrEqual(RADIO_HAL_VERSION_1_2)) {
            android.hardware.radio.V1_2.NetworkScanRequest request = new android.hardware.radio.V1_2.NetworkScanRequest();
            request.type = nsr.getScanType();
            request.interval = nsr.getSearchPeriodicity();
            request.maxSearchTime = nsr.getMaxSearchTime();
            request.incrementalResultsPeriodicity = nsr.getIncrementalResultsPeriodicity();
            request.incrementalResults = nsr.getIncrementalResults();
            for (RadioAccessSpecifier ras : nsr.getSpecifiers()) {
                android.hardware.radio.V1_1.RadioAccessSpecifier rasInHalFormat = convertRadioAccessSpecifierToRadioHAL(ras);
                if (rasInHalFormat == null) {
                    AsyncResult.forMessage(result, null, CommandException.fromRilErrno(REQUEST_NOT_SUPPORTED));
                    result.sendToTarget();
                    return;
                }
                request.specifiers.add(rasInHalFormat);
            }
            request.mccMncs.addAll(nsr.getPlmns());
            RILRequest rr = obtainRequest(RIL_REQUEST_START_NETWORK_SCAN, result, mRILDefaultWorkSource);
            if (RILJ_LOGD) {
                riljLog(rr.serialString() + "> " + requestToString(rr.mRequest));
            }
            try {
                if (mRadioVersion.greaterOrEqual(RADIO_HAL_VERSION_1_4)) {
                    android.hardware.radio.V1_4.IRadio radioProxy14 = (android.hardware.radio.V1_4.IRadio) radioProxy;
                    radioProxy14.startNetworkScan_1_4(rr.mSerial, request);
                } else {
                    android.hardware.radio.V1_2.IRadio radioProxy12 = (android.hardware.radio.V1_2.IRadio) radioProxy;
                    radioProxy12.startNetworkScan_1_2(rr.mSerial, request);
                }
            } catch (RemoteException | RuntimeException e) {
                handleRadioProxyExceptionForRR(rr, "startNetworkScan", e);
            }
        } else if (mRadioVersion.greaterOrEqual(RADIO_HAL_VERSION_1_1)) {
            android.hardware.radio.V1_1.IRadio radioProxy11 = (android.hardware.radio.V1_1.IRadio) radioProxy;
            android.hardware.radio.V1_1.NetworkScanRequest request = new android.hardware.radio.V1_1.NetworkScanRequest();
            request.type = nsr.getScanType();
            request.interval = nsr.getSearchPeriodicity();
            for (RadioAccessSpecifier ras : nsr.getSpecifiers()) {
                android.hardware.radio.V1_1.RadioAccessSpecifier rasInHalFormat = convertRadioAccessSpecifierToRadioHAL(ras);
                if (rasInHalFormat == null) {
                    AsyncResult.forMessage(result, null, CommandException.fromRilErrno(REQUEST_NOT_SUPPORTED));
                    result.sendToTarget();
                    return;
                }
                request.specifiers.add(rasInHalFormat);
            }
            RILRequest rr = obtainRequest(RIL_REQUEST_START_NETWORK_SCAN, result, mRILDefaultWorkSource);
            if (RILJ_LOGD) {
                riljLog(rr.serialString() + "> " + requestToString(rr.mRequest));
            }
            try {
                radioProxy11.startNetworkScan(rr.mSerial, request);
            } catch (RemoteException | RuntimeException e) {
                handleRadioProxyExceptionForRR(rr, "startNetworkScan", e);
            }
        } else if (result != null) {
            AsyncResult.forMessage(result, null, CommandException.fromRilErrno(REQUEST_NOT_SUPPORTED));
            result.sendToTarget();
        }
    }
}