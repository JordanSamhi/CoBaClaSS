public synchronized void validate(int subId, long timeoutInMs, boolean releaseAfterValidation, ValidationCallback callback){
    if (subId == mSubId)
        return;
    if (!SubscriptionController.getInstance().isActiveSubId(subId)) {
        logd("Failed to start validation. Inactive subId " + subId);
        callback.onValidationDone(false, subId);
        return;
    }
    if (isValidating()) {
        stopValidation();
    }
    if (!sWaitForNetworkAvailableWhenCacheHit && mValidatedNetworkCache.isRecentlyValidated(subId)) {
        callback.onValidationDone(true, subId);
        return;
    }
    mState = STATE_VALIDATING;
    mSubId = subId;
    mTimeoutInMs = timeoutInMs;
    mValidationCallback = callback;
    mReleaseAfterValidation = releaseAfterValidation;
    mNetworkRequest = createNetworkRequest();
    logd("Start validating subId " + mSubId + " mTimeoutInMs " + mTimeoutInMs + " mReleaseAfterValidation " + mReleaseAfterValidation);
    mNetworkCallback = new ConnectivityNetworkCallback(subId);
    mConnectivityManager.requestNetwork(mNetworkRequest, mNetworkCallback, mHandler);
    mHandler.postDelayed(() -> onValidationTimeout(subId), mTimeoutInMs);
}