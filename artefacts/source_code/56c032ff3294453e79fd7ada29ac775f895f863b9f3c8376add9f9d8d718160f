public static AsyncTask<?, ?, ?> verifyTiedProfileChallenge(final LockPatternUtils utils, final LockscreenCredential credential, final long challenge, final int userId, final OnVerifyCallback callback){
    final LockscreenCredential credentialCopy = credential.duplicate();
    AsyncTask<Void, Void, byte[]> task = new AsyncTask<Void, Void, byte[]>() {

        private int mThrottleTimeout;

        @Override
        protected byte[] doInBackground(Void... args) {
            try {
                return utils.verifyTiedProfileChallenge(credentialCopy, challenge, userId);
            } catch (RequestThrottledException ex) {
                mThrottleTimeout = ex.getTimeoutMs();
                return null;
            }
        }

        @Override
        protected void onPostExecute(byte[] result) {
            callback.onVerified(result, mThrottleTimeout);
            credentialCopy.zeroize();
        }

        @Override
        protected void onCancelled() {
            credentialCopy.zeroize();
        }
    };
    task.execute();
    return task;
}