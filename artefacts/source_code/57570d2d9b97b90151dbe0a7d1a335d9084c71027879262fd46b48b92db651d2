public void writeFromThisBuffer(int srcOffset, int size){
    if (mReadLimit < 0) {
        throw new IllegalStateException("writeFromThisBuffer before startEditing");
    }
    if (srcOffset < getWritePos()) {
        throw new IllegalArgumentException("Can only move forward in the buffer --" + " srcOffset=" + srcOffset + " size=" + size + " " + getDebugString());
    }
    if (srcOffset + size > mReadableSize) {
        throw new IllegalArgumentException("Trying to move more data than there is --" + " srcOffset=" + srcOffset + " size=" + size + " " + getDebugString());
    }
    if (size == 0) {
        return;
    }
    if (srcOffset == ((mWriteBufIndex) * mChunkSize) + mWriteIndex) {
        if (size <= mChunkSize - mWriteIndex) {
            mWriteIndex += size;
        } else {
            size -= mChunkSize - mWriteIndex;
            mWriteIndex = size % mChunkSize;
            if (mWriteIndex == 0) {
                mWriteIndex = mChunkSize;
                mWriteBufIndex += (size / mChunkSize);
            } else {
                mWriteBufIndex += 1 + (size / mChunkSize);
            }
            mWriteBuffer = mBuffers.get(mWriteBufIndex);
        }
    } else {
        int readBufIndex = srcOffset / mChunkSize;
        byte[] readBuffer = mBuffers.get(readBufIndex);
        int readIndex = srcOffset % mChunkSize;
        while (size > 0) {
            if (mWriteIndex >= mChunkSize) {
                nextWriteBuffer();
            }
            if (readIndex >= mChunkSize) {
                readBufIndex++;
                readBuffer = mBuffers.get(readBufIndex);
                readIndex = 0;
            }
            final int spaceInWriteBuffer = mChunkSize - mWriteIndex;
            final int availableInReadBuffer = mChunkSize - readIndex;
            final int amt = Math.min(size, Math.min(spaceInWriteBuffer, availableInReadBuffer));
            System.arraycopy(readBuffer, readIndex, mWriteBuffer, mWriteIndex, amt);
            mWriteIndex += amt;
            readIndex += amt;
            size -= amt;
        }
    }
}