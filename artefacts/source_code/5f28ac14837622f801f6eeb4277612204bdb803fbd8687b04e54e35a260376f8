public static CharSequence toUpperCase(@Nullable Locale locale, @NonNull CharSequence source, boolean copySpans){
    final Edits edits = new Edits();
    if (!copySpans) {
        final StringBuilder result = CaseMap.toUpper().apply(locale, source, new StringBuilder(), edits);
        return edits.hasChanges() ? result : source;
    }
    final SpannableStringBuilder result = CaseMap.toUpper().apply(locale, source, new SpannableStringBuilder(), edits);
    if (!edits.hasChanges()) {
        return source;
    }
    final Edits.Iterator iterator = edits.getFineIterator();
    final int sourceLength = source.length();
    final Spanned spanned = (Spanned) source;
    final Object[] spans = spanned.getSpans(0, sourceLength, Object.class);
    for (Object span : spans) {
        final int sourceStart = spanned.getSpanStart(span);
        final int sourceEnd = spanned.getSpanEnd(span);
        final int flags = spanned.getSpanFlags(span);
        final int destStart = sourceStart == sourceLength ? result.length() : toUpperMapToDest(iterator, sourceStart);
        final int destEnd = sourceEnd == sourceLength ? result.length() : toUpperMapToDest(iterator, sourceEnd);
        result.setSpan(span, destStart, destEnd, flags);
    }
    return result;
}