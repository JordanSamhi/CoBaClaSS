public static boolean checkReadPhoneNumber(Context context, int subId, int pid, int uid, String callingPackage, @Nullable String callingFeatureId, String message){
    boolean preR = false;
    try {
        ApplicationInfo info = context.getPackageManager().getApplicationInfoAsUser(callingPackage, 0, UserHandle.getUserHandleForUid(Binder.getCallingUid()));
        preR = info.targetSdkVersion <= Build.VERSION_CODES.Q;
    } catch (PackageManager.NameNotFoundException nameNotFoundException) {
    }
    if (preR) {
        try {
            return checkReadPhoneState(context, subId, pid, uid, callingPackage, callingFeatureId, message);
        } catch (SecurityException readPhoneStateException) {
        }
    } else {
        try {
            context.enforcePermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE, pid, uid, message);
            return true;
        } catch (SecurityException readPrivilegedPhoneStateException) {
            if (SubscriptionManager.isValidSubscriptionId(subId)) {
                try {
                    enforceCarrierPrivilege(context, subId, uid, message);
                    return true;
                } catch (SecurityException carrierPrivilegeException) {
                }
            }
        }
    }
    AppOpsManager appOps = (AppOpsManager) context.getSystemService(Context.APP_OPS_SERVICE);
    if (appOps.noteOp(AppOpsManager.OPSTR_WRITE_SMS, uid, callingPackage, callingFeatureId, null) == AppOpsManager.MODE_ALLOWED) {
        return true;
    }
    try {
        context.enforcePermission(android.Manifest.permission.READ_SMS, pid, uid, message);
        if (appOps.noteOp(AppOpsManager.OPSTR_READ_SMS, uid, callingPackage, callingFeatureId, null) == AppOpsManager.MODE_ALLOWED) {
            return true;
        }
    } catch (SecurityException readSmsSecurityException) {
    }
    try {
        context.enforcePermission(android.Manifest.permission.READ_PHONE_NUMBERS, pid, uid, message);
        if (appOps.noteOp(AppOpsManager.OPSTR_READ_PHONE_NUMBERS, uid, callingPackage, callingFeatureId, null) == AppOpsManager.MODE_ALLOWED) {
            return true;
        }
    } catch (SecurityException readPhoneNumberSecurityException) {
    }
    throw new SecurityException(message + ": Neither user " + uid + " nor current process has " + android.Manifest.permission.READ_PHONE_STATE + ", " + android.Manifest.permission.READ_SMS + ", or " + android.Manifest.permission.READ_PHONE_NUMBERS);
}