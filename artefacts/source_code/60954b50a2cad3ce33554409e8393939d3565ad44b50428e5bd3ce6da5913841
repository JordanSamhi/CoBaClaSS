public static String serializeToXml(@NonNull Context context, @NonNull SystemInfo info, @NonNull String redirectUri){
    String macAddress = info.getMacAddress(IFNAME);
    if (macAddress != null) {
        macAddress = macAddress.replace(":", "");
    }
    if (TextUtils.isEmpty(macAddress)) {
        Log.e(TAG, "mac address is empty");
        return null;
    }
    MoSerializer moSerializer;
    try {
        moSerializer = new MoSerializer();
    } catch (ParserConfigurationException e) {
        Log.e(TAG, "failed to create the MoSerializer: " + e);
        return null;
    }
    Document doc = moSerializer.createNewDocument();
    Element rootElement = moSerializer.createMgmtTree(doc);
    rootElement.appendChild(moSerializer.writeVersion(doc));
    Element moNode = moSerializer.createNode(doc, MO_NAME);
    moNode.appendChild(moSerializer.createNodeForUrn(doc, URN));
    Element extNode = moSerializer.createNode(doc, TAG_EXT);
    Element orgNode = moSerializer.createNode(doc, TAG_ORG_WIFI);
    orgNode.appendChild(moSerializer.createNodeForUrn(doc, HS20_URN));
    Element wifiNode = moSerializer.createNode(doc, TAG_WIFI);
    Element eapMethodListNode = moSerializer.createNode(doc, TAG_EAP_METHOD_LIST);
    String tagName;
    Element eapMethodNode;
    int i = 0;
    for (Pair<Integer, String> entry : sEapMethods) {
        tagName = String.format("%s%02d", TAG_EAP_METHOD, ++i);
        eapMethodNode = moSerializer.createNode(doc, tagName);
        eapMethodNode.appendChild(moSerializer.createNodeForValue(doc, TAG_EAP_TYPE, entry.first.toString()));
        if (entry.second != null) {
            eapMethodNode.appendChild(moSerializer.createNodeForValue(doc, TAG_INNER_METHOD, entry.second));
        }
        eapMethodListNode.appendChild(eapMethodNode);
    }
    wifiNode.appendChild(eapMethodListNode);
    wifiNode.appendChild(moSerializer.createNodeForValue(doc, TAG_MANUFACTURING_CERT, "FALSE"));
    wifiNode.appendChild(moSerializer.createNodeForValue(doc, TAG_CLIENT_TRIGGER_REDIRECT_URI, redirectUri));
    wifiNode.appendChild(moSerializer.createNodeForValue(doc, TAG_WIFI_MAC_ADDR, macAddress));
    TelephonyManager telephonyManager = context.getSystemService(TelephonyManager.class);
    String imsi = telephonyManager.createForSubscriptionId(SubscriptionManager.getDefaultDataSubscriptionId()).getSubscriberId();
    if (imsi != null && sAllowToSendImsiImeiInfo) {
        wifiNode.appendChild(moSerializer.createNodeForValue(doc, TAG_IMSI, imsi));
        wifiNode.appendChild(moSerializer.createNodeForValue(doc, TAG_IMEI_MEID, info.getDeviceId()));
    }
    Element opsNode = moSerializer.createNode(doc, TAG_OPS);
    for (String op : sSupportedOps) {
        opsNode.appendChild(moSerializer.createNodeForValue(doc, op, ""));
    }
    wifiNode.appendChild(opsNode);
    orgNode.appendChild(wifiNode);
    extNode.appendChild(orgNode);
    moNode.appendChild(extNode);
    Element uriNode = moSerializer.createNode(doc, TAG_URI);
    uriNode.appendChild(moSerializer.createNodeForValue(doc, TAG_MAX_DEPTH, "32"));
    uriNode.appendChild(moSerializer.createNodeForValue(doc, TAG_MAX_TOT_LEN, "2048"));
    uriNode.appendChild(moSerializer.createNodeForValue(doc, TAG_MAX_SEG_LEN, "64"));
    moNode.appendChild(uriNode);
    moNode.appendChild(moSerializer.createNodeForValue(doc, TAG_OEM, info.getDeviceManufacturer()));
    moNode.appendChild(moSerializer.createNodeForValue(doc, TAG_SW_VER, info.getSoftwareVersion()));
    moNode.appendChild(moSerializer.createNodeForValue(doc, TAG_LRG_ORJ, "TRUE"));
    rootElement.appendChild(moNode);
    return moSerializer.serialize(doc);
}