public static void setVmPolicy(final VmPolicy policy){
    synchronized (StrictMode.class) {
        sVmPolicy = policy;
        setCloseGuardEnabled(vmClosableObjectLeaksEnabled());
        Looper looper = Looper.getMainLooper();
        if (looper != null) {
            MessageQueue mq = looper.mQueue;
            if (policy.classInstanceLimit.size() == 0 || (sVmPolicy.mask & PENALTY_ALL) == 0) {
                mq.removeIdleHandler(sProcessIdleHandler);
                sIsIdlerRegistered = false;
            } else if (!sIsIdlerRegistered) {
                mq.addIdleHandler(sProcessIdleHandler);
                sIsIdlerRegistered = true;
            }
        }
        int networkPolicy = NETWORK_POLICY_ACCEPT;
        if ((sVmPolicy.mask & DETECT_VM_CLEARTEXT_NETWORK) != 0) {
            if ((sVmPolicy.mask & PENALTY_DEATH) != 0 || (sVmPolicy.mask & PENALTY_DEATH_ON_CLEARTEXT_NETWORK) != 0) {
                networkPolicy = NETWORK_POLICY_REJECT;
            } else {
                networkPolicy = NETWORK_POLICY_LOG;
            }
        }
        final INetworkManagementService netd = INetworkManagementService.Stub.asInterface(ServiceManager.getService(Context.NETWORKMANAGEMENT_SERVICE));
        if (netd != null) {
            try {
                netd.setUidCleartextNetworkPolicy(android.os.Process.myUid(), networkPolicy);
            } catch (RemoteException ignored) {
            }
        } else if (networkPolicy != NETWORK_POLICY_ACCEPT) {
            Log.w(TAG, "Dropping requested network policy due to missing service!");
        }
        if ((sVmPolicy.mask & DETECT_VM_NON_SDK_API_USAGE) != 0) {
            VMRuntime.setNonSdkApiUsageConsumer(sNonSdkApiUsageConsumer);
            VMRuntime.setDedupeHiddenApiWarnings(false);
        } else {
            VMRuntime.setNonSdkApiUsageConsumer(null);
            VMRuntime.setDedupeHiddenApiWarnings(true);
        }
        setBlockGuardVmPolicy(sVmPolicy.mask);
    }
}