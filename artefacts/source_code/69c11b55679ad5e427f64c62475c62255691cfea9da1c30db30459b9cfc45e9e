public void setBluetoothA2dpDeviceConnectionState(@NonNull BluetoothDevice device, @AudioService.BtProfileConnectionState int state, int profile, boolean suppressNoisyIntent, int musicDevice, int a2dpVolume){
    int delay;
    if (profile != BluetoothProfile.A2DP && profile != BluetoothProfile.A2DP_SINK) {
        throw new IllegalArgumentException("invalid profile " + profile);
    }
    synchronized (mDevicesLock) {
        if (profile == BluetoothProfile.A2DP && !suppressNoisyIntent) {
            @AudioService.ConnectionState
            int asState = (state == BluetoothA2dp.STATE_CONNECTED) ? AudioService.CONNECTION_STATE_CONNECTED : AudioService.CONNECTION_STATE_DISCONNECTED;
            delay = checkSendBecomingNoisyIntentInt(AudioSystem.DEVICE_OUT_BLUETOOTH_A2DP, asState, musicDevice);
        } else {
            delay = 0;
        }
        final int a2dpCodec = mDeviceBroker.getA2dpCodec(device);
        if (AudioService.DEBUG_DEVICES) {
            Log.i(TAG, "setBluetoothA2dpDeviceConnectionState device: " + device + " state: " + state + " delay(ms): " + delay + " codec:" + Integer.toHexString(a2dpCodec) + " suppressNoisyIntent: " + suppressNoisyIntent);
        }
        final BtHelper.BluetoothA2dpDeviceInfo a2dpDeviceInfo = new BtHelper.BluetoothA2dpDeviceInfo(device, a2dpVolume, a2dpCodec);
        if (profile == BluetoothProfile.A2DP) {
            mDeviceBroker.postA2dpSinkConnection(state, a2dpDeviceInfo, delay);
        } else {
            mDeviceBroker.postA2dpSourceConnection(state, a2dpDeviceInfo, delay);
        }
    }
}