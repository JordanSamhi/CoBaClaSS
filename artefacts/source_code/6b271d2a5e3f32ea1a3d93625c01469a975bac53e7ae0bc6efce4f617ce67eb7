public void dumpFilteredAssociationStatesProtoForProc(ProtoOutputStream proto, long fieldId, long now, ProcessState procState, final ProcessMap<ArraySet<PackageState>> proc2Pkg, final SparseArray<ArraySet<String>> uidToPkgMap){
    if (procState.isMultiPackage() && procState.getCommonProcess() != procState) {
        return;
    }
    ArrayMap<SourceKey, long[]> assocVals = new ArrayMap<>();
    final String procName = procState.getName();
    final int procUid = procState.getUid();
    final long procVersion = procState.getVersion();
    final ArraySet<PackageState> packages = proc2Pkg.get(procName, procUid);
    if (packages == null || packages.isEmpty()) {
        return;
    }
    for (int i = packages.size() - 1; i >= 0; i--) {
        final PackageState pkgState = packages.valueAt(i);
        final ArrayMap<String, AssociationState> associations = pkgState.mAssociations;
        for (int j = associations.size() - 1; j >= 0; j--) {
            final AssociationState assoc = associations.valueAt(j);
            if (!TextUtils.equals(assoc.getProcessName(), procName)) {
                continue;
            }
            final ArrayMap<SourceKey, SourceState> sources = assoc.mSources;
            for (int k = sources.size() - 1; k >= 0; k--) {
                final SourceKey key = sources.keyAt(k);
                final SourceState state = sources.valueAt(k);
                long[] vals = assocVals.get(key);
                if (vals == null) {
                    vals = new long[2];
                    assocVals.put(key, vals);
                }
                vals[0] += state.mDuration;
                vals[1] += state.mCount;
                if (state.mNesting > 0) {
                    vals[0] += now - state.mStartUptime;
                }
            }
        }
    }
    final IProcessStats procStatsService = IProcessStats.Stub.asInterface(ServiceManager.getService(SERVICE_NAME));
    if (procStatsService != null) {
        try {
            final long minimum = procStatsService.getMinAssociationDumpDuration();
            if (minimum > 0) {
                for (int i = assocVals.size() - 1; i >= 0; i--) {
                    final long[] vals = assocVals.valueAt(i);
                    if (vals[0] < minimum) {
                        assocVals.removeAt(i);
                    }
                }
            }
        } catch (RemoteException e) {
        }
    }
    if (!assocVals.isEmpty()) {
        for (int i = assocVals.size() - 1; i >= 0; i--) {
            final SourceKey key = assocVals.keyAt(i);
            final long[] vals = assocVals.valueAt(i);
            final long token = proto.start(fieldId);
            final int idx = uidToPkgMap.indexOfKey(key.mUid);
            ProcessState.writeCompressedProcessName(proto, ProcessStatsAssociationProto.ASSOC_PROCESS_NAME, key.mProcess, key.mPackage, idx >= 0 && uidToPkgMap.valueAt(idx).size() > 1);
            proto.write(ProcessStatsAssociationProto.ASSOC_UID, key.mUid);
            proto.write(ProcessStatsAssociationProto.TOTAL_COUNT, (int) vals[1]);
            proto.write(ProcessStatsAssociationProto.TOTAL_DURATION_SECS, (int) (vals[0] / 1000));
            proto.end(token);
        }
    }
}