public void requestBugReportWithDescription(@Nullable String shareTitle, @Nullable String shareDescription, int bugreportType){
    String type = null;
    switch(bugreportType) {
        case BugreportParams.BUGREPORT_MODE_FULL:
            type = "bugreportfull";
            break;
        case BugreportParams.BUGREPORT_MODE_INTERACTIVE:
            type = "bugreportplus";
            break;
        case BugreportParams.BUGREPORT_MODE_REMOTE:
            type = "bugreportremote";
            break;
        case BugreportParams.BUGREPORT_MODE_WEAR:
            type = "bugreportwear";
            break;
        case BugreportParams.BUGREPORT_MODE_TELEPHONY:
            type = "bugreporttelephony";
            break;
        case BugreportParams.BUGREPORT_MODE_WIFI:
            type = "bugreportwifi";
            break;
        default:
            throw new IllegalArgumentException("Provided bugreport type is not correct, value: " + bugreportType);
    }
    Slog.i(TAG, type + " requested by UID " + Binder.getCallingUid());
    enforceCallingPermission(android.Manifest.permission.DUMP, "requestBugReport");
    if (!TextUtils.isEmpty(shareTitle)) {
        if (shareTitle.length() > MAX_BUGREPORT_TITLE_SIZE) {
            String errorStr = "shareTitle should be less than " + MAX_BUGREPORT_TITLE_SIZE + " characters";
            throw new IllegalArgumentException(errorStr);
        }
        if (!TextUtils.isEmpty(shareDescription)) {
            if (shareDescription.length() > MAX_BUGREPORT_DESCRIPTION_SIZE) {
                String errorStr = "shareDescription should be less than " + MAX_BUGREPORT_DESCRIPTION_SIZE + " characters";
                throw new IllegalArgumentException(errorStr);
            }
        }
        Slog.d(TAG, "Bugreport notification title " + shareTitle + " description " + shareDescription);
    }
    Intent triggerShellBugreport = new Intent();
    triggerShellBugreport.setAction(INTENT_BUGREPORT_REQUESTED);
    triggerShellBugreport.setPackage(SHELL_APP_PACKAGE);
    triggerShellBugreport.putExtra(EXTRA_BUGREPORT_TYPE, bugreportType);
    triggerShellBugreport.addFlags(Intent.FLAG_RECEIVER_FOREGROUND);
    triggerShellBugreport.addFlags(Intent.FLAG_RECEIVER_INCLUDE_BACKGROUND);
    if (shareTitle != null) {
        triggerShellBugreport.putExtra(EXTRA_TITLE, shareTitle);
    }
    if (shareDescription != null) {
        triggerShellBugreport.putExtra(EXTRA_DESCRIPTION, shareDescription);
    }
    final long identity = Binder.clearCallingIdentity();
    try {
        mContext.sendBroadcast(triggerShellBugreport);
    } finally {
        Binder.restoreCallingIdentity(identity);
    }
}