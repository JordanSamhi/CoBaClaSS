public static void RGBToHSL(@IntRange(from = 0x0, to = 0xFF) int r, @IntRange(from = 0x0, to = 0xFF) int g, @IntRange(from = 0x0, to = 0xFF) int b, @NonNull float[] outHsl){
    final float rf = r / 255f;
    final float gf = g / 255f;
    final float bf = b / 255f;
    final float max = Math.max(rf, Math.max(gf, bf));
    final float min = Math.min(rf, Math.min(gf, bf));
    final float deltaMaxMin = max - min;
    float h, s;
    float l = (max + min) / 2f;
    if (max == min) {
        h = s = 0f;
    } else {
        if (max == rf) {
            h = ((gf - bf) / deltaMaxMin) % 6f;
        } else if (max == gf) {
            h = ((bf - rf) / deltaMaxMin) + 2f;
        } else {
            h = ((rf - gf) / deltaMaxMin) + 4f;
        }
        s = deltaMaxMin / (1f - Math.abs(2f * l - 1f));
    }
    h = (h * 60f) % 360f;
    if (h < 0) {
        h += 360f;
    }
    outHsl[0] = constrain(h, 0f, 360f);
    outHsl[1] = constrain(s, 0f, 1f);
    outHsl[2] = constrain(l, 0f, 1f);
}