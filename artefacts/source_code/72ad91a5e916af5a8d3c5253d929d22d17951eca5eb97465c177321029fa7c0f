public void requestScrollCapture(int displayId, @Nullable IBinder behindClient, int taskId, IScrollCaptureController controller){
    if (!checkCallingPermission(READ_FRAME_BUFFER, "requestScrollCapture()")) {
        throw new SecurityException("Requires READ_FRAME_BUFFER permission");
    }
    final long token = Binder.clearCallingIdentity();
    try {
        synchronized (mGlobalLock) {
            DisplayContent dc = mRoot.getDisplayContent(displayId);
            if (dc == null) {
                ProtoLog.e(WM_ERROR, "Invalid displayId for requestScrollCapture: %d", displayId);
                controller.onClientUnavailable();
                return;
            }
            WindowState topWindow = null;
            if (behindClient != null) {
                topWindow = windowForClientLocked(null, behindClient, true);
            }
            WindowState targetWindow = dc.findScrollCaptureTargetWindow(topWindow, taskId);
            if (targetWindow == null) {
                controller.onClientUnavailable();
                return;
            }
            try {
                targetWindow.mClient.requestScrollCapture(controller);
            } catch (RemoteException e) {
                ProtoLog.w(WM_ERROR, "requestScrollCapture: caught exception dispatching to window." + "token=%s", targetWindow.mClient.asBinder());
                controller.onClientUnavailable();
            }
        }
    } catch (RemoteException e) {
        ProtoLog.w(WM_ERROR, "requestScrollCapture: caught exception dispatching callback: %s", e);
    } finally {
        Binder.restoreCallingIdentity(token);
    }
}