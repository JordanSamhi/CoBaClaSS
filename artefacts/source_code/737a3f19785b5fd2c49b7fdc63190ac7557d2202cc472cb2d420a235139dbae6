public void readMetadata(FileMetadata info) throws IOException{
    if (info.size > 64 * 1024) {
        throw new IOException("Metadata too big; corrupt? size=" + info.size);
    }
    byte[] buffer = new byte[(int) info.size];
    if (readExactly(mInputStream, buffer, 0, (int) info.size) == info.size) {
        mBytesReadListener.onBytesRead(info.size);
    } else {
        throw new IOException("Unexpected EOF in widget data");
    }
    String[] str = new String[1];
    int offset = extractLine(buffer, 0, str);
    int version = Integer.parseInt(str[0]);
    if (version == BACKUP_MANIFEST_VERSION) {
        offset = extractLine(buffer, offset, str);
        final String pkg = str[0];
        if (info.packageName.equals(pkg)) {
            ByteArrayInputStream bin = new ByteArrayInputStream(buffer, offset, buffer.length - offset);
            DataInputStream in = new DataInputStream(bin);
            while (bin.available() > 0) {
                int token = in.readInt();
                int size = in.readInt();
                if (size > 64 * 1024) {
                    throw new IOException("Datum " + Integer.toHexString(token) + " too big; corrupt? size=" + info.size);
                }
                switch(token) {
                    case BACKUP_WIDGET_METADATA_TOKEN:
                        {
                            if (MORE_DEBUG) {
                                Slog.i(TAG, "Got widget metadata for " + info.packageName);
                            }
                            mWidgetData = new byte[size];
                            in.read(mWidgetData);
                            break;
                        }
                    default:
                        {
                            if (DEBUG) {
                                Slog.i(TAG, "Ignoring metadata blob " + Integer.toHexString(token) + " for " + info.packageName);
                            }
                            in.skipBytes(size);
                            break;
                        }
                }
            }
        } else {
            Slog.w(TAG, "Metadata mismatch: package " + info.packageName + " but widget data for " + pkg);
            Bundle monitoringExtras = BackupManagerMonitorUtils.putMonitoringExtra(null, EXTRA_LOG_EVENT_PACKAGE_NAME, info.packageName);
            monitoringExtras = BackupManagerMonitorUtils.putMonitoringExtra(monitoringExtras, BackupManagerMonitor.EXTRA_LOG_WIDGET_PACKAGE_NAME, pkg);
            mMonitor = BackupManagerMonitorUtils.monitorEvent(mMonitor, BackupManagerMonitor.LOG_EVENT_ID_WIDGET_METADATA_MISMATCH, null, LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY, monitoringExtras);
        }
    } else {
        Slog.w(TAG, "Unsupported metadata version " + version);
        Bundle monitoringExtras = BackupManagerMonitorUtils.putMonitoringExtra(null, EXTRA_LOG_EVENT_PACKAGE_NAME, info.packageName);
        monitoringExtras = BackupManagerMonitorUtils.putMonitoringExtra(monitoringExtras, EXTRA_LOG_EVENT_PACKAGE_VERSION, version);
        mMonitor = BackupManagerMonitorUtils.monitorEvent(mMonitor, BackupManagerMonitor.LOG_EVENT_ID_WIDGET_UNKNOWN_VERSION, null, LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY, monitoringExtras);
    }
}