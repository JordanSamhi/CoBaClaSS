public boolean saveToStore(boolean forceWrite){
    if (mPendingStoreRead) {
        Log.e(TAG, "Cannot save to store before store is read!");
        return false;
    }
    ArrayList<WifiConfiguration> sharedConfigurations = new ArrayList<>();
    ArrayList<WifiConfiguration> userConfigurations = new ArrayList<>();
    List<Integer> legacyPasspointNetId = new ArrayList<>();
    for (WifiConfiguration config : mConfiguredNetworks.valuesForAllUsers()) {
        if (config.ephemeral || (config.isPasspoint() && !config.isLegacyPasspointConfig)) {
            continue;
        }
        if (config.isLegacyPasspointConfig && doesUidBelongToCurrentUser(config.creatorUid)) {
            legacyPasspointNetId.add(config.networkId);
            if (!PasspointManager.addLegacyPasspointConfig(config)) {
                Log.e(TAG, "Failed to migrate legacy Passpoint config: " + config.FQDN);
            }
            continue;
        }
        config.isMostRecentlyConnected = mLruConnectionTracker.isMostRecentlyConnected(config);
        if (config.shared || !doesUidBelongToCurrentUser(config.creatorUid)) {
            sharedConfigurations.add(config);
        } else {
            userConfigurations.add(config);
        }
    }
    for (int networkId : legacyPasspointNetId) {
        mConfiguredNetworks.remove(networkId);
    }
    mNetworkListSharedStoreData.setConfigurations(sharedConfigurations);
    mNetworkListUserStoreData.setConfigurations(userConfigurations);
    mRandomizedMacStoreData.setMacMapping(mRandomizedMacAddressMapping);
    try {
        mWifiConfigStore.write(forceWrite);
    } catch (IOException | IllegalStateException e) {
        Log.wtf(TAG, "Writing to store failed. Saved networks maybe lost!", e);
        return false;
    } catch (XmlPullParserException e) {
        Log.wtf(TAG, "XML serialization for store failed. Saved networks maybe lost!", e);
        return false;
    }
    return true;
}