public long getCommittedStatsMerged(long highWaterMarkMs, int section, boolean doAggregate, List<ParcelFileDescriptor> committedStats, ProcessStats mergedStats){
    mAm.mContext.enforceCallingOrSelfPermission(android.Manifest.permission.PACKAGE_USAGE_STATS, null);
    long newHighWaterMark = highWaterMarkMs;
    mWriteLock.lock();
    try {
        ArrayList<String> files = getCommittedFiles(0, false, true);
        if (files != null) {
            String highWaterMarkStr = DateFormat.format("yyyy-MM-dd-HH-mm-ss", highWaterMarkMs).toString();
            ProcessStats stats = new ProcessStats(false);
            for (int i = files.size() - 1; i >= 0; i--) {
                String fileName = files.get(i);
                try {
                    String startTimeStr = fileName.substring(fileName.lastIndexOf(STATE_FILE_PREFIX) + STATE_FILE_PREFIX.length(), fileName.lastIndexOf(STATE_FILE_SUFFIX));
                    if (startTimeStr.compareToIgnoreCase(highWaterMarkStr) > 0) {
                        ParcelFileDescriptor pfd = ParcelFileDescriptor.open(new File(fileName), ParcelFileDescriptor.MODE_READ_ONLY);
                        InputStream is = new ParcelFileDescriptor.AutoCloseInputStream(pfd);
                        stats.reset();
                        stats.read(is);
                        is.close();
                        if (stats.mTimePeriodStartClock > newHighWaterMark) {
                            newHighWaterMark = stats.mTimePeriodStartClock;
                        }
                        if (doAggregate) {
                            mergedStats.add(stats);
                        } else if (committedStats != null) {
                            committedStats.add(protoToParcelFileDescriptor(stats, section));
                        }
                        if (stats.mReadError != null) {
                            Log.w(TAG, "Failure reading process stats: " + stats.mReadError);
                            continue;
                        }
                    }
                } catch (IOException e) {
                    Slog.w(TAG, "Failure opening procstat file " + fileName, e);
                } catch (IndexOutOfBoundsException e) {
                    Slog.w(TAG, "Failure to read and parse commit file " + fileName, e);
                }
            }
            if (doAggregate && committedStats != null) {
                committedStats.add(protoToParcelFileDescriptor(mergedStats, section));
            }
            return newHighWaterMark;
        }
    } catch (IOException e) {
        Slog.w(TAG, "Failure opening procstat file", e);
    } finally {
        mWriteLock.unlock();
    }
    return newHighWaterMark;
}