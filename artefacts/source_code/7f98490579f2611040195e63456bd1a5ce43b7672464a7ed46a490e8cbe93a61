public void startWatchingActive(@NonNull String[] ops, @CallbackExecutor @NonNull Executor executor, @NonNull OnOpActiveChangedListener callback){
    Objects.requireNonNull(ops);
    Objects.requireNonNull(executor);
    Objects.requireNonNull(callback);
    IAppOpsActiveCallback cb;
    synchronized (mActiveWatchers) {
        cb = mActiveWatchers.get(callback);
        if (cb != null) {
            return;
        }
        cb = new IAppOpsActiveCallback.Stub() {

            @Override
            public void opActiveChanged(int op, int uid, String packageName, boolean active) {
                executor.execute(() -> {
                    if (callback instanceof OnOpActiveChangedInternalListener) {
                        ((OnOpActiveChangedInternalListener) callback).onOpActiveChanged(op, uid, packageName, active);
                    }
                    if (sOpToString[op] != null) {
                        callback.onOpActiveChanged(sOpToString[op], uid, packageName, active);
                    }
                });
            }
        };
        mActiveWatchers.put(callback, cb);
    }
    final int[] rawOps = new int[ops.length];
    for (int i = 0; i < ops.length; i++) {
        rawOps[i] = strOpToOp(ops[i]);
    }
    try {
        mService.startWatchingActive(rawOps, cb);
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    }
}