public boolean validate(){
    if (mUpdateIntervalInMinutes == Long.MIN_VALUE) {
        Log.d(TAG, "Update interval not specified");
        return false;
    }
    if (mUpdateIntervalInMinutes == UPDATE_CHECK_INTERVAL_NEVER) {
        return true;
    }
    if (!TextUtils.equals(mUpdateMethod, UPDATE_METHOD_OMADM) && !TextUtils.equals(mUpdateMethod, UPDATE_METHOD_SSP)) {
        Log.d(TAG, "Unknown update method: " + mUpdateMethod);
        return false;
    }
    if (!TextUtils.equals(mRestriction, UPDATE_RESTRICTION_HOMESP) && !TextUtils.equals(mRestriction, UPDATE_RESTRICTION_ROAMING_PARTNER) && !TextUtils.equals(mRestriction, UPDATE_RESTRICTION_UNRESTRICTED)) {
        Log.d(TAG, "Unknown restriction: " + mRestriction);
        return false;
    }
    if (TextUtils.isEmpty(mServerUri)) {
        Log.d(TAG, "Missing update server URI");
        return false;
    }
    if (mServerUri.getBytes(StandardCharsets.UTF_8).length > MAX_URI_BYTES) {
        Log.d(TAG, "URI bytes exceeded the max: " + mServerUri.getBytes(StandardCharsets.UTF_8).length);
        return false;
    }
    if (TextUtils.isEmpty(mUsername)) {
        Log.d(TAG, "Missing username");
        return false;
    }
    if (mUsername.getBytes(StandardCharsets.UTF_8).length > MAX_USERNAME_BYTES) {
        Log.d(TAG, "Username bytes exceeded the max: " + mUsername.getBytes(StandardCharsets.UTF_8).length);
        return false;
    }
    if (TextUtils.isEmpty(mBase64EncodedPassword)) {
        Log.d(TAG, "Missing username");
        return false;
    }
    if (mBase64EncodedPassword.getBytes(StandardCharsets.UTF_8).length > MAX_PASSWORD_BYTES) {
        Log.d(TAG, "Password bytes exceeded the max: " + mBase64EncodedPassword.getBytes(StandardCharsets.UTF_8).length);
        return false;
    }
    try {
        Base64.decode(mBase64EncodedPassword, Base64.DEFAULT);
    } catch (IllegalArgumentException e) {
        Log.d(TAG, "Invalid encoding for password: " + mBase64EncodedPassword);
        return false;
    }
    if (TextUtils.isEmpty(mTrustRootCertUrl)) {
        Log.d(TAG, "Missing trust root certificate URL");
        return false;
    }
    if (mTrustRootCertUrl.getBytes(StandardCharsets.UTF_8).length > MAX_URL_BYTES) {
        Log.d(TAG, "Trust root cert URL bytes exceeded the max: " + mTrustRootCertUrl.getBytes(StandardCharsets.UTF_8).length);
        return false;
    }
    if (mTrustRootCertSha256Fingerprint == null) {
        Log.d(TAG, "Missing trust root certificate SHA-256 fingerprint");
        return false;
    }
    if (mTrustRootCertSha256Fingerprint.length != CERTIFICATE_SHA256_BYTES) {
        Log.d(TAG, "Incorrect size of trust root certificate SHA-256 fingerprint: " + mTrustRootCertSha256Fingerprint.length);
        return false;
    }
    return true;
}