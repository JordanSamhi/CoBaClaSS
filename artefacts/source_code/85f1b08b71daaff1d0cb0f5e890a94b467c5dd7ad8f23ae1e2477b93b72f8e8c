public void updateMobileRadioState(@Nullable final ModemActivityInfo activityInfo){
    if (DEBUG_ENERGY) {
        Slog.d(TAG, "Updating mobile radio stats with " + activityInfo);
    }
    ModemActivityInfo deltaInfo = getDeltaModemActivityInfo(activityInfo);
    addModemTxPowerToHistory(deltaInfo);
    NetworkStats delta = null;
    synchronized (mModemNetworkLock) {
        final NetworkStats latestStats = readNetworkStatsLocked(mModemIfaces);
        if (latestStats != null) {
            delta = NetworkStats.subtract(latestStats, mLastModemNetworkStats, null, null, mNetworkStatsPool.acquire());
            mNetworkStatsPool.release(mLastModemNetworkStats);
            mLastModemNetworkStats = latestStats;
        }
    }
    synchronized (this) {
        if (!mOnBatteryInternal) {
            if (delta != null) {
                mNetworkStatsPool.release(delta);
            }
            return;
        }
        if (deltaInfo != null) {
            mHasModemReporting = true;
            mModemActivity.getIdleTimeCounter().addCountLocked(deltaInfo.getIdleTimeMillis());
            mModemActivity.getSleepTimeCounter().addCountLocked(deltaInfo.getSleepTimeMillis());
            mModemActivity.getRxTimeCounter().addCountLocked(deltaInfo.getReceiveTimeMillis());
            for (int lvl = 0; lvl < ModemActivityInfo.TX_POWER_LEVELS; lvl++) {
                mModemActivity.getTxTimeCounters()[lvl].addCountLocked(deltaInfo.getTransmitPowerInfo().get(lvl).getTimeInMillis());
            }
            final double opVolt = mPowerProfile.getAveragePower(PowerProfile.POWER_MODEM_CONTROLLER_OPERATING_VOLTAGE) / 1000.0;
            if (opVolt != 0) {
                double energyUsed = deltaInfo.getSleepTimeMillis() * mPowerProfile.getAveragePower(PowerProfile.POWER_MODEM_CONTROLLER_SLEEP) + deltaInfo.getIdleTimeMillis() * mPowerProfile.getAveragePower(PowerProfile.POWER_MODEM_CONTROLLER_IDLE) + deltaInfo.getReceiveTimeMillis() * mPowerProfile.getAveragePower(PowerProfile.POWER_MODEM_CONTROLLER_RX);
                List<TransmitPower> txPowerInfo = deltaInfo.getTransmitPowerInfo();
                for (int i = 0; i < Math.min(txPowerInfo.size(), CellSignalStrength.getNumSignalStrengthLevels()); i++) {
                    energyUsed += txPowerInfo.get(i).getTimeInMillis() * mPowerProfile.getAveragePower(PowerProfile.POWER_MODEM_CONTROLLER_TX, i);
                }
                mModemActivity.getPowerCounter().addCountLocked((long) energyUsed);
                long monitoredRailChargeConsumedMaMs = (long) (mTmpRailStats.getCellularTotalEnergyUseduWs() / opVolt);
                mModemActivity.getMonitoredRailChargeConsumedMaMs().addCountLocked(monitoredRailChargeConsumedMaMs);
                mHistoryCur.modemRailChargeMah += (monitoredRailChargeConsumedMaMs / MILLISECONDS_IN_HOUR);
                addHistoryRecordLocked(mClocks.elapsedRealtime(), mClocks.uptimeMillis());
                mTmpRailStats.resetCellularTotalEnergyUsed();
            }
        }
        final long elapsedRealtimeMs = mClocks.elapsedRealtime();
        long radioTime = mMobileRadioActivePerAppTimer.getTimeSinceMarkLocked(elapsedRealtimeMs * 1000);
        mMobileRadioActivePerAppTimer.setMark(elapsedRealtimeMs);
        long totalRxPackets = 0;
        long totalTxPackets = 0;
        if (delta != null) {
            NetworkStats.Entry entry = new NetworkStats.Entry();
            final int size = delta.size();
            for (int i = 0; i < size; i++) {
                entry = delta.getValues(i, entry);
                if (entry.rxPackets == 0 && entry.txPackets == 0) {
                    continue;
                }
                if (DEBUG_ENERGY) {
                    Slog.d(TAG, "Mobile uid " + entry.uid + ": delta rx=" + entry.rxBytes + " tx=" + entry.txBytes + " rxPackets=" + entry.rxPackets + " txPackets=" + entry.txPackets);
                }
                totalRxPackets += entry.rxPackets;
                totalTxPackets += entry.txPackets;
                final Uid u = getUidStatsLocked(mapUid(entry.uid));
                u.noteNetworkActivityLocked(NETWORK_MOBILE_RX_DATA, entry.rxBytes, entry.rxPackets);
                u.noteNetworkActivityLocked(NETWORK_MOBILE_TX_DATA, entry.txBytes, entry.txPackets);
                if (entry.set == NetworkStats.SET_DEFAULT) {
                    u.noteNetworkActivityLocked(NETWORK_MOBILE_BG_RX_DATA, entry.rxBytes, entry.rxPackets);
                    u.noteNetworkActivityLocked(NETWORK_MOBILE_BG_TX_DATA, entry.txBytes, entry.txPackets);
                }
                mNetworkByteActivityCounters[NETWORK_MOBILE_RX_DATA].addCountLocked(entry.rxBytes);
                mNetworkByteActivityCounters[NETWORK_MOBILE_TX_DATA].addCountLocked(entry.txBytes);
                mNetworkPacketActivityCounters[NETWORK_MOBILE_RX_DATA].addCountLocked(entry.rxPackets);
                mNetworkPacketActivityCounters[NETWORK_MOBILE_TX_DATA].addCountLocked(entry.txPackets);
            }
            long totalPackets = totalRxPackets + totalTxPackets;
            if (totalPackets > 0) {
                for (int i = 0; i < size; i++) {
                    entry = delta.getValues(i, entry);
                    if (entry.rxPackets == 0 && entry.txPackets == 0) {
                        continue;
                    }
                    final Uid u = getUidStatsLocked(mapUid(entry.uid));
                    final long appPackets = entry.rxPackets + entry.txPackets;
                    final long appRadioTime = (radioTime * appPackets) / totalPackets;
                    u.noteMobileRadioActiveTimeLocked(appRadioTime);
                    radioTime -= appRadioTime;
                    totalPackets -= appPackets;
                    if (deltaInfo != null) {
                        ControllerActivityCounterImpl activityCounter = u.getOrCreateModemControllerActivityLocked();
                        if (totalRxPackets > 0 && entry.rxPackets > 0) {
                            final long rxMs = (entry.rxPackets * deltaInfo.getReceiveTimeMillis()) / totalRxPackets;
                            activityCounter.getRxTimeCounter().addCountLocked(rxMs);
                        }
                        if (totalTxPackets > 0 && entry.txPackets > 0) {
                            for (int lvl = 0; lvl < ModemActivityInfo.TX_POWER_LEVELS; lvl++) {
                                long txMs = entry.txPackets * deltaInfo.getTransmitPowerInfo().get(lvl).getTimeInMillis();
                                txMs /= totalTxPackets;
                                activityCounter.getTxTimeCounters()[lvl].addCountLocked(txMs);
                            }
                        }
                    }
                }
            }
            if (radioTime > 0) {
                mMobileRadioActiveUnknownTime.addCountLocked(radioTime);
                mMobileRadioActiveUnknownCount.addCountLocked(1);
            }
            mNetworkStatsPool.release(delta);
            delta = null;
        }
    }
}