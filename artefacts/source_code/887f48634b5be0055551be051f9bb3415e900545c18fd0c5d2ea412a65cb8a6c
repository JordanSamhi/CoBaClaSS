public void updateLevel(PersistableBundle cc, ServiceState ss){
    int[] rsrpThresholds, rsrqThresholds, rssnrThresholds;
    boolean rsrpOnly;
    if (cc == null) {
        mParametersUseForLevel = USE_RSRP;
        rsrpThresholds = sRsrpThresholds;
        rsrqThresholds = sRsrqThresholds;
        rssnrThresholds = sRssnrThresholds;
        rsrpOnly = false;
    } else {
        mParametersUseForLevel = cc.getInt(CarrierConfigManager.KEY_PARAMETERS_USED_FOR_LTE_SIGNAL_BAR_INT);
        if (DBG) {
            Rlog.i(LOG_TAG, "Using signal strength level: " + mParametersUseForLevel);
        }
        rsrpThresholds = cc.getIntArray(CarrierConfigManager.KEY_LTE_RSRP_THRESHOLDS_INT_ARRAY);
        if (rsrpThresholds == null)
            rsrpThresholds = sRsrpThresholds;
        if (DBG) {
            Rlog.i(LOG_TAG, "Applying LTE RSRP Thresholds: " + Arrays.toString(rsrpThresholds));
        }
        rsrqThresholds = cc.getIntArray(CarrierConfigManager.KEY_LTE_RSRQ_THRESHOLDS_INT_ARRAY);
        if (rsrqThresholds == null)
            rsrqThresholds = sRsrqThresholds;
        if (DBG) {
            Rlog.i(LOG_TAG, "Applying LTE RSRQ Thresholds: " + Arrays.toString(rsrqThresholds));
        }
        rssnrThresholds = cc.getIntArray(CarrierConfigManager.KEY_LTE_RSSNR_THRESHOLDS_INT_ARRAY);
        if (rssnrThresholds == null)
            rssnrThresholds = sRssnrThresholds;
        if (DBG) {
            Rlog.i(LOG_TAG, "Applying LTE RSSNR Thresholds: " + Arrays.toString(rssnrThresholds));
        }
        rsrpOnly = cc.getBoolean(CarrierConfigManager.KEY_USE_ONLY_RSRP_FOR_LTE_SIGNAL_BAR_BOOL, false);
    }
    int rsrpBoost = 0;
    if (ss != null) {
        rsrpBoost = ss.getLteEarfcnRsrpBoost();
    }
    int rsrp = inRangeOrUnavailable(mRsrp + rsrpBoost, MIN_LTE_RSRP, MAX_LTE_RSRP);
    if (rsrpOnly) {
        int level = updateLevelWithMeasure(rsrp, rsrpThresholds);
        if (DBG)
            log("updateLevel() - rsrp = " + level);
        if (level != SignalStrength.INVALID) {
            mLevel = level;
            return;
        }
    }
    int rsrpLevel = SignalStrength.INVALID;
    int rsrqLevel = SignalStrength.INVALID;
    int rssnrLevel = SignalStrength.INVALID;
    if (isLevelForParameter(USE_RSRP)) {
        rsrpLevel = updateLevelWithMeasure(rsrp, rsrpThresholds);
        if (DBG) {
            Rlog.i(LOG_TAG, "Updated 4G LTE RSRP Level: " + rsrpLevel);
        }
    }
    if (isLevelForParameter(USE_RSRQ)) {
        rsrqLevel = updateLevelWithMeasure(mRsrq, rsrqThresholds);
        if (DBG) {
            Rlog.i(LOG_TAG, "Updated 4G LTE RSRQ Level: " + rsrqLevel);
        }
    }
    if (isLevelForParameter(USE_RSSNR)) {
        rssnrLevel = updateLevelWithMeasure(mRssnr, rssnrThresholds);
        if (DBG) {
            Rlog.i(LOG_TAG, "Updated 4G LTE RSSNR Level: " + rssnrLevel);
        }
    }
    mLevel = Math.min(Math.min(rsrpLevel, rsrqLevel), rssnrLevel);
    if (mLevel == SignalStrength.INVALID) {
        int rssiLevel;
        if (mRssi > -51) {
            rssiLevel = SIGNAL_STRENGTH_NONE_OR_UNKNOWN;
        } else if (mRssi >= -89) {
            rssiLevel = SIGNAL_STRENGTH_GREAT;
        } else if (mRssi >= -97) {
            rssiLevel = SIGNAL_STRENGTH_GOOD;
        } else if (mRssi >= -103) {
            rssiLevel = SIGNAL_STRENGTH_MODERATE;
        } else if (mRssi >= -113) {
            rssiLevel = SIGNAL_STRENGTH_POOR;
        } else {
            rssiLevel = SIGNAL_STRENGTH_NONE_OR_UNKNOWN;
        }
        if (DBG)
            log("getLteLevel - rssi:" + mRssi + " rssiIconLevel:" + rssiLevel);
        mLevel = rssiLevel;
    }
}