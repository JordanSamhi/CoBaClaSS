public int addSubInfo(String uniqueId, String displayName, int slotIndex, int subscriptionType){
    if (DBG) {
        String iccIdStr = uniqueId;
        if (!isSubscriptionForRemoteSim(subscriptionType)) {
            iccIdStr = SubscriptionInfo.givePrintableIccid(uniqueId);
        }
        logdl("[addSubInfoRecord]+ iccid: " + iccIdStr + ", slotIndex: " + slotIndex + ", subscriptionType: " + subscriptionType);
    }
    enforceModifyPhoneState("addSubInfo");
    final long identity = Binder.clearCallingIdentity();
    try {
        if (uniqueId == null) {
            if (DBG)
                logdl("[addSubInfo]- null iccId");
            return -1;
        }
        ContentResolver resolver = mContext.getContentResolver();
        String selection = SubscriptionManager.ICC_ID + "=?";
        String[] args;
        if (isSubscriptionForRemoteSim(subscriptionType)) {
            selection += " AND " + SubscriptionManager.SUBSCRIPTION_TYPE + "=?";
            args = new String[] { uniqueId, Integer.toString(subscriptionType) };
        } else {
            selection += " OR " + SubscriptionManager.ICC_ID + "=?";
            args = new String[] { uniqueId, IccUtils.getDecimalSubstring(uniqueId) };
        }
        Cursor cursor = resolver.query(SubscriptionManager.CONTENT_URI, new String[] { SubscriptionManager.UNIQUE_KEY_SUBSCRIPTION_ID, SubscriptionManager.SIM_SLOT_INDEX, SubscriptionManager.NAME_SOURCE, SubscriptionManager.ICC_ID, SubscriptionManager.CARD_ID }, selection, args, null);
        boolean setDisplayName = false;
        try {
            boolean recordsDoNotExist = (cursor == null || !cursor.moveToFirst());
            if (isSubscriptionForRemoteSim(subscriptionType)) {
                if (recordsDoNotExist) {
                    slotIndex = SubscriptionManager.SLOT_INDEX_FOR_REMOTE_SIM_SUB;
                    Uri uri = insertEmptySubInfoRecord(uniqueId, displayName, slotIndex, subscriptionType);
                    if (DBG)
                        logd("[addSubInfoRecord] New record created: " + uri);
                } else {
                    if (DBG)
                        logdl("[addSubInfoRecord] Record already exists");
                }
            } else {
                if (recordsDoNotExist) {
                    setDisplayName = true;
                    Uri uri = insertEmptySubInfoRecord(uniqueId, slotIndex);
                    if (DBG)
                        logdl("[addSubInfoRecord] New record created: " + uri);
                } else {
                    int subId = cursor.getInt(0);
                    int oldSimInfoId = cursor.getInt(1);
                    int nameSource = cursor.getInt(2);
                    String oldIccId = cursor.getString(3);
                    String oldCardId = cursor.getString(4);
                    ContentValues value = new ContentValues();
                    if (slotIndex != oldSimInfoId) {
                        value.put(SubscriptionManager.SIM_SLOT_INDEX, slotIndex);
                    }
                    if (oldIccId != null && oldIccId.length() < uniqueId.length() && (oldIccId.equals(IccUtils.getDecimalSubstring(uniqueId)))) {
                        value.put(SubscriptionManager.ICC_ID, uniqueId);
                    }
                    UiccCard card = mUiccController.getUiccCardForPhone(slotIndex);
                    if (card != null) {
                        String cardId = card.getCardId();
                        if (cardId != null && cardId != oldCardId) {
                            value.put(SubscriptionManager.CARD_ID, cardId);
                        }
                    }
                    if (value.size() > 0) {
                        resolver.update(SubscriptionManager.getUriForSubscriptionId(subId), value, null, null);
                    }
                    if (DBG)
                        logdl("[addSubInfoRecord] Record already exists");
                }
            }
        } finally {
            if (cursor != null) {
                cursor.close();
            }
        }
        selection = SubscriptionManager.SIM_SLOT_INDEX + "=?";
        args = new String[] { String.valueOf(slotIndex) };
        if (isSubscriptionForRemoteSim(subscriptionType)) {
            selection = SubscriptionManager.ICC_ID + "=? AND " + SubscriptionManager.SUBSCRIPTION_TYPE + "=?";
            args = new String[] { uniqueId, Integer.toString(subscriptionType) };
        }
        cursor = resolver.query(SubscriptionManager.CONTENT_URI, null, selection, args, null);
        try {
            if (cursor != null && cursor.moveToFirst()) {
                do {
                    int subId = cursor.getInt(cursor.getColumnIndexOrThrow(SubscriptionManager.UNIQUE_KEY_SUBSCRIPTION_ID));
                    if (addToSubIdList(slotIndex, subId, subscriptionType)) {
                        int subIdCountMax = getActiveSubInfoCountMax();
                        int defaultSubId = getDefaultSubId();
                        if (DBG) {
                            logdl("[addSubInfoRecord]" + " sSlotIndexToSubIds.size=" + sSlotIndexToSubIds.size() + " slotIndex=" + slotIndex + " subId=" + subId + " defaultSubId=" + defaultSubId + " simCount=" + subIdCountMax);
                        }
                        if (!isSubscriptionForRemoteSim(subscriptionType)) {
                            if (!SubscriptionManager.isValidSubscriptionId(defaultSubId) || subIdCountMax == 1) {
                                logdl("setting default fallback subid to " + subId);
                                setDefaultFallbackSubId(subId, subscriptionType);
                            }
                            if (subIdCountMax == 1) {
                                if (DBG) {
                                    logdl("[addSubInfoRecord] one sim set defaults to subId=" + subId);
                                }
                                setDefaultDataSubId(subId);
                                setDefaultSmsSubId(subId);
                                setDefaultVoiceSubId(subId);
                            }
                        } else {
                            updateDefaultSubIdsIfNeeded(subId, subscriptionType);
                        }
                    } else {
                        if (DBG) {
                            logdl("[addSubInfoRecord] current SubId is already known, " + "IGNORE");
                        }
                    }
                    if (DBG) {
                        logdl("[addSubInfoRecord] hashmap(" + slotIndex + "," + subId + ")");
                    }
                } while (cursor.moveToNext());
            }
        } finally {
            if (cursor != null) {
                cursor.close();
            }
        }
        refreshCachedActiveSubscriptionInfoList();
        if (isSubscriptionForRemoteSim(subscriptionType)) {
            notifySubscriptionInfoChanged();
        } else {
            int subId = getSubIdUsingPhoneId(slotIndex);
            if (!SubscriptionManager.isValidSubscriptionId(subId)) {
                if (DBG) {
                    logdl("[addSubInfoRecord]- getSubId failed invalid subId = " + subId);
                }
                return -1;
            }
            if (setDisplayName) {
                String simCarrierName = mTelephonyManager.getSimOperatorName(subId);
                String nameToSet;
                if (!TextUtils.isEmpty(simCarrierName)) {
                    nameToSet = simCarrierName;
                } else {
                    nameToSet = "CARD " + Integer.toString(slotIndex + 1);
                }
                ContentValues value = new ContentValues();
                value.put(SubscriptionManager.DISPLAY_NAME, nameToSet);
                resolver.update(SubscriptionManager.getUriForSubscriptionId(subId), value, null, null);
                refreshCachedActiveSubscriptionInfoList();
                if (DBG)
                    logdl("[addSubInfoRecord] sim name = " + nameToSet);
            }
            if (DBG)
                logdl("[addSubInfoRecord]- info size=" + sSlotIndexToSubIds.size());
        }
    } finally {
        Binder.restoreCallingIdentity(identity);
    }
    return 0;
}