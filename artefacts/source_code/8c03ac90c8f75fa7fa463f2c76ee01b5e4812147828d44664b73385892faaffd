public static Drawable getDrawable(ResourceValue value, BridgeContext context, Theme theme){
    if (value == null) {
        return null;
    }
    String stringValue = value.getValue();
    if (RenderResources.REFERENCE_NULL.equals(stringValue)) {
        return null;
    }
    String lowerCaseValue = stringValue.toLowerCase();
    try {
        int color = getColor(stringValue);
        return new ColorDrawable(color);
    } catch (NumberFormatException ignore) {
    }
    Density density = Density.MEDIUM;
    if (value instanceof DensityBasedResourceValue) {
        density = ((DensityBasedResourceValue) value).getResourceDensity();
        if (density == Density.NODPI || density == Density.ANYDPI) {
            density = Density.getEnum(context.getConfiguration().densityDpi);
        }
    }
    if (lowerCaseValue.endsWith(NinePatch.EXTENSION_9PATCH)) {
        try {
            return getNinePatchDrawable(density, value.isFramework(), stringValue, context);
        } catch (IOException e) {
            Bridge.getLog().error(LayoutLog.TAG_RESOURCES_READ, "Failed to load " + stringValue, e, null, null);
        }
        return null;
    } else if (lowerCaseValue.endsWith(".xml") || value.getResourceType() == ResourceType.AAPT) {
        try {
            BridgeXmlBlockParser blockParser = getXmlBlockParser(context, value);
            if (blockParser != null) {
                Set<ResourceValue> visitedValues = context.getUserData(KEY_GET_DRAWABLE);
                if (visitedValues == null) {
                    visitedValues = new HashSet<>();
                    context.putUserData(KEY_GET_DRAWABLE, visitedValues);
                }
                if (!visitedValues.add(value)) {
                    Bridge.getLog().error(null, "Cyclic dependency in " + stringValue, null, null);
                    return null;
                }
                try {
                    return Drawable.createFromXml(context.getResources(), blockParser, theme);
                } finally {
                    visitedValues.remove(value);
                    blockParser.ensurePopped();
                }
            }
        } catch (Exception e) {
            Bridge.getLog().error(null, "Failed to parse file " + stringValue, e, null, null);
        }
        return null;
    } else {
        AssetRepository repository = getAssetRepository(context);
        if (repository.isFileResource(stringValue)) {
            try {
                Bitmap bitmap = Bridge.getCachedBitmap(stringValue, value.isFramework() ? null : context.getProjectKey());
                if (bitmap == null) {
                    InputStream stream;
                    try {
                        stream = repository.openNonAsset(0, stringValue, ACCESS_STREAMING);
                    } catch (FileNotFoundException e) {
                        stream = null;
                    }
                    bitmap = Bitmap_Delegate.createBitmap(stream, false, density);
                    Bridge.setCachedBitmap(stringValue, bitmap, value.isFramework() ? null : context.getProjectKey());
                }
                return new BitmapDrawable(context.getResources(), bitmap);
            } catch (IOException e) {
                Bridge.getLog().error(LayoutLog.TAG_RESOURCES_READ, "Failed to load " + stringValue, e, null, null);
            }
        }
    }
    return null;
}