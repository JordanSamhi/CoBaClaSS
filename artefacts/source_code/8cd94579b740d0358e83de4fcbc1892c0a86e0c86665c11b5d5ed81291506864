public int findDominantColorByHue(Bitmap bitmap, int samples){
    final int height = bitmap.getHeight();
    final int width = bitmap.getWidth();
    int sampleStride = (int) Math.sqrt((height * width) / samples);
    if (sampleStride < 1) {
        sampleStride = 1;
    }
    float[] hsv = mTmpHsv;
    Arrays.fill(hsv, 0);
    float[] hueScoreHistogram = mTmpHueScoreHistogram;
    Arrays.fill(hueScoreHistogram, 0);
    float highScore = -1;
    int bestHue = -1;
    int[] pixels = mTmpPixels;
    Arrays.fill(pixels, 0);
    int pixelCount = 0;
    for (int y = 0; y < height; y += sampleStride) {
        for (int x = 0; x < width; x += sampleStride) {
            int argb = bitmap.getPixel(x, y);
            int alpha = 0xFF & (argb >> 24);
            if (alpha < 0x80) {
                continue;
            }
            int rgb = argb | 0xFF000000;
            Color.colorToHSV(rgb, hsv);
            int hue = (int) hsv[0];
            if (hue < 0 || hue >= hueScoreHistogram.length) {
                continue;
            }
            if (pixelCount < samples) {
                pixels[pixelCount++] = rgb;
            }
            float score = hsv[1] * hsv[2];
            hueScoreHistogram[hue] += score;
            if (hueScoreHistogram[hue] > highScore) {
                highScore = hueScoreHistogram[hue];
                bestHue = hue;
            }
        }
    }
    SparseArray<Float> rgbScores = mTmpRgbScores;
    rgbScores.clear();
    int bestColor = 0xff000000;
    highScore = -1;
    for (int i = 0; i < pixelCount; i++) {
        int rgb = pixels[i];
        Color.colorToHSV(rgb, hsv);
        int hue = (int) hsv[0];
        if (hue == bestHue) {
            float s = hsv[1];
            float v = hsv[2];
            int bucket = (int) (s * 100) + (int) (v * 10000);
            float score = s * v;
            Float oldTotal = rgbScores.get(bucket);
            float newTotal = oldTotal == null ? score : oldTotal + score;
            rgbScores.put(bucket, newTotal);
            if (newTotal > highScore) {
                highScore = newTotal;
                bestColor = rgb;
            }
        }
    }
    return bestColor;
}