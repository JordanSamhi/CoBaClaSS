public void readMappingsLocked(){
    if (!mPackageMappingsFile.exists()) {
        return;
    }
    try (FileInputStream in = new AtomicFile(mPackageMappingsFile).openRead()) {
        UsageStatsProtoV2.readObfuscatedData(in, mPackagesTokenData);
    } catch (Exception e) {
        Slog.e(TAG, "Failed to read the obfuscated packages mapping file.", e);
        return;
    }
    final SparseArray<ArrayList<String>> tokensToPackagesMap = mPackagesTokenData.tokensToPackagesMap;
    final int tokensToPackagesMapSize = tokensToPackagesMap.size();
    for (int i = 0; i < tokensToPackagesMapSize; i++) {
        final int packageToken = tokensToPackagesMap.keyAt(i);
        final ArrayList<String> tokensMap = tokensToPackagesMap.valueAt(i);
        final ArrayMap<String, Integer> packageStringsMap = new ArrayMap<>();
        final int tokensMapSize = tokensMap.size();
        packageStringsMap.put(tokensMap.get(0), packageToken);
        for (int j = 1; j < tokensMapSize; j++) {
            packageStringsMap.put(tokensMap.get(j), j);
        }
        mPackagesTokenData.packagesToTokensMap.put(tokensMap.get(0), packageStringsMap);
    }
}