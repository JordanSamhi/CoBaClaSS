public boolean loadGroups(WifiP2pGroupList groups){
    synchronized (mLock) {
        if (!checkSupplicantP2pIfaceAndLogFailure("loadGroups"))
            return false;
        List<Integer> networkIds = listNetworks();
        if (networkIds == null || networkIds.isEmpty()) {
            return false;
        }
        for (Integer networkId : networkIds) {
            ISupplicantP2pNetwork network = getNetwork(networkId);
            if (network == null) {
                Log.e(TAG, "Failed to retrieve network object for " + networkId);
                continue;
            }
            SupplicantResult<Boolean> resultIsCurrent = new SupplicantResult("isCurrent(" + networkId + ")");
            try {
                network.isCurrent((SupplicantStatus status, boolean isCurrent) -> {
                    resultIsCurrent.setResult(status, isCurrent);
                });
            } catch (RemoteException e) {
                Log.e(TAG, "ISupplicantP2pIface exception: " + e);
                supplicantServiceDiedHandler();
            }
            if (!resultIsCurrent.isSuccess() || resultIsCurrent.getResult()) {
                Log.i(TAG, "Skipping current network");
                continue;
            }
            WifiP2pGroup group = new WifiP2pGroup();
            group.setNetworkId(networkId);
            SupplicantResult<ArrayList> resultSsid = new SupplicantResult("getSsid(" + networkId + ")");
            try {
                network.getSsid((SupplicantStatus status, ArrayList<Byte> ssid) -> {
                    resultSsid.setResult(status, ssid);
                });
            } catch (RemoteException e) {
                Log.e(TAG, "ISupplicantP2pIface exception: " + e);
                supplicantServiceDiedHandler();
            }
            if (resultSsid.isSuccess() && resultSsid.getResult() != null && !resultSsid.getResult().isEmpty()) {
                group.setNetworkName(NativeUtil.removeEnclosingQuotes(NativeUtil.encodeSsid(resultSsid.getResult())));
            }
            SupplicantResult<byte[]> resultBssid = new SupplicantResult("getBssid(" + networkId + ")");
            try {
                network.getBssid((SupplicantStatus status, byte[] bssid) -> {
                    resultBssid.setResult(status, bssid);
                });
            } catch (RemoteException e) {
                Log.e(TAG, "ISupplicantP2pIface exception: " + e);
                supplicantServiceDiedHandler();
            }
            if (resultBssid.isSuccess() && !ArrayUtils.isEmpty(resultBssid.getResult())) {
                WifiP2pDevice device = new WifiP2pDevice();
                device.deviceAddress = NativeUtil.macAddressFromByteArray(resultBssid.getResult());
                group.setOwner(device);
            }
            SupplicantResult<Boolean> resultIsGo = new SupplicantResult("isGo(" + networkId + ")");
            try {
                network.isGo((SupplicantStatus status, boolean isGo) -> {
                    resultIsGo.setResult(status, isGo);
                });
            } catch (RemoteException e) {
                Log.e(TAG, "ISupplicantP2pIface exception: " + e);
                supplicantServiceDiedHandler();
            }
            if (resultIsGo.isSuccess()) {
                group.setIsGroupOwner(resultIsGo.getResult());
            }
            groups.add(group);
        }
    }
    return true;
}