public Font build() throws IOException{
    if (mException != null) {
        throw new IOException("Failed to read font contents", mException);
    }
    if (mWeight == NOT_SPECIFIED || mItalic == NOT_SPECIFIED) {
        final int packed = FontFileUtil.analyzeStyle(mBuffer, mTtcIndex, mAxes);
        if (FontFileUtil.isSuccess(packed)) {
            if (mWeight == NOT_SPECIFIED) {
                mWeight = FontFileUtil.unpackWeight(packed);
            }
            if (mItalic == NOT_SPECIFIED) {
                mItalic = FontFileUtil.unpackItalic(packed) ? STYLE_ITALIC : STYLE_NORMAL;
            }
        } else {
            mWeight = 400;
            mItalic = STYLE_NORMAL;
        }
    }
    mWeight = Math.max(FontStyle.FONT_WEIGHT_MIN, Math.min(FontStyle.FONT_WEIGHT_MAX, mWeight));
    final boolean italic = (mItalic == STYLE_ITALIC);
    final int slant = (mItalic == STYLE_ITALIC) ? FontStyle.FONT_SLANT_ITALIC : FontStyle.FONT_SLANT_UPRIGHT;
    final long builderPtr = nInitBuilder();
    if (mAxes != null) {
        for (FontVariationAxis axis : mAxes) {
            nAddAxis(builderPtr, axis.getOpenTypeTagValue(), axis.getStyleValue());
        }
    }
    final ByteBuffer readonlyBuffer = mBuffer.asReadOnlyBuffer();
    final String filePath = mFile == null ? "" : mFile.getAbsolutePath();
    final long ptr = nBuild(builderPtr, readonlyBuffer, filePath, mWeight, italic, mTtcIndex);
    final Font font = new Font(ptr, readonlyBuffer, mFile, new FontStyle(mWeight, slant), mTtcIndex, mAxes, mLocaleList);
    sFontRegistry.registerNativeAllocation(font, ptr);
    return font;
}