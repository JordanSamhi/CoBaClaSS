public void getProcessStatesAndOomScoresForPIDs(int[] pids, int[] states, int[] scores){
    if (scores != null) {
        enforceCallingPermission(android.Manifest.permission.GET_PROCESS_STATE_AND_OOM_SCORE, "getProcessStatesAndOomScoresForPIDs()");
    }
    if (pids == null) {
        throw new NullPointerException("pids");
    } else if (states == null) {
        throw new NullPointerException("states");
    } else if (pids.length != states.length) {
        throw new IllegalArgumentException("pids and states arrays have different lengths!");
    } else if (scores != null && pids.length != scores.length) {
        throw new IllegalArgumentException("pids and scores arrays have different lengths!");
    }
    synchronized (mPidsSelfLocked) {
        for (int i = 0; i < pids.length; i++) {
            ProcessRecord pr = mPidsSelfLocked.get(pids[i]);
            if (pr != null) {
                final boolean isPendingTop = mPendingStartActivityUids.isPendingTopPid(pr.uid, pids[i]);
                states[i] = isPendingTop ? PROCESS_STATE_TOP : pr.getCurProcState();
                if (scores != null) {
                    scores[i] = isPendingTop ? (ProcessList.FOREGROUND_APP_ADJ - 1) : pr.curAdj;
                }
            } else {
                states[i] = PROCESS_STATE_NONEXISTENT;
                if (scores != null) {
                    scores[i] = ProcessList.INVALID_ADJ;
                }
            }
        }
    }
}