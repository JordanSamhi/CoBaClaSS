public Resources createBaseTokenResources(@NonNull IBinder token, @Nullable String resDir, @Nullable String[] splitResDirs, @Nullable String[] overlayDirs, @Nullable String[] libDirs, int displayId, @Nullable Configuration overrideConfig, @NonNull CompatibilityInfo compatInfo, @Nullable ClassLoader classLoader, @Nullable List<ResourcesLoader> loaders){
    try {
        Trace.traceBegin(Trace.TRACE_TAG_RESOURCES, "ResourcesManager#createBaseActivityResources");
        final ResourcesKey key = new ResourcesKey(resDir, splitResDirs, overlayDirs, libDirs, displayId, overrideConfig != null ? new Configuration(overrideConfig) : null, compatInfo, loaders == null ? null : loaders.toArray(new ResourcesLoader[0]));
        classLoader = classLoader != null ? classLoader : ClassLoader.getSystemClassLoader();
        if (DEBUG) {
            Slog.d(TAG, "createBaseActivityResources activity=" + token + " with key=" + key);
        }
        synchronized (this) {
            getOrCreateActivityResourcesStructLocked(token);
        }
        updateResourcesForActivity(token, overrideConfig, displayId, false);
        rebaseKeyForActivity(token, key);
        synchronized (this) {
            Resources resources = findResourcesForActivityLocked(token, key, classLoader);
            if (resources != null) {
                return resources;
            }
        }
        return createResources(token, key, classLoader);
    } finally {
        Trace.traceEnd(Trace.TRACE_TAG_RESOURCES);
    }
}