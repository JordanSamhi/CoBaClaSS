public byte[] buildAdnString(int recordSize){
    byte[] bcdNumber;
    byte[] byteTag;
    byte[] adnString;
    int footerOffset = recordSize - FOOTER_SIZE_BYTES;
    adnString = new byte[recordSize];
    for (int i = 0; i < recordSize; i++) {
        adnString[i] = (byte) 0xFF;
    }
    if (TextUtils.isEmpty(mNumber)) {
        Rlog.w(LOG_TAG, "[buildAdnString] Empty dialing number");
        return adnString;
    } else if (mNumber.length() > (ADN_DIALING_NUMBER_END - ADN_DIALING_NUMBER_START + 1) * 2) {
        Rlog.w(LOG_TAG, "[buildAdnString] Max length of dialing number is 20");
        return null;
    }
    byteTag = !TextUtils.isEmpty(mAlphaTag) ? GsmAlphabet.stringToGsm8BitPacked(mAlphaTag) : new byte[0];
    if (byteTag.length > footerOffset) {
        Rlog.w(LOG_TAG, "[buildAdnString] Max length of tag is " + footerOffset);
        return null;
    } else {
        bcdNumber = PhoneNumberUtils.numberToCalledPartyBCD(mNumber, PhoneNumberUtils.BCD_EXTENDED_TYPE_EF_ADN);
        System.arraycopy(bcdNumber, 0, adnString, footerOffset + ADN_TON_AND_NPI, bcdNumber.length);
        adnString[footerOffset + ADN_BCD_NUMBER_LENGTH] = (byte) (bcdNumber.length);
        adnString[footerOffset + ADN_CAPABILITY_ID] = (byte) 0xFF;
        adnString[footerOffset + ADN_EXTENSION_ID] = (byte) 0xFF;
        if (byteTag.length > 0) {
            System.arraycopy(byteTag, 0, adnString, 0, byteTag.length);
        }
        return adnString;
    }
}