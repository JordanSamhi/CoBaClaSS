public synchronized IOemHook getOemHookProxy(Message result){
    if (!SubscriptionManager.isValidPhoneId((mPhoneId)))
        return null;
    if (!mIsCellularSupported) {
        if (RILJ_LOGV)
            riljLog("getOemHookProxy: Not calling getService(): wifi-only");
        if (result != null) {
            AsyncResult.forMessage(result, null, CommandException.fromRilErrno(RADIO_NOT_AVAILABLE));
            result.sendToTarget();
        }
        return null;
    }
    if (mOemHookProxy != null) {
        return mOemHookProxy;
    }
    try {
        if (mDisabledOemHookServices.contains(mPhoneId)) {
            riljLoge("getOemHookProxy: mOemHookProxy for " + HIDL_SERVICE_NAME[mPhoneId] + " is disabled");
        } else {
            mOemHookProxy = IOemHook.getService(HIDL_SERVICE_NAME[mPhoneId], true);
            if (mOemHookProxy != null) {
                mOemHookProxy.setResponseFunctions(mOemHookResponse, mOemHookIndication);
            } else {
                mDisabledOemHookServices.add(mPhoneId);
                riljLoge("getOemHookProxy: mOemHookProxy for " + HIDL_SERVICE_NAME[mPhoneId] + " is disabled");
            }
        }
    } catch (NoSuchElementException e) {
        mOemHookProxy = null;
        riljLoge("IOemHook service is not on the device HAL: " + e);
    } catch (RemoteException e) {
        mOemHookProxy = null;
        riljLoge("OemHookProxy getService/setResponseFunctions: " + e);
    }
    if (mOemHookProxy == null) {
        if (result != null) {
            AsyncResult.forMessage(result, null, CommandException.fromRilErrno(RADIO_NOT_AVAILABLE));
            result.sendToTarget();
        }
    }
    return mOemHookProxy;
}