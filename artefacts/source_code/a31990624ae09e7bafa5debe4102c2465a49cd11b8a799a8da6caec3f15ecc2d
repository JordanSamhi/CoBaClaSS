public void mux() throws IOException{
    MediaMuxer muxer = null;
    muxer = new MediaMuxer(mOutFile, mFormat);
    for (String file : mFiles) {
        MediaExtractor extractor = new MediaExtractor();
        try {
            extractor.setDataSource(file);
        } catch (IOException e) {
            Log.e(TAG, "error creating extractor: " + file);
            e.printStackTrace();
            continue;
        }
        Log.d(TAG, file + " track count: " + extractor.getTrackCount());
        mExtractors.add(extractor);
        for (int i = 0; i < extractor.getTrackCount(); i++) {
            int muxId = muxer.addTrack(extractor.getTrackFormat(i));
            Log.d(TAG, "created extractor format" + extractor.getTrackFormat(i).toString());
            mExtractorIndexToMuxerIndex.put(Pair.create(extractor, i), muxId);
        }
    }
    muxer.start();
    for (Pair<MediaExtractor, Integer> pair : mExtractorIndexToMuxerIndex.keySet()) {
        MediaExtractor extractor = pair.first;
        extractor.selectTrack(pair.second);
        int muxId = mExtractorIndexToMuxerIndex.get(pair);
        Log.d(TAG, "track format: " + extractor.getTrackFormat(pair.second));
        extractor.seekTo(0, MediaExtractor.SEEK_TO_CLOSEST_SYNC);
        ByteBuffer buffer = ByteBuffer.allocate(BUFFER_SIZE);
        MediaCodec.BufferInfo info = new MediaCodec.BufferInfo();
        int offset;
        while (true) {
            offset = buffer.arrayOffset();
            info.size = extractor.readSampleData(buffer, offset);
            if (info.size < 0)
                break;
            info.presentationTimeUs = extractor.getSampleTime();
            info.flags = extractor.getSampleFlags();
            muxer.writeSampleData(muxId, buffer, info);
            extractor.advance();
        }
    }
    for (MediaExtractor extractor : mExtractors) {
        extractor.release();
    }
    muxer.stop();
    muxer.release();
}