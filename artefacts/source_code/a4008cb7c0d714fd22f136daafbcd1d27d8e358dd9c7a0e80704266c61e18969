public static int convertRttStatusTypeToProtoEnum(int rttStatusType){
    switch(rttStatusType) {
        case RttNative.FRAMEWORK_RTT_STATUS_SUCCESS:
            return WifiMetricsProto.WifiRttLog.SUCCESS;
        case RttNative.FRAMEWORK_RTT_STATUS_FAILURE:
            return WifiMetricsProto.WifiRttLog.FAILURE;
        case RttNative.FRAMEWORK_RTT_STATUS_FAIL_NO_RSP:
            return WifiMetricsProto.WifiRttLog.FAIL_NO_RSP;
        case RttNative.FRAMEWORK_RTT_STATUS_FAIL_REJECTED:
            return WifiMetricsProto.WifiRttLog.FAIL_REJECTED;
        case RttNative.FRAMEWORK_RTT_STATUS_FAIL_NOT_SCHEDULED_YET:
            return WifiMetricsProto.WifiRttLog.FAIL_NOT_SCHEDULED_YET;
        case RttNative.FRAMEWORK_RTT_STATUS_FAIL_TM_TIMEOUT:
            return WifiMetricsProto.WifiRttLog.FAIL_TM_TIMEOUT;
        case RttNative.FRAMEWORK_RTT_STATUS_FAIL_AP_ON_DIFF_CHANNEL:
            return WifiMetricsProto.WifiRttLog.FAIL_AP_ON_DIFF_CHANNEL;
        case RttNative.FRAMEWORK_RTT_STATUS_FAIL_NO_CAPABILITY:
            return WifiMetricsProto.WifiRttLog.FAIL_NO_CAPABILITY;
        case RttNative.FRAMEWORK_RTT_STATUS_ABORTED:
            return WifiMetricsProto.WifiRttLog.ABORTED;
        case RttNative.FRAMEWORK_RTT_STATUS_FAIL_INVALID_TS:
            return WifiMetricsProto.WifiRttLog.FAIL_INVALID_TS;
        case RttNative.FRAMEWORK_RTT_STATUS_FAIL_PROTOCOL:
            return WifiMetricsProto.WifiRttLog.FAIL_PROTOCOL;
        case RttNative.FRAMEWORK_RTT_STATUS_FAIL_SCHEDULE:
            return WifiMetricsProto.WifiRttLog.FAIL_SCHEDULE;
        case RttNative.FRAMEWORK_RTT_STATUS_FAIL_BUSY_TRY_LATER:
            return WifiMetricsProto.WifiRttLog.FAIL_BUSY_TRY_LATER;
        case RttNative.FRAMEWORK_RTT_STATUS_INVALID_REQ:
            return WifiMetricsProto.WifiRttLog.INVALID_REQ;
        case RttNative.FRAMEWORK_RTT_STATUS_NO_WIFI:
            return WifiMetricsProto.WifiRttLog.NO_WIFI;
        case RttNative.FRAMEWORK_RTT_STATUS_FAIL_FTM_PARAM_OVERRIDE:
            return WifiMetricsProto.WifiRttLog.FAIL_FTM_PARAM_OVERRIDE;
        default:
            Log.e(TAG, "Unrecognized RttStatus: " + rttStatusType);
            return WifiMetricsProto.WifiRttLog.UNKNOWN;
    }
}