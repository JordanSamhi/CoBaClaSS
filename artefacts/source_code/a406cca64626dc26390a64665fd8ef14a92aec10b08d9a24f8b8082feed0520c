public float measure(@IntRange(from = 0) int offset, boolean trailing, @NonNull FontMetricsInt fmi){
    if (offset > mLen) {
        throw new IndexOutOfBoundsException("offset(" + offset + ") should be less than line limit(" + mLen + ")");
    }
    final int target = trailing ? offset - 1 : offset;
    if (target < 0) {
        return 0;
    }
    float h = 0;
    for (int runIndex = 0; runIndex < mDirections.getRunCount(); runIndex++) {
        final int runStart = mDirections.getRunStart(runIndex);
        if (runStart > mLen)
            break;
        final int runLimit = Math.min(runStart + mDirections.getRunLength(runIndex), mLen);
        final boolean runIsRtl = mDirections.isRunRtl(runIndex);
        int segStart = runStart;
        for (int j = mHasTabs ? runStart : runLimit; j <= runLimit; j++) {
            if (j == runLimit || charAt(j) == TAB_CHAR) {
                final boolean targetIsInThisSegment = target >= segStart && target < j;
                final boolean sameDirection = (mDir == Layout.DIR_RIGHT_TO_LEFT) == runIsRtl;
                if (targetIsInThisSegment && sameDirection) {
                    return h + measureRun(segStart, offset, j, runIsRtl, fmi);
                }
                final float segmentWidth = measureRun(segStart, j, j, runIsRtl, fmi);
                h += sameDirection ? segmentWidth : -segmentWidth;
                if (targetIsInThisSegment) {
                    return h + measureRun(segStart, offset, j, runIsRtl, null);
                }
                if (j != runLimit) {
                    if (offset == j) {
                        return h;
                    }
                    h = mDir * nextTab(h * mDir);
                    if (target == j) {
                        return h;
                    }
                }
                segStart = j + 1;
            }
        }
    }
    return h;
}