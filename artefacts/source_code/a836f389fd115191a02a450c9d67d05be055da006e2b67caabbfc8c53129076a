public boolean shouldListenForFace(){
    final boolean statusBarShadeLocked = mStatusBarStateController.getState() == StatusBarState.SHADE_LOCKED;
    final boolean awakeKeyguard = mKeyguardIsVisible && mDeviceInteractive && !mGoingToSleep && !statusBarShadeLocked;
    final int user = getCurrentUser();
    final int strongAuth = mStrongAuthTracker.getStrongAuthForUser(user);
    final boolean isLockDown = containsFlag(strongAuth, STRONG_AUTH_REQUIRED_AFTER_DPM_LOCK_NOW) || containsFlag(strongAuth, STRONG_AUTH_REQUIRED_AFTER_USER_LOCKDOWN);
    final boolean isEncryptedOrTimedOut = containsFlag(strongAuth, STRONG_AUTH_REQUIRED_AFTER_BOOT) || containsFlag(strongAuth, STRONG_AUTH_REQUIRED_AFTER_TIMEOUT);
    boolean canBypass = mKeyguardBypassController != null && mKeyguardBypassController.canBypass();
    boolean becauseCannotSkipBouncer = !getUserCanSkipBouncer(user) || canBypass;
    boolean strongAuthAllowsScanning = (!isEncryptedOrTimedOut || canBypass && !mBouncer) && !isLockDown;
    final boolean shouldListen = (mBouncer || mAuthInterruptActive || awakeKeyguard || shouldListenForFaceAssistant()) && !mSwitchingUser && !isFaceDisabled(user) && becauseCannotSkipBouncer && !mKeyguardGoingAway && mFaceSettingEnabledForUser.get(user) && !mLockIconPressed && strongAuthAllowsScanning && mIsPrimaryUser && !mSecureCameraLaunched;
    if (DEBUG_FACE || DEBUG_SPEW) {
        final KeyguardFaceListenModel model = new KeyguardFaceListenModel(System.currentTimeMillis(), user, shouldListen, mBouncer, mAuthInterruptActive, awakeKeyguard, shouldListenForFaceAssistant(), mSwitchingUser, isFaceDisabled(user), becauseCannotSkipBouncer, mKeyguardGoingAway, mFaceSettingEnabledForUser.get(user), mLockIconPressed, strongAuthAllowsScanning, mIsPrimaryUser, mSecureCameraLaunched);
        maybeLogFaceListenerModelData(model);
    }
    return shouldListen;
}