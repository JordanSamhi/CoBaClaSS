public void handleMessage(Message msg){
    switch(msg.what) {
        case EVENT_SEND_SMS_COMPLETE:
            handleSendComplete((AsyncResult) msg.obj);
            break;
        case EVENT_SEND_RETRY:
            Rlog.d(TAG, "SMS retry..");
            sendRetrySms((SmsTracker) msg.obj);
            break;
        case EVENT_SEND_LIMIT_REACHED_CONFIRMATION:
            handleReachSentLimit((SmsTracker[]) (msg.obj));
            break;
        case EVENT_CONFIRM_SEND_TO_POSSIBLE_PREMIUM_SHORT_CODE:
            handleConfirmShortCode(false, (SmsTracker[]) (msg.obj));
            break;
        case EVENT_CONFIRM_SEND_TO_PREMIUM_SHORT_CODE:
            handleConfirmShortCode(true, (SmsTracker[]) (msg.obj));
            break;
        case EVENT_SEND_CONFIRMED_SMS:
            {
                SmsTracker[] trackers = (SmsTracker[]) msg.obj;
                for (SmsTracker tracker : trackers) {
                    sendSms(tracker);
                }
                mPendingTrackerCount--;
                break;
            }
        case EVENT_SENDING_NOT_ALLOWED:
            {
                SmsTracker[] trackers = (SmsTracker[]) msg.obj;
                Rlog.d(TAG, "SMSDispatcher: EVENT_SENDING_NOT_ALLOWED - " + "sending SHORT_CODE_NEVER_ALLOWED error code.");
                handleSmsTrackersFailure(trackers, RESULT_ERROR_SHORT_CODE_NEVER_ALLOWED, NO_ERROR_CODE);
                break;
            }
        case EVENT_STOP_SENDING:
            {
                SmsTracker[] trackers = (SmsTracker[]) msg.obj;
                int error;
                if (msg.arg1 == ConfirmDialogListener.SHORT_CODE_MSG) {
                    if (msg.arg2 == ConfirmDialogListener.NEVER_ALLOW) {
                        error = RESULT_ERROR_SHORT_CODE_NEVER_ALLOWED;
                        Rlog.d(TAG, "SMSDispatcher: EVENT_STOP_SENDING - " + "sending SHORT_CODE_NEVER_ALLOWED error code.");
                    } else {
                        error = RESULT_ERROR_SHORT_CODE_NOT_ALLOWED;
                        Rlog.d(TAG, "SMSDispatcher: EVENT_STOP_SENDING - " + "sending SHORT_CODE_NOT_ALLOWED error code.");
                    }
                } else if (msg.arg1 == ConfirmDialogListener.RATE_LIMIT) {
                    error = RESULT_ERROR_LIMIT_EXCEEDED;
                    Rlog.d(TAG, "SMSDispatcher: EVENT_STOP_SENDING - " + "sending LIMIT_EXCEEDED error code.");
                } else {
                    error = SmsManager.RESULT_UNEXPECTED_EVENT_STOP_SENDING;
                    Rlog.e(TAG, "SMSDispatcher: EVENT_STOP_SENDING - unexpected cases.");
                }
                handleSmsTrackersFailure(trackers, error, NO_ERROR_CODE);
                mPendingTrackerCount--;
                break;
            }
        case EVENT_HANDLE_STATUS_REPORT:
            handleStatusReport(msg.obj);
            break;
        default:
            Rlog.e(TAG, "handleMessage() ignoring message of unexpected type " + msg.what);
    }
}