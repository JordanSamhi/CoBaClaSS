public void notifyValueChanged(View view){
    if (!hasAutofillFeature()) {
        return;
    }
    AutofillId id = null;
    boolean valueWasRead = false;
    AutofillValue value = null;
    synchronized (mLock) {
        if (mLastAutofilledData == null) {
            view.setAutofilled(false, false);
        } else {
            id = view.getAutofillId();
            if (mLastAutofilledData.containsKey(id)) {
                value = view.getAutofillValue();
                valueWasRead = true;
                final boolean hideHighlight = mLastAutofilledData.keySet().size() == 1;
                if (Objects.equals(mLastAutofilledData.get(id), value)) {
                    view.setAutofilled(true, hideHighlight);
                } else {
                    view.setAutofilled(false, false);
                    mLastAutofilledData.remove(id);
                }
            } else {
                view.setAutofilled(false, false);
            }
        }
        if (!mEnabled || !isActiveLocked()) {
            if (!startAutofillIfNeededLocked(view)) {
                if (sVerbose) {
                    Log.v(TAG, "notifyValueChanged(" + view.getAutofillId() + "): ignoring on state " + getStateAsStringLocked());
                }
            }
            return;
        }
        if (id == null) {
            id = view.getAutofillId();
        }
        if (!valueWasRead) {
            value = view.getAutofillValue();
        }
        updateSessionLocked(id, null, value, ACTION_VALUE_CHANGED, 0);
    }
}