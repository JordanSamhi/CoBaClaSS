public DumpTruck captureHeaps(List<Long> pids){
    final GarbageMonitor gm = Dependency.get(GarbageMonitor.class);
    final File dumpDir = new File(context.getCacheDir(), FILEPROVIDER_PATH);
    dumpDir.mkdirs();
    hprofUri = null;
    body.setLength(0);
    body.append("Build: ").append(Build.DISPLAY).append("\n\nProcesses:\n");
    final ArrayList<String> paths = new ArrayList<String>();
    final int myPid = android.os.Process.myPid();
    for (Long pidL : pids) {
        final int pid = pidL.intValue();
        body.append("  pid ").append(pid);
        if (gm != null) {
            GarbageMonitor.ProcessMemInfo info = gm.getMemInfo(pid);
            if (info != null) {
                body.append(":").append(" up=").append(info.getUptime()).append(" rss=").append(info.currentRss);
                rss = info.currentRss;
            }
        }
        if (pid == myPid) {
            final String path = new File(dumpDir, String.format("heap-%d.ahprof", pid)).getPath();
            Log.v(TAG, "Dumping memory info for process " + pid + " to " + path);
            try {
                android.os.Debug.dumpHprofData(path);
                paths.add(path);
                body.append(" (hprof attached)");
            } catch (IOException e) {
                Log.e(TAG, "error dumping memory:", e);
                body.append("\n** Could not dump heap: \n").append(e.toString()).append("\n");
            }
        }
        body.append("\n");
    }
    try {
        final String zipfile = new File(dumpDir, String.format("hprof-%d.zip", System.currentTimeMillis())).getCanonicalPath();
        if (DumpTruck.zipUp(zipfile, paths)) {
            final File pathFile = new File(zipfile);
            hprofUri = FileProvider.getUriForFile(context, FILEPROVIDER_AUTHORITY, pathFile);
            Log.v(TAG, "Heap dump accessible at URI: " + hprofUri);
        }
    } catch (IOException e) {
        Log.e(TAG, "unable to zip up heapdumps", e);
        body.append("\n** Could not zip up files: \n").append(e.toString()).append("\n");
    }
    return this;
}