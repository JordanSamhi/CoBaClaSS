public void sendDnsConfigurationForNetwork(int netId){
    final LinkProperties lp = mLinkPropertiesMap.get(netId);
    final int[] transportTypes = mTransportsMap.get(netId);
    if (lp == null || transportTypes == null)
        return;
    updateParametersSettings();
    final ResolverParamsParcel paramsParcel = new ResolverParamsParcel();
    final PrivateDnsConfig privateDnsCfg = mPrivateDnsMap.getOrDefault(netId, PRIVATE_DNS_OFF);
    final boolean useTls = privateDnsCfg.useTls;
    final boolean strictMode = privateDnsCfg.inStrictMode();
    paramsParcel.netId = netId;
    paramsParcel.sampleValiditySeconds = mSampleValidity;
    paramsParcel.successThreshold = mSuccessThreshold;
    paramsParcel.minSamples = mMinSamples;
    paramsParcel.maxSamples = mMaxSamples;
    paramsParcel.servers = NetworkUtils.makeStrings(lp.getDnsServers());
    paramsParcel.domains = getDomainStrings(lp.getDomains());
    paramsParcel.tlsName = strictMode ? privateDnsCfg.hostname : "";
    paramsParcel.tlsServers = strictMode ? NetworkUtils.makeStrings(Arrays.stream(privateDnsCfg.ips).filter((ip) -> lp.isReachable(ip)).collect(Collectors.toList())) : useTls ? paramsParcel.servers : new String[0];
    paramsParcel.resolverOptions = new ResolverOptionsParcel();
    paramsParcel.transportTypes = transportTypes;
    if (useTls) {
        if (!mPrivateDnsValidationMap.containsKey(netId)) {
            mPrivateDnsValidationMap.put(netId, new PrivateDnsValidationStatuses());
        }
        mPrivateDnsValidationMap.get(netId).updateTrackedDnses(paramsParcel.tlsServers, paramsParcel.tlsName);
    } else {
        mPrivateDnsValidationMap.remove(netId);
    }
    Slog.d(TAG, String.format("sendDnsConfigurationForNetwork(%d, %s, %s, %d, %d, %d, %d, " + "%d, %d, %s, %s)", paramsParcel.netId, Arrays.toString(paramsParcel.servers), Arrays.toString(paramsParcel.domains), paramsParcel.sampleValiditySeconds, paramsParcel.successThreshold, paramsParcel.minSamples, paramsParcel.maxSamples, paramsParcel.baseTimeoutMsec, paramsParcel.retryCount, paramsParcel.tlsName, Arrays.toString(paramsParcel.tlsServers)));
    try {
        mDnsResolver.setResolverConfiguration(paramsParcel);
    } catch (RemoteException | ServiceSpecificException e) {
        Slog.e(TAG, "Error setting DNS configuration: " + e);
        return;
    }
}