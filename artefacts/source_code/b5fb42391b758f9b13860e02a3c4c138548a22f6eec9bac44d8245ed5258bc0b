public JobInfo build(){
    if ((mNetworkDownloadBytes > 0 || mNetworkUploadBytes > 0) && mNetworkRequest == null) {
        throw new IllegalArgumentException("Can't provide estimated network usage without requiring a network");
    }
    if (mIsPersisted && mNetworkRequest != null && mNetworkRequest.networkCapabilities.getNetworkSpecifier() != null) {
        throw new IllegalArgumentException("Network specifiers aren't supported for persistent jobs");
    }
    if (mIsPeriodic) {
        if (mMaxExecutionDelayMillis != 0L) {
            throw new IllegalArgumentException("Can't call setOverrideDeadline() on a " + "periodic job.");
        }
        if (mMinLatencyMillis != 0L) {
            throw new IllegalArgumentException("Can't call setMinimumLatency() on a " + "periodic job");
        }
        if (mTriggerContentUris != null) {
            throw new IllegalArgumentException("Can't call addTriggerContentUri() on a " + "periodic job");
        }
    }
    if (mIsPersisted) {
        if (mTriggerContentUris != null) {
            throw new IllegalArgumentException("Can't call addTriggerContentUri() on a " + "persisted job");
        }
        if (!mTransientExtras.isEmpty()) {
            throw new IllegalArgumentException("Can't call setTransientExtras() on a " + "persisted job");
        }
        if (mClipData != null) {
            throw new IllegalArgumentException("Can't call setClipData() on a " + "persisted job");
        }
    }
    if ((mFlags & FLAG_IMPORTANT_WHILE_FOREGROUND) != 0 && mHasEarlyConstraint) {
        throw new IllegalArgumentException("An important while foreground job cannot " + "have a time delay");
    }
    if (mBackoffPolicySet && (mConstraintFlags & CONSTRAINT_FLAG_DEVICE_IDLE) != 0) {
        throw new IllegalArgumentException("An idle mode job will not respect any" + " back-off policy, so calling setBackoffCriteria with" + " setRequiresDeviceIdle is an error.");
    }
    return new JobInfo(this);
}