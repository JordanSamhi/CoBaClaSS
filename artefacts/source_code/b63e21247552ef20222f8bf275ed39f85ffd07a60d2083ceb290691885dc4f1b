public void dumpDebug(ProtoOutputStream proto, long now, int section){
    dumpProtoPreamble(proto);
    final int NPAGETYPES = mPageTypeLabels.size();
    for (int i = 0; i < NPAGETYPES; i++) {
        final long token = proto.start(ProcessStatsSectionProto.AVAILABLE_PAGES);
        proto.write(ProcessStatsAvailablePagesProto.NODE, mPageTypeNodes.get(i));
        proto.write(ProcessStatsAvailablePagesProto.ZONE, mPageTypeZones.get(i));
        proto.write(ProcessStatsAvailablePagesProto.LABEL, mPageTypeLabels.get(i));
        final int[] sizes = mPageTypeSizes.get(i);
        final int N = sizes == null ? 0 : sizes.length;
        for (int j = 0; j < N; j++) {
            proto.write(ProcessStatsAvailablePagesProto.PAGES_PER_ORDER, sizes[j]);
        }
        proto.end(token);
    }
    final ArrayMap<String, SparseArray<ProcessState>> procMap = mProcesses.getMap();
    if ((section & REPORT_PROC_STATS) != 0) {
        for (int ip = 0; ip < procMap.size(); ip++) {
            final String procName = procMap.keyAt(ip);
            final SparseArray<ProcessState> uids = procMap.valueAt(ip);
            for (int iu = 0; iu < uids.size(); iu++) {
                final int uid = uids.keyAt(iu);
                final ProcessState procState = uids.valueAt(iu);
                procState.dumpDebug(proto, ProcessStatsSectionProto.PROCESS_STATS, procName, uid, now);
            }
        }
    }
    if ((section & REPORT_PKG_STATS) != 0) {
        final ArrayMap<String, SparseArray<LongSparseArray<PackageState>>> pkgMap = mPackages.getMap();
        for (int ip = 0; ip < pkgMap.size(); ip++) {
            final SparseArray<LongSparseArray<PackageState>> uids = pkgMap.valueAt(ip);
            for (int iu = 0; iu < uids.size(); iu++) {
                final LongSparseArray<PackageState> vers = uids.valueAt(iu);
                for (int iv = 0; iv < vers.size(); iv++) {
                    final PackageState pkgState = vers.valueAt(iv);
                    pkgState.dumpDebug(proto, ProcessStatsSectionProto.PACKAGE_STATS, now, section);
                }
            }
        }
    }
}