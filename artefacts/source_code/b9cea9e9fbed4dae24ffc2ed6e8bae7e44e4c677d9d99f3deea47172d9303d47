public CountryResult lookupByCountry(@NonNull String isoCountryCode, long whenMillis){
    CountryTimeZones countryTimeZones = getCountryTimeZones(isoCountryCode);
    if (countryTimeZones == null) {
        return null;
    }
    TimeZone countryDefaultZone = countryTimeZones.getDefaultTimeZone();
    if (countryDefaultZone == null) {
        return null;
    }
    String debugInfo;
    int matchQuality;
    if (countryTimeZones.isDefaultTimeZoneBoosted()) {
        matchQuality = CountryResult.QUALITY_DEFAULT_BOOSTED;
        debugInfo = "Country default is boosted";
    } else {
        List<TimeZoneMapping> effectiveTimeZoneMappings = countryTimeZones.getEffectiveTimeZoneMappingsAt(whenMillis);
        if (effectiveTimeZoneMappings.isEmpty()) {
            matchQuality = QUALITY_MULTIPLE_ZONES_DIFFERENT_OFFSETS;
            debugInfo = "No effective time zones found at whenMillis=" + whenMillis;
        } else if (effectiveTimeZoneMappings.size() == 1) {
            matchQuality = CountryResult.QUALITY_SINGLE_ZONE;
            debugInfo = "One effective time zone found at whenMillis=" + whenMillis;
        } else {
            boolean countryUsesDifferentOffsets = countryUsesDifferentOffsets(whenMillis, effectiveTimeZoneMappings, countryDefaultZone);
            matchQuality = countryUsesDifferentOffsets ? QUALITY_MULTIPLE_ZONES_DIFFERENT_OFFSETS : QUALITY_MULTIPLE_ZONES_SAME_OFFSET;
            debugInfo = "countryUsesDifferentOffsets=" + countryUsesDifferentOffsets + " at" + " whenMillis=" + whenMillis;
        }
    }
    return new CountryResult(countryDefaultZone.getID(), matchQuality, debugInfo);
}