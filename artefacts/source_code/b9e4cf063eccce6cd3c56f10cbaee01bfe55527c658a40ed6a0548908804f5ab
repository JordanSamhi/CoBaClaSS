public void startAnimation(final PointF start, final List<RectangleWithTextSelectionLayout> destinationRectangles, final Runnable onAnimationEnd){
    cancelAnimation();
    final ValueAnimator.AnimatorUpdateListener updateListener = valueAnimator -> mInvalidator.run();
    final int rectangleCount = destinationRectangles.size();
    final List<RoundedRectangleShape> shapes = new ArrayList<>(rectangleCount);
    final List<Animator> cornerAnimators = new ArrayList<>(rectangleCount);
    RectangleWithTextSelectionLayout centerRectangle = null;
    int startingOffset = 0;
    for (RectangleWithTextSelectionLayout rectangleWithTextSelectionLayout : destinationRectangles) {
        final RectF rectangle = rectangleWithTextSelectionLayout.getRectangle();
        if (contains(rectangle, start)) {
            centerRectangle = rectangleWithTextSelectionLayout;
            break;
        }
        startingOffset += rectangle.width();
    }
    if (centerRectangle == null) {
        throw new IllegalArgumentException("Center point is not inside any of the rectangles!");
    }
    startingOffset += start.x - centerRectangle.getRectangle().left;
    @RoundedRectangleShape.ExpansionDirection
    final int[] expansionDirections = generateDirections(centerRectangle, destinationRectangles);
    for (int index = 0; index < rectangleCount; ++index) {
        final RectangleWithTextSelectionLayout rectangleWithTextSelectionLayout = destinationRectangles.get(index);
        final RectF rectangle = rectangleWithTextSelectionLayout.getRectangle();
        final RoundedRectangleShape shape = new RoundedRectangleShape(rectangle, expansionDirections[index], rectangleWithTextSelectionLayout.getTextSelectionLayout() == Layout.TEXT_SELECTION_LAYOUT_RIGHT_TO_LEFT);
        cornerAnimators.add(createCornerAnimator(shape, updateListener));
        shapes.add(shape);
    }
    final RectangleList rectangleList = new RectangleList(shapes);
    final ShapeDrawable shapeDrawable = new ShapeDrawable(rectangleList);
    final Paint paint = shapeDrawable.getPaint();
    paint.setColor(mFillColor);
    paint.setStyle(Paint.Style.FILL);
    mExistingRectangleList = rectangleList;
    mExistingDrawable = shapeDrawable;
    mActiveAnimator = createAnimator(rectangleList, startingOffset, startingOffset, cornerAnimators, updateListener, onAnimationEnd);
    mActiveAnimator.start();
}