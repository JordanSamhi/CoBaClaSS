public void registerAudioPlaybackCallback(@NonNull AudioPlaybackCallback cb, @Nullable Handler handler){
    if (cb == null) {
        throw new IllegalArgumentException("Illegal null AudioPlaybackCallback argument");
    }
    synchronized (mPlaybackCallbackLock) {
        if (mPlaybackCallbackList == null) {
            mPlaybackCallbackList = new ArrayList<AudioPlaybackCallbackInfo>();
        }
        final int oldCbCount = mPlaybackCallbackList.size();
        if (!hasPlaybackCallback_sync(cb)) {
            mPlaybackCallbackList.add(new AudioPlaybackCallbackInfo(cb, new ServiceEventHandlerDelegate(handler).getHandler()));
            final int newCbCount = mPlaybackCallbackList.size();
            if ((oldCbCount == 0) && (newCbCount > 0)) {
                try {
                    getService().registerPlaybackCallback(mPlayCb);
                } catch (RemoteException e) {
                    throw e.rethrowFromSystemServer();
                }
            }
        } else {
            Log.w(TAG, "attempt to call registerAudioPlaybackCallback() on a previously" + "registered callback");
        }
    }
}