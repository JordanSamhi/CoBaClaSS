public static AsyncTask<?, ?, ?> checkCredential(final LockPatternUtils utils, final LockscreenCredential credential, final int userId, final OnCheckCallback callback){
    final LockscreenCredential credentialCopy = credential.duplicate();
    AsyncTask<Void, Void, Boolean> task = new AsyncTask<Void, Void, Boolean>() {

        private int mThrottleTimeout;

        @Override
        protected Boolean doInBackground(Void... args) {
            try {
                return utils.checkCredential(credentialCopy, userId, callback::onEarlyMatched);
            } catch (RequestThrottledException ex) {
                mThrottleTimeout = ex.getTimeoutMs();
                return false;
            }
        }

        @Override
        protected void onPostExecute(Boolean result) {
            callback.onChecked(result, mThrottleTimeout);
            credentialCopy.zeroize();
        }

        @Override
        protected void onCancelled() {
            callback.onCancelled();
            credentialCopy.zeroize();
        }
    };
    task.execute();
    return task;
}