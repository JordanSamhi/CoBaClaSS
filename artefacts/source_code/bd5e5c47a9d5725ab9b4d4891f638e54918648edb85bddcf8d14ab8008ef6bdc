public void requestMacAddresses(int uid, List<Integer> peerIds, IWifiAwareMacAddressProvider callback){
    mSm.getHandler().post(() -> {
        if (VDBG)
            Log.v(TAG, "requestMacAddresses: uid=" + uid + ", peerIds=" + peerIds);
        Map<Integer, byte[]> peerIdToMacMap = new HashMap<>();
        for (int i = 0; i < mClients.size(); ++i) {
            WifiAwareClientState client = mClients.valueAt(i);
            if (client.getUid() != uid) {
                continue;
            }
            SparseArray<WifiAwareDiscoverySessionState> sessions = client.getSessions();
            for (int j = 0; j < sessions.size(); ++j) {
                WifiAwareDiscoverySessionState session = sessions.valueAt(j);
                for (int peerId : peerIds) {
                    WifiAwareDiscoverySessionState.PeerInfo peerInfo = session.getPeerInfo(peerId);
                    if (peerInfo != null) {
                        peerIdToMacMap.put(peerId, peerInfo.mMac);
                    }
                }
            }
        }
        try {
            if (mDbg)
                Log.v(TAG, "requestMacAddresses: peerIdToMacMap=" + peerIdToMacMap);
            callback.macAddress(peerIdToMacMap);
        } catch (RemoteException e) {
            Log.e(TAG, "requestMacAddress (sync): exception on callback -- " + e);
        }
    });
}