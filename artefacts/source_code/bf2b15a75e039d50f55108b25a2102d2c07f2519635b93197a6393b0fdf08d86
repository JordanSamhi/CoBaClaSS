public static final int analyzeStyle(@NonNull ByteBuffer buffer, @IntRange(from = 0) int ttcIndex, @Nullable FontVariationAxis[] varSettings){
    int weight = -1;
    int italic = -1;
    if (varSettings != null) {
        for (FontVariationAxis axis : varSettings) {
            if ("wght".equals(axis.getTag())) {
                weight = (int) axis.getStyleValue();
            } else if ("ital".equals(axis.getTag())) {
                italic = (axis.getStyleValue() == 1.0f) ? 1 : 0;
            }
        }
    }
    if (weight != -1 && italic != -1) {
        return pack(weight, italic == 1);
    }
    ByteOrder originalOrder = buffer.order();
    buffer.order(ByteOrder.BIG_ENDIAN);
    try {
        int fontFileOffset = 0;
        int magicNumber = buffer.getInt(0);
        if (magicNumber == TTC_TAG) {
            if (ttcIndex >= buffer.getInt(8)) {
                return ANALYZE_ERROR;
            }
            fontFileOffset = buffer.getInt(12 + 4 * ttcIndex);
        }
        int sfntVersion = buffer.getInt(fontFileOffset);
        if (sfntVersion != SFNT_VERSION_1 && sfntVersion != SFNT_VERSION_OTTO) {
            return ANALYZE_ERROR;
        }
        int numTables = buffer.getShort(fontFileOffset + 4);
        int os2TableOffset = -1;
        for (int i = 0; i < numTables; ++i) {
            int tableOffset = fontFileOffset + 12 + i * 16;
            if (buffer.getInt(tableOffset) == OS2_TABLE_TAG) {
                os2TableOffset = buffer.getInt(tableOffset + 8);
                break;
            }
        }
        if (os2TableOffset == -1) {
            return pack(400, false);
        }
        int weightFromOS2 = buffer.getShort(os2TableOffset + 4);
        boolean italicFromOS2 = (buffer.getShort(os2TableOffset + 62) & 1) != 0;
        return pack(weight == -1 ? weightFromOS2 : weight, italic == -1 ? italicFromOS2 : italic == 1);
    } finally {
        buffer.order(originalOrder);
    }
}