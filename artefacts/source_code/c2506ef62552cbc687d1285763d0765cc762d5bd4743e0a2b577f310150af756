public void init(){
    IntentFilter filter = new IntentFilter();
    filter.addAction(AudioManager.ACTION_HEADSET_PLUG);
    filter.addAction(Intent.ACTION_SIM_STATE_CHANGED);
    filter.addAction(TelecomManager.ACTION_CURRENT_TTY_MODE_CHANGED);
    filter.addAction(Intent.ACTION_MANAGED_PROFILE_AVAILABLE);
    filter.addAction(Intent.ACTION_MANAGED_PROFILE_UNAVAILABLE);
    filter.addAction(Intent.ACTION_MANAGED_PROFILE_REMOVED);
    mBroadcastDispatcher.registerReceiverWithHandler(mIntentReceiver, filter, mHandler);
    Observer<Integer> observer = ringer -> mHandler.post(this::updateVolumeZen);
    mRingerModeTracker.getRingerMode().observeForever(observer);
    mRingerModeTracker.getRingerModeInternal().observeForever(observer);
    try {
        mIActivityManager.registerUserSwitchObserver(mUserSwitchListener, TAG);
    } catch (RemoteException e) {
    }
    updateTTY();
    updateBluetooth();
    mIconController.setIcon(mSlotAlarmClock, R.drawable.stat_sys_alarm, null);
    mIconController.setIconVisibility(mSlotAlarmClock, false);
    mIconController.setIcon(mSlotZen, R.drawable.stat_sys_dnd, null);
    mIconController.setIconVisibility(mSlotZen, false);
    mIconController.setIcon(mSlotVolume, R.drawable.stat_sys_ringer_vibrate, null);
    mIconController.setIconVisibility(mSlotVolume, false);
    updateVolumeZen();
    mIconController.setIcon(mSlotCast, R.drawable.stat_sys_cast, null);
    mIconController.setIconVisibility(mSlotCast, false);
    mIconController.setIcon(mSlotHotspot, R.drawable.stat_sys_hotspot, mResources.getString(R.string.accessibility_status_bar_hotspot));
    mIconController.setIconVisibility(mSlotHotspot, mHotspot.isHotspotEnabled());
    mIconController.setIcon(mSlotManagedProfile, R.drawable.stat_sys_managed_profile_status, mResources.getString(R.string.accessibility_managed_profile));
    mIconController.setIconVisibility(mSlotManagedProfile, mManagedProfileIconVisible);
    mIconController.setIcon(mSlotDataSaver, R.drawable.stat_sys_data_saver, mResources.getString(R.string.accessibility_data_saver_on));
    mIconController.setIconVisibility(mSlotDataSaver, false);
    mIconController.setIcon(mSlotLocation, LOCATION_STATUS_ICON_ID, mResources.getString(R.string.accessibility_location_active));
    mIconController.setIconVisibility(mSlotLocation, false);
    mIconController.setIcon(mSlotSensorsOff, R.drawable.stat_sys_sensors_off, mResources.getString(R.string.accessibility_sensors_off_active));
    mIconController.setIconVisibility(mSlotSensorsOff, mSensorPrivacyController.isSensorPrivacyEnabled());
    mIconController.setIcon(mSlotScreenRecord, R.drawable.stat_sys_screen_record, null);
    mIconController.setIconVisibility(mSlotScreenRecord, false);
    mRotationLockController.addCallback(this);
    mBluetooth.addCallback(this);
    mProvisionedController.addCallback(this);
    mZenController.addCallback(this);
    mCast.addCallback(mCastCallback);
    mHotspot.addCallback(mHotspotCallback);
    mNextAlarmController.addCallback(mNextAlarmCallback);
    mDataSaver.addCallback(this);
    mKeyguardStateController.addCallback(this);
    mSensorPrivacyController.addCallback(mSensorPrivacyListener);
    mLocationController.addCallback(this);
    mRecordingController.addCallback(this);
    mCommandQueue.addCallback(this);
}