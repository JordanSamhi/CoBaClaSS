public boolean sendNetworkEapSimGsmAuthResponse(String paramsStr){
    synchronized (mLock) {
        try {
            Matcher match = GSM_AUTH_RESPONSE_PARAMS_PATTERN.matcher(paramsStr);
            ArrayList<ISupplicantStaNetwork.NetworkResponseEapSimGsmAuthParams> params = new ArrayList<>();
            while (match.find()) {
                if (match.groupCount() != 2) {
                    Log.e(TAG, "Malformed gsm auth response params: " + paramsStr);
                    return false;
                }
                ISupplicantStaNetwork.NetworkResponseEapSimGsmAuthParams param = new ISupplicantStaNetwork.NetworkResponseEapSimGsmAuthParams();
                byte[] kc = NativeUtil.hexStringToByteArray(match.group(1));
                if (kc == null || kc.length != param.kc.length) {
                    Log.e(TAG, "Invalid kc value: " + match.group(1));
                    return false;
                }
                byte[] sres = NativeUtil.hexStringToByteArray(match.group(2));
                if (sres == null || sres.length != param.sres.length) {
                    Log.e(TAG, "Invalid sres value: " + match.group(2));
                    return false;
                }
                System.arraycopy(kc, 0, param.kc, 0, param.kc.length);
                System.arraycopy(sres, 0, param.sres, 0, param.sres.length);
                params.add(param);
            }
            if (params.size() > 3 || params.size() < 2) {
                Log.e(TAG, "Malformed gsm auth response params: " + paramsStr);
                return false;
            }
            return sendNetworkEapSimGsmAuthResponse(params);
        } catch (IllegalArgumentException e) {
            Log.e(TAG, "Illegal argument " + paramsStr, e);
            return false;
        }
    }
}