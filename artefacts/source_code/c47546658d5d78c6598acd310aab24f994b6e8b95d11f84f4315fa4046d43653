public void onShellCommand(@Nullable FileDescriptor in, @Nullable FileDescriptor out, @Nullable FileDescriptor err, @NonNull String[] args, @Nullable ShellCallback callback, @NonNull ResultReceiver resultReceiver) throws RemoteException{
    final int callingUid = Binder.getCallingUid();
    if (callingUid != Process.ROOT_UID && callingUid != Process.SHELL_UID) {
        resultReceiver.send(-1, null);
        throw new SecurityException("Shell commands are only callable by ADB");
    }
    try {
        if (in == null) {
            in = new FileInputStream("/dev/null").getFD();
        }
        if (out == null) {
            out = new FileOutputStream("/dev/null").getFD();
        }
        if (err == null) {
            err = out;
        }
    } catch (IOException e) {
        PrintWriter pw = new FastPrintWriter(new FileOutputStream(err != null ? err : out));
        pw.println("Failed to open /dev/null: " + e.getMessage());
        pw.flush();
        resultReceiver.send(-1, null);
        return;
    }
    if (args == null) {
        args = new String[0];
    }
    int result = -1;
    try (ParcelFileDescriptor inPfd = ParcelFileDescriptor.dup(in);
        ParcelFileDescriptor outPfd = ParcelFileDescriptor.dup(out);
        ParcelFileDescriptor errPfd = ParcelFileDescriptor.dup(err)) {
        result = handleShellCommand(inPfd, outPfd, errPfd, args);
    } catch (IOException e) {
        PrintWriter pw = new FastPrintWriter(new FileOutputStream(err));
        pw.println("dup() failed: " + e.getMessage());
        pw.flush();
    } finally {
        resultReceiver.send(result, null);
    }
}