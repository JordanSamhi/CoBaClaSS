public static SmsCbMessage createFromCursor(@NonNull Cursor cursor){
    int geoScope = cursor.getInt(cursor.getColumnIndexOrThrow(CellBroadcasts.GEOGRAPHICAL_SCOPE));
    int serialNum = cursor.getInt(cursor.getColumnIndexOrThrow(CellBroadcasts.SERIAL_NUMBER));
    int category = cursor.getInt(cursor.getColumnIndexOrThrow(CellBroadcasts.SERVICE_CATEGORY));
    String language = cursor.getString(cursor.getColumnIndexOrThrow(CellBroadcasts.LANGUAGE_CODE));
    String body = cursor.getString(cursor.getColumnIndexOrThrow(CellBroadcasts.MESSAGE_BODY));
    int format = cursor.getInt(cursor.getColumnIndexOrThrow(CellBroadcasts.MESSAGE_FORMAT));
    int priority = cursor.getInt(cursor.getColumnIndexOrThrow(CellBroadcasts.MESSAGE_PRIORITY));
    int slotIndex = cursor.getInt(cursor.getColumnIndexOrThrow(CellBroadcasts.SLOT_INDEX));
    int subId = cursor.getInt(cursor.getColumnIndexOrThrow(CellBroadcasts.SUBSCRIPTION_ID));
    String plmn;
    int plmnColumn = cursor.getColumnIndex(CellBroadcasts.PLMN);
    if (plmnColumn != -1 && !cursor.isNull(plmnColumn)) {
        plmn = cursor.getString(plmnColumn);
    } else {
        plmn = null;
    }
    int lac;
    int lacColumn = cursor.getColumnIndex(CellBroadcasts.LAC);
    if (lacColumn != -1 && !cursor.isNull(lacColumn)) {
        lac = cursor.getInt(lacColumn);
    } else {
        lac = -1;
    }
    int cid;
    int cidColumn = cursor.getColumnIndex(CellBroadcasts.CID);
    if (cidColumn != -1 && !cursor.isNull(cidColumn)) {
        cid = cursor.getInt(cidColumn);
    } else {
        cid = -1;
    }
    SmsCbLocation location = new SmsCbLocation(plmn, lac, cid);
    SmsCbEtwsInfo etwsInfo;
    int etwsWarningTypeColumn = cursor.getColumnIndex(CellBroadcasts.ETWS_WARNING_TYPE);
    int etwsIsPrimaryColumn = cursor.getColumnIndex(CellBroadcasts.ETWS_IS_PRIMARY);
    if (etwsWarningTypeColumn != -1 && !cursor.isNull(etwsWarningTypeColumn) && etwsIsPrimaryColumn != -1 && !cursor.isNull(etwsIsPrimaryColumn)) {
        int warningType = cursor.getInt(etwsWarningTypeColumn);
        boolean isPrimary = cursor.getInt(etwsIsPrimaryColumn) != 0;
        etwsInfo = new SmsCbEtwsInfo(warningType, false, false, isPrimary, null);
    } else {
        etwsInfo = null;
    }
    SmsCbCmasInfo cmasInfo = null;
    int cmasMessageClassColumn = cursor.getColumnIndex(CellBroadcasts.CMAS_MESSAGE_CLASS);
    if (cmasMessageClassColumn != -1 && !cursor.isNull(cmasMessageClassColumn)) {
        int messageClass = cursor.getInt(cmasMessageClassColumn);
        int cmasCategory;
        int cmasCategoryColumn = cursor.getColumnIndex(CellBroadcasts.CMAS_CATEGORY);
        if (cmasCategoryColumn != -1 && !cursor.isNull(cmasCategoryColumn)) {
            cmasCategory = cursor.getInt(cmasCategoryColumn);
        } else {
            cmasCategory = SmsCbCmasInfo.CMAS_CATEGORY_UNKNOWN;
        }
        int responseType;
        int cmasResponseTypeColumn = cursor.getColumnIndex(CellBroadcasts.CMAS_RESPONSE_TYPE);
        if (cmasResponseTypeColumn != -1 && !cursor.isNull(cmasResponseTypeColumn)) {
            responseType = cursor.getInt(cmasResponseTypeColumn);
        } else {
            responseType = SmsCbCmasInfo.CMAS_RESPONSE_TYPE_UNKNOWN;
        }
        int severity;
        int cmasSeverityColumn = cursor.getColumnIndex(CellBroadcasts.CMAS_SEVERITY);
        if (cmasSeverityColumn != -1 && !cursor.isNull(cmasSeverityColumn)) {
            severity = cursor.getInt(cmasSeverityColumn);
        } else {
            severity = SmsCbCmasInfo.CMAS_SEVERITY_UNKNOWN;
        }
        int urgency;
        int cmasUrgencyColumn = cursor.getColumnIndex(CellBroadcasts.CMAS_URGENCY);
        if (cmasUrgencyColumn != -1 && !cursor.isNull(cmasUrgencyColumn)) {
            urgency = cursor.getInt(cmasUrgencyColumn);
        } else {
            urgency = SmsCbCmasInfo.CMAS_URGENCY_UNKNOWN;
        }
        int certainty;
        int cmasCertaintyColumn = cursor.getColumnIndex(CellBroadcasts.CMAS_CERTAINTY);
        if (cmasCertaintyColumn != -1 && !cursor.isNull(cmasCertaintyColumn)) {
            certainty = cursor.getInt(cmasCertaintyColumn);
        } else {
            certainty = SmsCbCmasInfo.CMAS_CERTAINTY_UNKNOWN;
        }
        cmasInfo = new SmsCbCmasInfo(messageClass, cmasCategory, responseType, severity, urgency, certainty);
    }
    String geoStr = cursor.getString(cursor.getColumnIndex(CellBroadcasts.GEOMETRIES));
    List<Geometry> geometries = geoStr != null ? CbGeoUtils.parseGeometriesFromString(geoStr) : null;
    long receivedTimeMillis = cursor.getLong(cursor.getColumnIndexOrThrow(CellBroadcasts.RECEIVED_TIME));
    int maximumWaitTimeSec = cursor.getInt(cursor.getColumnIndexOrThrow(CellBroadcasts.MAXIMUM_WAIT_TIME));
    return new SmsCbMessage(format, geoScope, serialNum, location, category, language, 0, body, priority, etwsInfo, cmasInfo, maximumWaitTimeSec, geometries, receivedTimeMillis, slotIndex, subId);
}