public void updateSubscriptionByCarrierConfig(int phoneId, String configPackageName, PersistableBundle config){
    if (!SubscriptionManager.isValidPhoneId(phoneId) || TextUtils.isEmpty(configPackageName) || config == null) {
        if (DBG) {
            logd("In updateSubscriptionByCarrierConfig(): phoneId=" + phoneId + " configPackageName=" + configPackageName + " config=" + ((config == null) ? "null" : config.hashCode()));
        }
        return;
    }
    SubscriptionController sc = SubscriptionController.getInstance();
    if (sc == null) {
        loge("SubscriptionController was null");
        return;
    }
    int currentSubId = sc.getSubIdUsingPhoneId(phoneId);
    if (!SubscriptionManager.isValidSubscriptionId(currentSubId) || currentSubId == SubscriptionManager.DEFAULT_SUBSCRIPTION_ID) {
        if (DBG)
            logd("No subscription is active for phone being updated");
        return;
    }
    SubscriptionInfo currentSubInfo = sc.getSubscriptionInfo(currentSubId);
    if (currentSubInfo == null) {
        loge("Couldn't retrieve subscription info for current subscription");
        return;
    }
    ContentValues cv = new ContentValues();
    ParcelUuid groupUuid = null;
    String[] certs = config.getStringArray(CarrierConfigManager.KEY_CARRIER_CERTIFICATE_STRING_ARRAY);
    if (certs != null) {
        UiccAccessRule[] carrierConfigAccessRules = new UiccAccessRule[certs.length];
        for (int i = 0; i < certs.length; i++) {
            carrierConfigAccessRules[i] = new UiccAccessRule(IccUtils.hexStringToBytes(certs[i]), null, 0);
        }
        cv.put(SubscriptionManager.ACCESS_RULES_FROM_CARRIER_CONFIGS, UiccAccessRule.encodeRules(carrierConfigAccessRules));
    }
    if (!isCarrierServicePackage(phoneId, configPackageName)) {
        loge("Cannot manage subId=" + currentSubId + ", carrierPackage=" + configPackageName);
    } else {
        boolean isOpportunistic = config.getBoolean(CarrierConfigManager.KEY_IS_OPPORTUNISTIC_SUBSCRIPTION_BOOL, false);
        if (currentSubInfo.isOpportunistic() != isOpportunistic) {
            if (DBG)
                logd("Set SubId=" + currentSubId + " isOpportunistic=" + isOpportunistic);
            cv.put(SubscriptionManager.IS_OPPORTUNISTIC, isOpportunistic ? "1" : "0");
        }
        String groupUuidString = config.getString(CarrierConfigManager.KEY_SUBSCRIPTION_GROUP_UUID_STRING, "");
        if (!TextUtils.isEmpty(groupUuidString)) {
            try {
                groupUuid = ParcelUuid.fromString(groupUuidString);
                if (groupUuid.equals(REMOVE_GROUP_UUID) && currentSubInfo.getGroupUuid() != null) {
                    cv.put(SubscriptionManager.GROUP_UUID, (String) null);
                    if (DBG)
                        logd("Group Removed for" + currentSubId);
                } else if (SubscriptionController.getInstance().canPackageManageGroup(groupUuid, configPackageName)) {
                    cv.put(SubscriptionManager.GROUP_UUID, groupUuid.toString());
                    cv.put(SubscriptionManager.GROUP_OWNER, configPackageName);
                    if (DBG)
                        logd("Group Added for" + currentSubId);
                } else {
                    loge("configPackageName " + configPackageName + " doesn't own grouUuid " + groupUuid);
                }
            } catch (IllegalArgumentException e) {
                loge("Invalid Group UUID=" + groupUuidString);
            }
        }
    }
    if (cv.size() > 0 && sContext.getContentResolver().update(SubscriptionManager.getUriForSubscriptionId(currentSubId), cv, null, null) > 0) {
        sc.refreshCachedActiveSubscriptionInfoList();
        sc.notifySubscriptionInfoChanged();
        MultiSimSettingController.getInstance().notifySubscriptionGroupChanged(groupUuid);
    }
}