public void syncAsUser(SyncRequest request, int userId, String callingPackage){
    enforceCrossUserPermission(userId, "no permission to request sync as user: " + userId);
    final int callingUid = Binder.getCallingUid();
    final int callingPid = Binder.getCallingPid();
    final Bundle extras = request.getBundle();
    validateExtras(callingUid, extras);
    final int syncExemption = getSyncExemptionAndCleanUpExtrasForCaller(callingUid, extras);
    long identityToken = clearCallingIdentity();
    try {
        SyncManager syncManager = getSyncManager();
        if (syncManager == null) {
            return;
        }
        long flextime = request.getSyncFlexTime();
        long runAtTime = request.getSyncRunTime();
        if (request.isPeriodic()) {
            mContext.enforceCallingOrSelfPermission(Manifest.permission.WRITE_SYNC_SETTINGS, "no permission to write the sync settings");
            SyncStorageEngine.EndPoint info;
            info = new SyncStorageEngine.EndPoint(request.getAccount(), request.getProvider(), userId);
            runAtTime = clampPeriod(runAtTime);
            getSyncManager().updateOrAddPeriodicSync(info, runAtTime, flextime, extras);
        } else {
            syncManager.scheduleSync(request.getAccount(), userId, callingUid, request.getProvider(), extras, SyncStorageEngine.AuthorityInfo.UNDEFINED, syncExemption, callingUid, callingPid, callingPackage);
        }
    } finally {
        restoreCallingIdentity(identityToken);
    }
}