public AccessibilityNodeInfo findAccessibilityNodeInfoByAccessibilityId(int connectionId, int accessibilityWindowId, long accessibilityNodeId, boolean bypassCache, int prefetchFlags, Bundle arguments){
    if ((prefetchFlags & AccessibilityNodeInfo.FLAG_PREFETCH_SIBLINGS) != 0 && (prefetchFlags & AccessibilityNodeInfo.FLAG_PREFETCH_PREDECESSORS) == 0) {
        throw new IllegalArgumentException("FLAG_PREFETCH_SIBLINGS" + " requires FLAG_PREFETCH_PREDECESSORS");
    }
    try {
        IAccessibilityServiceConnection connection = getConnection(connectionId);
        if (connection != null) {
            if (!bypassCache) {
                AccessibilityNodeInfo cachedInfo = sAccessibilityCache.getNode(accessibilityWindowId, accessibilityNodeId);
                if (cachedInfo != null) {
                    if (DEBUG) {
                        Log.i(LOG_TAG, "Node cache hit for " + idToString(accessibilityWindowId, accessibilityNodeId));
                    }
                    return cachedInfo;
                }
                if (DEBUG) {
                    Log.i(LOG_TAG, "Node cache miss for " + idToString(accessibilityWindowId, accessibilityNodeId));
                }
            } else {
                prefetchFlags &= ~AccessibilityNodeInfo.FLAG_PREFETCH_MASK;
            }
            if ((prefetchFlags & AccessibilityNodeInfo.FLAG_PREFETCH_MASK) != 0 && isWindowScrolling(accessibilityWindowId)) {
                prefetchFlags &= ~AccessibilityNodeInfo.FLAG_PREFETCH_MASK;
            }
            final int interactionId = mInteractionIdCounter.getAndIncrement();
            final long identityToken = Binder.clearCallingIdentity();
            final String[] packageNames;
            try {
                packageNames = connection.findAccessibilityNodeInfoByAccessibilityId(accessibilityWindowId, accessibilityNodeId, interactionId, this, prefetchFlags, Thread.currentThread().getId(), arguments);
            } finally {
                Binder.restoreCallingIdentity(identityToken);
            }
            if (packageNames != null) {
                List<AccessibilityNodeInfo> infos = getFindAccessibilityNodeInfosResultAndClear(interactionId);
                finalizeAndCacheAccessibilityNodeInfos(infos, connectionId, bypassCache, packageNames);
                if (infos != null && !infos.isEmpty()) {
                    for (int i = 1; i < infos.size(); i++) {
                        infos.get(i).recycle();
                    }
                    return infos.get(0);
                }
            }
        } else {
            if (DEBUG) {
                Log.w(LOG_TAG, "No connection for connection id: " + connectionId);
            }
        }
    } catch (RemoteException re) {
        Log.e(LOG_TAG, "Error while calling remote" + " findAccessibilityNodeInfoByAccessibilityId", re);
    }
    return null;
}