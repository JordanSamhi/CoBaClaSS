public static BrightnessConfiguration loadFromXml(@NonNull XmlPullParser parser) throws IOException, XmlPullParserException{
    String description = null;
    List<Float> luxList = new ArrayList<>();
    List<Float> nitsList = new ArrayList<>();
    Map<String, BrightnessCorrection> correctionsByPackageName = new HashMap<>();
    Map<Integer, BrightnessCorrection> correctionsByCategory = new HashMap<>();
    boolean shouldCollectColorSamples = false;
    long shortTermModelTimeout = SHORT_TERM_TIMEOUT_UNSET;
    float shortTermModelLowerLuxMultiplier = Float.NaN;
    float shortTermModelUpperLuxMultiplier = Float.NaN;
    final int configDepth = parser.getDepth();
    while (XmlUtils.nextElementWithin(parser, configDepth)) {
        if (TAG_BRIGHTNESS_CURVE.equals(parser.getName())) {
            description = parser.getAttributeValue(null, ATTR_DESCRIPTION);
            final int curveDepth = parser.getDepth();
            while (XmlUtils.nextElementWithin(parser, curveDepth)) {
                if (!TAG_BRIGHTNESS_POINT.equals(parser.getName())) {
                    continue;
                }
                final float lux = loadFloatFromXml(parser, ATTR_LUX);
                final float nits = loadFloatFromXml(parser, ATTR_NITS);
                luxList.add(lux);
                nitsList.add(nits);
            }
        } else if (TAG_BRIGHTNESS_CORRECTIONS.equals(parser.getName())) {
            final int correctionsDepth = parser.getDepth();
            while (XmlUtils.nextElementWithin(parser, correctionsDepth)) {
                if (!TAG_BRIGHTNESS_CORRECTION.equals(parser.getName())) {
                    continue;
                }
                final String packageName = parser.getAttributeValue(null, ATTR_PACKAGE_NAME);
                final String categoryText = parser.getAttributeValue(null, ATTR_CATEGORY);
                BrightnessCorrection correction = BrightnessCorrection.loadFromXml(parser);
                if (packageName != null) {
                    correctionsByPackageName.put(packageName, correction);
                } else if (categoryText != null) {
                    try {
                        final int category = Integer.parseInt(categoryText);
                        correctionsByCategory.put(category, correction);
                    } catch (NullPointerException | NumberFormatException e) {
                        continue;
                    }
                }
            }
        } else if (TAG_BRIGHTNESS_PARAMS.equals(parser.getName())) {
            shouldCollectColorSamples = Boolean.parseBoolean(parser.getAttributeValue(null, ATTR_COLLECT_COLOR));
            Long timeout = loadLongFromXml(parser, ATTR_MODEL_TIMEOUT);
            if (timeout != null) {
                shortTermModelTimeout = timeout;
            }
            shortTermModelLowerLuxMultiplier = loadFloatFromXml(parser, ATTR_MODEL_LOWER_BOUND);
            shortTermModelUpperLuxMultiplier = loadFloatFromXml(parser, ATTR_MODEL_UPPER_BOUND);
        }
    }
    final int n = luxList.size();
    float[] lux = new float[n];
    float[] nits = new float[n];
    for (int i = 0; i < n; i++) {
        lux[i] = luxList.get(i);
        nits[i] = nitsList.get(i);
    }
    final BrightnessConfiguration.Builder builder = new BrightnessConfiguration.Builder(lux, nits);
    builder.setDescription(description);
    for (Map.Entry<String, BrightnessCorrection> entry : correctionsByPackageName.entrySet()) {
        final String packageName = entry.getKey();
        final BrightnessCorrection correction = entry.getValue();
        builder.addCorrectionByPackageName(packageName, correction);
    }
    for (Map.Entry<Integer, BrightnessCorrection> entry : correctionsByCategory.entrySet()) {
        final int category = entry.getKey();
        final BrightnessCorrection correction = entry.getValue();
        builder.addCorrectionByCategory(category, correction);
    }
    builder.setShouldCollectColorSamples(shouldCollectColorSamples);
    builder.setShortTermModelTimeoutMillis(shortTermModelTimeout);
    builder.setShortTermModelLowerLuxMultiplier(shortTermModelLowerLuxMultiplier);
    builder.setShortTermModelUpperLuxMultiplier(shortTermModelUpperLuxMultiplier);
    return builder.build();
}