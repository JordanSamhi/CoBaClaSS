public void setDelegatedScopes(ComponentName who, String delegatePackage, List<String> scopeList) throws SecurityException{
    Objects.requireNonNull(who, "ComponentName is null");
    Preconditions.checkStringNotEmpty(delegatePackage, "Delegate package is null or empty");
    Preconditions.checkCollectionElementsNotNull(scopeList, "Scopes");
    final ArrayList<String> scopes = new ArrayList(new ArraySet(scopeList));
    if (scopes.retainAll(Arrays.asList(DELEGATIONS))) {
        throw new IllegalArgumentException("Unexpected delegation scopes");
    }
    final boolean hasDoDelegation = !Collections.disjoint(scopes, DEVICE_OWNER_DELEGATIONS);
    final int userId = mInjector.userHandleGetCallingUserId();
    synchronized (getLockObject()) {
        if (hasDoDelegation) {
            getActiveAdminForCallerLocked(who, DeviceAdminInfo.USES_POLICY_DEVICE_OWNER);
        } else {
            getActiveAdminForCallerLocked(who, DeviceAdminInfo.USES_POLICY_PROFILE_OWNER);
        }
        if (shouldCheckIfDelegatePackageIsInstalled(delegatePackage, getTargetSdk(who.getPackageName(), userId), scopes)) {
            if (!isPackageInstalledForUser(delegatePackage, userId)) {
                throw new IllegalArgumentException("Package " + delegatePackage + " is not installed on the current user");
            }
        }
        final DevicePolicyData policy = getUserData(userId);
        List<String> exclusiveScopes = null;
        if (!scopes.isEmpty()) {
            policy.mDelegationMap.put(delegatePackage, new ArrayList<>(scopes));
            exclusiveScopes = new ArrayList<>(scopes);
            exclusiveScopes.retainAll(EXCLUSIVE_DELEGATIONS);
        } else {
            policy.mDelegationMap.remove(delegatePackage);
        }
        sendDelegationChangedBroadcast(delegatePackage, scopes, userId);
        if (exclusiveScopes != null && !exclusiveScopes.isEmpty()) {
            for (int i = policy.mDelegationMap.size() - 1; i >= 0; --i) {
                final String currentPackage = policy.mDelegationMap.keyAt(i);
                final List<String> currentScopes = policy.mDelegationMap.valueAt(i);
                if (!currentPackage.equals(delegatePackage)) {
                    if (currentScopes.removeAll(exclusiveScopes)) {
                        if (currentScopes.isEmpty()) {
                            policy.mDelegationMap.removeAt(i);
                        }
                        sendDelegationChangedBroadcast(currentPackage, new ArrayList<>(currentScopes), userId);
                    }
                }
            }
        }
        saveSettingsLocked(userId);
    }
}