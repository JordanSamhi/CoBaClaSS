public boolean doAnimationFrame(long frameTime){
    float durationScale = ValueAnimator.getDurationScale();
    if (durationScale == 0f) {
        forceToEnd();
        return true;
    }
    if (mFirstFrame < 0) {
        mFirstFrame = frameTime;
    }
    if (mPaused) {
        mPauseTime = frameTime;
        removeAnimationCallback();
        return false;
    } else if (mPauseTime > 0) {
        mFirstFrame += (frameTime - mPauseTime);
        mPauseTime = -1;
    }
    if (mSeekState.isActive()) {
        mSeekState.updateSeekDirection(mReversing);
        if (mReversing) {
            mFirstFrame = (long) (frameTime - mSeekState.getPlayTime() * durationScale);
        } else {
            mFirstFrame = (long) (frameTime - (mSeekState.getPlayTime() + mStartDelay) * durationScale);
        }
        mSeekState.reset();
    }
    if (!mReversing && frameTime < mFirstFrame + mStartDelay * durationScale) {
        return false;
    }
    long unscaledPlayTime = (long) ((frameTime - mFirstFrame) / durationScale);
    mLastFrameTime = frameTime;
    int latestId = findLatestEventIdForTime(unscaledPlayTime);
    int startId = mLastEventId;
    handleAnimationEvents(startId, latestId, unscaledPlayTime);
    mLastEventId = latestId;
    for (int i = 0; i < mPlayingSet.size(); i++) {
        Node node = mPlayingSet.get(i);
        if (!node.mEnded) {
            pulseFrame(node, getPlayTimeForNode(unscaledPlayTime, node));
        }
    }
    for (int i = mPlayingSet.size() - 1; i >= 0; i--) {
        if (mPlayingSet.get(i).mEnded) {
            mPlayingSet.remove(i);
        }
    }
    boolean finished = false;
    if (mReversing) {
        if (mPlayingSet.size() == 1 && mPlayingSet.get(0) == mRootNode) {
            finished = true;
        } else if (mPlayingSet.isEmpty() && mLastEventId < 3) {
            finished = true;
        }
    } else {
        finished = mPlayingSet.isEmpty() && mLastEventId == mEvents.size() - 1;
    }
    if (finished) {
        endAnimation();
        return true;
    }
    return false;
}