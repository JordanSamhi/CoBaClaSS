public void setMode(int mode, IBinder cb, String callingPackage){
    if (DEBUG_MODE) {
        Log.v(TAG, "setMode(mode=" + mode + ", callingPackage=" + callingPackage + ")");
    }
    if (!checkAudioSettingsPermission("setMode()")) {
        return;
    }
    final boolean hasModifyPhoneStatePermission = mContext.checkCallingOrSelfPermission(android.Manifest.permission.MODIFY_PHONE_STATE) == PackageManager.PERMISSION_GRANTED;
    final int callingPid = Binder.getCallingPid();
    if ((mode == AudioSystem.MODE_IN_CALL) && !hasModifyPhoneStatePermission) {
        Log.w(TAG, "MODIFY_PHONE_STATE Permission Denial: setMode(MODE_IN_CALL) from pid=" + callingPid + ", uid=" + Binder.getCallingUid());
        return;
    }
    if (mode == AudioSystem.MODE_CALL_SCREENING && !mIsCallScreeningModeSupported) {
        Log.w(TAG, "setMode(MODE_CALL_SCREENING) not permitted " + "when call screening is not supported");
        return;
    }
    if (mode < AudioSystem.MODE_CURRENT || mode >= AudioSystem.NUM_MODES) {
        return;
    }
    int newModeOwnerPid;
    synchronized (mDeviceBroker.mSetModeLock) {
        if (mode == AudioSystem.MODE_CURRENT) {
            mode = mMode;
        }
        int oldModeOwnerPid = getModeOwnerPid();
        if (!((mode == mMode) || (mode == AudioSystem.MODE_NORMAL)) && ((mMode == AudioSystem.MODE_IN_CALL) || (mMode == AudioSystem.MODE_IN_COMMUNICATION)) && !(hasModifyPhoneStatePermission || (oldModeOwnerPid == callingPid))) {
            Log.w(TAG, "setMode(" + mode + ") from pid=" + callingPid + ", uid=" + Binder.getCallingUid() + ", cannot change mode from " + mMode + " without permission or being mode owner");
            return;
        }
        newModeOwnerPid = setModeInt(mode, cb, callingPid, Binder.getCallingUid(), callingPackage);
    }
    mDeviceBroker.postSetModeOwnerPid(newModeOwnerPid);
}