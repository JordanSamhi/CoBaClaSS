public void bind(@NonNull MediaData data){
    if (mViewHolder == null) {
        return;
    }
    MediaSession.Token token = data.getToken();
    mBackgroundColor = data.getBackgroundColor();
    if (mToken == null || !mToken.equals(token)) {
        mToken = token;
    }
    if (mToken != null) {
        mController = new MediaController(mContext, mToken);
    } else {
        mController = null;
    }
    ConstraintSet expandedSet = mMediaViewController.getExpandedLayout();
    ConstraintSet collapsedSet = mMediaViewController.getCollapsedLayout();
    mViewHolder.getPlayer().setBackgroundTintList(ColorStateList.valueOf(mBackgroundColor));
    PendingIntent clickIntent = data.getClickIntent();
    if (clickIntent != null) {
        mViewHolder.getPlayer().setOnClickListener(v -> {
            mActivityStarter.postStartActivityDismissingKeyguard(clickIntent);
        });
    }
    ImageView albumView = mViewHolder.getAlbumView();
    boolean hasArtwork = data.getArtwork() != null;
    if (hasArtwork) {
        Drawable artwork = scaleDrawable(data.getArtwork());
        albumView.setImageDrawable(artwork);
    }
    setVisibleAndAlpha(collapsedSet, R.id.album_art, hasArtwork);
    setVisibleAndAlpha(expandedSet, R.id.album_art, hasArtwork);
    ImageView appIcon = mViewHolder.getAppIcon();
    if (data.getAppIcon() != null) {
        appIcon.setImageDrawable(data.getAppIcon());
    } else {
        Drawable iconDrawable = mContext.getDrawable(R.drawable.ic_music_note);
        appIcon.setImageDrawable(iconDrawable);
    }
    TextView titleText = mViewHolder.getTitleText();
    titleText.setText(data.getSong());
    TextView appName = mViewHolder.getAppName();
    appName.setText(data.getApp());
    TextView artistText = mViewHolder.getArtistText();
    artistText.setText(data.getArtist());
    mViewHolder.getSeamless().setVisibility(View.VISIBLE);
    setVisibleAndAlpha(collapsedSet, R.id.media_seamless, true);
    setVisibleAndAlpha(expandedSet, R.id.media_seamless, true);
    mViewHolder.getSeamless().setOnClickListener(v -> {
        final Intent intent = new Intent().setAction(MediaOutputSliceConstants.ACTION_MEDIA_OUTPUT).putExtra(MediaOutputSliceConstants.EXTRA_PACKAGE_NAME, data.getPackageName()).putExtra(MediaOutputSliceConstants.KEY_MEDIA_SESSION_TOKEN, mToken);
        mActivityStarter.startActivity(intent, false, true, Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);
    });
    ImageView iconView = mViewHolder.getSeamlessIcon();
    TextView deviceName = mViewHolder.getSeamlessText();
    final MediaDeviceData device = data.getDevice();
    final int seamlessId = mViewHolder.getSeamless().getId();
    final int seamlessFallbackId = mViewHolder.getSeamlessFallback().getId();
    final boolean showFallback = device != null && !device.getEnabled();
    final int seamlessFallbackVisibility = showFallback ? View.VISIBLE : View.GONE;
    mViewHolder.getSeamlessFallback().setVisibility(seamlessFallbackVisibility);
    expandedSet.setVisibility(seamlessFallbackId, seamlessFallbackVisibility);
    collapsedSet.setVisibility(seamlessFallbackId, seamlessFallbackVisibility);
    final int seamlessVisibility = showFallback ? View.GONE : View.VISIBLE;
    mViewHolder.getSeamless().setVisibility(seamlessVisibility);
    expandedSet.setVisibility(seamlessId, seamlessVisibility);
    collapsedSet.setVisibility(seamlessId, seamlessVisibility);
    final float seamlessAlpha = data.getResumption() ? DISABLED_ALPHA : 1.0f;
    expandedSet.setAlpha(seamlessId, seamlessAlpha);
    collapsedSet.setAlpha(seamlessId, seamlessAlpha);
    mViewHolder.getSeamless().setEnabled(!data.getResumption());
    if (showFallback) {
        iconView.setImageDrawable(null);
        deviceName.setText(null);
    } else if (device != null) {
        Drawable icon = device.getIcon();
        iconView.setVisibility(View.VISIBLE);
        if (icon instanceof AdaptiveIcon) {
            AdaptiveIcon aIcon = (AdaptiveIcon) icon;
            aIcon.setBackgroundColor(mBackgroundColor);
            iconView.setImageDrawable(aIcon);
        } else {
            iconView.setImageDrawable(icon);
        }
        deviceName.setText(device.getName());
    } else {
        Log.w(TAG, "device is null. Not binding output chip.");
        iconView.setVisibility(View.GONE);
        deviceName.setText(com.android.internal.R.string.ext_media_seamless_action);
    }
    List<Integer> actionsWhenCollapsed = data.getActionsToShowInCompact();
    int i = 0;
    List<MediaAction> actionIcons = data.getActions();
    for (; i < actionIcons.size() && i < ACTION_IDS.length; i++) {
        int actionId = ACTION_IDS[i];
        final ImageButton button = mViewHolder.getAction(actionId);
        MediaAction mediaAction = actionIcons.get(i);
        button.setImageDrawable(mediaAction.getDrawable());
        button.setContentDescription(mediaAction.getContentDescription());
        Runnable action = mediaAction.getAction();
        if (action == null) {
            button.setEnabled(false);
        } else {
            button.setEnabled(true);
            button.setOnClickListener(v -> {
                action.run();
            });
        }
        boolean visibleInCompat = actionsWhenCollapsed.contains(i);
        setVisibleAndAlpha(collapsedSet, actionId, visibleInCompat);
        setVisibleAndAlpha(expandedSet, actionId, true);
    }
    for (; i < ACTION_IDS.length; i++) {
        setVisibleAndAlpha(expandedSet, ACTION_IDS[i], false);
        setVisibleAndAlpha(collapsedSet, ACTION_IDS[i], false);
    }
    final MediaController controller = getController();
    mBackgroundExecutor.execute(() -> mSeekBarViewModel.updateController(controller));
    mMediaViewController.refreshState();
}