public void applyState(){
    int childCount = mAttachedChildren.size();
    ViewState tmpState = new ViewState();
    float expandFraction = 0.0f;
    if (mUserLocked) {
        expandFraction = getGroupExpandFraction();
    }
    final boolean dividersVisible = mUserLocked && !showingAsLowPriority() || (mChildrenExpanded && mShowDividersWhenExpanded) || (mContainingNotification.isGroupExpansionChanging() && !mHideDividersDuringExpand);
    for (int i = 0; i < childCount; i++) {
        ExpandableNotificationRow child = mAttachedChildren.get(i);
        ExpandableViewState viewState = child.getViewState();
        viewState.applyToView(child);
        View divider = mDividers.get(i);
        tmpState.initFrom(divider);
        tmpState.yTranslation = viewState.yTranslation - mDividerHeight;
        float alpha = mChildrenExpanded && viewState.alpha != 0 ? mDividerAlpha : 0;
        if (mUserLocked && !showingAsLowPriority() && viewState.alpha != 0) {
            alpha = NotificationUtils.interpolate(0, 0.5f, Math.min(viewState.alpha, expandFraction));
        }
        tmpState.hidden = !dividersVisible;
        tmpState.alpha = alpha;
        tmpState.applyToView(divider);
        child.setFakeShadowIntensity(0.0f, 0.0f, 0, 0);
    }
    if (mGroupOverFlowState != null) {
        mGroupOverFlowState.applyToView(mOverflowNumber);
        mNeverAppliedGroupState = false;
    }
    if (mHeaderViewState != null) {
        mHeaderViewState.applyToView(mNotificationHeader);
    }
    updateChildrenClipping();
}