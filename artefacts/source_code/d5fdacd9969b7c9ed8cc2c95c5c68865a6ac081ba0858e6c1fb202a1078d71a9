public static Rect resizeDrag(float x, float y, float startDragX, float startDragY, Rect originalBounds, int ctrlType, int minVisibleWidth, int minVisibleHeight, Point maxVisibleSize, boolean preserveOrientation, boolean startOrientationWasLandscape){
    final int deltaX = Math.round(x - startDragX);
    final int deltaY = Math.round(y - startDragY);
    int left = originalBounds.left;
    int top = originalBounds.top;
    int right = originalBounds.right;
    int bottom = originalBounds.bottom;
    int width = right - left;
    int height = bottom - top;
    if ((ctrlType & CTRL_LEFT) != 0) {
        width = Math.max(minVisibleWidth, Math.min(width - deltaX, maxVisibleSize.x));
    } else if ((ctrlType & CTRL_RIGHT) != 0) {
        width = Math.max(minVisibleWidth, Math.min(width + deltaX, maxVisibleSize.x));
    }
    if ((ctrlType & CTRL_TOP) != 0) {
        height = Math.max(minVisibleHeight, Math.min(height - deltaY, maxVisibleSize.y));
    } else if ((ctrlType & CTRL_BOTTOM) != 0) {
        height = Math.max(minVisibleHeight, Math.min(height + deltaY, maxVisibleSize.y));
    }
    final float aspect = (float) width / (float) height;
    if (preserveOrientation && ((startOrientationWasLandscape && aspect < MIN_ASPECT) || (!startOrientationWasLandscape && aspect > (1.0 / MIN_ASPECT)))) {
        int width1;
        int width2;
        int height1;
        int height2;
        if (startOrientationWasLandscape) {
            width1 = Math.max(minVisibleWidth, Math.min(maxVisibleSize.x, width));
            height1 = Math.min(height, Math.round((float) width1 / MIN_ASPECT));
            if (height1 < minVisibleHeight) {
                height1 = minVisibleHeight;
                width1 = Math.max(minVisibleWidth, Math.min(maxVisibleSize.x, Math.round((float) height1 * MIN_ASPECT)));
            }
            height2 = Math.max(minVisibleHeight, Math.min(maxVisibleSize.y, height));
            width2 = Math.max(width, Math.round((float) height2 * MIN_ASPECT));
            if (width2 < minVisibleWidth) {
                width2 = minVisibleWidth;
                height2 = Math.max(minVisibleHeight, Math.min(maxVisibleSize.y, Math.round((float) width2 / MIN_ASPECT)));
            }
        } else {
            width1 = Math.max(minVisibleWidth, Math.min(maxVisibleSize.x, width));
            height1 = Math.max(height, Math.round((float) width1 * MIN_ASPECT));
            if (height1 < minVisibleHeight) {
                height1 = minVisibleHeight;
                width1 = Math.max(minVisibleWidth, Math.min(maxVisibleSize.x, Math.round((float) height1 / MIN_ASPECT)));
            }
            height2 = Math.max(minVisibleHeight, Math.min(maxVisibleSize.y, height));
            width2 = Math.min(width, Math.round((float) height2 / MIN_ASPECT));
            if (width2 < minVisibleWidth) {
                width2 = minVisibleWidth;
                height2 = Math.max(minVisibleHeight, Math.min(maxVisibleSize.y, Math.round((float) width2 * MIN_ASPECT)));
            }
        }
        final boolean grows = width > (right - left) || height > (bottom - top);
        if (grows == (width1 * height1 > width2 * height2)) {
            width = width1;
            height = height1;
        } else {
            width = width2;
            height = height2;
        }
    }
    if ((ctrlType & CTRL_LEFT) != 0) {
        left = right - width;
    } else {
        right = left + width;
    }
    if ((ctrlType & CTRL_TOP) != 0) {
        top = bottom - height;
    } else {
        bottom = top + height;
    }
    return new Rect(left, top, right, bottom);
}