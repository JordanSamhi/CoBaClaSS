public Map<String, WrappedKey> getAllKeys(int userId, int recoveryAgentUid, int platformKeyGenerationId){
    SQLiteDatabase db = mKeyStoreDbHelper.getReadableDatabase();
    String[] projection = { KeysEntry._ID, KeysEntry.COLUMN_NAME_NONCE, KeysEntry.COLUMN_NAME_WRAPPED_KEY, KeysEntry.COLUMN_NAME_ALIAS, KeysEntry.COLUMN_NAME_RECOVERY_STATUS, KeysEntry.COLUMN_NAME_KEY_METADATA };
    String selection = KeysEntry.COLUMN_NAME_USER_ID + " = ? AND " + KeysEntry.COLUMN_NAME_UID + " = ? AND " + KeysEntry.COLUMN_NAME_GENERATION_ID + " = ?";
    String[] selectionArguments = { Integer.toString(userId), Integer.toString(recoveryAgentUid), Integer.toString(platformKeyGenerationId) };
    try (Cursor cursor = db.query(KeysEntry.TABLE_NAME, projection, selection, selectionArguments, null, null, null)) {
        HashMap<String, WrappedKey> keys = new HashMap<>();
        while (cursor.moveToNext()) {
            byte[] nonce = cursor.getBlob(cursor.getColumnIndexOrThrow(KeysEntry.COLUMN_NAME_NONCE));
            byte[] keyMaterial = cursor.getBlob(cursor.getColumnIndexOrThrow(KeysEntry.COLUMN_NAME_WRAPPED_KEY));
            String alias = cursor.getString(cursor.getColumnIndexOrThrow(KeysEntry.COLUMN_NAME_ALIAS));
            int recoveryStatus = cursor.getInt(cursor.getColumnIndexOrThrow(KeysEntry.COLUMN_NAME_RECOVERY_STATUS));
            byte[] keyMetadata;
            int metadataIdx = cursor.getColumnIndexOrThrow(KeysEntry.COLUMN_NAME_KEY_METADATA);
            if (cursor.isNull(metadataIdx)) {
                keyMetadata = null;
            } else {
                keyMetadata = cursor.getBlob(metadataIdx);
            }
            keys.put(alias, new WrappedKey(nonce, keyMaterial, keyMetadata, platformKeyGenerationId, recoveryStatus));
        }
        return keys;
    }
}