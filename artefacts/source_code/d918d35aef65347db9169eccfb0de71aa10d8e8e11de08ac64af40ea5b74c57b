public static String logEvent(int tag, Object... list){
    if (tag >= EVENT_TAGS.length) {
        return "";
    }
    final StringBuilder sb = new StringBuilder("writeEvent ").append(EVENT_TAGS[tag]);
    if (list == null || list.length == 0) {
        if (tag == EVENT_SETTINGS_CLICK) {
            sLegacyLogger.action(MetricsEvent.ACTION_VOLUME_SETTINGS);
            sUiEventLogger.log(VolumeDialogEvent.VOLUME_DIALOG_SETTINGS_CLICK);
        }
        return sb.toString();
    }
    sb.append(" ");
    switch(tag) {
        case EVENT_SHOW_DIALOG:
            sLegacyLogger.visible(MetricsEvent.VOLUME_DIALOG);
            if (list.length > 1) {
                final Integer reason = (Integer) list[0];
                final Boolean keyguard = (Boolean) list[1];
                sLegacyLogger.histogram("volume_from_keyguard", keyguard ? 1 : 0);
                sUiEventLogger.log(VolumeDialogOpenEvent.fromReasons(reason));
                sb.append(SHOW_REASONS[reason]).append(" keyguard=").append(keyguard);
            }
            break;
        case EVENT_EXPAND:
            {
                final Boolean expand = (Boolean) list[0];
                sLegacyLogger.visibility(MetricsEvent.VOLUME_DIALOG_DETAILS, expand);
                sUiEventLogger.log(expand ? VolumeDialogEvent.VOLUME_DIALOG_EXPAND_DETAILS : VolumeDialogEvent.VOLUME_DIALOG_COLLAPSE_DETAILS);
                sb.append(expand);
                break;
            }
        case EVENT_DISMISS_DIALOG:
            {
                sLegacyLogger.hidden(MetricsEvent.VOLUME_DIALOG);
                final Integer reason = (Integer) list[0];
                sUiEventLogger.log(VolumeDialogCloseEvent.fromReason(reason));
                sb.append(DISMISS_REASONS[reason]);
                break;
            }
        case EVENT_ACTIVE_STREAM_CHANGED:
            {
                final Integer stream = (Integer) list[0];
                sLegacyLogger.action(MetricsEvent.ACTION_VOLUME_STREAM, stream);
                sUiEventLogger.log(VolumeDialogEvent.VOLUME_DIALOG_ACTIVE_STREAM_CHANGED);
                sb.append(AudioSystem.streamToString(stream));
                break;
            }
        case EVENT_ICON_CLICK:
            if (list.length > 1) {
                final Integer stream = (Integer) list[0];
                sLegacyLogger.action(MetricsEvent.ACTION_VOLUME_ICON, stream);
                final Integer iconState = (Integer) list[1];
                sUiEventLogger.log(VolumeDialogEvent.fromIconState(iconState));
                sb.append(AudioSystem.streamToString(stream)).append(' ').append(iconStateToString(iconState));
            }
            break;
        case EVENT_TOUCH_LEVEL_DONE:
            if (list.length > 1) {
                final Integer level = (Integer) list[1];
                sLegacyLogger.action(MetricsEvent.ACTION_VOLUME_SLIDER, level);
                sUiEventLogger.log(VolumeDialogEvent.fromSliderLevel(level));
            }
        case EVENT_TOUCH_LEVEL_CHANGED:
        case EVENT_LEVEL_CHANGED:
        case EVENT_MUTE_CHANGED:
            if (list.length > 1) {
                sb.append(AudioSystem.streamToString((Integer) list[0])).append(' ').append(list[1]);
            }
            break;
        case EVENT_KEY:
            if (list.length > 1) {
                final Integer stream = (Integer) list[0];
                sLegacyLogger.action(MetricsEvent.ACTION_VOLUME_KEY, stream);
                final Integer level = (Integer) list[1];
                sUiEventLogger.log(VolumeDialogEvent.fromKeyLevel(level));
                sb.append(AudioSystem.streamToString(stream)).append(' ').append(level);
            }
            break;
        case EVENT_RINGER_TOGGLE:
            {
                final Integer ringerMode = (Integer) list[0];
                sLegacyLogger.action(MetricsEvent.ACTION_VOLUME_RINGER_TOGGLE, ringerMode);
                sUiEventLogger.log(VolumeDialogEvent.fromRingerMode(ringerMode));
                sb.append(ringerModeToString(ringerMode));
                break;
            }
        case EVENT_EXTERNAL_RINGER_MODE_CHANGED:
            {
                final Integer ringerMode = (Integer) list[0];
                sLegacyLogger.action(MetricsEvent.ACTION_RINGER_MODE, ringerMode);
            }
        case EVENT_INTERNAL_RINGER_MODE_CHANGED:
            {
                final Integer ringerMode = (Integer) list[0];
                sb.append(ringerModeToString(ringerMode));
                break;
            }
        case EVENT_ZEN_MODE_CHANGED:
            {
                final Integer zenMode = (Integer) list[0];
                sb.append(zenModeToString(zenMode));
                sUiEventLogger.log(ZenModeEvent.fromZenMode(zenMode));
                break;
            }
        case EVENT_SUPPRESSOR_CHANGED:
            if (list.length > 1) {
                sb.append(list[0]).append(' ').append(list[1]);
            }
            break;
        case EVENT_SHOW_USB_OVERHEAT_ALARM:
            sLegacyLogger.visible(MetricsEvent.POWER_OVERHEAT_ALARM);
            sUiEventLogger.log(VolumeDialogEvent.USB_OVERHEAT_ALARM);
            if (list.length > 1) {
                final Boolean keyguard = (Boolean) list[1];
                sLegacyLogger.histogram("show_usb_overheat_alarm", keyguard ? 1 : 0);
                final Integer reason = (Integer) list[0];
                sb.append(SHOW_REASONS[reason]).append(" keyguard=").append(keyguard);
            }
            break;
        case EVENT_DISMISS_USB_OVERHEAT_ALARM:
            sLegacyLogger.hidden(MetricsEvent.POWER_OVERHEAT_ALARM);
            sUiEventLogger.log(VolumeDialogEvent.USB_OVERHEAT_ALARM_DISMISSED);
            if (list.length > 1) {
                final Boolean keyguard = (Boolean) list[1];
                sLegacyLogger.histogram("dismiss_usb_overheat_alarm", keyguard ? 1 : 0);
                final Integer reason = (Integer) list[0];
                sb.append(DISMISS_REASONS[reason]).append(" keyguard=").append(keyguard);
            }
            break;
        default:
            sb.append(Arrays.asList(list));
            break;
    }
    return sb.toString();
}