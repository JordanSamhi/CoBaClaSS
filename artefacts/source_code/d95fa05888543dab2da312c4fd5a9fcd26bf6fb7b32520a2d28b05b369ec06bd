public static PackageInstallerSession readFromXml(@NonNull XmlPullParser in, @NonNull PackageInstallerService.InternalCallback callback, @NonNull Context context, @NonNull PackageManagerService pm, Looper installerThread, @NonNull StagingManager stagingManager, @NonNull File sessionsDir, @NonNull PackageSessionProvider sessionProvider) throws IOException, XmlPullParserException{
    final int sessionId = readIntAttribute(in, ATTR_SESSION_ID);
    final int userId = readIntAttribute(in, ATTR_USER_ID);
    final String installerPackageName = readStringAttribute(in, ATTR_INSTALLER_PACKAGE_NAME);
    final int installerUid = readIntAttribute(in, ATTR_INSTALLER_UID, pm.getPackageUid(installerPackageName, PackageManager.MATCH_UNINSTALLED_PACKAGES, userId));
    final String installInitiatingPackageName = readStringAttribute(in, ATTR_INITIATING_PACKAGE_NAME);
    final String installOriginatingPackageName = readStringAttribute(in, ATTR_ORIGINATING_PACKAGE_NAME);
    final long createdMillis = readLongAttribute(in, ATTR_CREATED_MILLIS);
    long updatedMillis = readLongAttribute(in, ATTR_UPDATED_MILLIS);
    final String stageDirRaw = readStringAttribute(in, ATTR_SESSION_STAGE_DIR);
    final File stageDir = (stageDirRaw != null) ? new File(stageDirRaw) : null;
    final String stageCid = readStringAttribute(in, ATTR_SESSION_STAGE_CID);
    final boolean prepared = readBooleanAttribute(in, ATTR_PREPARED, true);
    final boolean committed = readBooleanAttribute(in, ATTR_COMMITTED);
    final boolean destroyed = readBooleanAttribute(in, ATTR_DESTROYED);
    final boolean sealed = readBooleanAttribute(in, ATTR_SEALED);
    final int parentSessionId = readIntAttribute(in, ATTR_PARENT_SESSION_ID, SessionInfo.INVALID_ID);
    final SessionParams params = new SessionParams(SessionParams.MODE_INVALID);
    params.isMultiPackage = readBooleanAttribute(in, ATTR_MULTI_PACKAGE, false);
    params.isStaged = readBooleanAttribute(in, ATTR_STAGED_SESSION, false);
    params.mode = readIntAttribute(in, ATTR_MODE);
    params.installFlags = readIntAttribute(in, ATTR_INSTALL_FLAGS);
    params.installLocation = readIntAttribute(in, ATTR_INSTALL_LOCATION);
    params.sizeBytes = readLongAttribute(in, ATTR_SIZE_BYTES);
    params.appPackageName = readStringAttribute(in, ATTR_APP_PACKAGE_NAME);
    params.appIcon = readBitmapAttribute(in, ATTR_APP_ICON);
    params.appLabel = readStringAttribute(in, ATTR_APP_LABEL);
    params.originatingUri = readUriAttribute(in, ATTR_ORIGINATING_URI);
    params.originatingUid = readIntAttribute(in, ATTR_ORIGINATING_UID, SessionParams.UID_UNKNOWN);
    params.referrerUri = readUriAttribute(in, ATTR_REFERRER_URI);
    params.abiOverride = readStringAttribute(in, ATTR_ABI_OVERRIDE);
    params.volumeUuid = readStringAttribute(in, ATTR_VOLUME_UUID);
    params.installReason = readIntAttribute(in, ATTR_INSTALL_REASON);
    if (readBooleanAttribute(in, ATTR_IS_DATALOADER)) {
        params.dataLoaderParams = new DataLoaderParams(readIntAttribute(in, ATTR_DATALOADER_TYPE), new ComponentName(readStringAttribute(in, ATTR_DATALOADER_PACKAGE_NAME), readStringAttribute(in, ATTR_DATALOADER_CLASS_NAME)), readStringAttribute(in, ATTR_DATALOADER_ARGUMENTS));
    }
    final File appIconFile = buildAppIconFile(sessionId, sessionsDir);
    if (appIconFile.exists()) {
        params.appIcon = BitmapFactory.decodeFile(appIconFile.getAbsolutePath());
        params.appIconLastModified = appIconFile.lastModified();
    }
    final boolean isReady = readBooleanAttribute(in, ATTR_IS_READY);
    final boolean isFailed = readBooleanAttribute(in, ATTR_IS_FAILED);
    final boolean isApplied = readBooleanAttribute(in, ATTR_IS_APPLIED);
    final int stagedSessionErrorCode = readIntAttribute(in, ATTR_STAGED_SESSION_ERROR_CODE, SessionInfo.STAGED_SESSION_NO_ERROR);
    final String stagedSessionErrorMessage = readStringAttribute(in, ATTR_STAGED_SESSION_ERROR_MESSAGE);
    if (!isStagedSessionStateValid(isReady, isApplied, isFailed)) {
        throw new IllegalArgumentException("Can't restore staged session with invalid state.");
    }
    List<String> grantedRuntimePermissions = new ArrayList<>();
    List<String> whitelistedRestrictedPermissions = new ArrayList<>();
    int autoRevokePermissionsMode = MODE_DEFAULT;
    List<Integer> childSessionIds = new ArrayList<>();
    List<InstallationFile> files = new ArrayList<>();
    int outerDepth = in.getDepth();
    int type;
    while ((type = in.next()) != XmlPullParser.END_DOCUMENT && (type != XmlPullParser.END_TAG || in.getDepth() > outerDepth)) {
        if (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) {
            continue;
        }
        if (TAG_GRANTED_RUNTIME_PERMISSION.equals(in.getName())) {
            grantedRuntimePermissions.add(readStringAttribute(in, ATTR_NAME));
        }
        if (TAG_WHITELISTED_RESTRICTED_PERMISSION.equals(in.getName())) {
            whitelistedRestrictedPermissions.add(readStringAttribute(in, ATTR_NAME));
        }
        if (TAG_AUTO_REVOKE_PERMISSIONS_MODE.equals(in.getName())) {
            autoRevokePermissionsMode = readIntAttribute(in, ATTR_MODE);
        }
        if (TAG_CHILD_SESSION.equals(in.getName())) {
            childSessionIds.add(readIntAttribute(in, ATTR_SESSION_ID, SessionInfo.INVALID_ID));
        }
        if (TAG_SESSION_FILE.equals(in.getName())) {
            files.add(new InstallationFile(readIntAttribute(in, ATTR_LOCATION, 0), readStringAttribute(in, ATTR_NAME), readLongAttribute(in, ATTR_LENGTH_BYTES, -1), readByteArrayAttribute(in, ATTR_METADATA), readByteArrayAttribute(in, ATTR_SIGNATURE)));
        }
    }
    if (grantedRuntimePermissions.size() > 0) {
        params.grantedRuntimePermissions = grantedRuntimePermissions.toArray(EmptyArray.STRING);
    }
    if (whitelistedRestrictedPermissions.size() > 0) {
        params.whitelistedRestrictedPermissions = whitelistedRestrictedPermissions;
    }
    params.autoRevokePermissionsMode = autoRevokePermissionsMode;
    int[] childSessionIdsArray;
    if (childSessionIds.size() > 0) {
        childSessionIdsArray = new int[childSessionIds.size()];
        for (int i = 0, size = childSessionIds.size(); i < size; ++i) {
            childSessionIdsArray[i] = childSessionIds.get(i);
        }
    } else {
        childSessionIdsArray = EMPTY_CHILD_SESSION_ARRAY;
    }
    InstallationFile[] fileArray = null;
    if (!files.isEmpty()) {
        fileArray = files.toArray(EMPTY_INSTALLATION_FILE_ARRAY);
    }
    InstallSource installSource = InstallSource.create(installInitiatingPackageName, installOriginatingPackageName, installerPackageName);
    return new PackageInstallerSession(callback, context, pm, sessionProvider, installerThread, stagingManager, sessionId, userId, installerUid, installSource, params, createdMillis, stageDir, stageCid, fileArray, prepared, committed, destroyed, sealed, childSessionIdsArray, parentSessionId, isReady, isFailed, isApplied, stagedSessionErrorCode, stagedSessionErrorMessage);
}