public boolean register(){
    if (mContext.getPackageManager().queryIntentServicesAsUser(mIntent, MATCH_DIRECT_BOOT_AWARE | MATCH_DIRECT_BOOT_UNAWARE | MATCH_SYSTEM_ONLY, UserHandle.USER_SYSTEM).isEmpty()) {
        return false;
    }
    new PackageMonitor() {

        @Override
        public void onPackageUpdateFinished(String packageName, int uid) {
            ServiceWatcher.this.onPackageChanged(packageName);
        }

        @Override
        public void onPackageAdded(String packageName, int uid) {
            ServiceWatcher.this.onPackageChanged(packageName);
        }

        @Override
        public void onPackageRemoved(String packageName, int uid) {
            ServiceWatcher.this.onPackageChanged(packageName);
        }

        @Override
        public boolean onPackageChanged(String packageName, int uid, String[] components) {
            ServiceWatcher.this.onPackageChanged(packageName);
            return super.onPackageChanged(packageName, uid, components);
        }
    }.register(mContext, UserHandle.ALL, true, mHandler);
    IntentFilter intentFilter = new IntentFilter();
    intentFilter.addAction(Intent.ACTION_USER_SWITCHED);
    intentFilter.addAction(Intent.ACTION_USER_UNLOCKED);
    mContext.registerReceiverAsUser(new BroadcastReceiver() {

        @Override
        public void onReceive(Context context, Intent intent) {
            String action = intent.getAction();
            if (action == null) {
                return;
            }
            int userId = intent.getIntExtra(Intent.EXTRA_USER_HANDLE, UserHandle.USER_NULL);
            if (userId == UserHandle.USER_NULL) {
                return;
            }
            switch(action) {
                case Intent.ACTION_USER_SWITCHED:
                    onUserSwitched(userId);
                    break;
                case Intent.ACTION_USER_UNLOCKED:
                    onUserUnlocked(userId);
                    break;
                default:
                    break;
            }
        }
    }, UserHandle.ALL, intentFilter, null, mHandler);
    mCurrentUserId = ActivityManager.getCurrentUser();
    mHandler.post(() -> onBestServiceChanged(false));
    return true;
}