public SpellCheckerSubtype getCurrentSpellCheckerSubtype(@UserIdInt int userId, boolean allowImplicitlySelectedSubtype){
    verifyUser(userId);
    final int subtypeHashCode;
    final SpellCheckerInfo sci;
    final Locale systemLocale;
    synchronized (mLock) {
        final TextServicesData tsd = getDataFromCallingUserIdLocked(userId);
        if (tsd == null)
            return null;
        subtypeHashCode = tsd.getSelectedSpellCheckerSubtype(SpellCheckerSubtype.SUBTYPE_ID_NONE);
        if (DBG) {
            Slog.w(TAG, "getCurrentSpellCheckerSubtype: " + subtypeHashCode);
        }
        sci = tsd.getCurrentSpellChecker();
        systemLocale = mContext.getResources().getConfiguration().locale;
    }
    if (sci == null || sci.getSubtypeCount() == 0) {
        if (DBG) {
            Slog.w(TAG, "Subtype not found.");
        }
        return null;
    }
    if (subtypeHashCode == SpellCheckerSubtype.SUBTYPE_ID_NONE && !allowImplicitlySelectedSubtype) {
        return null;
    }
    final int numSubtypes = sci.getSubtypeCount();
    if (subtypeHashCode != 0) {
        for (int i = 0; i < numSubtypes; ++i) {
            final SpellCheckerSubtype scs = sci.getSubtypeAt(i);
            if (scs.hashCode() == subtypeHashCode) {
                return scs;
            }
        }
        return null;
    }
    if (systemLocale == null) {
        return null;
    }
    SpellCheckerSubtype firstLanguageMatchingSubtype = null;
    for (int i = 0; i < sci.getSubtypeCount(); ++i) {
        final SpellCheckerSubtype scs = sci.getSubtypeAt(i);
        final Locale scsLocale = scs.getLocaleObject();
        if (Objects.equals(scsLocale, systemLocale)) {
            return scs;
        }
        if (firstLanguageMatchingSubtype == null && scsLocale != null && TextUtils.equals(systemLocale.getLanguage(), scsLocale.getLanguage())) {
            firstLanguageMatchingSubtype = scs;
        }
    }
    return firstLanguageMatchingSubtype;
}