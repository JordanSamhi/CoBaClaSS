public static TrivalentPredicate createRateLimitCheck(@NonNull DeviceState deviceState){
    return new TrivalentPredicate() {

        @Override
        @NonNull
        public Boolean mustProcessNitzSignal(@NonNull TimestampedValue<NitzData> previousSignal, @NonNull TimestampedValue<NitzData> newSignal) {
            Objects.requireNonNull(newSignal);
            Objects.requireNonNull(newSignal.getValue());
            Objects.requireNonNull(previousSignal);
            Objects.requireNonNull(previousSignal.getValue());
            NitzData newNitzData = newSignal.getValue();
            NitzData previousNitzData = previousSignal.getValue();
            if (!offsetInfoIsTheSame(previousNitzData, newNitzData)) {
                return true;
            }
            int nitzUpdateSpacing = deviceState.getNitzUpdateSpacingMillis();
            int nitzUpdateDiff = deviceState.getNitzUpdateDiffMillis();
            long elapsedRealtimeSinceLastSaved = newSignal.getReferenceTimeMillis() - previousSignal.getReferenceTimeMillis();
            long utcTimeDifferenceMillis = newNitzData.getCurrentTimeInMillis() - previousNitzData.getCurrentTimeInMillis();
            long millisGainedOrLost = Math.abs(utcTimeDifferenceMillis - elapsedRealtimeSinceLastSaved);
            if (elapsedRealtimeSinceLastSaved > nitzUpdateSpacing || millisGainedOrLost > nitzUpdateDiff) {
                return true;
            }
            if (DBG) {
                Rlog.d(LOG_TAG, "mustProcessNitzSignal: NITZ signal filtered" + " previousSignal=" + previousSignal + ", newSignal=" + newSignal + ", nitzUpdateSpacing=" + nitzUpdateSpacing + ", nitzUpdateDiff=" + nitzUpdateDiff);
            }
            return false;
        }

        private boolean offsetInfoIsTheSame(NitzData one, NitzData two) {
            return Objects.equals(two.getDstAdjustmentMillis(), one.getDstAdjustmentMillis()) && Objects.equals(two.getEmulatorHostTimeZone(), one.getEmulatorHostTimeZone()) && two.getLocalOffsetMillis() == one.getLocalOffsetMillis();
        }
    };
}