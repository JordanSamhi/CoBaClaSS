public void sendMultipartText(String destAddr, String scAddr, ArrayList<String> parts, ArrayList<PendingIntent> sentIntents, ArrayList<PendingIntent> deliveryIntents, Uri messageUri, String callingPkg, boolean persistMessage, int priority, boolean expectMore, int validityPeriod, long messageId){
    final String fullMessageText = getMultipartMessageText(parts);
    int refNumber = getNextConcatenatedRef() & 0x00FF;
    int encoding = SmsConstants.ENCODING_UNKNOWN;
    int msgCount = parts.size();
    if (msgCount < 1) {
        triggerSentIntentForFailure(sentIntents);
        return;
    }
    TextEncodingDetails[] encodingForParts = new TextEncodingDetails[msgCount];
    for (int i = 0; i < msgCount; i++) {
        TextEncodingDetails details = calculateLength(parts.get(i), false);
        if (encoding != details.codeUnitSize && (encoding == SmsConstants.ENCODING_UNKNOWN || encoding == SmsConstants.ENCODING_7BIT)) {
            encoding = details.codeUnitSize;
        }
        encodingForParts[i] = details;
    }
    SmsTracker[] trackers = new SmsTracker[msgCount];
    final AtomicInteger unsentPartCount = new AtomicInteger(msgCount);
    final AtomicBoolean anyPartFailed = new AtomicBoolean(false);
    for (int i = 0; i < msgCount; i++) {
        SmsHeader.ConcatRef concatRef = new SmsHeader.ConcatRef();
        concatRef.refNumber = refNumber;
        concatRef.seqNumber = i + 1;
        concatRef.msgCount = msgCount;
        concatRef.isEightBits = true;
        SmsHeader smsHeader = new SmsHeader();
        smsHeader.concatRef = concatRef;
        if (encoding == SmsConstants.ENCODING_7BIT) {
            smsHeader.languageTable = encodingForParts[i].languageTable;
            smsHeader.languageShiftTable = encodingForParts[i].languageShiftTable;
        }
        PendingIntent sentIntent = null;
        if (sentIntents != null && sentIntents.size() > i) {
            sentIntent = sentIntents.get(i);
        }
        PendingIntent deliveryIntent = null;
        if (deliveryIntents != null && deliveryIntents.size() > i) {
            deliveryIntent = deliveryIntents.get(i);
        }
        trackers[i] = getNewSubmitPduTracker(callingPkg, destAddr, scAddr, parts.get(i), smsHeader, encoding, sentIntent, deliveryIntent, (i == (msgCount - 1)), unsentPartCount, anyPartFailed, messageUri, fullMessageText, priority, expectMore, validityPeriod, messageId);
        if (trackers[i] == null) {
            triggerSentIntentForFailure(sentIntents);
            return;
        }
        trackers[i].mPersistMessage = persistMessage;
    }
    String carrierPackage = getCarrierAppPackageName();
    if (carrierPackage != null) {
        Rlog.d(TAG, "Found carrier package." + " id: " + getMultiTrackermessageId(trackers));
        MultipartSmsSender smsSender = new MultipartSmsSender(parts, trackers);
        smsSender.sendSmsByCarrierApp(carrierPackage, new MultipartSmsSenderCallback(smsSender));
    } else {
        Rlog.v(TAG, "No carrier package." + " id: " + getMultiTrackermessageId(trackers));
        sendSubmitPdu(trackers);
    }
}