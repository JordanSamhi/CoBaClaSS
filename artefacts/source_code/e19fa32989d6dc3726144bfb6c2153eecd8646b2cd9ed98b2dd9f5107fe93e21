public boolean saveWifiConfiguration(WifiConfiguration config){
    synchronized (mLock) {
        if (config == null)
            return false;
        if (config.SSID != null) {
            if (!setSsid(NativeUtil.decodeSsid(config.SSID))) {
                Log.e(TAG, "failed to set SSID: " + config.SSID);
                return false;
            }
        }
        String bssidStr = config.getNetworkSelectionStatus().getNetworkSelectionBSSID();
        if (bssidStr != null) {
            byte[] bssid = NativeUtil.macAddressToByteArray(bssidStr);
            if (!setBssid(bssid)) {
                Log.e(TAG, "failed to set BSSID: " + bssidStr);
                return false;
            }
        }
        if (!setScanSsid(config.hiddenSSID)) {
            Log.e(TAG, config.SSID + ": failed to set hiddenSSID: " + config.hiddenSSID);
            return false;
        }
        if (!setRequirePmf(config.requirePmf)) {
            Log.e(TAG, config.SSID + ": failed to set requirePMF: " + config.requirePmf);
            return false;
        }
        if (config.allowedKeyManagement.cardinality() != 0) {
            BitSet keyMgmtMask = addFastTransitionFlags(config.allowedKeyManagement);
            keyMgmtMask = addSha256KeyMgmtFlags(keyMgmtMask);
            if (!setKeyMgmt(wifiConfigurationToSupplicantKeyMgmtMask(keyMgmtMask))) {
                Log.e(TAG, "failed to set Key Management");
                return false;
            }
            if (keyMgmtMask.get(WifiConfiguration.KeyMgmt.SUITE_B_192) && !saveSuiteBConfig(config)) {
                Log.e(TAG, "Failed to set Suite-B-192 configuration");
                return false;
            }
        }
        if (config.allowedProtocols.cardinality() != 0 && !setProto(wifiConfigurationToSupplicantProtoMask(config.allowedProtocols))) {
            Log.e(TAG, "failed to set Security Protocol");
            return false;
        }
        if (config.allowedAuthAlgorithms.cardinality() != 0 && !setAuthAlg(wifiConfigurationToSupplicantAuthAlgMask(config.allowedAuthAlgorithms))) {
            Log.e(TAG, "failed to set AuthAlgorithm");
            return false;
        }
        if (config.allowedGroupCiphers.cardinality() != 0 && (!setGroupCipher(wifiConfigurationToSupplicantGroupCipherMask(config.allowedGroupCiphers)))) {
            Log.e(TAG, "failed to set Group Cipher");
            return false;
        }
        if (config.allowedPairwiseCiphers.cardinality() != 0 && !setPairwiseCipher(wifiConfigurationToSupplicantPairwiseCipherMask(config.allowedPairwiseCiphers))) {
            Log.e(TAG, "failed to set PairwiseCipher");
            return false;
        }
        if (config.preSharedKey != null) {
            if (config.allowedKeyManagement.get(WifiConfiguration.KeyMgmt.WAPI_PSK)) {
                if (!setPskPassphrase(config.preSharedKey)) {
                    Log.e(TAG, "failed to set wapi psk passphrase");
                    return false;
                }
            } else if (config.preSharedKey.startsWith("\"")) {
                if (config.allowedKeyManagement.get(WifiConfiguration.KeyMgmt.SAE)) {
                    if (!setSaePassword(NativeUtil.removeEnclosingQuotes(config.preSharedKey))) {
                        Log.e(TAG, "failed to set sae password");
                        return false;
                    }
                } else {
                    if (!setPskPassphrase(NativeUtil.removeEnclosingQuotes(config.preSharedKey))) {
                        Log.e(TAG, "failed to set psk passphrase");
                        return false;
                    }
                }
            } else {
                if (config.allowedKeyManagement.get(WifiConfiguration.KeyMgmt.SAE)) {
                    return false;
                }
                if (!setPsk(NativeUtil.hexStringToByteArray(config.preSharedKey))) {
                    Log.e(TAG, "failed to set psk");
                    return false;
                }
            }
        }
        boolean hasSetKey = false;
        if (config.wepKeys != null) {
            for (int i = 0; i < config.wepKeys.length; i++) {
                if (config.wepKeys[i] != null) {
                    if (!setWepKey(i, NativeUtil.hexOrQuotedStringToBytes(config.wepKeys[i]))) {
                        Log.e(TAG, "failed to set wep_key " + i);
                        return false;
                    }
                    hasSetKey = true;
                }
            }
        }
        if (hasSetKey) {
            if (!setWepTxKeyIdx(config.wepTxKeyIndex)) {
                Log.e(TAG, "failed to set wep_tx_keyidx: " + config.wepTxKeyIndex);
                return false;
            }
        }
        final Map<String, String> metadata = new HashMap<String, String>();
        if (config.isPasspoint()) {
            metadata.put(ID_STRING_KEY_FQDN, config.FQDN);
        }
        metadata.put(ID_STRING_KEY_CONFIG_KEY, config.getKey());
        metadata.put(ID_STRING_KEY_CREATOR_UID, Integer.toString(config.creatorUid));
        if (!setIdStr(createNetworkExtra(metadata))) {
            Log.e(TAG, "failed to set id string");
            return false;
        }
        if (config.updateIdentifier != null && !setUpdateIdentifier(Integer.parseInt(config.updateIdentifier))) {
            Log.e(TAG, "failed to set update identifier");
            return false;
        }
        if (config.enterpriseConfig != null && config.enterpriseConfig.getEapMethod() != WifiEnterpriseConfig.Eap.NONE) {
            if (config.enterpriseConfig.getEapMethod() == WifiEnterpriseConfig.Eap.WAPI_CERT) {
                String param = config.enterpriseConfig.getFieldValue(WifiEnterpriseConfig.WAPI_CERT_SUITE_KEY);
                if (!TextUtils.isEmpty(param) && !setWapiCertSuite(param)) {
                    Log.e(TAG, config.SSID + ": failed to set WAPI certificate suite: " + param);
                    return false;
                }
                return true;
            } else if (!saveWifiEnterpriseConfig(config.SSID, config.enterpriseConfig)) {
                return false;
            }
        }
        mISupplicantStaNetworkCallback = new SupplicantStaNetworkHalCallback(config.networkId, config.SSID);
        if (!registerCallback(mISupplicantStaNetworkCallback)) {
            Log.e(TAG, "Failed to register callback");
            return false;
        }
        return true;
    }
}