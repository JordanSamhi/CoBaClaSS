public List<WifiConfiguration> getWifiConfigForMatchedNetworkSuggestionsSharedWithUser(List<ScanResult> scanResults){
    Set<String> networkKeys = new HashSet<>();
    List<WifiConfiguration> sharedWifiConfigs = new ArrayList<>();
    for (ScanResult scanResult : scanResults) {
        ScanResultMatchInfo scanResultMatchInfo = ScanResultMatchInfo.fromScanResult(scanResult);
        if (scanResultMatchInfo.networkType == WifiConfiguration.SECURITY_TYPE_OPEN) {
            continue;
        }
        Set<ExtendedWifiNetworkSuggestion> extNetworkSuggestions = getNetworkSuggestionsForScanResultMatchInfo(scanResultMatchInfo, MacAddress.fromString(scanResult.BSSID));
        if (extNetworkSuggestions == null || extNetworkSuggestions.isEmpty()) {
            continue;
        }
        Set<ExtendedWifiNetworkSuggestion> sharedNetworkSuggestions = extNetworkSuggestions.stream().filter(ewns -> ewns.perAppInfo.hasUserApproved && ewns.wns.isUserAllowedToManuallyConnect).collect(Collectors.toSet());
        if (sharedNetworkSuggestions.isEmpty()) {
            continue;
        }
        ExtendedWifiNetworkSuggestion ewns = sharedNetworkSuggestions.stream().findFirst().get();
        if (mVerboseLoggingEnabled) {
            Log.v(TAG, "getWifiConfigForMatchedNetworkSuggestionsSharedWithUser Found " + ewns + " for " + scanResult.SSID + "[" + scanResult.capabilities + "]");
        }
        WifiConfiguration config = ewns.wns.wifiConfiguration;
        WifiConfiguration existingConfig = mWifiConfigManager.getConfiguredNetwork(config.getKey());
        if (existingConfig == null || !existingConfig.fromWifiNetworkSuggestion) {
            continue;
        }
        if (networkKeys.add(existingConfig.getKey())) {
            sharedWifiConfigs.add(existingConfig);
        }
    }
    return sharedWifiConfigs;
}