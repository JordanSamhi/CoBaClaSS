public boolean rename(Context context, long id, String displayName){
    if (!FileUtils.isValidFatFilename(displayName)) {
        throw new SecurityException(displayName + " is not a valid filename");
    }
    final String filePath;
    final Query query = new Query().setFilterById(id);
    try (Cursor cursor = query(query)) {
        if (cursor == null) {
            throw new IllegalStateException("Missing cursor for download id=" + id);
        }
        if (cursor.moveToFirst()) {
            final int status = cursor.getInt(cursor.getColumnIndexOrThrow(COLUMN_STATUS));
            if (status != DownloadManager.STATUS_SUCCESSFUL) {
                throw new IllegalStateException("Download is not completed yet: " + DatabaseUtils.dumpCurrentRowToString(cursor));
            }
            filePath = cursor.getString(cursor.getColumnIndexOrThrow(COLUMN_LOCAL_FILENAME));
            if (filePath == null) {
                throw new IllegalStateException("Download doesn't have a valid file path: " + DatabaseUtils.dumpCurrentRowToString(cursor));
            } else if (!new File(filePath).exists()) {
                throw new IllegalStateException("Downloaded file doesn't exist anymore: " + DatabaseUtils.dumpCurrentRowToString(cursor));
            }
        } else {
            throw new IllegalStateException("Missing download id=" + id);
        }
    }
    final File before = new File(filePath);
    final File after = new File(before.getParentFile(), displayName);
    if (after.exists()) {
        throw new IllegalStateException("File already exists: " + after);
    }
    if (!before.renameTo(after)) {
        throw new IllegalStateException("Failed to rename file from " + before + " to " + after);
    }
    MediaStore.scanFile(mResolver, before);
    MediaStore.scanFile(mResolver, after);
    final ContentValues values = new ContentValues();
    values.put(Downloads.Impl.COLUMN_TITLE, displayName);
    values.put(Downloads.Impl._DATA, after.toString());
    values.putNull(Downloads.Impl.COLUMN_MEDIAPROVIDER_URI);
    final long[] ids = { id };
    return mResolver.update(mBaseUri, values, getWhereClauseForIds(ids), getWhereArgsForIds(ids)) == 1;
}