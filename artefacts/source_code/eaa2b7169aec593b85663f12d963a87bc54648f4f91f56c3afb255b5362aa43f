public List<Request> getAppList(boolean showSystemApps){
    PackageManager pm = mContext.getPackageManager();
    AppOpsManager aoManager = (AppOpsManager) mContext.getSystemService(Context.APP_OPS_SERVICE);
    List<AppOpsManager.PackageOps> appOps = aoManager.getPackagesForOps(LOCATION_REQUEST_OPS);
    final int appOpsCount = appOps != null ? appOps.size() : 0;
    ArrayList<Request> requests = new ArrayList<>(appOpsCount);
    final long now = System.currentTimeMillis();
    final UserManager um = (UserManager) mContext.getSystemService(Context.USER_SERVICE);
    final List<UserHandle> profiles = um.getUserProfiles();
    for (int i = 0; i < appOpsCount; ++i) {
        AppOpsManager.PackageOps ops = appOps.get(i);
        String packageName = ops.getPackageName();
        int uid = ops.getUid();
        final UserHandle user = UserHandle.getUserHandleForUid(uid);
        boolean isAndroidOs = (uid == android.os.Process.SYSTEM_UID) && ANDROID_SYSTEM_PACKAGE_NAME.equals(packageName);
        if (isAndroidOs || !profiles.contains(user)) {
            continue;
        }
        boolean showApp = true;
        if (!showSystemApps) {
            for (int op : LOCATION_PERMISSION_OPS) {
                final String permission = AppOpsManager.opToPermission(op);
                final int permissionFlags = pm.getPermissionFlags(permission, packageName, user);
                if (PermissionChecker.checkPermissionForPreflight(mContext, permission, PermissionChecker.PID_UNKNOWN, uid, packageName) == PermissionChecker.PERMISSION_GRANTED) {
                    if ((permissionFlags & PackageManager.FLAG_PERMISSION_USER_SENSITIVE_WHEN_GRANTED) == 0) {
                        showApp = false;
                        break;
                    }
                } else {
                    if ((permissionFlags & PackageManager.FLAG_PERMISSION_USER_SENSITIVE_WHEN_DENIED) == 0) {
                        showApp = false;
                        break;
                    }
                }
            }
        }
        if (showApp) {
            Request request = getRequestFromOps(now, ops);
            if (request != null) {
                requests.add(request);
            }
        }
    }
    return requests;
}