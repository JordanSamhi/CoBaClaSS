public static Typeface create(Typeface family, @Style int style){
    if ((style & ~STYLE_MASK) != 0) {
        style = NORMAL;
    }
    if (family == null) {
        family = sDefaultTypeface;
    }
    if (family.mStyle == style) {
        return family;
    }
    final long ni = family.native_instance;
    Typeface typeface;
    synchronized (sStyledCacheLock) {
        SparseArray<Typeface> styles = sStyledTypefaceCache.get(ni);
        if (styles == null) {
            styles = new SparseArray<Typeface>(4);
            sStyledTypefaceCache.put(ni, styles);
        } else {
            typeface = styles.get(style);
            if (typeface != null) {
                return typeface;
            }
        }
        typeface = new Typeface(nativeCreateFromTypeface(ni, style));
        styles.put(style, typeface);
    }
    return typeface;
}