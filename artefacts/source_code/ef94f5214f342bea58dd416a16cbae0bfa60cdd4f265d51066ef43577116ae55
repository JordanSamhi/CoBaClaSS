public void connect(){
    synchronized (mLock) {
        if (mConnection != null) {
            return;
        }
        Intent intent = new Intent().setComponent(mComponent);
        if (mClientLabel != 0) {
            intent.putExtra(Intent.EXTRA_CLIENT_LABEL, mClientLabel);
        }
        if (mSettingsAction != null) {
            intent.putExtra(Intent.EXTRA_CLIENT_INTENT, PendingIntent.getActivity(mContext, 0, new Intent(mSettingsAction), 0));
        }
        mConnection = new ServiceConnection() {

            @Override
            public void onBindingDied(ComponentName componentName) {
                final long timestamp = System.currentTimeMillis();
                Slog.w(TAG, "Service binding died: " + componentName);
                synchronized (mLock) {
                    if (mConnection != this) {
                        return;
                    }
                    mHandler.post(() -> {
                        mEventCb.onServiceEvent(new LogEvent(timestamp, mComponent, LogEvent.EVENT_BINDING_DIED));
                    });
                    mBoundInterface = null;
                    startRetriesLocked();
                }
            }

            @Override
            public void onServiceConnected(ComponentName componentName, IBinder iBinder) {
                final long timestamp = System.currentTimeMillis();
                Slog.i(TAG, "Service connected: " + componentName);
                IInterface iface = null;
                PendingEvent pendingEvent = null;
                synchronized (mLock) {
                    if (mConnection != this) {
                        return;
                    }
                    mHandler.post(() -> {
                        mEventCb.onServiceEvent(new LogEvent(timestamp, mComponent, LogEvent.EVENT_CONNECTED));
                    });
                    stopRetriesLocked();
                    mBoundInterface = null;
                    if (mChecker != null) {
                        mBoundInterface = mChecker.asInterface(iBinder);
                        if (!mChecker.checkType(mBoundInterface)) {
                            mBoundInterface = null;
                            Slog.w(TAG, "Invalid binder from " + componentName);
                            startRetriesLocked();
                            return;
                        }
                        iface = mBoundInterface;
                        pendingEvent = mPendingEvent;
                        mPendingEvent = null;
                    }
                }
                if (iface != null && pendingEvent != null) {
                    try {
                        pendingEvent.runEvent(iface);
                    } catch (RuntimeException | RemoteException ex) {
                        Slog.e(TAG, "Received exception from user service: ", ex);
                        startRetriesLocked();
                    }
                }
            }

            @Override
            public void onServiceDisconnected(ComponentName componentName) {
                final long timestamp = System.currentTimeMillis();
                Slog.w(TAG, "Service disconnected: " + componentName);
                synchronized (mLock) {
                    if (mConnection != this) {
                        return;
                    }
                    mHandler.post(() -> {
                        mEventCb.onServiceEvent(new LogEvent(timestamp, mComponent, LogEvent.EVENT_DISCONNECTED));
                    });
                    mBoundInterface = null;
                    startRetriesLocked();
                }
            }
        };
        int flags = Context.BIND_AUTO_CREATE | Context.BIND_FOREGROUND_SERVICE;
        if (mIsImportant) {
            flags |= Context.BIND_IMPORTANT;
        }
        try {
            if (!mContext.bindServiceAsUser(intent, mConnection, flags, new UserHandle(mUserId))) {
                Slog.w(TAG, "Unable to bind service: " + intent);
                startRetriesLocked();
            }
        } catch (SecurityException e) {
            Slog.w(TAG, "Unable to bind service: " + intent, e);
            startRetriesLocked();
        }
    }
}