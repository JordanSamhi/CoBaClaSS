public RegisterDexModuleResult registerDexModule(ApplicationInfo info, String dexPath, boolean isSharedModule, int userId){
    DexSearchResult searchResult = getDexPackage(info, dexPath, userId);
    if (searchResult.mOutcome == DEX_SEARCH_NOT_FOUND) {
        return new RegisterDexModuleResult(false, "Package not found");
    }
    if (!info.packageName.equals(searchResult.mOwningPackageName)) {
        return new RegisterDexModuleResult(false, "Dex path does not belong to package");
    }
    if (searchResult.mOutcome == DEX_SEARCH_FOUND_PRIMARY || searchResult.mOutcome == DEX_SEARCH_FOUND_SPLIT) {
        return new RegisterDexModuleResult(false, "Main apks cannot be registered");
    }
    boolean update = false;
    String loadingPackage = isSharedModule ? ".shared.module" : searchResult.mOwningPackageName;
    for (String isa : getAppDexInstructionSets(info.primaryCpuAbi, info.secondaryCpuAbi)) {
        boolean newUpdate = mPackageDexUsage.record(searchResult.mOwningPackageName, dexPath, userId, isa, false, loadingPackage, PackageDexUsage.VARIABLE_CLASS_LOADER_CONTEXT);
        update |= newUpdate;
    }
    if (update) {
        mPackageDexUsage.maybeWriteAsync();
    }
    DexUseInfo dexUseInfo = mPackageDexUsage.getPackageUseInfo(searchResult.mOwningPackageName).getDexUseInfoMap().get(dexPath);
    DexoptOptions options = new DexoptOptions(info.packageName, PackageManagerService.REASON_INSTALL, 0);
    int result = mPackageDexOptimizer.dexOptSecondaryDexPath(info, dexPath, dexUseInfo, options);
    if (result != PackageDexOptimizer.DEX_OPT_FAILED) {
        Slog.e(TAG, "Failed to optimize dex module " + dexPath);
    }
    return new RegisterDexModuleResult(true, "Dex module registered successfully");
}