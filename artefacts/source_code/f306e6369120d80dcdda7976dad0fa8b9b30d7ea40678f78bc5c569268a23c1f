public Connection dial(Phone phone, String dialString, int videoState) throws CallStateException{
    int subId = phone.getSubId();
    Connection result;
    if (VDBG) {
        Rlog.d(LOG_TAG, " dial(" + phone + ", " + dialString + ")" + " subId = " + subId);
        Rlog.d(LOG_TAG, toString());
    }
    if (!canDial(phone)) {
        String newDialString = PhoneNumberUtils.stripSeparators(dialString);
        if (phone.handleInCallMmiCommands(newDialString)) {
            return null;
        } else {
            throw new CallStateException("cannot dial in current state");
        }
    }
    if (hasActiveFgCall(subId)) {
        Phone activePhone = getActiveFgCall(subId).getPhone();
        boolean hasBgCall = !(activePhone.getBackgroundCall().isIdle());
        if (DBG) {
            Rlog.d(LOG_TAG, "hasBgCall: " + hasBgCall + " sameChannel:" + (activePhone == phone));
        }
        Phone imsPhone = phone.getImsPhone();
        if (activePhone != phone && (imsPhone == null || imsPhone != activePhone)) {
            if (hasBgCall) {
                Rlog.d(LOG_TAG, "Hangup");
                getActiveFgCall(subId).hangup();
            } else {
                Rlog.d(LOG_TAG, "Switch");
                activePhone.switchHoldingAndActive();
            }
        }
    }
    result = phone.dial(dialString, new PhoneInternalInterface.DialArgs.Builder<>().setVideoState(videoState).build());
    if (VDBG) {
        Rlog.d(LOG_TAG, "End dial(" + phone + ", " + dialString + ")");
        Rlog.d(LOG_TAG, toString());
    }
    return result;
}