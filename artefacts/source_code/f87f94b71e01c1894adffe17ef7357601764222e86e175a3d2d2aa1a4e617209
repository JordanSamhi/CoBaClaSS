public void quantize(final int[] pixels, final int maxColors, final Palette.Filter[] filters){
    mTimingLogger = LOG_TIMINGS ? new TimingLogger(LOG_TAG, "Creation") : null;
    mFilters = filters;
    final int[] hist = mHistogram = new int[1 << (QUANTIZE_WORD_WIDTH * 3)];
    for (int i = 0; i < pixels.length; i++) {
        final int quantizedColor = quantizeFromRgb888(pixels[i]);
        pixels[i] = quantizedColor;
        hist[quantizedColor]++;
    }
    if (LOG_TIMINGS) {
        mTimingLogger.addSplit("Histogram created");
    }
    int distinctColorCount = 0;
    for (int color = 0; color < hist.length; color++) {
        if (hist[color] > 0 && shouldIgnoreColor(color)) {
            hist[color] = 0;
        }
        if (hist[color] > 0) {
            distinctColorCount++;
        }
    }
    if (LOG_TIMINGS) {
        mTimingLogger.addSplit("Filtered colors and distinct colors counted");
    }
    final int[] colors = mColors = new int[distinctColorCount];
    int distinctColorIndex = 0;
    for (int color = 0; color < hist.length; color++) {
        if (hist[color] > 0) {
            colors[distinctColorIndex++] = color;
        }
    }
    if (LOG_TIMINGS) {
        mTimingLogger.addSplit("Distinct colors copied into array");
    }
    if (distinctColorCount <= maxColors) {
        mQuantizedColors = new ArrayList<>();
        for (int color : colors) {
            mQuantizedColors.add(new Swatch(approximateToRgb888(color), hist[color]));
        }
        if (LOG_TIMINGS) {
            mTimingLogger.addSplit("Too few colors present. Copied to Swatches");
            mTimingLogger.dumpToLog();
        }
    } else {
        mQuantizedColors = quantizePixels(maxColors);
        if (LOG_TIMINGS) {
            mTimingLogger.addSplit("Quantized colors computed");
            mTimingLogger.dumpToLog();
        }
    }
}