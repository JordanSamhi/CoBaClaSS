public final void performDirectAction(@NonNull DirectAction action, @Nullable Bundle extras, @Nullable CancellationSignal cancellationSignal, @NonNull @CallbackExecutor Executor resultExecutor, @NonNull Consumer<Bundle> resultListener){
    if (mToken == null) {
        throw new IllegalStateException("Can't call before onCreate()");
    }
    Preconditions.checkNotNull(resultExecutor);
    Preconditions.checkNotNull(resultListener);
    if (cancellationSignal != null) {
        cancellationSignal.throwIfCanceled();
    }
    final RemoteCallback cancellationCallback = (cancellationSignal != null) ? new RemoteCallback(createSafeResultListener(b -> {
        if (b != null) {
            final IBinder cancellation = b.getBinder(VoiceInteractor.KEY_CANCELLATION_SIGNAL);
            if (cancellation != null) {
                cancellationSignal.setRemote(ICancellationSignal.Stub.asInterface(cancellation));
            }
        }
    })) : null;
    final RemoteCallback resultCallback = new RemoteCallback(createSafeResultListener(b -> {
        if (b != null) {
            resultExecutor.execute(() -> resultListener.accept(b));
        } else {
            resultExecutor.execute(() -> resultListener.accept(Bundle.EMPTY));
        }
    }));
    try {
        mSystemService.performDirectAction(mToken, action.getId(), extras, action.getTaskId(), action.getActivityId(), cancellationCallback, resultCallback);
    } catch (RemoteException e) {
        e.rethrowFromSystemServer();
    }
}