public static ApplicationInfo generateApplicationInfoUnchecked(@NonNull ParsingPackageRead pkg, @PackageManager.ApplicationInfoFlags int flags, PackageUserState state, int userId){
    ApplicationInfo ai = pkg.toAppInfoWithoutState();
    ai.initForUser(userId);
    if ((flags & PackageManager.GET_META_DATA) == 0) {
        ai.metaData = null;
    }
    if ((flags & PackageManager.GET_SHARED_LIBRARY_FILES) == 0) {
        ai.sharedLibraryFiles = null;
        ai.sharedLibraryInfos = null;
    }
    if (!PackageParser.sCompatibilityModeEnabled) {
        ai.disableCompatibilityMode();
    }
    ai.flags |= flag(state.stopped, ApplicationInfo.FLAG_STOPPED) | flag(state.installed, ApplicationInfo.FLAG_INSTALLED) | flag(state.suspended, ApplicationInfo.FLAG_SUSPENDED);
    ai.privateFlags |= flag(state.instantApp, ApplicationInfo.PRIVATE_FLAG_INSTANT) | flag(state.virtualPreload, ApplicationInfo.PRIVATE_FLAG_VIRTUAL_PRELOAD) | flag(state.hidden, ApplicationInfo.PRIVATE_FLAG_HIDDEN);
    if (state.enabled == PackageManager.COMPONENT_ENABLED_STATE_ENABLED) {
        ai.enabled = true;
    } else if (state.enabled == PackageManager.COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED) {
        ai.enabled = (flags & PackageManager.GET_DISABLED_UNTIL_USED_COMPONENTS) != 0;
    } else if (state.enabled == PackageManager.COMPONENT_ENABLED_STATE_DISABLED || state.enabled == PackageManager.COMPONENT_ENABLED_STATE_DISABLED_USER) {
        ai.enabled = false;
    }
    ai.enabledSetting = state.enabled;
    if (ai.category == ApplicationInfo.CATEGORY_UNDEFINED) {
        ai.category = state.categoryHint;
    }
    if (ai.category == ApplicationInfo.CATEGORY_UNDEFINED) {
        ai.category = FallbackCategoryProvider.getFallbackCategory(ai.packageName);
    }
    ai.seInfoUser = SELinuxUtil.assignSeinfoUser(state);
    ai.resourceDirs = state.getAllOverlayPaths();
    return ai;
}