public void onRoleHoldersChanged(@NonNull String roleName, @NonNull UserHandle user){
    boolean relevantChange = false;
    for (int i = 0; i < NON_BLOCKABLE_DEFAULT_ROLES.length; i++) {
        if (NON_BLOCKABLE_DEFAULT_ROLES[i].equals(roleName)) {
            relevantChange = true;
            break;
        }
    }
    if (!relevantChange) {
        return;
    }
    ArraySet<String> roleHolders = new ArraySet<>(mRm.getRoleHoldersAsUser(roleName, user));
    ArrayMap<Integer, ArraySet<String>> prevApprovedForRole = mNonBlockableDefaultApps.getOrDefault(roleName, new ArrayMap<>());
    ArraySet<String> previouslyApproved = prevApprovedForRole.getOrDefault(user.getIdentifier(), new ArraySet<>());
    ArraySet<String> toRemove = new ArraySet<>();
    ArraySet<Pair<String, Integer>> toAdd = new ArraySet<>();
    for (String previous : previouslyApproved) {
        if (!roleHolders.contains(previous)) {
            toRemove.add(previous);
        }
    }
    for (String nowApproved : roleHolders) {
        if (!previouslyApproved.contains(nowApproved)) {
            toAdd.add(new Pair(nowApproved, getUidForPackage(nowApproved, user.getIdentifier())));
        }
    }
    prevApprovedForRole.put(user.getIdentifier(), roleHolders);
    mNonBlockableDefaultApps.put(roleName, prevApprovedForRole);
    mPreferencesHelper.updateDefaultApps(user.getIdentifier(), toRemove, toAdd);
}