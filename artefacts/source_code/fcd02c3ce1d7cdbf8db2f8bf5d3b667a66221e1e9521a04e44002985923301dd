public int removeSubInfo(String uniqueId, int subscriptionType){
    enforceModifyPhoneState("removeSubInfo");
    if (DBG) {
        logd("[removeSubInfo] uniqueId: " + uniqueId + ", subscriptionType: " + subscriptionType);
    }
    int subId = SubscriptionManager.INVALID_SUBSCRIPTION_ID;
    int slotIndex = SubscriptionManager.INVALID_SIM_SLOT_INDEX;
    for (SubscriptionInfo info : mCacheActiveSubInfoList) {
        if ((info.getSubscriptionType() == subscriptionType) && info.getIccId().equalsIgnoreCase(uniqueId)) {
            subId = info.getSubscriptionId();
            slotIndex = info.getSimSlotIndex();
            break;
        }
    }
    if (subId == SubscriptionManager.INVALID_SUBSCRIPTION_ID) {
        if (DBG) {
            logd("Invalid subscription details: subscriptionType = " + subscriptionType + ", uniqueId = " + uniqueId);
        }
        return -1;
    }
    if (DBG)
        logd("removing the subid : " + subId);
    int result = 0;
    final long identity = Binder.clearCallingIdentity();
    try {
        ContentResolver resolver = mContext.getContentResolver();
        result = resolver.delete(SubscriptionManager.CONTENT_URI, SubscriptionManager.UNIQUE_KEY_SUBSCRIPTION_ID + "=? AND " + SubscriptionManager.SUBSCRIPTION_TYPE + "=?", new String[] { Integer.toString(subId), Integer.toString(subscriptionType) });
        if (result != 1) {
            if (DBG) {
                logd("found NO subscription to remove with subscriptionType = " + subscriptionType + ", uniqueId = " + uniqueId);
            }
            return -1;
        }
        refreshCachedActiveSubscriptionInfoList();
        result = sSlotIndexToSubIds.removeFromSubIdList(slotIndex, subId);
        if (result == NO_ENTRY_FOR_SLOT_INDEX) {
            loge("sSlotIndexToSubIds has no entry for slotIndex = " + slotIndex);
        } else if (result == SUB_ID_NOT_IN_SLOT) {
            loge("sSlotIndexToSubIds has no subid: " + subId + ", in index: " + slotIndex);
        }
        int newDefault = SubscriptionManager.INVALID_SUBSCRIPTION_ID;
        SubscriptionInfo info = null;
        final List<SubscriptionInfo> records = getActiveSubscriptionInfoList(mContext.getOpPackageName(), mContext.getAttributionTag());
        if (!records.isEmpty()) {
            info = records.get(0);
        }
        updateDefaultSubIdsIfNeeded(info.getSubscriptionId(), info.getSubscriptionType());
        notifySubscriptionInfoChanged();
    } finally {
        Binder.restoreCallingIdentity(identity);
    }
    return result;
}