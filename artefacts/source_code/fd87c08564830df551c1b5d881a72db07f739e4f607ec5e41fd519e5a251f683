public void setExpandedHeight(float height){
    mExpandedHeight = height;
    setIsExpanded(height > 0);
    int minExpansionHeight = getMinExpansionHeight();
    if (height < minExpansionHeight) {
        mClipRect.left = 0;
        mClipRect.right = getWidth();
        mClipRect.top = 0;
        mClipRect.bottom = (int) height;
        height = minExpansionHeight;
        setRequestedClipBounds(mClipRect);
    } else {
        setRequestedClipBounds(null);
    }
    int stackHeight;
    float translationY;
    float appearEndPosition = getAppearEndPosition();
    float appearStartPosition = getAppearStartPosition();
    float appearFraction = 1.0f;
    boolean appearing = height < appearEndPosition;
    mAmbientState.setAppearing(appearing);
    if (!appearing) {
        translationY = 0;
        if (mShouldShowShelfOnly) {
            stackHeight = mTopPadding + mShelf.getIntrinsicHeight();
        } else if (mQsExpanded) {
            int stackStartPosition = mContentHeight - mTopPadding + mIntrinsicPadding;
            int stackEndPosition = mMaxTopPadding + mShelf.getIntrinsicHeight();
            if (stackStartPosition <= stackEndPosition) {
                stackHeight = stackEndPosition;
            } else {
                stackHeight = (int) NotificationUtils.interpolate(stackStartPosition, stackEndPosition, mQsExpansionFraction);
            }
        } else {
            stackHeight = (int) height;
        }
    } else {
        appearFraction = calculateAppearFraction(height);
        if (appearFraction >= 0) {
            translationY = NotificationUtils.interpolate(getExpandTranslationStart(), 0, appearFraction);
        } else {
            translationY = height - appearStartPosition + getExpandTranslationStart();
        }
        stackHeight = (int) (height - translationY);
        if (isHeadsUpTransition()) {
            translationY = MathUtils.lerp(mHeadsUpInset - mTopPadding, 0, appearFraction);
        }
    }
    mAmbientState.setAppearFraction(appearFraction);
    if (stackHeight != mCurrentStackHeight) {
        mCurrentStackHeight = stackHeight;
        updateAlgorithmHeightAndPadding();
        requestChildrenUpdate();
    }
    setStackTranslation(translationY);
    notifyAppearChangedListeners();
}