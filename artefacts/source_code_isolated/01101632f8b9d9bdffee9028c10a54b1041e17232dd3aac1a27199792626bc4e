public void updateAvailableNetworks(@NonNull List<AvailableNetworkInfo> availableNetworks, @Nullable @CallbackExecutor Executor executor, @UpdateAvailableNetworksResult @Nullable Consumer<Integer> callback){
    String pkgForDebug = mContext != null ? mContext.getOpPackageName() : "<unknown>";
    try {
        IOns iOpportunisticNetworkService = getIOns();
        if (iOpportunisticNetworkService == null || availableNetworks == null) {
            if (executor == null || callback == null) {
                return;
            }
            if (iOpportunisticNetworkService == null) {
                final long identity = Binder.clearCallingIdentity();
                try {
                    executor.execute(() -> {
                        if (Compatibility.isChangeEnabled(CALLBACK_ON_MORE_ERROR_CODE_CHANGE)) {
                            callback.accept(UPDATE_AVAILABLE_NETWORKS_REMOTE_SERVICE_EXCEPTION);
                        } else {
                            callback.accept(UPDATE_AVAILABLE_NETWORKS_UNKNOWN_FAILURE);
                        }
                    });
                } finally {
                    Binder.restoreCallingIdentity(identity);
                }
            } else {
                final long identity = Binder.clearCallingIdentity();
                try {
                    executor.execute(() -> {
                        callback.accept(UPDATE_AVAILABLE_NETWORKS_INVALID_ARGUMENTS);
                    });
                } finally {
                    Binder.restoreCallingIdentity(identity);
                }
            }
            return;
        }
        IUpdateAvailableNetworksCallback callbackStub = new IUpdateAvailableNetworksCallback.Stub() {

            @Override
            public void onComplete(int result) {
                if (executor == null || callback == null) {
                    return;
                }
                final long identity = Binder.clearCallingIdentity();
                try {
                    executor.execute(() -> {
                        callback.accept(result);
                    });
                } finally {
                    Binder.restoreCallingIdentity(identity);
                }
            }
        };
        iOpportunisticNetworkService.updateAvailableNetworks(availableNetworks, callbackStub, pkgForDebug);
    } catch (RemoteException ex) {
        Rlog.e(TAG, "updateAvailableNetworks RemoteException", ex);
    }
}