public void addOnOpportunisticSubscriptionsChangedListener(@NonNull SubscriptionManager.OnOpportunisticSubscriptionsChangedListener listener, @NonNull Executor executor){
    IOnSubscriptionsChangedListener callback = new IOnSubscriptionsChangedListener.Stub() {

        @Override
        public void onSubscriptionsChanged() {
            final long identity = Binder.clearCallingIdentity();
            try {
                Log.d(TAG, "onOpportunisticSubscriptionsChanged callback received.");
                executor.execute(() -> listener.onOpportunisticSubscriptionsChanged());
            } finally {
                Binder.restoreCallingIdentity(identity);
            }
        }
    };
    mOpportunisticSubscriptionChangedListenerMap.put(listener, callback);
    try {
        sRegistry.addOnOpportunisticSubscriptionsChangedListener(mContext.getOpPackageName(), mContext.getAttributionTag(), callback);
    } catch (RemoteException ex) {
    }
}