public void startProvisioning(OsuProvider provider, IProvisioningCallback callback){
    if (mVerboseLoggingEnabled) {
        Log.v(TAG, "startProvisioning received in state=" + mState);
    }
    if (mState != STATE_INIT) {
        if (mVerboseLoggingEnabled) {
            Log.v(TAG, "State Machine needs to be reset before starting provisioning");
        }
        resetStateMachineForFailure(ProvisioningCallback.OSU_FAILURE_PROVISIONING_ABORTED);
    }
    mProvisioningCallback = callback;
    mRedirectListener = RedirectListener.createInstance(mLooper);
    if (mRedirectListener == null) {
        resetStateMachineForFailure(ProvisioningCallback.OSU_FAILURE_START_REDIRECT_LISTENER);
        return;
    }
    if (!mOsuServerConnection.canValidateServer()) {
        Log.w(TAG, "Provisioning is not possible");
        resetStateMachineForFailure(ProvisioningCallback.OSU_FAILURE_PROVISIONING_NOT_AVAILABLE);
        return;
    }
    URL serverUrl;
    try {
        serverUrl = new URL(provider.getServerUri().toString());
    } catch (MalformedURLException e) {
        Log.e(TAG, "Invalid Server URL");
        resetStateMachineForFailure(ProvisioningCallback.OSU_FAILURE_SERVER_URL_INVALID);
        return;
    }
    mServerUrl = serverUrl;
    mOsuProvider = provider;
    if (mOsuProvider.getOsuSsid() == null) {
        List<ScanResult> scanResults = mWifiManager.getScanResults();
        mOsuProvider = getBestMatchingOsuProvider(scanResults, mOsuProvider);
        if (mOsuProvider == null) {
            resetStateMachineForFailure(ProvisioningCallback.OSU_FAILURE_OSU_PROVIDER_NOT_FOUND);
            return;
        }
    }
    mOsuNetworkConnection.setEventCallback(mOsuNetworkCallbacks);
    mOsuServerConnection.setEventCallback(new OsuServerCallbacks(++mCurrentSessionId));
    if (!mOsuNetworkConnection.connect(mOsuProvider.getOsuSsid(), mOsuProvider.getNetworkAccessIdentifier(), mOsuProvider.getFriendlyName())) {
        resetStateMachineForFailure(ProvisioningCallback.OSU_FAILURE_AP_CONNECTION);
        return;
    }
    invokeProvisioningCallback(PROVISIONING_STATUS, ProvisioningCallback.OSU_STATUS_AP_CONNECTING);
    changeState(STATE_AP_CONNECTING);
}