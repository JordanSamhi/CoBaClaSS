public long[] expand(Time dtstart, RecurrenceSet recur, long rangeStartMillis, long rangeEndMillis) throws DateException{
    String timezone = dtstart.timezone;
    mIterator.clear(timezone);
    mGenerated.clear(timezone);
    mIterator.set(rangeStartMillis);
    long rangeStartDateValue = normDateTimeComparisonValue(mIterator);
    long rangeEndDateValue;
    if (rangeEndMillis != -1) {
        mIterator.set(rangeEndMillis);
        rangeEndDateValue = normDateTimeComparisonValue(mIterator);
    } else {
        rangeEndDateValue = Long.MAX_VALUE;
    }
    TreeSet<Long> dtSet = new TreeSet<Long>();
    if (recur.rrules != null) {
        for (EventRecurrence rrule : recur.rrules) {
            expand(dtstart, rrule, rangeStartDateValue, rangeEndDateValue, true, dtSet);
        }
    }
    if (recur.rdates != null) {
        for (long dt : recur.rdates) {
            mIterator.set(dt);
            long dtvalue = normDateTimeComparisonValue(mIterator);
            dtSet.add(dtvalue);
        }
    }
    if (recur.exrules != null) {
        for (EventRecurrence exrule : recur.exrules) {
            expand(dtstart, exrule, rangeStartDateValue, rangeEndDateValue, false, dtSet);
        }
    }
    if (recur.exdates != null) {
        for (long dt : recur.exdates) {
            mIterator.set(dt);
            long dtvalue = normDateTimeComparisonValue(mIterator);
            dtSet.remove(dtvalue);
        }
    }
    if (dtSet.isEmpty()) {
        return new long[0];
    }
    int len = dtSet.size();
    long[] dates = new long[len];
    int i = 0;
    for (Long val : dtSet) {
        setTimeFromLongValue(mIterator, val);
        dates[i++] = mIterator.toMillis(true);
    }
    return dates;
}