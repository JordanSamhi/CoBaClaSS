public void registerTaskOrganizer(ITaskOrganizer organizer, int windowingMode){
    if (windowingMode == WINDOWING_MODE_PINNED) {
        if (!mService.mSupportsPictureInPicture) {
            throw new UnsupportedOperationException("Picture in picture is not supported on " + "this device");
        }
    } else if (WindowConfiguration.isSplitScreenWindowingMode(windowingMode)) {
        if (!mService.mSupportsSplitScreenMultiWindow) {
            throw new UnsupportedOperationException("Split-screen is not supported on this " + "device");
        }
    } else if (windowingMode == WINDOWING_MODE_MULTI_WINDOW) {
        if (!mService.mSupportsMultiWindow) {
            throw new UnsupportedOperationException("Multi-window is not supported on this " + "device");
        }
    } else {
        throw new UnsupportedOperationException("As of now only Pinned/Split/Multiwindow" + " windowing modes are supported for registerTaskOrganizer");
    }
    enforceStackPermission("registerTaskOrganizer()");
    final int uid = Binder.getCallingUid();
    final long origId = Binder.clearCallingIdentity();
    try {
        synchronized (mGlobalLock) {
            if (getTaskOrganizer(windowingMode) != null) {
                Slog.w(TAG, "Task organizer already exists for windowing mode: " + windowingMode);
            }
            LinkedList<IBinder> orgs = mTaskOrganizersForWindowingMode.get(windowingMode);
            if (orgs == null) {
                orgs = new LinkedList<>();
                mTaskOrganizersForWindowingMode.put(windowingMode, orgs);
            }
            orgs.add(organizer.asBinder());
            if (!mTaskOrganizerStates.containsKey(organizer.asBinder())) {
                mTaskOrganizerStates.put(organizer.asBinder(), new TaskOrganizerState(organizer, uid));
            }
            mService.mRootWindowContainer.forAllTasks((task) -> {
                if (task.getWindowingMode() == windowingMode) {
                    task.updateTaskOrganizerState(true);
                }
            });
        }
    } finally {
        Binder.restoreCallingIdentity(origId);
    }
}