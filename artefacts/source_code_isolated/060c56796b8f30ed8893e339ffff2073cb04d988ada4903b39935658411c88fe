public void updateWifiUsabilityStatsEntries(WifiInfo info, WifiLinkLayerStats stats){
    synchronized (mLock) {
        if (info == null) {
            return;
        }
        if (stats == null) {
            stats = new WifiLinkLayerStats();
            stats.timeStampInMs = mClock.getElapsedSinceBootMillis();
            stats.txmpdu_be = info.txSuccess;
            stats.retries_be = info.txRetries;
            stats.lostmpdu_be = info.txBad;
            stats.rxmpdu_be = info.rxSuccess;
        }
        WifiUsabilityStatsEntry wifiUsabilityStatsEntry = mWifiUsabilityStatsEntriesList.size() < MAX_WIFI_USABILITY_STATS_ENTRIES_LIST_SIZE ? new WifiUsabilityStatsEntry() : mWifiUsabilityStatsEntriesList.remove();
        wifiUsabilityStatsEntry.timeStampMs = stats.timeStampInMs;
        wifiUsabilityStatsEntry.totalTxSuccess = stats.txmpdu_be + stats.txmpdu_bk + stats.txmpdu_vi + stats.txmpdu_vo;
        wifiUsabilityStatsEntry.totalTxRetries = stats.retries_be + stats.retries_bk + stats.retries_vi + stats.retries_vo;
        wifiUsabilityStatsEntry.totalTxBad = stats.lostmpdu_be + stats.lostmpdu_bk + stats.lostmpdu_vi + stats.lostmpdu_vo;
        wifiUsabilityStatsEntry.totalRxSuccess = stats.rxmpdu_be + stats.rxmpdu_bk + stats.rxmpdu_vi + stats.rxmpdu_vo;
        wifiUsabilityStatsEntry.totalRadioOnTimeMs = stats.on_time;
        wifiUsabilityStatsEntry.totalRadioTxTimeMs = stats.tx_time;
        wifiUsabilityStatsEntry.totalRadioRxTimeMs = stats.rx_time;
        wifiUsabilityStatsEntry.totalScanTimeMs = stats.on_time_scan;
        wifiUsabilityStatsEntry.totalNanScanTimeMs = stats.on_time_nan_scan;
        wifiUsabilityStatsEntry.totalBackgroundScanTimeMs = stats.on_time_background_scan;
        wifiUsabilityStatsEntry.totalRoamScanTimeMs = stats.on_time_roam_scan;
        wifiUsabilityStatsEntry.totalPnoScanTimeMs = stats.on_time_pno_scan;
        wifiUsabilityStatsEntry.totalHotspot2ScanTimeMs = stats.on_time_hs20_scan;
        wifiUsabilityStatsEntry.rssi = info.getRssi();
        wifiUsabilityStatsEntry.linkSpeedMbps = info.getLinkSpeed();
        WifiLinkLayerStats.ChannelStats statsMap = stats.channelStatsMap.get(info.getFrequency());
        if (statsMap != null) {
            wifiUsabilityStatsEntry.totalRadioOnFreqTimeMs = statsMap.radioOnTimeMs;
            wifiUsabilityStatsEntry.totalCcaBusyFreqTimeMs = statsMap.ccaBusyTimeMs;
        }
        wifiUsabilityStatsEntry.totalBeaconRx = stats.beacon_rx;
        boolean isSameBssidAndFreq = mLastBssid == null || mLastFrequency == -1 || (mLastBssid.equals(info.getBSSID()) && mLastFrequency == info.getFrequency());
        mLastBssid = info.getBSSID();
        mLastFrequency = info.getFrequency();
        wifiUsabilityStatsEntry.wifiScore = mLastScoreNoReset;
        wifiUsabilityStatsEntry.wifiUsabilityScore = mLastWifiUsabilityScoreNoReset;
        wifiUsabilityStatsEntry.seqNumToFramework = mSeqNumToFramework;
        wifiUsabilityStatsEntry.predictionHorizonSec = mLastPredictionHorizonSecNoReset;
        switch(mProbeStatusSinceLastUpdate) {
            case android.net.wifi.WifiUsabilityStatsEntry.PROBE_STATUS_NO_PROBE:
                wifiUsabilityStatsEntry.probeStatusSinceLastUpdate = WifiUsabilityStatsEntry.PROBE_STATUS_NO_PROBE;
                break;
            case android.net.wifi.WifiUsabilityStatsEntry.PROBE_STATUS_SUCCESS:
                wifiUsabilityStatsEntry.probeStatusSinceLastUpdate = WifiUsabilityStatsEntry.PROBE_STATUS_SUCCESS;
                break;
            case android.net.wifi.WifiUsabilityStatsEntry.PROBE_STATUS_FAILURE:
                wifiUsabilityStatsEntry.probeStatusSinceLastUpdate = WifiUsabilityStatsEntry.PROBE_STATUS_FAILURE;
                break;
            default:
                wifiUsabilityStatsEntry.probeStatusSinceLastUpdate = WifiUsabilityStatsEntry.PROBE_STATUS_UNKNOWN;
                Log.e(TAG, "Unknown link probe status: " + mProbeStatusSinceLastUpdate);
        }
        wifiUsabilityStatsEntry.probeElapsedTimeSinceLastUpdateMs = mProbeElapsedTimeSinceLastUpdateMs;
        wifiUsabilityStatsEntry.probeMcsRateSinceLastUpdate = mProbeMcsRateSinceLastUpdate;
        wifiUsabilityStatsEntry.rxLinkSpeedMbps = info.getRxLinkSpeedMbps();
        wifiUsabilityStatsEntry.isSameBssidAndFreq = isSameBssidAndFreq;
        wifiUsabilityStatsEntry.seqNumInsideFramework = mSeqNumInsideFramework;
        wifiUsabilityStatsEntry.deviceMobilityState = mCurrentDeviceMobilityState;
        mWifiUsabilityStatsEntriesList.add(wifiUsabilityStatsEntry);
        mWifiUsabilityStatsCounter++;
        if (mWifiUsabilityStatsCounter >= NUM_WIFI_USABILITY_STATS_ENTRIES_PER_WIFI_GOOD) {
            addToWifiUsabilityStatsList(WifiUsabilityStats.LABEL_GOOD, WifiUsabilityStats.TYPE_UNKNOWN, -1);
        }
        if (mScoreBreachLowTimeMillis != -1) {
            long elapsedTime = mClock.getElapsedSinceBootMillis() - mScoreBreachLowTimeMillis;
            if (elapsedTime >= MIN_SCORE_BREACH_TO_GOOD_STATS_WAIT_TIME_MS) {
                mScoreBreachLowTimeMillis = -1;
                if (elapsedTime <= VALIDITY_PERIOD_OF_SCORE_BREACH_LOW_MS) {
                    addToWifiUsabilityStatsList(WifiUsabilityStats.LABEL_GOOD, WifiUsabilityStats.TYPE_UNKNOWN, -1);
                }
            }
        }
        sendWifiUsabilityStats(mSeqNumInsideFramework, isSameBssidAndFreq, createNewWifiUsabilityStatsEntryParcelable(wifiUsabilityStatsEntry));
        mSeqNumInsideFramework++;
        mProbeStatusSinceLastUpdate = android.net.wifi.WifiUsabilityStatsEntry.PROBE_STATUS_NO_PROBE;
        mProbeElapsedTimeSinceLastUpdateMs = -1;
        mProbeMcsRateSinceLastUpdate = -1;
    }
}