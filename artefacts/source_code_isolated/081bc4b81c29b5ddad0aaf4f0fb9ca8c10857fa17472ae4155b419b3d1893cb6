public int startConnectionEvent(WifiConfiguration config, String targetBSSID, int roamType){
    synchronized (mLock) {
        int overlapWithLastConnectionMs = 0;
        if (mCurrentConnectionEvent != null) {
            overlapWithLastConnectionMs = (int) (mClock.getElapsedSinceBootMillis() - mCurrentConnectionEvent.mRealStartTime);
            if (mCurrentConnectionEvent.mConfigSsid != null && mCurrentConnectionEvent.mConfigBssid != null && config != null && mCurrentConnectionEvent.mConfigSsid.equals(config.SSID) && (mCurrentConnectionEvent.mConfigBssid.equals("any") || mCurrentConnectionEvent.mConfigBssid.equals(targetBSSID))) {
                mCurrentConnectionEvent.mConfigBssid = targetBSSID;
                endConnectionEvent(ConnectionEvent.FAILURE_REDUNDANT_CONNECTION_ATTEMPT, WifiMetricsProto.ConnectionEvent.HLF_NONE, WifiMetricsProto.ConnectionEvent.FAILURE_REASON_UNKNOWN);
            } else {
                endConnectionEvent(ConnectionEvent.FAILURE_NEW_CONNECTION_ATTEMPT, WifiMetricsProto.ConnectionEvent.HLF_NONE, WifiMetricsProto.ConnectionEvent.FAILURE_REASON_UNKNOWN);
            }
        }
        while (mConnectionEventList.size() >= MAX_CONNECTION_EVENTS) {
            mConnectionEventList.remove(0);
        }
        mCurrentConnectionEvent = new ConnectionEvent();
        mCurrentConnectionEvent.mConnectionEvent.startTimeMillis = mClock.getWallClockMillis();
        mCurrentConnectionEvent.mConfigBssid = targetBSSID;
        mCurrentConnectionEvent.mConnectionEvent.roamType = roamType;
        mCurrentConnectionEvent.mConnectionEvent.networkSelectorExperimentId = mNetworkSelectorExperimentId;
        mCurrentConnectionEvent.mRouterFingerPrint.updateFromWifiConfiguration(config);
        mCurrentConnectionEvent.mConfigBssid = "any";
        mCurrentConnectionEvent.mRealStartTime = mClock.getElapsedSinceBootMillis();
        mCurrentConnectionEvent.mWifiState = mWifiState;
        mCurrentConnectionEvent.mScreenOn = mScreenOn;
        mConnectionEventList.add(mCurrentConnectionEvent);
        mScanResultRssiTimestampMillis = -1;
        if (config != null) {
            mCurrentConnectionEvent.mConnectionEvent.useRandomizedMac = config.macRandomizationSetting == WifiConfiguration.RANDOMIZATION_PERSISTENT;
            mCurrentConnectionEvent.mConnectionEvent.useAggressiveMac = mWifiConfigManager.shouldUseAggressiveRandomization(config);
            mCurrentConnectionEvent.mConnectionEvent.connectionNominator = mNetworkIdToNominatorId.get(config.networkId, WifiMetricsProto.ConnectionEvent.NOMINATOR_UNKNOWN);
            ScanResult candidate = config.getNetworkSelectionStatus().getCandidate();
            if (candidate != null) {
                mScanResultRssi = candidate.level;
                mScanResultRssiTimestampMillis = mClock.getElapsedSinceBootMillis();
            }
            mCurrentConnectionEvent.mConnectionEvent.numBssidInBlocklist = mBssidBlocklistMonitor.getNumBlockedBssidsForSsid(config.SSID);
            mCurrentConnectionEvent.mConnectionEvent.networkType = WifiMetricsProto.ConnectionEvent.TYPE_UNKNOWN;
            mCurrentConnectionEvent.mConnectionEvent.isOsuProvisioned = false;
            if (config.isPasspoint()) {
                mCurrentConnectionEvent.mConnectionEvent.networkType = WifiMetricsProto.ConnectionEvent.TYPE_PASSPOINT;
                mCurrentConnectionEvent.mConnectionEvent.isOsuProvisioned = !TextUtils.isEmpty(config.updateIdentifier);
            } else if (WifiConfigurationUtil.isConfigForSaeNetwork(config)) {
                mCurrentConnectionEvent.mConnectionEvent.networkType = WifiMetricsProto.ConnectionEvent.TYPE_WPA3;
            } else if (WifiConfigurationUtil.isConfigForWapiPskNetwork(config)) {
                mCurrentConnectionEvent.mConnectionEvent.networkType = WifiMetricsProto.ConnectionEvent.TYPE_WAPI;
            } else if (WifiConfigurationUtil.isConfigForWapiCertNetwork(config)) {
                mCurrentConnectionEvent.mConnectionEvent.networkType = WifiMetricsProto.ConnectionEvent.TYPE_WAPI;
            } else if (WifiConfigurationUtil.isConfigForPskNetwork(config)) {
                mCurrentConnectionEvent.mConnectionEvent.networkType = WifiMetricsProto.ConnectionEvent.TYPE_WPA2;
            } else if (WifiConfigurationUtil.isConfigForEapNetwork(config)) {
                mCurrentConnectionEvent.mConnectionEvent.networkType = WifiMetricsProto.ConnectionEvent.TYPE_EAP;
            } else if (WifiConfigurationUtil.isConfigForOweNetwork(config)) {
                mCurrentConnectionEvent.mConnectionEvent.networkType = WifiMetricsProto.ConnectionEvent.TYPE_OWE;
            } else if (WifiConfigurationUtil.isConfigForOpenNetwork(config)) {
                mCurrentConnectionEvent.mConnectionEvent.networkType = WifiMetricsProto.ConnectionEvent.TYPE_OPEN;
            }
            if (!config.fromWifiNetworkSuggestion) {
                mCurrentConnectionEvent.mConnectionEvent.networkCreator = WifiMetricsProto.ConnectionEvent.CREATOR_USER;
            } else if (config.carrierId != TelephonyManager.UNKNOWN_CARRIER_ID) {
                mCurrentConnectionEvent.mConnectionEvent.networkCreator = WifiMetricsProto.ConnectionEvent.CREATOR_CARRIER;
            } else {
                mCurrentConnectionEvent.mConnectionEvent.networkCreator = WifiMetricsProto.ConnectionEvent.CREATOR_UNKNOWN;
            }
            mCurrentConnectionEvent.mConnectionEvent.screenOn = mScreenOn;
            if (mCurrentConnectionEvent.mConfigSsid != null) {
                WifiScoreCard.NetworkConnectionStats recentStats = mWifiScoreCard.lookupNetwork(mCurrentConnectionEvent.mConfigSsid).getRecentStats();
                mCurrentConnectionEvent.mConnectionEvent.numConsecutiveConnectionFailure = recentStats.getCount(WifiScoreCard.CNT_CONSECUTIVE_CONNECTION_FAILURE);
            }
        }
        return overlapWithLastConnectionMs;
    }
}