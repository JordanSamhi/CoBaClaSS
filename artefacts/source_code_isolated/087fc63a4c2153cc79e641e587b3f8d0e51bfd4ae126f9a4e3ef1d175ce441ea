public WindowInsets calculateInsets(Rect frame, @Nullable InsetsState ignoringVisibilityState, boolean isScreenRound, boolean alwaysConsumeSystemBars, DisplayCutout cutout, int legacySoftInputMode, int legacyWindowFlags, int legacySystemUiFlags, @Nullable @InternalInsetsSide SparseIntArray typeSideMap){
    Insets[] typeInsetsMap = new Insets[Type.SIZE];
    Insets[] typeMaxInsetsMap = new Insets[Type.SIZE];
    boolean[] typeVisibilityMap = new boolean[SIZE];
    final Rect relativeFrame = new Rect(frame);
    final Rect relativeFrameMax = new Rect(frame);
    for (int type = FIRST_TYPE; type <= LAST_TYPE; type++) {
        InsetsSource source = mSources[type];
        if (source == null) {
            int index = indexOf(toPublicType(type));
            if (typeInsetsMap[index] == null) {
                typeInsetsMap[index] = Insets.NONE;
            }
            continue;
        }
        boolean skipNonImeInImeMode = ViewRootImpl.sNewInsetsMode == NEW_INSETS_MODE_IME && source.getType() != ITYPE_IME;
        boolean skipSystemBars = ViewRootImpl.sNewInsetsMode != NEW_INSETS_MODE_FULL && (type == ITYPE_STATUS_BAR || type == ITYPE_NAVIGATION_BAR);
        boolean skipLegacyTypes = ViewRootImpl.sNewInsetsMode == NEW_INSETS_MODE_NONE && (type == ITYPE_STATUS_BAR || type == ITYPE_NAVIGATION_BAR || type == ITYPE_IME);
        if (skipSystemBars || skipLegacyTypes || skipNonImeInImeMode) {
            typeVisibilityMap[indexOf(toPublicType(type))] = source.isVisible();
            continue;
        }
        processSource(source, relativeFrame, false, typeInsetsMap, typeSideMap, typeVisibilityMap);
        if (source.getType() != ITYPE_IME) {
            InsetsSource ignoringVisibilitySource = ignoringVisibilityState != null ? ignoringVisibilityState.getSource(type) : source;
            if (ignoringVisibilitySource == null) {
                continue;
            }
            processSource(ignoringVisibilitySource, relativeFrameMax, true, typeMaxInsetsMap, null, null);
        }
    }
    final int softInputAdjustMode = legacySoftInputMode & SOFT_INPUT_MASK_ADJUST;
    @InsetsType
    int compatInsetsTypes = systemBars() | displayCutout();
    if (softInputAdjustMode == SOFT_INPUT_ADJUST_RESIZE) {
        compatInsetsTypes |= ime();
    }
    if ((legacyWindowFlags & FLAG_FULLSCREEN) != 0) {
        compatInsetsTypes &= ~statusBars();
    }
    return new WindowInsets(typeInsetsMap, typeMaxInsetsMap, typeVisibilityMap, isScreenRound, alwaysConsumeSystemBars, cutout, compatInsetsTypes, sNewInsetsMode == NEW_INSETS_MODE_FULL && (legacySystemUiFlags & SYSTEM_UI_FLAG_LAYOUT_STABLE) != 0);
}