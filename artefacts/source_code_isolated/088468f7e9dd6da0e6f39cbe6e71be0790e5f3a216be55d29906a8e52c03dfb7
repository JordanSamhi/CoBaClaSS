public boolean bindBackupAgent(String packageName, int backupMode, int targetUserId){
    if (DEBUG_BACKUP) {
        Slog.v(TAG, "bindBackupAgent: app=" + packageName + " mode=" + backupMode + " targetUserId=" + targetUserId + " callingUid = " + Binder.getCallingUid() + " uid = " + Process.myUid());
    }
    enforceCallingPermission("android.permission.CONFIRM_FULL_BACKUP", "bindBackupAgent");
    final int instantiatedUserId = PLATFORM_PACKAGE_NAME.equals(packageName) ? UserHandle.USER_SYSTEM : targetUserId;
    IPackageManager pm = AppGlobals.getPackageManager();
    ApplicationInfo app = null;
    try {
        app = pm.getApplicationInfo(packageName, STOCK_PM_FLAGS, instantiatedUserId);
    } catch (RemoteException e) {
    }
    if (app == null) {
        Slog.w(TAG, "Unable to bind backup agent for " + packageName);
        return false;
    }
    int oldBackupUid;
    int newBackupUid;
    synchronized (this) {
        try {
            AppGlobals.getPackageManager().setPackageStoppedState(app.packageName, false, UserHandle.getUserId(app.uid));
        } catch (RemoteException e) {
        } catch (IllegalArgumentException e) {
            Slog.w(TAG, "Failed trying to unstop package " + app.packageName + ": " + e);
        }
        BackupRecord r = new BackupRecord(app, backupMode, targetUserId);
        ComponentName hostingName = (backupMode == ApplicationThreadConstants.BACKUP_MODE_INCREMENTAL) ? new ComponentName(app.packageName, app.backupAgentName) : new ComponentName("android", "FullBackupAgent");
        ProcessRecord proc = startProcessLocked(app.processName, app, false, 0, new HostingRecord("backup", hostingName), ZYGOTE_POLICY_FLAG_SYSTEM_PROCESS, false, false, false);
        if (proc == null) {
            Slog.e(TAG, "Unable to start backup agent process " + r);
            return false;
        }
        if (UserHandle.isApp(app.uid) && backupMode == ApplicationThreadConstants.BACKUP_MODE_FULL) {
            proc.inFullBackup = true;
        }
        r.app = proc;
        final BackupRecord backupTarget = mBackupTargets.get(targetUserId);
        oldBackupUid = backupTarget != null ? backupTarget.appInfo.uid : -1;
        newBackupUid = proc.inFullBackup ? r.appInfo.uid : -1;
        mBackupTargets.put(targetUserId, r);
        updateOomAdjLocked(proc, true, OomAdjuster.OOM_ADJ_REASON_NONE);
        if (proc.thread != null) {
            if (DEBUG_BACKUP)
                Slog.v(TAG_BACKUP, "Agent proc already running: " + proc);
            try {
                proc.thread.scheduleCreateBackupAgent(app, compatibilityInfoForPackage(app), backupMode, targetUserId);
            } catch (RemoteException e) {
            }
        } else {
            if (DEBUG_BACKUP)
                Slog.v(TAG_BACKUP, "Agent proc not running, waiting for attach");
        }
    }
    JobSchedulerInternal js = LocalServices.getService(JobSchedulerInternal.class);
    if (oldBackupUid != -1) {
        js.removeBackingUpUid(oldBackupUid);
    }
    if (newBackupUid != -1) {
        js.addBackingUpUid(newBackupUid);
    }
    return true;
}