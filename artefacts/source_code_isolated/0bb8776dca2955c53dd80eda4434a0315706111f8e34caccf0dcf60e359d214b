public boolean connect(WifiSsid ssid, String nai, String friendlyName){
    if (mConnected) {
        if (mVerboseLoggingEnabled) {
            Log.v(TAG, "Connect called twice");
        }
        return true;
    }
    if (!mWifiEnabled) {
        Log.w(TAG, "Wifi is not enabled");
        return false;
    }
    WifiConfiguration config = new WifiConfiguration();
    config.SSID = "\"" + ssid.toString() + "\"";
    config.noInternetAccessExpected = true;
    config.osu = true;
    config.ephemeral = true;
    config.providerFriendlyName = friendlyName;
    if (TextUtils.isEmpty(nai)) {
        config.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.NONE);
    } else {
        config.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.OSEN);
        config.allowedProtocols.set(WifiConfiguration.Protocol.OSEN);
        config.enterpriseConfig.setDomainSuffixMatch(nai);
        config.enterpriseConfig.setEapMethod(WifiEnterpriseConfig.Eap.UNAUTH_TLS);
        config.enterpriseConfig.setCaPath(WfaKeyStore.DEFAULT_WFA_CERT_DIR);
    }
    mNetworkId = mWifiManager.addNetwork(config);
    if (mNetworkId < 0) {
        Log.e(TAG, "Unable to add network");
        return false;
    }
    NetworkRequest networkRequest = new NetworkRequest.Builder().addTransportType(NetworkCapabilities.TRANSPORT_WIFI).removeCapability(NET_CAPABILITY_TRUSTED).build();
    mConnectivityManager.requestNetwork(networkRequest, mConnectivityCallbacks, mHandler, TIMEOUT_MS);
    if (!mWifiManager.enableNetwork(mNetworkId, true)) {
        Log.e(TAG, "Unable to enable network " + mNetworkId);
        disconnectIfNeeded();
        return false;
    }
    if (mVerboseLoggingEnabled) {
        Log.v(TAG, "Current network ID " + mNetworkId);
    }
    return true;
}