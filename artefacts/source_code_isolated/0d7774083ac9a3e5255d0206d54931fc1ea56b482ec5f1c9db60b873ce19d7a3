public AudioTrack build() throws UnsupportedOperationException{
    if (mAttributes == null) {
        mAttributes = new AudioAttributes.Builder().setUsage(AudioAttributes.USAGE_MEDIA).build();
    }
    switch(mPerformanceMode) {
        case PERFORMANCE_MODE_LOW_LATENCY:
            mAttributes = new AudioAttributes.Builder(mAttributes).replaceFlags((mAttributes.getAllFlags() | AudioAttributes.FLAG_LOW_LATENCY) & ~AudioAttributes.FLAG_DEEP_BUFFER).build();
            break;
        case PERFORMANCE_MODE_NONE:
            if (!shouldEnablePowerSaving(mAttributes, mFormat, mBufferSizeInBytes, mMode)) {
                break;
            }
        case PERFORMANCE_MODE_POWER_SAVING:
            mAttributes = new AudioAttributes.Builder(mAttributes).replaceFlags((mAttributes.getAllFlags() | AudioAttributes.FLAG_DEEP_BUFFER) & ~AudioAttributes.FLAG_LOW_LATENCY).build();
            break;
    }
    if (mFormat == null) {
        mFormat = new AudioFormat.Builder().setChannelMask(AudioFormat.CHANNEL_OUT_STEREO).setEncoding(AudioFormat.ENCODING_DEFAULT).build();
    }
    if (mOffload) {
        if (mPerformanceMode == PERFORMANCE_MODE_LOW_LATENCY) {
            throw new UnsupportedOperationException("Offload and low latency modes are incompatible");
        }
        if (!AudioSystem.isOffloadSupported(mFormat, mAttributes)) {
            throw new UnsupportedOperationException("Cannot create AudioTrack, offload format / attributes not supported");
        }
    }
    try {
        if (mMode == MODE_STREAM && mBufferSizeInBytes == 0) {
            mBufferSizeInBytes = mFormat.getChannelCount() * mFormat.getBytesPerSample(mFormat.getEncoding());
        }
        final AudioTrack track = new AudioTrack(mAttributes, mFormat, mBufferSizeInBytes, mMode, mSessionId, mOffload, mEncapsulationMode, mTunerConfiguration);
        if (track.getState() == STATE_UNINITIALIZED) {
            throw new UnsupportedOperationException("Cannot create AudioTrack");
        }
        return track;
    } catch (IllegalArgumentException e) {
        throw new UnsupportedOperationException(e.getMessage());
    }
}