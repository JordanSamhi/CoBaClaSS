public void updateWifiState(@Nullable final WifiActivityEnergyInfo info){
    if (DEBUG_ENERGY) {
        Slog.d(TAG, "Updating wifi stats: " + Arrays.toString(mWifiIfaces));
    }
    NetworkStats delta = null;
    synchronized (mWifiNetworkLock) {
        final NetworkStats latestStats = readNetworkStatsLocked(mWifiIfaces);
        if (latestStats != null) {
            delta = NetworkStats.subtract(latestStats, mLastWifiNetworkStats, null, null, mNetworkStatsPool.acquire());
            mNetworkStatsPool.release(mLastWifiNetworkStats);
            mLastWifiNetworkStats = latestStats;
        }
    }
    synchronized (this) {
        if (!mOnBatteryInternal) {
            if (delta != null) {
                mNetworkStatsPool.release(delta);
            }
            return;
        }
        final long elapsedRealtimeMs = mClocks.elapsedRealtime();
        SparseLongArray rxPackets = new SparseLongArray();
        SparseLongArray txPackets = new SparseLongArray();
        long totalTxPackets = 0;
        long totalRxPackets = 0;
        if (delta != null) {
            NetworkStats.Entry entry = new NetworkStats.Entry();
            final int size = delta.size();
            for (int i = 0; i < size; i++) {
                entry = delta.getValues(i, entry);
                if (DEBUG_ENERGY) {
                    Slog.d(TAG, "Wifi uid " + entry.uid + ": delta rx=" + entry.rxBytes + " tx=" + entry.txBytes + " rxPackets=" + entry.rxPackets + " txPackets=" + entry.txPackets);
                }
                if (entry.rxBytes == 0 && entry.txBytes == 0) {
                    continue;
                }
                final Uid u = getUidStatsLocked(mapUid(entry.uid));
                if (entry.rxBytes != 0) {
                    u.noteNetworkActivityLocked(NETWORK_WIFI_RX_DATA, entry.rxBytes, entry.rxPackets);
                    if (entry.set == NetworkStats.SET_DEFAULT) {
                        u.noteNetworkActivityLocked(NETWORK_WIFI_BG_RX_DATA, entry.rxBytes, entry.rxPackets);
                    }
                    mNetworkByteActivityCounters[NETWORK_WIFI_RX_DATA].addCountLocked(entry.rxBytes);
                    mNetworkPacketActivityCounters[NETWORK_WIFI_RX_DATA].addCountLocked(entry.rxPackets);
                    rxPackets.put(u.getUid(), entry.rxPackets);
                    totalRxPackets += entry.rxPackets;
                }
                if (entry.txBytes != 0) {
                    u.noteNetworkActivityLocked(NETWORK_WIFI_TX_DATA, entry.txBytes, entry.txPackets);
                    if (entry.set == NetworkStats.SET_DEFAULT) {
                        u.noteNetworkActivityLocked(NETWORK_WIFI_BG_TX_DATA, entry.txBytes, entry.txPackets);
                    }
                    mNetworkByteActivityCounters[NETWORK_WIFI_TX_DATA].addCountLocked(entry.txBytes);
                    mNetworkPacketActivityCounters[NETWORK_WIFI_TX_DATA].addCountLocked(entry.txPackets);
                    txPackets.put(u.getUid(), entry.txPackets);
                    totalTxPackets += entry.txPackets;
                }
            }
            mNetworkStatsPool.release(delta);
            delta = null;
        }
        if (info != null) {
            mHasWifiReporting = true;
            final long txTimeMs = info.getControllerTxDurationMillis();
            final long rxTimeMs = info.getControllerRxDurationMillis();
            final long scanTimeMs = info.getControllerScanDurationMillis();
            final long idleTimeMs = info.getControllerIdleDurationMillis();
            final long totalTimeMs = txTimeMs + rxTimeMs + idleTimeMs;
            long leftOverRxTimeMs = rxTimeMs;
            long leftOverTxTimeMs = txTimeMs;
            if (DEBUG_ENERGY) {
                Slog.d(TAG, "------ BEGIN WiFi power blaming ------");
                Slog.d(TAG, "  Tx Time:    " + txTimeMs + " ms");
                Slog.d(TAG, "  Rx Time:    " + rxTimeMs + " ms");
                Slog.d(TAG, "  Idle Time:  " + idleTimeMs + " ms");
                Slog.d(TAG, "  Total Time: " + totalTimeMs + " ms");
                Slog.d(TAG, "  Scan Time:  " + scanTimeMs + " ms");
            }
            long totalWifiLockTimeMs = 0;
            long totalScanTimeMs = 0;
            final int uidStatsSize = mUidStats.size();
            for (int i = 0; i < uidStatsSize; i++) {
                final Uid uid = mUidStats.valueAt(i);
                totalScanTimeMs += uid.mWifiScanTimer.getTimeSinceMarkLocked(elapsedRealtimeMs * 1000) / 1000;
                totalWifiLockTimeMs += uid.mFullWifiLockTimer.getTimeSinceMarkLocked(elapsedRealtimeMs * 1000) / 1000;
            }
            if (DEBUG_ENERGY && totalScanTimeMs > rxTimeMs) {
                Slog.d(TAG, "  !Estimated scan time > Actual rx time (" + totalScanTimeMs + " ms > " + rxTimeMs + " ms). Normalizing scan time.");
            }
            if (DEBUG_ENERGY && totalScanTimeMs > txTimeMs) {
                Slog.d(TAG, "  !Estimated scan time > Actual tx time (" + totalScanTimeMs + " ms > " + txTimeMs + " ms). Normalizing scan time.");
            }
            for (int i = 0; i < uidStatsSize; i++) {
                final Uid uid = mUidStats.valueAt(i);
                long scanTimeSinceMarkMs = uid.mWifiScanTimer.getTimeSinceMarkLocked(elapsedRealtimeMs * 1000) / 1000;
                if (scanTimeSinceMarkMs > 0) {
                    uid.mWifiScanTimer.setMark(elapsedRealtimeMs);
                    long scanRxTimeSinceMarkMs = scanTimeSinceMarkMs;
                    long scanTxTimeSinceMarkMs = scanTimeSinceMarkMs;
                    if (totalScanTimeMs > rxTimeMs) {
                        scanRxTimeSinceMarkMs = (rxTimeMs * scanRxTimeSinceMarkMs) / totalScanTimeMs;
                    }
                    if (totalScanTimeMs > txTimeMs) {
                        scanTxTimeSinceMarkMs = (txTimeMs * scanTxTimeSinceMarkMs) / totalScanTimeMs;
                    }
                    if (DEBUG_ENERGY) {
                        Slog.d(TAG, "  ScanTime for UID " + uid.getUid() + ": Rx:" + scanRxTimeSinceMarkMs + " ms  Tx:" + scanTxTimeSinceMarkMs + " ms)");
                    }
                    ControllerActivityCounterImpl activityCounter = uid.getOrCreateWifiControllerActivityLocked();
                    activityCounter.getRxTimeCounter().addCountLocked(scanRxTimeSinceMarkMs);
                    activityCounter.getTxTimeCounters()[0].addCountLocked(scanTxTimeSinceMarkMs);
                    leftOverRxTimeMs -= scanRxTimeSinceMarkMs;
                    leftOverTxTimeMs -= scanTxTimeSinceMarkMs;
                }
                final long wifiLockTimeSinceMarkMs = uid.mFullWifiLockTimer.getTimeSinceMarkLocked(elapsedRealtimeMs * 1000) / 1000;
                if (wifiLockTimeSinceMarkMs > 0) {
                    uid.mFullWifiLockTimer.setMark(elapsedRealtimeMs);
                    final long myIdleTimeMs = (wifiLockTimeSinceMarkMs * idleTimeMs) / totalWifiLockTimeMs;
                    if (DEBUG_ENERGY) {
                        Slog.d(TAG, "  IdleTime for UID " + uid.getUid() + ": " + myIdleTimeMs + " ms");
                    }
                    uid.getOrCreateWifiControllerActivityLocked().getIdleTimeCounter().addCountLocked(myIdleTimeMs);
                }
            }
            if (DEBUG_ENERGY) {
                Slog.d(TAG, "  New RxPower: " + leftOverRxTimeMs + " ms");
                Slog.d(TAG, "  New TxPower: " + leftOverTxTimeMs + " ms");
            }
            for (int i = 0; i < txPackets.size(); i++) {
                final Uid uid = getUidStatsLocked(txPackets.keyAt(i));
                final long myTxTimeMs = (txPackets.valueAt(i) * leftOverTxTimeMs) / totalTxPackets;
                if (DEBUG_ENERGY) {
                    Slog.d(TAG, "  TxTime for UID " + uid.getUid() + ": " + myTxTimeMs + " ms");
                }
                uid.getOrCreateWifiControllerActivityLocked().getTxTimeCounters()[0].addCountLocked(myTxTimeMs);
            }
            for (int i = 0; i < rxPackets.size(); i++) {
                final Uid uid = getUidStatsLocked(rxPackets.keyAt(i));
                final long myRxTimeMs = (rxPackets.valueAt(i) * leftOverRxTimeMs) / totalRxPackets;
                if (DEBUG_ENERGY) {
                    Slog.d(TAG, "  RxTime for UID " + uid.getUid() + ": " + myRxTimeMs + " ms");
                }
                uid.getOrCreateWifiControllerActivityLocked().getRxTimeCounter().addCountLocked(myRxTimeMs);
            }
            mWifiActivity.getRxTimeCounter().addCountLocked(info.getControllerRxDurationMillis());
            mWifiActivity.getTxTimeCounters()[0].addCountLocked(info.getControllerTxDurationMillis());
            mWifiActivity.getScanTimeCounter().addCountLocked(info.getControllerScanDurationMillis());
            mWifiActivity.getIdleTimeCounter().addCountLocked(info.getControllerIdleDurationMillis());
            final double opVolt = mPowerProfile.getAveragePower(PowerProfile.POWER_WIFI_CONTROLLER_OPERATING_VOLTAGE) / 1000.0;
            if (opVolt != 0) {
                mWifiActivity.getPowerCounter().addCountLocked((long) (info.getControllerEnergyUsedMicroJoules() / opVolt));
            }
            long monitoredRailChargeConsumedMaMs = (long) (mTmpRailStats.getWifiTotalEnergyUseduWs() / opVolt);
            mWifiActivity.getMonitoredRailChargeConsumedMaMs().addCountLocked(monitoredRailChargeConsumedMaMs);
            mHistoryCur.wifiRailChargeMah += (monitoredRailChargeConsumedMaMs / MILLISECONDS_IN_HOUR);
            addHistoryRecordLocked(mClocks.elapsedRealtime(), mClocks.uptimeMillis());
            mTmpRailStats.resetWifiTotalEnergyUsed();
        }
    }
}