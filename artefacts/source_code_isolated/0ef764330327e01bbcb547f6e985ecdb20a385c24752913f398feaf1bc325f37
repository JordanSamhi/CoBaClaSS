public TextDirectionHeuristic getTextDirectionHeuristic(){
    if (hasPasswordTransformationMethod()) {
        return TextDirectionHeuristics.LTR;
    }
    if (mEditor != null && (mEditor.mInputType & EditorInfo.TYPE_MASK_CLASS) == EditorInfo.TYPE_CLASS_PHONE) {
        final DecimalFormatSymbols symbols = DecimalFormatSymbols.getInstance(getTextLocale());
        final String zero = symbols.getDigitStrings()[0];
        final int firstCodepoint = zero.codePointAt(0);
        final byte digitDirection = Character.getDirectionality(firstCodepoint);
        if (digitDirection == Character.DIRECTIONALITY_RIGHT_TO_LEFT || digitDirection == Character.DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC) {
            return TextDirectionHeuristics.RTL;
        } else {
            return TextDirectionHeuristics.LTR;
        }
    }
    final boolean defaultIsRtl = (getLayoutDirection() == LAYOUT_DIRECTION_RTL);
    switch(getTextDirection()) {
        default:
        case TEXT_DIRECTION_FIRST_STRONG:
            return (defaultIsRtl ? TextDirectionHeuristics.FIRSTSTRONG_RTL : TextDirectionHeuristics.FIRSTSTRONG_LTR);
        case TEXT_DIRECTION_ANY_RTL:
            return TextDirectionHeuristics.ANYRTL_LTR;
        case TEXT_DIRECTION_LTR:
            return TextDirectionHeuristics.LTR;
        case TEXT_DIRECTION_RTL:
            return TextDirectionHeuristics.RTL;
        case TEXT_DIRECTION_LOCALE:
            return TextDirectionHeuristics.LOCALE;
        case TEXT_DIRECTION_FIRST_STRONG_LTR:
            return TextDirectionHeuristics.FIRSTSTRONG_LTR;
        case TEXT_DIRECTION_FIRST_STRONG_RTL:
            return TextDirectionHeuristics.FIRSTSTRONG_RTL;
    }
}