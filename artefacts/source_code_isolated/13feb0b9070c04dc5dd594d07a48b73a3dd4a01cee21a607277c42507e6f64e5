public void saveToXml(@NonNull XmlSerializer serializer) throws IOException{
    serializer.startTag(null, TAG_BRIGHTNESS_CURVE);
    if (mDescription != null) {
        serializer.attribute(null, ATTR_DESCRIPTION, mDescription);
    }
    for (int i = 0; i < mLux.length; i++) {
        serializer.startTag(null, TAG_BRIGHTNESS_POINT);
        serializer.attribute(null, ATTR_LUX, Float.toString(mLux[i]));
        serializer.attribute(null, ATTR_NITS, Float.toString(mNits[i]));
        serializer.endTag(null, TAG_BRIGHTNESS_POINT);
    }
    serializer.endTag(null, TAG_BRIGHTNESS_CURVE);
    serializer.startTag(null, TAG_BRIGHTNESS_CORRECTIONS);
    for (Map.Entry<String, BrightnessCorrection> entry : mCorrectionsByPackageName.entrySet()) {
        final String packageName = entry.getKey();
        final BrightnessCorrection correction = entry.getValue();
        serializer.startTag(null, TAG_BRIGHTNESS_CORRECTION);
        serializer.attribute(null, ATTR_PACKAGE_NAME, packageName);
        correction.saveToXml(serializer);
        serializer.endTag(null, TAG_BRIGHTNESS_CORRECTION);
    }
    for (Map.Entry<Integer, BrightnessCorrection> entry : mCorrectionsByCategory.entrySet()) {
        final int category = entry.getKey();
        final BrightnessCorrection correction = entry.getValue();
        serializer.startTag(null, TAG_BRIGHTNESS_CORRECTION);
        serializer.attribute(null, ATTR_CATEGORY, Integer.toString(category));
        correction.saveToXml(serializer);
        serializer.endTag(null, TAG_BRIGHTNESS_CORRECTION);
    }
    serializer.endTag(null, TAG_BRIGHTNESS_CORRECTIONS);
    serializer.startTag(null, TAG_BRIGHTNESS_PARAMS);
    if (mShouldCollectColorSamples) {
        serializer.attribute(null, ATTR_COLLECT_COLOR, Boolean.toString(true));
    }
    if (mShortTermModelTimeout >= 0) {
        serializer.attribute(null, ATTR_MODEL_TIMEOUT, Long.toString(mShortTermModelTimeout));
    }
    if (!Float.isNaN(mShortTermModelLowerLuxMultiplier)) {
        serializer.attribute(null, ATTR_MODEL_LOWER_BOUND, Float.toString(mShortTermModelLowerLuxMultiplier));
    }
    if (!Float.isNaN(mShortTermModelUpperLuxMultiplier)) {
        serializer.attribute(null, ATTR_MODEL_UPPER_BOUND, Float.toString(mShortTermModelUpperLuxMultiplier));
    }
    serializer.endTag(null, TAG_BRIGHTNESS_PARAMS);
}