public void setSecurityParams(@SecurityType int securityType){
    allowedKeyManagement.clear();
    allowedProtocols.clear();
    allowedAuthAlgorithms.clear();
    allowedPairwiseCiphers.clear();
    allowedGroupCiphers.clear();
    allowedGroupManagementCiphers.clear();
    allowedSuiteBCiphers.clear();
    switch(securityType) {
        case SECURITY_TYPE_OPEN:
            allowedKeyManagement.set(WifiConfiguration.KeyMgmt.NONE);
            break;
        case SECURITY_TYPE_WEP:
            allowedKeyManagement.set(WifiConfiguration.KeyMgmt.NONE);
            allowedAuthAlgorithms.set(WifiConfiguration.AuthAlgorithm.OPEN);
            allowedAuthAlgorithms.set(WifiConfiguration.AuthAlgorithm.SHARED);
            break;
        case SECURITY_TYPE_PSK:
            allowedKeyManagement.set(WifiConfiguration.KeyMgmt.WPA_PSK);
            break;
        case SECURITY_TYPE_EAP:
            allowedKeyManagement.set(WifiConfiguration.KeyMgmt.WPA_EAP);
            allowedKeyManagement.set(WifiConfiguration.KeyMgmt.IEEE8021X);
            break;
        case SECURITY_TYPE_SAE:
            allowedProtocols.set(WifiConfiguration.Protocol.RSN);
            allowedKeyManagement.set(WifiConfiguration.KeyMgmt.SAE);
            allowedPairwiseCiphers.set(WifiConfiguration.PairwiseCipher.CCMP);
            allowedPairwiseCiphers.set(WifiConfiguration.PairwiseCipher.GCMP_256);
            allowedGroupCiphers.set(WifiConfiguration.GroupCipher.CCMP);
            allowedGroupCiphers.set(WifiConfiguration.GroupCipher.GCMP_256);
            requirePmf = true;
            break;
        case SECURITY_TYPE_EAP_SUITE_B:
            allowedProtocols.set(WifiConfiguration.Protocol.RSN);
            allowedKeyManagement.set(WifiConfiguration.KeyMgmt.WPA_EAP);
            allowedKeyManagement.set(WifiConfiguration.KeyMgmt.IEEE8021X);
            allowedKeyManagement.set(WifiConfiguration.KeyMgmt.SUITE_B_192);
            allowedPairwiseCiphers.set(WifiConfiguration.PairwiseCipher.GCMP_256);
            allowedGroupCiphers.set(WifiConfiguration.GroupCipher.GCMP_256);
            allowedGroupManagementCiphers.set(WifiConfiguration.GroupMgmtCipher.BIP_GMAC_256);
            requirePmf = true;
            break;
        case SECURITY_TYPE_OWE:
            allowedProtocols.set(WifiConfiguration.Protocol.RSN);
            allowedKeyManagement.set(WifiConfiguration.KeyMgmt.OWE);
            allowedPairwiseCiphers.set(WifiConfiguration.PairwiseCipher.CCMP);
            allowedPairwiseCiphers.set(WifiConfiguration.PairwiseCipher.GCMP_256);
            allowedGroupCiphers.set(WifiConfiguration.GroupCipher.CCMP);
            allowedGroupCiphers.set(WifiConfiguration.GroupCipher.GCMP_256);
            requirePmf = true;
            break;
        case SECURITY_TYPE_WAPI_PSK:
            allowedKeyManagement.set(WifiConfiguration.KeyMgmt.WAPI_PSK);
            allowedProtocols.set(WifiConfiguration.Protocol.WAPI);
            allowedPairwiseCiphers.set(WifiConfiguration.PairwiseCipher.SMS4);
            allowedGroupCiphers.set(WifiConfiguration.GroupCipher.SMS4);
            break;
        case SECURITY_TYPE_WAPI_CERT:
            allowedKeyManagement.set(WifiConfiguration.KeyMgmt.WAPI_CERT);
            allowedProtocols.set(WifiConfiguration.Protocol.WAPI);
            allowedPairwiseCiphers.set(WifiConfiguration.PairwiseCipher.SMS4);
            allowedGroupCiphers.set(WifiConfiguration.GroupCipher.SMS4);
            break;
        default:
            throw new IllegalArgumentException("unknown security type " + securityType);
    }
}