public static void dumpWindowsToFile(SparseArray<List<AccessibilityWindowInfo>> allWindows, File dumpFile, DisplayManagerGlobal displayManager){
    if (allWindows.size() == 0) {
        return;
    }
    final long startTime = SystemClock.uptimeMillis();
    try {
        FileWriter writer = new FileWriter(dumpFile);
        XmlSerializer serializer = Xml.newSerializer();
        StringWriter stringWriter = new StringWriter();
        serializer.setOutput(stringWriter);
        serializer.startDocument("UTF-8", true);
        serializer.startTag("", "displays");
        for (int d = 0, nd = allWindows.size(); d < nd; ++d) {
            int displayId = allWindows.keyAt(d);
            Display display = displayManager.getRealDisplay(displayId);
            if (display == null) {
                continue;
            }
            final List<AccessibilityWindowInfo> windows = allWindows.valueAt(d);
            if (windows.isEmpty()) {
                continue;
            }
            serializer.startTag("", "display");
            serializer.attribute("", "id", Integer.toString(displayId));
            int rotation = display.getRotation();
            Point size = new Point();
            display.getSize(size);
            for (int i = 0, n = windows.size(); i < n; ++i) {
                dumpWindowRec(windows.get(i), serializer, i, size.x, size.y, rotation);
            }
            serializer.endTag("", "display");
        }
        serializer.endTag("", "displays");
        serializer.endDocument();
        writer.write(stringWriter.toString());
        writer.close();
    } catch (IOException e) {
        Log.e(LOGTAG, "failed to dump window to file", e);
    }
    final long endTime = SystemClock.uptimeMillis();
    Log.w(LOGTAG, "Fetch time: " + (endTime - startTime) + "ms");
}