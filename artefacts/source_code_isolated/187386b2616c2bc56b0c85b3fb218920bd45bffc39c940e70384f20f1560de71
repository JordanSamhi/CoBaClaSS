public static void run(MediaShellCommand cmd) throws Exception{
    int stream = AudioManager.STREAM_MUSIC;
    int volIndex = 5;
    int mode = 0;
    int adjDir = AudioManager.ADJUST_RAISE;
    boolean showUi = false;
    boolean doGet = false;
    String option;
    String adjustment = null;
    while ((option = cmd.getNextOption()) != null) {
        switch(option) {
            case "--show":
                showUi = true;
                break;
            case "--get":
                doGet = true;
                log(LOG_V, "will get volume");
                break;
            case "--stream":
                stream = Integer.decode(cmd.getNextArgRequired()).intValue();
                log(LOG_V, "will control stream=" + stream + " (" + streamName(stream) + ")");
                break;
            case "--set":
                volIndex = Integer.decode(cmd.getNextArgRequired()).intValue();
                mode = VOLUME_CONTROL_MODE_SET;
                log(LOG_V, "will set volume to index=" + volIndex);
                break;
            case "--adj":
                mode = VOLUME_CONTROL_MODE_ADJUST;
                adjustment = cmd.getNextArgRequired();
                log(LOG_V, "will adjust volume");
                break;
            default:
                throw new IllegalArgumentException("Unknown argument " + option);
        }
    }
    if (mode == VOLUME_CONTROL_MODE_ADJUST) {
        if (adjustment == null) {
            cmd.showError("Error: no valid volume adjustment (null)");
            return;
        }
        switch(adjustment) {
            case ADJUST_RAISE:
                adjDir = AudioManager.ADJUST_RAISE;
                break;
            case ADJUST_SAME:
                adjDir = AudioManager.ADJUST_SAME;
                break;
            case ADJUST_LOWER:
                adjDir = AudioManager.ADJUST_LOWER;
                break;
            default:
                cmd.showError("Error: no valid volume adjustment, was " + adjustment + ", expected " + ADJUST_LOWER + "|" + ADJUST_SAME + "|" + ADJUST_RAISE);
                return;
        }
    }
    log(LOG_V, "Connecting to AudioService");
    IAudioService audioService = IAudioService.Stub.asInterface(ServiceManager.checkService(Context.AUDIO_SERVICE));
    if (audioService == null) {
        System.err.println(BaseCommand.NO_SYSTEM_ERROR_CODE);
        throw new AndroidException("Can't connect to audio service; is the system running?");
    }
    if (mode == VOLUME_CONTROL_MODE_SET) {
        if ((volIndex > audioService.getStreamMaxVolume(stream)) || (volIndex < audioService.getStreamMinVolume(stream))) {
            cmd.showError(String.format("Error: invalid volume index %d for stream %d " + "(should be in [%d..%d])", volIndex, stream, audioService.getStreamMinVolume(stream), audioService.getStreamMaxVolume(stream)));
            return;
        }
    }
    final int flag = showUi ? AudioManager.FLAG_SHOW_UI : 0;
    final String pack = cmd.getClass().getPackage().getName();
    if (mode == VOLUME_CONTROL_MODE_SET) {
        audioService.setStreamVolume(stream, volIndex, flag, pack);
    } else if (mode == VOLUME_CONTROL_MODE_ADJUST) {
        audioService.adjustStreamVolume(stream, adjDir, flag, pack);
    }
    if (doGet) {
        log(LOG_V, "volume is " + audioService.getStreamVolume(stream) + " in range [" + audioService.getStreamMinVolume(stream) + ".." + audioService.getStreamMaxVolume(stream) + "]");
    }
}