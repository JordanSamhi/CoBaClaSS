public void enroll(int userId, byte[] token, CancellationSignal cancel, EnrollmentCallback callback, int[] disabledFeatures){
    if (callback == null) {
        throw new IllegalArgumentException("Must supply an enrollment callback");
    }
    if (cancel != null) {
        if (cancel.isCanceled()) {
            Log.w(TAG, "enrollment already canceled");
            return;
        } else {
            cancel.setOnCancelListener(new OnEnrollCancelListener());
        }
    }
    if (mService != null) {
        try {
            mEnrollmentCallback = callback;
            Trace.beginSection("FaceManager#enroll");
            mService.enroll(userId, mToken, token, mServiceReceiver, mContext.getOpPackageName(), disabledFeatures);
        } catch (RemoteException e) {
            Log.w(TAG, "Remote exception in enroll: ", e);
            if (callback != null) {
                callback.onEnrollmentError(FACE_ERROR_HW_UNAVAILABLE, getErrorString(mContext, FACE_ERROR_HW_UNAVAILABLE, 0));
            }
        } finally {
            Trace.endSection();
        }
    }
}