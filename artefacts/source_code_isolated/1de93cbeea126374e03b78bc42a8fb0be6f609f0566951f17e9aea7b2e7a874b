public void onCharacteristicRead(String address, int status, int handle, byte[] value){
    if (VDBG) {
        Log.d(TAG, "onCharacteristicRead() - Device=" + address + " handle=" + handle + " Status=" + status);
    }
    if (!address.equals(mDevice.getAddress())) {
        return;
    }
    synchronized (mDeviceBusyLock) {
        mDeviceBusy = false;
    }
    if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && (mAuthRetryState != AUTH_RETRY_STATE_MITM)) {
        try {
            final int authReq = (mAuthRetryState == AUTH_RETRY_STATE_IDLE) ? AUTHENTICATION_NO_MITM : AUTHENTICATION_MITM;
            mService.readCharacteristic(mClientIf, address, handle, authReq);
            mAuthRetryState++;
            return;
        } catch (RemoteException e) {
            Log.e(TAG, "", e);
        }
    }
    mAuthRetryState = AUTH_RETRY_STATE_IDLE;
    BluetoothGattCharacteristic characteristic = getCharacteristicById(mDevice, handle);
    if (characteristic == null) {
        Log.w(TAG, "onCharacteristicRead() failed to find characteristic!");
        return;
    }
    runOrQueueCallback(new Runnable() {

        @Override
        public void run() {
            final BluetoothGattCallback callback = mCallback;
            if (callback != null) {
                if (status == 0)
                    characteristic.setValue(value);
                callback.onCharacteristicRead(BluetoothGatt.this, characteristic, status);
            }
        }
    });
}