public void recordResult(RangingRequest requests, List<RangingResult> results, int measurementDuration){
    Map<MacAddress, ResponderConfig> requestEntries = new HashMap<>();
    for (ResponderConfig responder : requests.mRttPeers) {
        requestEntries.put(responder.macAddress, responder);
    }
    if (results != null) {
        boolean containsAwarePeer = false;
        for (RangingResult result : results) {
            if (result == null) {
                continue;
            }
            ResponderConfig responder = requestEntries.remove(result.getMacAddress());
            if (responder == null) {
                Log.e(TAG, "recordResult: found a result which doesn't match any requests: " + result);
                continue;
            }
            if (responder.responderType == ResponderConfig.RESPONDER_AP) {
                updatePeerInfoWithResultInfo(mPerPeerTypeInfo[PEER_AP], result);
            } else if (responder.responderType == ResponderConfig.RESPONDER_AWARE) {
                containsAwarePeer = true;
                updatePeerInfoWithResultInfo(mPerPeerTypeInfo[PEER_AWARE], result);
            } else {
                Log.e(TAG, "recordResult: unexpected peer type in responder: " + responder);
            }
        }
        if (containsAwarePeer) {
            addValueToLinearHistogram(measurementDuration, mMeasurementDurationWithAwareHistogram, MEASUREMENT_DURATION_HISTOGRAM_AWARE);
        } else {
            addValueToLinearHistogram(measurementDuration, mMeasurementDurationApOnlyHistogram, MEASUREMENT_DURATION_HISTOGRAM_AP);
        }
    }
    for (ResponderConfig responder : requestEntries.values()) {
        PerPeerTypeInfo peerInfo;
        if (responder.responderType == ResponderConfig.RESPONDER_AP) {
            peerInfo = mPerPeerTypeInfo[PEER_AP];
        } else if (responder.responderType == ResponderConfig.RESPONDER_AWARE) {
            peerInfo = mPerPeerTypeInfo[PEER_AWARE];
        } else {
            Log.e(TAG, "recordResult: unexpected peer type in responder: " + responder);
            continue;
        }
        peerInfo.statusHistogram.put(WifiMetricsProto.WifiRttLog.MISSING_RESULT, peerInfo.statusHistogram.get(WifiMetricsProto.WifiRttLog.MISSING_RESULT) + 1);
    }
}