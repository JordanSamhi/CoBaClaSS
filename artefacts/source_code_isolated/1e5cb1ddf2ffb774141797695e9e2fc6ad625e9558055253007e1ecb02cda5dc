public Map<String, String> recoverKeyChainSnapshot(@NonNull String sessionId, @NonNull byte[] encryptedRecoveryKey, @NonNull List<WrappedApplicationKey> applicationKeys) throws RemoteException{
    checkRecoverKeyStorePermission();
    int userId = UserHandle.getCallingUserId();
    int uid = Binder.getCallingUid();
    RecoverySessionStorage.Entry sessionEntry = mRecoverySessionStorage.get(uid, sessionId);
    if (sessionEntry == null) {
        throw new ServiceSpecificException(ERROR_SESSION_EXPIRED, String.format(Locale.US, "Application uid=%d does not have pending session '%s'", uid, sessionId));
    }
    try {
        byte[] recoveryKey = decryptRecoveryKey(sessionEntry, encryptedRecoveryKey);
        Map<String, byte[]> keysByAlias = recoverApplicationKeys(recoveryKey, applicationKeys);
        return importKeyMaterials(userId, uid, keysByAlias);
    } catch (KeyStoreException e) {
        throw new ServiceSpecificException(ERROR_SERVICE_INTERNAL_ERROR, e.getMessage());
    } finally {
        sessionEntry.destroy();
        mRecoverySessionStorage.remove(uid);
    }
}