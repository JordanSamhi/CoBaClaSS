public static boolean filter(Context context, byte[][] pdus, String format, int destPort, int subId){
    TelephonyManager telephonyManager = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);
    VisualVoicemailSmsFilterSettings settings;
    settings = telephonyManager.getActiveVisualVoicemailSmsFilterSettings(subId);
    if (settings == null) {
        FullMessage fullMessage = getFullMessage(pdus, format);
        if (fullMessage != null) {
            if (messageBodyMatchesVvmPattern(context, subId, fullMessage.fullMessageBody)) {
                Log.e(TAG, "SMS matching VVM format received but the filter not been set yet");
                return true;
            }
        }
        return false;
    }
    PhoneAccountHandle phoneAccountHandle = sPhoneAccountHandleConverter.fromSubId(subId);
    if (phoneAccountHandle == null) {
        Log.e(TAG, "Unable to convert subId " + subId + " to PhoneAccountHandle");
        return false;
    }
    String clientPrefix = settings.clientPrefix;
    FullMessage fullMessage = getFullMessage(pdus, format);
    if (fullMessage == null) {
        Log.i(TAG, "Unparsable SMS received");
        String asciiMessage = parseAsciiPduMessage(pdus);
        WrappedMessageData messageData = VisualVoicemailSmsParser.parseAlternativeFormat(asciiMessage);
        if (messageData == null) {
            Log.i(TAG, "Attempt to parse ascii PDU");
            messageData = VisualVoicemailSmsParser.parse(clientPrefix, asciiMessage);
        }
        if (messageData != null) {
            sendVvmSmsBroadcast(context, settings, phoneAccountHandle, messageData, null);
        }
        return false;
    }
    String messageBody = fullMessage.fullMessageBody;
    WrappedMessageData messageData = VisualVoicemailSmsParser.parse(clientPrefix, messageBody);
    if (messageData != null) {
        if (settings.destinationPort == VisualVoicemailSmsFilterSettings.DESTINATION_PORT_DATA_SMS) {
            if (destPort == -1) {
                Log.i(TAG, "SMS matching VVM format received but is not a DATA SMS");
                return false;
            }
        } else if (settings.destinationPort != VisualVoicemailSmsFilterSettings.DESTINATION_PORT_ANY) {
            if (settings.destinationPort != destPort) {
                Log.i(TAG, "SMS matching VVM format received but is not directed to port " + settings.destinationPort);
                return false;
            }
        }
        if (!settings.originatingNumbers.isEmpty() && !isSmsFromNumbers(fullMessage.firstMessage, settings.originatingNumbers)) {
            Log.i(TAG, "SMS matching VVM format received but is not from originating numbers");
            return false;
        }
        sendVvmSmsBroadcast(context, settings, phoneAccountHandle, messageData, null);
        return true;
    }
    if (messageBodyMatchesVvmPattern(context, subId, messageBody)) {
        Log.w(TAG, "SMS matches pattern but has illegal format, still dropping as VVM SMS");
        sendVvmSmsBroadcast(context, settings, phoneAccountHandle, null, messageBody);
        return true;
    }
    return false;
}