public void update(View anchor, int offsetX, int offsetY, int width, int height, Rect virtualBounds){
    mFullScreen = width == LayoutParams.MATCH_PARENT;
    setWindowLayoutType(mFullScreen ? WindowManager.LayoutParams.TYPE_SYSTEM_DIALOG : WindowManager.LayoutParams.TYPE_APPLICATION_ABOVE_SUB_PANEL);
    final View actualAnchor;
    if (mFullScreen) {
        offsetX = 0;
        offsetY = 0;
        final WindowManager windowManager = anchor.getContext().getSystemService(WindowManager.class);
        final Rect windowBounds = WindowMetricsHelper.getBoundsExcludingNavigationBarAndCutout(windowManager.getCurrentWindowMetrics());
        width = windowBounds.width();
        if (height != LayoutParams.MATCH_PARENT) {
            offsetY = windowBounds.height() - height;
        }
        actualAnchor = anchor;
    } else if (virtualBounds != null) {
        final int[] mLocationOnScreen = new int[] { virtualBounds.left, virtualBounds.top };
        actualAnchor = new View(anchor.getContext()) {

            @Override
            public void getLocationOnScreen(int[] location) {
                location[0] = mLocationOnScreen[0];
                location[1] = mLocationOnScreen[1];
            }

            @Override
            public int getAccessibilityViewId() {
                return anchor.getAccessibilityViewId();
            }

            @Override
            public ViewTreeObserver getViewTreeObserver() {
                return anchor.getViewTreeObserver();
            }

            @Override
            public IBinder getApplicationWindowToken() {
                return anchor.getApplicationWindowToken();
            }

            @Override
            public View getRootView() {
                return anchor.getRootView();
            }

            @Override
            public int getLayoutDirection() {
                return anchor.getLayoutDirection();
            }

            @Override
            public void getWindowDisplayFrame(Rect outRect) {
                anchor.getWindowDisplayFrame(outRect);
            }

            @Override
            public void addOnAttachStateChangeListener(OnAttachStateChangeListener listener) {
                anchor.addOnAttachStateChangeListener(listener);
            }

            @Override
            public void removeOnAttachStateChangeListener(OnAttachStateChangeListener listener) {
                anchor.removeOnAttachStateChangeListener(listener);
            }

            @Override
            public boolean isAttachedToWindow() {
                return anchor.isAttachedToWindow();
            }

            @Override
            public boolean requestRectangleOnScreen(Rect rectangle, boolean immediate) {
                return anchor.requestRectangleOnScreen(rectangle, immediate);
            }

            @Override
            public IBinder getWindowToken() {
                return anchor.getWindowToken();
            }
        };
        actualAnchor.setLeftTopRightBottom(virtualBounds.left, virtualBounds.top, virtualBounds.right, virtualBounds.bottom);
        actualAnchor.setScrollX(anchor.getScrollX());
        actualAnchor.setScrollY(anchor.getScrollY());
        anchor.setOnScrollChangeListener((v, scrollX, scrollY, oldScrollX, oldScrollY) -> {
            mLocationOnScreen[0] = mLocationOnScreen[0] - (scrollX - oldScrollX);
            mLocationOnScreen[1] = mLocationOnScreen[1] - (scrollY - oldScrollY);
        });
        actualAnchor.setWillNotDraw(true);
    } else {
        actualAnchor = anchor;
    }
    if (!mFullScreen) {
        setAnimationStyle(-1);
    } else if (height == LayoutParams.MATCH_PARENT) {
        setAnimationStyle(0);
    } else {
        setAnimationStyle(com.android.internal.R.style.AutofillHalfScreenAnimation);
    }
    if (!isShowing()) {
        setWidth(width);
        setHeight(height);
        showAsDropDown(actualAnchor, offsetX, offsetY);
    } else {
        update(actualAnchor, offsetX, offsetY, width, height);
    }
}