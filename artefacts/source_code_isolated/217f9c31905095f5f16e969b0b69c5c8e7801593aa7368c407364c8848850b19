public void checkForDialIssues(boolean isEmergencyCall) throws CallStateException{
    boolean disableCall = TelephonyProperties.disable_call().orElse(false);
    if (mCi.getRadioState() != TelephonyManager.RADIO_POWER_ON) {
        throw new CallStateException(CallStateException.ERROR_POWER_OFF, "Modem not powered");
    }
    if (disableCall) {
        throw new CallStateException(CallStateException.ERROR_CALLING_DISABLED, "Calling disabled via ro.telephony.disable-call property");
    }
    if (mPendingMO != null) {
        throw new CallStateException(CallStateException.ERROR_ALREADY_DIALING, "A call is already dialing.");
    }
    if (mRingingCall.isRinging()) {
        throw new CallStateException(CallStateException.ERROR_CALL_RINGING, "Can't call while a call is ringing.");
    }
    if (isPhoneTypeGsm() && mForegroundCall.getState().isAlive() && mBackgroundCall.getState().isAlive()) {
        throw new CallStateException(CallStateException.ERROR_TOO_MANY_CALLS, "There is already a foreground and background call.");
    }
    if (!isPhoneTypeGsm() && mForegroundCall.getState().isAlive() && mForegroundCall.getState() != GsmCdmaCall.State.ACTIVE && mBackgroundCall.getState().isAlive()) {
        throw new CallStateException(CallStateException.ERROR_TOO_MANY_CALLS, "There is already a foreground and background call.");
    }
    if (!isEmergencyCall && isInOtaspCall()) {
        throw new CallStateException(CallStateException.ERROR_OTASP_PROVISIONING_IN_PROCESS, "OTASP provisioning is in process.");
    }
}