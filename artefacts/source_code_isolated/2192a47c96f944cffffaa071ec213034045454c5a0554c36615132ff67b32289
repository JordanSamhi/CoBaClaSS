public static ContextHubIntentEvent fromIntent(@NonNull Intent intent){
    Objects.requireNonNull(intent, "Intent cannot be null");
    hasExtraOrThrow(intent, ContextHubManager.EXTRA_CONTEXT_HUB_INFO);
    ContextHubInfo info = intent.getParcelableExtra(ContextHubManager.EXTRA_CONTEXT_HUB_INFO);
    if (info == null) {
        throw new IllegalArgumentException("ContextHubInfo extra was null");
    }
    int eventType = getIntExtraOrThrow(intent, ContextHubManager.EXTRA_EVENT_TYPE);
    ContextHubIntentEvent event;
    switch(eventType) {
        case ContextHubManager.EVENT_NANOAPP_LOADED:
        case ContextHubManager.EVENT_NANOAPP_UNLOADED:
        case ContextHubManager.EVENT_NANOAPP_ENABLED:
        case ContextHubManager.EVENT_NANOAPP_DISABLED:
        case ContextHubManager.EVENT_NANOAPP_ABORTED:
        case ContextHubManager.EVENT_NANOAPP_MESSAGE:
            long nanoAppId = getLongExtraOrThrow(intent, ContextHubManager.EXTRA_NANOAPP_ID);
            if (eventType == ContextHubManager.EVENT_NANOAPP_MESSAGE) {
                hasExtraOrThrow(intent, ContextHubManager.EXTRA_MESSAGE);
                NanoAppMessage message = intent.getParcelableExtra(ContextHubManager.EXTRA_MESSAGE);
                if (message == null) {
                    throw new IllegalArgumentException("NanoAppMessage extra was null");
                }
                event = new ContextHubIntentEvent(info, eventType, nanoAppId, message);
            } else if (eventType == ContextHubManager.EVENT_NANOAPP_ABORTED) {
                int nanoAppAbortCode = getIntExtraOrThrow(intent, ContextHubManager.EXTRA_NANOAPP_ABORT_CODE);
                event = new ContextHubIntentEvent(info, eventType, nanoAppId, nanoAppAbortCode);
            } else {
                event = new ContextHubIntentEvent(info, eventType, nanoAppId);
            }
            break;
        case ContextHubManager.EVENT_HUB_RESET:
            event = new ContextHubIntentEvent(info, eventType);
            break;
        default:
            throw new IllegalArgumentException("Unknown intent event type " + eventType);
    }
    return event;
}