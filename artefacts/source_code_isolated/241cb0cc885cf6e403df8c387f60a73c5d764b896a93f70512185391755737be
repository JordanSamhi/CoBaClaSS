public boolean sendMessage(short transactionId, byte pubSubId, int requestorInstanceId, byte[] dest, byte[] message, int messageId){
    if (mDbg) {
        Log.d(TAG, "sendMessage: transactionId=" + transactionId + ", pubSubId=" + pubSubId + ", requestorInstanceId=" + requestorInstanceId + ", dest=" + String.valueOf(HexEncoding.encode(dest)) + ", messageId=" + messageId + ", message=" + (message == null ? "<null>" : HexEncoding.encode(message)) + ", message.length=" + (message == null ? 0 : message.length));
    }
    recordTransactionId(transactionId);
    IWifiNanIface iface = mHal.getWifiNanIface();
    if (iface == null) {
        Log.e(TAG, "sendMessage: null interface");
        return false;
    }
    NanTransmitFollowupRequest req = new NanTransmitFollowupRequest();
    req.discoverySessionId = pubSubId;
    req.peerId = requestorInstanceId;
    copyArray(dest, req.addr);
    req.isHighPriority = false;
    req.shouldUseDiscoveryWindow = true;
    convertNativeByteArrayToArrayList(message, req.serviceSpecificInfo);
    req.disableFollowupResultIndication = false;
    try {
        WifiStatus status = iface.transmitFollowupRequest(transactionId, req);
        if (status.code == WifiStatusCode.SUCCESS) {
            return true;
        } else {
            Log.e(TAG, "sendMessage: error: " + statusString(status));
            return false;
        }
    } catch (RemoteException e) {
        Log.e(TAG, "sendMessage: exception: " + e);
        return false;
    }
}