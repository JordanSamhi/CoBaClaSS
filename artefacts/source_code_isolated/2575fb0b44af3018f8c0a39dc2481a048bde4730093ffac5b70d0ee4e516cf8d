public void startAnimationToState(AnimationProperties properties){
    int childCount = mAttachedChildren.size();
    ViewState tmpState = new ViewState();
    float expandFraction = getGroupExpandFraction();
    final boolean dividersVisible = mUserLocked && !showingAsLowPriority() || (mChildrenExpanded && mShowDividersWhenExpanded) || (mContainingNotification.isGroupExpansionChanging() && !mHideDividersDuringExpand);
    for (int i = childCount - 1; i >= 0; i--) {
        ExpandableNotificationRow child = mAttachedChildren.get(i);
        ExpandableViewState viewState = child.getViewState();
        viewState.animateTo(child, properties);
        View divider = mDividers.get(i);
        tmpState.initFrom(divider);
        tmpState.yTranslation = viewState.yTranslation - mDividerHeight;
        float alpha = mChildrenExpanded && viewState.alpha != 0 ? 0.5f : 0;
        if (mUserLocked && !showingAsLowPriority() && viewState.alpha != 0) {
            alpha = NotificationUtils.interpolate(0, 0.5f, Math.min(viewState.alpha, expandFraction));
        }
        tmpState.hidden = !dividersVisible;
        tmpState.alpha = alpha;
        tmpState.animateTo(divider, properties);
        child.setFakeShadowIntensity(0.0f, 0.0f, 0, 0);
    }
    if (mOverflowNumber != null) {
        if (mNeverAppliedGroupState) {
            float alpha = mGroupOverFlowState.alpha;
            mGroupOverFlowState.alpha = 0;
            mGroupOverFlowState.applyToView(mOverflowNumber);
            mGroupOverFlowState.alpha = alpha;
            mNeverAppliedGroupState = false;
        }
        mGroupOverFlowState.animateTo(mOverflowNumber, properties);
    }
    if (mNotificationHeader != null) {
        mHeaderViewState.applyToView(mNotificationHeader);
    }
    updateChildrenClipping();
}