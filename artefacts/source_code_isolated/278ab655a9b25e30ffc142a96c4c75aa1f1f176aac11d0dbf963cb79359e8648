public CharSequence invertCharSequenceColors(CharSequence charSequence){
    if (charSequence instanceof Spanned) {
        Spanned ss = (Spanned) charSequence;
        Object[] spans = ss.getSpans(0, ss.length(), Object.class);
        SpannableStringBuilder builder = new SpannableStringBuilder(ss.toString());
        for (Object span : spans) {
            Object resultSpan = span;
            if (resultSpan instanceof CharacterStyle) {
                resultSpan = ((CharacterStyle) span).getUnderlying();
            }
            if (resultSpan instanceof TextAppearanceSpan) {
                TextAppearanceSpan processedSpan = processTextAppearanceSpan((TextAppearanceSpan) span);
                if (processedSpan != resultSpan) {
                    resultSpan = processedSpan;
                } else {
                    resultSpan = span;
                }
            } else if (resultSpan instanceof ForegroundColorSpan) {
                ForegroundColorSpan originalSpan = (ForegroundColorSpan) resultSpan;
                int foregroundColor = originalSpan.getForegroundColor();
                resultSpan = new ForegroundColorSpan(processColor(foregroundColor));
            } else {
                resultSpan = span;
            }
            builder.setSpan(resultSpan, ss.getSpanStart(span), ss.getSpanEnd(span), ss.getSpanFlags(span));
        }
        return builder;
    }
    return charSequence;
}