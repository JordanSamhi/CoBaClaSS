public void onTouchEvent(MotionEvent event){
    final float eventX = event.getX();
    final float eventY = event.getY();
    final boolean isMouse = event.isFromSource(InputDevice.SOURCE_MOUSE);
    switch(event.getActionMasked()) {
        case MotionEvent.ACTION_DOWN:
            if (extractedTextModeWillBeStarted()) {
                hide();
            } else {
                mMinTouchOffset = mMaxTouchOffset = mTextView.getOffsetForPosition(eventX, eventY);
                if (mGestureStayedInTapRegion && mTouchState.isMultiTapInSameArea() && (isMouse || isPositionOnText(eventX, eventY) || mTouchState.isOnHandle())) {
                    if (TextView.DEBUG_CURSOR) {
                        logCursor("SelectionModifierCursorController: onTouchEvent", "ACTION_DOWN: select and start drag");
                    }
                    if (mTouchState.isDoubleTap()) {
                        selectCurrentWordAndStartDrag();
                    } else if (mTouchState.isTripleClick()) {
                        selectCurrentParagraphAndStartDrag();
                    }
                    mDiscardNextActionUp = true;
                }
                mGestureStayedInTapRegion = true;
                mHaventMovedEnoughToStartDrag = true;
            }
            break;
        case MotionEvent.ACTION_POINTER_DOWN:
        case MotionEvent.ACTION_POINTER_UP:
            if (mTextView.getContext().getPackageManager().hasSystemFeature(PackageManager.FEATURE_TOUCHSCREEN_MULTITOUCH_DISTINCT)) {
                updateMinAndMaxOffsets(event);
            }
            break;
        case MotionEvent.ACTION_MOVE:
            if (mGestureStayedInTapRegion) {
                final ViewConfiguration viewConfig = ViewConfiguration.get(mTextView.getContext());
                mGestureStayedInTapRegion = EditorTouchState.isDistanceWithin(mTouchState.getLastDownX(), mTouchState.getLastDownY(), eventX, eventY, viewConfig.getScaledDoubleTapTouchSlop());
            }
            if (mHaventMovedEnoughToStartDrag) {
                mHaventMovedEnoughToStartDrag = !mTouchState.isMovedEnoughForDrag();
            }
            if (isMouse && !isDragAcceleratorActive()) {
                final int offset = mTextView.getOffsetForPosition(eventX, eventY);
                if (mTextView.hasSelection() && (!mHaventMovedEnoughToStartDrag || mStartOffset != offset) && offset >= mTextView.getSelectionStart() && offset <= mTextView.getSelectionEnd()) {
                    startDragAndDrop();
                    break;
                }
                if (mStartOffset != offset) {
                    stopTextActionMode();
                    enterDrag(DRAG_ACCELERATOR_MODE_CHARACTER);
                    mDiscardNextActionUp = true;
                    mHaventMovedEnoughToStartDrag = false;
                }
            }
            if (mStartHandle != null && mStartHandle.isShowing()) {
                break;
            }
            updateSelection(event);
            break;
        case MotionEvent.ACTION_UP:
            if (TextView.DEBUG_CURSOR) {
                logCursor("SelectionModifierCursorController: onTouchEvent", "ACTION_UP");
            }
            if (!isDragAcceleratorActive()) {
                break;
            }
            updateSelection(event);
            mTextView.getParent().requestDisallowInterceptTouchEvent(false);
            resetDragAcceleratorState();
            if (mTextView.hasSelection()) {
                startSelectionActionModeAsync(mHaventMovedEnoughToStartDrag);
            }
            break;
    }
}