public String toString(){
    StringBuilder sb = new StringBuilder("BrightnessConfiguration{[");
    final int size = mLux.length;
    for (int i = 0; i < size; i++) {
        if (i != 0) {
            sb.append(", ");
        }
        sb.append("(").append(mLux[i]).append(", ").append(mNits[i]).append(")");
    }
    sb.append("], {");
    for (Entry<String, BrightnessCorrection> entry : mCorrectionsByPackageName.entrySet()) {
        sb.append("'" + entry.getKey() + "': " + entry.getValue() + ", ");
    }
    for (Entry<Integer, BrightnessCorrection> entry : mCorrectionsByCategory.entrySet()) {
        sb.append(entry.getKey() + ": " + entry.getValue() + ", ");
    }
    sb.append("}, '");
    if (mDescription != null) {
        sb.append(mDescription);
    }
    sb.append(", shouldCollectColorSamples = " + mShouldCollectColorSamples);
    if (mShortTermModelTimeout >= 0) {
        sb.append(", shortTermModelTimeout = " + mShortTermModelTimeout);
    }
    if (!Float.isNaN(mShortTermModelLowerLuxMultiplier)) {
        sb.append(", shortTermModelLowerLuxMultiplier = " + mShortTermModelLowerLuxMultiplier);
    }
    if (!Float.isNaN(mShortTermModelLowerLuxMultiplier)) {
        sb.append(", shortTermModelUpperLuxMultiplier = " + mShortTermModelUpperLuxMultiplier);
    }
    sb.append("'}");
    return sb.toString();
}