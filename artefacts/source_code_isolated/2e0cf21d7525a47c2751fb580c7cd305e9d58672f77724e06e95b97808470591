public static boolean checkUsageStatsPermission(Context context, String tag, PrintWriter pw){
    final int uid = Binder.getCallingUid();
    switch(uid) {
        case android.os.Process.ROOT_UID:
        case android.os.Process.SYSTEM_UID:
        case android.os.Process.SHELL_UID:
        case android.os.Process.INCIDENTD_UID:
            return true;
    }
    if (context.checkCallingOrSelfPermission(android.Manifest.permission.PACKAGE_USAGE_STATS) != PackageManager.PERMISSION_GRANTED) {
        logMessage(pw, "Permission Denial: can't dump " + tag + " from from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " due to missing android.permission.PACKAGE_USAGE_STATS permission");
        return false;
    }
    final AppOpsManager appOps = context.getSystemService(AppOpsManager.class);
    final String[] pkgs = context.getPackageManager().getPackagesForUid(uid);
    if (pkgs != null) {
        for (String pkg : pkgs) {
            switch(appOps.noteOpNoThrow(AppOpsManager.OP_GET_USAGE_STATS, uid, pkg)) {
                case AppOpsManager.MODE_ALLOWED:
                    if (DEBUG)
                        Slog.v(TAG, "Found package " + pkg + " with " + "android:get_usage_stats allowed");
                    return true;
                case AppOpsManager.MODE_DEFAULT:
                    if (DEBUG)
                        Slog.v(TAG, "Found package " + pkg + " with " + "android:get_usage_stats default");
                    return true;
            }
        }
    }
    logMessage(pw, "Permission Denial: can't dump " + tag + " from from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " due to android:get_usage_stats app-op not allowed");
    return false;
}