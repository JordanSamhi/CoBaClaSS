public Path getPath(float startX, float startY, float endX, float endY){
    Path path = new Path();
    path.moveTo(startX, startY);
    float ex;
    float ey;
    float deltaX = endX - startX;
    float deltaY = endY - startY;
    float h2 = deltaX * deltaX + deltaY * deltaY;
    float dx = (startX + endX) / 2;
    float dy = (startY + endY) / 2;
    float midDist2 = h2 * 0.25f;
    float minimumArcDist2 = 0;
    boolean isMovingUpwards = startY > endY;
    if (deltaY == 0) {
        ex = dx;
        ey = dy + (Math.abs(deltaX) * 0.5f * mMinimumHorizontalTangent);
    } else if (deltaX == 0) {
        ex = dx + (Math.abs(deltaY) * 0.5f * mMinimumVerticalTangent);
        ey = dy;
    } else if ((Math.abs(deltaX) < Math.abs(deltaY))) {
        float eDistY = Math.abs(h2 / (2 * deltaY));
        if (isMovingUpwards) {
            ey = endY + eDistY;
            ex = endX;
        } else {
            ey = startY + eDistY;
            ex = startX;
        }
        minimumArcDist2 = midDist2 * mMinimumVerticalTangent * mMinimumVerticalTangent;
    } else {
        float eDistX = h2 / (2 * deltaX);
        if (isMovingUpwards) {
            ex = startX + eDistX;
            ey = startY;
        } else {
            ex = endX - eDistX;
            ey = endY;
        }
        minimumArcDist2 = midDist2 * mMinimumHorizontalTangent * mMinimumHorizontalTangent;
    }
    float arcDistX = dx - ex;
    float arcDistY = dy - ey;
    float arcDist2 = arcDistX * arcDistX + arcDistY * arcDistY;
    float maximumArcDist2 = midDist2 * mMaximumTangent * mMaximumTangent;
    float newArcDistance2 = 0;
    if (arcDist2 != 0 && arcDist2 < minimumArcDist2) {
        newArcDistance2 = minimumArcDist2;
    } else if (arcDist2 > maximumArcDist2) {
        newArcDistance2 = maximumArcDist2;
    }
    if (newArcDistance2 != 0) {
        float ratio2 = newArcDistance2 / arcDist2;
        float ratio = (float) Math.sqrt(ratio2);
        ex = dx + (ratio * (ex - dx));
        ey = dy + (ratio * (ey - dy));
    }
    float control1X = (startX + ex) / 2;
    float control1Y = (startY + ey) / 2;
    float control2X = (ex + endX) / 2;
    float control2Y = (ey + endY) / 2;
    path.cubicTo(control1X, control1Y, control2X, control2Y, endX, endY);
    return path;
}