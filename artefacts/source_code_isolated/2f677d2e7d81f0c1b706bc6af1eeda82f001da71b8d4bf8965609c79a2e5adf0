public String setupInterfaceForSoftApMode(@NonNull InterfaceCallback interfaceCallback){
    synchronized (mLock) {
        if (!startHal()) {
            Log.e(TAG, "Failed to start Hal");
            mWifiMetrics.incrementNumSetupSoftApInterfaceFailureDueToHal();
            return null;
        }
        if (!startHostapd()) {
            Log.e(TAG, "Failed to start hostapd");
            mWifiMetrics.incrementNumSetupSoftApInterfaceFailureDueToHostapd();
            return null;
        }
        Iface iface = mIfaceMgr.allocateIface(Iface.IFACE_TYPE_AP);
        if (iface == null) {
            Log.e(TAG, "Failed to allocate new AP iface");
            return null;
        }
        iface.externalListener = interfaceCallback;
        iface.name = createApIface(iface);
        if (TextUtils.isEmpty(iface.name)) {
            Log.e(TAG, "Failed to create AP iface in vendor HAL");
            mIfaceMgr.removeIface(iface.id);
            mWifiMetrics.incrementNumSetupSoftApInterfaceFailureDueToHal();
            return null;
        }
        if (!mWifiCondManager.setupInterfaceForSoftApMode(iface.name)) {
            Log.e(TAG, "Failed to setup iface in wificond on " + iface);
            teardownInterface(iface.name);
            mWifiMetrics.incrementNumSetupSoftApInterfaceFailureDueToWificond();
            return null;
        }
        iface.networkObserver = new NetworkObserverInternal(iface.id);
        if (!registerNetworkObserver(iface.networkObserver)) {
            Log.e(TAG, "Failed to register network observer on " + iface);
            teardownInterface(iface.name);
            return null;
        }
        onInterfaceStateChanged(iface, isInterfaceUp(iface.name));
        Log.i(TAG, "Successfully setup " + iface);
        iface.featureSet = getSupportedFeatureSetInternal(iface.name);
        return iface.name;
    }
}