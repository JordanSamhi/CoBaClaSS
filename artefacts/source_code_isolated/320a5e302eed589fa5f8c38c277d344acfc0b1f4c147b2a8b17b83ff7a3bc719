public static Typeface buildTypeface(@NonNull Context context, @Nullable CancellationSignal cancellationSignal, @NonNull FontInfo[] fonts){
    if (context.isRestricted()) {
        return null;
    }
    final Map<Uri, ByteBuffer> uriBuffer = prepareFontData(context, fonts, cancellationSignal);
    if (uriBuffer.isEmpty()) {
        return null;
    }
    FontFamily.Builder familyBuilder = null;
    for (FontInfo fontInfo : fonts) {
        final ByteBuffer buffer = uriBuffer.get(fontInfo.getUri());
        if (buffer == null) {
            continue;
        }
        try {
            final Font font = new Font.Builder(buffer).setWeight(fontInfo.getWeight()).setSlant(fontInfo.isItalic() ? FontStyle.FONT_SLANT_ITALIC : FontStyle.FONT_SLANT_UPRIGHT).setTtcIndex(fontInfo.getTtcIndex()).setFontVariationSettings(fontInfo.getAxes()).build();
            if (familyBuilder == null) {
                familyBuilder = new FontFamily.Builder(font);
            } else {
                familyBuilder.addFont(font);
            }
        } catch (IllegalArgumentException e) {
            return null;
        } catch (IOException e) {
            continue;
        }
    }
    if (familyBuilder == null) {
        return null;
    }
    final FontFamily family = familyBuilder.build();
    final FontStyle normal = new FontStyle(FontStyle.FONT_WEIGHT_NORMAL, FontStyle.FONT_SLANT_UPRIGHT);
    Font bestFont = family.getFont(0);
    int bestScore = normal.getMatchScore(bestFont.getStyle());
    for (int i = 1; i < family.getSize(); ++i) {
        final Font candidate = family.getFont(i);
        final int score = normal.getMatchScore(candidate.getStyle());
        if (score < bestScore) {
            bestFont = candidate;
            bestScore = score;
        }
    }
    return new Typeface.CustomFallbackBuilder(family).setStyle(bestFont.getStyle()).build();
}