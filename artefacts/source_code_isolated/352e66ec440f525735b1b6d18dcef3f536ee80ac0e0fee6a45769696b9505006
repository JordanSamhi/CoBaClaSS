public void updateAvailableNetworks(List<Pair<ScanDetail, WifiConfiguration>> availableNetworks){
    if (availableNetworks != null) {
        if (mVerboseLoggingEnabled) {
            Log.v(TAG, "updateAvailableNetworks: size = " + availableNetworks.size());
        }
        for (Pair<ScanDetail, WifiConfiguration> pair : availableNetworks) {
            final ScanDetail scanDetail = pair.first;
            final WifiConfiguration config = pair.second;
            ScanResult scanResult = scanDetail.getScanResult();
            if (scanResult == null)
                continue;
            String bssid = scanResult.BSSID;
            String ssid = "\"" + scanDetail.getSSID() + "\"";
            if (mVerboseLoggingEnabled) {
                Log.v(TAG, " " + bssid + ": " + scanDetail.getSSID());
            }
            AvailableNetworkFailureCount availableNetworkFailureCount = mRecentAvailableNetworks.get(bssid);
            if (availableNetworkFailureCount == null) {
                availableNetworkFailureCount = new AvailableNetworkFailureCount(config);
                availableNetworkFailureCount.ssid = ssid;
                Pair<AvailableNetworkFailureCount, Integer> ssidFailsAndApCount = mSsidFailureCount.get(ssid);
                if (ssidFailsAndApCount == null) {
                    ssidFailsAndApCount = Pair.create(new AvailableNetworkFailureCount(config), 1);
                    if (!mWatchdogAllowedToTrigger && (mTimeLastTrigger == 0 || (mClock.getElapsedSinceBootMillis() - mTimeLastTrigger) >= LAST_TRIGGER_TIMEOUT_MILLIS)) {
                        localLog("updateAvailableNetworks: setWatchdogTriggerEnabled to true");
                        setWatchdogTriggerEnabled(true);
                    }
                } else {
                    final Integer numberOfAps = ssidFailsAndApCount.second;
                    ssidFailsAndApCount = Pair.create(ssidFailsAndApCount.first, numberOfAps + 1);
                }
                mSsidFailureCount.put(ssid, ssidFailsAndApCount);
            }
            if (config != null) {
                availableNetworkFailureCount.config = config;
            }
            availableNetworkFailureCount.age = -1;
            mRecentAvailableNetworks.put(bssid, availableNetworkFailureCount);
        }
    }
    Iterator<Map.Entry<String, AvailableNetworkFailureCount>> it = mRecentAvailableNetworks.entrySet().iterator();
    while (it.hasNext()) {
        Map.Entry<String, AvailableNetworkFailureCount> entry = it.next();
        if (entry.getValue().age < MAX_BSSID_AGE - 1) {
            entry.getValue().age++;
        } else {
            String ssid = entry.getValue().ssid;
            Pair<AvailableNetworkFailureCount, Integer> ssidFails = mSsidFailureCount.get(ssid);
            if (ssidFails != null) {
                Integer apCount = ssidFails.second - 1;
                if (apCount > 0) {
                    ssidFails = Pair.create(ssidFails.first, apCount);
                    mSsidFailureCount.put(ssid, ssidFails);
                } else {
                    mSsidFailureCount.remove(ssid);
                }
            } else {
                Log.d(TAG, "updateAvailableNetworks: SSID to AP count mismatch for " + ssid);
            }
            it.remove();
        }
    }
    if (mVerboseLoggingEnabled)
        Log.v(TAG, toString());
}