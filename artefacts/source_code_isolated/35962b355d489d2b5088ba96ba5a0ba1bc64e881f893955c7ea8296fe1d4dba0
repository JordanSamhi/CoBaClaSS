public static int convertNanStatusTypeToProtoEnum(int nanStatusType){
    switch(nanStatusType) {
        case NanStatusType.SUCCESS:
            return WifiMetricsProto.WifiAwareLog.SUCCESS;
        case NanStatusType.INTERNAL_FAILURE:
            return WifiMetricsProto.WifiAwareLog.INTERNAL_FAILURE;
        case NanStatusType.PROTOCOL_FAILURE:
            return WifiMetricsProto.WifiAwareLog.PROTOCOL_FAILURE;
        case NanStatusType.INVALID_SESSION_ID:
            return WifiMetricsProto.WifiAwareLog.INVALID_SESSION_ID;
        case NanStatusType.NO_RESOURCES_AVAILABLE:
            return WifiMetricsProto.WifiAwareLog.NO_RESOURCES_AVAILABLE;
        case NanStatusType.INVALID_ARGS:
            return WifiMetricsProto.WifiAwareLog.INVALID_ARGS;
        case NanStatusType.INVALID_PEER_ID:
            return WifiMetricsProto.WifiAwareLog.INVALID_PEER_ID;
        case NanStatusType.INVALID_NDP_ID:
            return WifiMetricsProto.WifiAwareLog.INVALID_NDP_ID;
        case NanStatusType.NAN_NOT_ALLOWED:
            return WifiMetricsProto.WifiAwareLog.NAN_NOT_ALLOWED;
        case NanStatusType.NO_OTA_ACK:
            return WifiMetricsProto.WifiAwareLog.NO_OTA_ACK;
        case NanStatusType.ALREADY_ENABLED:
            return WifiMetricsProto.WifiAwareLog.ALREADY_ENABLED;
        case NanStatusType.FOLLOWUP_TX_QUEUE_FULL:
            return WifiMetricsProto.WifiAwareLog.FOLLOWUP_TX_QUEUE_FULL;
        case NanStatusType.UNSUPPORTED_CONCURRENCY_NAN_DISABLED:
            return WifiMetricsProto.WifiAwareLog.UNSUPPORTED_CONCURRENCY_NAN_DISABLED;
        default:
            Log.e(TAG, "Unrecognized NanStatusType: " + nanStatusType);
            return WifiMetricsProto.WifiAwareLog.UNKNOWN_HAL_STATUS;
    }
}