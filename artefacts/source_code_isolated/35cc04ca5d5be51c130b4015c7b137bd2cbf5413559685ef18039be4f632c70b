public static Bitmap createAudioThumbnail(@NonNull File file, @NonNull Size size, @Nullable CancellationSignal signal) throws IOException{
    if (signal != null)
        signal.throwIfCanceled();
    final Resizer resizer = new Resizer(size, signal);
    try (MediaMetadataRetriever retriever = new MediaMetadataRetriever()) {
        retriever.setDataSource(file.getAbsolutePath());
        final byte[] raw = retriever.getEmbeddedPicture();
        if (raw != null) {
            return ImageDecoder.decodeBitmap(ImageDecoder.createSource(raw), resizer);
        }
    } catch (RuntimeException e) {
        throw new IOException("Failed to create thumbnail", e);
    }
    if (MEDIA_UNKNOWN.equals(Environment.getExternalStorageState(file))) {
        throw new IOException("No embedded album art found");
    }
    final File parent = file.getParentFile();
    final File grandParent = parent != null ? parent.getParentFile() : null;
    if (parent != null && parent.getName().equals(Environment.DIRECTORY_DOWNLOADS)) {
        throw new IOException("No thumbnails in Downloads directories");
    }
    if (grandParent != null && MEDIA_UNKNOWN.equals(Environment.getExternalStorageState(grandParent))) {
        throw new IOException("No thumbnails in top-level directories");
    }
    final File[] found = ArrayUtils.defeatNullable(file.getParentFile().listFiles((dir, name) -> {
        final String lower = name.toLowerCase();
        return (lower.endsWith(".jpg") || lower.endsWith(".png"));
    }));
    final ToIntFunction<File> score = (f) -> {
        final String lower = f.getName().toLowerCase();
        if (lower.equals("albumart.jpg"))
            return 4;
        if (lower.startsWith("albumart") && lower.endsWith(".jpg"))
            return 3;
        if (lower.contains("albumart") && lower.endsWith(".jpg"))
            return 2;
        if (lower.endsWith(".jpg"))
            return 1;
        return 0;
    };
    final Comparator<File> bestScore = (a, b) -> {
        return score.applyAsInt(a) - score.applyAsInt(b);
    };
    final File bestFile = Arrays.asList(found).stream().max(bestScore).orElse(null);
    if (bestFile == null) {
        throw new IOException("No album art found");
    }
    if (signal != null)
        signal.throwIfCanceled();
    return ImageDecoder.decodeBitmap(ImageDecoder.createSource(bestFile), resizer);
}