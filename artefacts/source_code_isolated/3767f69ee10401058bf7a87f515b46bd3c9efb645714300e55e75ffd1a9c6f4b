public void startInputAsyncOnWindowFocusGain(View focusedView, @SoftInputModeFlags int softInputMode, int windowFlags, boolean forceNewFocus){
    final int startInputFlags = getStartInputFlags(focusedView, 0);
    final ImeFocusController controller = getFocusController();
    if (controller == null) {
        return;
    }
    if (controller.checkFocus(forceNewFocus, false)) {
        if (startInput(StartInputReason.WINDOW_FOCUS_GAIN, focusedView, startInputFlags, softInputMode, windowFlags)) {
            return;
        }
    }
    synchronized (mH) {
        try {
            View servedView = controller.getServedView();
            boolean nextFocusHasConnection = servedView != null && servedView == focusedView && hasActiveConnection(focusedView);
            if (DEBUG) {
                Log.v(TAG, "Reporting focus gain, without startInput" + ", nextFocusIsServedView=" + nextFocusHasConnection);
            }
            final int startInputReason = nextFocusHasConnection ? WINDOW_FOCUS_GAIN_REPORT_WITH_CONNECTION : WINDOW_FOCUS_GAIN_REPORT_WITHOUT_CONNECTION;
            mService.startInputOrWindowGainedFocus(startInputReason, mClient, focusedView.getWindowToken(), startInputFlags, softInputMode, windowFlags, null, null, 0, mCurRootView.mContext.getApplicationInfo().targetSdkVersion);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
    }
}