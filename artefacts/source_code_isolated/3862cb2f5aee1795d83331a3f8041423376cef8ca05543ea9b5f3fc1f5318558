public synchronized boolean disableRange(int startId, int endId, String client){
    int len = mRanges.size();
    for (int i = 0; i < len; i++) {
        IntRange range = mRanges.get(i);
        if (startId < range.mStartId) {
            return false;
        } else if (endId <= range.mEndId) {
            ArrayList<ClientRange> clients = range.mClients;
            int crLength = clients.size();
            if (crLength == 1) {
                ClientRange cr = clients.get(0);
                if (cr.mStartId == startId && cr.mEndId == endId && cr.mClient.equals(client)) {
                    mRanges.remove(i);
                    if (updateRanges()) {
                        return true;
                    } else {
                        mRanges.add(i, range);
                        return false;
                    }
                } else {
                    return false;
                }
            }
            int largestEndId = Integer.MIN_VALUE;
            boolean updateStarted = false;
            for (int crIndex = 0; crIndex < crLength; crIndex++) {
                ClientRange cr = clients.get(crIndex);
                if (cr.mStartId == startId && cr.mEndId == endId && cr.mClient.equals(client)) {
                    if (crIndex == crLength - 1) {
                        if (range.mEndId == largestEndId) {
                            clients.remove(crIndex);
                            return true;
                        } else {
                            clients.remove(crIndex);
                            range.mEndId = largestEndId;
                            if (updateRanges()) {
                                return true;
                            } else {
                                clients.add(crIndex, cr);
                                range.mEndId = cr.mEndId;
                                return false;
                            }
                        }
                    }
                    IntRange rangeCopy = new IntRange(range, crIndex);
                    if (crIndex == 0) {
                        int nextStartId = clients.get(1).mStartId;
                        if (nextStartId != range.mStartId) {
                            updateStarted = true;
                            rangeCopy.mStartId = nextStartId;
                        }
                        largestEndId = clients.get(1).mEndId;
                    }
                    ArrayList<IntRange> newRanges = new ArrayList<IntRange>();
                    IntRange currentRange = rangeCopy;
                    for (int nextIndex = crIndex + 1; nextIndex < crLength; nextIndex++) {
                        ClientRange nextCr = clients.get(nextIndex);
                        if (nextCr.mStartId > largestEndId + 1) {
                            updateStarted = true;
                            currentRange.mEndId = largestEndId;
                            newRanges.add(currentRange);
                            currentRange = new IntRange(nextCr);
                        } else {
                            if (currentRange.mEndId < nextCr.mEndId) {
                                currentRange.mEndId = nextCr.mEndId;
                            }
                            currentRange.mClients.add(nextCr);
                        }
                        if (nextCr.mEndId > largestEndId) {
                            largestEndId = nextCr.mEndId;
                        }
                    }
                    if (largestEndId < endId) {
                        updateStarted = true;
                        currentRange.mEndId = largestEndId;
                    }
                    newRanges.add(currentRange);
                    mRanges.remove(i);
                    mRanges.addAll(i, newRanges);
                    if (updateStarted && !updateRanges()) {
                        mRanges.removeAll(newRanges);
                        mRanges.add(i, range);
                        return false;
                    }
                    return true;
                } else {
                    if (cr.mEndId > largestEndId) {
                        largestEndId = cr.mEndId;
                    }
                }
            }
        }
    }
    return false;
}