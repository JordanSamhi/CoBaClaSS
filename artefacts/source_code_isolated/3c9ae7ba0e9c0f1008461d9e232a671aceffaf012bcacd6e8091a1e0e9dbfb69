public void updatePermissionFlagsForAllApps(int flagMask, int flagValues, final int userId){
    final int callingUid = getCallingUid();
    if (!mUserManagerInt.exists(userId)) {
        return;
    }
    enforceGrantRevokeRuntimePermissionPermissions("updatePermissionFlagsForAllApps");
    enforceCrossUserPermission(callingUid, userId, true, true, false, "updatePermissionFlagsForAllApps");
    final int effectiveFlagMask = (callingUid != Process.SYSTEM_UID) ? flagMask : flagMask & ~PackageManager.FLAG_PERMISSION_SYSTEM_FIXED;
    final int effectiveFlagValues = (callingUid != Process.SYSTEM_UID) ? flagValues : flagValues & ~PackageManager.FLAG_PERMISSION_SYSTEM_FIXED;
    final boolean[] changed = new boolean[1];
    mPackageManagerInt.forEachPackage(pkg -> {
        final PackageSetting ps = (PackageSetting) mPackageManagerInt.getPackageSetting(pkg.getPackageName());
        if (ps == null) {
            return;
        }
        final PermissionsState permissionsState = ps.getPermissionsState();
        changed[0] |= permissionsState.updatePermissionFlagsForAllPermissions(userId, effectiveFlagMask, effectiveFlagValues);
        mOnPermissionChangeListeners.onPermissionsChanged(pkg.getUid());
    });
    if (changed[0]) {
        mPackageManagerInt.writePermissionSettings(new int[] { userId }, true);
    }
}