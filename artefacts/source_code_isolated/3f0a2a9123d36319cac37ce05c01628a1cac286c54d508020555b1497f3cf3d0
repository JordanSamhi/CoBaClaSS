public int getDisconnectCauseFromReasonInfo(ImsReasonInfo reasonInfo, Call.State callState){
    int cause = DisconnectCause.ERROR_UNSPECIFIED;
    int code = maybeRemapReasonCode(reasonInfo);
    switch(code) {
        case ImsReasonInfo.CODE_SIP_ALTERNATE_EMERGENCY_CALL:
            return DisconnectCause.IMS_SIP_ALTERNATE_EMERGENCY_CALL;
        case ImsReasonInfo.CODE_SIP_BAD_ADDRESS:
        case ImsReasonInfo.CODE_SIP_NOT_REACHABLE:
            return DisconnectCause.NUMBER_UNREACHABLE;
        case ImsReasonInfo.CODE_SIP_BUSY:
            return DisconnectCause.BUSY;
        case ImsReasonInfo.CODE_USER_TERMINATED:
            return DisconnectCause.LOCAL;
        case ImsReasonInfo.CODE_LOCAL_ENDED_BY_CONFERENCE_MERGE:
            return DisconnectCause.IMS_MERGED_SUCCESSFULLY;
        case ImsReasonInfo.CODE_LOCAL_CALL_DECLINE:
        case ImsReasonInfo.CODE_REMOTE_CALL_DECLINE:
            return DisconnectCause.INCOMING_REJECTED;
        case ImsReasonInfo.CODE_USER_TERMINATED_BY_REMOTE:
        case ImsReasonInfo.CODE_SIP_USER_REJECTED:
            return DisconnectCause.NORMAL;
        case ImsReasonInfo.CODE_SIP_FORBIDDEN:
            return DisconnectCause.SERVER_ERROR;
        case ImsReasonInfo.CODE_SIP_REDIRECTED:
        case ImsReasonInfo.CODE_SIP_NOT_ACCEPTABLE:
        case ImsReasonInfo.CODE_SIP_GLOBAL_ERROR:
            return DisconnectCause.SERVER_ERROR;
        case ImsReasonInfo.CODE_EMERGENCY_CALL_OVER_WFC_NOT_AVAILABLE:
            return DisconnectCause.EMERGENCY_CALL_OVER_WFC_NOT_AVAILABLE;
        case ImsReasonInfo.CODE_WFC_SERVICE_NOT_AVAILABLE_IN_THIS_LOCATION:
            return DisconnectCause.WFC_SERVICE_NOT_AVAILABLE_IN_THIS_LOCATION;
        case ImsReasonInfo.CODE_SIP_SERVICE_UNAVAILABLE:
        case ImsReasonInfo.CODE_SIP_SERVER_ERROR:
            return DisconnectCause.SERVER_UNREACHABLE;
        case ImsReasonInfo.CODE_SIP_NOT_FOUND:
            return DisconnectCause.INVALID_NUMBER;
        case ImsReasonInfo.CODE_LOCAL_NETWORK_ROAMING:
        case ImsReasonInfo.CODE_LOCAL_NETWORK_IP_CHANGED:
        case ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN:
        case ImsReasonInfo.CODE_LOCAL_SERVICE_UNAVAILABLE:
        case ImsReasonInfo.CODE_LOCAL_NOT_REGISTERED:
        case ImsReasonInfo.CODE_LOCAL_NETWORK_NO_LTE_COVERAGE:
        case ImsReasonInfo.CODE_LOCAL_NETWORK_NO_SERVICE:
        case ImsReasonInfo.CODE_LOCAL_CALL_VCC_ON_PROGRESSING:
            return DisconnectCause.OUT_OF_SERVICE;
        case ImsReasonInfo.CODE_SIP_REQUEST_TIMEOUT:
        case ImsReasonInfo.CODE_TIMEOUT_1XX_WAITING:
        case ImsReasonInfo.CODE_TIMEOUT_NO_ANSWER:
        case ImsReasonInfo.CODE_TIMEOUT_NO_ANSWER_CALL_UPDATE:
            return DisconnectCause.TIMED_OUT;
        case ImsReasonInfo.CODE_LOCAL_POWER_OFF:
            return DisconnectCause.POWER_OFF;
        case ImsReasonInfo.CODE_LOCAL_LOW_BATTERY:
        case ImsReasonInfo.CODE_LOW_BATTERY:
            {
                if (callState == Call.State.DIALING) {
                    return DisconnectCause.DIAL_LOW_BATTERY;
                } else {
                    return DisconnectCause.LOW_BATTERY;
                }
            }
        case ImsReasonInfo.CODE_CALL_BARRED:
            return DisconnectCause.CALL_BARRED;
        case ImsReasonInfo.CODE_FDN_BLOCKED:
            return DisconnectCause.FDN_BLOCKED;
        case ImsReasonInfo.CODE_IMEI_NOT_ACCEPTED:
            return DisconnectCause.IMEI_NOT_ACCEPTED;
        case ImsReasonInfo.CODE_ANSWERED_ELSEWHERE:
            return DisconnectCause.ANSWERED_ELSEWHERE;
        case ImsReasonInfo.CODE_CALL_END_CAUSE_CALL_PULL:
            return DisconnectCause.CALL_PULLED;
        case ImsReasonInfo.CODE_MAXIMUM_NUMBER_OF_CALLS_REACHED:
            return DisconnectCause.MAXIMUM_NUMBER_OF_CALLS_REACHED;
        case ImsReasonInfo.CODE_DATA_DISABLED:
            return DisconnectCause.DATA_DISABLED;
        case ImsReasonInfo.CODE_DATA_LIMIT_REACHED:
            return DisconnectCause.DATA_LIMIT_REACHED;
        case ImsReasonInfo.CODE_WIFI_LOST:
            return DisconnectCause.WIFI_LOST;
        case ImsReasonInfo.CODE_ACCESS_CLASS_BLOCKED:
            return DisconnectCause.IMS_ACCESS_BLOCKED;
        case ImsReasonInfo.CODE_EMERGENCY_TEMP_FAILURE:
            return DisconnectCause.EMERGENCY_TEMP_FAILURE;
        case ImsReasonInfo.CODE_EMERGENCY_PERM_FAILURE:
            return DisconnectCause.EMERGENCY_PERM_FAILURE;
        case ImsReasonInfo.CODE_DIAL_MODIFIED_TO_USSD:
            return DisconnectCause.DIAL_MODIFIED_TO_USSD;
        case ImsReasonInfo.CODE_DIAL_MODIFIED_TO_SS:
            return DisconnectCause.DIAL_MODIFIED_TO_SS;
        case ImsReasonInfo.CODE_DIAL_MODIFIED_TO_DIAL:
            return DisconnectCause.DIAL_MODIFIED_TO_DIAL;
        case ImsReasonInfo.CODE_DIAL_MODIFIED_TO_DIAL_VIDEO:
            return DisconnectCause.DIAL_MODIFIED_TO_DIAL_VIDEO;
        case ImsReasonInfo.CODE_DIAL_VIDEO_MODIFIED_TO_DIAL:
            return DisconnectCause.DIAL_VIDEO_MODIFIED_TO_DIAL;
        case ImsReasonInfo.CODE_DIAL_VIDEO_MODIFIED_TO_DIAL_VIDEO:
            return DisconnectCause.DIAL_VIDEO_MODIFIED_TO_DIAL_VIDEO;
        case ImsReasonInfo.CODE_DIAL_VIDEO_MODIFIED_TO_SS:
            return DisconnectCause.DIAL_VIDEO_MODIFIED_TO_SS;
        case ImsReasonInfo.CODE_DIAL_VIDEO_MODIFIED_TO_USSD:
            return DisconnectCause.DIAL_VIDEO_MODIFIED_TO_USSD;
        case ImsReasonInfo.CODE_UNOBTAINABLE_NUMBER:
            return DisconnectCause.UNOBTAINABLE_NUMBER;
        case ImsReasonInfo.CODE_MEDIA_NO_DATA:
            return DisconnectCause.MEDIA_TIMEOUT;
        case ImsReasonInfo.CODE_UNSPECIFIED:
            if (mPhone.getDefaultPhone().getServiceStateTracker().mRestrictedState.isCsRestricted()) {
                return DisconnectCause.CS_RESTRICTED;
            } else if (mPhone.getDefaultPhone().getServiceStateTracker().mRestrictedState.isCsEmergencyRestricted()) {
                return DisconnectCause.CS_RESTRICTED_EMERGENCY;
            } else if (mPhone.getDefaultPhone().getServiceStateTracker().mRestrictedState.isCsNormalRestricted()) {
                return DisconnectCause.CS_RESTRICTED_NORMAL;
            }
            break;
        case ImsReasonInfo.CODE_SIP_BAD_REQUEST:
        case ImsReasonInfo.CODE_REJECT_CALL_ON_OTHER_SUB:
        case ImsReasonInfo.CODE_REJECT_ONGOING_E911_CALL:
        case ImsReasonInfo.CODE_REJECT_ONGOING_CALL_SETUP:
        case ImsReasonInfo.CODE_REJECT_MAX_CALL_LIMIT_REACHED:
        case ImsReasonInfo.CODE_REJECT_ONGOING_CALL_TRANSFER:
        case ImsReasonInfo.CODE_REJECT_ONGOING_CONFERENCE_CALL:
        case ImsReasonInfo.CODE_REJECT_ONGOING_HANDOVER:
        case ImsReasonInfo.CODE_REJECT_ONGOING_CALL_UPGRADE:
            return DisconnectCause.INCOMING_AUTO_REJECTED;
        default:
    }
    return cause;
}