public boolean sendNetworkEapSimUmtsAuthResponse(String paramsStr){
    synchronized (mLock) {
        try {
            Matcher match = UMTS_AUTH_RESPONSE_PARAMS_PATTERN.matcher(paramsStr);
            if (!match.find() || match.groupCount() != 3) {
                Log.e(TAG, "Malformed umts auth response params: " + paramsStr);
                return false;
            }
            ISupplicantStaNetwork.NetworkResponseEapSimUmtsAuthParams params = new ISupplicantStaNetwork.NetworkResponseEapSimUmtsAuthParams();
            byte[] ik = NativeUtil.hexStringToByteArray(match.group(1));
            if (ik == null || ik.length != params.ik.length) {
                Log.e(TAG, "Invalid ik value: " + match.group(1));
                return false;
            }
            byte[] ck = NativeUtil.hexStringToByteArray(match.group(2));
            if (ck == null || ck.length != params.ck.length) {
                Log.e(TAG, "Invalid ck value: " + match.group(2));
                return false;
            }
            byte[] res = NativeUtil.hexStringToByteArray(match.group(3));
            if (res == null || res.length == 0) {
                Log.e(TAG, "Invalid res value: " + match.group(3));
                return false;
            }
            System.arraycopy(ik, 0, params.ik, 0, params.ik.length);
            System.arraycopy(ck, 0, params.ck, 0, params.ck.length);
            for (byte b : res) {
                params.res.add(b);
            }
            return sendNetworkEapSimUmtsAuthResponse(params);
        } catch (IllegalArgumentException e) {
            Log.e(TAG, "Illegal argument " + paramsStr, e);
            return false;
        }
    }
}