public int startStreaming(final int subscriptionId, String serviceId, final IStreamingServiceCallback callback) throws RemoteException{
    if (callback == null) {
        throw new NullPointerException("Callback must not be null");
    }
    final int uid = Binder.getCallingUid();
    int result = startStreaming(subscriptionId, serviceId, new StreamingServiceCallback() {

        @Override
        public void onError(final int errorCode, final String message) {
            try {
                if (errorCode == MbmsErrors.UNKNOWN) {
                    throw new IllegalArgumentException("Middleware cannot send an unknown error.");
                }
                callback.onError(errorCode, message);
            } catch (RemoteException e) {
                onAppCallbackDied(uid, subscriptionId);
            }
        }

        @Override
        public void onStreamStateUpdated(@StreamingService.StreamingState final int state, @StreamingService.StreamingStateChangeReason final int reason) {
            try {
                callback.onStreamStateUpdated(state, reason);
            } catch (RemoteException e) {
                onAppCallbackDied(uid, subscriptionId);
            }
        }

        @Override
        public void onMediaDescriptionUpdated() {
            try {
                callback.onMediaDescriptionUpdated();
            } catch (RemoteException e) {
                onAppCallbackDied(uid, subscriptionId);
            }
        }

        @Override
        public void onBroadcastSignalStrengthUpdated(final int signalStrength) {
            try {
                callback.onBroadcastSignalStrengthUpdated(signalStrength);
            } catch (RemoteException e) {
                onAppCallbackDied(uid, subscriptionId);
            }
        }

        @Override
        public void onStreamMethodUpdated(final int methodType) {
            try {
                callback.onStreamMethodUpdated(methodType);
            } catch (RemoteException e) {
                onAppCallbackDied(uid, subscriptionId);
            }
        }
    });
    if (result == MbmsErrors.SUCCESS) {
        callback.asBinder().linkToDeath(new DeathRecipient() {

            @Override
            public void binderDied() {
                onAppCallbackDied(uid, subscriptionId);
            }
        }, 0);
    }
    return result;
}