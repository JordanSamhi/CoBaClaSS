public String getConnectionSummary(boolean shortSummary){
    boolean profileConnected = false;
    boolean a2dpConnected = true;
    boolean hfpConnected = true;
    boolean hearingAidConnected = true;
    int leftBattery = -1;
    int rightBattery = -1;
    if (isProfileConnectedFail() && isConnected()) {
        return mContext.getString(R.string.profile_connect_timeout_subtext);
    }
    synchronized (mProfileLock) {
        for (LocalBluetoothProfile profile : getProfiles()) {
            int connectionStatus = getProfileConnectionState(profile);
            switch(connectionStatus) {
                case BluetoothProfile.STATE_CONNECTING:
                case BluetoothProfile.STATE_DISCONNECTING:
                    return mContext.getString(BluetoothUtils.getConnectionStateSummary(connectionStatus));
                case BluetoothProfile.STATE_CONNECTED:
                    profileConnected = true;
                    break;
                case BluetoothProfile.STATE_DISCONNECTED:
                    if (profile.isProfileReady()) {
                        if (profile instanceof A2dpProfile || profile instanceof A2dpSinkProfile) {
                            a2dpConnected = false;
                        } else if (profile instanceof HeadsetProfile || profile instanceof HfpClientProfile) {
                            hfpConnected = false;
                        } else if (profile instanceof HearingAidProfile) {
                            hearingAidConnected = false;
                        }
                    }
                    break;
            }
        }
    }
    String batteryLevelPercentageString = null;
    final int batteryLevel = getBatteryLevel();
    if (batteryLevel > BluetoothDevice.BATTERY_LEVEL_UNKNOWN) {
        batteryLevelPercentageString = com.android.settingslib.Utils.formatPercentage(batteryLevel);
    }
    int stringRes = R.string.bluetooth_pairing;
    if (profileConnected) {
        if (BluetoothUtils.getBooleanMetaData(mDevice, BluetoothDevice.METADATA_IS_UNTETHERED_HEADSET)) {
            leftBattery = BluetoothUtils.getIntMetaData(mDevice, BluetoothDevice.METADATA_UNTETHERED_LEFT_BATTERY);
            rightBattery = BluetoothUtils.getIntMetaData(mDevice, BluetoothDevice.METADATA_UNTETHERED_RIGHT_BATTERY);
        }
        if (isTwsBatteryAvailable(leftBattery, rightBattery)) {
            stringRes = R.string.bluetooth_battery_level_untethered;
        } else if (batteryLevelPercentageString != null) {
            stringRes = R.string.bluetooth_battery_level;
        }
        if (a2dpConnected || hfpConnected || hearingAidConnected) {
            final boolean isOnCall = Utils.isAudioModeOngoingCall(mContext);
            if ((mIsActiveDeviceHearingAid) || (mIsActiveDeviceHeadset && isOnCall) || (mIsActiveDeviceA2dp && !isOnCall)) {
                if (isTwsBatteryAvailable(leftBattery, rightBattery) && !shortSummary) {
                    stringRes = R.string.bluetooth_active_battery_level_untethered;
                } else if (batteryLevelPercentageString != null && !shortSummary) {
                    stringRes = R.string.bluetooth_active_battery_level;
                } else {
                    stringRes = R.string.bluetooth_active_no_battery_level;
                }
            }
        }
    }
    if (stringRes != R.string.bluetooth_pairing || getBondState() == BluetoothDevice.BOND_BONDING) {
        if (isTwsBatteryAvailable(leftBattery, rightBattery)) {
            return mContext.getString(stringRes, Utils.formatPercentage(leftBattery), Utils.formatPercentage(rightBattery));
        } else {
            return mContext.getString(stringRes, batteryLevelPercentageString);
        }
    } else {
        return null;
    }
}