public AccessibilityEvent executeAndWaitForEvent(Runnable command, AccessibilityEventFilter filter, long timeoutMillis) throws TimeoutException{
    synchronized (mLock) {
        throwIfNotConnectedLocked();
        mEventQueue.clear();
        mWaitingForEventDelivery = true;
    }
    final long executionStartTimeMillis = SystemClock.uptimeMillis();
    command.run();
    List<AccessibilityEvent> receivedEvents = new ArrayList<>();
    try {
        final long startTimeMillis = SystemClock.uptimeMillis();
        while (true) {
            List<AccessibilityEvent> localEvents = new ArrayList<>();
            synchronized (mLock) {
                localEvents.addAll(mEventQueue);
                mEventQueue.clear();
            }
            while (!localEvents.isEmpty()) {
                AccessibilityEvent event = localEvents.remove(0);
                if (event.getEventTime() < executionStartTimeMillis) {
                    continue;
                }
                if (filter.accept(event)) {
                    return event;
                }
                receivedEvents.add(event);
            }
            final long elapsedTimeMillis = SystemClock.uptimeMillis() - startTimeMillis;
            final long remainingTimeMillis = timeoutMillis - elapsedTimeMillis;
            if (remainingTimeMillis <= 0) {
                throw new TimeoutException("Expected event not received within: " + timeoutMillis + " ms among: " + receivedEvents);
            }
            synchronized (mLock) {
                if (mEventQueue.isEmpty()) {
                    try {
                        mLock.wait(remainingTimeMillis);
                    } catch (InterruptedException ie) {
                    }
                }
            }
        }
    } finally {
        int size = receivedEvents.size();
        for (int i = 0; i < size; i++) {
            receivedEvents.get(i).recycle();
        }
        synchronized (mLock) {
            mWaitingForEventDelivery = false;
            mEventQueue.clear();
            mLock.notifyAll();
        }
    }
}