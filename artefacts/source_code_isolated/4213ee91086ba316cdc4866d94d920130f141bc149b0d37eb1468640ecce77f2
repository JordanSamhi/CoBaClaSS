public static long parse(String s){
    int year = Integer.MIN_VALUE;
    int mon = -1;
    int mday = -1;
    int hour = -1;
    int min = -1;
    int sec = -1;
    int millis = -1;
    int c = -1;
    int i = 0;
    int n = -1;
    int wst = -1;
    int tzoffset = -1;
    int prevc = 0;
    syntax: {
        if (s == null)
            break syntax;
        int limit = s.length();
        while (i < limit) {
            c = s.charAt(i);
            i++;
            if (c <= ' ' || c == ',')
                continue;
            if (c == '(') {
                int depth = 1;
                while (i < limit) {
                    c = s.charAt(i);
                    i++;
                    if (c == '(')
                        depth++;
                    else if (c == ')')
                        if (--depth <= 0)
                            break;
                }
                continue;
            }
            if ('0' <= c && c <= '9') {
                n = c - '0';
                while (i < limit && '0' <= (c = s.charAt(i)) && c <= '9') {
                    n = n * 10 + c - '0';
                    i++;
                }
                if (prevc == '+' || prevc == '-' && year != Integer.MIN_VALUE) {
                    if (tzoffset != 0 && tzoffset != -1)
                        break syntax;
                    if (n < 24) {
                        n = n * 60;
                        int minutesPart = 0;
                        if (i < limit && (s.charAt(i) == ':')) {
                            i++;
                            while (i < limit && '0' <= (c = s.charAt(i)) && c <= '9') {
                                minutesPart = (minutesPart * 10) + (c - '0');
                                i++;
                            }
                        }
                        n += minutesPart;
                    } else {
                        n = (n % 100) + ((n / 100) * 60);
                    }
                    if (prevc == '+')
                        n = -n;
                    tzoffset = n;
                } else if (n >= 70)
                    if (year != Integer.MIN_VALUE)
                        break syntax;
                    else if (c <= ' ' || c == ',' || c == '/' || i >= limit)
                        year = n;
                    else
                        break syntax;
                else if (c == ':')
                    if (hour < 0)
                        hour = (byte) n;
                    else if (min < 0)
                        min = (byte) n;
                    else
                        break syntax;
                else if (c == '/')
                    if (mon < 0)
                        mon = (byte) (n - 1);
                    else if (mday < 0)
                        mday = (byte) n;
                    else
                        break syntax;
                else if (i < limit && c != ',' && c > ' ' && c != '-')
                    break syntax;
                else if (hour >= 0 && min < 0)
                    min = (byte) n;
                else if (min >= 0 && sec < 0)
                    sec = (byte) n;
                else if (mday < 0)
                    mday = (byte) n;
                else if (year == Integer.MIN_VALUE && mon >= 0 && mday >= 0)
                    year = n;
                else
                    break syntax;
                prevc = 0;
            } else if (c == '/' || c == ':' || c == '+' || c == '-')
                prevc = c;
            else {
                int st = i - 1;
                while (i < limit) {
                    c = s.charAt(i);
                    if (!('A' <= c && c <= 'Z' || 'a' <= c && c <= 'z'))
                        break;
                    i++;
                }
                if (i <= st + 1)
                    break syntax;
                int k;
                for (k = wtb.length; --k >= 0; ) if (wtb[k].regionMatches(true, 0, s, st, i - st)) {
                    int action = ttb[k];
                    if (action != 0) {
                        if (action == 1) {
                            if (hour > 12 || hour < 1)
                                break syntax;
                            else if (hour < 12)
                                hour += 12;
                        } else if (action == 14) {
                            if (hour > 12 || hour < 1)
                                break syntax;
                            else if (hour == 12)
                                hour = 0;
                        } else if (action <= 13) {
                            if (mon < 0)
                                mon = (byte) (action - 2);
                            else
                                break syntax;
                        } else {
                            tzoffset = action - 10000;
                        }
                    }
                    break;
                }
                if (k < 0)
                    break syntax;
                prevc = 0;
            }
        }
        if (year == Integer.MIN_VALUE || mon < 0 || mday < 0)
            break syntax;
        if (year < 100) {
            synchronized (Date.class) {
                if (defaultCenturyStart == 0) {
                    defaultCenturyStart = gcal.getCalendarDate().getYear() - 80;
                }
            }
            year += (defaultCenturyStart / 100) * 100;
            if (year < defaultCenturyStart)
                year += 100;
        }
        if (sec < 0)
            sec = 0;
        if (min < 0)
            min = 0;
        if (hour < 0)
            hour = 0;
        BaseCalendar cal = getCalendarSystem(year);
        if (tzoffset == -1) {
            BaseCalendar.Date ldate = (BaseCalendar.Date) cal.newCalendarDate(TimeZone.getDefaultRef());
            ldate.setDate(year, mon + 1, mday);
            ldate.setTimeOfDay(hour, min, sec, 0);
            return cal.getTime(ldate);
        }
        BaseCalendar.Date udate = (BaseCalendar.Date) cal.newCalendarDate(null);
        udate.setDate(year, mon + 1, mday);
        udate.setTimeOfDay(hour, min, sec, 0);
        return cal.getTime(udate) + tzoffset * (60 * 1000);
    }
    throw new IllegalArgumentException();
}