public void removeOnRoleHoldersChangedListenerAsUser(@NonNull OnRoleHoldersChangedListener listener, @NonNull UserHandle user){
    Objects.requireNonNull(listener, "listener cannot be null");
    Objects.requireNonNull(user, "user cannot be null");
    int userId = user.getIdentifier();
    synchronized (mListenersLock) {
        ArrayMap<OnRoleHoldersChangedListener, OnRoleHoldersChangedListenerDelegate> listeners = mListeners.get(userId);
        if (listeners == null) {
            return;
        }
        OnRoleHoldersChangedListenerDelegate listenerDelegate = listeners.get(listener);
        if (listenerDelegate == null) {
            return;
        }
        try {
            mService.removeOnRoleHoldersChangedListenerAsUser(listenerDelegate, user.getIdentifier());
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
        listeners.remove(listener);
        if (listeners.isEmpty()) {
            mListeners.remove(userId);
        }
    }
}