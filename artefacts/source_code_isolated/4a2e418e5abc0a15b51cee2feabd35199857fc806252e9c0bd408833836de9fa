public void applyToView(View view){
    if (this.gone) {
        return;
    }
    boolean animatingX = isAnimating(view, TAG_ANIMATOR_TRANSLATION_X);
    if (animatingX) {
        updateAnimationX(view);
    } else if (view.getTranslationX() != this.xTranslation) {
        view.setTranslationX(this.xTranslation);
    }
    boolean animatingY = isAnimating(view, TAG_ANIMATOR_TRANSLATION_Y);
    if (animatingY) {
        updateAnimationY(view);
    } else if (view.getTranslationY() != this.yTranslation) {
        view.setTranslationY(this.yTranslation);
    }
    boolean animatingZ = isAnimating(view, TAG_ANIMATOR_TRANSLATION_Z);
    if (animatingZ) {
        updateAnimationZ(view);
    } else if (view.getTranslationZ() != this.zTranslation) {
        view.setTranslationZ(this.zTranslation);
    }
    boolean animatingScaleX = isAnimating(view, SCALE_X_PROPERTY);
    if (animatingScaleX) {
        updateAnimation(view, SCALE_X_PROPERTY, scaleX);
    } else if (view.getScaleX() != scaleX) {
        view.setScaleX(scaleX);
    }
    boolean animatingScaleY = isAnimating(view, SCALE_Y_PROPERTY);
    if (animatingScaleY) {
        updateAnimation(view, SCALE_Y_PROPERTY, scaleY);
    } else if (view.getScaleY() != scaleY) {
        view.setScaleY(scaleY);
    }
    int oldVisibility = view.getVisibility();
    boolean becomesInvisible = this.alpha == 0.0f || (this.hidden && (!isAnimating(view) || oldVisibility != View.VISIBLE));
    boolean animatingAlpha = isAnimating(view, TAG_ANIMATOR_ALPHA);
    if (animatingAlpha) {
        updateAlphaAnimation(view);
    } else if (view.getAlpha() != this.alpha) {
        boolean becomesFullyVisible = this.alpha == 1.0f;
        boolean newLayerTypeIsHardware = !becomesInvisible && !becomesFullyVisible && view.hasOverlappingRendering();
        int layerType = view.getLayerType();
        int newLayerType = newLayerTypeIsHardware ? View.LAYER_TYPE_HARDWARE : View.LAYER_TYPE_NONE;
        if (layerType != newLayerType) {
            view.setLayerType(newLayerType, null);
        }
        view.setAlpha(this.alpha);
    }
    int newVisibility = becomesInvisible ? View.INVISIBLE : View.VISIBLE;
    if (newVisibility != oldVisibility) {
        if (!(view instanceof ExpandableView) || !((ExpandableView) view).willBeGone()) {
            view.setVisibility(newVisibility);
        }
    }
}