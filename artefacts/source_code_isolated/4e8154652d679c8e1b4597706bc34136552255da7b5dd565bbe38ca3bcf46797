public synchronized CharSequence getGmtDisplayName(Context context){
    final long nowMinute = System.currentTimeMillis() / DateUtils.MINUTE_IN_MILLIS;
    final long now = nowMinute * DateUtils.MINUTE_IN_MILLIS;
    final int gmtOffset = mTz.getOffset(now);
    int cacheKey;
    boolean hasFutureDST = mTz.useDaylightTime();
    if (hasFutureDST) {
        cacheKey = (int) (gmtOffset + 36 * DateUtils.HOUR_IN_MILLIS);
    } else {
        cacheKey = (int) (gmtOffset - 36 * DateUtils.HOUR_IN_MILLIS);
    }
    CharSequence displayName = null;
    if (mGmtDisplayNameUpdateTime != nowMinute) {
        mGmtDisplayNameUpdateTime = nowMinute;
        mGmtDisplayNameCache.clear();
    } else {
        displayName = mGmtDisplayNameCache.get(cacheKey);
    }
    if (displayName == null) {
        mSB.setLength(0);
        int flags = DateUtils.FORMAT_ABBREV_ALL;
        flags |= DateUtils.FORMAT_SHOW_TIME;
        if (TimeZoneInfo.is24HourFormat) {
            flags |= DateUtils.FORMAT_24HOUR;
        }
        DateUtils.formatDateRange(context, mFormatter, now, now, flags, mTzId);
        mSB.append("  ");
        int gmtStart = mSB.length();
        TimeZonePickerUtils.appendGmtOffset(mSB, gmtOffset);
        int gmtEnd = mSB.length();
        int symbolStart = 0;
        int symbolEnd = 0;
        if (hasFutureDST) {
            mSB.append(' ');
            symbolStart = mSB.length();
            mSB.append(TimeZonePickerUtils.getDstSymbol());
            symbolEnd = mSB.length();
        }
        Spannable spannableText = mSpannableFactory.newSpannable(mSB);
        spannableText.setSpan(new ForegroundColorSpan(GMT_TEXT_COLOR), gmtStart, gmtEnd, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
        if (hasFutureDST) {
            spannableText.setSpan(new ForegroundColorSpan(DST_SYMBOL_COLOR), symbolStart, symbolEnd, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
        }
        displayName = spannableText;
        mGmtDisplayNameCache.put(cacheKey, displayName);
    }
    return displayName;
}