public List<WifiCandidates.Candidate> getCandidatesFromScan(List<ScanDetail> scanDetails, Set<String> bssidBlacklist, WifiInfo wifiInfo, boolean connected, boolean disconnected, boolean untrustedNetworkAllowed){
    mFilteredNetworks.clear();
    mConnectableNetworks.clear();
    if (scanDetails.size() == 0) {
        localLog("Empty connectivity scan result");
        return null;
    }
    WifiConfiguration currentNetwork = mWifiConfigManager.getConfiguredNetwork(wifiInfo.getNetworkId());
    String currentBssid = wifiInfo.getBSSID();
    updateScanDetailCache(scanDetails);
    if (!isNetworkSelectionNeeded(scanDetails, wifiInfo, connected, disconnected)) {
        return null;
    }
    updateConfiguredNetworks();
    for (NetworkNominator registeredNominator : mNominators) {
        registeredNominator.update(scanDetails);
    }
    mFilteredNetworks = filterScanResults(scanDetails, bssidBlacklist, connected && wifiInfo.getScore() >= WIFI_POOR_SCORE, currentBssid);
    if (mFilteredNetworks.size() == 0) {
        return null;
    }
    WifiCandidates wifiCandidates = new WifiCandidates(mWifiScoreCard, mContext);
    if (currentNetwork != null) {
        wifiCandidates.setCurrent(currentNetwork.networkId, currentBssid);
        MacAddress bssid = MacAddress.fromString(currentBssid);
        WifiCandidates.Key key = new WifiCandidates.Key(ScanResultMatchInfo.fromWifiConfiguration(currentNetwork), bssid, currentNetwork.networkId);
        wifiCandidates.add(key, currentNetwork, NetworkNominator.NOMINATOR_ID_CURRENT, wifiInfo.getRssi(), wifiInfo.getFrequency(), calculateLastSelectionWeight(currentNetwork.networkId), WifiConfiguration.isMetered(currentNetwork, wifiInfo), isFromCarrierOrPrivilegedApp(currentNetwork), 0);
    }
    for (NetworkNominator registeredNominator : mNominators) {
        localLog("About to run " + registeredNominator.getName() + " :");
        registeredNominator.nominateNetworks(new ArrayList<>(mFilteredNetworks), currentNetwork, currentBssid, connected, untrustedNetworkAllowed, (scanDetail, config) -> {
            WifiCandidates.Key key = wifiCandidates.keyFromScanDetailAndConfig(scanDetail, config);
            if (key != null) {
                boolean metered = isEverMetered(config, wifiInfo, scanDetail);
                boolean added = wifiCandidates.add(key, config, registeredNominator.getId(), scanDetail.getScanResult().level, scanDetail.getScanResult().frequency, calculateLastSelectionWeight(config.networkId), metered, isFromCarrierOrPrivilegedApp(config), predictThroughput(scanDetail));
                if (added) {
                    mConnectableNetworks.add(Pair.create(scanDetail, config));
                    mWifiConfigManager.updateScanDetailForNetwork(config.networkId, scanDetail);
                    mWifiMetrics.setNominatorForNetwork(config.networkId, toProtoNominatorId(registeredNominator.getId()));
                }
            }
        });
    }
    if (mConnectableNetworks.size() != wifiCandidates.size()) {
        localLog("Connectable: " + mConnectableNetworks.size() + " Candidates: " + wifiCandidates.size());
    }
    return wifiCandidates.getCandidates();
}