public long getNextTimeMillis(Options options){
    boolean enabledState = mStorage.getBoolean(PREFIX + "enabledState", true);
    if (!enabledState)
        return Long.MAX_VALUE;
    boolean permanentError = mStorage.getBoolean(PREFIX + "permanentError", false);
    if (permanentError)
        return Long.MAX_VALUE;
    int errorCount = mStorage.getInt(PREFIX + "errorCount", 0);
    long now = currentTimeMillis();
    long lastSuccessTimeMillis = getTimeBefore(PREFIX + "lastSuccessTimeMillis", now);
    long lastErrorTimeMillis = getTimeBefore(PREFIX + "lastErrorTimeMillis", now);
    long triggerTimeMillis = mStorage.getLong(PREFIX + "triggerTimeMillis", Long.MAX_VALUE);
    long moratoriumSetMillis = getTimeBefore(PREFIX + "moratoriumSetTimeMillis", now);
    long moratoriumTimeMillis = getTimeBefore(PREFIX + "moratoriumTimeMillis", moratoriumSetMillis + options.maxMoratoriumMillis);
    long time = triggerTimeMillis;
    if (options.periodicIntervalMillis > 0) {
        time = Math.min(time, lastSuccessTimeMillis + options.periodicIntervalMillis);
    }
    time = Math.max(time, moratoriumTimeMillis);
    time = Math.max(time, lastSuccessTimeMillis + options.minTriggerMillis);
    if (errorCount > 0) {
        int shift = errorCount - 1;
        if (shift > 30)
            shift = 30;
        long backoff = options.backoffFixedMillis + (options.backoffIncrementalMillis * errorCount) + (((long) options.backoffExponentialMillis) << shift);
        backoff = Math.min(backoff, options.maxMoratoriumMillis);
        time = Math.max(time, lastErrorTimeMillis + backoff);
    }
    return time;
}