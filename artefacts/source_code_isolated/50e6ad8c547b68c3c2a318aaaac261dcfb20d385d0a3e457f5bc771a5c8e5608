public String getGsmSimpleSimNoLengthAuthResponse(String[] requestData, @NonNull WifiConfiguration config){
    int subId = getBestMatchSubscriptionId(config);
    if (!SubscriptionManager.isValidSubscriptionId(subId)) {
        return null;
    }
    StringBuilder sb = new StringBuilder();
    for (String challenge : requestData) {
        if (challenge == null || challenge.isEmpty()) {
            continue;
        }
        Log.d(TAG, "RAND = " + challenge);
        byte[] rand = null;
        try {
            rand = parseHexWithoutLength(challenge);
        } catch (NumberFormatException e) {
            Log.e(TAG, "malformed challenge");
            continue;
        }
        String base64Challenge = Base64.encodeToString(rand, Base64.NO_WRAP);
        TelephonyManager specifiedTm = mTelephonyManager.createForSubscriptionId(subId);
        String tmResponse = specifiedTm.getIccAuthentication(TelephonyManager.APPTYPE_SIM, TelephonyManager.AUTHTYPE_EAP_SIM, base64Challenge);
        Log.v(TAG, "Raw Response - " + tmResponse);
        if (tmResponse == null || tmResponse.length() <= 4) {
            Log.e(TAG, "bad response - " + tmResponse);
            return null;
        }
        byte[] result = Base64.decode(tmResponse, Base64.DEFAULT);
        if (SRES_LEN + KC_LEN != result.length) {
            Log.e(TAG, "malformed response - " + tmResponse);
            return null;
        }
        Log.v(TAG, "Hex Response -" + makeHex(result));
        String sres = makeHex(result, START_SRES_POS, SRES_LEN);
        String kc = makeHex(result, START_KC_POS, KC_LEN);
        sb.append(":" + kc + ":" + sres);
        Log.v(TAG, "kc:" + kc + " sres:" + sres);
    }
    return sb.toString();
}