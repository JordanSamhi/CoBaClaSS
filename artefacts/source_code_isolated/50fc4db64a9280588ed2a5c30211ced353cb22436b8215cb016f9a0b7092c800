public static PackageInfo generateWithoutComponentsUnchecked(ParsingPackageRead pkg, int[] gids, @PackageManager.PackageInfoFlags int flags, long firstInstallTime, long lastUpdateTime, Set<String> grantedPermissions, PackageUserState state, int userId, @Nullable ApexInfo apexInfo, @NonNull ApplicationInfo applicationInfo){
    PackageInfo pi = new PackageInfo();
    pi.packageName = pkg.getPackageName();
    pi.splitNames = pkg.getSplitNames();
    pi.versionCode = pkg.getVersionCode();
    pi.versionCodeMajor = pkg.getVersionCodeMajor();
    pi.baseRevisionCode = pkg.getBaseRevisionCode();
    pi.splitRevisionCodes = pkg.getSplitRevisionCodes();
    pi.versionName = pkg.getVersionName();
    pi.sharedUserId = pkg.getSharedUserId();
    pi.sharedUserLabel = pkg.getSharedUserLabel();
    pi.applicationInfo = applicationInfo;
    pi.installLocation = pkg.getInstallLocation();
    if ((pi.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0 || (pi.applicationInfo.flags & ApplicationInfo.FLAG_UPDATED_SYSTEM_APP) != 0) {
        pi.requiredForAllUsers = pkg.isRequiredForAllUsers();
    }
    pi.restrictedAccountType = pkg.getRestrictedAccountType();
    pi.requiredAccountType = pkg.getRequiredAccountType();
    pi.overlayTarget = pkg.getOverlayTarget();
    pi.targetOverlayableName = pkg.getOverlayTargetName();
    pi.overlayCategory = pkg.getOverlayCategory();
    pi.overlayPriority = pkg.getOverlayPriority();
    pi.mOverlayIsStatic = pkg.isOverlayIsStatic();
    pi.compileSdkVersion = pkg.getCompileSdkVersion();
    pi.compileSdkVersionCodename = pkg.getCompileSdkVersionCodeName();
    pi.firstInstallTime = firstInstallTime;
    pi.lastUpdateTime = lastUpdateTime;
    if ((flags & PackageManager.GET_GIDS) != 0) {
        pi.gids = gids;
    }
    if ((flags & PackageManager.GET_CONFIGURATIONS) != 0) {
        int size = pkg.getConfigPreferences().size();
        if (size > 0) {
            pi.configPreferences = new ConfigurationInfo[size];
            pkg.getConfigPreferences().toArray(pi.configPreferences);
        }
        size = pkg.getReqFeatures().size();
        if (size > 0) {
            pi.reqFeatures = new FeatureInfo[size];
            pkg.getReqFeatures().toArray(pi.reqFeatures);
        }
        size = pkg.getFeatureGroups().size();
        if (size > 0) {
            pi.featureGroups = new FeatureGroupInfo[size];
            pkg.getFeatureGroups().toArray(pi.featureGroups);
        }
    }
    if ((flags & PackageManager.GET_PERMISSIONS) != 0) {
        int size = ArrayUtils.size(pkg.getPermissions());
        if (size > 0) {
            pi.permissions = new PermissionInfo[size];
            for (int i = 0; i < size; i++) {
                pi.permissions[i] = generatePermissionInfo(pkg.getPermissions().get(i), flags);
            }
        }
        size = pkg.getRequestedPermissions().size();
        if (size > 0) {
            pi.requestedPermissions = new String[size];
            pi.requestedPermissionsFlags = new int[size];
            for (int i = 0; i < size; i++) {
                final String perm = pkg.getRequestedPermissions().get(i);
                pi.requestedPermissions[i] = perm;
                pi.requestedPermissionsFlags[i] |= PackageInfo.REQUESTED_PERMISSION_REQUIRED;
                if (grantedPermissions != null && grantedPermissions.contains(perm)) {
                    pi.requestedPermissionsFlags[i] |= PackageInfo.REQUESTED_PERMISSION_GRANTED;
                }
            }
        }
    }
    if (apexInfo != null) {
        File apexFile = new File(apexInfo.modulePath);
        pi.applicationInfo.sourceDir = apexFile.getPath();
        pi.applicationInfo.publicSourceDir = apexFile.getPath();
        if (apexInfo.isFactory) {
            pi.applicationInfo.flags |= ApplicationInfo.FLAG_SYSTEM;
        } else {
            pi.applicationInfo.flags &= ~ApplicationInfo.FLAG_SYSTEM;
        }
        if (apexInfo.isActive) {
            pi.applicationInfo.flags |= ApplicationInfo.FLAG_INSTALLED;
        } else {
            pi.applicationInfo.flags &= ~ApplicationInfo.FLAG_INSTALLED;
        }
        pi.isApex = true;
    }
    PackageParser.SigningDetails signingDetails = pkg.getSigningDetails();
    if ((flags & PackageManager.GET_SIGNATURES) != 0) {
        if (signingDetails.hasPastSigningCertificates()) {
            pi.signatures = new Signature[1];
            pi.signatures[0] = signingDetails.pastSigningCertificates[0];
        } else if (signingDetails.hasSignatures()) {
            int numberOfSigs = signingDetails.signatures.length;
            pi.signatures = new Signature[numberOfSigs];
            System.arraycopy(signingDetails.signatures, 0, pi.signatures, 0, numberOfSigs);
        }
    }
    if ((flags & PackageManager.GET_SIGNING_CERTIFICATES) != 0) {
        if (signingDetails != PackageParser.SigningDetails.UNKNOWN) {
            pi.signingInfo = new SigningInfo(signingDetails);
        } else {
            pi.signingInfo = null;
        }
    }
    return pi;
}