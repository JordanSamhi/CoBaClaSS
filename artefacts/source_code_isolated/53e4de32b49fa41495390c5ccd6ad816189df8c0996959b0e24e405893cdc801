public synchronized void loadViewerConfig(PrintWriter pw, String viewerConfigFilename){
    if (mLogMessageMap != null) {
        return;
    }
    try {
        InputStreamReader config = new InputStreamReader(new GZIPInputStream(new FileInputStream(viewerConfigFilename)));
        BufferedReader reader = new BufferedReader(config);
        StringBuilder builder = new StringBuilder();
        String line;
        while ((line = reader.readLine()) != null) {
            builder.append(line).append('\n');
        }
        reader.close();
        JSONObject json = new JSONObject(builder.toString());
        JSONObject messages = json.getJSONObject("messages");
        mLogMessageMap = new TreeMap<>();
        Iterator it = messages.keys();
        while (it.hasNext()) {
            String key = (String) it.next();
            try {
                int hash = Integer.parseInt(key);
                JSONObject val = messages.getJSONObject(key);
                String msg = val.getString("message");
                mLogMessageMap.put(hash, msg);
            } catch (NumberFormatException expected) {
            }
        }
        logAndPrintln(pw, "Loaded " + mLogMessageMap.size() + " log definitions from " + viewerConfigFilename);
    } catch (FileNotFoundException e) {
        logAndPrintln(pw, "Unable to load log definitions: File " + viewerConfigFilename + " not found." + e);
    } catch (IOException e) {
        logAndPrintln(pw, "Unable to load log definitions: IOException while reading " + viewerConfigFilename + ". " + e);
    } catch (JSONException e) {
        logAndPrintln(pw, "Unable to load log definitions: JSON parsing exception while reading " + viewerConfigFilename + ". " + e);
    }
}