public void handleBssidConnectionSuccess(@NonNull String bssid, @NonNull String ssid){
    mWifiScoreCard.resetBssidBlocklistStreak(ssid, bssid, REASON_AP_UNABLE_TO_HANDLE_NEW_STA);
    mWifiScoreCard.resetBssidBlocklistStreak(ssid, bssid, REASON_WRONG_PASSWORD);
    mWifiScoreCard.resetBssidBlocklistStreak(ssid, bssid, REASON_EAP_FAILURE);
    mWifiScoreCard.resetBssidBlocklistStreak(ssid, bssid, REASON_ASSOCIATION_REJECTION);
    mWifiScoreCard.resetBssidBlocklistStreak(ssid, bssid, REASON_ASSOCIATION_TIMEOUT);
    mWifiScoreCard.resetBssidBlocklistStreak(ssid, bssid, REASON_AUTHENTICATION_FAILURE);
    long connectionTime = mClock.getWallClockMillis();
    long prevConnectionTime = mWifiScoreCard.setBssidConnectionTimestampMs(ssid, bssid, connectionTime);
    if (connectionTime - prevConnectionTime > ABNORMAL_DISCONNECT_RESET_TIME_MS) {
        mWifiScoreCard.resetBssidBlocklistStreak(ssid, bssid, REASON_ABNORMAL_DISCONNECT);
    }
    BssidStatus status = mBssidStatusMap.get(bssid);
    if (status == null) {
        return;
    }
    status.failureCount[REASON_AP_UNABLE_TO_HANDLE_NEW_STA] = 0;
    status.failureCount[REASON_WRONG_PASSWORD] = 0;
    status.failureCount[REASON_EAP_FAILURE] = 0;
    status.failureCount[REASON_ASSOCIATION_REJECTION] = 0;
    status.failureCount[REASON_ASSOCIATION_TIMEOUT] = 0;
    status.failureCount[REASON_AUTHENTICATION_FAILURE] = 0;
    if (connectionTime - prevConnectionTime > ABNORMAL_DISCONNECT_RESET_TIME_MS) {
        status.failureCount[REASON_ABNORMAL_DISCONNECT] = 0;
    }
}