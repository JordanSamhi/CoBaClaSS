public void calculateIconTranslations(){
    float translationX = getActualPaddingStart();
    int firstOverflowIndex = -1;
    int childCount = getChildCount();
    int maxVisibleIcons = mOnLockScreen ? MAX_VISIBLE_ICONS_ON_LOCK : mIsStaticLayout ? MAX_STATIC_ICONS : childCount;
    float layoutEnd = getLayoutEnd();
    float overflowStart = getMaxOverflowStart();
    mVisualOverflowStart = 0;
    mFirstVisibleIconState = null;
    boolean hasAmbient = mSpeedBumpIndex != -1 && mSpeedBumpIndex < getChildCount();
    for (int i = 0; i < childCount; i++) {
        View view = getChildAt(i);
        IconState iconState = mIconStates.get(view);
        if (iconState.iconAppearAmount == 1.0f) {
            iconState.xTranslation = translationX;
        }
        if (mFirstVisibleIconState == null) {
            mFirstVisibleIconState = iconState;
        }
        boolean forceOverflow = mSpeedBumpIndex != -1 && i >= mSpeedBumpIndex && iconState.iconAppearAmount > 0.0f || i >= maxVisibleIcons;
        boolean noOverflowAfter = i == childCount - 1;
        float drawingScale = mOnLockScreen && view instanceof StatusBarIconView ? ((StatusBarIconView) view).getIconScaleIncreased() : 1f;
        if (mOpenedAmount != 0.0f) {
            noOverflowAfter = noOverflowAfter && !hasAmbient && !forceOverflow;
        }
        iconState.visibleState = StatusBarIconView.STATE_ICON;
        boolean isOverflowing = (translationX > (noOverflowAfter ? layoutEnd - mIconSize : overflowStart - mIconSize));
        if (firstOverflowIndex == -1 && (forceOverflow || isOverflowing)) {
            firstOverflowIndex = noOverflowAfter && !forceOverflow ? i - 1 : i;
            mVisualOverflowStart = layoutEnd - mOverflowWidth;
            if (forceOverflow || mIsStaticLayout) {
                mVisualOverflowStart = Math.min(translationX, mVisualOverflowStart);
            }
        }
        translationX += iconState.iconAppearAmount * view.getWidth() * drawingScale;
    }
    mNumDots = 0;
    if (firstOverflowIndex != -1) {
        translationX = mVisualOverflowStart;
        for (int i = firstOverflowIndex; i < childCount; i++) {
            View view = getChildAt(i);
            IconState iconState = mIconStates.get(view);
            int dotWidth = mStaticDotDiameter + mDotPadding;
            iconState.xTranslation = translationX;
            if (mNumDots < MAX_DOTS) {
                if (mNumDots == 0 && iconState.iconAppearAmount < 0.8f) {
                    iconState.visibleState = StatusBarIconView.STATE_ICON;
                } else {
                    iconState.visibleState = StatusBarIconView.STATE_DOT;
                    mNumDots++;
                }
                translationX += (mNumDots == MAX_DOTS ? MAX_DOTS * dotWidth : dotWidth) * iconState.iconAppearAmount;
                mLastVisibleIconState = iconState;
            } else {
                iconState.visibleState = StatusBarIconView.STATE_HIDDEN;
            }
        }
    } else if (childCount > 0) {
        View lastChild = getChildAt(childCount - 1);
        mLastVisibleIconState = mIconStates.get(lastChild);
        mFirstVisibleIconState = mIconStates.get(getChildAt(0));
    }
    boolean center = mOnLockScreen;
    if (center && translationX < getLayoutEnd()) {
        float initialTranslation = mFirstVisibleIconState == null ? 0 : mFirstVisibleIconState.xTranslation;
        float contentWidth = 0;
        if (mLastVisibleIconState != null) {
            contentWidth = mLastVisibleIconState.xTranslation + mIconSize;
            contentWidth = Math.min(getWidth(), contentWidth) - initialTranslation;
        }
        float availableSpace = getLayoutEnd() - getActualPaddingStart();
        float delta = (availableSpace - contentWidth) / 2;
        if (firstOverflowIndex != -1) {
            float deltaIgnoringOverflow = (getLayoutEnd() - mVisualOverflowStart) / 2;
            delta = (deltaIgnoringOverflow + delta) / 2;
        }
        for (int i = 0; i < childCount; i++) {
            View view = getChildAt(i);
            IconState iconState = mIconStates.get(view);
            iconState.xTranslation += delta;
        }
    }
    if (isLayoutRtl()) {
        for (int i = 0; i < childCount; i++) {
            View view = getChildAt(i);
            IconState iconState = mIconStates.get(view);
            iconState.xTranslation = getWidth() - iconState.xTranslation - view.getWidth();
        }
    }
    if (mIsolatedIcon != null) {
        IconState iconState = mIconStates.get(mIsolatedIcon);
        if (iconState != null) {
            iconState.xTranslation = mIsolatedIconLocation.left - mAbsolutePosition[0] - (1 - mIsolatedIcon.getIconScale()) * mIsolatedIcon.getWidth() / 2.0f;
            iconState.visibleState = StatusBarIconView.STATE_ICON;
        }
    }
}