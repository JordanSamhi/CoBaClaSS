public void startExitTransition(@NonNull Transition transition, @Nullable final View anchorRoot, @Nullable final Rect epicenter, @NonNull final TransitionListener listener){
    if (transition == null) {
        return;
    }
    if (anchorRoot != null) {
        anchorRoot.addOnAttachStateChangeListener(mOnAnchorRootDetachedListener);
    }
    mCleanupAfterExit = () -> {
        listener.onTransitionEnd(transition);
        if (anchorRoot != null) {
            anchorRoot.removeOnAttachStateChangeListener(mOnAnchorRootDetachedListener);
        }
        mCleanupAfterExit = null;
    };
    final Transition exitTransition = transition.clone();
    exitTransition.addListener(new TransitionListenerAdapter() {

        @Override
        public void onTransitionEnd(Transition t) {
            t.removeListener(this);
            if (mCleanupAfterExit != null) {
                mCleanupAfterExit.run();
            }
        }
    });
    exitTransition.setEpicenterCallback(new EpicenterCallback() {

        @Override
        public Rect onGetEpicenter(Transition transition) {
            return epicenter;
        }
    });
    final int count = getChildCount();
    for (int i = 0; i < count; i++) {
        final View child = getChildAt(i);
        exitTransition.addTarget(child);
    }
    TransitionManager.beginDelayedTransition(this, exitTransition);
    for (int i = 0; i < count; i++) {
        final View child = getChildAt(i);
        child.setVisibility(View.INVISIBLE);
    }
}