public static ParseResult<Integer> computeMinSdkVersion(@IntRange(from = 1) int minVers, @Nullable String minCode, @IntRange(from = 1) int platformSdkVersion, @NonNull String[] platformSdkCodenames, @NonNull ParseInput input){
    if (minCode == null) {
        if (minVers <= platformSdkVersion) {
            return input.success(minVers);
        }
        return input.error(PackageManager.INSTALL_FAILED_OLDER_SDK, "Requires newer sdk version #" + minVers + " (current version is #" + platformSdkVersion + ")");
    }
    if (matchTargetCode(platformSdkCodenames, minCode)) {
        return input.success(Build.VERSION_CODES.CUR_DEVELOPMENT);
    }
    if (platformSdkCodenames.length > 0) {
        return input.error(PackageManager.INSTALL_FAILED_OLDER_SDK, "Requires development platform " + minCode + " (current platform is any of " + Arrays.toString(platformSdkCodenames) + ")");
    } else {
        return input.error(PackageManager.INSTALL_FAILED_OLDER_SDK, "Requires development platform " + minCode + " but this is a release platform.");
    }
}