public void showNotification(int id, NotificationType notifyType, NetworkAgentInfo nai, NetworkAgentInfo switchToNai, PendingIntent intent, boolean highPriority){
    final String tag = tagFor(id);
    final int eventId = notifyType.eventId;
    final int transportType;
    final String name;
    if (nai != null) {
        transportType = approximateTransportType(nai);
        final String extraInfo = nai.networkInfo.getExtraInfo();
        name = TextUtils.isEmpty(extraInfo) ? nai.networkCapabilities.getSsid() : extraInfo;
        if (!nai.networkCapabilities.hasCapability(NET_CAPABILITY_INTERNET))
            return;
    } else {
        transportType = TRANSPORT_CELLULAR;
        name = null;
    }
    final int previousEventId = mNotificationTypeMap.get(id);
    final NotificationType previousNotifyType = NotificationType.getFromId(previousEventId);
    if (priority(previousNotifyType) > priority(notifyType)) {
        Slog.d(TAG, String.format("ignoring notification %s for network %s with existing notification %s", notifyType, id, previousNotifyType));
        return;
    }
    clearNotification(id);
    if (DBG) {
        Slog.d(TAG, String.format("showNotification tag=%s event=%s transport=%s name=%s highPriority=%s", tag, nameOf(eventId), getTransportName(transportType), name, highPriority));
    }
    Resources r = mContext.getResources();
    final CharSequence title;
    final CharSequence details;
    int icon = getIcon(transportType);
    if (notifyType == NotificationType.NO_INTERNET && transportType == TRANSPORT_WIFI) {
        title = r.getString(R.string.wifi_no_internet, WifiInfo.sanitizeSsid(nai.networkCapabilities.getSsid()));
        details = r.getString(R.string.wifi_no_internet_detailed);
    } else if (notifyType == NotificationType.PRIVATE_DNS_BROKEN) {
        if (transportType == TRANSPORT_CELLULAR) {
            title = r.getString(R.string.mobile_no_internet);
        } else if (transportType == TRANSPORT_WIFI) {
            title = r.getString(R.string.wifi_no_internet, WifiInfo.sanitizeSsid(nai.networkCapabilities.getSsid()));
        } else {
            title = r.getString(R.string.other_networks_no_internet);
        }
        details = r.getString(R.string.private_dns_broken_detailed);
    } else if (notifyType == NotificationType.PARTIAL_CONNECTIVITY && transportType == TRANSPORT_WIFI) {
        title = r.getString(R.string.network_partial_connectivity, WifiInfo.sanitizeSsid(nai.networkCapabilities.getSsid()));
        details = r.getString(R.string.network_partial_connectivity_detailed);
    } else if (notifyType == NotificationType.LOST_INTERNET && transportType == TRANSPORT_WIFI) {
        title = r.getString(R.string.wifi_no_internet, WifiInfo.sanitizeSsid(nai.networkCapabilities.getSsid()));
        details = r.getString(R.string.wifi_no_internet_detailed);
    } else if (notifyType == NotificationType.SIGN_IN) {
        switch(transportType) {
            case TRANSPORT_WIFI:
                title = r.getString(R.string.wifi_available_sign_in, 0);
                details = r.getString(R.string.network_available_sign_in_detailed, WifiInfo.sanitizeSsid(nai.networkCapabilities.getSsid()));
                break;
            case TRANSPORT_CELLULAR:
                title = r.getString(R.string.network_available_sign_in, 0);
                NetworkSpecifier specifier = nai.networkCapabilities.getNetworkSpecifier();
                int subId = SubscriptionManager.DEFAULT_SUBSCRIPTION_ID;
                if (specifier instanceof TelephonyNetworkSpecifier) {
                    subId = ((TelephonyNetworkSpecifier) specifier).getSubscriptionId();
                }
                details = mTelephonyManager.createForSubscriptionId(subId).getNetworkOperatorName();
                break;
            default:
                title = r.getString(R.string.network_available_sign_in, 0);
                details = r.getString(R.string.network_available_sign_in_detailed, name);
                break;
        }
    } else if (notifyType == NotificationType.NETWORK_SWITCH) {
        String fromTransport = getTransportName(transportType);
        String toTransport = getTransportName(approximateTransportType(switchToNai));
        title = r.getString(R.string.network_switch_metered, toTransport);
        details = r.getString(R.string.network_switch_metered_detail, toTransport, fromTransport);
    } else if (notifyType == NotificationType.NO_INTERNET || notifyType == NotificationType.PARTIAL_CONNECTIVITY) {
        return;
    } else {
        Slog.wtf(TAG, "Unknown notification type " + notifyType + " on network transport " + getTransportName(transportType));
        return;
    }
    final boolean hasPreviousNotification = previousNotifyType != null;
    final String channelId = (highPriority && !hasPreviousNotification) ? SystemNotificationChannels.NETWORK_ALERTS : SystemNotificationChannels.NETWORK_STATUS;
    Notification.Builder builder = new Notification.Builder(mContext, channelId).setWhen(System.currentTimeMillis()).setShowWhen(notifyType == NotificationType.NETWORK_SWITCH).setSmallIcon(icon).setAutoCancel(true).setTicker(title).setColor(mContext.getColor(com.android.internal.R.color.system_notification_accent_color)).setContentTitle(title).setContentIntent(intent).setLocalOnly(true).setOnlyAlertOnce(true);
    if (notifyType == NotificationType.NETWORK_SWITCH) {
        builder.setStyle(new Notification.BigTextStyle().bigText(details));
    } else {
        builder.setContentText(details);
    }
    if (notifyType == NotificationType.SIGN_IN) {
        builder.extend(new Notification.TvExtender().setChannelId(channelId));
    }
    Notification notification = builder.build();
    mNotificationTypeMap.put(id, eventId);
    try {
        mNotificationManager.notifyAsUser(tag, eventId, notification, UserHandle.ALL);
    } catch (NullPointerException npe) {
        Slog.d(TAG, "setNotificationVisible: visible notificationManager error", npe);
    }
}