public void onNotificationClicked(StatusBarNotification sbn, ExpandableNotificationRow row){
    mLogger.logStartingActivityFromClick(sbn.getKey());
    RemoteInputController controller = mRemoteInputManager.getController();
    if (controller.isRemoteInputActive(row.getEntry()) && !TextUtils.isEmpty(row.getActiveRemoteInputText())) {
        controller.closeRemoteInputs();
        return;
    }
    Notification notification = sbn.getNotification();
    final PendingIntent intent = notification.contentIntent != null ? notification.contentIntent : notification.fullScreenIntent;
    final boolean isBubble = row.getEntry().isBubble();
    if (intent == null && !isBubble) {
        mLogger.logNonClickableNotification(sbn.getKey());
        return;
    }
    boolean isActivityIntent = intent != null && intent.isActivity() && !isBubble;
    final boolean afterKeyguardGone = isActivityIntent && mActivityIntentHelper.wouldLaunchResolverActivity(intent.getIntent(), mLockscreenUserManager.getCurrentUserId());
    final boolean wasOccluded = mStatusBar.isOccluded();
    boolean showOverLockscreen = mKeyguardStateController.isShowing() && intent != null && mActivityIntentHelper.wouldShowOverLockscreen(intent.getIntent(), mLockscreenUserManager.getCurrentUserId());
    ActivityStarter.OnDismissAction postKeyguardAction = () -> handleNotificationClickAfterKeyguardDismissed(sbn, row, controller, intent, isActivityIntent, wasOccluded, showOverLockscreen);
    if (showOverLockscreen) {
        mIsCollapsingToShowActivityOverLockscreen = true;
        postKeyguardAction.onDismiss();
    } else {
        mActivityStarter.dismissKeyguardThenExecute(postKeyguardAction, null, afterKeyguardGone);
    }
}