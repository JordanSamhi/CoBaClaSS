public void setVolumeIndexForAttributes(@NonNull AudioAttributes attr, int index, int flags, String callingPackage){
    enforceModifyAudioRoutingPermission();
    Objects.requireNonNull(attr, "attr must not be null");
    final int volumeGroup = getVolumeGroupIdForAttributes(attr);
    if (sVolumeGroupStates.indexOfKey(volumeGroup) < 0) {
        Log.e(TAG, ": no volume group found for attributes " + attr.toString());
        return;
    }
    final VolumeGroupState vgs = sVolumeGroupStates.get(volumeGroup);
    sVolumeLogger.log(new VolumeEvent(VolumeEvent.VOL_SET_GROUP_VOL, attr, vgs.name(), index, flags, callingPackage));
    vgs.setVolumeIndex(index, flags);
    for (final int groupedStream : vgs.getLegacyStreamTypes()) {
        try {
            ensureValidStreamType(groupedStream);
        } catch (IllegalArgumentException e) {
            Log.d(TAG, "volume group " + volumeGroup + " has internal streams (" + groupedStream + "), do not change associated stream volume");
            continue;
        }
        setStreamVolume(groupedStream, index, flags, callingPackage, callingPackage, Binder.getCallingUid(), true);
    }
}