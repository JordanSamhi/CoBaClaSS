public static Uri addCall(CallerInfo ci, Context context, String number, String postDialDigits, String viaNumber, int presentation, int callType, int features, PhoneAccountHandle accountHandle, long start, int duration, Long dataUsage, boolean addForAllUsers, UserHandle userToBeInsertedTo, boolean isRead, int callBlockReason, CharSequence callScreeningAppName, String callScreeningComponentName){
    if (VERBOSE_LOG) {
        Log.v(LOG_TAG, String.format("Add call: number=%s, user=%s, for all=%s", number, userToBeInsertedTo, addForAllUsers));
    }
    final ContentResolver resolver = context.getContentResolver();
    String accountAddress = getLogAccountAddress(context, accountHandle);
    int numberPresentation = getLogNumberPresentation(number, presentation);
    String name = (ci != null) ? ci.getName() : "";
    if (numberPresentation != PRESENTATION_ALLOWED) {
        number = "";
        if (ci != null) {
            name = "";
        }
    }
    String accountComponentString = null;
    String accountId = null;
    if (accountHandle != null) {
        accountComponentString = accountHandle.getComponentName().flattenToString();
        accountId = accountHandle.getId();
    }
    ContentValues values = new ContentValues(6);
    values.put(NUMBER, number);
    values.put(POST_DIAL_DIGITS, postDialDigits);
    values.put(VIA_NUMBER, viaNumber);
    values.put(NUMBER_PRESENTATION, Integer.valueOf(numberPresentation));
    values.put(TYPE, Integer.valueOf(callType));
    values.put(FEATURES, features);
    values.put(DATE, Long.valueOf(start));
    values.put(DURATION, Long.valueOf(duration));
    if (dataUsage != null) {
        values.put(DATA_USAGE, dataUsage);
    }
    values.put(PHONE_ACCOUNT_COMPONENT_NAME, accountComponentString);
    values.put(PHONE_ACCOUNT_ID, accountId);
    values.put(PHONE_ACCOUNT_ADDRESS, accountAddress);
    values.put(NEW, Integer.valueOf(1));
    values.put(CACHED_NAME, name);
    values.put(ADD_FOR_ALL_USERS, addForAllUsers ? 1 : 0);
    if (callType == MISSED_TYPE) {
        values.put(IS_READ, Integer.valueOf(isRead ? 1 : 0));
    }
    values.put(BLOCK_REASON, callBlockReason);
    values.put(CALL_SCREENING_APP_NAME, charSequenceToString(callScreeningAppName));
    values.put(CALL_SCREENING_COMPONENT_NAME, callScreeningComponentName);
    if ((ci != null) && (ci.getContactId() > 0)) {
        final Cursor cursor;
        if (ci.normalizedNumber != null) {
            final String normalizedPhoneNumber = ci.normalizedNumber;
            cursor = resolver.query(Phone.CONTENT_URI, new String[] { Phone._ID }, Phone.CONTACT_ID + " =? AND " + Phone.NORMALIZED_NUMBER + " =?", new String[] { String.valueOf(ci.getContactId()), normalizedPhoneNumber }, null);
        } else {
            final String phoneNumber = ci.getPhoneNumber() != null ? ci.getPhoneNumber() : number;
            cursor = resolver.query(Uri.withAppendedPath(Callable.CONTENT_FILTER_URI, Uri.encode(phoneNumber)), new String[] { Phone._ID }, Phone.CONTACT_ID + " =?", new String[] { String.valueOf(ci.getContactId()) }, null);
        }
        if (cursor != null) {
            try {
                if (cursor.getCount() > 0 && cursor.moveToFirst()) {
                    final String dataId = cursor.getString(0);
                    updateDataUsageStatForData(resolver, dataId);
                    if (duration >= MIN_DURATION_FOR_NORMALIZED_NUMBER_UPDATE_MS && callType == Calls.OUTGOING_TYPE && TextUtils.isEmpty(ci.normalizedNumber)) {
                        updateNormalizedNumber(context, resolver, dataId, number);
                    }
                }
            } finally {
                cursor.close();
            }
        }
    }
    Uri result = null;
    final UserManager userManager = context.getSystemService(UserManager.class);
    final int currentUserId = userManager.getUserHandle();
    if (addForAllUsers) {
        final Uri uriForSystem = addEntryAndRemoveExpiredEntries(context, userManager, UserHandle.SYSTEM, values);
        if (uriForSystem == null || SHADOW_AUTHORITY.equals(uriForSystem.getAuthority())) {
            return null;
        }
        if (UserHandle.USER_SYSTEM == currentUserId) {
            result = uriForSystem;
        }
        final List<UserInfo> users = userManager.getUsers(true);
        final int count = users.size();
        for (int i = 0; i < count; i++) {
            final UserInfo userInfo = users.get(i);
            final UserHandle userHandle = userInfo.getUserHandle();
            final int userId = userHandle.getIdentifier();
            if (userHandle.isSystem()) {
                continue;
            }
            if (!shouldHaveSharedCallLogEntries(context, userManager, userId)) {
                continue;
            }
            if (userManager.isUserRunning(userHandle) && userManager.isUserUnlocked(userHandle)) {
                final Uri uri = addEntryAndRemoveExpiredEntries(context, userManager, userHandle, values);
                if (userId == currentUserId) {
                    result = uri;
                }
            }
        }
    } else {
        final UserHandle targetUserHandle = userToBeInsertedTo != null ? userToBeInsertedTo : UserHandle.of(currentUserId);
        result = addEntryAndRemoveExpiredEntries(context, userManager, targetUserHandle, values);
    }
    return result;
}