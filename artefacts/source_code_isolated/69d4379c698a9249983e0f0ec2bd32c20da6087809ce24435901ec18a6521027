public static DataCallResponse convertDataCallResult(Object dcResult){
    if (dcResult == null)
        return null;
    int cause, suggestedRetryTime, cid, active, mtu, mtuV4, mtuV6;
    String ifname;
    int protocolType;
    String[] addresses = null;
    String[] dnses = null;
    String[] gateways = null;
    String[] pcscfs = null;
    List<LinkAddress> laList = new ArrayList<>();
    if (dcResult instanceof android.hardware.radio.V1_0.SetupDataCallResult) {
        final android.hardware.radio.V1_0.SetupDataCallResult result = (android.hardware.radio.V1_0.SetupDataCallResult) dcResult;
        cause = result.status;
        suggestedRetryTime = result.suggestedRetryTime;
        cid = result.cid;
        active = result.active;
        protocolType = ApnSetting.getProtocolIntFromString(result.type);
        ifname = result.ifname;
        if (!TextUtils.isEmpty(result.addresses)) {
            addresses = result.addresses.split("\\s+");
        }
        if (!TextUtils.isEmpty(result.dnses)) {
            dnses = result.dnses.split("\\s+");
        }
        if (!TextUtils.isEmpty(result.gateways)) {
            gateways = result.gateways.split("\\s+");
        }
        if (!TextUtils.isEmpty(result.pcscf)) {
            pcscfs = result.pcscf.split("\\s+");
        }
        mtu = mtuV4 = mtuV6 = result.mtu;
        if (addresses != null) {
            for (String address : addresses) {
                laList.add(createLinkAddressFromString(address));
            }
        }
    } else if (dcResult instanceof android.hardware.radio.V1_4.SetupDataCallResult) {
        final android.hardware.radio.V1_4.SetupDataCallResult result = (android.hardware.radio.V1_4.SetupDataCallResult) dcResult;
        cause = result.cause;
        suggestedRetryTime = result.suggestedRetryTime;
        cid = result.cid;
        active = result.active;
        protocolType = result.type;
        ifname = result.ifname;
        addresses = result.addresses.stream().toArray(String[]::new);
        dnses = result.dnses.stream().toArray(String[]::new);
        gateways = result.gateways.stream().toArray(String[]::new);
        pcscfs = result.pcscf.stream().toArray(String[]::new);
        mtu = mtuV4 = mtuV6 = result.mtu;
        if (addresses != null) {
            for (String address : addresses) {
                laList.add(createLinkAddressFromString(address));
            }
        }
    } else if (dcResult instanceof android.hardware.radio.V1_5.SetupDataCallResult) {
        final android.hardware.radio.V1_5.SetupDataCallResult result = (android.hardware.radio.V1_5.SetupDataCallResult) dcResult;
        cause = result.cause;
        suggestedRetryTime = result.suggestedRetryTime;
        cid = result.cid;
        active = result.active;
        protocolType = result.type;
        ifname = result.ifname;
        laList = result.addresses.stream().map(la -> createLinkAddressFromString(la.address, la.properties, la.deprecationTime, la.expirationTime)).collect(Collectors.toList());
        dnses = result.dnses.stream().toArray(String[]::new);
        gateways = result.gateways.stream().toArray(String[]::new);
        pcscfs = result.pcscf.stream().toArray(String[]::new);
        mtu = Math.max(result.mtuV4, result.mtuV6);
        mtuV4 = result.mtuV4;
        mtuV6 = result.mtuV6;
    } else {
        Rlog.e(RILJ_LOG_TAG, "Unsupported SetupDataCallResult " + dcResult);
        return null;
    }
    List<InetAddress> dnsList = new ArrayList<>();
    if (dnses != null) {
        for (String dns : dnses) {
            dns = dns.trim();
            InetAddress ia;
            try {
                ia = InetAddresses.parseNumericAddress(dns);
                dnsList.add(ia);
            } catch (IllegalArgumentException e) {
                Rlog.e(RILJ_LOG_TAG, "Unknown dns: " + dns, e);
            }
        }
    }
    List<InetAddress> gatewayList = new ArrayList<>();
    if (gateways != null) {
        for (String gateway : gateways) {
            gateway = gateway.trim();
            InetAddress ia;
            try {
                ia = InetAddresses.parseNumericAddress(gateway);
                gatewayList.add(ia);
            } catch (IllegalArgumentException e) {
                Rlog.e(RILJ_LOG_TAG, "Unknown gateway: " + gateway, e);
            }
        }
    }
    List<InetAddress> pcscfList = new ArrayList<>();
    if (pcscfs != null) {
        for (String pcscf : pcscfs) {
            pcscf = pcscf.trim();
            InetAddress ia;
            try {
                ia = InetAddresses.parseNumericAddress(pcscf);
                pcscfList.add(ia);
            } catch (IllegalArgumentException e) {
                Rlog.e(RILJ_LOG_TAG, "Unknown pcscf: " + pcscf, e);
            }
        }
    }
    return new DataCallResponse.Builder().setCause(cause).setSuggestedRetryTime(suggestedRetryTime).setId(cid).setLinkStatus(active).setProtocolType(protocolType).setInterfaceName(ifname).setAddresses(laList).setDnsAddresses(dnsList).setGatewayAddresses(gatewayList).setPcscfAddresses(pcscfList).setMtu(mtu).setMtuV4(mtuV4).setMtuV6(mtuV6).build();
}