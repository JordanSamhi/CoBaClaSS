public static void disableCarrierAppsUntilPrivileged(String callingPackage, @Nullable TelephonyManager telephonyManager, ContentResolver contentResolver, int userId, Set<String> systemCarrierAppsDisabledUntilUsed, Map<String, List<CarrierAssociatedAppEntry>> systemCarrierAssociatedAppsDisabledUntilUsed, Context context){
    PackageManager packageManager = context.getPackageManager();
    PermissionManager permissionManager = (PermissionManager) context.getSystemService(Context.PERMISSION_SERVICE);
    List<ApplicationInfo> candidates = getDefaultCarrierAppCandidatesHelper(userId, systemCarrierAppsDisabledUntilUsed, context);
    if (candidates == null || candidates.isEmpty()) {
        return;
    }
    Map<String, List<AssociatedAppInfo>> associatedApps = getDefaultCarrierAssociatedAppsHelper(userId, systemCarrierAssociatedAppsDisabledUntilUsed, context);
    List<String> enabledCarrierPackages = new ArrayList<>();
    int carrierAppsHandledSdk = Settings.Secure.getInt(contentResolver, Settings.Secure.CARRIER_APPS_HANDLED, 0);
    if (DEBUG) {
        Log.i(TAG, "Last execution SDK: " + carrierAppsHandledSdk);
    }
    boolean hasRunEver = carrierAppsHandledSdk != 0;
    boolean hasRunForSdk = carrierAppsHandledSdk == Build.VERSION.SDK_INT;
    try {
        for (ApplicationInfo ai : candidates) {
            String packageName = ai.packageName;
            boolean hasPrivileges = telephonyManager != null && telephonyManager.checkCarrierPrivilegesForPackageAnyPhone(packageName) == TelephonyManager.CARRIER_PRIVILEGE_STATUS_HAS_ACCESS;
            packageManager.setSystemAppState(packageName, PackageManager.SYSTEM_APP_STATE_HIDDEN_UNTIL_INSTALLED_HIDDEN);
            List<AssociatedAppInfo> associatedAppList = associatedApps.get(packageName);
            if (associatedAppList != null) {
                for (AssociatedAppInfo associatedApp : associatedAppList) {
                    packageManager.setSystemAppState(associatedApp.appInfo.packageName, PackageManager.SYSTEM_APP_STATE_HIDDEN_UNTIL_INSTALLED_HIDDEN);
                }
            }
            int enabledSetting = context.createContextAsUser(UserHandle.of(userId), 0).getPackageManager().getApplicationEnabledSetting(packageName);
            if (hasPrivileges) {
                if (!isUpdatedSystemApp(ai) && enabledSetting == PackageManager.COMPONENT_ENABLED_STATE_DEFAULT || enabledSetting == PackageManager.COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED || (ai.flags & ApplicationInfo.FLAG_INSTALLED) == 0) {
                    Log.i(TAG, "Update state (" + packageName + "): ENABLED for user " + userId);
                    context.createContextAsUser(UserHandle.of(userId), 0).getPackageManager().setSystemAppState(packageName, PackageManager.SYSTEM_APP_STATE_INSTALLED);
                    context.createPackageContextAsUser(callingPackage, 0, UserHandle.of(userId)).getPackageManager().setApplicationEnabledSetting(packageName, PackageManager.COMPONENT_ENABLED_STATE_ENABLED, PackageManager.DONT_KILL_APP);
                }
                if (associatedAppList != null) {
                    for (AssociatedAppInfo associatedApp : associatedAppList) {
                        int associatedAppEnabledSetting = context.createContextAsUser(UserHandle.of(userId), 0).getPackageManager().getApplicationEnabledSetting(associatedApp.appInfo.packageName);
                        boolean associatedAppInstalled = (associatedApp.appInfo.flags & ApplicationInfo.FLAG_INSTALLED) != 0;
                        if (DEBUG) {
                            Log.i(TAG, "(hasPrivileges) associated app " + associatedApp.appInfo.packageName + ", enabled = " + associatedAppEnabledSetting + ", installed = " + associatedAppInstalled);
                        }
                        if (associatedAppEnabledSetting == PackageManager.COMPONENT_ENABLED_STATE_DEFAULT || associatedAppEnabledSetting == PackageManager.COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED || !associatedAppInstalled) {
                            Log.i(TAG, "Update associated state (" + associatedApp.appInfo.packageName + "): ENABLED for user " + userId);
                            context.createContextAsUser(UserHandle.of(userId), 0).getPackageManager().setSystemAppState(associatedApp.appInfo.packageName, PackageManager.SYSTEM_APP_STATE_INSTALLED);
                            context.createPackageContextAsUser(callingPackage, 0, UserHandle.of(userId)).getPackageManager().setApplicationEnabledSetting(associatedApp.appInfo.packageName, PackageManager.COMPONENT_ENABLED_STATE_ENABLED, PackageManager.DONT_KILL_APP);
                        }
                    }
                }
                enabledCarrierPackages.add(ai.packageName);
            } else {
                if (!isUpdatedSystemApp(ai) && enabledSetting == PackageManager.COMPONENT_ENABLED_STATE_DEFAULT && (ai.flags & ApplicationInfo.FLAG_INSTALLED) != 0) {
                    Log.i(TAG, "Update state (" + packageName + "): DISABLED_UNTIL_USED for user " + userId);
                    context.createContextAsUser(UserHandle.of(userId), 0).getPackageManager().setSystemAppState(packageName, PackageManager.SYSTEM_APP_STATE_UNINSTALLED);
                }
                if (associatedAppList != null) {
                    for (AssociatedAppInfo associatedApp : associatedAppList) {
                        boolean allowDisable = !hasRunEver || (!hasRunForSdk && associatedApp.addedInSdk != CarrierAssociatedAppEntry.SDK_UNSPECIFIED && associatedApp.addedInSdk > carrierAppsHandledSdk && associatedApp.addedInSdk <= Build.VERSION.SDK_INT);
                        int associatedAppEnabledSetting = context.createContextAsUser(UserHandle.of(userId), 0).getPackageManager().getApplicationEnabledSetting(associatedApp.appInfo.packageName);
                        boolean associatedAppInstalled = (associatedApp.appInfo.flags & ApplicationInfo.FLAG_INSTALLED) != 0;
                        if (DEBUG) {
                            Log.i(TAG, "(!hasPrivileges) associated app " + associatedApp.appInfo.packageName + ", allowDisable = " + allowDisable + ", addedInSdk = " + associatedApp.addedInSdk + ", enabled = " + associatedAppEnabledSetting + ", installed = " + associatedAppInstalled);
                        }
                        if (allowDisable && associatedAppEnabledSetting == PackageManager.COMPONENT_ENABLED_STATE_DEFAULT && associatedAppInstalled) {
                            Log.i(TAG, "Update associated state (" + associatedApp.appInfo.packageName + "): DISABLED_UNTIL_USED for user " + userId);
                            context.createContextAsUser(UserHandle.of(userId), 0).getPackageManager().setSystemAppState(associatedApp.appInfo.packageName, PackageManager.SYSTEM_APP_STATE_UNINSTALLED);
                        }
                    }
                }
            }
        }
        if (!hasRunEver || !hasRunForSdk) {
            Settings.Secure.putInt(contentResolver, Settings.Secure.CARRIER_APPS_HANDLED, Build.VERSION.SDK_INT);
        }
        if (!enabledCarrierPackages.isEmpty()) {
            String[] packageNames = new String[enabledCarrierPackages.size()];
            enabledCarrierPackages.toArray(packageNames);
            permissionManager.grantDefaultPermissionsToEnabledCarrierApps(packageNames, UserHandle.of(userId), Runnable::run, isSuccess -> {
            });
        }
    } catch (PackageManager.NameNotFoundException e) {
        Log.w(TAG, "Could not reach PackageManager", e);
    }
}