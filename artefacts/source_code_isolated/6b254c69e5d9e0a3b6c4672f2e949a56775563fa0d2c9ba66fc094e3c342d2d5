public void disable(int displayId, int state1, int state2, boolean animate){
    if (displayId != mDisplayId) {
        return;
    }
    state2 = mRemoteInputQuickSettingsDisabler.adjustDisableFlags(state2);
    animate &= mStatusBarWindowState != WINDOW_STATE_HIDDEN;
    final int old1 = mDisabled1;
    final int diff1 = state1 ^ old1;
    mDisabled1 = state1;
    final int old2 = mDisabled2;
    final int diff2 = state2 ^ old2;
    mDisabled2 = state2;
    if (DEBUG) {
        Log.d(TAG, String.format("disable1: 0x%08x -> 0x%08x (diff1: 0x%08x)", old1, state1, diff1));
        Log.d(TAG, String.format("disable2: 0x%08x -> 0x%08x (diff2: 0x%08x)", old2, state2, diff2));
    }
    StringBuilder flagdbg = new StringBuilder();
    flagdbg.append("disable<");
    flagdbg.append(0 != ((state1 & StatusBarManager.DISABLE_EXPAND)) ? 'E' : 'e');
    flagdbg.append(0 != ((diff1 & StatusBarManager.DISABLE_EXPAND)) ? '!' : ' ');
    flagdbg.append(0 != ((state1 & StatusBarManager.DISABLE_NOTIFICATION_ICONS)) ? 'I' : 'i');
    flagdbg.append(0 != ((diff1 & StatusBarManager.DISABLE_NOTIFICATION_ICONS)) ? '!' : ' ');
    flagdbg.append(0 != ((state1 & StatusBarManager.DISABLE_NOTIFICATION_ALERTS)) ? 'A' : 'a');
    flagdbg.append(0 != ((diff1 & StatusBarManager.DISABLE_NOTIFICATION_ALERTS)) ? '!' : ' ');
    flagdbg.append(0 != ((state1 & StatusBarManager.DISABLE_SYSTEM_INFO)) ? 'S' : 's');
    flagdbg.append(0 != ((diff1 & StatusBarManager.DISABLE_SYSTEM_INFO)) ? '!' : ' ');
    flagdbg.append(0 != ((state1 & StatusBarManager.DISABLE_BACK)) ? 'B' : 'b');
    flagdbg.append(0 != ((diff1 & StatusBarManager.DISABLE_BACK)) ? '!' : ' ');
    flagdbg.append(0 != ((state1 & StatusBarManager.DISABLE_HOME)) ? 'H' : 'h');
    flagdbg.append(0 != ((diff1 & StatusBarManager.DISABLE_HOME)) ? '!' : ' ');
    flagdbg.append(0 != ((state1 & StatusBarManager.DISABLE_RECENT)) ? 'R' : 'r');
    flagdbg.append(0 != ((diff1 & StatusBarManager.DISABLE_RECENT)) ? '!' : ' ');
    flagdbg.append(0 != ((state1 & StatusBarManager.DISABLE_CLOCK)) ? 'C' : 'c');
    flagdbg.append(0 != ((diff1 & StatusBarManager.DISABLE_CLOCK)) ? '!' : ' ');
    flagdbg.append(0 != ((state1 & StatusBarManager.DISABLE_SEARCH)) ? 'S' : 's');
    flagdbg.append(0 != ((diff1 & StatusBarManager.DISABLE_SEARCH)) ? '!' : ' ');
    flagdbg.append("> disable2<");
    flagdbg.append(0 != ((state2 & StatusBarManager.DISABLE2_QUICK_SETTINGS)) ? 'Q' : 'q');
    flagdbg.append(0 != ((diff2 & StatusBarManager.DISABLE2_QUICK_SETTINGS)) ? '!' : ' ');
    flagdbg.append(0 != ((state2 & StatusBarManager.DISABLE2_SYSTEM_ICONS)) ? 'I' : 'i');
    flagdbg.append(0 != ((diff2 & StatusBarManager.DISABLE2_SYSTEM_ICONS)) ? '!' : ' ');
    flagdbg.append(0 != ((state2 & StatusBarManager.DISABLE2_NOTIFICATION_SHADE)) ? 'N' : 'n');
    flagdbg.append(0 != ((diff2 & StatusBarManager.DISABLE2_NOTIFICATION_SHADE)) ? '!' : ' ');
    flagdbg.append('>');
    Log.d(TAG, flagdbg.toString());
    if ((diff1 & StatusBarManager.DISABLE_EXPAND) != 0) {
        if ((state1 & StatusBarManager.DISABLE_EXPAND) != 0) {
            mShadeController.animateCollapsePanels();
        }
    }
    if ((diff1 & StatusBarManager.DISABLE_RECENT) != 0) {
        if ((state1 & StatusBarManager.DISABLE_RECENT) != 0) {
            mHandler.removeMessages(MSG_HIDE_RECENT_APPS);
            mHandler.sendEmptyMessage(MSG_HIDE_RECENT_APPS);
        }
    }
    if ((diff1 & StatusBarManager.DISABLE_NOTIFICATION_ALERTS) != 0) {
        if (areNotificationAlertsDisabled()) {
            mHeadsUpManager.releaseAllImmediately();
        }
    }
    if ((diff2 & StatusBarManager.DISABLE2_QUICK_SETTINGS) != 0) {
        updateQsExpansionEnabled();
    }
    if ((diff2 & StatusBarManager.DISABLE2_NOTIFICATION_SHADE) != 0) {
        updateQsExpansionEnabled();
        if ((state1 & StatusBarManager.DISABLE2_NOTIFICATION_SHADE) != 0) {
            mShadeController.animateCollapsePanels();
        }
    }
}