public synchronized IpSecTransformResponse createTransform(IpSecConfig c, IBinder binder, String callingPackage) throws RemoteException{
    Objects.requireNonNull(c);
    if (c.getMode() == IpSecTransform.MODE_TUNNEL) {
        enforceTunnelFeatureAndPermissions(callingPackage);
    }
    checkIpSecConfig(c);
    Objects.requireNonNull(binder, "Null Binder passed to createTransform");
    final int resourceId = mNextResourceId++;
    UserRecord userRecord = mUserResourceTracker.getUserRecord(Binder.getCallingUid());
    List<RefcountedResource> dependencies = new ArrayList<>();
    if (!userRecord.mTransformQuotaTracker.isAvailable()) {
        return new IpSecTransformResponse(IpSecManager.Status.RESOURCE_UNAVAILABLE);
    }
    EncapSocketRecord socketRecord = null;
    if (c.getEncapType() != IpSecTransform.ENCAP_NONE) {
        RefcountedResource<EncapSocketRecord> refcountedSocketRecord = userRecord.mEncapSocketRecords.getRefcountedResourceOrThrow(c.getEncapSocketResourceId());
        dependencies.add(refcountedSocketRecord);
        socketRecord = refcountedSocketRecord.getResource();
    }
    RefcountedResource<SpiRecord> refcountedSpiRecord = userRecord.mSpiRecords.getRefcountedResourceOrThrow(c.getSpiResourceId());
    dependencies.add(refcountedSpiRecord);
    SpiRecord spiRecord = refcountedSpiRecord.getResource();
    createOrUpdateTransform(c, resourceId, spiRecord, socketRecord);
    userRecord.mTransformRecords.put(resourceId, new RefcountedResource<TransformRecord>(new TransformRecord(resourceId, c, spiRecord, socketRecord), binder, dependencies.toArray(new RefcountedResource[dependencies.size()])));
    return new IpSecTransformResponse(IpSecManager.Status.OK, resourceId);
}