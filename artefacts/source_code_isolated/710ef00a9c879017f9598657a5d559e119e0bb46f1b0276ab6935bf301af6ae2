public static Pair<Drawable, String> getBtDrawableWithDescription(Context context, CachedBluetoothDevice cachedDevice){
    final Pair<Drawable, String> pair = BluetoothUtils.getBtClassDrawableWithDescription(context, cachedDevice);
    final BluetoothDevice bluetoothDevice = cachedDevice.getDevice();
    final boolean untetheredHeadset = getBooleanMetaData(bluetoothDevice, BluetoothDevice.METADATA_IS_UNTETHERED_HEADSET);
    final int iconSize = context.getResources().getDimensionPixelSize(R.dimen.bt_nearby_icon_size);
    final Resources resources = context.getResources();
    if (untetheredHeadset) {
        final Uri iconUri = getUriMetaData(bluetoothDevice, BluetoothDevice.METADATA_MAIN_ICON);
        if (iconUri != null) {
            try {
                context.getContentResolver().takePersistableUriPermission(iconUri, Intent.FLAG_GRANT_READ_URI_PERMISSION);
            } catch (SecurityException e) {
                Log.e(TAG, "Failed to take persistable permission for: " + iconUri, e);
            }
            try {
                final Bitmap bitmap = MediaStore.Images.Media.getBitmap(context.getContentResolver(), iconUri);
                if (bitmap != null) {
                    final Bitmap resizedBitmap = Bitmap.createScaledBitmap(bitmap, iconSize, iconSize, false);
                    bitmap.recycle();
                    return new Pair<>(new BitmapDrawable(resources, resizedBitmap), pair.second);
                }
            } catch (IOException e) {
                Log.e(TAG, "Failed to get drawable for: " + iconUri, e);
            } catch (SecurityException e) {
                Log.e(TAG, "Failed to get permission for: " + iconUri, e);
            }
        }
    }
    return new Pair<>(pair.first, pair.second);
}