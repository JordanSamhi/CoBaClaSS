public long until(Temporal endExclusive, TemporalUnit unit){
    Instant end = Instant.from(endExclusive);
    if (unit instanceof ChronoUnit) {
        ChronoUnit f = (ChronoUnit) unit;
        switch(f) {
            case NANOS:
                return nanosUntil(end);
            case MICROS:
                return nanosUntil(end) / 1000;
            case MILLIS:
                return Math.subtractExact(end.toEpochMilli(), toEpochMilli());
            case SECONDS:
                return secondsUntil(end);
            case MINUTES:
                return secondsUntil(end) / SECONDS_PER_MINUTE;
            case HOURS:
                return secondsUntil(end) / SECONDS_PER_HOUR;
            case HALF_DAYS:
                return secondsUntil(end) / (12 * SECONDS_PER_HOUR);
            case DAYS:
                return secondsUntil(end) / (SECONDS_PER_DAY);
        }
        throw new UnsupportedTemporalTypeException("Unsupported unit: " + unit);
    }
    return unit.between(this, end);
}