public VideoProfile maybeFilterPauseResume(VideoProfile fromProfile, VideoProfile toProfile, int source){
    int fromVideoState = fromProfile.getVideoState();
    int toVideoState = toProfile.getVideoState();
    boolean isPauseSpecialCase = (source == VideoPauseTracker.SOURCE_INCALL && VideoProfile.isPaused(fromVideoState) && VideoProfile.isPaused(toVideoState));
    boolean isPauseRequest = isPauseRequest(fromVideoState, toVideoState) || isPauseSpecialCase;
    boolean isResumeRequest = isResumeRequest(fromVideoState, toVideoState);
    if (isPauseRequest) {
        Log.i(LOG_TAG, String.format("maybeFilterPauseResume: isPauseRequest (from=%s, to=%s)", VideoProfile.videoStateToString(fromVideoState), VideoProfile.videoStateToString(toVideoState)));
        if (!mVideoPauseTracker.shouldPauseVideoFor(source) && !isPauseSpecialCase) {
            toVideoState = toVideoState & ~VideoProfile.STATE_PAUSED;
            toProfile = new VideoProfile(toVideoState, toProfile.getQuality());
        }
    } else if (isResumeRequest) {
        boolean isTurnOffCameraRequest = isTurnOffCameraRequest(fromVideoState, toVideoState);
        boolean isTurnOnCameraRequest = isTurnOnCameraRequest(fromVideoState, toVideoState);
        if (mUseVideoPauseWorkaround && (isTurnOffCameraRequest || isTurnOnCameraRequest)) {
            Log.i(LOG_TAG, String.format("maybeFilterPauseResume: isResumeRequest," + " but camera turning on/off so skipping (from=%s, to=%s)", VideoProfile.videoStateToString(fromVideoState), VideoProfile.videoStateToString(toVideoState)));
            return toProfile;
        }
        Log.i(LOG_TAG, String.format("maybeFilterPauseResume: isResumeRequest (from=%s, to=%s)", VideoProfile.videoStateToString(fromVideoState), VideoProfile.videoStateToString(toVideoState)));
        if (!mVideoPauseTracker.shouldResumeVideoFor(source)) {
            toVideoState = toVideoState | VideoProfile.STATE_PAUSED;
            toProfile = new VideoProfile(toVideoState, toProfile.getQuality());
        }
    }
    return toProfile;
}