public void start(Runnable... after){
    if (!isActiveController(mAssociatedController)) {
        Log.w(TAG, "Only the active animation controller is allowed to start animations. " + "Use PhysicsAnimationLayout#setActiveController to set the active " + "animation controller.");
        return;
    }
    final Set<DynamicAnimation.ViewProperty> properties = getAnimatedProperties();
    if (after != null && after.length > 0) {
        final DynamicAnimation.ViewProperty[] propertiesArray = properties.toArray(new DynamicAnimation.ViewProperty[0]);
        mAssociatedController.setEndActionForMultipleProperties(() -> {
            for (Runnable callback : after) {
                callback.run();
            }
        }, propertiesArray);
    }
    if (mPositionEndActions != null) {
        final SpringAnimation translationXAnim = getAnimationFromView(DynamicAnimation.TRANSLATION_X, mView);
        final SpringAnimation translationYAnim = getAnimationFromView(DynamicAnimation.TRANSLATION_Y, mView);
        final Runnable waitForBothXAndY = () -> {
            if (!translationXAnim.isRunning() && !translationYAnim.isRunning()) {
                if (mPositionEndActions != null) {
                    for (Runnable callback : mPositionEndActions) {
                        callback.run();
                    }
                }
                mPositionEndActions = null;
            }
        };
        mEndActionsForProperty.put(DynamicAnimation.TRANSLATION_X, new Runnable[] { waitForBothXAndY });
        mEndActionsForProperty.put(DynamicAnimation.TRANSLATION_Y, new Runnable[] { waitForBothXAndY });
    }
    if (mPathAnimator != null) {
        startPathAnimation();
    }
    for (DynamicAnimation.ViewProperty property : properties) {
        if (mPathAnimator != null && (property.equals(DynamicAnimation.TRANSLATION_X) || property.equals(DynamicAnimation.TRANSLATION_Y))) {
            return;
        }
        if (mInitialPropertyValues.containsKey(property)) {
            property.setValue(mView, mInitialPropertyValues.get(property));
        }
        final SpringForce defaultSpringForce = mController.getSpringForce(property, mView);
        animateValueForChild(property, mView, mAnimatedProperties.get(property), mPositionStartVelocities.getOrDefault(property, mDefaultStartVelocity), mStartDelay, mStiffness >= 0 ? mStiffness : defaultSpringForce.getStiffness(), mDampingRatio >= 0 ? mDampingRatio : defaultSpringForce.getDampingRatio(), mEndActionsForProperty.get(property));
    }
    clearAnimator();
}