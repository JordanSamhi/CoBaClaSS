public void updateState(ExpandableViewState parentState, AmbientState ambientState){
    int childCount = mAttachedChildren.size();
    int yPosition = mNotificationHeaderMargin + mCurrentHeaderTranslation;
    boolean firstChild = true;
    int maxAllowedVisibleChildren = getMaxAllowedVisibleChildren();
    int lastVisibleIndex = maxAllowedVisibleChildren - 1;
    int firstOverflowIndex = lastVisibleIndex + 1;
    float expandFactor = 0;
    boolean expandingToExpandedGroup = mUserLocked && !showingAsLowPriority();
    if (mUserLocked) {
        expandFactor = getGroupExpandFraction();
        firstOverflowIndex = getMaxAllowedVisibleChildren(true);
    }
    boolean childrenExpandedAndNotAnimating = mChildrenExpanded && !mContainingNotification.isGroupExpansionChanging();
    int launchTransitionCompensation = 0;
    for (int i = 0; i < childCount; i++) {
        ExpandableNotificationRow child = mAttachedChildren.get(i);
        if (!firstChild) {
            if (expandingToExpandedGroup) {
                yPosition += NotificationUtils.interpolate(mChildPadding, mDividerHeight, expandFactor);
            } else {
                yPosition += mChildrenExpanded ? mDividerHeight : mChildPadding;
            }
        } else {
            if (expandingToExpandedGroup) {
                yPosition += NotificationUtils.interpolate(0, mNotificatonTopPadding + mDividerHeight, expandFactor);
            } else {
                yPosition += mChildrenExpanded ? mNotificatonTopPadding + mDividerHeight : 0;
            }
            firstChild = false;
        }
        ExpandableViewState childState = child.getViewState();
        int intrinsicHeight = child.getIntrinsicHeight();
        childState.height = intrinsicHeight;
        childState.yTranslation = yPosition + launchTransitionCompensation;
        childState.hidden = false;
        childState.zTranslation = (childrenExpandedAndNotAnimating && mEnableShadowOnChildNotifications) ? parentState.zTranslation : 0;
        childState.dimmed = parentState.dimmed;
        childState.hideSensitive = parentState.hideSensitive;
        childState.belowSpeedBump = parentState.belowSpeedBump;
        childState.clipTopAmount = 0;
        childState.alpha = 0;
        if (i < firstOverflowIndex) {
            childState.alpha = showingAsLowPriority() ? expandFactor : 1.0f;
        } else if (expandFactor == 1.0f && i <= lastVisibleIndex) {
            childState.alpha = (mActualHeight - childState.yTranslation) / childState.height;
            childState.alpha = Math.max(0.0f, Math.min(1.0f, childState.alpha));
        }
        childState.location = parentState.location;
        childState.inShelf = parentState.inShelf;
        yPosition += intrinsicHeight;
        if (child.isExpandAnimationRunning()) {
            launchTransitionCompensation = -ambientState.getExpandAnimationTopChange();
        }
    }
    if (mOverflowNumber != null) {
        ExpandableNotificationRow overflowView = mAttachedChildren.get(Math.min(getMaxAllowedVisibleChildren(true), childCount) - 1);
        mGroupOverFlowState.copyFrom(overflowView.getViewState());
        if (!mChildrenExpanded) {
            HybridNotificationView alignView = overflowView.getSingleLineView();
            if (alignView != null) {
                View mirrorView = alignView.getTextView();
                if (mirrorView.getVisibility() == GONE) {
                    mirrorView = alignView.getTitleView();
                }
                if (mirrorView.getVisibility() == GONE) {
                    mirrorView = alignView;
                }
                mGroupOverFlowState.alpha = mirrorView.getAlpha();
                mGroupOverFlowState.yTranslation += NotificationUtils.getRelativeYOffset(mirrorView, overflowView);
            }
        } else {
            mGroupOverFlowState.yTranslation += mNotificationHeaderMargin;
            mGroupOverFlowState.alpha = 0.0f;
        }
    }
    if (mNotificationHeader != null) {
        if (mHeaderViewState == null) {
            mHeaderViewState = new ViewState();
        }
        mHeaderViewState.initFrom(mNotificationHeader);
        mHeaderViewState.zTranslation = childrenExpandedAndNotAnimating ? parentState.zTranslation : 0;
        mHeaderViewState.yTranslation = mCurrentHeaderTranslation;
        mHeaderViewState.alpha = mHeaderVisibleAmount;
        mHeaderViewState.hidden = false;
    }
}