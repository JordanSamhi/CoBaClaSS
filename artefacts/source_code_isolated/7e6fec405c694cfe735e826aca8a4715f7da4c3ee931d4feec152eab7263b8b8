public boolean onInterceptTouchEvent(MotionEvent e){
    if (mLayoutFrozen) {
        return false;
    }
    if (dispatchOnItemTouchIntercept(e)) {
        cancelTouch();
        return true;
    }
    if (mLayout == null) {
        return false;
    }
    final boolean canScrollHorizontally = mLayout.canScrollHorizontally();
    final boolean canScrollVertically = mLayout.canScrollVertically();
    if (mVelocityTracker == null) {
        mVelocityTracker = VelocityTracker.obtain();
    }
    mVelocityTracker.addMovement(e);
    final int action = e.getActionMasked();
    final int actionIndex = e.getActionIndex();
    switch(action) {
        case MotionEvent.ACTION_DOWN:
            if (mIgnoreMotionEventTillDown) {
                mIgnoreMotionEventTillDown = false;
            }
            mScrollPointerId = e.getPointerId(0);
            mInitialTouchX = mLastTouchX = (int) (e.getX() + 0.5f);
            mInitialTouchY = mLastTouchY = (int) (e.getY() + 0.5f);
            if (mScrollState == SCROLL_STATE_SETTLING) {
                getParent().requestDisallowInterceptTouchEvent(true);
                setScrollState(SCROLL_STATE_DRAGGING);
            }
            mNestedOffsets[0] = mNestedOffsets[1] = 0;
            int nestedScrollAxis = View.SCROLL_AXIS_NONE;
            if (canScrollHorizontally) {
                nestedScrollAxis |= View.SCROLL_AXIS_HORIZONTAL;
            }
            if (canScrollVertically) {
                nestedScrollAxis |= View.SCROLL_AXIS_VERTICAL;
            }
            startNestedScroll(nestedScrollAxis);
            break;
        case MotionEvent.ACTION_POINTER_DOWN:
            mScrollPointerId = e.getPointerId(actionIndex);
            mInitialTouchX = mLastTouchX = (int) (e.getX(actionIndex) + 0.5f);
            mInitialTouchY = mLastTouchY = (int) (e.getY(actionIndex) + 0.5f);
            break;
        case MotionEvent.ACTION_MOVE:
            {
                final int index = e.findPointerIndex(mScrollPointerId);
                if (index < 0) {
                    Log.e(TAG, "Error processing scroll; pointer index for id " + mScrollPointerId + " not found. Did any MotionEvents get skipped?");
                    return false;
                }
                final int x = (int) (e.getX(index) + 0.5f);
                final int y = (int) (e.getY(index) + 0.5f);
                if (mScrollState != SCROLL_STATE_DRAGGING) {
                    final int dx = x - mInitialTouchX;
                    final int dy = y - mInitialTouchY;
                    boolean startScroll = false;
                    if (canScrollHorizontally && Math.abs(dx) > mTouchSlop) {
                        mLastTouchX = mInitialTouchX + mTouchSlop * (dx < 0 ? -1 : 1);
                        startScroll = true;
                    }
                    if (canScrollVertically && Math.abs(dy) > mTouchSlop) {
                        mLastTouchY = mInitialTouchY + mTouchSlop * (dy < 0 ? -1 : 1);
                        startScroll = true;
                    }
                    if (startScroll) {
                        setScrollState(SCROLL_STATE_DRAGGING);
                    }
                }
            }
            break;
        case MotionEvent.ACTION_POINTER_UP:
            {
                onPointerUp(e);
            }
            break;
        case MotionEvent.ACTION_UP:
            {
                mVelocityTracker.clear();
                stopNestedScroll();
            }
            break;
        case MotionEvent.ACTION_CANCEL:
            {
                cancelTouch();
            }
    }
    return mScrollState == SCROLL_STATE_DRAGGING;
}