public void readFromProto(ProtoInputStream protoInputStream, long fieldId) throws IOException{
    final long token = protoInputStream.start(fieldId);
    final List<Locale> list = new ArrayList();
    try {
        while (protoInputStream.nextField() != ProtoInputStream.NO_MORE_FIELDS) {
            switch(protoInputStream.getFieldNumber()) {
                case (int) FONT_SCALE:
                    fontScale = protoInputStream.readFloat(FONT_SCALE);
                    break;
                case (int) MCC:
                    mcc = protoInputStream.readInt(MCC);
                    break;
                case (int) MNC:
                    mnc = protoInputStream.readInt(MNC);
                    break;
                case (int) LOCALES:
                    final long localeToken = protoInputStream.start(LOCALES);
                    String language = "";
                    String country = "";
                    String variant = "";
                    String script = "";
                    try {
                        while (protoInputStream.nextField() != ProtoInputStream.NO_MORE_FIELDS) {
                            switch(protoInputStream.getFieldNumber()) {
                                case (int) LocaleProto.LANGUAGE:
                                    language = protoInputStream.readString(LocaleProto.LANGUAGE);
                                    break;
                                case (int) LocaleProto.COUNTRY:
                                    country = protoInputStream.readString(LocaleProto.COUNTRY);
                                    break;
                                case (int) LocaleProto.VARIANT:
                                    variant = protoInputStream.readString(LocaleProto.VARIANT);
                                    break;
                                case (int) LocaleProto.SCRIPT:
                                    script = protoInputStream.readString(LocaleProto.SCRIPT);
                                    break;
                            }
                        }
                    } catch (WireTypeMismatchException wtme) {
                        throw wtme;
                    } finally {
                        protoInputStream.end(localeToken);
                        try {
                            final Locale locale = new Locale.Builder().setLanguage(language).setRegion(country).setVariant(variant).setScript(script).build();
                            final int inListIndex = list.indexOf(locale);
                            if (inListIndex != -1) {
                                Slog.wtf(TAG, "Repeated locale (" + list.get(inListIndex) + ")" + " found when trying to add: " + locale.toString());
                            } else {
                                list.add(locale);
                            }
                        } catch (IllformedLocaleException e) {
                            Slog.e(TAG, "readFromProto error building locale with: " + "language-" + language + ";country-" + country + ";variant-" + variant + ";script-" + script);
                        }
                    }
                    break;
                case (int) SCREEN_LAYOUT:
                    screenLayout = protoInputStream.readInt(SCREEN_LAYOUT);
                    break;
                case (int) COLOR_MODE:
                    colorMode = protoInputStream.readInt(COLOR_MODE);
                    break;
                case (int) TOUCHSCREEN:
                    touchscreen = protoInputStream.readInt(TOUCHSCREEN);
                    break;
                case (int) KEYBOARD:
                    keyboard = protoInputStream.readInt(KEYBOARD);
                    break;
                case (int) KEYBOARD_HIDDEN:
                    keyboardHidden = protoInputStream.readInt(KEYBOARD_HIDDEN);
                    break;
                case (int) HARD_KEYBOARD_HIDDEN:
                    hardKeyboardHidden = protoInputStream.readInt(HARD_KEYBOARD_HIDDEN);
                    break;
                case (int) NAVIGATION:
                    navigation = protoInputStream.readInt(NAVIGATION);
                    break;
                case (int) NAVIGATION_HIDDEN:
                    navigationHidden = protoInputStream.readInt(NAVIGATION_HIDDEN);
                    break;
                case (int) ORIENTATION:
                    orientation = protoInputStream.readInt(ORIENTATION);
                    break;
                case (int) UI_MODE:
                    uiMode = protoInputStream.readInt(UI_MODE);
                    break;
                case (int) SCREEN_WIDTH_DP:
                    screenWidthDp = protoInputStream.readInt(SCREEN_WIDTH_DP);
                    break;
                case (int) SCREEN_HEIGHT_DP:
                    screenHeightDp = protoInputStream.readInt(SCREEN_HEIGHT_DP);
                    break;
                case (int) SMALLEST_SCREEN_WIDTH_DP:
                    smallestScreenWidthDp = protoInputStream.readInt(SMALLEST_SCREEN_WIDTH_DP);
                    break;
                case (int) DENSITY_DPI:
                    densityDpi = protoInputStream.readInt(DENSITY_DPI);
                    break;
                case (int) WINDOW_CONFIGURATION:
                    windowConfiguration.readFromProto(protoInputStream, WINDOW_CONFIGURATION);
                    break;
                case (int) LOCALE_LIST:
                    try {
                        setLocales(LocaleList.forLanguageTags(protoInputStream.readString(LOCALE_LIST)));
                    } catch (Exception e) {
                        Slog.e(TAG, "error parsing locale list in configuration.", e);
                    }
                    break;
            }
        }
    } finally {
        if (list.size() > 0) {
            setLocales(new LocaleList(list.toArray(new Locale[list.size()])));
        }
        protoInputStream.end(token);
    }
}