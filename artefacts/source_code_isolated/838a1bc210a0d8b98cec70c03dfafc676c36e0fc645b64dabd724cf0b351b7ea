public void updateMeasureState(TextPaint ds){
    final Typeface styledTypeface;
    int style = 0;
    if (mTypeface != null) {
        style = mStyle;
        styledTypeface = Typeface.create(mTypeface, style);
    } else if (mFamilyName != null || mStyle != 0) {
        Typeface tf = ds.getTypeface();
        if (tf != null) {
            style = tf.getStyle();
        }
        style |= mStyle;
        if (mFamilyName != null) {
            styledTypeface = Typeface.create(mFamilyName, style);
        } else if (tf == null) {
            styledTypeface = Typeface.defaultFromStyle(style);
        } else {
            styledTypeface = Typeface.create(tf, style);
        }
    } else {
        styledTypeface = null;
    }
    if (styledTypeface != null) {
        final Typeface readyTypeface;
        if (mTextFontWeight >= 0) {
            final int weight = Math.min(FontStyle.FONT_WEIGHT_MAX, mTextFontWeight);
            final boolean italic = (style & Typeface.ITALIC) != 0;
            readyTypeface = ds.setTypeface(Typeface.create(styledTypeface, weight, italic));
        } else {
            readyTypeface = styledTypeface;
        }
        int fake = style & ~readyTypeface.getStyle();
        if ((fake & Typeface.BOLD) != 0) {
            ds.setFakeBoldText(true);
        }
        if ((fake & Typeface.ITALIC) != 0) {
            ds.setTextSkewX(-0.25f);
        }
        ds.setTypeface(readyTypeface);
    }
    if (mTextSize > 0) {
        ds.setTextSize(mTextSize);
    }
    if (mTextLocales != null) {
        ds.setTextLocales(mTextLocales);
    }
    if (mHasElegantTextHeight) {
        ds.setElegantTextHeight(mElegantTextHeight);
    }
    if (mHasLetterSpacing) {
        ds.setLetterSpacing(mLetterSpacing);
    }
    if (mFontFeatureSettings != null) {
        ds.setFontFeatureSettings(mFontFeatureSettings);
    }
    if (mFontVariationSettings != null) {
        ds.setFontVariationSettings(mFontVariationSettings);
    }
}