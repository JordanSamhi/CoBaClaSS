public int getMcc(int sid, int tz, int DSTflag, boolean isNitzTimeZone){
    int tmpMcc = 0;
    String[] projection2 = { ArbitraryMccSidMatch.MCC };
    Cursor c2 = resolver.query(ArbitraryMccSidMatch.CONTENT_URI, projection2, ArbitraryMccSidMatch.SID + "=" + sid, null, null);
    if (c2 != null) {
        int c2Counter = c2.getCount();
        if (DBG) {
            Log.d(LOG_TAG, "Query unresolved arbitrary table, entries are " + c2Counter);
        }
        if (c2Counter == 1) {
            if (DBG) {
                Log.d(LOG_TAG, "Query Unresolved arbitrary returned the cursor " + c2);
            }
            c2.moveToFirst();
            tmpMcc = c2.getInt(0);
            if (DBG) {
                Log.d(LOG_TAG, "MCC found in arbitrary_mcc_sid_match: " + tmpMcc);
            }
            c2.close();
            return tmpMcc;
        }
        c2.close();
    }
    String[] projection3 = { MccSidConflicts.MCC };
    Cursor c3 = resolver.query(MccSidConflicts.CONTENT_URI, projection3, MccSidConflicts.SID_CONFLICT + "=" + sid + " and (((" + MccLookup.GMT_OFFSET_LOW + "<=" + tz + ") and (" + tz + "<=" + MccLookup.GMT_OFFSET_HIGH + ") and (" + "0=" + DSTflag + ")) or ((" + MccLookup.GMT_DST_LOW + "<=" + tz + ") and (" + tz + "<=" + MccLookup.GMT_DST_HIGH + ") and (" + "1=" + DSTflag + ")))", null, null);
    if (c3 != null) {
        int c3Counter = c3.getCount();
        if (c3Counter > 0) {
            if (c3Counter > 1) {
                Log.w(LOG_TAG, "something wrong, get more results for 1 conflict SID: " + c3);
            }
            if (DBG)
                Log.d(LOG_TAG, "Query conflict sid returned the cursor " + c3);
            c3.moveToFirst();
            tmpMcc = c3.getInt(0);
            if (DBG) {
                Log.d(LOG_TAG, "MCC found in mcc_lookup_table. Return tmpMcc = " + tmpMcc);
            }
            if (!isNitzTimeZone) {
                if (DBG) {
                    Log.d(LOG_TAG, "time zone is not accurate, mcc may be " + tmpMcc);
                }
                tmpMcc = 0;
            }
            c3.close();
            return tmpMcc;
        } else {
            c3.close();
        }
    }
    String[] projection5 = { MccSidRange.MCC };
    Cursor c5 = resolver.query(MccSidRange.CONTENT_URI, projection5, MccSidRange.RANGE_LOW + "<=" + sid + " and " + MccSidRange.RANGE_HIGH + ">=" + sid, null, null);
    if (c5 != null) {
        if (c5.getCount() > 0) {
            if (DBG)
                Log.d(LOG_TAG, "Query Range returned the cursor " + c5);
            c5.moveToFirst();
            tmpMcc = c5.getInt(0);
            if (DBG)
                Log.d(LOG_TAG, "SID found in mcc_sid_range. Return tmpMcc = " + tmpMcc);
            c5.close();
            return tmpMcc;
        }
        c5.close();
    }
    if (DBG)
        Log.d(LOG_TAG, "SID NOT found in mcc_sid_range.");
    if (DBG)
        Log.d(LOG_TAG, "Exit getMccByOtherFactors. Return tmpMcc =  " + tmpMcc);
    return tmpMcc;
}