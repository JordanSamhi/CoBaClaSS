public static List<WifiP2pServiceResponse> newInstance(String srcAddr, byte[] tlvsBin){
    List<WifiP2pServiceResponse> respList = new ArrayList<WifiP2pServiceResponse>();
    WifiP2pDevice dev = new WifiP2pDevice();
    dev.deviceAddress = srcAddr;
    if (tlvsBin == null) {
        return null;
    }
    DataInputStream dis = new DataInputStream(new ByteArrayInputStream(tlvsBin));
    try {
        while (dis.available() > 0) {
            int length = (dis.readUnsignedByte() + (dis.readUnsignedByte() << 8)) - 3;
            int type = dis.readUnsignedByte();
            int transId = dis.readUnsignedByte();
            int status = dis.readUnsignedByte();
            if (length < 0) {
                return null;
            }
            if (length == 0) {
                if (status == Status.SUCCESS) {
                    respList.add(new WifiP2pServiceResponse(type, status, transId, dev, null));
                }
                continue;
            }
            if (length > MAX_BUF_SIZE) {
                dis.skip(length);
                continue;
            }
            byte[] data = new byte[length];
            dis.readFully(data);
            WifiP2pServiceResponse resp;
            if (type == WifiP2pServiceInfo.SERVICE_TYPE_BONJOUR) {
                resp = WifiP2pDnsSdServiceResponse.newInstance(status, transId, dev, data);
            } else if (type == WifiP2pServiceInfo.SERVICE_TYPE_UPNP) {
                resp = WifiP2pUpnpServiceResponse.newInstance(status, transId, dev, data);
            } else {
                resp = new WifiP2pServiceResponse(type, status, transId, dev, data);
            }
            if (resp != null && resp.getStatus() == Status.SUCCESS) {
                respList.add(resp);
            }
        }
        return respList;
    } catch (IOException e) {
        e.printStackTrace();
    }
    if (respList.size() > 0) {
        return respList;
    }
    return null;
}