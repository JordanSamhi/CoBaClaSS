public boolean updateMediaCapabilities(ImsCall imsCall){
    if (imsCall == null) {
        return false;
    }
    boolean changed = false;
    try {
        ImsCallProfile negotiatedCallProfile = imsCall.getCallProfile();
        if (negotiatedCallProfile != null) {
            int oldVideoState = getVideoState();
            int newVideoState = ImsCallProfile.getVideoStateFromImsCallProfile(negotiatedCallProfile);
            if (oldVideoState != newVideoState) {
                if (VideoProfile.isPaused(oldVideoState) && !VideoProfile.isPaused(newVideoState)) {
                    mShouldIgnoreVideoStateChanges = false;
                }
                if (!mShouldIgnoreVideoStateChanges) {
                    updateVideoState(newVideoState);
                    changed = true;
                } else {
                    Rlog.d(LOG_TAG, "updateMediaCapabilities - ignoring video state change " + "due to paused state.");
                }
                if (!VideoProfile.isPaused(oldVideoState) && VideoProfile.isPaused(newVideoState)) {
                    mShouldIgnoreVideoStateChanges = true;
                }
            }
            if (negotiatedCallProfile.mMediaProfile != null) {
                mIsRttEnabledForCall = negotiatedCallProfile.mMediaProfile.isRttCall();
                if (mIsRttEnabledForCall && mRttTextHandler == null) {
                    Rlog.d(LOG_TAG, "updateMediaCapabilities -- turning RTT on, profile=" + negotiatedCallProfile);
                    startRttTextProcessing();
                    onRttInitiated();
                    changed = true;
                    mOwner.getPhone().getVoiceCallSessionStats().onRttStarted(this);
                } else if (!mIsRttEnabledForCall && mRttTextHandler != null) {
                    Rlog.d(LOG_TAG, "updateMediaCapabilities -- turning RTT off, profile=" + negotiatedCallProfile);
                    mRttTextHandler.tearDown();
                    mRttTextHandler = null;
                    mRttTextStream = null;
                    onRttTerminated();
                    changed = true;
                }
            }
        }
        int capabilities = getConnectionCapabilities();
        if (mOwner.isCarrierDowngradeOfVtCallSupported()) {
            capabilities = addCapability(capabilities, Connection.Capability.SUPPORTS_DOWNGRADE_TO_VOICE_REMOTE | Capability.SUPPORTS_DOWNGRADE_TO_VOICE_LOCAL);
        } else {
            capabilities = removeCapability(capabilities, Connection.Capability.SUPPORTS_DOWNGRADE_TO_VOICE_REMOTE | Capability.SUPPORTS_DOWNGRADE_TO_VOICE_LOCAL);
        }
        ImsCallProfile localCallProfile = imsCall.getLocalCallProfile();
        Rlog.v(LOG_TAG, "update localCallProfile=" + localCallProfile);
        if (localCallProfile != null) {
            capabilities = applyLocalCallCapabilities(localCallProfile, capabilities);
        }
        ImsCallProfile remoteCallProfile = imsCall.getRemoteCallProfile();
        Rlog.v(LOG_TAG, "update remoteCallProfile=" + remoteCallProfile);
        if (remoteCallProfile != null) {
            capabilities = applyRemoteCallCapabilities(remoteCallProfile, capabilities);
        }
        if (getConnectionCapabilities() != capabilities) {
            setConnectionCapabilities(capabilities);
            changed = true;
        }
        if (!mOwner.isViLteDataMetered()) {
            Rlog.v(LOG_TAG, "data is not metered");
        } else {
            if (mImsVideoCallProviderWrapper != null) {
                mImsVideoCallProviderWrapper.setIsVideoEnabled(hasCapabilities(Connection.Capability.SUPPORTS_VT_LOCAL_BIDIRECTIONAL));
            }
        }
        if (localCallProfile != null && localCallProfile.mMediaProfile.mAudioQuality != mAudioCodec) {
            mAudioCodec = localCallProfile.mMediaProfile.mAudioQuality;
            mMetrics.writeAudioCodecIms(mOwner.mPhone.getPhoneId(), imsCall.getCallSession());
            mOwner.getPhone().getVoiceCallSessionStats().onAudioCodecChanged(this, mAudioCodec);
        }
        int newAudioQuality = getAudioQualityFromCallProfile(localCallProfile, remoteCallProfile);
        if (getAudioQuality() != newAudioQuality) {
            setAudioQuality(newAudioQuality);
            changed = true;
        }
    } catch (ImsException e) {
    }
    return changed;
}