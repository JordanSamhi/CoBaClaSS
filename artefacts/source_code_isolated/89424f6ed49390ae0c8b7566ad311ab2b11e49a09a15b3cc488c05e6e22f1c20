public static ParseResult<ParsingPackage> parseDefault(ParseInput input, File file, @PackageParser.ParseFlags int parseFlags, boolean collectCertificates){
    ParseResult<ParsingPackage> result;
    ParsingPackageUtils parser = new ParsingPackageUtils(false, null, null, new Callback() {

        @Override
        public boolean hasFeature(String feature) {
            return false;
        }

        @Override
        public ParsingPackage startParsingPackage(@NonNull String packageName, @NonNull String baseCodePath, @NonNull String codePath, @NonNull TypedArray manifestArray, boolean isCoreApp) {
            return new ParsingPackageImpl(packageName, baseCodePath, codePath, manifestArray);
        }
    });
    try {
        result = parser.parsePackage(input, file, parseFlags);
        if (result.isError()) {
            return result;
        }
    } catch (PackageParser.PackageParserException e) {
        return input.error(PackageManager.INSTALL_PARSE_FAILED_UNEXPECTED_EXCEPTION, "Error parsing package", e);
    }
    try {
        ParsingPackage pkg = result.getResult();
        if (collectCertificates) {
            pkg.setSigningDetails(ParsingPackageUtils.getSigningDetails(pkg, false));
        }
        return input.success(pkg);
    } catch (PackageParser.PackageParserException e) {
        return input.error(PackageManager.INSTALL_PARSE_FAILED_UNEXPECTED_EXCEPTION, "Error collecting package certificates", e);
    }
}