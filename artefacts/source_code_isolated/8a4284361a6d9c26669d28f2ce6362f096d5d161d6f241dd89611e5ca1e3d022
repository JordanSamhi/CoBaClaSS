public void setCameraDisabled(ComponentName who, boolean disabled, boolean parent){
    if (!mHasFeature) {
        return;
    }
    Objects.requireNonNull(who, "ComponentName is null");
    int userHandle = mInjector.userHandleGetCallingUserId();
    synchronized (getLockObject()) {
        ActiveAdmin ap = getActiveAdminForCallerLocked(who, DeviceAdminInfo.USES_POLICY_DISABLE_CAMERA, parent);
        if (parent) {
            enforceProfileOwnerOfOrganizationOwnedDevice(ap);
        }
        if (ap.disableCamera != disabled) {
            ap.disableCamera = disabled;
            saveSettingsLocked(userHandle);
        }
    }
    pushUserRestrictions(userHandle);
    final int affectedUserId = parent ? getProfileParentId(userHandle) : userHandle;
    if (SecurityLog.isLoggingEnabled()) {
        SecurityLog.writeEvent(SecurityLog.TAG_CAMERA_POLICY_SET, who.getPackageName(), userHandle, affectedUserId, disabled ? 1 : 0);
    }
    DevicePolicyEventLogger.createEvent(DevicePolicyEnums.SET_CAMERA_DISABLED).setAdmin(who).setBoolean(disabled).setStrings(parent ? CALLED_FROM_PARENT : NOT_CALLED_FROM_PARENT).write();
}