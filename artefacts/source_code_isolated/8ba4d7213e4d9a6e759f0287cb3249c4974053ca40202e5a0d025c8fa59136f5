public ArrayList<RecommendedStreamConfigurationMap> getRecommendedStreamConfigurations(){
    RecommendedStreamConfiguration[] configurations = getBase(CameraCharacteristics.SCALER_AVAILABLE_RECOMMENDED_STREAM_CONFIGURATIONS);
    RecommendedStreamConfiguration[] depthConfigurations = getBase(CameraCharacteristics.DEPTH_AVAILABLE_RECOMMENDED_DEPTH_STREAM_CONFIGURATIONS);
    if ((configurations == null) && (depthConfigurations == null)) {
        return null;
    }
    StreamConfigurationMap fullMap = getStreamConfigurationMap();
    ArrayList<RecommendedStreamConfigurationMap> recommendedConfigurations = new ArrayList<RecommendedStreamConfigurationMap>();
    ArrayList<ArrayList<StreamConfiguration>> streamConfigList = new ArrayList<ArrayList<StreamConfiguration>>();
    ArrayList<ArrayList<StreamConfigurationDuration>> streamDurationList = new ArrayList<ArrayList<StreamConfigurationDuration>>();
    ArrayList<ArrayList<StreamConfigurationDuration>> streamStallList = new ArrayList<ArrayList<StreamConfigurationDuration>>();
    boolean[] supportsPrivate = new boolean[RecommendedStreamConfigurationMap.MAX_USECASE_COUNT];
    try {
        if (configurations != null) {
            parseRecommendedConfigurations(configurations, fullMap, false, streamConfigList, streamDurationList, streamStallList, supportsPrivate);
        }
    } catch (IllegalArgumentException e) {
        Log.e(TAG, "Failed parsing the recommended stream configurations!");
        return null;
    }
    ArrayList<ArrayList<StreamConfiguration>> depthStreamConfigList = new ArrayList<ArrayList<StreamConfiguration>>();
    ArrayList<ArrayList<StreamConfigurationDuration>> depthStreamDurationList = new ArrayList<ArrayList<StreamConfigurationDuration>>();
    ArrayList<ArrayList<StreamConfigurationDuration>> depthStreamStallList = new ArrayList<ArrayList<StreamConfigurationDuration>>();
    if (depthConfigurations != null) {
        try {
            parseRecommendedConfigurations(depthConfigurations, fullMap, true, depthStreamConfigList, depthStreamDurationList, depthStreamStallList, null);
        } catch (IllegalArgumentException e) {
            Log.e(TAG, "Failed parsing the recommended depth stream configurations!");
            return null;
        }
    }
    ReprocessFormatsMap inputOutputFormatsMap = getBase(CameraCharacteristics.SCALER_AVAILABLE_RECOMMENDED_INPUT_OUTPUT_FORMATS_MAP);
    HighSpeedVideoConfiguration[] highSpeedVideoConfigurations = getBase(CameraCharacteristics.CONTROL_AVAILABLE_HIGH_SPEED_VIDEO_CONFIGURATIONS);
    boolean listHighResolution = isBurstSupported();
    recommendedConfigurations.ensureCapacity(RecommendedStreamConfigurationMap.MAX_USECASE_COUNT);
    for (int i = 0; i < RecommendedStreamConfigurationMap.MAX_USECASE_COUNT; i++) {
        StreamConfigurationData scData = new StreamConfigurationData();
        if (configurations != null) {
            initializeStreamConfigurationData(streamConfigList.get(i), streamDurationList.get(i), streamStallList.get(i), scData);
        }
        StreamConfigurationData depthScData = new StreamConfigurationData();
        if (depthConfigurations != null) {
            initializeStreamConfigurationData(depthStreamConfigList.get(i), depthStreamDurationList.get(i), depthStreamStallList.get(i), depthScData);
        }
        if ((scData.streamConfigurationArray == null || scData.streamConfigurationArray.length == 0) && (depthScData.streamConfigurationArray == null || depthScData.streamConfigurationArray.length == 0)) {
            recommendedConfigurations.add(null);
            continue;
        }
        StreamConfigurationMap map = null;
        switch(i) {
            case RecommendedStreamConfigurationMap.USECASE_PREVIEW:
            case RecommendedStreamConfigurationMap.USECASE_RAW:
            case RecommendedStreamConfigurationMap.USECASE_LOW_LATENCY_SNAPSHOT:
            case RecommendedStreamConfigurationMap.USECASE_VIDEO_SNAPSHOT:
                map = new StreamConfigurationMap(scData.streamConfigurationArray, scData.minDurationArray, scData.stallDurationArray, null, null, null, null, null, null, null, null, null, null, null, listHighResolution, supportsPrivate[i]);
                break;
            case RecommendedStreamConfigurationMap.USECASE_RECORD:
                map = new StreamConfigurationMap(scData.streamConfigurationArray, scData.minDurationArray, scData.stallDurationArray, null, null, null, null, null, null, null, null, null, highSpeedVideoConfigurations, null, listHighResolution, supportsPrivate[i]);
                break;
            case RecommendedStreamConfigurationMap.USECASE_ZSL:
                map = new StreamConfigurationMap(scData.streamConfigurationArray, scData.minDurationArray, scData.stallDurationArray, depthScData.streamConfigurationArray, depthScData.minDurationArray, depthScData.stallDurationArray, null, null, null, null, null, null, null, inputOutputFormatsMap, listHighResolution, supportsPrivate[i]);
                break;
            default:
                map = new StreamConfigurationMap(scData.streamConfigurationArray, scData.minDurationArray, scData.stallDurationArray, depthScData.streamConfigurationArray, depthScData.minDurationArray, depthScData.stallDurationArray, null, null, null, null, null, null, null, null, listHighResolution, supportsPrivate[i]);
        }
        recommendedConfigurations.add(new RecommendedStreamConfigurationMap(map, i, supportsPrivate[i]));
    }
    return recommendedConfigurations;
}