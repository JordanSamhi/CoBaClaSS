public boolean fling(int velocityX, int velocityY){
    if (mLayout == null) {
        Log.e(TAG, "Cannot fling without a LayoutManager set. " + "Call setLayoutManager with a non-null argument.");
        return false;
    }
    if (mLayoutFrozen) {
        return false;
    }
    final boolean canScrollHorizontal = mLayout.canScrollHorizontally();
    final boolean canScrollVertical = mLayout.canScrollVertically();
    if (!canScrollHorizontal || Math.abs(velocityX) < mMinFlingVelocity) {
        velocityX = 0;
    }
    if (!canScrollVertical || Math.abs(velocityY) < mMinFlingVelocity) {
        velocityY = 0;
    }
    if (velocityX == 0 && velocityY == 0) {
        return false;
    }
    if (!dispatchNestedPreFling(velocityX, velocityY)) {
        final View firstChild = mLayout.getChildAt(0);
        final View lastChild = mLayout.getChildAt(mLayout.getChildCount() - 1);
        boolean consumed = false;
        if (velocityY < 0) {
            consumed = getChildAdapterPosition(firstChild) > 0 || firstChild.getTop() < getPaddingTop();
        }
        if (velocityY > 0) {
            consumed = getChildAdapterPosition(lastChild) < mAdapter.getItemCount() - 1 || lastChild.getBottom() > getHeight() - getPaddingBottom();
        }
        dispatchNestedFling(velocityX, velocityY, consumed);
        if (mOnFlingListener != null && mOnFlingListener.onFling(velocityX, velocityY)) {
            return true;
        }
        final boolean canScroll = canScrollHorizontal || canScrollVertical;
        if (canScroll) {
            velocityX = Math.max(-mMaxFlingVelocity, Math.min(velocityX, mMaxFlingVelocity));
            velocityY = Math.max(-mMaxFlingVelocity, Math.min(velocityY, mMaxFlingVelocity));
            mViewFlinger.fling(velocityX, velocityY);
            return true;
        }
    }
    return false;
}