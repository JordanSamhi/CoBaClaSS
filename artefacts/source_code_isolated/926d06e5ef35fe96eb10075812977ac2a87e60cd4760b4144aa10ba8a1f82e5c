public Bundle getDocumentMetadata(String documentId) throws FileNotFoundException{
    File file = getFileForDocId(documentId);
    if (!file.exists()) {
        throw new FileNotFoundException("Can't find the file for documentId: " + documentId);
    }
    final String mimeType = getDocumentType(documentId);
    if (Document.MIME_TYPE_DIR.equals(mimeType)) {
        final Int64Ref treeCount = new Int64Ref(0);
        final Int64Ref treeSize = new Int64Ref(0);
        try {
            final Path path = FileSystems.getDefault().getPath(file.getAbsolutePath());
            Files.walkFileTree(path, new FileVisitor<Path>() {

                @Override
                public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) {
                    return FileVisitResult.CONTINUE;
                }

                @Override
                public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) {
                    treeCount.value += 1;
                    treeSize.value += attrs.size();
                    return FileVisitResult.CONTINUE;
                }

                @Override
                public FileVisitResult visitFileFailed(Path file, IOException exc) {
                    return FileVisitResult.CONTINUE;
                }

                @Override
                public FileVisitResult postVisitDirectory(Path dir, IOException exc) {
                    return FileVisitResult.CONTINUE;
                }
            });
        } catch (IOException e) {
            Log.e(TAG, "An error occurred retrieving the metadata", e);
            return null;
        }
        final Bundle res = new Bundle();
        res.putLong(DocumentsContract.METADATA_TREE_COUNT, treeCount.value);
        res.putLong(DocumentsContract.METADATA_TREE_SIZE, treeSize.value);
        return res;
    }
    if (!file.isFile()) {
        Log.w(TAG, "Can't stream non-regular file. Returning empty metadata.");
        return null;
    }
    if (!file.canRead()) {
        Log.w(TAG, "Can't stream non-readable file. Returning empty metadata.");
        return null;
    }
    if (!MetadataReader.isSupportedMimeType(mimeType)) {
        Log.w(TAG, "Unsupported type " + mimeType + ". Returning empty metadata.");
        return null;
    }
    InputStream stream = null;
    try {
        Bundle metadata = new Bundle();
        stream = new FileInputStream(file.getAbsolutePath());
        MetadataReader.getMetadata(metadata, stream, mimeType, null);
        return metadata;
    } catch (IOException e) {
        Log.e(TAG, "An error occurred retrieving the metadata", e);
        return null;
    } finally {
        IoUtils.closeQuietly(stream);
    }
}