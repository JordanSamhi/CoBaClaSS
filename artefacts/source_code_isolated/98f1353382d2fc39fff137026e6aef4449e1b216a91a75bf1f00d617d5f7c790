public void setOnOpNotedCallback(@Nullable @CallbackExecutor Executor asyncExecutor, @Nullable OnOpNotedCallback callback){
    Preconditions.checkState((callback == null) == (asyncExecutor == null));
    synchronized (sLock) {
        if (callback == null) {
            Preconditions.checkState(sOnOpNotedCallback != null, "No callback is currently registered");
            try {
                mService.stopWatchingAsyncNoted(mContext.getPackageName(), sOnOpNotedCallback.mAsyncCb);
            } catch (RemoteException e) {
                e.rethrowFromSystemServer();
            }
            sOnOpNotedCallback = null;
        } else {
            Preconditions.checkState(sOnOpNotedCallback == null, "Another callback is already registered");
            callback.mAsyncExecutor = asyncExecutor;
            sOnOpNotedCallback = callback;
            List<AsyncNotedAppOp> missedAsyncOps = null;
            try {
                mService.startWatchingAsyncNoted(mContext.getPackageName(), sOnOpNotedCallback.mAsyncCb);
                missedAsyncOps = mService.extractAsyncOps(mContext.getPackageName());
            } catch (RemoteException e) {
                e.rethrowFromSystemServer();
            }
            if (missedAsyncOps != null) {
                int numMissedAsyncOps = missedAsyncOps.size();
                for (int i = 0; i < numMissedAsyncOps; i++) {
                    final AsyncNotedAppOp asyncNotedAppOp = missedAsyncOps.get(i);
                    if (sOnOpNotedCallback != null) {
                        sOnOpNotedCallback.getAsyncNotedExecutor().execute(() -> sOnOpNotedCallback.onAsyncNoted(asyncNotedAppOp));
                    }
                }
            }
            synchronized (this) {
                int numMissedSyncOps = sUnforwardedOps.size();
                for (int i = 0; i < numMissedSyncOps; i++) {
                    final AsyncNotedAppOp syncNotedAppOp = sUnforwardedOps.get(i);
                    if (sOnOpNotedCallback != null) {
                        sOnOpNotedCallback.getAsyncNotedExecutor().execute(() -> sOnOpNotedCallback.onAsyncNoted(syncNotedAppOp));
                    }
                }
                sUnforwardedOps.clear();
            }
        }
    }
}