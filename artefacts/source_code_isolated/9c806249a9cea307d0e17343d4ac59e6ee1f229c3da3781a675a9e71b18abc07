public static Collector<T, ?, Optional<T>> reducing(BinaryOperator<T> op){
    class OptionalBox implements Consumer<T> {

        T value = null;

        boolean present = false;

        @Override
        public void accept(T t) {
            if (present) {
                value = op.apply(value, t);
            } else {
                value = t;
                present = true;
            }
        }
    }
    return new CollectorImpl<T, OptionalBox, Optional<T>>(OptionalBox::new, OptionalBox::accept, (a, b) -> {
        if (b.present)
            a.accept(b.value);
        return a;
    }, a -> Optional.ofNullable(a.value), CH_NOID);
}