public void startCountdown(long ms, long interval, PendingIntent startIntent, PendingIntent stopIntent){
    mIsStarting = true;
    mStopIntent = stopIntent;
    mCountDownTimer = new CountDownTimer(ms, interval) {

        @Override
        public void onTick(long millisUntilFinished) {
            for (RecordingStateChangeCallback cb : mListeners) {
                cb.onCountdown(millisUntilFinished);
            }
        }

        @Override
        public void onFinish() {
            mIsStarting = false;
            mIsRecording = true;
            for (RecordingStateChangeCallback cb : mListeners) {
                cb.onCountdownEnd();
            }
            try {
                startIntent.send();
                IntentFilter userFilter = new IntentFilter(Intent.ACTION_USER_SWITCHED);
                mBroadcastDispatcher.registerReceiver(mUserChangeReceiver, userFilter, null, UserHandle.ALL);
                Log.d(TAG, "sent start intent");
            } catch (PendingIntent.CanceledException e) {
                Log.e(TAG, "Pending intent was cancelled: " + e.getMessage());
            }
        }
    };
    mCountDownTimer.start();
}