public static boolean deepEquals(Object lft, Object rgt){
    if (lft == rgt) {
        return true;
    }
    if (lft == null || rgt == null) {
        return false;
    }
    Class<?> lftClazz = lft.getClass();
    Class<?> rgtClazz = rgt.getClass();
    if (lftClazz != rgtClazz) {
        return false;
    }
    if (lftClazz.isArray()) {
        Class<?> lftElementType = lftClazz.getComponentType();
        if (lftElementType != rgtClazz.getComponentType()) {
            return false;
        }
        if (lftElementType.isPrimitive()) {
            return Objects.deepEquals(lft, rgt);
        }
        Object[] lftArray = (Object[]) lft;
        Object[] rgtArray = (Object[]) rgt;
        return (lftArray.length == rgtArray.length) && IntStream.range(0, lftArray.length).allMatch(i -> deepEquals(lftArray[i], rgtArray[i]));
    }
    if (lft instanceof List<?>) {
        List<Object> lftList = (List<Object>) lft;
        List<Object> rgtList = (List<Object>) rgt;
        if (lftList.size() != rgtList.size()) {
            return false;
        }
        Iterator<Object> lftIter = lftList.iterator();
        return rgtList.stream().allMatch(rgtElement -> deepEquals(lftIter.next(), rgtElement));
    }
    throwErrorIfUnsupportedType(lft);
    return lft.equals(rgt);
}