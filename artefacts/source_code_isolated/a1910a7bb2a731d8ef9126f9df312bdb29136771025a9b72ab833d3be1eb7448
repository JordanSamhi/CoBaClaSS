public static boolean verifySignatures(PackageSetting pkgSetting, PackageSetting disabledPkgSetting, PackageParser.SigningDetails parsedSignatures, boolean compareCompat, boolean compareRecover) throws PackageManagerException{
    final String packageName = pkgSetting.name;
    boolean compatMatch = false;
    if (pkgSetting.signatures.mSigningDetails.signatures != null) {
        boolean match = parsedSignatures.checkCapability(pkgSetting.signatures.mSigningDetails, PackageParser.SigningDetails.CertCapabilities.INSTALLED_DATA) || pkgSetting.signatures.mSigningDetails.checkCapability(parsedSignatures, PackageParser.SigningDetails.CertCapabilities.ROLLBACK);
        if (!match && compareCompat) {
            match = matchSignaturesCompat(packageName, pkgSetting.signatures, parsedSignatures);
            compatMatch = match;
        }
        if (!match && compareRecover) {
            match = matchSignaturesRecover(packageName, pkgSetting.signatures.mSigningDetails, parsedSignatures, PackageParser.SigningDetails.CertCapabilities.INSTALLED_DATA) || matchSignaturesRecover(packageName, parsedSignatures, pkgSetting.signatures.mSigningDetails, PackageParser.SigningDetails.CertCapabilities.ROLLBACK);
        }
        if (!match && isApkVerificationForced(disabledPkgSetting)) {
            match = matchSignatureInSystem(pkgSetting, disabledPkgSetting);
        }
        if (!match) {
            throw new PackageManagerException(INSTALL_FAILED_UPDATE_INCOMPATIBLE, "Package " + packageName + " signatures do not match previously installed version; ignoring!");
        }
    }
    if (pkgSetting.getSharedUser() != null && pkgSetting.getSharedUser().signatures.mSigningDetails != PackageParser.SigningDetails.UNKNOWN) {
        boolean match = parsedSignatures.checkCapability(pkgSetting.getSharedUser().signatures.mSigningDetails, PackageParser.SigningDetails.CertCapabilities.SHARED_USER_ID) || pkgSetting.getSharedUser().signatures.mSigningDetails.checkCapability(parsedSignatures, PackageParser.SigningDetails.CertCapabilities.SHARED_USER_ID);
        if (!match && pkgSetting.getSharedUser().packages.size() == 1 && pkgSetting.getSharedUser().packages.valueAt(0).name.equals(packageName)) {
            match = true;
        }
        if (!match && compareCompat) {
            match = matchSignaturesCompat(packageName, pkgSetting.getSharedUser().signatures, parsedSignatures);
        }
        if (!match && compareRecover) {
            match = matchSignaturesRecover(packageName, pkgSetting.getSharedUser().signatures.mSigningDetails, parsedSignatures, PackageParser.SigningDetails.CertCapabilities.SHARED_USER_ID) || matchSignaturesRecover(packageName, parsedSignatures, pkgSetting.getSharedUser().signatures.mSigningDetails, PackageParser.SigningDetails.CertCapabilities.SHARED_USER_ID);
            compatMatch |= match;
        }
        if (!match) {
            throw new PackageManagerException(INSTALL_FAILED_SHARED_USER_INCOMPATIBLE, "Package " + packageName + " has no signatures that match those in shared user " + pkgSetting.getSharedUser().name + "; ignoring!");
        }
        if (parsedSignatures.hasPastSigningCertificates()) {
            for (PackageSetting shUidPkgSetting : pkgSetting.getSharedUser().packages) {
                if (packageName.equals(shUidPkgSetting.name)) {
                    continue;
                }
                PackageParser.SigningDetails shUidSigningDetails = shUidPkgSetting.getSigningDetails();
                if (parsedSignatures.hasAncestor(shUidSigningDetails)) {
                    if (!parsedSignatures.checkCapability(shUidSigningDetails, PackageParser.SigningDetails.CertCapabilities.SHARED_USER_ID)) {
                        throw new PackageManagerException(INSTALL_FAILED_SHARED_USER_INCOMPATIBLE, "Package " + packageName + " revoked the sharedUserId capability from the " + "signing key used to sign " + shUidPkgSetting.name);
                    }
                }
            }
        }
        if (!parsedSignatures.hasCommonAncestor(pkgSetting.getSharedUser().signatures.mSigningDetails)) {
            throw new PackageManagerException(INSTALL_FAILED_SHARED_USER_INCOMPATIBLE, "Package " + packageName + " has a signing lineage " + "that diverges from the lineage of the sharedUserId");
        }
    }
    return compatMatch;
}