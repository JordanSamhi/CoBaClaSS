public boolean enableAndConfigure(short transactionId, ConfigRequest configRequest, boolean notifyIdentityChange, boolean initialConfiguration, boolean isInteractive, boolean isIdle){
    if (mDbg) {
        Log.v(TAG, "enableAndConfigure: transactionId=" + transactionId + ", configRequest=" + configRequest + ", notifyIdentityChange=" + notifyIdentityChange + ", initialConfiguration=" + initialConfiguration + ", isInteractive=" + isInteractive + ", isIdle=" + isIdle);
    }
    recordTransactionId(transactionId);
    IWifiNanIface iface = mHal.getWifiNanIface();
    if (iface == null) {
        Log.e(TAG, "enableAndConfigure: null interface");
        return false;
    }
    android.hardware.wifi.V1_2.IWifiNanIface iface12 = mockableCastTo_1_2(iface);
    android.hardware.wifi.V1_4.IWifiNanIface iface14 = mockableCastTo_1_4(iface);
    NanConfigRequestSupplemental configSupplemental12 = new NanConfigRequestSupplemental();
    if (iface12 != null || iface14 != null) {
        configSupplemental12.discoveryBeaconIntervalMs = 0;
        configSupplemental12.numberOfSpatialStreamsInDiscovery = 0;
        configSupplemental12.enableDiscoveryWindowEarlyTermination = false;
        configSupplemental12.enableRanging = true;
    }
    NanBandSpecificConfig config24 = new NanBandSpecificConfig();
    config24.rssiClose = 60;
    config24.rssiMiddle = 70;
    config24.rssiCloseProximity = 60;
    config24.dwellTimeMs = (byte) 200;
    config24.scanPeriodSec = 20;
    if (configRequest.mDiscoveryWindowInterval[ConfigRequest.NAN_BAND_24GHZ] == ConfigRequest.DW_INTERVAL_NOT_INIT) {
        config24.validDiscoveryWindowIntervalVal = false;
    } else {
        config24.validDiscoveryWindowIntervalVal = true;
        config24.discoveryWindowIntervalVal = (byte) configRequest.mDiscoveryWindowInterval[ConfigRequest.NAN_BAND_24GHZ];
    }
    NanBandSpecificConfig config5 = new NanBandSpecificConfig();
    config5.rssiClose = 60;
    config5.rssiMiddle = 75;
    config5.rssiCloseProximity = 60;
    config5.dwellTimeMs = (byte) 200;
    config5.scanPeriodSec = 20;
    if (configRequest.mDiscoveryWindowInterval[ConfigRequest.NAN_BAND_5GHZ] == ConfigRequest.DW_INTERVAL_NOT_INIT) {
        config5.validDiscoveryWindowIntervalVal = false;
    } else {
        config5.validDiscoveryWindowIntervalVal = true;
        config5.discoveryWindowIntervalVal = (byte) configRequest.mDiscoveryWindowInterval[ConfigRequest.NAN_BAND_5GHZ];
    }
    NanBandSpecificConfig config6 = new NanBandSpecificConfig();
    config6.rssiClose = 60;
    config6.rssiMiddle = 75;
    config6.rssiCloseProximity = 60;
    config6.dwellTimeMs = (byte) 200;
    config6.scanPeriodSec = 20;
    if (configRequest.mDiscoveryWindowInterval[ConfigRequest.NAN_BAND_6GHZ] == ConfigRequest.DW_INTERVAL_NOT_INIT) {
        config6.validDiscoveryWindowIntervalVal = false;
    } else {
        config6.validDiscoveryWindowIntervalVal = true;
        config6.discoveryWindowIntervalVal = (byte) configRequest.mDiscoveryWindowInterval[ConfigRequest.NAN_BAND_6GHZ];
    }
    try {
        WifiStatus status;
        if (initialConfiguration) {
            if (iface14 != null) {
                android.hardware.wifi.V1_4.NanEnableRequest req = new android.hardware.wifi.V1_4.NanEnableRequest();
                req.operateInBand[NanBandIndex.NAN_BAND_24GHZ] = true;
                req.operateInBand[NanBandIndex.NAN_BAND_5GHZ] = configRequest.mSupport5gBand;
                req.operateInBand[android.hardware.wifi.V1_4.NanBandIndex.NAN_BAND_6GHZ] = configRequest.mSupport6gBand;
                req.hopCountMax = 2;
                req.configParams.masterPref = (byte) configRequest.mMasterPreference;
                req.configParams.disableDiscoveryAddressChangeIndication = !notifyIdentityChange;
                req.configParams.disableStartedClusterIndication = !notifyIdentityChange;
                req.configParams.disableJoinedClusterIndication = !notifyIdentityChange;
                req.configParams.includePublishServiceIdsInBeacon = true;
                req.configParams.numberOfPublishServiceIdsInBeacon = 0;
                req.configParams.includeSubscribeServiceIdsInBeacon = true;
                req.configParams.numberOfSubscribeServiceIdsInBeacon = 0;
                req.configParams.rssiWindowSize = 8;
                req.configParams.macAddressRandomizationIntervalSec = mSettableParameters.get(PARAM_MAC_RANDOM_INTERVAL_SEC);
                req.configParams.bandSpecificConfig[NanBandIndex.NAN_BAND_24GHZ] = config24;
                req.configParams.bandSpecificConfig[NanBandIndex.NAN_BAND_5GHZ] = config5;
                req.configParams.bandSpecificConfig[android.hardware.wifi.V1_4.NanBandIndex.NAN_BAND_6GHZ] = config6;
                req.debugConfigs.validClusterIdVals = true;
                req.debugConfigs.clusterIdTopRangeVal = (short) configRequest.mClusterHigh;
                req.debugConfigs.clusterIdBottomRangeVal = (short) configRequest.mClusterLow;
                req.debugConfigs.validIntfAddrVal = false;
                req.debugConfigs.validOuiVal = false;
                req.debugConfigs.ouiVal = 0;
                req.debugConfigs.validRandomFactorForceVal = false;
                req.debugConfigs.randomFactorForceVal = 0;
                req.debugConfigs.validHopCountForceVal = false;
                req.debugConfigs.hopCountForceVal = 0;
                req.debugConfigs.validDiscoveryChannelVal = false;
                req.debugConfigs.discoveryChannelMhzVal[NanBandIndex.NAN_BAND_24GHZ] = 0;
                req.debugConfigs.discoveryChannelMhzVal[NanBandIndex.NAN_BAND_5GHZ] = 0;
                req.debugConfigs.discoveryChannelMhzVal[android.hardware.wifi.V1_4.NanBandIndex.NAN_BAND_6GHZ] = 0;
                req.debugConfigs.validUseBeaconsInBandVal = false;
                req.debugConfigs.useBeaconsInBandVal[NanBandIndex.NAN_BAND_24GHZ] = true;
                req.debugConfigs.useBeaconsInBandVal[NanBandIndex.NAN_BAND_5GHZ] = true;
                req.debugConfigs.useBeaconsInBandVal[android.hardware.wifi.V1_4.NanBandIndex.NAN_BAND_6GHZ] = true;
                req.debugConfigs.validUseSdfInBandVal = false;
                req.debugConfigs.useSdfInBandVal[NanBandIndex.NAN_BAND_24GHZ] = true;
                req.debugConfigs.useSdfInBandVal[NanBandIndex.NAN_BAND_5GHZ] = true;
                req.debugConfigs.useSdfInBandVal[android.hardware.wifi.V1_4.NanBandIndex.NAN_BAND_6GHZ] = true;
                updateConfigForPowerSettings14(req.configParams, configSupplemental12, isInteractive, isIdle);
                status = iface14.enableRequest_1_4(transactionId, req, configSupplemental12);
            } else {
                NanEnableRequest req = new NanEnableRequest();
                req.operateInBand[NanBandIndex.NAN_BAND_24GHZ] = true;
                req.operateInBand[NanBandIndex.NAN_BAND_5GHZ] = configRequest.mSupport5gBand;
                req.hopCountMax = 2;
                req.configParams.masterPref = (byte) configRequest.mMasterPreference;
                req.configParams.disableDiscoveryAddressChangeIndication = !notifyIdentityChange;
                req.configParams.disableStartedClusterIndication = !notifyIdentityChange;
                req.configParams.disableJoinedClusterIndication = !notifyIdentityChange;
                req.configParams.includePublishServiceIdsInBeacon = true;
                req.configParams.numberOfPublishServiceIdsInBeacon = 0;
                req.configParams.includeSubscribeServiceIdsInBeacon = true;
                req.configParams.numberOfSubscribeServiceIdsInBeacon = 0;
                req.configParams.rssiWindowSize = 8;
                req.configParams.macAddressRandomizationIntervalSec = mSettableParameters.get(PARAM_MAC_RANDOM_INTERVAL_SEC);
                req.configParams.bandSpecificConfig[NanBandIndex.NAN_BAND_24GHZ] = config24;
                req.configParams.bandSpecificConfig[NanBandIndex.NAN_BAND_5GHZ] = config5;
                req.debugConfigs.validClusterIdVals = true;
                req.debugConfigs.clusterIdTopRangeVal = (short) configRequest.mClusterHigh;
                req.debugConfigs.clusterIdBottomRangeVal = (short) configRequest.mClusterLow;
                req.debugConfigs.validIntfAddrVal = false;
                req.debugConfigs.validOuiVal = false;
                req.debugConfigs.ouiVal = 0;
                req.debugConfigs.validRandomFactorForceVal = false;
                req.debugConfigs.randomFactorForceVal = 0;
                req.debugConfigs.validHopCountForceVal = false;
                req.debugConfigs.hopCountForceVal = 0;
                req.debugConfigs.validDiscoveryChannelVal = false;
                req.debugConfigs.discoveryChannelMhzVal[NanBandIndex.NAN_BAND_24GHZ] = 0;
                req.debugConfigs.discoveryChannelMhzVal[NanBandIndex.NAN_BAND_5GHZ] = 0;
                req.debugConfigs.validUseBeaconsInBandVal = false;
                req.debugConfigs.useBeaconsInBandVal[NanBandIndex.NAN_BAND_24GHZ] = true;
                req.debugConfigs.useBeaconsInBandVal[NanBandIndex.NAN_BAND_5GHZ] = true;
                req.debugConfigs.validUseSdfInBandVal = false;
                req.debugConfigs.useSdfInBandVal[NanBandIndex.NAN_BAND_24GHZ] = true;
                req.debugConfigs.useSdfInBandVal[NanBandIndex.NAN_BAND_5GHZ] = true;
                updateConfigForPowerSettings(req.configParams, configSupplemental12, isInteractive, isIdle);
                if (iface12 != null) {
                    status = iface12.enableRequest_1_2(transactionId, req, configSupplemental12);
                } else {
                    status = iface.enableRequest(transactionId, req);
                }
            }
        } else {
            if (iface14 != null) {
                android.hardware.wifi.V1_4.NanConfigRequest req = new android.hardware.wifi.V1_4.NanConfigRequest();
                req.masterPref = (byte) configRequest.mMasterPreference;
                req.disableDiscoveryAddressChangeIndication = !notifyIdentityChange;
                req.disableStartedClusterIndication = !notifyIdentityChange;
                req.disableJoinedClusterIndication = !notifyIdentityChange;
                req.includePublishServiceIdsInBeacon = true;
                req.numberOfPublishServiceIdsInBeacon = 0;
                req.includeSubscribeServiceIdsInBeacon = true;
                req.numberOfSubscribeServiceIdsInBeacon = 0;
                req.rssiWindowSize = 8;
                req.macAddressRandomizationIntervalSec = mSettableParameters.get(PARAM_MAC_RANDOM_INTERVAL_SEC);
                req.bandSpecificConfig[NanBandIndex.NAN_BAND_24GHZ] = config24;
                req.bandSpecificConfig[NanBandIndex.NAN_BAND_5GHZ] = config5;
                req.bandSpecificConfig[android.hardware.wifi.V1_4.NanBandIndex.NAN_BAND_6GHZ] = config6;
                updateConfigForPowerSettings14(req, configSupplemental12, isInteractive, isIdle);
                status = iface14.configRequest_1_4(transactionId, req, configSupplemental12);
            } else {
                NanConfigRequest req = new NanConfigRequest();
                req.masterPref = (byte) configRequest.mMasterPreference;
                req.disableDiscoveryAddressChangeIndication = !notifyIdentityChange;
                req.disableStartedClusterIndication = !notifyIdentityChange;
                req.disableJoinedClusterIndication = !notifyIdentityChange;
                req.includePublishServiceIdsInBeacon = true;
                req.numberOfPublishServiceIdsInBeacon = 0;
                req.includeSubscribeServiceIdsInBeacon = true;
                req.numberOfSubscribeServiceIdsInBeacon = 0;
                req.rssiWindowSize = 8;
                req.macAddressRandomizationIntervalSec = mSettableParameters.get(PARAM_MAC_RANDOM_INTERVAL_SEC);
                req.bandSpecificConfig[NanBandIndex.NAN_BAND_24GHZ] = config24;
                req.bandSpecificConfig[NanBandIndex.NAN_BAND_5GHZ] = config5;
                updateConfigForPowerSettings(req, configSupplemental12, isInteractive, isIdle);
                if (iface12 != null) {
                    status = iface12.configRequest_1_2(transactionId, req, configSupplemental12);
                } else {
                    status = iface.configRequest(transactionId, req);
                }
            }
        }
        if (status.code == WifiStatusCode.SUCCESS) {
            return true;
        } else {
            Log.e(TAG, "enableAndConfigure: error: " + statusString(status));
            return false;
        }
    } catch (RemoteException e) {
        Log.e(TAG, "enableAndConfigure: exception: " + e);
        return false;
    }
}