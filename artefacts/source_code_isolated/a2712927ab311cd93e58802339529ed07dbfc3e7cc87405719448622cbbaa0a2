public void addAppUsageLimitObserver(int requestingUid, int observerId, String[] observed, long timeLimit, long timeUsed, PendingIntent callbackIntent, @UserIdInt int userId){
    if (timeLimit < getMinTimeLimit()) {
        throw new IllegalArgumentException("Time limit must be >= " + getMinTimeLimit());
    }
    synchronized (mLock) {
        UserData user = getOrCreateUserDataLocked(userId);
        ObserverAppData observerApp = getOrCreateObserverAppDataLocked(requestingUid);
        AppUsageLimitGroup group = observerApp.appUsageLimitGroups.get(observerId);
        if (group != null) {
            group.remove();
        }
        final int observerIdCount = observerApp.appUsageLimitGroups.size();
        if (observerIdCount >= getAppUsageLimitObserverPerUidLimit()) {
            throw new IllegalStateException("Too many app usage observers added by uid " + requestingUid);
        }
        group = new AppUsageLimitGroup(user, observerApp, observerId, observed, timeLimit, timeUsed, timeUsed >= timeLimit ? null : callbackIntent);
        observerApp.appUsageLimitGroups.append(observerId, group);
        if (DEBUG) {
            Slog.d(TAG, "addObserver " + observed + " for " + timeLimit);
        }
        user.addUsageGroup(group);
        noteActiveLocked(user, group, getUptimeMillis());
    }
}