public NetworkUpdateResult addOrUpdateNetwork(WifiConfiguration config, int uid, @Nullable String packageName){
    if (!doesUidBelongToCurrentUser(uid)) {
        Log.e(TAG, "UID " + uid + " not visible to the current user");
        return new NetworkUpdateResult(WifiConfiguration.INVALID_NETWORK_ID);
    }
    if (config == null) {
        Log.e(TAG, "Cannot add/update network with null config");
        return new NetworkUpdateResult(WifiConfiguration.INVALID_NETWORK_ID);
    }
    if (mPendingStoreRead) {
        Log.e(TAG, "Cannot add/update network before store is read!");
        return new NetworkUpdateResult(WifiConfiguration.INVALID_NETWORK_ID);
    }
    WifiConfiguration existingConfig = getInternalConfiguredNetwork(config);
    if (!config.isEphemeral()) {
        if (existingConfig != null && existingConfig.isEphemeral()) {
            removeNetwork(existingConfig.networkId, existingConfig.creatorUid, config.creatorName);
        }
    }
    NetworkUpdateResult result = addOrUpdateNetworkInternal(config, uid, packageName);
    if (!result.isSuccess()) {
        Log.e(TAG, "Failed to add/update network " + config.getPrintableSsid());
        return result;
    }
    WifiConfiguration newConfig = getInternalConfiguredNetwork(result.getNetworkId());
    sendConfiguredNetworkChangedBroadcast(result.isNewNetwork() ? WifiManager.CHANGE_REASON_ADDED : WifiManager.CHANGE_REASON_CONFIG_CHANGE);
    if (!config.ephemeral && !config.isPasspoint()) {
        saveToStore(true);
    }
    for (OnNetworkUpdateListener listener : mListeners) {
        if (result.isNewNetwork()) {
            listener.onNetworkAdded(createExternalWifiConfiguration(newConfig, true, Process.WIFI_UID));
        } else {
            listener.onNetworkUpdated(createExternalWifiConfiguration(newConfig, true, Process.WIFI_UID), createExternalWifiConfiguration(existingConfig, true, Process.WIFI_UID));
        }
    }
    return result;
}