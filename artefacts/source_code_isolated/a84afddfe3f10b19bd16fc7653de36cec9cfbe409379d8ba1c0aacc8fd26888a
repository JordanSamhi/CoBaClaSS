public AudioRecord build() throws UnsupportedOperationException{
    if (mAudioPlaybackCaptureConfiguration != null) {
        return buildAudioPlaybackCaptureRecord();
    }
    if (mFormat == null) {
        mFormat = new AudioFormat.Builder().setEncoding(AudioFormat.ENCODING_PCM_16BIT).setChannelMask(AudioFormat.CHANNEL_IN_MONO).build();
    } else {
        if (mFormat.getEncoding() == AudioFormat.ENCODING_INVALID) {
            mFormat = new AudioFormat.Builder(mFormat).setEncoding(AudioFormat.ENCODING_PCM_16BIT).build();
        }
        if (mFormat.getChannelMask() == AudioFormat.CHANNEL_INVALID && mFormat.getChannelIndexMask() == AudioFormat.CHANNEL_INVALID) {
            mFormat = new AudioFormat.Builder(mFormat).setChannelMask(AudioFormat.CHANNEL_IN_MONO).build();
        }
    }
    if (mAttributes == null) {
        mAttributes = new AudioAttributes.Builder().setInternalCapturePreset(MediaRecorder.AudioSource.DEFAULT).build();
    }
    if (mPrivacySensitive != PRIVACY_SENSITIVE_DEFAULT) {
        int source = mAttributes.getCapturePreset();
        if (source == MediaRecorder.AudioSource.REMOTE_SUBMIX || source == MediaRecorder.AudioSource.RADIO_TUNER || source == MediaRecorder.AudioSource.VOICE_DOWNLINK || source == MediaRecorder.AudioSource.VOICE_UPLINK || source == MediaRecorder.AudioSource.VOICE_CALL || source == MediaRecorder.AudioSource.ECHO_REFERENCE) {
            throw new UnsupportedOperationException("Cannot request private capture with source: " + source);
        }
        mAttributes = new AudioAttributes.Builder(mAttributes).setInternalCapturePreset(source).setPrivacySensitive(mPrivacySensitive == PRIVACY_SENSITIVE_ENABLED).build();
    }
    try {
        if (mBufferSizeInBytes == 0) {
            mBufferSizeInBytes = mFormat.getChannelCount() * mFormat.getBytesPerSample(mFormat.getEncoding());
        }
        final AudioRecord record = new AudioRecord(mAttributes, mFormat, mBufferSizeInBytes, mSessionId);
        if (record.getState() == STATE_UNINITIALIZED) {
            throw new UnsupportedOperationException("Cannot create AudioRecord");
        }
        return record;
    } catch (IllegalArgumentException e) {
        throw new UnsupportedOperationException(e.getMessage());
    }
}