public List<ChooserTarget> convertToChooserTarget(@NonNull List<ShortcutManager.ShareShortcutInfo> matchingShortcuts, @NonNull List<ShortcutManager.ShareShortcutInfo> allShortcuts, @Nullable List<AppTarget> allAppTargets, @ShareTargetType int shortcutType){
    List<Integer> scoreList = new ArrayList<>();
    if (shortcutType == TARGET_TYPE_SHORTCUTS_FROM_SHORTCUT_MANAGER) {
        for (int i = 0; i < matchingShortcuts.size(); i++) {
            int shortcutRank = matchingShortcuts.get(i).getShortcutInfo().getRank();
            if (!scoreList.contains(shortcutRank)) {
                scoreList.add(shortcutRank);
            }
        }
        Collections.sort(scoreList);
    }
    List<ChooserTarget> chooserTargetList = new ArrayList<>(matchingShortcuts.size());
    for (int i = 0; i < matchingShortcuts.size(); i++) {
        ShortcutInfo shortcutInfo = matchingShortcuts.get(i).getShortcutInfo();
        int indexInAllShortcuts = allShortcuts.indexOf(matchingShortcuts.get(i));
        float score;
        if (shortcutType == TARGET_TYPE_SHORTCUTS_FROM_PREDICTION_SERVICE) {
            score = Math.max(1.0f - (0.01f * indexInAllShortcuts), 0.0f);
        } else {
            int rankIndex = scoreList.indexOf(shortcutInfo.getRank());
            score = Math.max(1.0f - (0.01f * rankIndex), 0.0f);
        }
        Bundle extras = new Bundle();
        extras.putString(Intent.EXTRA_SHORTCUT_ID, shortcutInfo.getId());
        ChooserTarget chooserTarget = new ChooserTarget(shortcutInfo.getLabel(), null, score, matchingShortcuts.get(i).getTargetComponent().clone(), extras);
        chooserTargetList.add(chooserTarget);
        if (mDirectShareAppTargetCache != null && allAppTargets != null) {
            mDirectShareAppTargetCache.put(chooserTarget, allAppTargets.get(indexInAllShortcuts));
        }
        if (mDirectShareShortcutInfoCache != null) {
            mDirectShareShortcutInfoCache.put(chooserTarget, shortcutInfo);
        }
    }
    Comparator<ChooserTarget> byScore = (ChooserTarget a, ChooserTarget b) -> -Float.compare(a.getScore(), b.getScore());
    Collections.sort(chooserTargetList, byScore);
    return chooserTargetList;
}