public boolean queue(@Nullable ByteBuffer buffer){
    Preconditions.checkState(mNativeContext != 0, "request is not initialized");
    Preconditions.checkState(!mIsUsingNewQueue, "this request is currently queued");
    boolean isSend = (mEndpoint.getDirection() == UsbConstants.USB_DIR_OUT);
    boolean wasQueued;
    synchronized (mLock) {
        mBuffer = buffer;
        if (buffer == null) {
            mIsUsingNewQueue = true;
            wasQueued = native_queue(null, 0, 0);
        } else {
            if (mConnection.getContext().getApplicationInfo().targetSdkVersion < Build.VERSION_CODES.P) {
                Preconditions.checkArgumentInRange(buffer.remaining(), 0, MAX_USBFS_BUFFER_SIZE, "number of remaining bytes");
            }
            Preconditions.checkArgument(!(buffer.isReadOnly() && !isSend), "buffer can not be " + "read-only when receiving data");
            if (!buffer.isDirect()) {
                mTempBuffer = ByteBuffer.allocateDirect(mBuffer.remaining());
                if (isSend) {
                    mBuffer.mark();
                    mTempBuffer.put(mBuffer);
                    mTempBuffer.flip();
                    mBuffer.reset();
                }
                buffer = mTempBuffer;
            }
            mIsUsingNewQueue = true;
            wasQueued = native_queue(buffer, buffer.position(), buffer.remaining());
        }
    }
    if (!wasQueued) {
        mIsUsingNewQueue = false;
        mTempBuffer = null;
        mBuffer = null;
    }
    return wasQueued;
}