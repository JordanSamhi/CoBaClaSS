public void dump(PrintWriter pw, String prefix, boolean full, long elapsedRealtimeMillis){
    pw.print(prefix);
    UserHandle.formatUid(pw, callingUid);
    pw.print(" tag=");
    pw.println(tag);
    pw.print(prefix);
    pw.print("Source: uid=");
    UserHandle.formatUid(pw, getSourceUid());
    pw.print(" user=");
    pw.print(getSourceUserId());
    pw.print(" pkg=");
    pw.println(getSourcePackageName());
    if (full) {
        pw.print(prefix);
        pw.println("JobInfo:");
        pw.print(prefix);
        pw.print("  Service: ");
        pw.println(job.getService().flattenToShortString());
        if (job.isPeriodic()) {
            pw.print(prefix);
            pw.print("  PERIODIC: interval=");
            TimeUtils.formatDuration(job.getIntervalMillis(), pw);
            pw.print(" flex=");
            TimeUtils.formatDuration(job.getFlexMillis(), pw);
            pw.println();
        }
        if (job.isPersisted()) {
            pw.print(prefix);
            pw.println("  PERSISTED");
        }
        if (job.getPriority() != 0) {
            pw.print(prefix);
            pw.print("  Priority: ");
            pw.println(JobInfo.getPriorityString(job.getPriority()));
        }
        if (job.getFlags() != 0) {
            pw.print(prefix);
            pw.print("  Flags: ");
            pw.println(Integer.toHexString(job.getFlags()));
        }
        if (getInternalFlags() != 0) {
            pw.print(prefix);
            pw.print("  Internal flags: ");
            pw.print(Integer.toHexString(getInternalFlags()));
            if ((getInternalFlags() & INTERNAL_FLAG_HAS_FOREGROUND_EXEMPTION) != 0) {
                pw.print(" HAS_FOREGROUND_EXEMPTION");
            }
            pw.println();
        }
        pw.print(prefix);
        pw.print("  Requires: charging=");
        pw.print(job.isRequireCharging());
        pw.print(" batteryNotLow=");
        pw.print(job.isRequireBatteryNotLow());
        pw.print(" deviceIdle=");
        pw.println(job.isRequireDeviceIdle());
        if (job.getTriggerContentUris() != null) {
            pw.print(prefix);
            pw.println("  Trigger content URIs:");
            for (int i = 0; i < job.getTriggerContentUris().length; i++) {
                JobInfo.TriggerContentUri trig = job.getTriggerContentUris()[i];
                pw.print(prefix);
                pw.print("    ");
                pw.print(Integer.toHexString(trig.getFlags()));
                pw.print(' ');
                pw.println(trig.getUri());
            }
            if (job.getTriggerContentUpdateDelay() >= 0) {
                pw.print(prefix);
                pw.print("  Trigger update delay: ");
                TimeUtils.formatDuration(job.getTriggerContentUpdateDelay(), pw);
                pw.println();
            }
            if (job.getTriggerContentMaxDelay() >= 0) {
                pw.print(prefix);
                pw.print("  Trigger max delay: ");
                TimeUtils.formatDuration(job.getTriggerContentMaxDelay(), pw);
                pw.println();
            }
        }
        if (job.getExtras() != null && !job.getExtras().isDefinitelyEmpty()) {
            pw.print(prefix);
            pw.print("  Extras: ");
            pw.println(job.getExtras().toShortString());
        }
        if (job.getTransientExtras() != null && !job.getTransientExtras().isDefinitelyEmpty()) {
            pw.print(prefix);
            pw.print("  Transient extras: ");
            pw.println(job.getTransientExtras().toShortString());
        }
        if (job.getClipData() != null) {
            pw.print(prefix);
            pw.print("  Clip data: ");
            StringBuilder b = new StringBuilder(128);
            b.append(job.getClipData());
            pw.println(b);
        }
        if (uriPerms != null) {
            pw.print(prefix);
            pw.println("  Granted URI permissions:");
            uriPerms.dump(pw, prefix + "  ");
        }
        if (job.getRequiredNetwork() != null) {
            pw.print(prefix);
            pw.print("  Network type: ");
            pw.println(job.getRequiredNetwork());
        }
        if (mTotalNetworkDownloadBytes != JobInfo.NETWORK_BYTES_UNKNOWN) {
            pw.print(prefix);
            pw.print("  Network download bytes: ");
            pw.println(mTotalNetworkDownloadBytes);
        }
        if (mTotalNetworkUploadBytes != JobInfo.NETWORK_BYTES_UNKNOWN) {
            pw.print(prefix);
            pw.print("  Network upload bytes: ");
            pw.println(mTotalNetworkUploadBytes);
        }
        if (job.getMinLatencyMillis() != 0) {
            pw.print(prefix);
            pw.print("  Minimum latency: ");
            TimeUtils.formatDuration(job.getMinLatencyMillis(), pw);
            pw.println();
        }
        if (job.getMaxExecutionDelayMillis() != 0) {
            pw.print(prefix);
            pw.print("  Max execution delay: ");
            TimeUtils.formatDuration(job.getMaxExecutionDelayMillis(), pw);
            pw.println();
        }
        pw.print(prefix);
        pw.print("  Backoff: policy=");
        pw.print(job.getBackoffPolicy());
        pw.print(" initial=");
        TimeUtils.formatDuration(job.getInitialBackoffMillis(), pw);
        pw.println();
        if (job.hasEarlyConstraint()) {
            pw.print(prefix);
            pw.println("  Has early constraint");
        }
        if (job.hasLateConstraint()) {
            pw.print(prefix);
            pw.println("  Has late constraint");
        }
    }
    pw.print(prefix);
    pw.print("Required constraints:");
    dumpConstraints(pw, requiredConstraints);
    pw.println();
    pw.print(prefix);
    pw.print("Dynamic constraints:");
    dumpConstraints(pw, mDynamicConstraints);
    pw.println();
    if (full) {
        pw.print(prefix);
        pw.print("Satisfied constraints:");
        dumpConstraints(pw, satisfiedConstraints);
        pw.println();
        pw.print(prefix);
        pw.print("Unsatisfied constraints:");
        dumpConstraints(pw, ((requiredConstraints | CONSTRAINT_WITHIN_QUOTA) & ~satisfiedConstraints));
        pw.println();
        if (dozeWhitelisted) {
            pw.print(prefix);
            pw.println("Doze whitelisted: true");
        }
        if (uidActive) {
            pw.print(prefix);
            pw.println("Uid: active");
        }
        if (job.isExemptedFromAppStandby()) {
            pw.print(prefix);
            pw.println("Is exempted from app standby");
        }
    }
    if (trackingControllers != 0) {
        pw.print(prefix);
        pw.print("Tracking:");
        if ((trackingControllers & TRACKING_BATTERY) != 0)
            pw.print(" BATTERY");
        if ((trackingControllers & TRACKING_CONNECTIVITY) != 0)
            pw.print(" CONNECTIVITY");
        if ((trackingControllers & TRACKING_CONTENT) != 0)
            pw.print(" CONTENT");
        if ((trackingControllers & TRACKING_IDLE) != 0)
            pw.print(" IDLE");
        if ((trackingControllers & TRACKING_STORAGE) != 0)
            pw.print(" STORAGE");
        if ((trackingControllers & TRACKING_TIME) != 0)
            pw.print(" TIME");
        if ((trackingControllers & TRACKING_QUOTA) != 0)
            pw.print(" QUOTA");
        pw.println();
    }
    pw.print(prefix);
    pw.println("Implicit constraints:");
    pw.print(prefix);
    pw.print("  readyNotDozing: ");
    pw.println(mReadyNotDozing);
    pw.print(prefix);
    pw.print("  readyNotRestrictedInBg: ");
    pw.println(mReadyNotRestrictedInBg);
    if (!job.isPeriodic() && hasDeadlineConstraint()) {
        pw.print(prefix);
        pw.print("  readyDeadlineSatisfied: ");
        pw.println(mReadyDeadlineSatisfied);
    }
    pw.print(prefix);
    pw.print("  readyDynamicSatisfied: ");
    pw.println(mReadyDynamicSatisfied);
    if (changedAuthorities != null) {
        pw.print(prefix);
        pw.println("Changed authorities:");
        for (int i = 0; i < changedAuthorities.size(); i++) {
            pw.print(prefix);
            pw.print("  ");
            pw.println(changedAuthorities.valueAt(i));
        }
    }
    if (changedUris != null) {
        pw.print(prefix);
        pw.println("Changed URIs:");
        for (int i = 0; i < changedUris.size(); i++) {
            pw.print(prefix);
            pw.print("  ");
            pw.println(changedUris.valueAt(i));
        }
    }
    if (network != null) {
        pw.print(prefix);
        pw.print("Network: ");
        pw.println(network);
    }
    if (pendingWork != null && pendingWork.size() > 0) {
        pw.print(prefix);
        pw.println("Pending work:");
        for (int i = 0; i < pendingWork.size(); i++) {
            dumpJobWorkItem(pw, prefix, pendingWork.get(i), i);
        }
    }
    if (executingWork != null && executingWork.size() > 0) {
        pw.print(prefix);
        pw.println("Executing work:");
        for (int i = 0; i < executingWork.size(); i++) {
            dumpJobWorkItem(pw, prefix, executingWork.get(i), i);
        }
    }
    pw.print(prefix);
    pw.print("Standby bucket: ");
    pw.println(getBucketName());
    if (whenStandbyDeferred != 0) {
        pw.print(prefix);
        pw.print("  Deferred since: ");
        TimeUtils.formatDuration(whenStandbyDeferred, elapsedRealtimeMillis, pw);
        pw.println();
    }
    if (mFirstForceBatchedTimeElapsed != 0) {
        pw.print(prefix);
        pw.print("  Time since first force batch attempt: ");
        TimeUtils.formatDuration(mFirstForceBatchedTimeElapsed, elapsedRealtimeMillis, pw);
        pw.println();
    }
    pw.print(prefix);
    pw.print("Enqueue time: ");
    TimeUtils.formatDuration(enqueueTime, elapsedRealtimeMillis, pw);
    pw.println();
    pw.print(prefix);
    pw.print("Run time: earliest=");
    formatRunTime(pw, earliestRunTimeElapsedMillis, NO_EARLIEST_RUNTIME, elapsedRealtimeMillis);
    pw.print(", latest=");
    formatRunTime(pw, latestRunTimeElapsedMillis, NO_LATEST_RUNTIME, elapsedRealtimeMillis);
    pw.print(", original latest=");
    formatRunTime(pw, mOriginalLatestRunTimeElapsedMillis, NO_LATEST_RUNTIME, elapsedRealtimeMillis);
    pw.println();
    if (numFailures != 0) {
        pw.print(prefix);
        pw.print("Num failures: ");
        pw.println(numFailures);
    }
    if (mLastSuccessfulRunTime != 0) {
        pw.print(prefix);
        pw.print("Last successful run: ");
        pw.println(formatTime(mLastSuccessfulRunTime));
    }
    if (mLastFailedRunTime != 0) {
        pw.print(prefix);
        pw.print("Last failed run: ");
        pw.println(formatTime(mLastFailedRunTime));
    }
}