public synchronized int restorePackages(long token, @Nullable IRestoreObserver observer, @NonNull String[] packages, @Nullable IBackupManagerMonitor monitor){
    mBackupManagerService.getContext().enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP, "performRestore");
    if (DEBUG) {
        StringBuilder b = new StringBuilder(128);
        b.append("restorePackages token=");
        b.append(Long.toHexString(token));
        b.append(" observer=");
        if (observer == null) {
            b.append("null");
        } else {
            b.append(observer.toString());
        }
        b.append(" monitor=");
        if (monitor == null) {
            b.append("null");
        } else {
            b.append(monitor.toString());
        }
        b.append(" packages=");
        if (packages == null) {
            b.append("null");
        } else {
            b.append('{');
            boolean first = true;
            for (String s : packages) {
                if (!first) {
                    b.append(", ");
                } else {
                    first = false;
                }
                b.append(s);
            }
            b.append('}');
        }
        Slog.d(TAG, b.toString());
    }
    if (mEnded) {
        throw new IllegalStateException("Restore session already ended");
    }
    if (mTimedOut) {
        Slog.i(TAG, "Session already timed out");
        return -1;
    }
    if (mRestoreSets == null) {
        Slog.e(TAG, "Ignoring restoreAll() with no restore set");
        return -1;
    }
    if (mPackageName != null) {
        Slog.e(TAG, "Ignoring restoreAll() on single-package session");
        return -1;
    }
    if (!mTransportManager.isTransportRegistered(mTransportName)) {
        Slog.e(TAG, "Transport " + mTransportName + " not registered");
        return -1;
    }
    synchronized (mBackupManagerService.getQueueLock()) {
        for (int i = 0; i < mRestoreSets.length; i++) {
            if (token == mRestoreSets[i].token) {
                long oldId = Binder.clearCallingIdentity();
                try {
                    return sendRestoreToHandlerLocked((transportClient, listener) -> RestoreParams.createForRestorePackages(transportClient, observer, monitor, token, packages, packages.length > 1, listener), "RestoreSession.restorePackages(" + packages.length + " packages)");
                } finally {
                    Binder.restoreCallingIdentity(oldId);
                }
            }
        }
    }
    Slog.w(TAG, "Restore token " + Long.toHexString(token) + " not found");
    return -1;
}