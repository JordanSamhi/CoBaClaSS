public int schedule(JobInfo job) throws RemoteException{
    if (DEBUG) {
        Slog.d(TAG, "Scheduling job: " + job.toString());
    }
    final int pid = Binder.getCallingPid();
    final int uid = Binder.getCallingUid();
    final int userId = UserHandle.getUserId(uid);
    enforceValidJobRequest(uid, job);
    if (job.isPersisted()) {
        if (!canPersistJobs(pid, uid)) {
            throw new IllegalArgumentException("Error: requested job be persisted without" + " holding RECEIVE_BOOT_COMPLETED permission.");
        }
    }
    validateJobFlags(job, uid);
    long ident = Binder.clearCallingIdentity();
    try {
        return JobSchedulerService.this.scheduleAsPackage(job, null, uid, null, userId, null);
    } finally {
        Binder.restoreCallingIdentity(ident);
    }
}