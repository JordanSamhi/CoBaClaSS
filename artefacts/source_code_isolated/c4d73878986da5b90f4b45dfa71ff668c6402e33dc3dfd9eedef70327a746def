public final void getSelection(int start, int end, final SelectionRectangleConsumer consumer){
    if (start == end) {
        return;
    }
    if (end < start) {
        int temp = end;
        end = start;
        start = temp;
    }
    final int startline = getLineForOffset(start);
    final int endline = getLineForOffset(end);
    int top = getLineTop(startline);
    int bottom = getLineBottomWithoutSpacing(endline);
    if (startline == endline) {
        addSelection(startline, start, end, top, bottom, consumer);
    } else {
        final float width = mWidth;
        addSelection(startline, start, getLineEnd(startline), top, getLineBottom(startline), consumer);
        if (getParagraphDirection(startline) == DIR_RIGHT_TO_LEFT) {
            consumer.accept(getLineLeft(startline), top, 0, getLineBottom(startline), TEXT_SELECTION_LAYOUT_RIGHT_TO_LEFT);
        } else {
            consumer.accept(getLineRight(startline), top, width, getLineBottom(startline), TEXT_SELECTION_LAYOUT_LEFT_TO_RIGHT);
        }
        for (int i = startline + 1; i < endline; i++) {
            top = getLineTop(i);
            bottom = getLineBottom(i);
            if (getParagraphDirection(i) == DIR_RIGHT_TO_LEFT) {
                consumer.accept(0, top, width, bottom, TEXT_SELECTION_LAYOUT_RIGHT_TO_LEFT);
            } else {
                consumer.accept(0, top, width, bottom, TEXT_SELECTION_LAYOUT_LEFT_TO_RIGHT);
            }
        }
        top = getLineTop(endline);
        bottom = getLineBottomWithoutSpacing(endline);
        addSelection(endline, getLineStart(endline), end, top, bottom, consumer);
        if (getParagraphDirection(endline) == DIR_RIGHT_TO_LEFT) {
            consumer.accept(width, top, getLineRight(endline), bottom, TEXT_SELECTION_LAYOUT_RIGHT_TO_LEFT);
        } else {
            consumer.accept(0, top, getLineLeft(endline), bottom, TEXT_SELECTION_LAYOUT_LEFT_TO_RIGHT);
        }
    }
}