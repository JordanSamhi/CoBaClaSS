public List<String> setSettingsLocked(String prefix, Map<String, String> keyValues, String packageName){
    List<String> changedKeys = new ArrayList<>();
    for (int i = 0; i < mSettings.keySet().size(); ++i) {
        String key = mSettings.keyAt(i);
        if (key.startsWith(prefix) && !keyValues.containsKey(key)) {
            Setting oldState = mSettings.remove(key);
            FrameworkStatsLog.write(FrameworkStatsLog.SETTING_CHANGED, key, "", "", oldState.value, "", false, getUserIdFromKey(mKey), FrameworkStatsLog.SETTING_CHANGED__REASON__DELETED);
            addHistoricalOperationLocked(HISTORICAL_OPERATION_DELETE, oldState);
            changedKeys.add(key);
        }
    }
    for (String key : keyValues.keySet()) {
        String value = keyValues.get(key);
        String oldValue = null;
        Setting state = mSettings.get(key);
        if (state == null) {
            state = new Setting(key, value, false, packageName, null);
            mSettings.put(key, state);
            changedKeys.add(key);
        } else if (state.value != value) {
            oldValue = state.value;
            state.update(value, false, packageName, null, true, false);
            changedKeys.add(key);
        } else {
            continue;
        }
        FrameworkStatsLog.write(FrameworkStatsLog.SETTING_CHANGED, key, value, state.value, oldValue, null, false, getUserIdFromKey(mKey), FrameworkStatsLog.SETTING_CHANGED__REASON__UPDATED);
        addHistoricalOperationLocked(HISTORICAL_OPERATION_UPDATE, state);
    }
    if (!changedKeys.isEmpty()) {
        scheduleWriteIfNeededLocked();
    }
    return changedKeys;
}