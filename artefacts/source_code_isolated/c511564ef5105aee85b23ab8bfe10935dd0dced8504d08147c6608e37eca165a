public static PasspointConfiguration deserializePasspointConfiguration(XmlPullParser in, int outerTagDepth) throws XmlPullParserException, IOException{
    PasspointConfiguration config = new PasspointConfiguration();
    while (XmlUtil.nextElementWithin(in, outerTagDepth)) {
        if (isValueElement(in)) {
            String[] name = new String[1];
            Object value = XmlUtil.readCurrentValue(in, name);
            switch(name[0]) {
                case XML_TAG_UPDATE_IDENTIFIER:
                    config.setUpdateIdentifier((int) value);
                    break;
                case XML_TAG_CREDENTIAL_PRIORITY:
                    config.setCredentialPriority((int) value);
                    break;
                case XML_TAG_TRUST_ROOT_CERT_LIST:
                    config.setTrustRootCertList((Map<String, byte[]>) value);
                    break;
                case XML_TAG_SUBSCRIPTION_CREATION_TIME:
                    config.setSubscriptionCreationTimeInMillis((long) value);
                    break;
                case XML_TAG_SUBSCRIPTION_EXPIRATION_TIME:
                    config.setSubscriptionExpirationTimeInMillis((long) value);
                    break;
                case XML_TAG_SUBSCRIPTION_TYPE:
                    config.setSubscriptionType((String) value);
                    break;
                case XML_TAG_USAGE_LIMIT_TIME_PERIOD:
                    config.setUsageLimitUsageTimePeriodInMinutes((long) value);
                    break;
                case XML_TAG_USAGE_LIMIT_START_TIME:
                    config.setUsageLimitStartTimeInMillis((long) value);
                    break;
                case XML_TAG_USAGE_LIMIT_DATA_LIMIT:
                    config.setUsageLimitDataLimit((long) value);
                    break;
                case XML_TAG_USAGE_LIMIT_TIME_LIMIT:
                    config.setUsageLimitTimeLimitInMinutes((long) value);
                    break;
                case XML_TAG_FRIENDLY_NAME_LIST:
                    config.setServiceFriendlyNames((Map<String, String>) value);
                    break;
                case XML_TAG_CARRIER_ID:
                    config.setCarrierId((int) value);
                    break;
                case XML_TAG_IS_AUTO_JOIN:
                    config.setAutojoinEnabled((boolean) value);
                    break;
                case XML_TAG_IS_MAC_RANDOMIZATION_ENABLED:
                    config.setMacRandomizationEnabled((boolean) value);
                    break;
                case XML_TAG_METERED_OVERRIDE:
                    config.setMeteredOverride((int) value);
                    break;
                default:
                    throw new XmlPullParserException("Unknown value under " + "PasspointConfiguration: " + in.getName());
            }
        } else {
            switch(in.getName()) {
                case XML_TAG_SECTION_HEADER_HOMESP:
                    config.setHomeSp(deserializeHomeSP(in, outerTagDepth + 1));
                    break;
                case XML_TAG_SECTION_HEADER_CREDENTIAL:
                    config.setCredential(deserializeCredential(in, outerTagDepth + 1));
                    break;
                case XML_TAG_SECTION_HEADER_POLICY:
                    config.setPolicy(deserializePolicy(in, outerTagDepth + 1));
                    break;
                case XML_TAG_SECTION_HEADER_SUBSCRIPTION_UPDATE:
                    config.setSubscriptionUpdate(deserializeUpdateParameter(in, outerTagDepth + 1));
                    break;
                default:
                    throw new XmlPullParserException("Unknown section under " + "PasspointConfiguration: " + in.getName());
            }
        }
    }
    return config;
}