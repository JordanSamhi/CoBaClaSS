public boolean performSystemAction(int actionId){
    final long identity = Binder.clearCallingIdentity();
    try {
        synchronized (mSystemActionLock) {
            RemoteAction registeredAction = mRegisteredSystemActions.get(actionId);
            if (registeredAction != null) {
                try {
                    registeredAction.getActionIntent().send();
                    return true;
                } catch (PendingIntent.CanceledException ex) {
                    Slog.e(TAG, "canceled PendingIntent for global action " + registeredAction.getTitle(), ex);
                }
                return false;
            }
        }
        switch(actionId) {
            case AccessibilityService.GLOBAL_ACTION_BACK:
                {
                    sendDownAndUpKeyEvents(KeyEvent.KEYCODE_BACK);
                    return true;
                }
            case AccessibilityService.GLOBAL_ACTION_HOME:
                {
                    sendDownAndUpKeyEvents(KeyEvent.KEYCODE_HOME);
                    return true;
                }
            case AccessibilityService.GLOBAL_ACTION_RECENTS:
                return openRecents();
            case AccessibilityService.GLOBAL_ACTION_NOTIFICATIONS:
                {
                    expandNotifications();
                    return true;
                }
            case AccessibilityService.GLOBAL_ACTION_QUICK_SETTINGS:
                {
                    expandQuickSettings();
                    return true;
                }
            case AccessibilityService.GLOBAL_ACTION_POWER_DIALOG:
                {
                    showGlobalActions();
                    return true;
                }
            case AccessibilityService.GLOBAL_ACTION_TOGGLE_SPLIT_SCREEN:
                return toggleSplitScreen();
            case AccessibilityService.GLOBAL_ACTION_LOCK_SCREEN:
                return lockScreen();
            case AccessibilityService.GLOBAL_ACTION_TAKE_SCREENSHOT:
                return takeScreenshot();
            case AccessibilityService.GLOBAL_ACTION_KEYCODE_HEADSETHOOK:
                sendDownAndUpKeyEvents(KeyEvent.KEYCODE_HEADSETHOOK);
                return true;
            default:
                Slog.e(TAG, "Invalid action id: " + actionId);
                return false;
        }
    } finally {
        Binder.restoreCallingIdentity(identity);
    }
}