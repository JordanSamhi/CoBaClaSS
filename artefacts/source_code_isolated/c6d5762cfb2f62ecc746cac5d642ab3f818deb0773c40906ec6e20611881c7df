public void onSetA2dpSinkConnectionState(@NonNull BtHelper.BluetoothA2dpDeviceInfo btInfo, @AudioService.BtProfileConnectionState int state){
    final BluetoothDevice btDevice = btInfo.getBtDevice();
    int a2dpVolume = btInfo.getVolume();
    if (AudioService.DEBUG_DEVICES) {
        Log.d(TAG, "onSetA2dpSinkConnectionState btDevice=" + btDevice + " state=" + state + " vol=" + a2dpVolume);
    }
    String address = btDevice.getAddress();
    if (address == null) {
        address = "";
    }
    if (!BluetoothAdapter.checkBluetoothAddress(address)) {
        address = "";
    }
    @AudioSystem.AudioFormatNativeEnumForBtCodec
    final int a2dpCodec = btInfo.getCodec();
    AudioService.sDeviceLogger.log(new AudioEventLogger.StringEvent("A2DP sink connected: device addr=" + address + " state=" + state + " codec=" + AudioSystem.audioFormatToString(a2dpCodec) + " vol=" + a2dpVolume));
    new MediaMetrics.Item(mMetricsId + "a2dp").set(MediaMetrics.Property.ADDRESS, address).set(MediaMetrics.Property.ENCODING, AudioSystem.audioFormatToString(a2dpCodec)).set(MediaMetrics.Property.EVENT, "onSetA2dpSinkConnectionState").set(MediaMetrics.Property.INDEX, a2dpVolume).set(MediaMetrics.Property.STATE, state == BluetoothProfile.STATE_CONNECTED ? MediaMetrics.Value.CONNECTED : MediaMetrics.Value.DISCONNECTED).record();
    synchronized (mDevicesLock) {
        final String key = DeviceInfo.makeDeviceListKey(AudioSystem.DEVICE_OUT_BLUETOOTH_A2DP, btDevice.getAddress());
        final DeviceInfo di = mConnectedDevices.get(key);
        boolean isConnected = di != null;
        if (isConnected) {
            if (state == BluetoothProfile.STATE_CONNECTED) {
                if (a2dpCodec != di.mDeviceCodecFormat) {
                    mDeviceBroker.postBluetoothA2dpDeviceConfigChange(btDevice);
                }
            } else {
                makeA2dpDeviceUnavailableNow(address, di.mDeviceCodecFormat);
            }
        } else if (state == BluetoothProfile.STATE_CONNECTED) {
            if (a2dpVolume != -1) {
                mDeviceBroker.postSetVolumeIndexOnDevice(AudioSystem.STREAM_MUSIC, a2dpVolume * 10, AudioSystem.DEVICE_OUT_BLUETOOTH_A2DP, "onSetA2dpSinkConnectionState");
            }
            makeA2dpDeviceAvailable(address, BtHelper.getName(btDevice), "onSetA2dpSinkConnectionState", a2dpCodec);
        }
    }
}