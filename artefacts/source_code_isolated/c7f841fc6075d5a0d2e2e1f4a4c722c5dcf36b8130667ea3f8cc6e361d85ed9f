public void getHistoricalOpsFromDiskRaw(@NonNull HistoricalOpsRequest request, @Nullable Executor executor, @NonNull Consumer<HistoricalOps> callback){
    Objects.requireNonNull(executor, "executor cannot be null");
    Objects.requireNonNull(callback, "callback cannot be null");
    try {
        mService.getHistoricalOpsFromDiskRaw(request.mUid, request.mPackageName, request.mAttributionTag, request.mOpNames, request.mFilter, request.mBeginTimeMillis, request.mEndTimeMillis, request.mFlags, new RemoteCallback((result) -> {
            final HistoricalOps ops = result.getParcelable(KEY_HISTORICAL_OPS);
            final long identity = Binder.clearCallingIdentity();
            try {
                executor.execute(() -> callback.accept(ops));
            } finally {
                Binder.restoreCallingIdentity(identity);
            }
        }));
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    }
}