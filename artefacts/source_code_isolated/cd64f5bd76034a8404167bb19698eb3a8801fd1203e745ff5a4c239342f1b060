public void processCode() throws CallStateException{
    try {
        if (isShortCode()) {
            Rlog.d(LOG_TAG, "processCode: isShortCode");
            Rlog.d(LOG_TAG, "processCode: Sending short code '" + mDialingNumber + "' over CS pipe.");
            throw new CallStateException(Phone.CS_FALLBACK);
        } else if (isServiceCodeCallForwarding(mSc)) {
            Rlog.d(LOG_TAG, "processCode: is CF");
            String dialingNumber = mSia;
            int reason = scToCallForwardReason(mSc);
            int serviceClass = siToServiceClass(mSib);
            int time = siToTime(mSic);
            if (isInterrogate()) {
                mPhone.getCallForwardingOption(reason, serviceClass, obtainMessage(EVENT_QUERY_CF_COMPLETE, this));
            } else {
                int cfAction;
                if (isActivate()) {
                    if (isEmptyOrNull(dialingNumber)) {
                        cfAction = CommandsInterface.CF_ACTION_ENABLE;
                        mIsCallFwdReg = false;
                    } else {
                        cfAction = CommandsInterface.CF_ACTION_REGISTRATION;
                        mIsCallFwdReg = true;
                    }
                } else if (isDeactivate()) {
                    cfAction = CommandsInterface.CF_ACTION_DISABLE;
                } else if (isRegister()) {
                    cfAction = CommandsInterface.CF_ACTION_REGISTRATION;
                } else if (isErasure()) {
                    cfAction = CommandsInterface.CF_ACTION_ERASURE;
                } else {
                    throw new RuntimeException("invalid action");
                }
                int isSettingUnconditional = ((reason == CommandsInterface.CF_REASON_UNCONDITIONAL) || (reason == CommandsInterface.CF_REASON_ALL)) ? 1 : 0;
                int isEnableDesired = ((cfAction == CommandsInterface.CF_ACTION_ENABLE) || (cfAction == CommandsInterface.CF_ACTION_REGISTRATION)) ? 1 : 0;
                Rlog.d(LOG_TAG, "processCode: is CF setCallForward");
                mPhone.setCallForwardingOption(cfAction, reason, dialingNumber, serviceClass, time, obtainMessage(EVENT_SET_CFF_COMPLETE, isSettingUnconditional, isEnableDesired, this));
            }
        } else if (isServiceCodeCallBarring(mSc)) {
            String password = mSia;
            String facility = scToBarringFacility(mSc);
            int serviceClass = siToServiceClass(mSib);
            if (isInterrogate()) {
                mPhone.getCallBarring(facility, obtainMessage(EVENT_SUPP_SVC_QUERY_COMPLETE, this), serviceClass);
            } else if (isActivate() || isDeactivate()) {
                mPhone.setCallBarring(facility, isActivate(), password, obtainMessage(EVENT_SET_COMPLETE, this), serviceClass);
            } else {
                throw new RuntimeException("Invalid or Unsupported MMI Code");
            }
        } else if (mSc != null && mSc.equals(SC_CLIR)) {
            if (isActivate() && !mPhone.getDefaultPhone().isClirActivationAndDeactivationPrevented()) {
                try {
                    mPhone.mCT.getUtInterface().updateCLIR(CommandsInterface.CLIR_INVOCATION, obtainMessage(EVENT_SET_COMPLETE, this));
                } catch (ImsException e) {
                    Rlog.d(LOG_TAG, "processCode: Could not get UT handle for updateCLIR.");
                }
            } else if (isDeactivate() && !mPhone.getDefaultPhone().isClirActivationAndDeactivationPrevented()) {
                try {
                    mPhone.mCT.getUtInterface().updateCLIR(CommandsInterface.CLIR_SUPPRESSION, obtainMessage(EVENT_SET_COMPLETE, this));
                } catch (ImsException e) {
                    Rlog.d(LOG_TAG, "processCode: Could not get UT handle for updateCLIR.");
                }
            } else if (isInterrogate()) {
                try {
                    mPhone.mCT.getUtInterface().queryCLIR(obtainMessage(EVENT_GET_CLIR_COMPLETE, this));
                } catch (ImsException e) {
                    Rlog.d(LOG_TAG, "processCode: Could not get UT handle for queryCLIR.");
                }
            } else {
                throw new RuntimeException("Invalid or Unsupported MMI Code");
            }
        } else if (mSc != null && mSc.equals(SC_CLIP)) {
            if (isInterrogate()) {
                try {
                    mPhone.mCT.getUtInterface().queryCLIP(obtainMessage(EVENT_SUPP_SVC_QUERY_COMPLETE, this));
                } catch (ImsException e) {
                    Rlog.d(LOG_TAG, "processCode: Could not get UT handle for queryCLIP.");
                }
            } else if (isActivate() || isDeactivate()) {
                try {
                    mPhone.mCT.getUtInterface().updateCLIP(isActivate(), obtainMessage(EVENT_SET_COMPLETE, this));
                } catch (ImsException e) {
                    Rlog.d(LOG_TAG, "processCode: Could not get UT handle for updateCLIP.");
                }
            } else {
                throw new RuntimeException("Invalid or Unsupported MMI Code");
            }
        } else if (mSc != null && mSc.equals(SC_COLP)) {
            if (isInterrogate()) {
                try {
                    mPhone.mCT.getUtInterface().queryCOLP(obtainMessage(EVENT_SUPP_SVC_QUERY_COMPLETE, this));
                } catch (ImsException e) {
                    Rlog.d(LOG_TAG, "processCode: Could not get UT handle for queryCOLP.");
                }
            } else if (isActivate() || isDeactivate()) {
                try {
                    mPhone.mCT.getUtInterface().updateCOLP(isActivate(), obtainMessage(EVENT_SET_COMPLETE, this));
                } catch (ImsException e) {
                    Rlog.d(LOG_TAG, "processCode: Could not get UT handle for updateCOLP.");
                }
            } else {
                throw new RuntimeException("Invalid or Unsupported MMI Code");
            }
        } else if (mSc != null && mSc.equals(SC_COLR)) {
            if (isActivate()) {
                try {
                    mPhone.mCT.getUtInterface().updateCOLR(NUM_PRESENTATION_RESTRICTED, obtainMessage(EVENT_SET_COMPLETE, this));
                } catch (ImsException e) {
                    Rlog.d(LOG_TAG, "processCode: Could not get UT handle for updateCOLR.");
                }
            } else if (isDeactivate()) {
                try {
                    mPhone.mCT.getUtInterface().updateCOLR(NUM_PRESENTATION_ALLOWED, obtainMessage(EVENT_SET_COMPLETE, this));
                } catch (ImsException e) {
                    Rlog.d(LOG_TAG, "processCode: Could not get UT handle for updateCOLR.");
                }
            } else if (isInterrogate()) {
                try {
                    mPhone.mCT.getUtInterface().queryCOLR(obtainMessage(EVENT_SUPP_SVC_QUERY_COMPLETE, this));
                } catch (ImsException e) {
                    Rlog.d(LOG_TAG, "processCode: Could not get UT handle for queryCOLR.");
                }
            } else {
                throw new RuntimeException("Invalid or Unsupported MMI Code");
            }
        } else if (mSc != null && (mSc.equals(SC_BS_MT))) {
            try {
                if (isInterrogate()) {
                    mPhone.mCT.getUtInterface().queryCallBarring(ImsUtImplBase.CALL_BARRING_SPECIFIC_INCOMING_CALLS, obtainMessage(EVENT_QUERY_ICB_COMPLETE, this));
                } else {
                    processIcbMmiCodeForUpdate();
                }
            } catch (ImsException e) {
                Rlog.d(LOG_TAG, "processCode: Could not get UT handle for ICB.");
            }
        } else if (mSc != null && mSc.equals(SC_BAICa)) {
            int callAction = 0;
            try {
                if (isInterrogate()) {
                    mPhone.mCT.getUtInterface().queryCallBarring(ImsUtImplBase.CALL_BARRING_ANONYMOUS_INCOMING, obtainMessage(EVENT_QUERY_ICB_COMPLETE, this));
                } else {
                    if (isActivate()) {
                        callAction = CommandsInterface.CF_ACTION_ENABLE;
                    } else if (isDeactivate()) {
                        callAction = CommandsInterface.CF_ACTION_DISABLE;
                    }
                    mPhone.mCT.getUtInterface().updateCallBarring(ImsUtImplBase.CALL_BARRING_ANONYMOUS_INCOMING, callAction, obtainMessage(EVENT_SET_COMPLETE, this), null);
                }
            } catch (ImsException e) {
                Rlog.d(LOG_TAG, "processCode: Could not get UT handle for ICBa.");
            }
        } else if (mSc != null && mSc.equals(SC_WAIT)) {
            int serviceClass = siToServiceClass(mSia);
            if (isActivate() || isDeactivate()) {
                mPhone.setCallWaiting(isActivate(), serviceClass, obtainMessage(EVENT_SET_COMPLETE, this));
            } else if (isInterrogate()) {
                mPhone.getCallWaiting(obtainMessage(EVENT_QUERY_COMPLETE, this));
            } else {
                throw new RuntimeException("Invalid or Unsupported MMI Code");
            }
        } else if (mPoundString != null) {
            if (mContext.getResources().getBoolean(com.android.internal.R.bool.config_allow_ussd_over_ims)) {
                if (mPhone.getDefaultPhone().getServiceStateTracker().mSS.getState() == STATE_IN_SERVICE) {
                    Rlog.i(LOG_TAG, "processCode: Sending ussd string '" + Rlog.pii(LOG_TAG, mPoundString) + "' over CS pipe " + "(allowed over ims).");
                    throw new CallStateException(Phone.CS_FALLBACK);
                } else {
                    Rlog.i(LOG_TAG, "processCode: CS is out of service, sending ussd string '" + Rlog.pii(LOG_TAG, mPoundString) + "' over IMS pipe.");
                    sendUssd(mPoundString);
                }
            } else {
                Rlog.i(LOG_TAG, "processCode: Sending ussd string '" + Rlog.pii(LOG_TAG, mPoundString) + "' over CS pipe.");
                throw new CallStateException(Phone.CS_FALLBACK);
            }
        } else {
            Rlog.d(LOG_TAG, "processCode: invalid or unsupported MMI");
            throw new RuntimeException("Invalid or Unsupported MMI Code");
        }
    } catch (RuntimeException exc) {
        mState = State.FAILED;
        mMessage = mContext.getText(com.android.internal.R.string.mmiError);
        Rlog.d(LOG_TAG, "processCode: RuntimeException = " + exc);
        mPhone.onMMIDone(this);
    }
}