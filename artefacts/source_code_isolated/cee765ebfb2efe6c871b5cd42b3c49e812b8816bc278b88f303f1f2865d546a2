public void updateAmbientColorTemperature(){
    final long time = System.currentTimeMillis();
    float ambientColorTemperature = mColorTemperatureFilter.getEstimate(time);
    mLatestAmbientColorTemperature = ambientColorTemperature;
    if (mAmbientToDisplayColorTemperatureSpline != null && ambientColorTemperature != -1.0f) {
        ambientColorTemperature = mAmbientToDisplayColorTemperatureSpline.interpolate(ambientColorTemperature);
    }
    float ambientBrightness = mBrightnessFilter.getEstimate(time);
    mLatestAmbientBrightness = ambientBrightness;
    if (ambientColorTemperature != -1.0f && mLowLightAmbientBrightnessToBiasSpline != null) {
        float bias = mLowLightAmbientBrightnessToBiasSpline.interpolate(ambientBrightness);
        ambientColorTemperature = bias * ambientColorTemperature + (1.0f - bias) * mLowLightAmbientColorTemperature;
        mLatestLowLightBias = bias;
    }
    if (ambientColorTemperature != -1.0f && mHighLightAmbientBrightnessToBiasSpline != null) {
        float bias = mHighLightAmbientBrightnessToBiasSpline.interpolate(ambientBrightness);
        ambientColorTemperature = (1.0f - bias) * ambientColorTemperature + bias * mHighLightAmbientColorTemperature;
        mLatestHighLightBias = bias;
    }
    if (mAmbientColorTemperatureOverride != -1.0f) {
        if (mLoggingEnabled) {
            Slog.d(TAG, "override ambient color temperature: " + ambientColorTemperature + " => " + mAmbientColorTemperatureOverride);
        }
        ambientColorTemperature = mAmbientColorTemperatureOverride;
    }
    if (ambientColorTemperature == -1.0f || mThrottler.throttle(ambientColorTemperature)) {
        return;
    }
    if (mLoggingEnabled) {
        Slog.d(TAG, "pending ambient color temperature: " + ambientColorTemperature);
    }
    mPendingAmbientColorTemperature = ambientColorTemperature;
    if (mCallbacks != null) {
        mCallbacks.updateWhiteBalance();
    }
}