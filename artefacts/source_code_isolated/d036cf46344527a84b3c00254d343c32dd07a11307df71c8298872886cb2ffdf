public static PrecomputedText create(@NonNull CharSequence text, @NonNull Params params){
    ParagraphInfo[] paraInfo = null;
    if (text instanceof PrecomputedText) {
        final PrecomputedText hintPct = (PrecomputedText) text;
        final PrecomputedText.Params hintParams = hintPct.getParams();
        @Params.CheckResultUsableResult
        final int checkResult = hintParams.checkResultUsable(params.mPaint, params.mTextDir, params.mBreakStrategy, params.mHyphenationFrequency);
        switch(checkResult) {
            case Params.USABLE:
                return hintPct;
            case Params.NEED_RECOMPUTE:
                if (params.getBreakStrategy() == hintParams.getBreakStrategy() && params.getHyphenationFrequency() == hintParams.getHyphenationFrequency()) {
                    paraInfo = createMeasuredParagraphsFromPrecomputedText(hintPct, params, true);
                }
                break;
            case Params.UNUSABLE:
        }
    }
    if (paraInfo == null) {
        paraInfo = createMeasuredParagraphs(text, params, 0, text.length(), true);
    }
    return new PrecomputedText(text, 0, text.length(), params, paraInfo);
}