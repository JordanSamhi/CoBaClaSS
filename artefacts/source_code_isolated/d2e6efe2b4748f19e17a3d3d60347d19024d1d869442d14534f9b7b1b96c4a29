public void dump(final IndentingPrintWriter pw){
    pw.print(TAG);
    pw.println(":");
    pw.increaseIndent();
    synchronized (mLock) {
        super.dump(pw);
        pw.println();
        pw.println("Instantaneous events:");
        pw.increaseIndent();
        mEventTimes.forEach((userId, pkgName, tag, events) -> {
            if (events.size() > 0) {
                pw.print(string(userId, pkgName, tag));
                pw.println(":");
                pw.increaseIndent();
                pw.print(events.get(0));
                for (int i = 1; i < events.size(); ++i) {
                    pw.print(", ");
                    pw.print(events.get(i));
                }
                pw.decreaseIndent();
                pw.println();
            }
        });
        pw.decreaseIndent();
        pw.println();
        pw.println("Cached execution stats:");
        pw.increaseIndent();
        mExecutionStatsCache.forEach((userId, pkgName, tag, stats) -> {
            if (stats != null) {
                pw.print(string(userId, pkgName, tag));
                pw.println(":");
                pw.increaseIndent();
                pw.println(stats);
                pw.decreaseIndent();
            }
        });
        pw.decreaseIndent();
        pw.println();
        pw.println("Limits:");
        pw.increaseIndent();
        final int numCategories = mCategoryCountWindowSizesMs.size();
        for (int i = 0; i < numCategories; ++i) {
            final Category category = mCategoryCountWindowSizesMs.keyAt(i);
            pw.print(category);
            pw.print(": ");
            pw.print(mMaxCategoryCounts.get(category));
            pw.print(" events in ");
            pw.println(TimeUtils.formatDuration(mCategoryCountWindowSizesMs.get(category)));
        }
        pw.decreaseIndent();
    }
    pw.decreaseIndent();
}