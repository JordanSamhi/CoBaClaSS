public void deselectRoute(@NonNull MediaRoute2Info route){
    Objects.requireNonNull(route, "route must not be null");
    if (isReleased()) {
        Log.w(TAG, "deselectRoute: called on released controller. Ignoring.");
        return;
    }
    List<MediaRoute2Info> selectedRoutes = getSelectedRoutes();
    if (!checkRouteListContainsRouteId(selectedRoutes, route.getId())) {
        Log.w(TAG, "Ignoring deselecting a route that is not selected. route=" + route);
        return;
    }
    List<MediaRoute2Info> deselectableRoutes = getDeselectableRoutes();
    if (!checkRouteListContainsRouteId(deselectableRoutes, route.getId())) {
        Log.w(TAG, "Ignoring deselecting a non-deselectable route=" + route);
        return;
    }
    MediaRouter2Stub stub;
    synchronized (sRouterLock) {
        stub = mStub;
    }
    if (stub != null) {
        try {
            mMediaRouterService.deselectRouteWithRouter2(stub, getId(), route);
        } catch (RemoteException ex) {
            Log.e(TAG, "Unable to deselect route from session.", ex);
        }
    }
}