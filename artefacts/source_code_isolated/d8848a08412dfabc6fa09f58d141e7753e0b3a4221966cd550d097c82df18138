public static OutputStream newOutputStream(final AsynchronousByteChannel ch){
    checkNotNull(ch, "ch");
    return new OutputStream() {

        private ByteBuffer bb = null;

        private byte[] bs = null;

        private byte[] b1 = null;

        @Override
        public synchronized void write(int b) throws IOException {
            if (b1 == null)
                b1 = new byte[1];
            b1[0] = (byte) b;
            this.write(b1);
        }

        @Override
        public synchronized void write(byte[] bs, int off, int len) throws IOException {
            if ((off < 0) || (off > bs.length) || (len < 0) || ((off + len) > bs.length) || ((off + len) < 0)) {
                throw new IndexOutOfBoundsException();
            } else if (len == 0) {
                return;
            }
            ByteBuffer bb = ((this.bs == bs) ? this.bb : ByteBuffer.wrap(bs));
            bb.limit(Math.min(off + len, bb.capacity()));
            bb.position(off);
            this.bb = bb;
            this.bs = bs;
            boolean interrupted = false;
            try {
                while (bb.remaining() > 0) {
                    try {
                        ch.write(bb).get();
                    } catch (ExecutionException ee) {
                        throw new IOException(ee.getCause());
                    } catch (InterruptedException ie) {
                        interrupted = true;
                    }
                }
            } finally {
                if (interrupted)
                    Thread.currentThread().interrupt();
            }
        }

        @Override
        public void close() throws IOException {
            ch.close();
        }
    };
}