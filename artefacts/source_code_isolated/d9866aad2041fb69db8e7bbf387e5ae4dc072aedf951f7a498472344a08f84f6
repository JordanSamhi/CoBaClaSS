public static void paintRectShadow(ViewGroup parent, Outline outline, float elevation, Canvas canvas, float alpha, float densityDpi){
    if (!validate(elevation, densityDpi)) {
        return;
    }
    int width = parent.getWidth() / SCALE_DOWN;
    int height = parent.getHeight() / SCALE_DOWN;
    Rect rectOriginal = new Rect();
    Rect rectScaled = new Rect();
    if (!outline.getRect(rectScaled) || alpha < MIN_ALPHA) {
        return;
    }
    outline.getRect(rectOriginal);
    rectScaled.left /= SCALE_DOWN;
    rectScaled.right /= SCALE_DOWN;
    rectScaled.top /= SCALE_DOWN;
    rectScaled.bottom /= SCALE_DOWN;
    float radius = outline.getRadius() / SCALE_DOWN;
    if (radius > rectScaled.width() || radius > rectScaled.height()) {
        return;
    }
    alpha = (alpha > 1.0f) ? 1.0f : alpha;
    boolean isOpaque = outline.getAlpha() * alpha == 1.0f;
    float[] poly = getPoly(rectScaled, elevation / SCALE_DOWN, radius);
    AmbientShadowConfig ambientConfig = new AmbientShadowConfig.Builder().setPolygon(poly).setLightSourcePosition((rectScaled.left + rectScaled.right) / 2.0f, (rectScaled.top + rectScaled.bottom) / 2.0f).setEdgeScale(ShadowConstants.AMBIENT_SHADOW_EDGE_SCALE).setShadowBoundRatio(ShadowConstants.AMBIENT_SHADOW_SHADOW_BOUND).setShadowStrength(ShadowConstants.AMBIENT_SHADOW_STRENGTH * alpha).build();
    AmbientShadowTriangulator ambientTriangulator = new AmbientShadowTriangulator(ambientConfig);
    ambientTriangulator.triangulate();
    SpotShadowTriangulator spotTriangulator = null;
    float lightZHeightPx = ShadowConstants.SPOT_SHADOW_LIGHT_Z_HEIGHT_DP * (densityDpi / DisplayMetrics.DENSITY_DEFAULT);
    if (lightZHeightPx - elevation / SCALE_DOWN >= ShadowConstants.SPOT_SHADOW_LIGHT_Z_EPSILON) {
        float lightX = (rectScaled.left + rectScaled.right) / 2;
        float lightY = rectScaled.top;
        int dynamicLightRadius = Math.min(rectScaled.width(), rectScaled.height());
        SpotShadowConfig spotConfig = new SpotShadowConfig.Builder().setLightCoord(lightX, lightY, lightZHeightPx).setLightRadius(dynamicLightRadius).setShadowStrength(ShadowConstants.SPOT_SHADOW_STRENGTH * alpha).setPolygon(poly, poly.length / ShadowConstants.COORDINATE_SIZE).build();
        spotTriangulator = new SpotShadowTriangulator(spotConfig);
        spotTriangulator.triangulate();
    }
    int translateX = 0;
    int translateY = 0;
    int imgW = 0;
    int imgH = 0;
    if (ambientTriangulator.isValid()) {
        float[] shadowBounds = Math3DHelper.flatBound(ambientTriangulator.getVertices(), 2);
        translateX = -(int) Math.floor(shadowBounds[0]);
        translateY = -(int) Math.floor(shadowBounds[1]);
        imgW = (int) Math.ceil(shadowBounds[2] + translateX);
        imgH = (int) Math.ceil(shadowBounds[3] + translateY);
    }
    if (spotTriangulator != null && spotTriangulator.validate()) {
        float[] shadowBounds = Math3DHelper.flatBound(spotTriangulator.getStrips()[0], 3);
        if ((shadowBounds[2] - shadowBounds[0]) > width || (shadowBounds[3] - shadowBounds[1]) > height) {
            spotTriangulator = null;
        }
        translateX = Math.max(-(int) Math.floor(shadowBounds[0]), translateX);
        translateY = Math.max(-(int) Math.floor(shadowBounds[1]), translateY);
        imgW = Math.max((int) Math.ceil(shadowBounds[2] + translateX), imgW);
        imgH = Math.max((int) Math.ceil(shadowBounds[3] + translateY), imgH);
    }
    TriangleBuffer renderer = new TriangleBuffer();
    renderer.setSize(imgW, imgH, 0);
    if (ambientTriangulator.isValid()) {
        Math3DHelper.translate(ambientTriangulator.getVertices(), translateX, translateY, 2);
        renderer.drawTriangles(ambientTriangulator.getIndices(), ambientTriangulator.getVertices(), ambientTriangulator.getColors(), ambientConfig.getShadowStrength());
    }
    if (spotTriangulator != null && spotTriangulator.validate()) {
        float[][] strips = spotTriangulator.getStrips();
        for (int i = 0; i < strips.length; ++i) {
            Math3DHelper.translate(strips[i], translateX, translateY, 3);
            renderer.drawTriangles(strips[i], ShadowConstants.SPOT_SHADOW_STRENGTH * alpha);
        }
    }
    Bitmap img = renderer.createImage();
    drawScaled(canvas, img, translateX, translateY, rectOriginal, radius, isOpaque);
}