public static CharSequence makeSafeForPresentation(@NonNull String unclean, @IntRange(from = 0) int maxCharactersToConsider, @FloatRange(from = 0) float ellipsizeDip, @SafeStringFlags int flags){
    boolean onlyKeepFirstLine = ((flags & SAFE_STRING_FLAG_FIRST_LINE) != 0);
    boolean forceSingleLine = ((flags & SAFE_STRING_FLAG_SINGLE_LINE) != 0);
    boolean trim = ((flags & SAFE_STRING_FLAG_TRIM) != 0);
    Preconditions.checkNotNull(unclean);
    Preconditions.checkArgumentNonnegative(maxCharactersToConsider);
    Preconditions.checkArgumentNonNegative(ellipsizeDip, "ellipsizeDip");
    Preconditions.checkFlagsArgument(flags, SAFE_STRING_FLAG_TRIM | SAFE_STRING_FLAG_SINGLE_LINE | SAFE_STRING_FLAG_FIRST_LINE);
    Preconditions.checkArgument(!(onlyKeepFirstLine && forceSingleLine), "Cannot set SAFE_STRING_FLAG_SINGLE_LINE and SAFE_STRING_FLAG_FIRST_LINE at the" + "same time");
    String shortString;
    if (maxCharactersToConsider > 0) {
        shortString = unclean.substring(0, Math.min(unclean.length(), maxCharactersToConsider));
    } else {
        shortString = unclean;
    }
    StringWithRemovedChars gettingCleaned = new StringWithRemovedChars(Html.fromHtml(shortString).toString());
    int firstNonWhiteSpace = -1;
    int firstTrailingWhiteSpace = -1;
    int uncleanLength = gettingCleaned.length();
    for (int offset = 0; offset < uncleanLength; ) {
        int codePoint = gettingCleaned.codePointAt(offset);
        int type = Character.getType(codePoint);
        int codePointLen = Character.charCount(codePoint);
        boolean isNewline = isNewline(codePoint);
        if (onlyKeepFirstLine && isNewline) {
            gettingCleaned.removeAllCharAfter(offset);
            break;
        } else if (forceSingleLine && isNewline) {
            gettingCleaned.removeRange(offset, offset + codePointLen);
        } else if (type == Character.CONTROL && !isNewline) {
            gettingCleaned.removeRange(offset, offset + codePointLen);
        } else if (trim && !isWhiteSpace(codePoint)) {
            if (firstNonWhiteSpace == -1) {
                firstNonWhiteSpace = offset;
            }
            firstTrailingWhiteSpace = offset + codePointLen;
        }
        offset += codePointLen;
    }
    if (trim) {
        if (firstNonWhiteSpace == -1) {
            gettingCleaned.removeAllCharAfter(0);
        } else {
            if (firstNonWhiteSpace > 0) {
                gettingCleaned.removeAllCharBefore(firstNonWhiteSpace);
            }
            if (firstTrailingWhiteSpace < uncleanLength) {
                gettingCleaned.removeAllCharAfter(firstTrailingWhiteSpace);
            }
        }
    }
    if (ellipsizeDip == 0) {
        return gettingCleaned.toString();
    } else {
        final TextPaint paint = new TextPaint();
        paint.setTextSize(42);
        return TextUtils.ellipsize(gettingCleaned.toString(), paint, ellipsizeDip, TextUtils.TruncateAt.END);
    }
}