public static Object invokeViewMethod(final View view, final Method method, final Object[] args){
    final CountDownLatch latch = new CountDownLatch(1);
    final AtomicReference<Object> result = new AtomicReference<Object>();
    final AtomicReference<Throwable> exception = new AtomicReference<Throwable>();
    view.post(new Runnable() {

        @Override
        public void run() {
            try {
                result.set(method.invoke(view, args));
            } catch (InvocationTargetException e) {
                exception.set(e.getCause());
            } catch (Exception e) {
                exception.set(e);
            }
            latch.countDown();
        }
    });
    try {
        latch.await();
    } catch (InterruptedException e) {
        throw new RuntimeException(e);
    }
    if (exception.get() != null) {
        throw new RuntimeException(exception.get());
    }
    return result.get();
}