public void adjustWindowParamsLw(WindowState win, WindowManager.LayoutParams attrs, int callingPid, int callingUid){
    final boolean isScreenDecor = (attrs.privateFlags & PRIVATE_FLAG_IS_SCREEN_DECOR) != 0;
    if (mScreenDecorWindows.contains(win)) {
        if (!isScreenDecor) {
            mScreenDecorWindows.remove(win);
        }
    } else if (isScreenDecor && hasStatusBarServicePermission(callingPid, callingUid)) {
        mScreenDecorWindows.add(win);
    }
    switch(attrs.type) {
        case TYPE_SYSTEM_OVERLAY:
        case TYPE_SECURE_SYSTEM_OVERLAY:
            attrs.flags |= WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE | WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE;
            attrs.flags &= ~WindowManager.LayoutParams.FLAG_WATCH_OUTSIDE_TOUCH;
            break;
        case TYPE_WALLPAPER:
            attrs.layoutInDisplayCutoutMode = LAYOUT_IN_DISPLAY_CUTOUT_MODE_ALWAYS;
            break;
        case TYPE_NOTIFICATION_SHADE:
            if (mService.mPolicy.isKeyguardOccluded()) {
                attrs.flags &= ~WindowManager.LayoutParams.FLAG_SHOW_WALLPAPER;
            }
            break;
        case TYPE_TOAST:
            if (attrs.hideTimeoutMilliseconds < 0 || attrs.hideTimeoutMilliseconds > TOAST_WINDOW_TIMEOUT) {
                attrs.hideTimeoutMilliseconds = TOAST_WINDOW_TIMEOUT;
            }
            attrs.hideTimeoutMilliseconds = mAccessibilityManager.getRecommendedTimeoutMillis((int) attrs.hideTimeoutMilliseconds, AccessibilityManager.FLAG_CONTENT_TEXT);
            attrs.windowAnimations = com.android.internal.R.style.Animation_Toast;
            if (canToastShowWhenLocked(callingPid)) {
                attrs.flags |= WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED;
            }
            attrs.flags |= WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE;
            break;
        case TYPE_BASE_APPLICATION:
            if (attrs.isFullscreen() && win.mActivityRecord != null && win.mActivityRecord.fillsParent() && (win.mAttrs.privateFlags & PRIVATE_FLAG_FORCE_DRAW_BAR_BACKGROUNDS) != 0 && attrs.getFitInsetsTypes() != 0) {
                throw new RuntimeException("Illegal attributes: Main activity window that isn't" + " translucent trying to fit insets: " + attrs.getFitInsetsTypes() + " attrs=" + attrs);
            }
            break;
    }
}