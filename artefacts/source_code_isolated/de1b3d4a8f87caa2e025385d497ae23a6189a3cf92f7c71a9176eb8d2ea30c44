public final IBinder onBind(@Nullable Intent intent){
    return new IRoleController.Stub() {

        @Override
        public void grantDefaultRoles(RemoteCallback callback) {
            enforceCallerSystemUid("grantDefaultRoles");
            Objects.requireNonNull(callback, "callback cannot be null");
            mWorkerHandler.sendMessage(PooledLambda.obtainMessage(RoleControllerService::grantDefaultRoles, RoleControllerService.this, callback));
        }

        @Override
        public void onAddRoleHolder(String roleName, String packageName, int flags, RemoteCallback callback) {
            enforceCallerSystemUid("onAddRoleHolder");
            Preconditions.checkStringNotEmpty(roleName, "roleName cannot be null or empty");
            Preconditions.checkStringNotEmpty(packageName, "packageName cannot be null or empty");
            Objects.requireNonNull(callback, "callback cannot be null");
            mWorkerHandler.sendMessage(PooledLambda.obtainMessage(RoleControllerService::onAddRoleHolder, RoleControllerService.this, roleName, packageName, flags, callback));
        }

        @Override
        public void onRemoveRoleHolder(String roleName, String packageName, int flags, RemoteCallback callback) {
            enforceCallerSystemUid("onRemoveRoleHolder");
            Preconditions.checkStringNotEmpty(roleName, "roleName cannot be null or empty");
            Preconditions.checkStringNotEmpty(packageName, "packageName cannot be null or empty");
            Objects.requireNonNull(callback, "callback cannot be null");
            mWorkerHandler.sendMessage(PooledLambda.obtainMessage(RoleControllerService::onRemoveRoleHolder, RoleControllerService.this, roleName, packageName, flags, callback));
        }

        @Override
        public void onClearRoleHolders(String roleName, int flags, RemoteCallback callback) {
            enforceCallerSystemUid("onClearRoleHolders");
            Preconditions.checkStringNotEmpty(roleName, "roleName cannot be null or empty");
            Objects.requireNonNull(callback, "callback cannot be null");
            mWorkerHandler.sendMessage(PooledLambda.obtainMessage(RoleControllerService::onClearRoleHolders, RoleControllerService.this, roleName, flags, callback));
        }

        private void enforceCallerSystemUid(@NonNull String methodName) {
            if (Binder.getCallingUid() != Process.SYSTEM_UID) {
                throw new SecurityException("Only the system process can call " + methodName + "()");
            }
        }

        @Override
        public void isApplicationQualifiedForRole(String roleName, String packageName, RemoteCallback callback) {
            enforceCallingPermission(Manifest.permission.MANAGE_ROLE_HOLDERS, null);
            Preconditions.checkStringNotEmpty(roleName, "roleName cannot be null or empty");
            Preconditions.checkStringNotEmpty(packageName, "packageName cannot be null or empty");
            Objects.requireNonNull(callback, "callback cannot be null");
            boolean qualified = onIsApplicationQualifiedForRole(roleName, packageName);
            callback.sendResult(qualified ? Bundle.EMPTY : null);
        }

        @Override
        public void isApplicationVisibleForRole(String roleName, String packageName, RemoteCallback callback) {
            enforceCallingPermission(Manifest.permission.MANAGE_ROLE_HOLDERS, null);
            Preconditions.checkStringNotEmpty(roleName, "roleName cannot be null or empty");
            Preconditions.checkStringNotEmpty(packageName, "packageName cannot be null or empty");
            Objects.requireNonNull(callback, "callback cannot be null");
            boolean visible = onIsApplicationVisibleForRole(roleName, packageName);
            callback.sendResult(visible ? Bundle.EMPTY : null);
        }

        @Override
        public void isRoleVisible(String roleName, RemoteCallback callback) {
            enforceCallingPermission(Manifest.permission.MANAGE_ROLE_HOLDERS, null);
            Preconditions.checkStringNotEmpty(roleName, "roleName cannot be null or empty");
            Objects.requireNonNull(callback, "callback cannot be null");
            boolean visible = onIsRoleVisible(roleName);
            callback.sendResult(visible ? Bundle.EMPTY : null);
        }
    };
}