public boolean removeProvider(int callingUid, boolean privileged, String uniqueId, String fqdn){
    if (uniqueId == null && fqdn == null) {
        mWifiMetrics.incrementNumPasspointProviderUninstallation();
        Log.e(TAG, "Cannot remove provider, both FQDN and unique ID are null");
        return false;
    }
    if (uniqueId != null) {
        mWifiMetrics.incrementNumPasspointProviderUninstallation();
        PasspointProvider provider = mProviders.get(uniqueId);
        if (provider == null) {
            Log.e(TAG, "Config doesn't exist");
            return false;
        }
        return removeProviderInternal(provider, callingUid, privileged);
    }
    ArrayList<PasspointProvider> passpointProviders = new ArrayList<>(mProviders.values());
    int removedProviders = 0;
    int numOfUninstallations = 0;
    for (PasspointProvider provider : passpointProviders) {
        if (!TextUtils.equals(provider.getConfig().getHomeSp().getFqdn(), fqdn)) {
            continue;
        }
        mWifiMetrics.incrementNumPasspointProviderUninstallation();
        numOfUninstallations++;
        if (removeProviderInternal(provider, callingUid, privileged)) {
            removedProviders++;
        }
    }
    if (numOfUninstallations == 0) {
        mWifiMetrics.incrementNumPasspointProviderUninstallation();
    }
    return removedProviders > 0;
}