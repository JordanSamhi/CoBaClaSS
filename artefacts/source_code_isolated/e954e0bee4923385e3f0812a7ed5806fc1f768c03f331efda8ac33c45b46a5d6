public void readAbsolute(Callback callback){
    final int oldMask = StrictMode.allowThreadDiskReadsMask();
    File file = new File(sUidIoFile);
    try (BufferedReader reader = Files.newBufferedReader(file.toPath())) {
        String line;
        while ((line = reader.readLine()) != null) {
            String[] fields = TextUtils.split(line, " ");
            if (fields.length != 11) {
                Slog.e(TAG, "Malformed entry in " + sUidIoFile + ": " + line);
                continue;
            }
            try {
                final String uidStr = fields[0];
                final int uid = Integer.parseInt(fields[0], 10);
                final long fgCharsRead = Long.parseLong(fields[1], 10);
                final long fgCharsWrite = Long.parseLong(fields[2], 10);
                final long fgBytesRead = Long.parseLong(fields[3], 10);
                final long fgBytesWrite = Long.parseLong(fields[4], 10);
                final long bgCharsRead = Long.parseLong(fields[5], 10);
                final long bgCharsWrite = Long.parseLong(fields[6], 10);
                final long bgBytesRead = Long.parseLong(fields[7], 10);
                final long bgBytesWrite = Long.parseLong(fields[8], 10);
                final long fgFsync = Long.parseLong(fields[9], 10);
                final long bgFsync = Long.parseLong(fields[10], 10);
                callback.onUidStorageStats(uid, fgCharsRead, fgCharsWrite, fgBytesRead, fgBytesWrite, bgCharsRead, bgCharsWrite, bgBytesRead, bgBytesWrite, fgFsync, bgFsync);
            } catch (NumberFormatException e) {
                Slog.e(TAG, "Could not parse entry in " + sUidIoFile + ": " + e.getMessage());
            }
        }
    } catch (IOException e) {
        Slog.e(TAG, "Failed to read " + sUidIoFile + ": " + e.getMessage());
    } finally {
        StrictMode.setThreadPolicyMask(oldMask);
    }
}