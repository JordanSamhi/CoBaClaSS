public void addServiceResults(DisplayResolveInfo origTarget, List<ChooserTarget> targets, @ChooserActivity.ShareTargetType int targetType, Map<ChooserTarget, ShortcutInfo> directShareToShortcutInfos, List<ChooserActivity.ChooserTargetServiceConnection> pendingChooserTargetServiceConnections){
    if (DEBUG) {
        Log.d(TAG, "addServiceResults " + origTarget.getResolvedComponentName() + ", " + targets.size() + " targets");
    }
    if (mAppendDirectShareEnabled) {
        parkTargetIntoMemory(origTarget, targets, targetType, directShareToShortcutInfos, pendingChooserTargetServiceConnections);
        return;
    }
    if (targets.size() == 0) {
        return;
    }
    final float baseScore = getBaseScore(origTarget, targetType);
    Collections.sort(targets, mBaseTargetComparator);
    final boolean isShortcutResult = (targetType == TARGET_TYPE_SHORTCUTS_FROM_SHORTCUT_MANAGER || targetType == TARGET_TYPE_SHORTCUTS_FROM_PREDICTION_SERVICE);
    final int maxTargets = isShortcutResult ? mMaxShortcutTargetsPerApp : MAX_CHOOSER_TARGETS_PER_APP;
    float lastScore = 0;
    boolean shouldNotify = false;
    for (int i = 0, count = Math.min(targets.size(), maxTargets); i < count; i++) {
        final ChooserTarget target = targets.get(i);
        float targetScore = target.getScore();
        targetScore *= baseScore;
        if (i > 0 && targetScore >= lastScore) {
            targetScore = lastScore * 0.95f;
        }
        UserHandle userHandle = getUserHandle();
        Context contextAsUser = mContext.createContextAsUser(userHandle, 0);
        boolean isInserted = insertServiceTarget(new SelectableTargetInfo(contextAsUser, origTarget, target, targetScore, mSelectableTargetInfoCommunicator, (isShortcutResult ? directShareToShortcutInfos.get(target) : null)));
        if (isInserted && isShortcutResult) {
            mNumShortcutResults++;
        }
        shouldNotify |= isInserted;
        if (DEBUG) {
            Log.d(TAG, " => " + target.toString() + " score=" + targetScore + " base=" + target.getScore() + " lastScore=" + lastScore + " baseScore=" + baseScore);
        }
        lastScore = targetScore;
    }
    if (shouldNotify) {
        notifyDataSetChanged();
    }
}