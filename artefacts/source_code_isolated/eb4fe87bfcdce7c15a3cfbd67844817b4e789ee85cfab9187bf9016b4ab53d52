public void render(@NonNull Bitmap destination, @Nullable Rect destClip, @Nullable Matrix transform, @RenderMode int renderMode){
    if (mNativePage == 0) {
        throw new NullPointerException();
    }
    destination = Preconditions.checkNotNull(destination, "bitmap null");
    if (destination.getConfig() != Config.ARGB_8888) {
        throw new IllegalArgumentException("Unsupported pixel format");
    }
    if (destClip != null) {
        if (destClip.left < 0 || destClip.top < 0 || destClip.right > destination.getWidth() || destClip.bottom > destination.getHeight()) {
            throw new IllegalArgumentException("destBounds not in destination");
        }
    }
    if (transform != null && !transform.isAffine()) {
        throw new IllegalArgumentException("transform not affine");
    }
    if (renderMode != RENDER_MODE_FOR_PRINT && renderMode != RENDER_MODE_FOR_DISPLAY) {
        throw new IllegalArgumentException("Unsupported render mode");
    }
    if (renderMode == RENDER_MODE_FOR_PRINT && renderMode == RENDER_MODE_FOR_DISPLAY) {
        throw new IllegalArgumentException("Only single render mode supported");
    }
    final int contentLeft = (destClip != null) ? destClip.left : 0;
    final int contentTop = (destClip != null) ? destClip.top : 0;
    final int contentRight = (destClip != null) ? destClip.right : destination.getWidth();
    final int contentBottom = (destClip != null) ? destClip.bottom : destination.getHeight();
    if (transform == null) {
        int clipWidth = contentRight - contentLeft;
        int clipHeight = contentBottom - contentTop;
        transform = new Matrix();
        transform.postScale((float) clipWidth / getWidth(), (float) clipHeight / getHeight());
        transform.postTranslate(contentLeft, contentTop);
    }
    final long transformPtr = transform.native_instance;
    synchronized (sPdfiumLock) {
        nativeRenderPage(mNativeDocument, mNativePage, destination.getNativeInstance(), contentLeft, contentTop, contentRight, contentBottom, transformPtr, renderMode);
    }
}