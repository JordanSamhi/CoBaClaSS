public void handleMessage(Message msg){
    AsyncResult ar;
    switch(msg.what) {
        case EVENT_SET_NETWORK_MANUAL_COMPLETE:
        case EVENT_SET_NETWORK_AUTOMATIC_COMPLETE:
            handleSetSelectNetwork((AsyncResult) msg.obj);
            return;
    }
    switch(msg.what) {
        case EVENT_CALL_RING:
            Rlog.d(LOG_TAG, "Event EVENT_CALL_RING Received state=" + getState());
            ar = (AsyncResult) msg.obj;
            if (ar.exception == null) {
                PhoneConstants.State state = getState();
                if ((!mDoesRilSendMultipleCallRing) && ((state == PhoneConstants.State.RINGING) || (state == PhoneConstants.State.IDLE))) {
                    mCallRingContinueToken += 1;
                    sendIncomingCallRingNotification(mCallRingContinueToken);
                } else {
                    notifyIncomingRing();
                }
            }
            break;
        case EVENT_CALL_RING_CONTINUE:
            Rlog.d(LOG_TAG, "Event EVENT_CALL_RING_CONTINUE Received state=" + getState());
            if (getState() == PhoneConstants.State.RINGING) {
                sendIncomingCallRingNotification(msg.arg1);
            }
            break;
        case EVENT_ICC_CHANGED:
            onUpdateIccAvailability();
            break;
        case EVENT_INITIATE_SILENT_REDIAL:
            Rlog.d(LOG_TAG, "Event EVENT_INITIATE_SILENT_REDIAL Received");
            ar = (AsyncResult) msg.obj;
            if ((ar.exception == null) && (ar.result != null)) {
                String dialString = (String) ar.result;
                if (TextUtils.isEmpty(dialString))
                    return;
                try {
                    Connection cn = dialInternal(dialString, new DialArgs.Builder().build());
                    Rlog.d(LOG_TAG, "Notify redial connection changed cn: " + cn);
                    if (mImsPhone != null) {
                        mImsPhone.notifyRedialConnectionChanged(cn);
                    }
                } catch (CallStateException e) {
                    Rlog.e(LOG_TAG, "silent redial failed: " + e);
                    if (mImsPhone != null) {
                        mImsPhone.notifyRedialConnectionChanged(null);
                    }
                }
            }
            break;
        case EVENT_SRVCC_STATE_CHANGED:
            ar = (AsyncResult) msg.obj;
            if (ar.exception == null) {
                handleSrvccStateChanged((int[]) ar.result);
            } else {
                Rlog.e(LOG_TAG, "Srvcc exception: " + ar.exception);
            }
            break;
        case EVENT_UNSOL_OEM_HOOK_RAW:
            break;
        case EVENT_CONFIG_LCE:
            ar = (AsyncResult) msg.obj;
            if (ar.exception != null) {
                Rlog.d(LOG_TAG, "config LCE service failed: " + ar.exception);
            } else {
                final ArrayList<Integer> statusInfo = (ArrayList<Integer>) ar.result;
                mLceStatus = statusInfo.get(0);
            }
            break;
        case EVENT_CHECK_FOR_NETWORK_AUTOMATIC:
            {
                onCheckForNetworkSelectionModeAutomatic(msg);
                break;
            }
        case EVENT_ALL_DATA_DISCONNECTED:
            if (areAllDataDisconnected()) {
                mAllDataDisconnectedRegistrants.notifyRegistrants();
            }
            break;
        default:
            throw new RuntimeException("unexpected event not handled");
    }
}