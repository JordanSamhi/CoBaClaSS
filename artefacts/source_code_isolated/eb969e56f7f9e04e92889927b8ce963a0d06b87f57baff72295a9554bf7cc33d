public static void filterByLanguage(@NonNull List<T> sources, @NonNull LocaleExtractor<T> extractor, @NonNull LocaleList preferredLocales, @NonNull ArrayList<T> dest){
    if (preferredLocales.isEmpty()) {
        return;
    }
    final int numPreferredLocales = preferredLocales.size();
    final ArrayMap<String, ScoreEntry> scoreboard = new ArrayMap<>();
    final byte[] score = new byte[numPreferredLocales];
    final ULocale[] preferredULocaleCache = new ULocale[numPreferredLocales];
    final int sourceSize = sources.size();
    for (int i = 0; i < sourceSize; ++i) {
        final Locale locale = extractor.get(sources.get(i));
        if (locale == null) {
            continue;
        }
        boolean canSkip = true;
        for (int j = 0; j < numPreferredLocales; ++j) {
            final Locale preferredLocale = preferredLocales.get(j);
            if (!TextUtils.equals(locale.getLanguage(), preferredLocale.getLanguage())) {
                score[j] = 0;
                continue;
            }
            if (preferredULocaleCache[j] == null) {
                preferredULocaleCache[j] = ULocale.addLikelySubtags(ULocale.forLocale(preferredLocale));
            }
            score[j] = calculateMatchingSubScore(preferredULocaleCache[j], ULocale.addLikelySubtags(ULocale.forLocale(locale)));
            if (canSkip && score[j] != 0) {
                canSkip = false;
            }
        }
        if (canSkip) {
            continue;
        }
        final String lang = locale.getLanguage();
        final ScoreEntry bestScore = scoreboard.get(lang);
        if (bestScore == null) {
            scoreboard.put(lang, new ScoreEntry(score, i));
        } else {
            bestScore.updateIfBetter(score, i);
        }
    }
    final int numEntries = scoreboard.size();
    final ScoreEntry[] result = new ScoreEntry[numEntries];
    for (int i = 0; i < numEntries; ++i) {
        result[i] = scoreboard.valueAt(i);
    }
    Arrays.sort(result);
    for (final ScoreEntry entry : result) {
        dest.add(sources.get(entry.mIndex));
    }
}