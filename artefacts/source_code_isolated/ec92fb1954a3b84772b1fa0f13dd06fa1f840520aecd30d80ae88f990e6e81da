public final void requestDirectActions(@NonNull ActivityId activityId, @Nullable CancellationSignal cancellationSignal, @NonNull @CallbackExecutor Executor resultExecutor, @NonNull Consumer<List<DirectAction>> callback){
    Preconditions.checkNotNull(activityId);
    Preconditions.checkNotNull(resultExecutor);
    Preconditions.checkNotNull(callback);
    if (mToken == null) {
        throw new IllegalStateException("Can't call before onCreate()");
    }
    if (cancellationSignal != null) {
        cancellationSignal.throwIfCanceled();
    }
    final RemoteCallback cancellationCallback = (cancellationSignal != null) ? new RemoteCallback(b -> {
        if (b != null) {
            final IBinder cancellation = b.getBinder(VoiceInteractor.KEY_CANCELLATION_SIGNAL);
            if (cancellation != null) {
                cancellationSignal.setRemote(ICancellationSignal.Stub.asInterface(cancellation));
            }
        }
    }) : null;
    try {
        mSystemService.requestDirectActions(mToken, activityId.getTaskId(), activityId.getAssistToken(), cancellationCallback, new RemoteCallback(createSafeResultListener((result) -> {
            List<DirectAction> list;
            if (result == null) {
                list = Collections.emptyList();
            } else {
                final ParceledListSlice<DirectAction> pls = result.getParcelable(DirectAction.KEY_ACTIONS_LIST);
                if (pls != null) {
                    final List<DirectAction> receivedList = pls.getList();
                    list = (receivedList != null) ? receivedList : Collections.emptyList();
                } else {
                    list = Collections.emptyList();
                }
            }
            resultExecutor.execute(() -> callback.accept(list));
        })));
    } catch (RemoteException e) {
        e.rethrowFromSystemServer();
    }
}