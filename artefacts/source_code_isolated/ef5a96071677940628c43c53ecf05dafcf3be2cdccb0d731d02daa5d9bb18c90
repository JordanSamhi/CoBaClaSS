public void updateProcStateCpuTimes(boolean onBattery, boolean onBatteryScreenOff){
    final SparseIntArray uidStates;
    synchronized (BatteryStatsImpl.this) {
        if (!mConstants.TRACK_CPU_TIMES_BY_PROC_STATE) {
            return;
        }
        if (!initKernelSingleUidTimeReaderLocked()) {
            return;
        }
        if (mIsPerProcessStateCpuDataStale) {
            mPendingUids.clear();
            return;
        }
        if (mPendingUids.size() == 0) {
            return;
        }
        uidStates = mPendingUids.clone();
        mPendingUids.clear();
    }
    for (int i = uidStates.size() - 1; i >= 0; --i) {
        final int uid = uidStates.keyAt(i);
        final int procState = uidStates.valueAt(i);
        final int[] isolatedUids;
        final Uid u;
        synchronized (BatteryStatsImpl.this) {
            u = getAvailableUidStatsLocked(uid);
            if (u == null) {
                continue;
            }
            if (u.mChildUids == null) {
                isolatedUids = null;
            } else {
                isolatedUids = u.mChildUids.toArray();
                for (int j = isolatedUids.length - 1; j >= 0; --j) {
                    isolatedUids[j] = u.mChildUids.get(j);
                }
            }
        }
        long[] cpuTimesMs = mKernelSingleUidTimeReader.readDeltaMs(uid);
        if (isolatedUids != null) {
            for (int j = isolatedUids.length - 1; j >= 0; --j) {
                cpuTimesMs = addCpuTimes(cpuTimesMs, mKernelSingleUidTimeReader.readDeltaMs(isolatedUids[j]));
            }
        }
        if (onBattery && cpuTimesMs != null) {
            synchronized (BatteryStatsImpl.this) {
                u.addProcStateTimesMs(procState, cpuTimesMs, onBattery);
                u.addProcStateScreenOffTimesMs(procState, cpuTimesMs, onBatteryScreenOff);
            }
        }
    }
}