public static List<Integer> getAvailableChannelFreqsForBand(@BandType int band, WifiNative wifiNative, Resources resources){
    if (!isBandValid(band) || isMultiband(band)) {
        return null;
    }
    List<Integer> configuredList;
    int scannerBand;
    switch(band) {
        case SoftApConfiguration.BAND_2GHZ:
            configuredList = convertStringToChannelList(resources.getString(R.string.config_wifiSoftap2gChannelList));
            scannerBand = WifiScanner.WIFI_BAND_24_GHZ;
            break;
        case SoftApConfiguration.BAND_5GHZ:
            configuredList = convertStringToChannelList(resources.getString(R.string.config_wifiSoftap5gChannelList));
            scannerBand = WifiScanner.WIFI_BAND_5_GHZ;
            break;
        case SoftApConfiguration.BAND_6GHZ:
            configuredList = convertStringToChannelList(resources.getString(R.string.config_wifiSoftap6gChannelList));
            scannerBand = WifiScanner.WIFI_BAND_6_GHZ;
            break;
        default:
            return null;
    }
    int[] regulatoryArray = wifiNative.getChannelsForBand(scannerBand);
    List<Integer> regulatoryList = new ArrayList<Integer>();
    for (int freq : regulatoryArray) {
        regulatoryList.add(freq);
    }
    if (configuredList == null || configuredList.isEmpty()) {
        return regulatoryList;
    }
    List<Integer> filteredList = new ArrayList<Integer>();
    for (int channel : configuredList) {
        int channelFreq = convertChannelToFrequency(channel, band);
        if (regulatoryList.contains(channelFreq)) {
            filteredList.add(channelFreq);
        }
    }
    return filteredList;
}