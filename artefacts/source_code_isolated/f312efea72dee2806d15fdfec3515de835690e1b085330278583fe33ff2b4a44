public static ArrayList<String> fragmentText(String text, int subId){
    final boolean isCdma = useCdmaFormatForMoSms(subId);
    TextEncodingDetails ted = isCdma ? com.android.internal.telephony.cdma.SmsMessage.calculateLength(text, false, true) : com.android.internal.telephony.gsm.SmsMessage.calculateLength(text, false);
    int limit;
    if (ted.codeUnitSize == SmsConstants.ENCODING_7BIT) {
        int udhLength;
        if (ted.languageTable != 0 && ted.languageShiftTable != 0) {
            udhLength = GsmAlphabet.UDH_SEPTET_COST_TWO_SHIFT_TABLES;
        } else if (ted.languageTable != 0 || ted.languageShiftTable != 0) {
            udhLength = GsmAlphabet.UDH_SEPTET_COST_ONE_SHIFT_TABLE;
        } else {
            udhLength = 0;
        }
        if (ted.msgCount > 1) {
            udhLength += GsmAlphabet.UDH_SEPTET_COST_CONCATENATED_MESSAGE;
        }
        if (udhLength != 0) {
            udhLength += GsmAlphabet.UDH_SEPTET_COST_LENGTH;
        }
        limit = SmsConstants.MAX_USER_DATA_SEPTETS - udhLength;
    } else {
        if (ted.msgCount > 1) {
            limit = SmsConstants.MAX_USER_DATA_BYTES_WITH_HEADER;
            if (!hasEmsSupport() && ted.msgCount < 10) {
                limit -= 2;
            }
        } else {
            limit = SmsConstants.MAX_USER_DATA_BYTES;
        }
    }
    String newMsgBody = null;
    Resources r = Resources.getSystem();
    if (r.getBoolean(com.android.internal.R.bool.config_sms_force_7bit_encoding)) {
        newMsgBody = Sms7BitEncodingTranslator.translate(text, isCdma);
    }
    if (TextUtils.isEmpty(newMsgBody)) {
        newMsgBody = text;
    }
    int pos = 0;
    int textLen = newMsgBody.length();
    ArrayList<String> result = new ArrayList<String>(ted.msgCount);
    while (pos < textLen) {
        int nextPos = 0;
        if (ted.codeUnitSize == SmsConstants.ENCODING_7BIT) {
            if (isCdma && ted.msgCount == 1) {
                nextPos = pos + Math.min(limit, textLen - pos);
            } else {
                nextPos = GsmAlphabet.findGsmSeptetLimitIndex(newMsgBody, pos, limit, ted.languageTable, ted.languageShiftTable);
            }
        } else {
            nextPos = SmsMessageBase.findNextUnicodePosition(pos, limit, newMsgBody);
        }
        if ((nextPos <= pos) || (nextPos > textLen)) {
            Rlog.e(LOG_TAG, "fragmentText failed (" + pos + " >= " + nextPos + " or " + nextPos + " >= " + textLen + ")");
            break;
        }
        result.add(newMsgBody.substring(pos, nextPos));
        pos = nextPos;
    }
    return result;
}