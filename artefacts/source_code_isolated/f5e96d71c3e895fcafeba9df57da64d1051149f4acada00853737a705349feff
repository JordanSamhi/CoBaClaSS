public void generateVertex(){
    float[] polygon = mConfig.getPolygon();
    float cx = mConfig.getLightSourcePosition()[0];
    float cy = mConfig.getLightSourcePosition()[1];
    int polygonLength = polygon.length / 3;
    float opacity = .8f * (0.5f / (mConfig.getEdgeScale() / 10f));
    int trShift = 0;
    for (int i = 0; i < polygonLength; ++i, trShift += 6) {
        int shift = i * 4;
        int colorShift = i * 8;
        int idxShift = i * 2;
        float px = polygon[3 * i + 0];
        float py = polygon[3 * i + 1];
        mVertex[shift + 0] = px;
        mVertex[shift + 1] = py;
        float h = polygon[3 * i + 2] * mConfig.getShadowBoundRatio();
        mVertex[shift + 2] = cx + h * (px - cx);
        mVertex[shift + 3] = cy + h * (py - cy);
        mColor[colorShift + 3] = opacity;
        mIndex[trShift + 0] = idxShift + 0;
        mIndex[trShift + 1] = idxShift + 1;
        mIndex[trShift + 2] = idxShift + 2;
        mIndex[trShift + 3] = idxShift + 1;
        mIndex[trShift + 4] = idxShift + 2;
        mIndex[trShift + 5] = idxShift + 3;
    }
    mIndex[trShift - 1] = 1;
    mIndex[trShift - 2] = 0;
    mIndex[trShift - 4] = 0;
    for (int i = 1; i < polygonLength - 1; ++i, trShift += 3) {
        mIndex[trShift + 0] = 0;
        mIndex[trShift + 1] = 2 * i;
        mIndex[trShift + 2] = 2 * (i + 1);
    }
}