public static Stream<Path> find(Path start, int maxDepth, BiPredicate<Path, BasicFileAttributes> matcher, FileVisitOption... options) throws IOException{
    FileTreeIterator iterator = new FileTreeIterator(start, maxDepth, options);
    try {
        return StreamSupport.stream(Spliterators.spliteratorUnknownSize(iterator, Spliterator.DISTINCT), false).onClose(iterator::close).filter(entry -> matcher.test(entry.file(), entry.attributes())).map(entry -> entry.file());
    } catch (Error | RuntimeException e) {
        iterator.close();
        throw e;
    }
}