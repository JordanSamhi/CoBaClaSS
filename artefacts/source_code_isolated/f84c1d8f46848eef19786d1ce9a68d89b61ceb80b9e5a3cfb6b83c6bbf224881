public float getLineRight(int line){
    final int dir = getParagraphDirection(line);
    Alignment align = getParagraphAlignment(line);
    if (align == null) {
        align = Alignment.ALIGN_CENTER;
    }
    final Alignment resultAlign;
    switch(align) {
        case ALIGN_NORMAL:
            resultAlign = dir == DIR_RIGHT_TO_LEFT ? Alignment.ALIGN_RIGHT : Alignment.ALIGN_LEFT;
            break;
        case ALIGN_OPPOSITE:
            resultAlign = dir == DIR_RIGHT_TO_LEFT ? Alignment.ALIGN_LEFT : Alignment.ALIGN_RIGHT;
            break;
        case ALIGN_CENTER:
            resultAlign = Alignment.ALIGN_CENTER;
            break;
        case ALIGN_RIGHT:
            resultAlign = Alignment.ALIGN_RIGHT;
            break;
        default:
            resultAlign = Alignment.ALIGN_LEFT;
    }
    switch(resultAlign) {
        case ALIGN_CENTER:
            final int right = getParagraphRight(line);
            final float max = getLineMax(line);
            return (float) Math.ceil(right - (mWidth - max) / 2);
        case ALIGN_RIGHT:
            return mWidth;
        default:
            return getLineMax(line);
    }
}