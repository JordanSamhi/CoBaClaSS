<android.inputmethodservice.InputMethodService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_ 
<android.content.ContextWrapper: void startActivities(android.content.Intent[],android.os.Bundle)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.telephony.CellBroadcastIntents: void sendSmsCbReceivedBroadcast(android.content.Context,android.os.UserHandle,android.telephony.SmsCbMessage,android.content.BroadcastReceiver,android.os.Handler,int,int)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.telephony.Rlog: int d(java.lang.String,java.lang.String)> -> _SINK_ 
<android.view.WindowManagerGlobal: void dumpGfxInfo(java.io.FileDescriptor,java.lang.String[])> -> _SINK_ 
<android.telephony.euicc.EuiccManager: void startResolutionActivity(android.app.Activity,int,android.content.Intent,android.app.PendingIntent)> -> _SINK_ 
<android.os.FileUtils: byte[] digest(java.io.FileDescriptor,java.lang.String)> -> _SINK_ 
<android.content.ContextWrapper: void startActivity(android.content.Intent)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.os.FileUtils: void closeQuietly(java.io.FileDescriptor)> -> _SINK_ 
<com.android.internal.telephony.ICarrierConfigLoader$Stub$Proxy: void overrideConfig(int,android.os.PersistableBundle,boolean)> -> _SINK_ 
<android.app.ContextImpl: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> -> _SINK_ 
<android.app.PendingIntent: void send(int)> -> _SINK_ 
<com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingActive(int[],com.android.internal.app.IAppOpsActiveCallback)> -> _SINK_ 
<android.telephony.CellInfo: void writeToParcel(android.os.Parcel,int,int)> -> _SINK_ 
<android.content.ContextWrapper: void sendStickyBroadcast(android.content.Intent)> -> _SINK_ 
<com.android.internal.appwidget.IAppWidgetService$Default: void updateAppWidgetOptions(java.lang.String,int,android.os.Bundle)> -> _SINK_ 
<android.inputmethodservice.AbstractInputMethodService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_ 
<android.util.Log: int v(java.lang.String,java.lang.String)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.text.PackedIntVector: void insertAt(int,int[])> -> _SINK_ 
<android.app.IActivityTaskManager$Default: int startVoiceActivity(java.lang.String,java.lang.String,int,int,android.content.Intent,java.lang.String,android.service.voice.IVoiceInteractionSession,com.android.internal.app.IVoiceInteractor,int,android.app.ProfilerInfo,android.os.Bundle,int)> -> _SINK_ 
<com.android.internal.os.TransferPipe: void goDump(android.os.IBinder,java.io.FileDescriptor,java.lang.String[],long)> -> _SINK_ 
<android.content.pm.ICrossProfileApps$Stub$Proxy: void startActivityAsUserByIntent(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,int,android.os.IBinder,android.os.Bundle)> -> _SINK_ 
<android.net.lowpan.ILowpanInterface$Stub$Proxy: void startEnergyScan(java.util.Map,android.net.lowpan.ILowpanEnergyScanCallback)> -> _SINK_ 
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listenWithFeature(java.lang.String,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)> -> _SINK_ 
<android.os.Binder: void doDump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_ 
<android.media.MediaPlayer: void addTimedTextSource(java.io.FileDescriptor,java.lang.String)> -> _SINK_ 
<android.telephony.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List,long)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.bluetooth.IBluetoothGatt$Stub$Proxy: void startScanForIntent(android.app.PendingIntent,android.bluetooth.le.ScanSettings,java.util.List,java.lang.String,java.lang.String)> -> _SINK_ 
<android.telephony.ims.feature.RcsFeature$RcsFeatureBinder: void sendCapabilityRequest(android.net.Uri,android.telephony.ims.RcsContactUceCapability,int)> -> _SINK_ 
<android.app.IApplicationThread$Default: void updatePackageCompatibilityInfo(java.lang.String,android.content.res.CompatibilityInfo)> -> _SINK_ 
<android.os.IInstalld$Default: void installApkVerity(java.lang.String,java.io.FileDescriptor,int)> -> _SINK_ 
<android.permission._$$Lambda$PermissionControllerManager$QKXRZuAcOE3JWRlH0VmPcShX4LM: void <init>(java.io.FileDescriptor,java.lang.String[])> -> _SINK_ 
<com.android.internal.app.IVoiceInteractor$Stub$Proxy: com.android.internal.app.IVoiceInteractorRequest startConfirmation(java.lang.String,com.android.internal.app.IVoiceInteractorCallback,android.app.VoiceInteractor$Prompt,android.os.Bundle)> -> _SINK_ 
<com.android.internal.telephony.ITelephony$Stub$Proxy: void enqueueSmsPickResult(java.lang.String,java.lang.String,com.android.internal.telephony.IIntegerConsumer)> -> _SINK_ 
<android.app.VoiceInteractor$ConfirmationRequest: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_ 
<android.util.apk.MemoryMappedFileDataSource: void <init>(java.io.FileDescriptor,long,long)> -> _SINK_ 
<android.net.lowpan.LowpanCommissioningSession: void sendToCommissioner(byte[])> -> _SINK_ 
<com.android.internal.os.AndroidPrintStream: void log(java.lang.String)> -> _SINK_ 
<com.android.internal.telephony.ITelephony$Stub$Proxy: void refreshUiccProfile(int)> -> _SINK_ 
<android.content.ClipData$Item: void <init>(java.lang.CharSequence,java.lang.String,android.content.Intent,android.net.Uri)> -> _SINK_ 
<android.content.pm.ICrossProfileApps$Stub$Proxy: void startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.ComponentName,int,boolean)> -> _SINK_ 
<android.telephony.TelephonyManager: void sendVisualVoicemailSms(java.lang.String,int,java.lang.String,android.app.PendingIntent)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.view.inputmethod.InputMethodManager: void doDump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_ 
<com.android.internal.logging.AndroidHandler: void publish(java.util.logging.LogRecord)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<com.android.ims.internal.IImsCallSession$Default: void sendDtmf(char,android.os.Message)> -> _SINK_ 
<com.android.internal.util.AsyncChannel: android.os.Message sendMessageSynchronously(int,java.lang.Object)> -> _SINK_ 
<com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingMode(int,java.lang.String,com.android.internal.app.IAppOpsCallback)> -> _SINK_ 
<android.app.FragmentManagerImpl: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_ 
<android.bluetooth.BluetoothGatt: boolean writeCharacteristic(android.bluetooth.BluetoothGattCharacteristic)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.net.INetworkScoreCache$Stub$Proxy: void updateScores(java.util.List)> -> _SINK_ 
<android.os.IVold$Stub$Proxy: void startCheckpoint(int)> -> _SINK_ 
<android.telephony.AnomalyReporter: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_ 
<android.graphics.fonts.Font: void <init>(long,java.nio.ByteBuffer,java.io.File,android.graphics.fonts.FontStyle,int,android.graphics.fonts.FontVariationAxis[],java.lang.String,android.graphics.fonts.Font$1)> -> _SINK_ 
<android.telephony.Rlog: int i(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_ 
<com.android.internal.telephony.IMms$Stub$Proxy: void downloadMessage(int,java.lang.String,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent,long)> -> _SINK_ 
<android.app.Activity: void performNewIntent(android.content.Intent)> -> _SINK_ 
<android.os.MessageQueue: void removeOnFileDescriptorEventListener(java.io.FileDescriptor)> -> _SINK_ 
<android.app.ContextImpl: void sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,int,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> -> _SINK_ 
<android.app.VoiceInteractor$CommandRequest: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_ 
<android.bluetooth.BluetoothHeadset: boolean sendVendorSpecificResultCode(android.bluetooth.BluetoothDevice,java.lang.String,java.lang.String)> -> _SINK_ 
<android.hardware.cas.V1_2.ICas$Proxy: int sendSessionEvent(java.util.ArrayList,int,int,java.util.ArrayList)> -> _SINK_ 
<android.hardware.hdmi.HdmiClient: void sendVolumeKeyEvent(int,boolean)> -> _SINK_ 
<android.hardware.location.ContextHubClient: int sendMessageToNanoApp(android.hardware.location.NanoAppMessage)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.util.Slog: int v(java.lang.String,java.lang.String)> -> _SINK_ 
<android.nfc.NfcAdapter: void setNdefPushMessage(android.nfc.NdefMessage,android.app.Activity,android.app.Activity[])> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<com.android.internal.telephony.ISms$Default: void sendStoredText(int,java.lang.String,java.lang.String,android.net.Uri,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> -> _SINK_ 
<android.accessibilityservice.IAccessibilityServiceConnection$Default: void sendGesture(int,android.content.pm.ParceledListSlice)> -> _SINK_ 
<com.android.internal.app.IVoiceInteractor$Stub$Proxy: com.android.internal.app.IVoiceInteractorRequest startAbortVoice(java.lang.String,com.android.internal.app.IVoiceInteractorCallback,android.app.VoiceInteractor$Prompt,android.os.Bundle)> -> _SINK_ 
<android.widget.RemoteViewsAdapter$FixedSizeRemoteViewsCache: void insert(int,android.widget.RemoteViews,long,int[])> -> _SINK_ 
<android.telephony.SmsManager: void sendTextMessageWithoutPersisting(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.service.dreams.IDreamManager$Stub$Proxy: void startDozing(android.os.IBinder,int,int)> -> _SINK_ 
<android.telephony.CellInfoGsm: void writeToParcel(android.os.Parcel,int)> -> _SINK_ 
<android.app.IActivityManager$Stub$Proxy: int startActivity(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle)> -> _SINK_ 
<com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingNoted(int[],com.android.internal.app.IAppOpsNotedCallback)> -> _SINK_ 
<android.net.LocalSocket: android.net.LocalSocket createConnectedLocalSocket(java.io.FileDescriptor)> -> _SINK_ 
<android.app.ContextImpl: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.os.Bundle)> -> _SINK_ 
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.lang.String sendEnvelopeWithStatus(int,java.lang.String)> -> _SINK_ 
<android.app.PropertyInvalidatedCache: void dumpCacheInfo(java.io.FileDescriptor,java.lang.String[])> -> _SINK_ 
<android.app.Activity: void performStop(boolean,java.lang.String)> -> _SINK_ 
<android.net.IpSecManager: void applyTransportModeTransform(java.io.FileDescriptor,int,android.net.IpSecTransform)> -> _SINK_ 
<android.app.Vr2dDisplayProperties: void dump(java.io.PrintWriter,java.lang.String)> -> _SINK_ 
<android.content.ContextWrapper: void sendBroadcast(android.content.Intent)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.telephony.TelephonyManager: void sendUssdRequest(java.lang.String,android.telephony.TelephonyManager$UssdResponseCallback,android.os.Handler)> -> _SINK_ 
<com.android.internal.telephony.ITelephony$Default: void sendDialerSpecialCode(java.lang.String,java.lang.String)> -> _SINK_ 
<android.os.ParcelFileDescriptor: void <init>(java.io.FileDescriptor)> -> _SINK_ 
<android.hardware.cas.V1_1.ICas$Proxy: int sendEvent(int,int,java.util.ArrayList)> -> _SINK_ 
<android.os.storage.StorageManager: void updateExternalStorageFileQuotaType(java.io.File,int)> -> _SINK_ 
<com.android.internal.telephony.ITelephony$Stub$Proxy: void call(java.lang.String,java.lang.String)> -> _SINK_ 
<android.bluetooth.BluetoothHeadsetClient: boolean sendDTMF(android.bluetooth.BluetoothDevice,byte)> -> _SINK_ 
<android.content.pm.IPackageInstaller$Stub$Proxy: void uninstall(android.content.pm.VersionedPackage,java.lang.String,int,android.content.IntentSender,int)> -> _SINK_ 
<android.permission.IPermissionManager$Stub$Proxy: void updatePermissionFlags(java.lang.String,java.lang.String,int,int,boolean,int)> -> _SINK_ 
<android.content.pm.ILauncherApps$Stub$Proxy: void startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.ComponentName,android.graphics.Rect,android.os.Bundle,android.os.UserHandle)> -> _SINK_ 
<com.android.internal.util.GrowingArrayUtils: long[] insert(long[],int,int,long)> -> _SINK_ 
<com.android.internal.app.IVoiceInteractor$Stub$Proxy: com.android.internal.app.IVoiceInteractorRequest startCommand(java.lang.String,com.android.internal.app.IVoiceInteractorCallback,java.lang.String,android.os.Bundle)> -> _SINK_ 
<android.os.RemoteCallback: void sendResult(android.os.Bundle)> -> _SINK_ 
<android.hardware.display.DisplayManagerGlobal$DisplayListenerDelegate: void sendDisplayEvent(int,int)> -> _SINK_ 
<com.android.internal.util.StateMachine: void sendMessage(android.os.Message)> -> _SINK_ 
<android.content.ContextWrapper: void sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.view.autofill.IAutoFillManagerClient$Default: void startIntentSender(android.content.IntentSender,android.content.Intent)> -> _SINK_ 
<com.android.internal.util.FastPrintWriter: void println(long)> -> _SINK_ 
<android.app.INotificationManager$Default: void updateNotificationChannelForPackage(java.lang.String,int,android.app.NotificationChannel)> -> _SINK_ 
<android.util.proto.ProtoOutputStream: void <init>(java.io.FileDescriptor)> -> _SINK_ 
<com.android.internal.telephony.ISms$Default: void sendMultipartTextForSubscriberWithOptions(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List,boolean,int,boolean,int)> -> _SINK_ 
<android.app.IActivityTaskManager$Stub$Proxy: android.app.WaitResult startActivityAndWait(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)> -> _SINK_ 
<android.telephony.Rlog: int w(java.lang.String,java.lang.String)> -> _SINK_ 
<android.service.autofill.UserData: void dump(java.lang.String,java.io.PrintWriter)> -> _SINK_ 
<android.view.autofill.IAutoFillManager$Stub$Proxy: void updateSession(int,android.view.autofill.AutofillId,android.graphics.Rect,android.view.autofill.AutofillValue,int,int,int)> -> _SINK_ 
<android.widget.Editor: void sendOnTextChanged(int,int,int)> -> _SINK_ 
<com.android.internal.util.AsyncChannel: void sendMessage(int,java.lang.Object)> -> _SINK_ 
<android.util.BackupUtils: void writeString(java.io.DataOutputStream,java.lang.String)> -> _SINK_ 
<android.app.Activity: void startActivityForResult(java.lang.String,android.content.Intent,int,android.os.Bundle)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<com.android.internal.util.StateMachine: void sendMessageAtFrontOfQueue(int,int,int)> -> _SINK_ 
<android.app.VoiceInteractor$PickOptionRequest: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_ 
<android.content.pm.IDataLoader$Stub$Proxy: void start(int)> -> _SINK_ 
<android.bluetooth.IBluetoothHeadsetClient$Stub$Proxy: boolean sendDTMF(android.bluetooth.BluetoothDevice,byte)> -> _SINK_ 
<com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void continueOperation(int,android.content.Intent,android.os.Bundle)> -> _SINK_ 
<android.media.midi.MidiOutputPort: void <init>(android.media.midi.IMidiDeviceServer,android.os.IBinder,java.io.FileDescriptor,int)> -> _SINK_ 
<android.app.VoiceInteractor$Request: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_ 
<android.media.IAudioService$Stub$Proxy: void startBluetoothScoVirtualCall(android.os.IBinder)> -> _SINK_ 
<com.android.internal.util.StateMachine: void sendMessage(int,int,int,java.lang.Object)> -> _SINK_ 
<android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void write(byte[])> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.media.session.ISession$Stub$Proxy: void sendEvent(java.lang.String,android.os.Bundle)> -> _SINK_ 
<android.app.FragmentHostCallback: void dumpLoaders(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_ 
<android.app.backup.IBackupManager$Default: void updateTransportAttributesForUser(int,android.content.ComponentName,java.lang.String,android.content.Intent,java.lang.String,android.content.Intent,java.lang.CharSequence)> -> _SINK_ 
<android.util.LogWriter: void write(char[],int,int)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.app.IActivityTaskManager$Default: int startActivityAsCaller(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,android.os.IBinder,boolean,int)> -> _SINK_ 
<android.app.IActivityManager$Stub$Proxy: android.os.IBinder peekService(android.content.Intent,java.lang.String,java.lang.String)> -> _SINK_ 
<android.telephony.ims.aidl.IImsRcsFeature$Default: void sendCapabilityRequest(android.net.Uri,android.telephony.ims.RcsContactUceCapability,int)> -> _SINK_ 
<com.android.ims.internal.IImsUt$Default: int updateCLIR(int)> -> _SINK_ 
<com.android.ims.internal.IImsCallSession$Stub$Proxy: void startConference(java.lang.String[],android.telephony.ims.ImsCallProfile)> -> _SINK_ 
<android.app.ContextImpl: android.content.ComponentName startForegroundService(android.content.Intent)> -> _SINK_ 
<android.app.VoiceInteractor$AbortVoiceRequest: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_ 
<android.app.ContextImpl: void sendOrderedBroadcast(android.content.Intent,java.lang.String,int,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle,android.os.Bundle)> -> _SINK_ 
<com.android.internal.view.IInputMethodSession$Stub$Proxy: void updateSelection(int,int,int,int,int,int)> -> _SINK_ 
<android.content.pm.IPackageInstaller$Stub$Proxy: void updateSessionAppLabel(int,java.lang.String)> -> _SINK_ 
<android.app.IActivityTaskManager$Default: android.app.WaitResult startActivityAndWait(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)> -> _SINK_ 
<android.net.LocalSocketImpl: void access$600(android.net.LocalSocketImpl,int,java.io.FileDescriptor)> -> _SINK_ 
<android.security.keystore.IKeystoreService$Stub$Proxy: int update(android.security.keystore.IKeystoreOperationResultCallback,android.os.IBinder,android.security.keymaster.KeymasterArguments,byte[])> -> _SINK_ 
<android.telephony.MmsManager: void sendMultimediaMessage(int,android.net.Uri,java.lang.String,android.os.Bundle,android.app.PendingIntent,long)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<com.android.internal.os.TransferPipe: void go(com.android.internal.os.TransferPipe$Caller,android.os.IInterface,java.io.FileDescriptor,java.lang.String,java.lang.String[])> -> _SINK_ 
<android.telephony.Rlog: int i(java.lang.String,java.lang.String)> -> _SINK_ 
<com.android.internal.util.StateMachine: void sendMessageAtFrontOfQueue(int,int,int,java.lang.Object)> -> _SINK_ 
<android.os.SharedMemory: void <init>(java.io.FileDescriptor,android.os.SharedMemory$1)> -> _SINK_ 
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)> -> _SINK_ 
<android.app.IActivityManager$Default: boolean updateMccMncConfiguration(java.lang.String,java.lang.String)> -> _SINK_ 
<android.telephony.mbms.MbmsTempFileProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> -> _SINK_ 
<android.os.IIncidentManager$Default: void reportIncidentToStream(android.os.IncidentReportArgs,android.os.IIncidentReportStatusListener,java.io.FileDescriptor)> -> _SINK_ 
<com.android.internal.appwidget.IAppWidgetHost$Stub$Proxy: void updateAppWidget(int,android.widget.RemoteViews)> -> _SINK_ 
<android.telephony.SmsManager: void sendMultimediaMessage(android.content.Context,android.net.Uri,java.lang.String,android.os.Bundle,android.app.PendingIntent)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.app.Activity: void autofillClientAuthenticate(int,android.content.IntentSender,android.content.Intent,boolean)> -> _SINK_ 
<com.android.internal.util.AsyncChannel: void sendMessage(int,int)> -> _SINK_ 
<android.util.Slog: int e(java.lang.String,java.lang.String)> -> _SINK_ 
<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<com.android.server.NetworkManagementSocketTagger: void untag(java.io.FileDescriptor)> -> _SINK_ 
<android.location.ILocationManager$Default: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> -> _SINK_ 
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void removeOnSubscriptionsChangedListener(java.lang.String,com.android.internal.telephony.IOnSubscriptionsChangedListener)> -> _SINK_ 
<android.media.tv.ITvInputManager$Default: void sendTvInputNotifyIntent(android.content.Intent,int)> -> _SINK_ 
<android.media.session.ISession$Default: void sendEvent(java.lang.String,android.os.Bundle)> -> _SINK_ 
<android.app.IActivityManager$Stub$Proxy: int sendIntentSender(android.content.IIntentSender,android.os.IBinder,int,android.content.Intent,java.lang.String,android.content.IIntentReceiver,java.lang.String,android.os.Bundle)> -> _SINK_ 
<android.util.LocalLog: void dump(java.lang.String,java.io.PrintWriter)> -> _SINK_ 
<android.content.ContextWrapper: void sendBroadcastMultiplePermissions(android.content.Intent,java.lang.String[])> -> _SINK_ 
<android.app.IActivityTaskManager$Default: void updateLockTaskPackages(int,java.lang.String[])> -> _SINK_ 
<com.android.internal.util.StateMachine: void sendMessageDelayed(int,int,int,long)> -> _SINK_ 
<android.app.Activity: void startActivityForResultAsUser(android.content.Intent,int,android.os.UserHandle)> -> _SINK_ 
<com.android.internal.telephony.ITelephony$Default: void updateOtaEmergencyNumberDbFilePath(android.os.ParcelFileDescriptor)> -> _SINK_ 
<com.android.internal.telephony.IOns$Default: void updateAvailableNetworks(java.util.List,com.android.internal.telephony.IUpdateAvailableNetworksCallback,java.lang.String)> -> _SINK_ 
<android.app.IActivityManager$Default: void startConfirmDeviceCredentialIntent(android.content.Intent,android.os.Bundle)> -> _SINK_ 
<android.view.IWindowSession$Stub$Proxy: android.os.Bundle sendWallpaperCommand(android.os.IBinder,java.lang.String,int,int,int,android.os.Bundle,boolean)> -> _SINK_ 
<android.content.res.ApkAssets: android.content.res.ApkAssets loadTableFromFd(java.io.FileDescriptor,java.lang.String,long,long,int,android.content.res.loader.AssetsProvider)> -> _SINK_ 
<android.hardware.hdmi.HdmiTvClient: void sendMhlVendorCommand(int,int,int,byte[])> -> _SINK_ 
<android.os.Handler: boolean sendMessageAtTime(android.os.Message,long)> -> _SINK_ 
<android.graphics.Typeface$Builder: void <init>(java.io.FileDescriptor)> -> _SINK_ 
<android.os.FileUtils: java.lang.String readTextFile(java.io.File,int,java.lang.String)> -> _SINK_ 
<android.hardware.cas.V1_2.ICas$Proxy: int sendEvent(int,int,java.util.ArrayList)> -> _SINK_ 
<com.android.internal.app.IVoiceInteractor$Stub$Proxy: com.android.internal.app.IVoiceInteractorRequest startCompleteVoice(java.lang.String,com.android.internal.app.IVoiceInteractorCallback,android.app.VoiceInteractor$Prompt,android.os.Bundle)> -> _SINK_ 
<android.telephony.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.content.ContextWrapper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.os.IDumpstate$Default: void startBugreport(int,java.lang.String,java.io.FileDescriptor,java.io.FileDescriptor,int,android.os.IDumpstateListener,boolean)> -> _SINK_ 
<android.net.IConnectivityManager$Stub$Proxy: void startVpnProfile(java.lang.String)> -> _SINK_ 
<android.telephony.CellInfoWcdma: void writeToParcel(android.os.Parcel,int)> -> _SINK_ 
<android.content.res.ApkAssets: android.content.res.ApkAssets loadTableFromFd(java.io.FileDescriptor,java.lang.String,int,android.content.res.loader.AssetsProvider)> -> _SINK_ 
<android.os.IMessenger$Default: void send(android.os.Message)> -> _SINK_ 
<android.app.ContextImpl: android.content.ComponentName startServiceAsUser(android.content.Intent,android.os.UserHandle)> -> _SINK_ 
<android.content.Context: void startActivityAsUser(android.content.Intent,android.os.Bundle,android.os.UserHandle)> -> _SINK_ 
<android.os.Parcel: void writeFileDescriptor(java.io.FileDescriptor)> -> _SINK_ 
<android.os.MemoryFile: void writeBytes(byte[],int,int,int)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.net.LocalSocketImpl: void sendUrgentData(int)> -> _SINK_ 
<android.content.pm.IShortcutService$Default: boolean updateShortcuts(java.lang.String,android.content.pm.ParceledListSlice,int)> -> _SINK_ 
<android.app.ContextImpl: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)> -> _SINK_ 
<android.util.jar.StrictJarFile: void <init>(java.io.FileDescriptor,boolean,boolean)> -> _SINK_ 
<android.os.IInstalld$Stub$Proxy: void installApkVerity(java.lang.String,java.io.FileDescriptor,int)> -> _SINK_ 
<android.os.NativeHandle: void <init>(java.io.FileDescriptor[],int[],boolean)> -> _SINK_ 
<com.android.ims.internal.IImsVideoCallProvider$Default: void sendSessionModifyRequest(android.telecom.VideoProfile,android.telecom.VideoProfile)> -> _SINK_ 
<com.android.internal.telephony.ISms$Default: void sendTextForSubscriberWithOptions(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean,int,boolean,int)> -> _SINK_ 
<android.app.IActivityTaskManager$Stub$Proxy: void updateLockTaskPackages(int,java.lang.String[])> -> _SINK_ 
<com.android.ims.internal.IImsCallSession$Default: void sendRttModifyResponse(boolean)> -> _SINK_ 
<android.permission.IPermissionManager$Stub$Proxy: void updatePermissionFlagsForAllApps(int,int,int)> -> _SINK_ 
<android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.hardware.hdmi.IHdmiControlService$Stub$Proxy: void sendVendorCommand(int,int,byte[],boolean)> -> _SINK_ 
<android.bluetooth.IBluetoothGatt$Stub$Proxy: void sendResponse(int,java.lang.String,int,int,int,byte[])> -> _SINK_ 
<android.app.IActivityManager$Stub$Proxy: int startActivityAsUserWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)> -> _SINK_ 
<android.os.IIncidentCompanion$Default: void sendReportReadyBroadcast(java.lang.String,java.lang.String)> -> _SINK_ 
<com.android.internal.telephony.ISms$Stub$Proxy: void sendStoredMultipartText(int,java.lang.String,java.lang.String,android.net.Uri,java.lang.String,java.util.List,java.util.List)> -> _SINK_ 
<android.util.Slog: int println(int,java.lang.String,java.lang.String)> -> _SINK_ 
<android.media.midi.MidiReceiver: void send(byte[],int,int)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<com.android.internal.telephony.ITelephony$Stub$Proxy: void enableLocationUpdatesForSubscriber(int)> -> _SINK_ 
<android.app.ContextImpl: void sendBroadcast(android.content.Intent,java.lang.String)> -> _SINK_ 
<android.os.BinderProxy: void dumpAsync(java.io.FileDescriptor,java.lang.String[])> -> _SINK_ 
<com.android.internal.telephony.ITelephony$Stub$Proxy: void enableVisualVoicemailSmsFilter(java.lang.String,int,android.telephony.VisualVoicemailSmsFilterSettings)> -> _SINK_ 
<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.telephony.ims.aidl.IImsMmTelFeature$Stub$Proxy: void sendSms(int,int,java.lang.String,java.lang.String,boolean,byte[])> -> _SINK_ 
<android.os.Binder: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_ 
<android.hardware.face.IFaceService$Stub$Proxy: void startPreparedClient(int)> -> _SINK_ 
<android.app.IActivityManager$Stub$Proxy: void unbroadcastIntent(android.app.IApplicationThread,android.content.Intent,int)> -> _SINK_ 
<com.android.internal.telephony.ITelephony$Stub$Proxy: void carrierActionSetMeteredApnsEnabled(int,boolean)> -> _SINK_ 
<android.app.BackStackRecord: void dump(java.lang.String,java.io.PrintWriter,boolean)> -> _SINK_ 
<com.android.internal.telecom.ITelecomService$Stub$Proxy: void handleCallIntent(android.content.Intent,java.lang.String)> -> _SINK_ 
<android.content.rollback.IRollbackManager$Stub$Proxy: void commitRollback(int,android.content.pm.ParceledListSlice,java.lang.String,android.content.IntentSender)> -> _SINK_ 
<android.telephony.Rlog: int w(java.lang.String,java.lang.Throwable)> -> _SINK_ 
<android.app.NotificationChannel: void dump(java.io.PrintWriter,java.lang.String,boolean)> -> _SINK_ 
<com.android.ims.internal.IImsVideoCallProvider$Stub$Proxy: void sendSessionModifyRequest(android.telecom.VideoProfile,android.telecom.VideoProfile)> -> _SINK_ 
<com.android.internal.telephony.ITelephony$Stub$Proxy: void carrierActionResetAll(int)> -> _SINK_ 
<android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.app.AlarmManager: void set(int,long,android.app.PendingIntent)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.net.LocalSocketImpl: void <init>(java.io.FileDescriptor)> -> _SINK_ 
<android.app.IApplicationThread$Stub$Proxy: void scheduleRegisteredReceiver(android.content.IIntentReceiver,android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean,int,int)> -> _SINK_ 
<android.app.backup.BackupDataOutput: void <init>(java.io.FileDescriptor,long,int)> -> _SINK_ 
<android.view.autofill.IAutoFillManager$Stub$Proxy: void startSession(android.os.IBinder,android.os.IBinder,android.view.autofill.AutofillId,android.graphics.Rect,android.view.autofill.AutofillValue,int,boolean,int,android.content.ComponentName,boolean,com.android.internal.os.IResultReceiver)> -> _SINK_ 
<android.app.ContextImpl: void sendBroadcast(android.content.Intent)> -> _SINK_ 
<android.os.Binder: void shellCommand(java.io.FileDescriptor,java.io.FileDescriptor,java.io.FileDescriptor,java.lang.String[],android.os.ShellCallback,android.os.ResultReceiver)> -> _SINK_ 
<android.app.IAppTask$Stub$Proxy: int startActivity(android.os.IBinder,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.Bundle)> -> _SINK_ 
<android.net.NetworkStatsHistory$DataStreamUtils: void writeVarLongArray(java.io.DataOutputStream,long[],int)> -> _SINK_ 
<com.android.internal.util.AsyncChannel: android.os.Message sendMessageSynchronously(int,int,int)> -> _SINK_ 
<android.app.Fragment: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_ 
<android.media.tv.ITvInputManager$Stub$Proxy: void updateTvInputInfo(android.media.tv.TvInputInfo,int)> -> _SINK_ 
<com.android.internal.util.AsyncChannel: android.os.Message sendMessageSynchronously(android.os.Message)> -> _SINK_ 
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listenForSubscriber(int,java.lang.String,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)> -> _SINK_ 
<android.app.AlarmManager: void set(int,long,long,long,android.app.PendingIntent,android.os.WorkSource)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.content.ContextWrapper: void sendBroadcast(android.content.Intent,java.lang.String)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.os.storage.StorageManager: void allocateBytes(java.io.FileDescriptor,long)> -> _SINK_ 
<android.app.Fragment: void startActivityForResultAsUser(android.content.Intent,int,android.os.Bundle,android.os.UserHandle)> -> _SINK_ 
<android.media.projection.IMediaProjection$Stub$Proxy: void start(android.media.projection.IMediaProjectionCallback)> -> _SINK_ 
<android.bluetooth.BluetoothHidDevice: boolean sendReport(android.bluetooth.BluetoothDevice,int,byte[])> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.content.ContextWrapper: void sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,int,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.net.NetworkStats: void dump(java.lang.String,java.io.PrintWriter)> -> _SINK_ 
<android.database.DatabaseUtils$InsertHelper: long insert(android.content.ContentValues)> -> _SINK_ 
<android.view.inputmethod.InputMethodManager: void sendAppPrivateCommand(android.view.View,java.lang.String,android.os.Bundle)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<com.android.internal.telephony.ISms$Stub$Proxy: void sendDataForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> -> _SINK_ 
<android.util.jar.StrictJarManifest: void write(java.io.OutputStream)> -> _SINK_ 
<android.app.Activity: void startIntentSenderForResult(android.content.IntentSender,int,android.content.Intent,int,int,int,android.os.Bundle)> -> _SINK_ 
<android.app.IActivityTaskManager$Stub$Proxy: int startActivityIntentSender(android.app.IApplicationThread,android.content.IIntentSender,android.os.IBinder,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,int,android.os.Bundle)> -> _SINK_ 
<com.android.internal.util.AsyncChannel: void sendMessage(int,int,int)> -> _SINK_ 
<com.android.internal.telephony.ITelephony$Stub$Proxy: void toggleRadioOnOffForSubscriber(int)> -> _SINK_ 
<android.app.IActivityTaskManager$Stub$Proxy: void updateLockTaskFeatures(int,int)> -> _SINK_ 
<com.android.internal.util.AsyncChannel: void sendMessage(android.os.Message)> -> _SINK_ 
<android.app.Fragment: void startIntentSenderForResult(android.content.IntentSender,int,android.content.Intent,int,int,int,android.os.Bundle)> -> _SINK_ 
<android.hardware.hdmi.IHdmiControlService$Stub$Proxy: void startTimerRecording(int,int,byte[])> -> _SINK_ 
<com.android.internal.telephony.ISub$Stub$Proxy: int removeSubInfo(java.lang.String,int)> -> _SINK_ 
<android.os.FileUtils: long copyInternalUserspace(java.io.FileDescriptor,java.io.FileDescriptor,android.os.FileUtils$ProgressListener,android.os.CancellationSignal,long)> -> _SINK_ 
<com.android.internal.util.StateMachine: void sendMessageAtFrontOfQueue(int,java.lang.Object)> -> _SINK_ 
<android.app.IActivityTaskManager$Stub$Proxy: int startActivityAsCaller(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,android.os.IBinder,boolean,int)> -> _SINK_ 
<com.android.internal.util.StateMachine: void sendMessage(int,java.lang.Object)> -> _SINK_ 
<android.nfc.INfcAdapter$Stub$Proxy: void setForegroundDispatch(android.app.PendingIntent,android.content.IntentFilter[],android.nfc.TechListParcel)> -> _SINK_ 
<com.android.internal.telephony.ITelephony$Stub$Proxy: void sendDialerSpecialCode(java.lang.String,java.lang.String)> -> _SINK_ 
<android.net.IConnectivityManager$Stub$Proxy: void startNattKeepalive(android.net.Network,int,android.net.ISocketKeepaliveCallback,java.lang.String,int,java.lang.String)> -> _SINK_ 
<android.os.FileUtils: long copyInternalSplice(java.io.FileDescriptor,java.io.FileDescriptor,long,android.os.CancellationSignal,java.util.concurrent.Executor,android.os.FileUtils$ProgressListener)> -> _SINK_ 
<android.app.IActivityTaskManager$Stub$Proxy: boolean launchAssistIntent(android.content.Intent,int,java.lang.String,int,android.os.Bundle)> -> _SINK_ 
<android.hardware.camera2.DngCreator: void writeImage(java.io.OutputStream,android.media.Image)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.ddm.DdmHandleHello: void sendWAIT(int)> -> _SINK_ 
<android.telephony.VisualVoicemailService: void sendVisualVoicemailSms(android.content.Context,android.telecom.PhoneAccountHandle,java.lang.String,short,java.lang.String,android.app.PendingIntent)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.media.tv.ITvInputManager$Stub$Proxy: void sendAppPrivateCommand(android.os.IBinder,java.lang.String,android.os.Bundle,int)> -> _SINK_ 
<android.view.autofill.AutofillManager$AutofillManagerClient: void startIntentSender(android.content.IntentSender,android.content.Intent)> -> _SINK_ 
<android.content.ContentProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues,android.os.Bundle)> -> _SINK_ 
<android.content.BroadcastReceiver$PendingResult: void sendFinished(android.app.IActivityManager)> -> _SINK_ 
<android.content.ContextWrapper: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.os.Bundle)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.view.Choreographer: void dump(java.lang.String,java.io.PrintWriter)> -> _SINK_ 
<android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void write(byte[],int,int)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<com.android.ims.internal.IImsUt$Stub$Proxy: int updateCallBarringForServiceClass(int,int,java.lang.String[],int)> -> _SINK_ 
<com.android.internal.telephony.ITelephony$Stub$Proxy: void isMmTelCapabilitySupported(int,com.android.internal.telephony.IIntegerConsumer,int,int)> -> _SINK_ 
<android.content.Intent: int fillIn(android.content.Intent,int)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.os.IVoldMountCallback$Stub$Proxy: boolean onVolumeChecking(java.io.FileDescriptor,java.lang.String,java.lang.String)> -> _SINK_ 
<android.net.NetworkStats: android.net.NetworkStats insertEntry(java.lang.String,long,long,long,long)> -> _SINK_ 
<android.widget.ArrayAdapter: void insert(java.lang.Object,int)> -> _SINK_ 
<com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingAsyncNoted(java.lang.String,com.android.internal.app.IAppOpsAsyncNotedCallback)> -> _SINK_ 
<android.app.ContextImpl: void sendOrderedBroadcast(android.content.Intent,int,java.lang.String,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,java.lang.String,android.os.Bundle,android.os.Bundle)> -> _SINK_ 
<android.telephony.ClientRequestStats: void updateRequestHistograms(int,int)> -> _SINK_ 
<android.telephony.CellSignalStrengthGsm: void updateLevel(android.os.PersistableBundle,android.telephony.ServiceState)> -> _SINK_ 
<android.app.PendingIntent: int sendAndReturnResult(android.content.Context,int,android.content.Intent,android.app.PendingIntent$OnFinished,android.os.Handler,java.lang.String,android.os.Bundle)> -> _SINK_ 
<android.os.Debug: void dumpHprofData(java.lang.String,java.io.FileDescriptor)> -> _SINK_ 
<android.os.FileUtils: long copy(java.io.FileDescriptor,java.io.FileDescriptor,android.os.CancellationSignal,java.util.concurrent.Executor,android.os.FileUtils$ProgressListener)> -> _SINK_ 
<android.view.contentcapture.MainContentCaptureSession$1: void send(int,android.os.Bundle)> -> _SINK_ 
<android.media.MediaRecorder: void setAuxiliaryOutputFile(java.io.FileDescriptor)> -> _SINK_ 
<android.app.Activity: void startActivityFromFragment(android.app.Fragment,android.content.Intent,int)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.view.accessibility.IAccessibilityManager$Default: boolean sendFingerprintGesture(int)> -> _SINK_ 
<android.media.MediaCas$Session: void sendSessionEvent(int,int,byte[])> -> _SINK_ 
<com.android.internal.os.HandlerCaller: void sendMessageDelayed(android.os.Message,long)> -> _SINK_ 
<com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingStarted(int[],com.android.internal.app.IAppOpsStartedCallback)> -> _SINK_ 
<com.android.internal.appwidget.IAppWidgetService$Default: void updateAppWidgetProviderInfo(android.content.ComponentName,java.lang.String)> -> _SINK_ 
<android.app.IActivityManager$Default: int startActivityWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle)> -> _SINK_ 
<android.service.voice.IVoiceInteractionSession$Stub$Proxy: void taskFinished(android.content.Intent,int)> -> _SINK_ 
<com.android.internal.app.IAppOpsService$Stub$Proxy: int startOperation(android.os.IBinder,int,int,java.lang.String,java.lang.String,boolean,boolean,java.lang.String)> -> _SINK_ 
<android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.media.midi.MidiDeviceServer$1: int connectPorts(android.os.IBinder,java.io.FileDescriptor,int)> -> _SINK_ 
<android.os.IRemoteCallback$Default: void sendResult(android.os.Bundle)> -> _SINK_ 
<android.app.Activity: void startSearch(java.lang.String,boolean,android.os.Bundle,boolean)> -> _SINK_ 
<android.app.IActivityManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)> -> _SINK_ 
<android.app.ActivityManager$AppTask: void startActivity(android.content.Context,android.content.Intent,android.os.Bundle)> -> _SINK_ 
<android.app.ContextImpl: void sendOrderedBroadcast(android.content.Intent,java.lang.String,int,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> -> _SINK_ 
<android.os.IVoldMountCallback$Default: boolean onVolumeChecking(java.io.FileDescriptor,java.lang.String,java.lang.String)> -> _SINK_ 
<android.app.ContextImpl: android.content.ComponentName startForegroundServiceAsUser(android.content.Intent,android.os.UserHandle)> -> _SINK_ 
<android.app.IActivityManager$Default: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)> -> _SINK_ 
<android.app.INotificationManager$Default: boolean updateAutomaticZenRule(java.lang.String,android.app.AutomaticZenRule)> -> _SINK_ 
<android.telephony.CellInfoLte: void writeToParcel(android.os.Parcel,int)> -> _SINK_ 
<android.os.IMessenger$Stub$Proxy: void send(android.os.Message)> -> _SINK_ 
<android.net.TrafficStats: void untagFileDescriptor(java.io.FileDescriptor)> -> _SINK_ 
<android.view.accessibility.AccessibilityManager: boolean sendFingerprintGesture(int)> -> _SINK_ 
<android.os.storage.IStorageManager$Stub$Proxy: void startCheckpoint(int)> -> _SINK_ 
<android.app.Activity: void startIntentSenderForResult(android.content.IntentSender,int,android.content.Intent,int,int,int)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.telephony.TelephonyManager: void sendVisualVoicemailSmsForSubscriber(int,java.lang.String,int,java.lang.String,android.app.PendingIntent)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.media.session.MediaSessionLegacyHelper: void sendAdjustVolumeBy(int,int,int)> -> _SINK_ 
<android.app.ContextImpl: void startActivity(android.content.Intent)> -> _SINK_ 
<android.content.Loader: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_ 
<android.os.FileUtils: long copyInternalSendfile(java.io.FileDescriptor,java.io.FileDescriptor,long,android.os.CancellationSignal,java.util.concurrent.Executor,android.os.FileUtils$ProgressListener)> -> _SINK_ 
<android.app.IActivityTaskManager$Default: boolean startDreamActivity(android.content.Intent)> -> _SINK_ 
<com.android.internal.telephony.ISms$Stub$Proxy: void sendMultipartTextForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List,boolean,long)> -> _SINK_ 
<com.android.internal.telephony.IMms$Default: void sendMessage(int,java.lang.String,android.net.Uri,java.lang.String,android.os.Bundle,android.app.PendingIntent,long)> -> _SINK_ 
<android.view.IWindowSession$Default: android.os.Bundle sendWallpaperCommand(android.os.IBinder,java.lang.String,int,int,int,android.os.Bundle,boolean)> -> _SINK_ 
<android.view.autofill.IAutoFillManagerClient$Stub$Proxy: void authenticate(int,int,android.content.IntentSender,android.content.Intent,boolean)> -> _SINK_ 
<android.media.AudioTrack: int write(java.nio.ByteBuffer,int,int,long)> -> _SINK_ 
<android.app.Activity: void startActivityForResult(android.content.Intent,int)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor$Status access$000(java.io.FileDescriptor,byte[])> -> _SINK_ 
<android.app.IActivityManager$Stub$Proxy: void updateDeviceOwner(java.lang.String)> -> _SINK_ 
<android.media.soundtrigger_middleware.ISoundTriggerModule$Stub$Proxy: void startRecognition(int,android.media.soundtrigger_middleware.RecognitionConfig)> -> _SINK_ 
<android.util.jar.StrictJarManifest: void write(android.util.jar.StrictJarManifest,java.io.OutputStream)> -> _SINK_ 
<android.app.IActivityManager$Default: void updateLockTaskPackages(int,java.lang.String[])> -> _SINK_ 
<android.app.AlarmManager: void setAndAllowWhileIdle(int,long,android.app.PendingIntent)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.content.ContextWrapper: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.graphics.HardwareRenderer: void dumpProfileInfo(java.io.FileDescriptor,int)> -> _SINK_ 
<com.android.internal.os.WrapperInit: void execApplication(java.lang.String,java.lang.String,int,java.lang.String,java.io.FileDescriptor,java.lang.String[])> -> _SINK_ 
<android.os.Binder$1: void <init>(android.os.Binder,java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_ 
<android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelGroupForPackage(java.lang.String,int,android.app.NotificationChannelGroup)> -> _SINK_ 
<android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_ 
<android.hardware.hdmi.IHdmiControlService$Stub$Proxy: void sendVolumeKeyEvent(int,int,boolean)> -> _SINK_ 
<android.app.ContextImpl: void startActivities(android.content.Intent[],android.os.Bundle)> -> _SINK_ 
<android.permission.PermissionControllerManager: void dump(java.io.FileDescriptor,java.lang.String[])> -> _SINK_ 
<android.content.ContentResolver: void startSync(android.net.Uri,android.os.Bundle)> -> _SINK_ 
<android.app.IActivityManager$Default: void startRecentsActivity(android.content.Intent,android.app.IAssistDataReceiver,android.view.IRecentsAnimationRunner)> -> _SINK_ 
<com.android.internal.util.StateMachine: void sendMessageDelayed(int,int,long)> -> _SINK_ 
<android.content.IIntentSender$Default: void send(int,android.content.Intent,java.lang.String,android.os.IBinder,android.content.IIntentReceiver,java.lang.String,android.os.Bundle)> -> _SINK_ 
<android.app.IActivityTaskManager$Stub$Proxy: int startVoiceActivity(java.lang.String,java.lang.String,int,int,android.content.Intent,java.lang.String,android.service.voice.IVoiceInteractionSession,com.android.internal.app.IVoiceInteractor,int,android.app.ProfilerInfo,android.os.Bundle,int)> -> _SINK_ 
<android.telephony.CellSignalStrengthCdma: void updateLevel(android.os.PersistableBundle,android.telephony.ServiceState)> -> _SINK_ 
<android.bluetooth.BluetoothHidHost: boolean sendData(android.bluetooth.BluetoothDevice,java.lang.String)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.content.ContextWrapper: void sendOrderedBroadcast(android.content.Intent,int,java.lang.String,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,java.lang.String,android.os.Bundle,android.os.Bundle)> -> _SINK_ 
<android.os.IIncidentManager$Stub$Proxy: void reportIncidentToDumpstate(java.io.FileDescriptor,android.os.IIncidentReportStatusListener)> -> _SINK_ 
<com.android.internal.telephony.ITelephony$Stub$Proxy: void enableIms(int)> -> _SINK_ 
<android.util.Slog: int w(java.lang.String,java.lang.Throwable)> -> _SINK_ 
<com.android.ims.internal.IImsUt$Stub$Proxy: int updateCOLR(int)> -> _SINK_ 
<android.hardware.hdmi.IHdmiControlService$Stub$Proxy: void startOneTouchRecord(int,byte[])> -> _SINK_ 
<android.telephony.ims.aidl.IImsRcsFeature$Stub$Proxy: void updateCapabilities(android.telephony.ims.RcsContactUceCapability,int)> -> _SINK_ 
<android.app.ActivityThread: void access$400(android.app.ActivityThread,java.io.FileDescriptor)> -> _SINK_ 
<android.bluetooth.IBluetoothAvrcpController$Stub$Proxy: void sendGroupNavigationCmd(android.bluetooth.BluetoothDevice,int,int)> -> _SINK_ 
<android.view.IWindow$Stub$Proxy: void updatePointerIcon(float,float)> -> _SINK_ 
<android.hardware.location.IContextHubService$Default: int sendMessage(int,int,android.hardware.location.ContextHubMessage)> -> _SINK_ 
<com.android.ims.internal.IImsUt$Default: int updateCallWaiting(boolean,int)> -> _SINK_ 
<android.content.pm.IPackageInstaller$Stub$Proxy: void updateSessionAppIcon(int,android.graphics.Bitmap)> -> _SINK_ 
<android.content.pm.IPackageManager$Stub$Proxy: void setLastChosenActivity(android.content.Intent,java.lang.String,int,android.content.IntentFilter,int,android.content.ComponentName)> -> _SINK_ 
<com.android.internal.telephony.ISms$Default: void sendTextForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean,long)> -> _SINK_ 
<android.app.IActivityTaskManager$Stub$Proxy: void startLocalVoiceInteraction(android.os.IBinder,android.os.Bundle)> -> _SINK_ 
<android.content.pm.IPackageManager$Stub$Proxy: void freeStorage(java.lang.String,long,int,android.content.IntentSender)> -> _SINK_ 
<com.android.ims.internal.IImsCallSession$Stub$Proxy: void sendDtmf(char,android.os.Message)> -> _SINK_ 
<android.graphics.BitmapRegionDecoder: android.graphics.BitmapRegionDecoder newInstance(java.io.FileDescriptor,boolean)> -> _SINK_ 
<com.android.internal.util.FastPrintWriter: void println(int)> -> _SINK_ 
<android.content.Context: int startActivitiesAsUser(android.content.Intent[],android.os.Bundle,android.os.UserHandle)> -> _SINK_ 
<android.app.IActivityManager$Default: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)> -> _SINK_ 
<android.inputmethodservice.InputMethodService: void sendDownUpKeyEvents(int)> -> _SINK_ 
<android.bluetooth.IBluetoothHeadsetClient$Default: boolean sendVendorAtCommand(android.bluetooth.BluetoothDevice,int,java.lang.String)> -> _SINK_ 
<android.util.PrintWriterPrinter: void println(java.lang.String)> -> _SINK_ 
<android.hardware.location.ContextHubManager: int sendMessage(int,int,android.hardware.location.ContextHubMessage)> -> _SINK_ 
<com.android.internal.telephony.ITelephony$Stub$Proxy: int changeIccLockPassword(int,java.lang.String,java.lang.String)> -> _SINK_ 
<android.bluetooth.IBluetoothMapClient$Default: boolean sendMessage(android.bluetooth.BluetoothDevice,android.net.Uri[],java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> -> _SINK_ 
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void updateAppWidgetIds(java.lang.String,int[],android.widget.RemoteViews)> -> _SINK_ 
<android.app.IActivityManager$Stub$Proxy: int startActivityAsUser(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)> -> _SINK_ 
<android.app.backup.BackupDataOutput: void <init>(java.io.FileDescriptor,long)> -> _SINK_ 
<android.media.tv.tunerresourcemanager.ITunerResourceManager$Stub$Proxy: void updateCasInfo(int,int)> -> _SINK_ 
<android.telephony.CellSignalStrengthWcdma: void updateLevel(android.os.PersistableBundle,android.telephony.ServiceState)> -> _SINK_ 
<android.net.IConnectivityManager$Default: void startNattKeepaliveWithFd(android.net.Network,java.io.FileDescriptor,int,int,android.net.ISocketKeepaliveCallback,java.lang.String,java.lang.String)> -> _SINK_ 
<android.os.PersistableBundle: void writeToStream(java.io.OutputStream)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<com.android.internal.util.StateMachine: void sendMessage(int,int)> -> _SINK_ 
<android.os.storage.StorageManager: void allocateBytes(java.io.FileDescriptor,long,int)> -> _SINK_ 
<android.media.MediaRecorder: void setOutputFile(java.io.FileDescriptor)> -> _SINK_ 
<com.android.internal.util.StateMachine: void sendMessageAtFrontOfQueue(int,int)> -> _SINK_ 
<android.app.IActivityTaskManager$Default: void startRecentsActivity(android.content.Intent,android.app.IAssistDataReceiver,android.view.IRecentsAnimationRunner)> -> _SINK_ 
<android.net.TrafficStats: void tagFileDescriptor(java.io.FileDescriptor)> -> _SINK_ 
<android.media.ExifInterface: void <init>(java.io.FileDescriptor)> -> _SINK_ 
<com.android.internal.telephony.IMms$Stub$Proxy: void sendStoredMessage(int,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent)> -> _SINK_ 
<com.android.internal.os.TransferPipe: void go(java.io.FileDescriptor,long)> -> _SINK_ 
<android.app.IActivityTaskManager$Stub$Proxy: int startActivities(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent[],java.lang.String[],android.os.IBinder,android.os.Bundle,int)> -> _SINK_ 
<com.android.internal.telephony.ICarrierConfigLoader$Default: void updateConfigForPhoneId(int,java.lang.String)> -> _SINK_ 
<android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.media.MediaRecorder: void setNextOutputFile(java.io.FileDescriptor)> -> _SINK_ 
<android.inputmethodservice.InputMethodService: boolean sendDefaultEditorAction(boolean)> -> _SINK_ 
<android.telephony.Rlog: int e(java.lang.String,java.lang.String)> -> _SINK_ 
<android.content.pm.parsing.ApkLiteParseUtils: android.content.pm.parsing.result.ParseResult parseApkLite(android.content.pm.parsing.result.ParseInput,java.io.FileDescriptor,java.lang.String,int)> -> _SINK_ 
<android.app.IActivityController$Stub$Proxy: boolean activityStarting(android.content.Intent,java.lang.String)> -> _SINK_ 
<android.app.Activity: void startIntentSenderFromChild(android.app.Activity,android.content.IntentSender,int,android.content.Intent,int,int,int)> -> _SINK_ 
<android.renderscript.Allocation: void sendBufferNotification(long)> -> _SINK_ 
<android.app.IActivityTaskManager$Default: int startActivityIntentSender(android.app.IApplicationThread,android.content.IIntentSender,android.os.IBinder,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,int,android.os.Bundle)> -> _SINK_ 
<android.content.pm.IPackageManager$Default: boolean updateIntentVerificationStatus(java.lang.String,int,int)> -> _SINK_ 
<android.app.IActivityTaskManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)> -> _SINK_ 
<android.app.IActivityManager$Stub$Proxy: void startSystemLockTaskMode(int)> -> _SINK_ 
<com.android.internal.util.AsyncChannel: void sendMessage(int,int,int,java.lang.Object)> -> _SINK_ 
<android.provider.SyncStateContract$Helpers: android.net.Uri insert(android.content.ContentProviderClient,android.net.Uri,android.accounts.Account,byte[])> -> _SINK_ 
<android.text.SpannableStringBuilder: android.text.Editable insert(int,java.lang.CharSequence)> -> _SINK_ 
<com.android.ims.internal.IImsUt$Default: int updateCallBarringForServiceClass(int,int,java.lang.String[],int)> -> _SINK_ 
<android.app.backup.FullBackup: void restoreFile(android.os.ParcelFileDescriptor,long,int,long,long,java.io.File)> -> _SINK_ 
<android.os.BinderProxy: void shellCommand(java.io.FileDescriptor,java.io.FileDescriptor,java.io.FileDescriptor,java.lang.String[],android.os.ShellCallback,android.os.ResultReceiver)> -> _SINK_ 
<com.android.ims.internal.IImsCallSession$Stub$Proxy: void sendRttModifyRequest(android.telephony.ims.ImsCallProfile)> -> _SINK_ 
<com.android.internal.telecom.ITelecomService$Stub$Proxy: void startConference(java.util.List,android.os.Bundle,java.lang.String)> -> _SINK_ 
<android.view.inputmethod.InputMethodManager$1: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_ 
<android.telephony.MbmsDownloadSession: void download(android.telephony.mbms.DownloadRequest)> -> _SINK_ 
<android.app.Service: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_ 
<android.hardware.hdmi.HdmiClient: void sendKeyEvent(int,boolean)> -> _SINK_ 
<android.os.Parcel: void writeSerializable(java.io.Serializable)> -> _SINK_ 
<android.app.IActivityTaskManager$Default: int startActivity(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle)> -> _SINK_ 
<android.content.ContextWrapper: void startActivities(android.content.Intent[])> -> _SINK_ 
<com.android.ims.internal.IImsUt$Stub$Proxy: int updateCLIR(int)> -> _SINK_ 
<android.content.ContextWrapper: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String)> -> _SINK_ 
<android.database.sqlite.SQLiteQueryBuilder: long insert(android.database.sqlite.SQLiteDatabase,android.content.ContentValues)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.hardware.hdmi.IHdmiControlService$Default: void sendMhlVendorCommand(int,int,int,byte[])> -> _SINK_ 
<android.net.IConnectivityManager$Stub$Proxy: void startNattKeepaliveWithFd(android.net.Network,java.io.FileDescriptor,int,int,android.net.ISocketKeepaliveCallback,java.lang.String,java.lang.String)> -> _SINK_ 
<android.app.ExitTransitionCoordinator: void startExit(int,android.content.Intent)> -> _SINK_ 
<android.graphics.fonts.Font$Builder: void <init>(java.nio.ByteBuffer,java.io.File,java.lang.String)> -> _SINK_ 
<com.android.internal.telephony.ITelephony$Stub$Proxy: void cacheMmTelCapabilityProvisioning(int,int,int,boolean)> -> _SINK_ 
<android.app.Activity: void startManagingCursor(android.database.Cursor)> -> _SINK_ 
<android.inputmethodservice.InputMethodService: void startExtractingText(boolean)> -> _SINK_ 
<com.android.internal.policy.PhoneWindow: void sendCloseSystemWindows(java.lang.String)> -> _SINK_ 
<android.bluetooth.BluetoothAvrcpController: void sendGroupNavigationCmd(android.bluetooth.BluetoothDevice,int,int)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor fromFd(java.io.FileDescriptor,android.os.Handler,android.os.ParcelFileDescriptor$OnCloseListener)> -> _SINK_ 
<android.content.ContentProviderProxy: android.net.Uri insert(java.lang.String,java.lang.String,android.net.Uri,android.content.ContentValues,android.os.Bundle)> -> _SINK_ 
<com.android.internal.os.HandlerCaller: com.android.internal.os.SomeArgs sendMessageAndWait(android.os.Message)> -> _SINK_ 
<android.app.LoaderManagerImpl: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_ 
<com.android.ims.internal.IImsVideoCallProvider$Stub$Proxy: void sendSessionModifyResponse(android.telecom.VideoProfile)> -> _SINK_ 
<com.android.internal.telephony.ITelephony$Stub$Proxy: void unregisterMmTelCapabilityCallback(int,android.telephony.ims.aidl.IImsCapabilityCallback)> -> _SINK_ 
<android.telephony.VisualVoicemailSms: void writeToParcel(android.os.Parcel,int)> -> _SINK_ 
<android.security.KeyStore: int insert(java.lang.String,byte[],int,int)> -> _SINK_ 
<android.app.Fragment: void startActivity(android.content.Intent,android.os.Bundle)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.net.NetworkStatsHistory$DataStreamUtils: void writeVarLong(java.io.DataOutputStream,long)> -> _SINK_ 
<android.net.IConnectivityManager$Stub$Proxy: void startTcpKeepalive(android.net.Network,java.io.FileDescriptor,int,android.net.ISocketKeepaliveCallback)> -> _SINK_ 
<android.telephony.CellIdentityTdscdma: void writeToParcel(android.os.Parcel,int)> -> _SINK_ 
<android.app.IActivityManager$Default: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)> -> _SINK_ 
<android.accessibilityservice.IAccessibilityServiceConnection$Stub$Proxy: void sendGesture(int,android.content.pm.ParceledListSlice)> -> _SINK_ 
<android.util.Slog: int v(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_ 
<android.app.Activity: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int,android.os.Bundle)> -> _SINK_ 
<android.content.ContextWrapper: void sendBroadcastAsUserMultiplePermissions(android.content.Intent,android.os.UserHandle,java.lang.String[])> -> _SINK_ 
<android.appwidget.AppWidgetHostView: void updateAppWidgetOptions(android.os.Bundle)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.app.IActivityTaskManager$Stub$Proxy: int startActivity(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle)> -> _SINK_ 
<com.android.internal.util.StateMachine: void sendMessageAtFrontOfQueue(android.os.Message)> -> _SINK_ 
<com.android.internal.telephony.ITelephony$Stub$Proxy: void handleUssdRequest(int,java.lang.String,android.os.ResultReceiver)> -> _SINK_ 
<android.renderscript.RenderScript: void sendMessage(int,int[])> -> _SINK_ 
<com.android.internal.os.TransferPipe: void dumpAsync(android.os.IBinder,java.io.FileDescriptor,java.lang.String[])> -> _SINK_ 
<android.hardware.hdmi.IHdmiControlService$Default: void sendKeyEvent(int,int,boolean)> -> _SINK_ 
<android.view.accessibility.IAccessibilityManager$Stub$Proxy: void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent,int)> -> _SINK_ 
<android.content.Context: void sendOrderedBroadcast(android.content.Intent,int,java.lang.String,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,java.lang.String,android.os.Bundle,android.os.Bundle)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<com.android.internal.util.StateMachine: void sendMessage(int,int,int)> -> _SINK_ 
<com.android.ims.internal.IImsCallSession$Stub$Proxy: void startDtmf(char)> -> _SINK_ 
<android.telephony.SubscriptionInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_ 
<android.util.Log: int println(int,java.lang.String,java.lang.String)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.hardware.fingerprint.IFingerprintService$Stub$Proxy: void startPreparedClient(int)> -> _SINK_ 
<android.net.LocalServerSocket: void <init>(java.io.FileDescriptor)> -> _SINK_ 
<android.app.IApplicationThread$Stub$Proxy: void scheduleUnbindService(android.os.IBinder,android.content.Intent)> -> _SINK_ 
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,int,boolean,int)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.app.RemoteAction: void dump(java.lang.String,java.io.PrintWriter)> -> _SINK_ 
<android.os.Handler: boolean sendMessageAtFrontOfQueue(android.os.Message)> -> _SINK_ 
<android.net.NetworkUtils: boolean protectFromVpn(java.io.FileDescriptor)> -> _SINK_ 
<android.media.midi.MidiReceiver: void send(byte[],int,int,long)> -> _SINK_ 
<com.android.internal.view.IInputMethodClient$Stub$Proxy: void updateActivityViewToScreenMatrix(int,float[])> -> _SINK_ 
<android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent,android.app.PendingIntent$OnFinished,android.os.Handler,java.lang.String,android.os.Bundle)> -> _SINK_ 
<com.android.internal.logging.AndroidHandler: void publish(java.util.logging.Logger,java.lang.String,java.util.logging.Level,java.lang.String)> -> _SINK_ 
<android.os.PerformanceCollector: void startTiming(java.lang.String)> -> _SINK_ 
<com.android.internal.app.IAppOpsService$Default: int startOperation(android.os.IBinder,int,int,java.lang.String,java.lang.String,boolean,boolean,java.lang.String)> -> _SINK_ 
<android.content.ContextWrapper: int startActivitiesAsUser(android.content.Intent[],android.os.Bundle,android.os.UserHandle)> -> _SINK_ 
<android.bluetooth.IBluetoothGatt$Default: void sendNotification(int,java.lang.String,int,boolean,byte[])> -> _SINK_ 
<com.android.internal.app.ISoundTriggerService$Stub$Proxy: int startRecognition(android.os.ParcelUuid,android.hardware.soundtrigger.IRecognitionStatusCallback,android.hardware.soundtrigger.SoundTrigger$RecognitionConfig)> -> _SINK_ 
<android.telephony.CellIdentityWcdma: void writeToParcel(android.os.Parcel,int)> -> _SINK_ 
<android.inputmethodservice.InputMethodService: void sendKeyChar(char)> -> _SINK_ 
<android.content.pm.PackageParser$Service: void writeToParcel(android.os.Parcel,int)> -> _SINK_ 
<android.hardware.hdmi.IHdmiControlService$Stub$Proxy: void sendMhlVendorCommand(int,int,int,byte[])> -> _SINK_ 
<android.service.voice.IVoiceInteractionSession$Stub$Proxy: void taskStarted(android.content.Intent,int)> -> _SINK_ 
<android.util.Log: int logToRadioBuffer(int,java.lang.String,java.lang.String)> -> _SINK_ 
<android.database.sqlite.SQLiteDatabase: int updateWithOnConflict(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[],int)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.inputmethodservice.IInputMethodWrapper: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_ 
<android.app.ContextImpl: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,int)> -> _SINK_ 
<android.telephony.SmsManager: void sendTextMessageWithoutPersisting(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,int,boolean,int)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.app.IActivityTaskManager$Stub$Proxy: void startRecentsActivity(android.content.Intent,android.app.IAssistDataReceiver,android.view.IRecentsAnimationRunner)> -> _SINK_ 
<android.hardware.location.IContextHubClient$Stub$Proxy: int sendMessageToNanoApp(android.hardware.location.NanoAppMessage)> -> _SINK_ 
<android.os.FileUtils: long copyInternalUserspace(java.io.FileDescriptor,java.io.FileDescriptor,long,android.os.CancellationSignal,java.util.concurrent.Executor,android.os.FileUtils$ProgressListener)> -> _SINK_ 
<android.app.ActivityThread: void printRow(java.io.PrintWriter,java.lang.String,java.lang.Object[])> -> _SINK_ 
<android.location.ILocationManager$Stub$Proxy: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> -> _SINK_ 
<android.telephony.CellIdentityNr: void writeToParcel(android.os.Parcel,int)> -> _SINK_ 
<com.android.internal.telephony.IMms$Default: void sendStoredMessage(int,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent)> -> _SINK_ 
<android.graphics.drawable.AnimatedStateListDrawable$FrameInterpolator: int updateFrames(android.graphics.drawable.AnimationDrawable,boolean)> -> _SINK_ 
<android.app.Activity$HostCallbacks: void onDump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_ 
<android.app.Activity: boolean startActivityIfNeeded(android.content.Intent,int,android.os.Bundle)> -> _SINK_ 
<android.net.lowpan.ILowpanInterface$Stub$Proxy: void startNetScan(java.util.Map,android.net.lowpan.ILowpanNetScanCallback)> -> _SINK_ 
<com.android.internal.telephony.IMms$Stub$Proxy: void sendMessage(int,java.lang.String,android.net.Uri,java.lang.String,android.os.Bundle,android.app.PendingIntent,long)> -> _SINK_ 
<com.android.internal.infra.RemoteStream: java.lang.Void lambda$sendBytes$1(byte[],java.io.OutputStream)> -> _SINK_ 
<android.app.IActivityTaskManager$Default: int startActivities(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent[],java.lang.String[],android.os.IBinder,android.os.Bundle,int)> -> _SINK_ 
<android.media.session.MediaController$TransportControls: void sendCustomAction(java.lang.String,android.os.Bundle)> -> _SINK_ 
<android.nfc.cardemulation.ApduServiceInfo: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_ 
<android.app.Activity: void startActivityForResultAsUser(android.content.Intent,java.lang.String,int,android.os.Bundle,android.os.UserHandle)> -> _SINK_ 
<android.app.IActivityManager$Stub$Proxy: void startConfirmDeviceCredentialIntent(android.content.Intent,android.os.Bundle)> -> _SINK_ 
<android.util.RecurrenceRule: void writeToStream(java.io.DataOutputStream)> -> _SINK_ 
<android.telephony.UssdResponse: void writeToParcel(android.os.Parcel,int)> -> _SINK_ 
<android.app.IActivityManager$Default: int startActivityAsUserWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)> -> _SINK_ 
<android.security.keystore.IKeystoreService$Default: int update(android.security.keystore.IKeystoreOperationResultCallback,android.os.IBinder,android.security.keymaster.KeymasterArguments,byte[])> -> _SINK_ 
<android.os.INetworkManagementService$Stub$Proxy: void startTethering(java.lang.String[])> -> _SINK_ 
<android.net.LocalSocketImpl: int access$200(android.net.LocalSocketImpl,java.io.FileDescriptor)> -> _SINK_ 
<android.security.keystore.IKeystoreService$Stub$Proxy: int insert(java.lang.String,byte[],int,int)> -> _SINK_ 
<android.app.IActivityManager$Default: int startActivity(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle)> -> _SINK_ 
<android.app.IActivityManager$Stub$Proxy: void publishService(android.os.IBinder,android.content.Intent,android.os.IBinder)> -> _SINK_ 
<android.app.IActivityTaskManager$Default: int startActivityFromRecents(int,android.os.Bundle)> -> _SINK_ 
<android.view.ThreadedRenderer: void dumpGfxInfo(java.io.PrintWriter,java.io.FileDescriptor,java.lang.String[])> -> _SINK_ 
<android.bluetooth.IBluetoothMapClient$Stub$Proxy: boolean sendMessage(android.bluetooth.BluetoothDevice,android.net.Uri[],java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> -> _SINK_ 
<android.hardware.hdmi.IHdmiControlService$Stub$Proxy: void sendKeyEvent(int,int,boolean)> -> _SINK_ 
<android.app.Activity: void startIntentSenderFromChild(android.app.Activity,android.content.IntentSender,int,android.content.Intent,int,int,int,android.os.Bundle)> -> _SINK_ 
<com.android.ims.internal.IImsCallSession$Default: void sendUssd(java.lang.String)> -> _SINK_ 
<android.net.LocalSocket: void setFileDescriptorsForSend(java.io.FileDescriptor[])> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.app.ContextImpl: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> -> _SINK_ 
<android.app.ContextImpl: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> -> _SINK_ 
<android.content.integrity.IAppIntegrityManager$Default: void updateRuleSet(java.lang.String,android.content.pm.ParceledListSlice,android.content.IntentSender)> -> _SINK_ 
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFileDescriptor(java.io.FileDescriptor)> -> _SINK_ 
<android.bluetooth.IBluetoothGatt$Default: void sendResponse(int,java.lang.String,int,int,int,byte[])> -> _SINK_ 
<android.content.pm.IPackageInstaller$Default: void updateSessionAppLabel(int,java.lang.String)> -> _SINK_ 
<android.telephony.ims.aidl.IImsMmTelFeature$Default: void sendSms(int,int,java.lang.String,java.lang.String,boolean,byte[])> -> _SINK_ 
<android.app.Activity: void performTopResumedActivityChanged(boolean,java.lang.String)> -> _SINK_ 
<android.view.accessibility.IAccessibilityManager$Stub$Proxy: boolean sendFingerprintGesture(int)> -> _SINK_ 
<com.android.internal.telephony.ISub$Stub$Proxy: void removeSubscriptionsFromGroup(int[],android.os.ParcelUuid,java.lang.String)> -> _SINK_ 
<android.app.admin.IDevicePolicyManager$Default: void startManagedQuickContact(java.lang.String,long,boolean,long,android.content.Intent)> -> _SINK_ 
<android.app.Activity: void startActivity(android.content.Intent,android.os.Bundle)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.util.Log: int i(java.lang.String,java.lang.String)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.util.jar.StrictJarFile$FDStream: void <init>(java.io.FileDescriptor,long,long)> -> _SINK_ 
<android.app.IActivityManager$Default: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)> -> _SINK_ 
<android.content.ContextWrapper: void sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,int,android.os.Bundle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> -> _SINK_ 
<android.os.Debug: void startMethodTracing(java.lang.String,java.io.FileDescriptor,int,int,boolean)> -> _SINK_ 
<android.util.Slog: int i(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_ 
<android.net.LocalSocketImpl: void access$500(android.net.LocalSocketImpl,byte[],int,int,java.io.FileDescriptor)> -> _SINK_ 
<android.bluetooth.IBluetoothHidDevice$Stub$Proxy: boolean sendReport(android.bluetooth.BluetoothDevice,int,byte[])> -> _SINK_ 
<android.content.ContextWrapper: void startActivityAsUser(android.content.Intent,android.os.UserHandle)> -> _SINK_ 
<android.app.admin.DevicePolicyManager: void startManagedQuickContact(java.lang.String,long,android.content.Intent)> -> _SINK_ 
<android.hardware.input.InputManager$OnTabletModeChangedListenerDelegate: void sendTabletModeChanged(long,boolean)> -> _SINK_ 
<android.app.ContextImpl: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,android.os.Bundle)> -> _SINK_ 
<com.android.internal.telephony.ISms$Default: void sendMultipartTextForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List,boolean,long)> -> _SINK_ 
<android.app.Fragment: void startActivityForResult(android.content.Intent,int,android.os.Bundle)> -> _SINK_ 
<android.app.IActivityManager$Stub$Proxy: void startRecentsActivity(android.content.Intent,android.app.IAssistDataReceiver,android.view.IRecentsAnimationRunner)> -> _SINK_ 
<android.app.ContextImpl: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int)> -> _SINK_ 
<android.media.IAudioService$Stub$Proxy: void startBluetoothSco(android.os.IBinder,int)> -> _SINK_ 
<android.media.tv.ITvInputManager$Stub$Proxy: void startRecording(android.os.IBinder,android.net.Uri,android.os.Bundle,int)> -> _SINK_ 
<android.hardware.location.IContextHubClient$Default: int sendMessageToNanoApp(android.hardware.location.NanoAppMessage)> -> _SINK_ 
<android.util.Slog: int d(java.lang.String,java.lang.String)> -> _SINK_ 
<android.app.Activity: void startActivities(android.content.Intent[],android.os.Bundle)> -> _SINK_ 
<android.app.ContextImpl: void sendOrderedBroadcast(android.content.Intent,java.lang.String)> -> _SINK_ 
<android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)> -> _SINK_ 
<android.telephony.CellIdentity: void writeToParcel(android.os.Parcel,int)> -> _SINK_ 
<android.app.Activity: void startActivity(android.content.Intent)> -> _SINK_ 
<android.os.IRemoteCallback$Stub$Proxy: void sendResult(android.os.Bundle)> -> _SINK_ 
<android.database.DatabaseUtils: void createDbFromSqlStatements(android.content.Context,java.lang.String,int,java.lang.String)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.hardware.hdmi.HdmiClient: void sendVendorCommand(int,byte[],boolean)> -> _SINK_ 
<android.os.Messenger: void send(android.os.Message)> -> _SINK_ 
<android.permission.IPermissionController$Stub$Proxy: void updateUserSensitiveForApp(int,com.android.internal.infra.AndroidFuture)> -> _SINK_ 
<android.util.Log: int d(java.lang.String,java.lang.String)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.hardware.hdmi.HdmiTvClient: void sendStandby(int)> -> _SINK_ 
<android.media.soundtrigger.SoundTriggerDetector: void dump(java.lang.String,java.io.PrintWriter)> -> _SINK_ 
<android.content.IntentFilter: void writeToXml(org.xmlpull.v1.XmlSerializer)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<com.android.internal.util.GrowingArrayUtils: java.lang.Object[] insert(java.lang.Object[],int,int,java.lang.Object)> -> _SINK_ 
<com.android.internal.telephony.ITelephony$Stub$Proxy: void factoryReset(int)> -> _SINK_ 
<android.app.Activity: void startActivityAsCaller(android.content.Intent,android.os.Bundle,android.os.IBinder,boolean,int)> -> _SINK_ 
<android.bluetooth.IBluetoothHeadsetClient$Stub$Proxy: boolean sendVendorAtCommand(android.bluetooth.BluetoothDevice,int,java.lang.String)> -> _SINK_ 
<com.android.ims.internal.IImsCallSession$Default: void sendRttModifyRequest(android.telephony.ims.ImsCallProfile)> -> _SINK_ 
<android.telephony.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<com.android.ims.internal.IImsCallSession$Stub$Proxy: void sendRttMessage(java.lang.String)> -> _SINK_ 
<com.android.internal.telephony.ITelephony$Stub$Proxy: void carrierActionReportDefaultNetworkStatus(int,boolean)> -> _SINK_ 
<android.telephony.Rlog: int v(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_ 
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)> -> _SINK_ 
<android.app.Activity: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.content.pm.IPackageManager$Stub$Proxy: boolean canForwardTo(android.content.Intent,java.lang.String,int,int)> -> _SINK_ 
<android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)> -> _SINK_ 
<com.android.internal.util.AsyncChannel: void sendMessage(int)> -> _SINK_ 
<android.inputmethodservice.InputMethodService: void updateCandidatesVisibility(boolean)> -> _SINK_ 
<com.android.internal.telephony.ITelephony$Stub$Proxy: void unregisterImsRegistrationCallback(int,android.telephony.ims.aidl.IImsRegistrationCallback)> -> _SINK_ 
<android.os.FileBridge$FileBridgeOutputStream: void <init>(java.io.FileDescriptor)> -> _SINK_ 
<android.net.IpSecUdpEncapResponse: void <init>(int,int,int,java.io.FileDescriptor)> -> _SINK_ 
<com.android.internal.util.StateMachine: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_ 
<android.app.IActivityTaskManager$Stub$Proxy: boolean startNextMatchingActivity(android.os.IBinder,android.content.Intent,android.os.Bundle)> -> _SINK_ 
<com.android.ims.internal.IImsUt$Default: int updateCOLP(boolean)> -> _SINK_ 
<android.content.LoggingContentInterface: android.net.Uri insert(android.net.Uri,android.content.ContentValues,android.os.Bundle)> -> _SINK_ 
<android.util.LocalLog$ReadOnlyLocalLog: void reverseDump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_ 
<android.content.ContentResolver: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.os.Binder: void dump(java.io.FileDescriptor,java.lang.String[])> -> _SINK_ 
<android.content.ContentProvider$Transport: android.net.Uri insert(java.lang.String,java.lang.String,android.net.Uri,android.content.ContentValues,android.os.Bundle)> -> _SINK_ 
<android.bluetooth.IBluetoothHidHost$Stub$Proxy: boolean sendData(android.bluetooth.BluetoothDevice,java.lang.String)> -> _SINK_ 
<android.app.IApplicationThread$Stub$Proxy: void scheduleReceiver(android.content.Intent,android.content.pm.ActivityInfo,android.content.res.CompatibilityInfo,int,java.lang.String,android.os.Bundle,boolean,int,int)> -> _SINK_ 
<com.android.internal.os.IResultReceiver$Stub$Proxy: void send(int,android.os.Bundle)> -> _SINK_ 
<com.android.internal.telephony.ISms$Stub$Proxy: void injectSmsPduForSubscriber(int,byte[],java.lang.String,android.app.PendingIntent)> -> _SINK_ 
<android.os.FileBridge: void setTargetFile(java.io.FileDescriptor)> -> _SINK_ 
<android.app.FragmentHostCallback: void onDump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_ 
<android.content.ContentProviderClient: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> -> _SINK_ 
<android.util.Log: int w(java.lang.String,java.lang.Throwable)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.content.ContentResolver: android.net.Uri insert(android.net.Uri,android.content.ContentValues,android.os.Bundle)> -> _SINK_ 
<com.android.internal.telephony.ISms$Default: void sendDataForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> -> _SINK_ 
<android.bluetooth.BluetoothHeadsetClient: boolean sendVendorAtCommand(android.bluetooth.BluetoothDevice,int,java.lang.String)> -> _SINK_ 
<android.bluetooth.IBluetoothGatt$Stub$Proxy: void startAdvertisingSet(android.bluetooth.le.AdvertisingSetParameters,android.bluetooth.le.AdvertiseData,android.bluetooth.le.AdvertiseData,android.bluetooth.le.PeriodicAdvertisingParameters,android.bluetooth.le.AdvertiseData,int,int,android.bluetooth.le.IAdvertisingSetCallback)> -> _SINK_ 
<android.view.View: void sendAccessibilityEvent(int)> -> _SINK_ 
<com.android.internal.telephony.IOns$Stub$Proxy: void updateAvailableNetworks(java.util.List,com.android.internal.telephony.IUpdateAvailableNetworksCallback,java.lang.String)> -> _SINK_ 
<android.hardware.hdmi.IHdmiControlService$Default: void sendVolumeKeyEvent(int,int,boolean)> -> _SINK_ 
<android.telephony.ims.stub.RcsSipOptionsImplBase: void sendCapabilityRequest(android.net.Uri,android.telephony.ims.RcsContactUceCapability,int)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<com.android.internal.telephony.euicc.IEuiccController$Default: void updateSubscriptionNickname(int,int,java.lang.String,java.lang.String,android.app.PendingIntent)> -> _SINK_ 
<android.content.ContextWrapper: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<com.android.internal.telephony.ITelephony$Stub$Proxy: void setVoicemailRingtoneUri(java.lang.String,android.telecom.PhoneAccountHandle,android.net.Uri)> -> _SINK_ 
<android.media.MediaRouter$Static: void updateSelectedRouteForId(java.lang.String)> -> _SINK_ 
<android.app.Activity: void performStart(java.lang.String)> -> _SINK_ 
<com.android.internal.telephony.ISms$Stub$Proxy: void sendMultipartTextForSubscriberWithOptions(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List,boolean,int,boolean,int)> -> _SINK_ 
<android.app.IActivityTaskManager$Default: boolean startNextMatchingActivity(android.os.IBinder,android.content.Intent,android.os.Bundle)> -> _SINK_ 
<android.app.ContextImpl: void startActivityAsUser(android.content.Intent,android.os.UserHandle)> -> _SINK_ 
<android.hardware.hdmi.IHdmiControlService$Default: void sendVendorCommand(int,int,byte[],boolean)> -> _SINK_ 
<com.android.internal.os.TransferPipe: void goDump(android.os.IBinder,java.io.FileDescriptor,java.lang.String[])> -> _SINK_ 
<android.text.PackedObjectVector: void insertAt(int,java.lang.Object[])> -> _SINK_ 
<android.media.session.MediaController$TransportControls: void sendCustomAction(android.media.session.PlaybackState$CustomAction,android.os.Bundle)> -> _SINK_ 
<android.app.Activity: void startActivityFromFragment(android.app.Fragment,android.content.Intent,int,android.os.Bundle)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.nfc.NfcAdapter: void enableForegroundNdefPush(android.app.Activity,android.nfc.NdefMessage)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.app.IActivityManager$Stub$Proxy: void unbindFinished(android.os.IBinder,android.content.Intent,boolean)> -> _SINK_ 
<android.database.sqlite.SQLiteQueryBuilder: int update(android.database.sqlite.SQLiteDatabase,android.content.ContentValues,java.lang.String,java.lang.String[])> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.app.admin.IDevicePolicyManager$Default: int startUserInBackground(android.content.ComponentName,android.os.UserHandle)> -> _SINK_ 
<com.android.ims.internal.IImsCallSession$Stub$Proxy: void start(java.lang.String,android.telephony.ims.ImsCallProfile)> -> _SINK_ 
<android.app.ActivityOptions$1: void sendResult(android.os.Bundle)> -> _SINK_ 
<android.os.storage.StorageManager$ObbListenerDelegate: void sendObbStateChanged(java.lang.String,int)> -> _SINK_ 
<android.media.session.ISessionController$Default: void sendCommand(java.lang.String,java.lang.String,android.os.Bundle,android.os.ResultReceiver)> -> _SINK_ 
<android.bluetooth.BluetoothGattServer: boolean sendResponse(android.bluetooth.BluetoothDevice,int,int,int,byte[])> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.content.pm.CrossProfileApps: void startActivity(android.content.Intent,android.os.UserHandle,android.app.Activity,android.os.Bundle)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.content.integrity.IAppIntegrityManager$Stub$Proxy: void updateRuleSet(java.lang.String,android.content.pm.ParceledListSlice,android.content.IntentSender)> -> _SINK_ 
<android.telephony.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List,java.lang.String,java.lang.String)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.bluetooth.IBluetoothGatt$Stub$Proxy: void sendNotification(int,java.lang.String,int,boolean,byte[])> -> _SINK_ 
<android.telephony.PreciseDataConnectionState: void writeToParcel(android.os.Parcel,int)> -> _SINK_ 
<android.widget.TextView: void sendAccessibilityEventInternal(int)> -> _SINK_ 
<android.content.IntentSender: void sendIntent(android.content.Context,int,android.content.Intent,android.content.IntentSender$OnFinished,android.os.Handler)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.os.IIncidentManager$Default: void reportIncidentToDumpstate(java.io.FileDescriptor,android.os.IIncidentReportStatusListener)> -> _SINK_ 
<android.content.pm.IPackageInstaller$Stub$Proxy: void installExistingPackage(java.lang.String,int,int,android.content.IntentSender,int,java.util.List)> -> _SINK_ 
<android.content.pm.IPackageInstaller$Stub$Proxy: void uninstallExistingPackage(android.content.pm.VersionedPackage,java.lang.String,android.content.IntentSender,int)> -> _SINK_ 
<android.telephony.CellIdentityCdma: void writeToParcel(android.os.Parcel,int)> -> _SINK_ 
<com.android.internal.util.AsyncChannel: android.os.Message sendMessageSynchronously(int,int)> -> _SINK_ 
<com.android.internal.telephony.ISms$Stub$Proxy: void sendTextForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean,long)> -> _SINK_ 
<android.os.ResultReceiver: void send(int,android.os.Bundle)> -> _SINK_ 
<com.android.internal.util.StateMachine: void sendMessageDelayed(android.os.Message,long)> -> _SINK_ 
<android.app.Activity: boolean startActivityIfNeeded(android.content.Intent,int)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.app.AlarmManager: void setWindow(int,long,long,android.app.PendingIntent)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<com.android.internal.telephony.IMms$Stub$Proxy: boolean updateStoredMessageStatus(java.lang.String,android.net.Uri,android.content.ContentValues)> -> _SINK_ 
<android.content.res.ApkAssets: android.content.res.ApkAssets loadFromFd(java.io.FileDescriptor,java.lang.String,long,long,int,android.content.res.loader.AssetsProvider)> -> _SINK_ 
<android.view.WindowManagerImpl$1: void send(int,android.os.Bundle)> -> _SINK_ 
<android.telephony.NetworkScanRequest: void writeToParcel(android.os.Parcel,int)> -> _SINK_ 
<android.util.Log: int wtf(int,java.lang.String,java.lang.String,java.lang.Throwable,boolean,boolean)> -> _SINK_ 
<android.app.Activity: void startActivityFromChild(android.app.Activity,android.content.Intent,int)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.os.BatteryStats: void dumpLocked(android.content.Context,java.io.PrintWriter,java.lang.String,int,int,boolean)> -> _SINK_ 
<android.content.Context: void sendBroadcastMultiplePermissions(android.content.Intent,java.lang.String[])> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.content.res.ApkAssets: android.content.res.ApkAssets loadFromFd(java.io.FileDescriptor,java.lang.String,int,android.content.res.loader.AssetsProvider)> -> _SINK_ 
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,long)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<com.android.internal.util.StateMachine: void sendMessage(int)> -> _SINK_ 
<android.app.INotificationManager$Default: void updateNotificationChannelGroupForPackage(java.lang.String,int,android.app.NotificationChannelGroup)> -> _SINK_ 
<android.util.Slog: int d(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_ 
<android.telephony.SmsManager: void sendMultipartTextMessageWithoutPersisting(java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.widget.RemoteViews: void setContentDescription(int,java.lang.CharSequence)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<com.android.internal.telephony.ICarrierConfigLoader$Stub$Proxy: void updateConfigForPhoneId(int,java.lang.String)> -> _SINK_ 
<android.app.backup.BackupDataOutput: void <init>(java.io.FileDescriptor)> -> _SINK_ 
<android.content.pm.IPackageManager$Stub$Proxy: void replacePreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName,int)> -> _SINK_ 
<android.view.ViewRootImpl: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_ 
<com.android.internal.os.IResultReceiver$Default: void send(int,android.os.Bundle)> -> _SINK_ 
<android.view.contentcapture.IContentCaptureDirectManager$Stub$Proxy: void sendEvents(android.content.pm.ParceledListSlice,int,android.content.ContentCaptureOptions)> -> _SINK_ 
<android.net.LocalSocketImpl: void setFileDescriptorsForSend(java.io.FileDescriptor[])> -> _SINK_ 
<android.util.jar.StrictJarFile$JarFileInputStream: int read(byte[],int,int)> -> _SINK_ 
<android.app.ContextImpl: void sendBroadcast(android.content.Intent,java.lang.String,android.os.Bundle)> -> _SINK_ 
<android.telephony.SmsCbMessage: void writeToParcel(android.os.Parcel,int)> -> _SINK_ 
<android.hardware.location.IContextHubService$Stub$Proxy: int sendMessage(int,int,android.hardware.location.ContextHubMessage)> -> _SINK_ 
<com.android.internal.util.StateMachine: void sendMessageAtFrontOfQueue(int)> -> _SINK_ 
<android.content.Context: void sendBroadcastWithMultiplePermissions(android.content.Intent,java.lang.String[])> -> _SINK_ 
<android.content.pm.CrossProfileApps: void startActivity(android.content.Intent,android.os.UserHandle,android.app.Activity)> -> _SINK_ 
<android.content.ContentProviderProxy: int update(java.lang.String,java.lang.String,android.net.Uri,android.content.ContentValues,android.os.Bundle)> -> _SINK_ 
<com.android.ims.internal.IImsCallSession$Stub$Proxy: void sendUssd(java.lang.String)> -> _SINK_ 
<android.telephony.TelephonyManager: void sendDialerSpecialCode(java.lang.String)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.telephony.mbms.MbmsTempFileProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> -> _SINK_ 
<android.util.Log: int i(java.lang.String,java.lang.String,java.lang.Throwable)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.media.MediaPlayer$5: void <init>(android.media.MediaPlayer,java.io.FileDescriptor,long,long,android.media.SubtitleTrack,android.os.HandlerThread)> -> _SINK_ 
<android.app.IActivityTaskManager$Default: int startActivityWithConfig(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.content.res.Configuration,android.os.Bundle,int)> -> _SINK_ 
<android.media.session.ISessionController$Default: void sendCustomAction(java.lang.String,java.lang.String,android.os.Bundle)> -> _SINK_ 
<android.app.ActivityThread$ApplicationThread: void updatePackageCompatibilityInfo(java.lang.String,android.content.res.CompatibilityInfo)> -> _SINK_ 
<android.app.IActivityTaskManager$Stub$Proxy: int startAssistantActivity(java.lang.String,java.lang.String,int,int,android.content.Intent,java.lang.String,android.os.Bundle,int)> -> _SINK_ 
<android.app.Instrumentation: android.app.Activity newActivity(java.lang.Class,android.content.Context,android.os.IBinder,android.app.Application,android.content.Intent,android.content.pm.ActivityInfo,java.lang.CharSequence,android.app.Activity,java.lang.String,java.lang.Object)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.telephony.Rlog: int v(java.lang.String,java.lang.String)> -> _SINK_ 
<android.database.sqlite.SqliteWrapper: android.net.Uri insert(android.content.Context,android.content.ContentResolver,android.net.Uri,android.content.ContentValues)> -> _SINK_ 
<com.android.internal.app.ISoundTriggerService$Default: int startRecognition(android.os.ParcelUuid,android.hardware.soundtrigger.IRecognitionStatusCallback,android.hardware.soundtrigger.SoundTrigger$RecognitionConfig)> -> _SINK_ 
<android.os.INetworkManagementService$Stub$Proxy: void startTetheringWithConfiguration(boolean,java.lang.String[])> -> _SINK_ 
<android.hardware.camera2.ICameraDeviceUser$Stub$Proxy: void updateOutputConfiguration(int,android.hardware.camera2.params.OutputConfiguration)> -> _SINK_ 
<android.bluetooth.IBluetoothHidHost$Default: boolean sendData(android.bluetooth.BluetoothDevice,java.lang.String)> -> _SINK_ 
<android.app.IActivityTaskManager$Stub$Proxy: void startSystemLockTaskMode(int)> -> _SINK_ 
<android.telephony.ims.stub.ImsSmsImplBase: void sendSms(int,int,java.lang.String,java.lang.String,boolean,byte[])> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.media.midi.MidiInputPort: void <init>(android.media.midi.IMidiDeviceServer,android.os.IBinder,java.io.FileDescriptor,int)> -> _SINK_ 
<android.content.ContextWrapper: void startActivityAsUser(android.content.Intent,android.os.Bundle,android.os.UserHandle)> -> _SINK_ 
<android.content.ContextWrapper: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> -> _SINK_ 
<com.android.internal.telephony.ITelephony$Default: void updateEmergencyNumberListTestMode(int,android.telephony.emergency.EmergencyNumber)> -> _SINK_ 
<android.os.BasicShellCommandHandler: void init(android.os.Binder,java.io.FileDescriptor,java.io.FileDescriptor,java.io.FileDescriptor,java.lang.String[],int)> -> _SINK_ 
<android.app.backup.IBackupManager$Stub$Proxy: void updateTransportAttributesForUser(int,android.content.ComponentName,java.lang.String,android.content.Intent,java.lang.String,android.content.Intent,java.lang.CharSequence)> -> _SINK_ 
<android.telephony.CellIdentityLte: void writeToParcel(android.os.Parcel,int)> -> _SINK_ 
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void updateAppWidgetOptions(java.lang.String,int,android.os.Bundle)> -> _SINK_ 
<com.android.internal.policy.PhoneWindow: void sendCloseSystemWindows(android.content.Context,java.lang.String)> -> _SINK_ 
<com.android.internal.telephony.ITelephony$Default: void updateServiceLocationForSubscriber(int)> -> _SINK_ 
<android.net.Network: void bindSocket(java.io.FileDescriptor)> -> _SINK_ 
<android.os.ParcelFileDescriptor$1: int onFileDescriptorEvents(java.io.FileDescriptor,int)> -> _SINK_ 
<android.app.LoaderManagerImpl$LoaderInfo: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_ 
<android.content.ContextWrapper: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.app.ContextImpl: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> -> _SINK_ 
<com.android.internal.telephony.ITelephony$Stub$Proxy: int checkCarrierPrivilegesForPackage(int,java.lang.String)> -> _SINK_ 
<android.util.Log: int printlns(int,int,java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_ 
<com.android.ims.internal.IImsUt$Stub$Proxy: int updateCallBarringWithPassword(int,int,java.lang.String[],int,java.lang.String)> -> _SINK_ 
<android.media.tv.TvInputManager$Session: void sendAppPrivateCommand(java.lang.String,android.os.Bundle)> -> _SINK_ 
<android.app.ContextImpl: void startActivityAsUser(android.content.Intent,android.os.Bundle,android.os.UserHandle)> -> _SINK_ 
<com.android.internal.telephony.ISms$Stub$Proxy: boolean updateMessageOnIccEfForSubscriber(int,java.lang.String,int,int,byte[])> -> _SINK_ 
<android.os.Handler$MessengerImpl: void send(android.os.Message)> -> _SINK_ 
<android.app.IAppTask$Default: int startActivity(android.os.IBinder,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.Bundle)> -> _SINK_ 
<android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelGroupFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannelGroup)> -> _SINK_ 
<android.app.IApplicationThread$Stub$Proxy: void updateTimePrefs(int)> -> _SINK_ 
<android.net.IpSecManager: void removeTransportModeTransforms(java.io.FileDescriptor)> -> _SINK_ 
<android.app.IActivityTaskManager$Stub$Proxy: int startActivityWithConfig(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.content.res.Configuration,android.os.Bundle,int)> -> _SINK_ 
<android.app.ContextImpl: void startActivity(android.content.Intent,android.os.Bundle)> -> _SINK_ 
<com.android.internal.os.TransferPipe: void go(com.android.internal.os.TransferPipe$Caller,android.os.IInterface,java.io.FileDescriptor,java.lang.String,java.lang.String[],long)> -> _SINK_ 
<com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingModeWithFlags(int,java.lang.String,int,com.android.internal.app.IAppOpsCallback)> -> _SINK_ 
<android.app.IActivityManager$Default: int startActivityFromRecents(int,android.os.Bundle)> -> _SINK_ 
<android.app.AlarmManager: void setInexactRepeating(int,long,long,android.app.PendingIntent)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.util.Log: int w(java.lang.String,java.lang.String)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.content.ContextWrapper: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,int)> -> _SINK_ 
<android.hardware.hdmi.IHdmiControlService$Stub$Proxy: void sendStandby(int,int)> -> _SINK_ 
<android.os.FileUtils: long copy(java.io.FileDescriptor,java.io.FileDescriptor)> -> _SINK_ 
<com.android.internal.telephony.ITelephony$Stub$Proxy: int invokeOemRilRequestRaw(byte[],byte[])> -> _SINK_ 
<android.telephony.DataSpecificRegistrationInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_ 
<com.android.internal.telephony.ITelephony$Stub$Proxy: void carrierActionSetRadioEnabled(int,boolean)> -> _SINK_ 
<android.app.ActivityThread: void sendActivityResult(android.os.IBinder,java.lang.String,int,int,android.content.Intent)> -> _SINK_ 
<com.android.ims.internal.IImsUt$Stub$Proxy: int updateCallWaiting(boolean,int)> -> _SINK_ 
<com.android.ims.internal.IImsUt$Stub$Proxy: int updateCallForward(int,int,java.lang.String,int,int)> -> _SINK_ 
<android.app.ContextImpl: void sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> -> _SINK_ 
<android.app.ContextImpl: void sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,int,android.os.Bundle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> -> _SINK_ 
<android.hardware.hdmi.IHdmiControlService$Default: void sendStandby(int,int)> -> _SINK_ 
<com.android.internal.telephony.ITelephony$Stub$Proxy: void unregisterImsFeatureCallback(int,int,com.android.ims.internal.IImsServiceFeatureCallback)> -> _SINK_ 
<android.telephony.CellInfoCdma: void writeToParcel(android.os.Parcel,int)> -> _SINK_ 
<android.os.IDumpstate$Stub$Proxy: void startBugreport(int,java.lang.String,java.io.FileDescriptor,java.io.FileDescriptor,int,android.os.IDumpstateListener,boolean)> -> _SINK_ 
<com.android.internal.telephony.IIntegerConsumer$Stub$Proxy: void accept(int)> -> _SINK_ 
<android.os.FileUtils: int setPermissions(java.io.FileDescriptor,int,int,int)> -> _SINK_ 
<android.print.IPrintManager$Stub$Proxy: void startPrinterStateTracking(android.print.PrinterId,int)> -> _SINK_ 
<android.app.ActivityManager: void dumpPackageStateStatic(java.io.FileDescriptor,java.lang.String)> -> _SINK_ 
<android.os.IPowerManager$Stub$Proxy: void updateWakeLockWorkSource(android.os.IBinder,android.os.WorkSource,java.lang.String)> -> _SINK_ 
<android.telephony.CallAttributes: void writeToParcel(android.os.Parcel,int)> -> _SINK_ 
<android.app.Activity: void dispatchActivityResult(java.lang.String,int,int,android.content.Intent,java.lang.String)> -> _SINK_ 
<android.app.Activity: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_ 
<android.media.session.MediaSession: void sendSessionEvent(java.lang.String,android.os.Bundle)> -> _SINK_ 
<com.android.internal.util.GrowingArrayUtils: boolean[] insert(boolean[],int,int,boolean)> -> _SINK_ 
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void updateAppWidgetProviderInfo(android.content.ComponentName,java.lang.String)> -> _SINK_ 
<android.hardware.camera2.DngCreator: void writeByteBuffer(java.io.OutputStream,android.util.Size,java.nio.ByteBuffer,long)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.telephony.SignalStrength: void writeToParcel(android.os.Parcel,int)> -> _SINK_ 
<android.content.IIntentSender$Stub$Proxy: void send(int,android.content.Intent,java.lang.String,android.os.IBinder,android.content.IIntentReceiver,java.lang.String,android.os.Bundle)> -> _SINK_ 
<android.bluetooth.IBluetoothGatt$Stub$Proxy: void startScan(int,android.bluetooth.le.ScanSettings,java.util.List,java.util.List,java.lang.String,java.lang.String)> -> _SINK_ 
<android.app.Activity: void startActivityForResultAsUser(android.content.Intent,int,android.os.Bundle,android.os.UserHandle)> -> _SINK_ 
<com.android.ims.internal.IImsUt$Default: int updateCLIP(boolean)> -> _SINK_ 
<android.app.Activity: void startActivityAsUser(android.content.Intent,android.os.Bundle,android.os.UserHandle)> -> _SINK_ 
<android.media.session.ISessionController$Stub$Proxy: void sendCommand(java.lang.String,java.lang.String,android.os.Bundle,android.os.ResultReceiver)> -> _SINK_ 
<android.graphics.drawable.BitmapDrawable: void <init>(android.content.res.Resources,java.io.InputStream)> -> _SINK_ 
<android.app.IActivityManager$Default: int startActivityAsUser(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)> -> _SINK_ 
<android.content.pm.IPackageManager$Stub$Proxy: void addCrossProfileIntentFilter(android.content.IntentFilter,java.lang.String,int,int,int)> -> _SINK_ 
<com.android.internal.telephony.ITelephony$Stub$Proxy: void stopNetworkScan(int,int)> -> _SINK_ 
<com.android.internal.inputmethod.IInputMethodPrivilegedOperations$Stub$Proxy: void updateStatusIcon(java.lang.String,int)> -> _SINK_ 
<android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_ 
<com.android.ims.internal.IImsUt$Stub$Proxy: int updateCallBarring(int,int,java.lang.String[])> -> _SINK_ 
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean sendVendorSpecificResultCode(android.bluetooth.BluetoothDevice,java.lang.String,java.lang.String)> -> _SINK_ 
<android.app.Instrumentation: android.app.Activity startActivitySync(android.content.Intent)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)> -> _SINK_ 
<android.print.IPrintManager$Stub$Proxy: void startPrinterDiscovery(android.print.IPrinterDiscoveryObserver,java.util.List,int)> -> _SINK_ 
<android.os.BatteryStats$HistoryEventTracker: boolean updateState(int,java.lang.String,int,int)> -> _SINK_ 
<android.provider.Browser: void sendString(android.content.Context,java.lang.String)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.media.midi.MidiInputPort: void <init>(java.io.FileDescriptor,int)> -> _SINK_ 
<android.media.MediaMetadataRetriever: void setDataSource(java.io.FileDescriptor)> -> _SINK_ 
<android.app.ActivityThread: void sendMessage(int,java.lang.Object)> -> _SINK_ 
<com.android.internal.view.IInputMethodSession$Stub$Proxy: void updateExtractedText(int,android.view.inputmethod.ExtractedText)> -> _SINK_ 
<android.app.Instrumentation: void sendCharacterSync(int)> -> _SINK_ 
<android.app.ContextImpl: void sendOrderedBroadcast(android.content.Intent,java.lang.String,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> -> _SINK_ 
<android.telephony.ims.aidl.IImsRcsFeature$Stub$Proxy: void sendCapabilityRequest(android.net.Uri,android.telephony.ims.RcsContactUceCapability,int)> -> _SINK_ 
<android.app.Instrumentation: void sendStatus(int,android.os.Bundle)> -> _SINK_ 
<android.app.IActivityTaskManager$Default: int startAssistantActivity(java.lang.String,java.lang.String,int,int,android.content.Intent,java.lang.String,android.os.Bundle,int)> -> _SINK_ 
<android.app.AlarmManager: void setExact(int,long,android.app.PendingIntent)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void write(int)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.view.contentcapture.IContentCaptureDirectManager$Default: void sendEvents(android.content.pm.ParceledListSlice,int,android.content.ContentCaptureOptions)> -> _SINK_ 
<com.android.internal.telephony.ITelephony$Stub$Proxy: void unregisterImsProvisioningChangedCallback(int,android.telephony.ims.aidl.IImsConfigCallback)> -> _SINK_ 
<com.android.ims.internal.IImsUt$Default: int updateCallBarringWithPassword(int,int,java.lang.String[],int,java.lang.String)> -> _SINK_ 
<android.telephony.SubscriptionPlan: void writeToParcel(android.os.Parcel,int)> -> _SINK_ 
<android.os.IIncidentCompanion$Stub$Proxy: void sendReportReadyBroadcast(java.lang.String,java.lang.String)> -> _SINK_ 
<android.app.Activity: void dumpInner(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_ 
<android.content.ContextWrapper: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<com.android.internal.util.GrowingArrayUtils: int[] insert(int[],int,int,int)> -> _SINK_ 
<android.os.RemoteCallback$1: void sendResult(android.os.Bundle)> -> _SINK_ 
<android.net.NetworkStats: android.net.NetworkStats insertEntry(java.lang.String,int,int,int,long,long,long,long,long)> -> _SINK_ 
<android.net.lowpan.ILowpanInterface$Default: void sendToCommissioner(byte[])> -> _SINK_ 
<com.android.internal.telephony.ITelephony$Stub$Proxy: void resetIms(int)> -> _SINK_ 
<android.util.Log$ImmediateLogWriter: void write(char[],int,int)> -> _SINK_ 
<android.os.Parcel: void readRawFileDescriptorArray(java.io.FileDescriptor[])> -> _SINK_ 
<android.os.NativeHandle: void <init>(java.io.FileDescriptor,boolean)> -> _SINK_ 
<android.media.SRTTrack: void updateView(java.util.Vector)> -> _SINK_ 
<android.media.session.MediaController: void sendCommand(java.lang.String,android.os.Bundle,android.os.ResultReceiver)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.hardware.cas.V1_0.ICas$Proxy: int sendEvent(int,int,java.util.ArrayList)> -> _SINK_ 
<com.android.server.NetworkManagementSocketTagger: void tag(java.io.FileDescriptor)> -> _SINK_ 
<android.view.WindowlessWindowManager: android.os.Bundle sendWallpaperCommand(android.os.IBinder,java.lang.String,int,int,int,android.os.Bundle,boolean)> -> _SINK_ 
<android.os.FileUtils: long copy(java.io.FileDescriptor,java.io.FileDescriptor,long,android.os.CancellationSignal,java.util.concurrent.Executor,android.os.FileUtils$ProgressListener)> -> _SINK_ 
<android.app.ContextImpl: void sendBroadcastMultiplePermissions(android.content.Intent,java.lang.String[])> -> _SINK_ 
<android.text.SpannableStringBuilder: android.text.Editable insert(int,java.lang.CharSequence,int,int)> -> _SINK_ 
<android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_ 
<android.app.IActivityManager$Stub$Proxy: void startDelegateShellPermissionIdentity(int,java.lang.String[])> -> _SINK_ 
<android.os.BatteryStats: void dumpProtoLocked(android.content.Context,java.io.FileDescriptor,java.util.List,int,long)> -> _SINK_ 
<android.view.InsetsController: void dump(java.lang.String,java.io.PrintWriter)> -> _SINK_ 
<com.android.ims.internal.IImsUt$Default: int updateCOLR(int)> -> _SINK_ 
<android.os.Debug: boolean dumpService(java.lang.String,java.io.FileDescriptor,java.lang.String[])> -> _SINK_ 
<android.content.ContextWrapper: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.os.Bundle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.hardware.cas.V1_1.ICas$Proxy: int sendSessionEvent(java.util.ArrayList,int,int,java.util.ArrayList)> -> _SINK_ 
<android.content.pm.PackageParser: android.content.pm.PackageParser$ApkLite parseApkLite(java.io.FileDescriptor,java.lang.String,int)> -> _SINK_ 
<android.util.LocalLog: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_ 
<com.android.internal.telephony.CellNetworkScanResult: void writeToParcel(android.os.Parcel,int)> -> _SINK_ 
<android.content.IntentSender: void sendIntent(android.content.Context,int,android.content.Intent,android.content.IntentSender$OnFinished,android.os.Handler,java.lang.String)> -> _SINK_ 
<android.os.IIncidentManager$Stub$Proxy: void reportIncidentToStream(android.os.IncidentReportArgs,android.os.IIncidentReportStatusListener,java.io.FileDescriptor)> -> _SINK_ 
<android.net.NetworkStats: android.net.NetworkStats insertEntry(java.lang.String,int,int,int,int,int,int,long,long,long,long,long)> -> _SINK_ 
<android.os.Parcel: void writeRawFileDescriptor(java.io.FileDescriptor)> -> _SINK_ 
<android.nfc.NfcAdapter: void setNdefPushMessage(android.nfc.NdefMessage,android.app.Activity,int)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.app.Activity: void setResult(int,android.content.Intent)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.bluetooth.BluetoothMapClient: boolean sendMessage(android.bluetooth.BluetoothDevice,android.net.Uri[],java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.telephony.Rlog: int println(int,java.lang.String,java.lang.String)> -> _SINK_ 
<android.net.LocalSocketImpl: int access$300(android.net.LocalSocketImpl,byte[],int,int,java.io.FileDescriptor)> -> _SINK_ 
<android.net.lowpan.ILowpanInterface$Stub$Proxy: void sendToCommissioner(byte[])> -> _SINK_ 
<android.os.ShellCommand: int exec(android.os.Binder,java.io.FileDescriptor,java.io.FileDescriptor,java.io.FileDescriptor,java.lang.String[],android.os.ShellCallback,android.os.ResultReceiver)> -> _SINK_ 
<android.app.DisabledWallpaperManager: void sendWallpaperCommand(android.os.IBinder,java.lang.String,int,int,int,android.os.Bundle)> -> _SINK_ 
<android.content.ContextWrapper: void startActivityForResult(java.lang.String,android.content.Intent,int,android.os.Bundle)> -> _SINK_ 
<android.os.ResultReceiver$MyResultReceiver: void send(int,android.os.Bundle)> -> _SINK_ 
<android.provider.Browser: void sendString(android.content.Context,java.lang.String,java.lang.String)> -> _SINK_ 
<com.android.internal.telephony.ISms$Stub$Proxy: void sendStoredText(int,java.lang.String,java.lang.String,android.net.Uri,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> -> _SINK_ 
<android.content.ContentProviderClient: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> -> _SINK_ 
<android.content.ContextWrapper: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,android.os.Bundle)> -> _SINK_ 
<com.android.internal.telephony.ITelephony$Default: void sendVisualVoicemailSmsForSubscriber(java.lang.String,java.lang.String,int,java.lang.String,int,java.lang.String,android.app.PendingIntent)> -> _SINK_ 
<android.hardware.hdmi.HdmiPlaybackClient: void sendStandby()> -> _SINK_ 
<android.os.Message: void sendToTarget()> -> _SINK_ 
<com.android.internal.app.ISoundTriggerService$Default: int startRecognitionForService(android.os.ParcelUuid,android.os.Bundle,android.content.ComponentName,android.hardware.soundtrigger.SoundTrigger$RecognitionConfig)> -> _SINK_ 
<android.content.ContextWrapper: void startActivity(android.content.Intent,android.os.Bundle)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.app.Fragment: void startActivity(android.content.Intent)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<com.android.internal.app.IVoiceInteractor$Stub$Proxy: com.android.internal.app.IVoiceInteractorRequest startPickOption(java.lang.String,com.android.internal.app.IVoiceInteractorCallback,android.app.VoiceInteractor$Prompt,android.app.VoiceInteractor$PickOptionRequest$Option[],android.os.Bundle)> -> _SINK_ 
<com.android.internal.appwidget.IAppWidgetService$Default: void updateAppWidgetIds(java.lang.String,int[],android.widget.RemoteViews)> -> _SINK_ 
<com.android.internal.telephony.ITelephony$Stub$Proxy: void switchMultiSimConfig(int)> -> _SINK_ 
<android.app.Activity: void startActivityAsUser(android.content.Intent,android.os.UserHandle)> -> _SINK_ 
<android.media.midi.IMidiDeviceServer$Stub$Proxy: int connectPorts(android.os.IBinder,java.io.FileDescriptor,int)> -> _SINK_ 
<com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void updateSubscriptionNickname(int,int,java.lang.String,java.lang.String,android.app.PendingIntent)> -> _SINK_ 
<android.media.midi.MidiOutputPort: void <init>(java.io.FileDescriptor,int)> -> _SINK_ 
<android.telephony.CellInfoTdscdma: void writeToParcel(android.os.Parcel,int)> -> _SINK_ 
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor dup(java.io.FileDescriptor)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.bluetooth.IBluetoothHidDevice$Default: boolean sendReport(android.bluetooth.BluetoothDevice,int,byte[])> -> _SINK_ 
<android.app.PendingIntent$1: void send(int,android.os.Bundle)> -> _SINK_ 
<android.view.autofill.IAutoFillManagerClient$Stub$Proxy: void startIntentSender(android.content.IntentSender,android.content.Intent)> -> _SINK_ 
<android.media.tv.ITvInputManager$Default: void sendAppPrivateCommand(android.os.IBinder,java.lang.String,android.os.Bundle,int)> -> _SINK_ 
<android.app.ContextImpl: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.os.Bundle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> -> _SINK_ 
<android.content.ContextWrapper: void sendOrderedBroadcast(android.content.Intent,java.lang.String,int,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> -> _SINK_ 
<android.content.Context: void startActivityAsUser(android.content.Intent,android.os.UserHandle)> -> _SINK_ 
<com.android.internal.util.StateMachine: void sendMessageDelayed(int,java.lang.Object,long)> -> _SINK_ 
<android.app.Activity: void startActivities(android.content.Intent[])> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.net.NetworkStatsHistory: void writeToStream(java.io.DataOutputStream)> -> _SINK_ 
<com.android.internal.telephony.ITelephony$Stub$Proxy: void updateEmergencyNumberListTestMode(int,android.telephony.emergency.EmergencyNumber)> -> _SINK_ 
<android.view.View: void sendAccessibilityEventInternal(int)> -> _SINK_ 
<com.android.internal.telephony.ITelephony$Stub$Proxy: void dial(java.lang.String)> -> _SINK_ 
<com.android.internal.os.TransferPipe: void go(java.io.FileDescriptor)> -> _SINK_ 
<com.android.internal.telephony.ISms$Stub$Proxy: void sendTextForSubscriberWithOptions(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean,int,boolean,int)> -> _SINK_ 
<android.os.BinderProxy: void dump(java.io.FileDescriptor,java.lang.String[])> -> _SINK_ 
<android.app.FragmentController: void dumpLoaders(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_ 
<com.android.ims.internal.IImsCallSession$Stub$Proxy: void update(int,android.telephony.ims.ImsStreamMediaProfile)> -> _SINK_ 
<android.util.jar.StrictJarFile: void <init>(java.io.FileDescriptor)> -> _SINK_ 
<android.app.VoiceInteractor: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_ 
<android.util.LocalLog$ReadOnlyLocalLog: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_ 
<android.view.IWindowManager$Stub$Proxy: void startFreezingScreen(int,int)> -> _SINK_ 
<com.android.internal.telephony.ISms$Stub$Proxy: int checkSmsShortCodeDestination(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_ 
<com.android.internal.telephony.ITelephony$Stub$Proxy: void updateServiceLocationForSubscriber(int)> -> _SINK_ 
<android.content.ContextWrapper: void sendBroadcast(android.content.Intent,java.lang.String,int)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.net.wifi.nl80211.WifiNl80211Manager: void sendMgmtFrame(java.lang.String,byte[],int,java.util.concurrent.Executor,android.net.wifi.nl80211.WifiNl80211Manager$SendMgmtFrameCallback)> -> _SINK_ 
<android.app.ContextImpl: void startActivities(android.content.Intent[])> -> _SINK_ 
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: void resetCarrierKeysForImsiEncryption(int,java.lang.String)> -> _SINK_ 
<android.app.ContextImpl: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String)> -> _SINK_ 
<android.content.ContentResolver: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> -> _SINK_ 
<android.telephony.Rlog: int w(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_ 
<android.app.servertransaction.TransactionExecutorHelper: java.lang.String transactionToString(android.app.servertransaction.ClientTransaction,android.app.ClientTransactionHandler)> -> _SINK_ 
<android.app.ContextImpl: android.content.ComponentName startService(android.content.Intent)> -> _SINK_ 
<android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelForPackage(java.lang.String,int,android.app.NotificationChannel)> -> _SINK_ 
<android.app.BackStackRecord: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_ 
<android.security.keystore.IKeystoreService$Default: int insert(java.lang.String,byte[],int,int)> -> _SINK_ 
<android.content.ContentProvider: int update(android.net.Uri,android.content.ContentValues,android.os.Bundle)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int enableSystemAppWithIntent(android.content.ComponentName,java.lang.String,android.content.Intent)> -> _SINK_ 
<android.util.Log: int e(java.lang.String,java.lang.String)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.database.sqlite.SQLiteDatabase: long insertOrThrow(java.lang.String,java.lang.String,android.content.ContentValues)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.app.IApplicationThread$Stub$Proxy: void updatePackageCompatibilityInfo(java.lang.String,android.content.res.CompatibilityInfo)> -> _SINK_ 
<android.app.IApplicationThread$Stub$Proxy: void scheduleBindService(android.os.IBinder,android.content.Intent,boolean,int)> -> _SINK_ 
<android.media.session.ISessionController$Stub$Proxy: void sendCustomAction(java.lang.String,java.lang.String,android.os.Bundle)> -> _SINK_ 
<android.content.ContextWrapper: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int,android.os.Bundle)> -> _SINK_ 
<android.app.Fragment: void startActivityForResult(android.content.Intent,int)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.app.ContextImpl: void sendBroadcast(android.content.Intent,java.lang.String,int)> -> _SINK_ 
<android.app.IActivityManager$Stub$Proxy: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)> -> _SINK_ 
<android.app.IActivityManager$Stub$Proxy: void updateLockTaskPackages(int,java.lang.String[])> -> _SINK_ 
<com.android.ims.internal.IImsCallSession$Default: void sendRttMessage(java.lang.String)> -> _SINK_ 
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<com.android.ims.internal.IImsVideoCallProvider$Default: void sendSessionModifyResponse(android.telecom.VideoProfile)> -> _SINK_ 
<android.app.IActivityManager$Default: void updateDeviceOwner(java.lang.String)> -> _SINK_ 
<android.content.ContextWrapper: void sendOrderedBroadcast(android.content.Intent,java.lang.String,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.app.backup.BackupManager: void updateTransportAttributes(android.content.ComponentName,java.lang.String,android.content.Intent,java.lang.String,android.content.Intent,java.lang.String)> -> _SINK_ 
<com.android.internal.util.AsyncChannel: android.os.Message sendMessageSynchronously(int)> -> _SINK_ 
<android.hardware.hdmi.HdmiAudioSystemClient: void sendReportAudioStatusCecCommand(boolean,int,int,boolean)> -> _SINK_ 
<android.os.ParcelFileDescriptor: void <init>(java.io.FileDescriptor,java.io.FileDescriptor)> -> _SINK_ 
<android.os.MessageQueue$FileDescriptorRecord: void <init>(java.io.FileDescriptor,int,android.os.MessageQueue$OnFileDescriptorEventListener)> -> _SINK_ 
<com.android.internal.util.SyncResultReceiver: void send(int,android.os.Bundle)> -> _SINK_ 
<android.app.Instrumentation: void sendStringSync(java.lang.String)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.telephony.TelephonyManager: java.lang.String sendEnvelopeWithStatus(java.lang.String)> -> _SINK_ 
<android.app.IActivityManager$Stub$Proxy: int startActivityWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle)> -> _SINK_ 
<android.database.sqlite.SQLiteDatabase: long insertWithOnConflict(java.lang.String,java.lang.String,android.content.ContentValues,int)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.app.ContextImpl: int startActivitiesAsUser(android.content.Intent[],android.os.Bundle,android.os.UserHandle)> -> _SINK_ 
<com.android.internal.telephony.ITelephony$Stub$Proxy: void sendVisualVoicemailSmsForSubscriber(java.lang.String,java.lang.String,int,java.lang.String,int,java.lang.String,android.app.PendingIntent)> -> _SINK_ 
<android.os.SharedMemory$Closer: void <init>(java.io.FileDescriptor,android.os.SharedMemory$MemoryRegistration,android.os.SharedMemory$1)> -> _SINK_ 
<android.app.VoiceInteractor$CompleteVoiceRequest: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_ 
<android.content.ContextWrapper: void sendBroadcast(android.content.Intent,java.lang.String,android.os.Bundle)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.app.Activity: void startActivityForResult(android.content.Intent,int,android.os.Bundle)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void startManagedQuickContact(java.lang.String,long,boolean,long,android.content.Intent)> -> _SINK_ 
<android.telephony.Rlog: int d(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_ 
<android.os.Binder: void onShellCommand(java.io.FileDescriptor,java.io.FileDescriptor,java.io.FileDescriptor,java.lang.String[],android.os.ShellCallback,android.os.ResultReceiver)> -> _SINK_ 
<android.os.Binder: void dumpAsync(java.io.FileDescriptor,java.lang.String[])> -> _SINK_ 
<com.android.internal.telephony.ISms$Default: void sendStoredMultipartText(int,java.lang.String,java.lang.String,android.net.Uri,java.lang.String,java.util.List,java.util.List)> -> _SINK_ 
<android.content.pm.parsing.component.ParsedService: void writeToParcel(android.os.Parcel,int)> -> _SINK_ 
<android.nfc.cardemulation.HostNfcFService: void sendResponsePacket(byte[])> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.bluetooth.IBluetoothHeadsetClient$Default: boolean sendDTMF(android.bluetooth.BluetoothDevice,byte)> -> _SINK_ 
<android.telephony.CellIdentityGsm: void writeToParcel(android.os.Parcel,int)> -> _SINK_ 
<android.telephony.CellSignalStrengthNr: void updateLevel(android.os.PersistableBundle,android.telephony.ServiceState)> -> _SINK_ 
<android.nfc.cardemulation.HostApduService: void sendResponseApdu(byte[])> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.bluetooth.BluetoothGatt: boolean writeDescriptor(android.bluetooth.BluetoothGattDescriptor)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.os.storage.StorageVolume: void <init>(java.lang.String,java.io.File,java.io.File,java.lang.String,boolean,boolean,boolean,boolean,long,android.os.UserHandle,java.lang.String,java.lang.String)> -> _SINK_ 
<android.app.Activity: boolean startNextMatchingActivity(android.content.Intent)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.content.Context: void startActivityForResult(java.lang.String,android.content.Intent,int,android.os.Bundle)> -> _SINK_ 
<android.app.Activity: boolean startNextMatchingActivity(android.content.Intent,android.os.Bundle)> -> _SINK_ 
<android.content.ContentProviderClient: android.net.Uri insert(android.net.Uri,android.content.ContentValues,android.os.Bundle)> -> _SINK_ 
<android.media.tv.TvInputManager$Session: boolean updateTrackSelection(int,java.lang.String)> -> _SINK_ 
<com.android.ims.internal.IImsUt$Default: int updateCallBarring(int,int,java.lang.String[])> -> _SINK_ 
<com.android.internal.util.StateMachine$LogRec: void update(com.android.internal.util.StateMachine,android.os.Message,java.lang.String,com.android.internal.util.IState,com.android.internal.util.IState,com.android.internal.util.IState)> -> _SINK_ 
<android.nfc.cardemulation.NfcFServiceInfo: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_ 
<android.media.MediaPlayer: void addTimedTextSource(java.io.FileDescriptor,long,long,java.lang.String)> -> _SINK_ 
<android.app.IActivityTaskManager$Default: int startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)> -> _SINK_ 
<android.os.BasicShellCommandHandler: int exec(android.os.Binder,java.io.FileDescriptor,java.io.FileDescriptor,java.io.FileDescriptor,java.lang.String[])> -> _SINK_ 
<android.telephony.CellSignalStrengthTdscdma: void updateLevel(android.os.PersistableBundle,android.telephony.ServiceState)> -> _SINK_ 
<android.content.Context: void sendOrderedBroadcast(android.content.Intent,java.lang.String,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.content.pm.ICrossProfileApps$Default: void startActivityAsUserByIntent(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,int,android.os.IBinder,android.os.Bundle)> -> _SINK_ 
<android.app.ActivityManager: void dumpPackageState(java.io.FileDescriptor,java.lang.String)> -> _SINK_ 
<android.app.ContextImpl: void sendBroadcastAsUserMultiplePermissions(android.content.Intent,android.os.UserHandle,java.lang.String[])> -> _SINK_ 
<com.android.internal.util.StateMachine: void sendMessageDelayed(int,long)> -> _SINK_ 
<android.app.ContextImpl: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int,android.os.Bundle)> -> _SINK_ 
<android.view.View$AccessibilityDelegate: void sendAccessibilityEvent(android.view.View,int)> -> _SINK_ 
<android.view.autofill.AutofillManager: void setUserData(android.service.autofill.UserData)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<com.android.internal.util.StateMachine: void sendMessageDelayed(int,int,int,java.lang.Object,long)> -> _SINK_ 
<android.app.AlarmManager: void setExactAndAllowWhileIdle(int,long,android.app.PendingIntent)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.permission.IPermissionManager$Default: void updatePermissionFlags(java.lang.String,java.lang.String,int,int,boolean,int)> -> _SINK_ 
<android.app.ActivityOptions$2: void sendResult(android.os.Bundle)> -> _SINK_ 
<android.telephony.BarringInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_ 
<android.content.pm.IPackageManager$Stub$Proxy: boolean activitySupportsIntent(android.content.ComponentName,android.content.Intent,java.lang.String)> -> _SINK_ 
<android.telephony.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,int,boolean,int)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<com.android.ims.internal.IImsUt$Default: int updateCallForward(int,int,java.lang.String,int,int)> -> _SINK_ 
<android.app.ContextImpl: void sendStickyBroadcast(android.content.Intent)> -> _SINK_ 
<android.bluetooth.IBluetoothHeadset$Default: boolean sendVendorSpecificResultCode(android.bluetooth.BluetoothDevice,java.lang.String,java.lang.String)> -> _SINK_ 
<android.app.ActivityThread: android.app.Activity startActivityNow(android.app.Activity,java.lang.String,android.content.Intent,android.content.pm.ActivityInfo,android.os.IBinder,android.os.Bundle,android.app.Activity$NonConfigurationInstances,android.os.IBinder)> -> _SINK_ 
<com.android.internal.inputmethod.IInputMethodPrivilegedOperations$Default: void updateStatusIcon(java.lang.String,int)> -> _SINK_ 
<com.android.ims.internal.IImsCallSession$Stub$Proxy: void sendRttModifyResponse(boolean)> -> _SINK_ 
<android.app.PendingIntent: void send()> -> _SINK_ 
<android.content.pm.ILauncherApps$Stub$Proxy: void startSessionDetailsActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.pm.PackageInstaller$SessionInfo,android.graphics.Rect,android.os.Bundle,android.os.UserHandle)> -> _SINK_ 
<android.net.NetworkStats: android.net.NetworkStats insertEntry(android.net.NetworkStats$Entry)> -> _SINK_ 
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor)> -> _SINK_ 
<android.app.IActivityTaskManager$Stub$Proxy: int startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)> -> _SINK_ 
<android.media.tv.ITvInputManager$Stub$Proxy: void sendTvInputNotifyIntent(android.content.Intent,int)> -> _SINK_ 
<android.util.Slog: int i(java.lang.String,java.lang.String)> -> _SINK_ 
<android.content.ContentProvider: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_ 
<android.os.INetworkManagementService$Stub$Proxy: void startInterfaceForwarding(java.lang.String,java.lang.String)> -> _SINK_ 
<android.util.Slog: int w(java.lang.String,java.lang.String)> -> _SINK_ 
<android.app.backup.BackupDataInput: void <init>(java.io.FileDescriptor)> -> _SINK_ 
<android.os.Parcel: void writeRawFileDescriptorArray(java.io.FileDescriptor[])> -> _SINK_ 
<com.android.internal.util.AsyncChannel: android.os.Message sendMessageSynchronously(int,int,int,java.lang.Object)> -> _SINK_ 
<android.app.Activity: void startActivityFromChild(android.app.Activity,android.content.Intent,int,android.os.Bundle)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.app.admin.IDevicePolicyManager$Default: int enableSystemAppWithIntent(android.content.ComponentName,java.lang.String,android.content.Intent)> -> _SINK_ 
<android.permission.IPermissionManager$Stub$Proxy: void startOneTimePermissionSession(java.lang.String,int,long,int,int)> -> _SINK_ 
<android.net.IConnectivityManager$Default: void startTcpKeepalive(android.net.Network,java.io.FileDescriptor,int,android.net.ISocketKeepaliveCallback)> -> _SINK_ 
<android.content.ContextWrapper: void sendOrderedBroadcast(android.content.Intent,java.lang.String)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannel)> -> _SINK_ 
<android.view.contentcapture.IContentCaptureManager$Stub$Proxy: void startSession(android.os.IBinder,android.content.ComponentName,int,int,com.android.internal.os.IResultReceiver)> -> _SINK_ 
<android.bluetooth.IBluetoothAvrcpController$Default: void sendGroupNavigationCmd(android.bluetooth.BluetoothDevice,int,int)> -> _SINK_ 
<android.media.midi.IMidiDeviceServer$Default: int connectPorts(android.os.IBinder,java.io.FileDescriptor,int)> -> _SINK_ 
<android.util.LocalLog: void reverseDump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_ 
<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<com.android.internal.os.HandlerCaller: void sendMessage(android.os.Message)> -> _SINK_ 
<android.app.IActivityManager$Default: int sendIntentSender(android.content.IIntentSender,android.os.IBinder,int,android.content.Intent,java.lang.String,android.content.IIntentReceiver,java.lang.String,android.os.Bundle)> -> _SINK_ 
<android.app.IActivityTaskManager$Stub$Proxy: void startLockTaskModeByToken(android.os.IBinder)> -> _SINK_ 
<com.android.internal.view.IInputMethod$Stub$Proxy: void startInput(android.os.IBinder,com.android.internal.view.IInputContext,int,android.view.inputmethod.EditorInfo,boolean,boolean)> -> _SINK_ 
<com.android.internal.policy.DecorView: void sendAccessibilityEvent(int)> -> _SINK_ 
<com.android.internal.telephony.ITelephony$Stub$Proxy: int checkCarrierPrivilegesForPackageAnyPhone(java.lang.String)> -> _SINK_ 
<android.telephony.CellInfoNr: void writeToParcel(android.os.Parcel,int)> -> _SINK_ 
<java.net.Socket: void sendUrgentData(int)> -> _SINK_
<java.net.MulticastSocket: void send(java.net.DatagramPacket,byte)> -> _SINK_
<java.net.DatagramSocket: void send(java.net.DatagramPacket)> -> _SINK_
<java.net.URL: java.net.URLConnection openConnection()> -> _SINK_
