<android.os.IncidentManager$IncidentReport: long getPrivacyPolicy()> -> _SOURCE_
<android.content.pm.PackageParser$Package: boolean isProduct()> -> _SOURCE_
<com.android.internal.telephony.euicc.ILoadBoundProfilePackageCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.content.pm.IPackageManager$Default: android.content.ComponentName getInstantAppInstallerComponent()> -> _SOURCE_
<android.view.contentcapture.ContentCaptureEvent: android.graphics.Insets getInsets()> -> _SOURCE_
<android.telephony.CellConfigLte: int describeContents()> -> _SOURCE_
<android.os.BasicShellCommandHandler: java.lang.String[] getAllArgs()> -> _SOURCE_
<android.content.pm.PackageManager: java.lang.String getWellbeingPackageName()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: int getCurrentFailedPasswordAttempts(int)> -> _SOURCE_
<android.app.IActivityTaskManager$Default: android.content.pm.ConfigurationInfo getDeviceConfigurationInfo()> -> _SOURCE_
<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.HdmiAudioSystemClient getAudioSystemClient()> -> _SOURCE_
<android.app.backup.BackupManager: java.lang.String[] listAllTransports()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isProvisioningAllowed(java.lang.String)> -> _SOURCE_
<android.graphics.Paint: android.os.LocaleList getTextLocales()> -> _SOURCE_
<android.content.ContentProviderClient: android.content.ContentProvider getLocalContentProvider()> -> _SOURCE_
<android.telephony.PhoneNumberUtils: boolean isEmergencyNumber(java.lang.String,java.lang.String)> -> _SOURCE_
<android.telephony.CellInfoCdma: java.lang.String toString()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.net.IConnectivityManager$Default: android.net.Network getActiveNetwork()> -> _SOURCE_
<android.app.Notification$MessagingStyle: java.lang.CharSequence getUserDisplayName()> -> _SOURCE_
<android.content.pm.IPackageManager$Default: android.content.pm.ParceledListSlice getSystemAvailableFeatures()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.CharSequence getShortSupportMessageForUser(android.content.ComponentName,int)> -> _SOURCE_
<android.hardware.display.ColorDisplayManager: boolean isDeviceColorManaged()> -> _SOURCE_
<android.net.Uri$OpaqueUri: java.lang.String getAuthority()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.lang.CharSequence getHarmfulAppWarning(java.lang.String)> -> _SOURCE_
<android.telephony.SubscriptionManager: void invalidateDefaultSmsSubIdCaches()> -> _SOURCE_
<android.database.CursorWrapper: android.net.Uri getNotificationUri()> -> _SOURCE_
<android.os.connectivity.WifiBatteryStats: long getScanTimeMillis()> -> _SOURCE_
<android.app.job.JobParameters: android.os.PersistableBundle getExtras()> -> _SOURCE_
<android.app.Notification$TvExtender: java.lang.String getChannelId()> -> _SOURCE_
<android.media.MediaCodec$MediaImage$MediaPlane: java.nio.ByteBuffer getBuffer()> -> _SOURCE_
<android.security.KeyStore: boolean isHardwareBacked()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isUsingUnifiedPassword(android.content.ComponentName)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.util.List getNeighboringCellInfo(java.lang.String,java.lang.String)> -> _SOURCE_
<android.util.Range: java.lang.Comparable getLower()> -> _SOURCE_
<android.view.Display: android.view.DisplayAdjustments getDisplayAdjustments()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: boolean getIsOnBattery()> -> _SOURCE_
<android.media.session.MediaSessionManager: int getSessionPolicies(android.media.session.MediaSession$Token)> -> _SOURCE_
<com.android.server.SystemConfig: android.util.ArraySet getHiddenApiWhitelistedApps()> -> _SOURCE_
<android.telephony.CellIdentityGsm: java.lang.String getMobileNetworkOperator()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.os.IIncidentCompanion$Stub$Proxy: java.util.List getIncidentReportList(java.lang.String,java.lang.String)> -> _SOURCE_
<com.android.internal.view.IInputMethod$Stub: com.android.internal.view.IInputMethod getDefaultImpl()> -> _SOURCE_
<android.telephony.CellSignalStrengthCdma: int getEvdoDbm()> -> _SOURCE_
<com.android.internal.telephony.euicc.IGetAllProfilesCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.INotificationManager$Stub$Proxy: java.util.List getEnabledNotificationListenerPackages()> -> _SOURCE_
<android.hardware.display.BrightnessConfiguration: android.hardware.display.BrightnessCorrection getCorrectionByPackageName(java.lang.String)> -> _SOURCE_
<android.telephony.SubscriptionPlan: int hashCode()> -> _SOURCE_
<com.android.internal.telephony.ISms$Default: java.lang.String getImsSmsFormatForSubscriber(int)> -> _SOURCE_
<android.view.ViewStub: android.view.LayoutInflater getLayoutInflater()> -> _SOURCE_
<android.telecom.Log: java.lang.String getPackageAbbreviation(java.lang.String)> -> _SOURCE_
<android.bluetooth.IBluetooth$Default: java.lang.String getAddress()> -> _SOURCE_
<android.app.AsyncNotedAppOp: long getTime()> -> _SOURCE_
<android.telephony.CellInfoWcdma: int describeContents()> -> _SOURCE_
<android.app.job.JobWorkItem: java.lang.Object getGrants()> -> _SOURCE_
<android.app.IAlarmCompleteListener$Stub: android.app.IAlarmCompleteListener getDefaultImpl()> -> _SOURCE_
<android.hardware.camera2.ICameraOfflineSession$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.net.Network: android.net.Network getPrivateDnsBypassingCopy()> -> _SOURCE_
<android.service.notification.StatusBarNotification: android.app.Notification getNotification()> -> _SOURCE_
<android.net.NetworkProvider: android.os.Messenger getMessenger()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: android.os.BatteryStats$Timer getPhoneSignalScanningTimer()> -> _SOURCE_
<android.os.image.IDynamicSystemService$Stub$Proxy: android.gsi.GsiProgress getInstallationProgress()> -> _SOURCE_
<android.hardware.location.IContextHubService$Default: java.util.List getContextHubs()> -> _SOURCE_
<android.telecom.ParcelableCallAnalytics$VideoEvent: long getTimeSinceLastEvent()> -> _SOURCE_
<android.app.usage.UsageStats: long getLastTimeUsed()> -> _SOURCE_
<android.net.wifi.nl80211.IWificond$Stub$Proxy: int[] getAvailable5gNonDFSChannels()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Timer: long getTimeSinceMarkLocked(long)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.util.List getActiveAdmins()> -> _SOURCE_
<android.telecom.Logging._$$Lambda$SessionManager$hhtZwTEbvO_fLNlAvB6Do9_2gW4: long get()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: java.lang.String[] getWifiIfaces()> -> _SOURCE_
<android.media.MediaPlayer: android.media.MediaPlayer$TrackInfo[] getTrackInfo()> -> _SOURCE_
<android.telephony.mbms.DownloadRequest: int getMaxDestinationUriSize()> -> _SOURCE_
<android.app.ISearchManager$Default: android.content.ComponentName getWebSearchActivity()> -> _SOURCE_
<android.net.wifi.nl80211.IScanEvent$Stub: android.net.wifi.nl80211.IScanEvent getDefaultImpl()> -> _SOURCE_
<android.app.IAlarmManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.security.keystore.IKeystoreService$Stub: android.security.keystore.IKeystoreService getDefaultImpl()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: int getPasswordMaximumLength(int)> -> _SOURCE_
<android.animation.TypeConverter: java.lang.Class getSourceType()> -> _SOURCE_
<android.app.Notification$WearableExtender: boolean getStartScrollBottom()> -> _SOURCE_
<com.android.internal.view.IInputMethodManager$Default: java.util.List getEnabledInputMethodSubtypeList(java.lang.String,boolean)> -> _SOURCE_
<android.print.IPrintServicesChangeListener$Stub: android.print.IPrintServicesChangeListener getDefaultImpl()> -> _SOURCE_
<android.content.pm.IPackageManager$Stub$Proxy: byte[] getDefaultAppsBackup(int)> -> _SOURCE_
<android.hardware.radio.ProgramList$Filter: java.util.Map getVendorFilter()> -> _SOURCE_
<android.service.notification.StatusBarNotification: long getPostTime()> -> _SOURCE_
<android.app.blob.IBlobCommitCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.graphics.RenderNode: float getRotationZ()> -> _SOURCE_
<android.app.Person: android.graphics.drawable.Icon getIcon()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getVoiceMailNumber()> -> _SOURCE_
<android.app.SearchableInfo$ActionKeyInfo: java.lang.String getSuggestActionMsgColumn()> -> _SOURCE_
<android.media.AudioRecord: int getAudioSource()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.app.NotificationManager: android.app.NotificationChannelGroup getNotificationChannelGroup(java.lang.String)> -> _SOURCE_
<android.view.ViewPropertyAnimator: long getDuration()> -> _SOURCE_
<android.content.ContextWrapper: boolean isDeviceProtectedStorage()> -> _SOURCE_
<android.security.keystore.IKeystoreExportKeyCallback$Stub: android.security.keystore.IKeystoreExportKeyCallback getDefaultImpl()> -> _SOURCE_
<android.telephony.SmsCbEtwsInfo: int describeContents()> -> _SOURCE_
<android.content.pm.IPackageManager$Default: java.lang.String getSystemCaptionsServicePackageName()> -> _SOURCE_
<android.animation.ValueAnimator: long getDuration()> -> _SOURCE_
<android.hardware.camera2.impl.ICameraDeviceUserWrapper: android.view.Surface getInputSurface()> -> _SOURCE_
<android.hardware.camera2.params.MandatoryStreamCombination$Builder: android.util.Size getMaxSize(android.util.Size[])> -> _SOURCE_
<android.net.IpSecConfig: android.net.IpSecAlgorithm getAuthentication()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: android.telecom.PhoneAccountHandle getPhoneAccountHandleForSubscriptionId(int)> -> _SOURCE_
<android.view.contentcapture.ViewNode: java.lang.String getTextIdEntry()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long getExternalStatsCollectionRateLimitMs()> -> _SOURCE_
<com.android.internal.view.IInputMethodClient$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.data.ApnSetting: java.net.InetAddress getMmsProxyAddress()> -> _SOURCE_
<android.app.ActivityOptions: android.app.PendingIntent getUsageTimeReport()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isNetworkLoggingEnabled(android.content.ComponentName)> -> _SOURCE_
<android.print.IPrintJobStateChangeListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.hardware.usb.IUsbManager$Stub$Proxy: android.os.ParcelFileDescriptor getControlFd(long)> -> _SOURCE_
<android.media.AudioRecordingConfiguration: java.lang.String getClientPackageName()> -> _SOURCE_
<android.content.integrity.RuleSet: java.util.List getRules()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getAffiliationIds(android.content.ComponentName)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean getBluetoothContactSharingDisabled(android.os.UserHandle)> -> _SOURCE_
<android.media.IMediaHTTPConnection$Default: java.lang.String getMIMEType()> -> _SOURCE_
<android.telephony.ServiceState: int getRilDataRadioTechnology()> -> _SOURCE_
<android.net.LinkProperties: java.lang.String getTcpBufferSizes()> -> _SOURCE_
<android.view.ViewConfiguration: int getWindowTouchSlop()> -> _SOURCE_
<android.telephony.ICellInfoCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: boolean isHearingAidCompatibilitySupported()> -> _SOURCE_
<android.os.storage.StorageManager: android.os.storage.StorageVolume getStorageVolume(java.io.File)> -> _SOURCE_
<android.view.contentcapture.DataRemovalRequest: java.lang.String getPackageName()> -> _SOURCE_
<android.nfc.IAppCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.CellInfoNr: android.telephony.CellInfoNr createFromParcelBody(android.os.Parcel)> -> _SOURCE_
<android.os.connectivity.CellularBatteryStats: long getRxTimeMillis()> -> _SOURCE_
<android.widget.Spinner: java.lang.CharSequence getPrompt()> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.database.sqlite.SQLiteGlobal: java.lang.String getWALSyncMode()> -> _SOURCE_
<android.app.backup.BackupDataInput: java.lang.String getKey()> -> _SOURCE_
<android.content.pm.IPinItemRequest$Default: android.content.pm.ShortcutInfo getShortcutInfo()> -> _SOURCE_
<android.hardware.ICamera$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.net.TrafficStats: long getUidUdpTxPackets(int)> -> _SOURCE_
<android.view.CutoutSpecification: android.graphics.Rect getSafeInset()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.util.List getSharedLibrariesAsUser(int,int)> -> _SOURCE_
<android.os.Environment: java.lang.String getExternalStorageState(java.io.File)> -> _SOURCE_
<android.bluetooth.IBluetoothCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.backup.IBackupManager$Default: java.lang.String getCurrentTransport()> -> _SOURCE_
<android.hardware.camera2.params.RggbChannelVector: float getBlue()> -> _SOURCE_
<android.media.audiopolicy.AudioProductStrategy$AudioAttributesGroup: android.media.AudioAttributes getAudioAttributes()> -> _SOURCE_
<android.view.inputmethod.CorrectionInfo: java.lang.CharSequence getOldText()> -> _SOURCE_
<com.android.internal.telephony.CellNetworkScanResult: int describeContents()> -> _SOURCE_
<android.view.textclassifier.SystemTextClassifier$ResponseReceiver: java.lang.Object get()> -> _SOURCE_
<android.telephony.ims.ImsCallForwardInfo: java.lang.String getNumber()> -> _SOURCE_
<android.net.ConnectivityManager: android.net.Network[] getAllNetworks()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getPermittedAccessibilityServicesForUser(int)> -> _SOURCE_
<com.android.internal.policy.DecorContext: android.content.res.Resources getResources()> -> _SOURCE_
<android.app.Activity: android.view.contentcapture.ContentCaptureManager$ContentCaptureClient getContentCaptureClient()> -> _SOURCE_
<android.net.IIpSecService$Stub: android.net.IIpSecService getDefaultImpl()> -> _SOURCE_
<android.print.IPrinterDiscoveryObserver$Stub: android.print.IPrinterDiscoveryObserver getDefaultImpl()> -> _SOURCE_
<android.net.wifi.nl80211.PnoSettings: java.util.List getPnoNetworks()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getVoiceMessageCountForSubscriber(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.view.Window: android.view.View getNavigationBarBackgroundView()> -> _SOURCE_
<android.os.TestLooperManager: android.os.MessageQueue getMessageQueue()> -> _SOURCE_
<android.net.ConnectivityManager: java.lang.String[] getTetherableUsbRegexs()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean getDataEnabled(int)> -> _SOURCE_
<android.media.MediaRoute2Info: java.lang.String getId()> -> _SOURCE_
<android.nfc.tech.IsoDep: byte[] getHiLayerResponse()> -> _SOURCE_
<android.window.ITaskOrganizerController$Stub$Proxy: java.util.List getChildTasks(android.window.WindowContainerToken,int[])> -> _SOURCE_
<android.location.LocationManager: boolean isProviderEnabledForUser(java.lang.String,android.os.UserHandle)> -> _SOURCE_
<android.telephony.DataConnectionRealTimeInfo: int describeContents()> -> _SOURCE_
<android.animation.PathKeyframes$SimpleKeyframes: java.util.ArrayList getKeyframes()> -> _SOURCE_
<android.os.BatterySaverPolicyConfig: boolean getDeferFullBackup()> -> _SOURCE_
<android.view.Display: android.graphics.ColorSpace[] getSupportedWideColorGamut()> -> _SOURCE_
<android.telephony.TelephonyManager: android.telephony.IccOpenLogicalChannelResponse iccOpenLogicalChannelBySlot(int,java.lang.String,int)> -> _SOURCE_
<android.telephony.CellIdentityNr: long getNci()> -> _SOURCE_
<android.bluetooth.BluetoothCodecStatus: android.bluetooth.BluetoothCodecConfig getCodecConfig()> -> _SOURCE_
<android.app.Instrumentation: android.content.ComponentName getComponentName()> -> _SOURCE_
<android.content.pm.ILauncherApps$Stub$Proxy: java.lang.String getShortcutIconUri(java.lang.String,java.lang.String,java.lang.String,int)> -> _SOURCE_
<android.telephony.ServiceState: int getNrFrequencyRange()> -> _SOURCE_
<android.media.MediaDrm$CertificateRequest: java.lang.String getDefaultUrl()> -> _SOURCE_
<android.view.DisplayAddress$Physical: java.lang.Long getModel()> -> _SOURCE_
<android.nfc.INfcAdapterExtras$Stub: android.nfc.INfcAdapterExtras getDefaultImpl()> -> _SOURCE_
<android.service.notification.NotificationListenerService$Ranking: long getLastAudiblyAlertedMillis()> -> _SOURCE_
<android.view.accessibility.IAccessibilityManager$Stub$Proxy: android.os.IBinder getWindowToken(int,int)> -> _SOURCE_
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()> -> _SOURCE_
<android.hardware.hdmi.IHdmiControlStatusChangeListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.net.lowpan.ILowpanInterface$Stub$Proxy: android.net.lowpan.LowpanIdentity getLowpanIdentity()> -> _SOURCE_
<android.hardware.cas.V1_0.IMediaCasService$Proxy: android.internal.hidl.base.V1_0.DebugInfo getDebugInfo()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: com.android.internal.telephony.CellNetworkScanResult getCellNetworkScanResults(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.app.prediction.IPredictionCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getDeviceId(java.lang.String)> -> _SOURCE_
<android.media.tv.tunerresourcemanager.ITunerResourceManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.internal.widget.IRemoteViewsFactory$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.accessibilityservice.AccessibilityService$ScreenshotResult: android.graphics.ColorSpace getColorSpace()> -> _SOURCE_
<android.app.blob.BlobHandle: java.lang.String getTag()> -> _SOURCE_
<android.content.pm.IPackageDataObserver$Stub: android.content.pm.IPackageDataObserver getDefaultImpl()> -> _SOURCE_
<android.hardware.camera2.params.StreamConfigurationMap: android.util.Range[] getHighSpeedVideoFpsRanges()> -> _SOURCE_
<android.view.Window: android.transition.TransitionManager getTransitionManager()> -> _SOURCE_
<android.telephony.SubscriptionInfo: boolean isEmbedded()> -> _SOURCE_
<android.telephony.CallQuality: boolean isIncomingSilenceDetectedAtCallSetup()> -> _SOURCE_
<android.app.WallpaperManager: android.app.IWallpaperManager getIWallpaperManager()> -> _SOURCE_
<android.net.wifi.nl80211.IApInterfaceEventCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.bluetooth.IBluetoothMap$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.content.pm.ShortcutManager: int getIconMaxHeight()> -> _SOURCE_
<android.location.ILocationManager$Stub$Proxy: java.lang.String[] getIgnoreSettingsWhitelist()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: java.lang.String getSubscriptionCarrierName(int)> -> _SOURCE_
<android.print.PrintManager: android.print.PrinterDiscoverySession createPrinterDiscoverySession()> -> _SOURCE_
<android.security.KeyStore$KeyCharacteristicsCallbackResult: android.security.keymaster.KeyCharacteristics getKeyCharacteristics()> -> _SOURCE_
<android.os.ParcelFileDescriptor: java.io.File getFile(java.io.FileDescriptor)> -> _SOURCE_
<android.companion.IFindDeviceCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.NotificationManager: boolean areNotificationsPaused()> -> _SOURCE_
<android.telephony.CellSignalStrengthLte: java.lang.String toString()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfoForUid(int,boolean)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.util.Set getCrossProfileCalendarPackages()> -> _SOURCE_
<android.graphics.ColorSpace: java.lang.String getName()> -> _SOURCE_
<android.graphics.ColorSpace$Rgb: android.graphics.ColorSpace$Rgb$TransferParameters getTransferParameters()> -> _SOURCE_
<android.net.Uri$AbstractPart: java.lang.String getDecoded()> -> _SOURCE_
<android.content.SyncRequest: long getSyncRunTime()> -> _SOURCE_
<android.util.apk.WrappedX509Certificate: java.security.Principal getSubjectDN()> -> _SOURCE_
<android.telephony.CellSignalStrengthCdma: int getEvdoSnr()> -> _SOURCE_
<android.app.job.JobParameters: java.lang.String[] getTriggeredContentAuthorities()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getImei()> -> _SOURCE_
<android.app.usage.StorageStatsManager: long getTotalBytes(java.util.UUID)> -> _SOURCE_
<android.hardware.face.FaceManager: java.lang.String getAcquiredString(android.content.Context,int,int)> -> _SOURCE_
<com.android.internal.util.function.pooled.PooledLambdaImpl: double getAsDouble()> -> _SOURCE_
<android.view.textclassifier.SelectionEvent: java.lang.String getWidgetType()> -> _SOURCE_
<android.nfc.cardemulation.CardEmulation: java.util.List getServices(java.lang.String)> -> _SOURCE_
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice getDeclaredSharedLibraries(java.lang.String,int,int)> -> _SOURCE_
<android.app.DisabledWallpaperManager: android.graphics.drawable.Drawable peekFastDrawable()> -> _SOURCE_
<android.os.Build: java.util.List getFingerprintedPartitions()> -> _SOURCE_
<android.media.MediaMetadataRetriever$BitmapParams: android.graphics.Bitmap$Config getActualConfig()> -> _SOURCE_
<com.android.internal.telecom.ITelecomService$Default: java.lang.String getDefaultDialerPackage()> -> _SOURCE_
<android.telephony.RadioAccessFamily: int describeContents()> -> _SOURCE_
<android.content.pm.ActivityInfo: boolean isFixedOrientationLandscape()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.String[] getAccountTypesWithManagementDisabled()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getNai(int)> -> _SOURCE_
<android.permission.IPermissionManager$Stub$Proxy: android.content.pm.PermissionInfo getPermissionInfo(java.lang.String,java.lang.String,int)> -> _SOURCE_
<android.app.ActivityManager: boolean isLowRamDeviceStatic()> -> _SOURCE_
<android.app.AppOpsManager: java.util.List getOpsForPackage(int,java.lang.String,java.lang.String[])> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Default: java.lang.String getDeviceSvn(java.lang.String,java.lang.String)> -> _SOURCE_
<android.telephony.PhoneNumberRange: int describeContents()> -> _SOURCE_
<android.security.keystore.AndroidKeyStoreRSAPrivateKey: java.math.BigInteger getModulus()> -> _SOURCE_
<android.hardware.Camera$Parameters: java.util.List getSupportedPictureFormats()> -> _SOURCE_
<android.text.style.ImageSpan: android.graphics.drawable.Drawable getDrawable()> -> _SOURCE_
<com.android.internal.policy.PhoneWindow: android.transition.Transition getEnterTransition()> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub: com.android.internal.telephony.IPhoneSubInfo asInterface(android.os.IBinder)> -> _SOURCE_
<android.media.projection.IMediaProjectionWatcherCallback$Stub: android.media.projection.IMediaProjectionWatcherCallback getDefaultImpl()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Default: java.util.List getAlwaysOnVpnLockdownWhitelist(android.content.ComponentName)> -> _SOURCE_
<android.content.ContentProvider: android.content.pm.PathPermission[] getPathPermissions()> -> _SOURCE_
<android.net.Uri$OpaqueUri: java.lang.String getEncodedQuery()> -> _SOURCE_
<android.telephony.AccessNetworkConstants$NgranBands: int getFrequencyRangeGroup(int)> -> _SOURCE_
<android.view.accessibility.IAccessibilityManager$Stub$Proxy: java.util.List getInstalledAccessibilityServiceList(int)> -> _SOURCE_
<android.view.textclassifier.TextLinks: android.os.Bundle getExtras()> -> _SOURCE_
<android.telephony.TelephonyManager: int getSubscriptionId(android.telecom.PhoneAccountHandle)> -> _SOURCE_
<android.telephony.CellSignalStrengthGsm: int getTimingAdvance()> -> _SOURCE_
<android.telephony.PhoneNumberUtils: java.lang.String convertPreDial(java.lang.String)> -> _SOURCE_
<android.bluetooth.BluetoothHeadsetClientCall: long getCreationElapsedMilli()> -> _SOURCE_
<android.os.IncidentManager$IncidentReport: java.io.InputStream getInputStream()> -> _SOURCE_
<android.net.lowpan.ILowpanManager$Default: java.lang.String[] getInterfaceList()> -> _SOURCE_
<com.android.internal.telecom.ITelecomService$Default: java.util.List getCallCapablePhoneAccounts(boolean,java.lang.String,java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.lang.String getTypeAllocationCodeForSlot(int)> -> _SOURCE_
<android.metrics.LogMaker: long getTimestamp()> -> _SOURCE_
<android.app.LoadedApk: android.content.pm.ApplicationInfo getApplicationInfo()> -> _SOURCE_
<android.app.job.JobInfo: long getMinPeriodMillis()> -> _SOURCE_
<android.telecom.PhoneAccount: android.telecom.PhoneAccountHandle getAccountHandle()> -> _SOURCE_
<android.view.textclassifier.ConversationActions$Request: android.view.textclassifier.TextClassifier$EntityConfig getTypeConfig()> -> _SOURCE_
<android.view.IWallpaperVisibilityListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.slice.SliceItem: android.app.PendingIntent getAction()> -> _SOURCE_
<android.location.LocationManager: boolean isProviderPackage(java.lang.String)> -> _SOURCE_
<android.telephony.ims.aidl.IImsCallSessionListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.nfc.INfcUnlockHandler$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.content.rollback.IRollbackManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.location.GpsClock: double getBiasUncertaintyInNs()> -> _SOURCE_
<android.provider.Settings$System: java.lang.String getString(android.content.ContentResolver,java.lang.String)> -> _SOURCE_
<android.hardware.display.ColorDisplayManager: java.time.LocalTime getNightDisplayCustomEndTime()> -> _SOURCE_
<android.view.ViewConfiguration: float getScaledHorizontalScrollFactor()> -> _SOURCE_
<android.location.GnssMeasurementCorrections: double getVerticalPositionUncertaintyMeters()> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec: java.util.Date getCertificateNotAfter()> -> _SOURCE_
<android.graphics.Paint: float getStrokeWidth()> -> _SOURCE_
<android.bluetooth.IBluetoothA2dpSink$Default: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
<android.view.WindowManagerImpl: android.view.WindowMetrics getCurrentWindowMetrics()> -> _SOURCE_
<android.telephony.CellIdentityNr: android.telephony.CellLocation asCellLocation()> -> _SOURCE_
<com.android.internal.telephony.ISub$Default: java.util.List getAccessibleSubscriptionInfoList(java.lang.String)> -> _SOURCE_
<android.telephony.CellInfoTdscdma: int describeContents()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getKeepUninstalledPackages(android.content.ComponentName,java.lang.String)> -> _SOURCE_
<android.media.AudioManager: java.util.List getDevicesForAttributes(android.media.AudioAttributes)> -> _SOURCE_
<android.media.projection.IMediaProjectionManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.hardware.camera2.CaptureFailure: long getFrameNumber()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getDeviceId()> -> _SOURCE_
<android.telephony.SubscriptionInfo: int getNameSource()> -> _SOURCE_
<android.hardware.display.DisplayManager: android.view.Display[] getDisplays()> -> _SOURCE_
<com.android.internal.database.SortCursor: java.lang.String getString(int)> -> _SOURCE_
<android.os.storage.StorageVolume: long getMaxFileSize()> -> _SOURCE_
<android.app.job.JobInfo: java.lang.String getPriorityString(int)> -> _SOURCE_
<android.hardware.cas.V1_1.IMediaCasService$Proxy: java.util.ArrayList getHashChain()> -> _SOURCE_
<com.android.internal.widget.ILockSettings$Default: java.util.Map getRecoveryStatus()> -> _SOURCE_
<android.app.AppOpsManager$HistoricalOps: long getBeginTimeMillis()> -> _SOURCE_
<android.view.WindowInsetsAnimation$Bounds: android.graphics.Insets getLowerBound()> -> _SOURCE_
<android.content.pm.PackageInstaller$SessionParams: boolean getEnableRollback()> -> _SOURCE_
<android.provider.Browser: android.database.Cursor getAllBookmarks(android.content.ContentResolver)> -> _SOURCE_
<android.media.AudioManager: boolean isStreamAffectedByMute(int)> -> _SOURCE_
<android.view.WindowInsets: android.graphics.Insets getTappableElementInsets()> -> _SOURCE_
<android.media.session.ISessionCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.location.GpsMeasurement: double getPseudorangeRateInMetersPerSec()> -> _SOURCE_
<android.app.LoadedApk: java.io.File getDataDirFile()> -> _SOURCE_
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize getStandardMediaSizeById(java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getSubIdForPhoneAccountHandle(android.telecom.PhoneAccountHandle,java.lang.String,java.lang.String)> -> _SOURCE_
<android.hardware.display.WifiDisplay: java.lang.String getDeviceAlias()> -> _SOURCE_
<com.android.internal.telephony.cdma.SmsMessage: byte[] getEnvelopeBearerData()> -> _SOURCE_
<android.net.Uri$OpaqueUri: java.lang.String getPath()> -> _SOURCE_
<android.app.Fragment: android.animation.Animator getAnimatingAway()> -> _SOURCE_
<android.webkit.WebStorage$Origin: long getUsage()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: long getManagedProfileMaximumTimeOff(android.content.ComponentName)> -> _SOURCE_
<android.hardware.camera2.impl.CameraMetadataNative: long getMetadataPtr()> -> _SOURCE_
<android.net.INetworkScoreService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.media.MediaCodec: android.media.MediaFormat getOutputFormat()> -> _SOURCE_
<android.app.SharedPreferencesImpl: java.util.Set getStringSet(java.lang.String,java.util.Set)> -> _SOURCE_
<android.hardware.usb.UsbDevice: int getInterfaceCount()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<com.android.internal.view.menu.MenuBuilder: boolean getOptionalIconsVisible()> -> _SOURCE_
<android.content.IRestrictionsManager$Stub$Proxy: android.os.Bundle getApplicationRestrictions(java.lang.String)> -> _SOURCE_
<android.os.storage.IStorageManager$Stub$Proxy: java.lang.String getPassword()> -> _SOURCE_
<android.media.soundtrigger.SoundTriggerManager: android.media.soundtrigger.SoundTriggerManager$Model getModel(java.util.UUID)> -> _SOURCE_
<android.content.pm.ShortcutManager: java.util.List getShareTargets(android.content.IntentFilter)> -> _SOURCE_
<com.android.internal.telephony.IOns$Stub$Proxy: int getPreferredDataSubscriptionId(java.lang.String,java.lang.String)> -> _SOURCE_
<android.telephony.ServiceState: int getDataNetworkType()> -> _SOURCE_
<android.app.NotificationManager: android.app.INotificationManager getService()> -> _SOURCE_
<android.security.NetworkSecurityPolicy: android.security.NetworkSecurityPolicy getInstance()> -> _SOURCE_
<android.net.LocalServerSocket: java.io.FileDescriptor getFileDescriptor()> -> _SOURCE_
<android.os.IDeviceIdleController$Stub$Proxy: java.lang.String[] getFullPowerWhitelistExceptIdle()> -> _SOURCE_
<android.app.backup.FullBackupDataOutput: long getSize()> -> _SOURCE_
<com.android.internal.view.InputConnectionWrapper: java.lang.CharSequence getSelectedText(int)> -> _SOURCE_
<android.net.IpSecAlgorithm: byte[] getKey()> -> _SOURCE_
<android.service.euicc.EuiccProfileInfo: java.lang.String getIccid()> -> _SOURCE_
<android.util.apk.VerbatimX509Certificate: byte[] getEncoded()> -> _SOURCE_
<android.media.tv.ITvInputHardware$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.net.ConnectivityManager: boolean getMobileDataEnabled()> -> _SOURCE_
<android.os.connectivity.CellularBatteryStats: long getNumBytesTx()> -> _SOURCE_
<android.net.NetworkCapabilities: int[] getAdministratorUids()> -> _SOURCE_
<android.os.BatterySaverPolicyConfig: boolean getDeferKeyValueBackup()> -> _SOURCE_
<com.android.internal.app.IAppOpsActiveCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.NotificationManager: android.content.ComponentName getAllowedNotificationAssistant()> -> _SOURCE_
<android.content.pm.InstantAppResolveInfo: java.util.List getIntentFilters()> -> _SOURCE_
<android.graphics.drawable.ColorStateListDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()> -> _SOURCE_
<android.app.ActivityManager: int getLockTaskModeState()> -> _SOURCE_
<android.graphics.text.MeasuredText: char[] getChars()> -> _SOURCE_
<android.media.midi.MidiPortImpl: long getPacketTimestamp(byte[],int)> -> _SOURCE_
<android.graphics.ImageDecoder: android.graphics.Rect getCrop()> -> _SOURCE_
<android.content.pm.PackageParser$Package: java.util.List getAllCodePaths()> -> _SOURCE_
<android.graphics.Outline: float getAlpha()> -> _SOURCE_
<android.database.CursorWrapper: android.database.Cursor getWrappedCursor()> -> _SOURCE_
<com.android.internal.compat.IPlatformCompat$Stub: com.android.internal.compat.IPlatformCompat getDefaultImpl()> -> _SOURCE_
<android.database.CrossProcessCursorWrapper: android.database.CursorWindow getWindow()> -> _SOURCE_
<android.graphics.drawable.ShapeDrawable: android.graphics.drawable.ShapeDrawable$ShaderFactory getShaderFactory()> -> _SOURCE_
<android.security.keystore.IKeystoreService$Stub$Proxy: long getmtime(java.lang.String,int)> -> _SOURCE_
<android.content.pm.PackageInstaller$SessionInfo: boolean isOpen()> -> _SOURCE_
<com.android.internal.os.BatteryStatsHelper: double getMinDrainedPower()> -> _SOURCE_
<android.hardware.cas.V1_1.ICasListener$Proxy: android.internal.hidl.base.V1_0.DebugInfo getDebugInfo()> -> _SOURCE_
<android.os.IUserManager$Default: java.lang.String getUserName()> -> _SOURCE_
<android.hardware.radio.V1_4.CellInfo$Info: byte getDiscriminator()> -> _SOURCE_
<android.app.DisabledWallpaperManager: android.graphics.Bitmap getBitmap(boolean)> -> _SOURCE_
<android.telephony.PhoneNumberUtils: boolean isNanp(java.lang.String)> -> _SOURCE_
<android.bluetooth.IBluetoothSap$Stub: android.bluetooth.IBluetoothSap getDefaultImpl()> -> _SOURCE_
<android.os.storage.VolumeInfo: android.os.storage.DiskInfo getDisk()> -> _SOURCE_
<android.renderscript.Type: android.renderscript.Element getElement()> -> _SOURCE_
<android.util.SizeF: float getWidth()> -> _SOURCE_
<android.net.ConnectivityManager: java.lang.String[] getTetherableBluetoothRegexs()> -> _SOURCE_
<android.bluetooth.IBluetoothAvrcpController$Stub: android.bluetooth.IBluetoothAvrcpController getDefaultImpl()> -> _SOURCE_
<android.os.storage.StorageManager: long getStorageBytesUntilLow(java.io.File)> -> _SOURCE_
<android.graphics.Paint: java.util.Locale getTextLocale()> -> _SOURCE_
<android.content.res.Resources: android.content.res.ResourcesImpl getImpl()> -> _SOURCE_
<android.app.ApplicationPackageManager: android.content.pm.ChangedPackages getChangedPackages(int)> -> _SOURCE_
<android.telephony.SubscriptionInfo: int getProfileClass()> -> _SOURCE_
<android.text.method.DialerKeyListener: char[] getAcceptedChars()> -> _SOURCE_
<android.app.AlarmManager$AlarmClockInfo: long getTriggerTime()> -> _SOURCE_
<android.bluetooth.IBluetoothHeadsetClient$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.view.InputDevice: android.view.KeyCharacterMap getKeyCharacterMap()> -> _SOURCE_
<android.net.ITetheredInterfaceCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.hardware.radio.RadioManager$ProgramInfo: java.util.Map getVendorInfo()> -> _SOURCE_
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: java.util.Set getOutputFormats()> -> _SOURCE_
<android.widget.ProgressBar: android.content.res.ColorStateList getIndeterminateTintList()> -> _SOURCE_
<android.media.tv.TvContentRating: java.lang.String getMainRating()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getOtaSpNumberSchema(java.lang.String)> -> _SOURCE_
<android.hardware.cas.V1_0.IDescramblerBase$Stub: android.internal.hidl.base.V1_0.DebugInfo getDebugInfo()> -> _SOURCE_
<android.app.timedetector.NetworkTimeSuggestion: android.os.TimestampedValue getUtcTime()> -> _SOURCE_
<android.graphics.Rect$UnflattenHelper: java.util.regex.Matcher getMatcher(java.lang.String)> -> _SOURCE_
<com.android.internal.infra.IAndroidFuture$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.print.PrinterId: java.lang.String getLocalId()> -> _SOURCE_
<android.view.IDisplayFoldListener$Stub: android.view.IDisplayFoldListener getDefaultImpl()> -> _SOURCE_
<android.os.storage.StorageManager: long getStorageLowBytes(java.io.File)> -> _SOURCE_
<android.content.pm.LauncherApps: java.util.List getProfiles()> -> _SOURCE_
<android.os.CpuUsageInfo: long getActive()> -> _SOURCE_
<android.media.session.MediaSession$Token: android.media.session.ISessionController getBinder()> -> _SOURCE_
<android.os.SystemConfigManager: java.util.Map getDisabledUntilUsedPreinstalledCarrierAssociatedApps()> -> _SOURCE_
<android.os.ZygoteProcess: android.net.LocalSocketAddress getPrimarySocketAddress()> -> _SOURCE_
<android.webkit.WebViewFactory: android.webkit.IWebViewUpdateService getUpdateService()> -> _SOURCE_
<android.telephony.ims.aidl.IImsMmTelFeature$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageArchiveInfo(java.lang.String,int)> -> _SOURCE_
<android.content.pm.IPinItemRequest$Stub$Proxy: android.appwidget.AppWidgetProviderInfo getAppWidgetProviderInfo()> -> _SOURCE_
<android.net.IpSecConfig: android.net.IpSecAlgorithm getEncryption()> -> _SOURCE_
<android.view.Window: android.view.WindowManager getWindowManager()> -> _SOURCE_
<android.hardware.hdmi.IHdmiInputChangeListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telephony.TelephonyManager: int getSupportedModemCount()> -> _SOURCE_
<android.print.PrintManager: android.print.PrintJob getPrintJob(android.print.PrintJobId)> -> _SOURCE_
<android.content.pm.IDexModuleRegisterCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.nfc.INfcAdapterExtras$Stub$Proxy: java.lang.String getDriverName(java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.ISub$Default: int getDefaultSubId()> -> _SOURCE_
<android.app.IAlarmListener$Stub: android.app.IAlarmListener getDefaultImpl()> -> _SOURCE_
<android.media.MediaRouter: android.media.MediaRouter$RouteInfo getSelectedRoute()> -> _SOURCE_
<android.bluetooth.IBluetoothPbapClient$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.service.vr.IPersistentVrStateCallbacks$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: java.lang.CharSequence getLabel()> -> _SOURCE_
<android.telephony.ModemActivityInfo: int describeContents()> -> _SOURCE_
<android.telephony.VisualVoicemailSmsFilterSettings$Builder: java.lang.String access$100(android.telephony.VisualVoicemailSmsFilterSettings$Builder)> -> _SOURCE_
<com.android.internal.telephony.euicc.IGetEuiccInfo2Callback$Stub: com.android.internal.telephony.euicc.IGetEuiccInfo2Callback getDefaultImpl()> -> _SOURCE_
<android.os.UserManager: android.os.UserHandle getUserForSerialNumber(long)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.app.admin.DevicePolicyManager: int getGlobalPrivateDnsMode(android.content.ComponentName)> -> _SOURCE_
<android.permission.IPermissionController$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.os.Build$Partition: long getBuildTimeMillis()> -> _SOURCE_
<android.telephony.CellSignalStrengthLte: int getRsrp()> -> _SOURCE_
<android.content.pm.parsing.component.ParsedPermission: java.lang.String getBackgroundPermission()> -> _SOURCE_
<android.appwidget.AppWidgetManager: android.appwidget.AppWidgetProviderInfo getAppWidgetInfo(int)> -> _SOURCE_
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String getSetupWizardPackageName()> -> _SOURCE_
<android.net.ConnectivityManager: android.net.NetworkQuotaInfo getActiveNetworkQuotaInfo()> -> _SOURCE_
<android.content.pm.IPackageManager$Stub$Proxy: java.util.List getMimeGroup(java.lang.String,java.lang.String)> -> _SOURCE_
<android.app.role.IRoleManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.net.LocalSocketImpl: android.net.Credentials getPeerCredentials()> -> _SOURCE_
<android.widget.Editor: float getLastUpPositionY()> -> _SOURCE_
<com.android.internal.compat.IPlatformCompat$Default: com.android.internal.compat.IOverrideValidator getOverrideValidator()> -> _SOURCE_
<android.service.notification.StatusBarNotification: java.lang.String getShortcutId()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isUnattendedManagedKiosk()> -> _SOURCE_
<android.view.IAppTransitionAnimationSpecsFuture$Stub$Proxy: android.view.AppTransitionAnimationSpec[] get()> -> _SOURCE_
<android.os.Temperature: float getValue()> -> _SOURCE_
<android.app.Activity: android.app.FragmentManager getFragmentManager()> -> _SOURCE_
<android.media.midi.MidiDeviceStatus: android.media.midi.MidiDeviceInfo getDeviceInfo()> -> _SOURCE_
<android.telephony.SmsCbMessage: boolean isEtwsMessage()> -> _SOURCE_
<android.location.GpsMeasurement: short getState()> -> _SOURCE_
<com.android.internal.telephony.IUpdateAvailableNetworksCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.CallAttributes: int hashCode()> -> _SOURCE_
<android.app.AppOpsManager$HistoricalPackageOps: java.lang.String getPackageName()> -> _SOURCE_
<android.service.persistentdata.PersistentDataBlockManager: long getMaximumDataBlockSize()> -> _SOURCE_
<android.net.ConnectivityThread: android.os.Looper getInstanceLooper()> -> _SOURCE_
<android.os.Binder: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.ActivityManager: int getFrontActivityScreenCompatMode()> -> _SOURCE_
<android.telephony.ICellInfoCallback$Default: android.os.IBinder asBinder()> -> _SOURCE_
<android.location.GpsClock: double getBiasInNs()> -> _SOURCE_
<android.telephony.mbms.ServiceInfo: java.lang.String getServiceId()> -> _SOURCE_
<android.os.UserManager: int getUserCount()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.telephony.TelephonyManager: int getNumberOfModemsWithSimultaneousDataConnections()> -> _SOURCE_
<android.net.NetworkStats: long getElapsedRealtimeAge()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.lang.CharSequence getStartUserSessionMessage(android.content.ComponentName)> -> _SOURCE_
<android.window.ITaskOrganizerController$Stub: android.window.ITaskOrganizerController getDefaultImpl()> -> _SOURCE_
<android.text.FontConfig$Font: java.lang.String getFontName()> -> _SOURCE_
<android.media.MediaFormat: long getLong(java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getLteOnCdmaMode(java.lang.String,java.lang.String)> -> _SOURCE_
<android.view.textclassifier.TextClassification: java.util.List getActions()> -> _SOURCE_
<android.content.rollback.RollbackManager: java.util.List getAvailableRollbacks()> -> _SOURCE_
<android.media.VolumeShaper$State: float getVolume()> -> _SOURCE_
<android.widget.ProgressBar: android.content.res.ColorStateList getProgressTintList()> -> _SOURCE_
<android.nfc.INfcCardEmulation$Default: java.util.List getServices(int,java.lang.String)> -> _SOURCE_
<android.net.NetworkScoreManager: android.net.NetworkScorerAppData getActiveScorer()> -> _SOURCE_
<com.android.internal.policy.PhoneWindow: android.view.LayoutInflater getLayoutInflater()> -> _SOURCE_
<android.view.ViewConfiguration: long getAccessibilityShortcutKeyTimeoutAfterConfirmation()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: boolean disableDataConnectivity()> -> _SOURCE_
<android.content.pm.parsing.component.ParsedActivity: java.lang.String getTaskAffinity()> -> _SOURCE_
<android.content.pm.UserInfo: java.lang.String getDefaultUserType(int)> -> _SOURCE_
<android.renderscript.Sampler: android.renderscript.Sampler$Value getMagnification()> -> _SOURCE_
<android.content.pm.IPackageManager$Stub$Proxy: java.util.List getInstalledModules(int)> -> _SOURCE_
<android.graphics.Path: android.graphics.Path$FillType getFillType()> -> _SOURCE_
<android.widget.Magnifier: android.graphics.Point getPosition()> -> _SOURCE_
<android.app.IWindowToken$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)> -> _SOURCE_
<android.app.ActivityManager: android.app.PendingIntent getRunningServiceControlPanel(android.content.ComponentName)> -> _SOURCE_
<android.widget.CursorAdapter: android.database.Cursor getCursor()> -> _SOURCE_
<com.android.internal.os.ClassLoaderFactory: java.lang.String getPathClassLoaderName()> -> _SOURCE_
<android.view.inputmethod.InputContentInfo: android.net.Uri getContentUri()> -> _SOURCE_
<android.content.pm.IDataLoaderManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.media.MediaFormat: float getFloat(java.lang.String,float)> -> _SOURCE_
<android.graphics.RenderNode: boolean getClipToBounds()> -> _SOURCE_
<android.os.PowerManager: boolean isSustainedPerformanceModeSupported()> -> _SOURCE_
<android.content.res.ResourcesImpl$ThemeImpl: int[] getAllAttributes()> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec: java.util.Date getKeyValidityForOriginationEnd()> -> _SOURCE_
<android.os.VibrationEffect$Prebaked: long getDuration()> -> _SOURCE_
<android.media.session.PlaybackState: float getPlaybackSpeed()> -> _SOURCE_
<android.media.AudioManager: int getVolumeIndexForAttributes(android.media.AudioAttributes)> -> _SOURCE_
<android.app.WallpaperManager: android.graphics.Bitmap getBitmapAsUser(int,boolean)> -> _SOURCE_
<android.bluetooth.IBluetooth$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.view.InsetsAnimationControlImpl: android.graphics.Insets getCurrentInsets()> -> _SOURCE_
<android.os.IUserManager$Default: android.os.Bundle getDefaultGuestRestrictions()> -> _SOURCE_
<android.telephony.AvailableNetworkInfo: java.util.List getBands()> -> _SOURCE_
<com.android.internal.view.IInlineSuggestionsRequestCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.os.ISystemConfig$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: android.net.Network getActiveNetwork()> -> _SOURCE_
<android.telephony.CellIdentityTdscdma: int getUarfcn()> -> _SOURCE_
<android.graphics.Region: android.graphics.Rect getBounds()> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getSubscriberId(java.lang.String)> -> _SOURCE_
<android.view.WindowMetrics: android.graphics.Rect getBounds()> -> _SOURCE_
<android.content.ContentResolver: java.lang.String[] getSyncAdapterPackagesForAuthorityAsUser(java.lang.String,int)> -> _SOURCE_
<com.android.ims.internal.IImsVideoCallProvider$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telephony.SubscriptionManager: void requestEmbeddedSubscriptionInfoListRefresh()> -> _SOURCE_
<android.view.Choreographer: long getFrameTime()> -> _SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: android.net.LinkProperties getActiveLinkProperties()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getCdmaPrlVersion(int)> -> _SOURCE_
<com.android.internal.telephony.ISub$Stub$Proxy: int getDefaultSmsSubId()> -> _SOURCE_
<android.os.storage.StorageManager: boolean isFileEncryptedNativeOnly()> -> _SOURCE_
<android.media.projection.IMediaProjectionCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.view.PointerIcon: android.view.PointerIcon getNullIcon()> -> _SOURCE_
<android.location.LocationManager: android.location.Location getLastLocation()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.hardware.location.ContextHubInfo: byte getChreApiMinorVersion()> -> _SOURCE_
<android.print.IPrintManager$Stub$Proxy: java.util.List getPrintJobInfos(int,int)> -> _SOURCE_
<android.media.MediaCodecInfo$VideoCapabilities: android.util.Range getSupportedFrameRates()> -> _SOURCE_
<android.hardware.camera2.params.StreamConfigurationDuration: android.util.Size getSize()> -> _SOURCE_
<android.app.admin.StartInstallingUpdateCallback$Stub: android.app.admin.StartInstallingUpdateCallback getDefaultImpl()> -> _SOURCE_
<android.hardware.camera2.params.SessionConfiguration: android.hardware.camera2.CameraCaptureSession$StateCallback getStateCallback()> -> _SOURCE_
<android.bluetooth.IBluetoothHearingAid$Default: java.util.List getActiveDevices()> -> _SOURCE_
<android.app.IUiAutomationConnection$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.content.pm.ComponentInfo: android.content.ComponentName getComponentName()> -> _SOURCE_
<android.bluetooth.IBluetoothHidDeviceCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.os.NullVibrator: android.os.NullVibrator getInstance()> -> _SOURCE_
<com.android.internal.telephony.ISms$Stub: com.android.internal.telephony.ISms getDefaultImpl()> -> _SOURCE_
<android.location.GnssMeasurementCorrections: long getToaGpsNanosecondsOfWeek()> -> _SOURCE_
<android.os.SystemProperties: long getLong(java.lang.String,long)> -> _SOURCE_
<android.telephony.CellInfoCdma: android.telephony.CellSignalStrength getCellSignalStrength()> -> _SOURCE_
<android.hardware.input.InputManager: android.hardware.input.KeyboardLayout getKeyboardLayout(java.lang.String)> -> _SOURCE_
<android.telephony.SubscriptionInfo: java.lang.String getCardString()> -> _SOURCE_
<android.hardware.camera2.legacy.ParameterUtils: float getMaxZoomRatio(android.hardware.Camera$Parameters)> -> _SOURCE_
<android.service.oemlock.IOemLockService$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.nfc.TechListParcel: java.lang.String[][] getTechLists()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: java.util.List getUiccCardsInfo(java.lang.String)> -> _SOURCE_
<android.app.SearchManager: android.database.Cursor getSuggestions(android.app.SearchableInfo,java.lang.String,int)> -> _SOURCE_
<android.telephony.NetworkRegistrationInfo: android.telephony.NetworkRegistrationInfo sanitizeLocationInfo()> -> _SOURCE_
<android.os.UserManager: java.util.List getUserProfiles()> -> _SOURCE_
<android.media.session.ISessionController$Stub$Proxy: android.os.Bundle getExtras()> -> _SOURCE_
<android.bluetooth.IBluetoothGatt$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.location.ILocationManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.ApplicationPackageManager: boolean isPackageSuspended()> -> _SOURCE_
<android.app.ContextImpl: java.io.File getExternalCacheDir()> -> _SOURCE_
<com.android.internal.app.IVoiceInteractorCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.media.midi.IMidiDeviceServer$Default: android.media.midi.MidiDeviceInfo getDeviceInfo()> -> _SOURCE_
<com.android.internal.telephony.IPhoneStateListener$Stub: java.lang.String getTransactionName(int)> -> _SOURCE_
<android.content.pm.PackageInstaller$SessionInfo: android.net.Uri getReferrerUri()> -> _SOURCE_
<android.telephony.UiccCardInfo: boolean isEuicc()> -> _SOURCE_
<android.content.integrity.RuleSet: java.lang.String getVersion()> -> _SOURCE_
<android.content.ContextWrapper: android.content.ContentResolver getContentResolver()> -> _SOURCE_
<android.os.IVibratorStateListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telephony.CellInfoNr: android.telephony.CellSignalStrength getCellSignalStrength()> -> _SOURCE_
<android.graphics.animation.RenderNodeAnimator: long getDuration()> -> _SOURCE_
<android.app.IActivityTaskManager$Stub$Proxy: java.util.List getAppTasks(java.lang.String)> -> _SOURCE_
<android.net.wifi.nl80211.WifiNl80211Manager: java.util.List getScanResults(java.lang.String,int)> -> _SOURCE_
<android.hardware.Camera: android.hardware.Camera$Parameters getEmptyParameters()> -> _SOURCE_
<android.telephony.SmsMessage: java.util.ArrayList fragmentText(java.lang.String)> -> _SOURCE_
<android.hardware.camera2.params.HighSpeedVideoConfiguration: android.util.Range getFpsRange()> -> _SOURCE_
<android.telephony.TelephonyManager: java.util.List getPackagesWithCarrierPrivileges()> -> _SOURCE_
<android.app.ApplicationPackageManager: android.content.pm.PermissionInfo getPermissionInfo(java.lang.String,int)> -> _SOURCE_
<android.hardware.biometrics.IAuthService$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.content.pm.PackageInstaller$Session: boolean isMultiPackage()> -> _SOURCE_
<android.app.IActivityManager$Stub$Proxy: java.util.List getServices(int,int)> -> _SOURCE_
<android.app.INotificationManager$Default: java.util.List getAllowedAssistantAdjustments(java.lang.String)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.lang.String getCertInstallerPackage(android.content.ComponentName)> -> _SOURCE_
<android.transition.ChangeTransform: java.lang.String[] getTransitionProperties()> -> _SOURCE_
<android.os.storage.IStorageManager$Stub$Proxy: android.os.storage.StorageVolume[] getVolumeList(int,java.lang.String,int)> -> _SOURCE_
<android.app.NotificationManager: android.app.NotificationManager$Policy getNotificationPolicy()> -> _SOURCE_
<android.hardware.cas.V1_2.ICas$Stub: android.internal.hidl.base.V1_0.DebugInfo getDebugInfo()> -> _SOURCE_
<android.telephony.TelephonyManager: int getRadioPowerState()> -> _SOURCE_
<android.telephony.CellSignalStrengthTdscdma: int getDbm()> -> _SOURCE_
<android.telephony.SignalStrength: boolean isGsm()> -> _SOURCE_
<android.hardware.cas.V1_0.IDescramblerBase$Proxy: android.internal.hidl.base.V1_0.DebugInfo getDebugInfo()> -> _SOURCE_
<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getApplicationBanner(android.content.pm.ApplicationInfo)> -> _SOURCE_
<android.telephony.AccessNetworkUtils: int getOperatingBandForEarfcn(int)> -> _SOURCE_
<android.media.AudioManager: java.util.List getActivePlaybackConfigurations()> -> _SOURCE_
<android.app.UiAutomation: java.util.List getWindows()> -> _SOURCE_
<android.telephony.DataFailCause: boolean isRadioRestartFailure(android.content.Context,int,int)> -> _SOURCE_
<android.telephony.CarrierRestrictionRules: java.util.List access$202(android.telephony.CarrierRestrictionRules,java.util.List)> -> _SOURCE_
<android.app.Notification: java.lang.CharSequence getSettingsText()> -> _SOURCE_
<android.telephony.PhoneNumberUtils: java.lang.String formatNumberToE164(java.lang.String,java.lang.String)> -> _SOURCE_
<android.telephony.ServiceState: boolean isIwlanPreferred()> -> _SOURCE_
<android.hardware.usb.UsbConfiguration: java.lang.String getName()> -> _SOURCE_
<android.telephony.NetworkRegistrationInfo: java.lang.String lambda$toString$0(java.lang.Integer)> -> _SOURCE_
<com.android.internal.view.IInputMethodManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.media.MediaDrm$KeyRequest: java.lang.String getDefaultUrl()> -> _SOURCE_
<android.bluetooth.BluetoothA2dpSink: android.bluetooth.BluetoothAudioConfig getAudioConfig(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: java.lang.String getLine1AlphaTagForDisplay(int,java.lang.String,java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.lang.String getDeviceId(java.lang.String)> -> _SOURCE_
<android.telecom.TelecomManager: java.lang.String getDefaultDialerPackage(android.os.UserHandle)> -> _SOURCE_
<android.location.GpsStatus: java.lang.Iterable getSatellites()> -> _SOURCE_
<android.os.image.IDynamicSystemService$Default: android.gsi.GsiProgress getInstallationProgress()> -> _SOURCE_
<android.net.Uri$StringUri: java.lang.String getPath()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isOverrideApnEnabled(android.content.ComponentName)> -> _SOURCE_
<android.os.ServiceManager: android.os.IBinder getServiceOrThrow(java.lang.String)> -> _SOURCE_
<android.app.SearchableInfo: android.content.ComponentName getSearchActivity()> -> _SOURCE_
<com.android.internal.view.menu.ListMenuPresenter$MenuAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SOURCE_
<android.telephony.VisualVoicemailSms$Builder: android.telecom.PhoneAccountHandle access$000(android.telephony.VisualVoicemailSms$Builder)> -> _SOURCE_
<android.app.IActivityTaskManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.lang.String getCdmaEriText(java.lang.String,java.lang.String)> -> _SOURCE_
<android.app.admin.SystemUpdatePolicy$InstallationOption: long getEffectiveTime()> -> _SOURCE_
<android.telephony.CarrierRestrictionRules$Builder: android.telephony.CarrierRestrictionRules build()> -> _SOURCE_
<android.view.textservice.TextServicesManager: android.view.textservice.SpellCheckerInfo getCurrentSpellChecker()> -> _SOURCE_
<android.app.IActivityManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.Dialog: android.app.ActionBar getActionBar()> -> _SOURCE_
<com.android.internal.inputmethod.IInputContentUriToken$Stub: com.android.internal.inputmethod.IInputContentUriToken getDefaultImpl()> -> _SOURCE_
<android.telephony.CallQuality: int getAverageRelativeJitter()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getCdmaMin(int)> -> _SOURCE_
<android.net.Uri$OpaqueUri: java.lang.String getLastPathSegment()> -> _SOURCE_
<android.bluetooth.IBluetoothA2dp$Default: java.util.List getConnectedDevices()> -> _SOURCE_
<android.security.keymaster.KeymasterDefs: java.lang.String getErrorMessage(int)> -> _SOURCE_
<android.telephony.SmsManager: int getDefaultSmsSubscriptionId()> -> _SOURCE_
<android.view.TextureLayer: long getLayerHandle()> -> _SOURCE_
<android.telephony.SignalStrength: int getGsmLevel()> -> _SOURCE_
<android.graphics.ParcelableColorSpace: float getMaxValue(int)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: int getKeyguardDisabledFeatures(android.content.ComponentName,int)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.app.RemoteAction: android.graphics.drawable.Icon getIcon()> -> _SOURCE_
<android.content.IContentService$Stub$Proxy: java.lang.String[] getSyncAdapterPackagesForAuthorityAsUser(java.lang.String,int)> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: android.util.SparseArray getSplitDependencies()> -> _SOURCE_
<android.location.ILocationListener$Stub: android.location.ILocationListener getDefaultImpl()> -> _SOURCE_
<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$VideoCapabilities getVideoCapabilities()> -> _SOURCE_
<com.android.internal.telephony.OperatorInfo: java.lang.String toString()> -> _SOURCE_
<android.accounts.AccountManager: android.accounts.AuthenticatorDescription[] getAuthenticatorTypesAsUser(int)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.app.Activity: android.content.ComponentName getCallingActivity()> -> _SOURCE_
<android.os.IVoldTaskListener$Stub: android.os.IVoldTaskListener getDefaultImpl()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: int getSubIdForPhoneAccount(android.telecom.PhoneAccount)> -> _SOURCE_
<android.telephony.data.ApnSetting: java.lang.String getApnTypeString(int)> -> _SOURCE_
<android.telephony.CellInfoLte$1: android.telephony.CellInfoLte createFromParcel(android.os.Parcel)> -> _SOURCE_
<android.window.IDisplayAreaOrganizerController$Stub: android.window.IDisplayAreaOrganizerController getDefaultImpl()> -> _SOURCE_
<android.bluetooth.BluetoothGattService: java.util.List getCharacteristics()> -> _SOURCE_
<android.telephony.CellSignalStrengthNr: int getLevel()> -> _SOURCE_
<android.app.IInstrumentationWatcher$Stub: android.app.IInstrumentationWatcher getDefaultImpl()> -> _SOURCE_
<android.app.assist.AssistStructure$ViewNode: java.lang.String getIdType()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: long getMaximumTimeToLock(android.content.ComponentName,int)> -> _SOURCE_
<android.animation.StateListAnimator$Tuple: android.animation.Animator getAnimator()> -> _SOURCE_
<android.content.pm.PackageParser$Package: long getLongVersionCode()> -> _SOURCE_
<android.os.UserManager: boolean isManagedProfile(int)> -> _SOURCE_
<android.hardware.camera2.impl.CaptureResultExtras: java.lang.String getErrorPhysicalCameraId()> -> _SOURCE_
<android.telephony.CellIdentityGsm: android.telephony.CellIdentityGsm createFromParcelBody(android.os.Parcel)> -> _SOURCE_
<android.hardware.display.DisplayManager: java.util.List getBrightnessEvents()> -> _SOURCE_
<android.telephony.SubscriptionManager: android.content.res.Resources getResourcesForSubId(android.content.Context,int,boolean)> -> _SOURCE_
<android.os.IUpdateEngine$Stub: android.os.IUpdateEngine getDefaultImpl()> -> _SOURCE_
<android.telephony.CdmaEriInformation: int getEriIconMode()> -> _SOURCE_
<android.telephony.DataConnectionRealTimeInfo: int hashCode()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: android.telephony.VisualVoicemailSmsFilterSettings getActiveVisualVoicemailSmsFilterSettings(int)> -> _SOURCE_
<android.location.GnssAntennaInfo$SphericalCorrections: double[][] getCorrectionUncertaintiesArray()> -> _SOURCE_
<android.view.IWindowManager$Default: float getCurrentAnimatorScale()> -> _SOURCE_
<android.hardware.hdmi.IHdmiControlStatusChangeListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.telephony.euicc.IGetProfileCallback$Stub: com.android.internal.telephony.euicc.IGetProfileCallback getDefaultImpl()> -> _SOURCE_
<android.telephony.ims.ImsSsData: int[] getSuppServiceInfoCompat()> -> _SOURCE_
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.text.FontConfig$Font: java.lang.String getFallbackFor()> -> _SOURCE_
<android.util.EventLog$Event: long getTimeNanos()> -> _SOURCE_
<android.app.PictureInPictureParams: java.util.List getActions()> -> _SOURCE_
<android.telephony.SmsMessage$SubmitPdu: java.lang.String toString()> -> _SOURCE_
<android.app.AppOpsManager$OpEventProxyInfo: java.lang.String getPackageName()> -> _SOURCE_
<com.android.internal.inputmethod.IIntResultCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.ContextImpl: android.content.Context getReceiverRestrictedContext()> -> _SOURCE_
<android.location.GpsMeasurement: double getCn0InDbHz()> -> _SOURCE_
<com.android.internal.telephony.IOnSubscriptionsChangedListener$Stub: android.os.IBinder asBinder()> -> _SOURCE_
<android.telephony.SubscriptionManager: void disableCaching()> -> _SOURCE_
<android.graphics.ImageDecoder$DecodeException: android.graphics.ImageDecoder$Source getSource()> -> _SOURCE_
<android.media.midi.MidiDeviceServer$PortClient: android.media.midi.MidiInputPort getInputPort()> -> _SOURCE_
<android.location.LocationManager: java.util.List getProviders(boolean)> -> _SOURCE_
<android.view.animation.GridLayoutAnimationController: float getRowDelay()> -> _SOURCE_
<android.app.DisabledWallpaperManager: int getDesiredMinimumHeight()> -> _SOURCE_
<android.media.AudioTrack: android.media.AudioAttributes getAudioAttributes()> -> _SOURCE_
<android.content.pm.IPackageManager$Default: java.lang.String getIncidentReportApproverPackageName()> -> _SOURCE_
<android.os.TelephonyServiceManager$ServiceRegisterer: android.os.IBinder get()> -> _SOURCE_
<android.graphics.drawable.VectorDrawable$VFullPath: float getFillAlpha()> -> _SOURCE_
<android.app.INotificationManager$Stub$Proxy: android.app.AutomaticZenRule getAutomaticZenRule(java.lang.String)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: com.android.internal.os.BatteryStatsImpl getBatteryStats()> -> _SOURCE_
<android.media.MediaRoute2Info: java.lang.CharSequence getName()> -> _SOURCE_
<android.telephony.SmsManager: android.telephony.SmsManager getSmsManagerForSubscriptionId(int)> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: java.util.List getProtectedBroadcasts()> -> _SOURCE_
<android.app.Notification$CarExtender$UnreadConversation: java.lang.String[] getMessages()> -> _SOURCE_
<android.service.persistentdata.PersistentDataBlockManager: int getFlashLockState()> -> _SOURCE_
<android.content.integrity.IAppIntegrityManager$Stub$Proxy: java.lang.String getCurrentRuleSetVersion()> -> _SOURCE_
<android.os.PowerManager: boolean isRebootingUserspaceSupportedImpl()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Default: java.util.List getKeepUninstalledPackages(android.content.ComponentName,java.lang.String)> -> _SOURCE_
<android.os.IInstalld$Stub$Proxy: android.os.storage.CrateMetadata[] getUserCrates(java.lang.String,int)> -> _SOURCE_
<android.telephony.CellInfoLte: android.telephony.CellIdentity getCellIdentity()> -> _SOURCE_
<android.content.IntentSender: android.content.IIntentSender getTarget()> -> _SOURCE_
<android.os.Environment: java.io.File getDataPreloadsFileCacheDirectory()> -> _SOURCE_
<android.graphics.drawable.ColorDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()> -> _SOURCE_
<android.content.ClipDescription: java.lang.CharSequence getLabel()> -> _SOURCE_
<android.hardware.display.IDisplayManager$Default: android.content.pm.ParceledListSlice getAmbientBrightnessStats()> -> _SOURCE_
<android.os.IUserManager$Stub$Proxy: int[] getProfileIds(int,boolean)> -> _SOURCE_
<android.net.WebAddress: java.lang.String getAuthInfo()> -> _SOURCE_
<android.provider.DocumentsContract$Path: java.lang.String getRootId()> -> _SOURCE_
<com.android.internal.telecom.ITelecomService$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.policy.PhoneFallbackEventHandler: android.app.SearchManager getSearchManager()> -> _SOURCE_
<android.widget.SelectionActionModeHelper: android.view.textclassifier.TextClassification getTextClassification()> -> _SOURCE_
<android.content.UndoManager: boolean isInUpdate()> -> _SOURCE_
<android.telephony.SmsMessage: java.util.ArrayList fragmentText(java.lang.String,int)> -> _SOURCE_
<android.app.ListFragment: android.widget.ListAdapter getListAdapter()> -> _SOURCE_
<android.app.assist.AssistContent: android.os.Bundle getExtras()> -> _SOURCE_
<android.telephony.CellIdentityTdscdma: java.lang.String toString()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.hardware.ICameraService$Stub$Proxy: java.lang.String getLegacyParameters(int)> -> _SOURCE_
<android.webkit.WebSettings: android.webkit.WebSettings$TextSize getTextSize()> -> _SOURCE_
<android.net.IConnectivityManager$Default: byte[] getNetworkWatchlistConfigHash()> -> _SOURCE_
<android.nfc.INfcAdapter$Default: android.nfc.INfcTag getNfcTagInterface()> -> _SOURCE_
<android.app.ActivityManager$AppTask: android.app.ActivityManager$RecentTaskInfo getTaskInfo()> -> _SOURCE_
<android.os.WorkSource$WorkChain: int[] getUids()> -> _SOURCE_
<android.telephony.CellSignalStrengthLte: int getRssi()> -> _SOURCE_
<android.app.WallpaperManager: android.os.ParcelFileDescriptor getWallpaperFile(int,int)> -> _SOURCE_
<android.hardware.soundtrigger.SoundTrigger$SoundModel: java.util.UUID getUuid()> -> _SOURCE_
<com.android.internal.telecom.ITelecomService$Default: java.util.List getPhoneAccountsSupportingScheme(java.lang.String,java.lang.String)> -> _SOURCE_
<android.hardware.usb.IUsbManager$Default: long getScreenUnlockedFunctions()> -> _SOURCE_
<com.android.ims.internal.IImsEcbmListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.media.IRemoteVolumeObserver$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.view.Display: android.graphics.ColorSpace getPreferredWideGamutColorSpace()> -> _SOURCE_
<android.app.DownloadManager: android.database.Cursor query(android.app.DownloadManager$Query,java.lang.String[])> -> _SOURCE_
<android.os.UserManager: android.content.pm.UserInfo createUser(java.lang.String,java.lang.String,int)> -> _SOURCE_
<android.app.ISearchManager$Default: java.util.List getGlobalSearchActivities()> -> _SOURCE_
<android.view.contentcapture.ContentCaptureManager: java.util.Set getContentCaptureConditions()> -> _SOURCE_
<android.media.tv.TvInputManager: java.util.List getAvailableTvStreamConfigList(java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.IMms$Stub: com.android.internal.telephony.IMms asInterface(android.os.IBinder)> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isVoiceCapable()> -> _SOURCE_
<android.app.ContextImpl: android.view.Display getDisplay()> -> _SOURCE_
<android.hardware.camera2.legacy.LegacyCameraDevice: long getSurfaceId(android.view.Surface)> -> _SOURCE_
<android.media.session.ISessionController$Stub$Proxy: long getFlags()> -> _SOURCE_
<android.content.pm.ICrossProfileApps$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.print.PrintManager: java.util.List getPrintJobs()> -> _SOURCE_
<android.provider.Settings$Secure: float getFloatForUser(android.content.ContentResolver,java.lang.String,int)> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Default: java.util.List getPermittedInputMethods(android.content.ComponentName)> -> _SOURCE_
<android.app.VoiceInteractor$PickOptionRequest$Option: java.lang.CharSequence getLabel()> -> _SOURCE_
<android.app.NotificationChannelGroup: java.lang.String getId()> -> _SOURCE_
<android.graphics.fonts.SystemFonts: android.graphics.fonts.FontFamily[] getSystemFallback(java.lang.String)> -> _SOURCE_
<android.content.ContentProviderClient: android.database.Cursor query(android.net.Uri,java.lang.String[],android.os.Bundle,android.os.CancellationSignal)> -> _SOURCE_
<android.view.Window: int getNavigationBarDividerColor()> -> _SOURCE_
<android.hardware.cas.V1_1.ICas$Stub: android.internal.hidl.base.V1_0.DebugInfo getDebugInfo()> -> _SOURCE_
<com.android.internal.telephony.ISms$Stub$Proxy: int getPremiumSmsPermissionForSubscriber(int,java.lang.String)> -> _SOURCE_
<android.app.ActivityManager: java.util.List getRecentTasks(int,int)> -> _SOURCE_
<android.os.IThermalService$Default: android.os.CoolingDevice[] getCurrentCoolingDevices()> -> _SOURCE_
<android.provider.Settings$System: long getLongForUser(android.content.ContentResolver,java.lang.String,long,int)> -> _SOURCE_
<android.provider.Settings$Bookmarks: android.content.Intent getIntentForShortcut(android.content.ContentResolver,char)> -> _SOURCE_
<android.content.Intent: android.content.ComponentName getComponent()> -> _SOURCE_
<android.telephony.TelephonyManager: android.telephony.UiccSlotInfo[] getUiccSlotsInfo()> -> _SOURCE_
<com.android.internal.telephony.GsmAlphabet: char gsmToChar(int)> -> _SOURCE_
<android.app.SearchableInfo: boolean getVoiceSearchLaunchRecognizer()> -> _SOURCE_
<android.nfc.NdefMessage: android.nfc.NdefRecord[] getRecords()> -> _SOURCE_
<android.view.accessibility.AccessibilityRecord: java.lang.CharSequence getBeforeText()> -> _SOURCE_
<android.window.ITaskOrganizerController$Stub$Proxy: android.window.WindowContainerToken getImeTarget(int)> -> _SOURCE_
<android.media.AudioManager: boolean isVolumeFixed()> -> _SOURCE_
<android.app.job.JobWorkItem: long getEstimatedNetworkDownloadBytes()> -> _SOURCE_
<android.view.textclassifier.TextClassification$Request: android.view.textclassifier.SystemTextClassifierMetadata getSystemTextClassifierMetadata()> -> _SOURCE_
<android.view.Window: android.transition.Scene getContentScene()> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Default: java.lang.String getIccSimChallengeResponse(int,int,int,java.lang.String)> -> _SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkInfo[] getAllNetworkInfo()> -> _SOURCE_
<android.view.IScrollCaptureClient$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.widget.Toolbar: android.content.Context getPopupContext()> -> _SOURCE_
<android.hardware.Camera: void getCameraInfo(int,android.hardware.Camera$CameraInfo)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getRadioPowerState(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.location.GpsMeasurement: short getAccumulatedDeltaRangeState()> -> _SOURCE_
<android.app.ContextImpl: android.content.ContentCaptureOptions getContentCaptureOptions()> -> _SOURCE_
<android.net.ConnectivityManager: int getNetworkPreference()> -> _SOURCE_
<android.content.ContextWrapper: android.content.AutofillOptions getAutofillOptions()> -> _SOURCE_
<com.android.internal.telephony.ISub$Stub$Proxy: int getSlotIndex(int)> -> _SOURCE_
<android.media.MediaCasStateException: java.lang.String getDiagnosticInfo()> -> _SOURCE_
<com.android.internal.app.IBatteryStats$Default: android.os.connectivity.GpsBatteryStats getGpsBatteryStats()> -> _SOURCE_
<android.content.ContextWrapper: java.lang.String getOpPackageName()> -> _SOURCE_
<android.telephony.SubscriptionInfo: java.lang.String getNumber()> -> _SOURCE_
<com.android.internal.app.ISoundTriggerService$Stub: com.android.internal.app.ISoundTriggerService getDefaultImpl()> -> _SOURCE_
<android.app.ActivityManager$TaskDescription: boolean getEnsureStatusBarContrastWhenTransparent()> -> _SOURCE_
<android.content.integrity.IAppIntegrityManager$Default: java.lang.String getCurrentRuleSetVersion()> -> _SOURCE_
<android.content.pm.PackageManager: boolean getSyntheticAppDetailsActivityEnabled(java.lang.String)> -> _SOURCE_
<android.telephony.CellIdentityTdscdma: int getChannelNumber()> -> _SOURCE_
<android.app.WallpaperManager: android.graphics.drawable.Drawable peekFastDrawable()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<com.android.internal.appwidget.IAppWidgetService$Stub: com.android.internal.appwidget.IAppWidgetService getDefaultImpl()> -> _SOURCE_
<android.graphics.ImageDecoder$Source: android.content.res.Resources getResources()> -> _SOURCE_
<android.telephony.SignalStrength: int getLteSignalStrength()> -> _SOURCE_
<android.telephony.CellIdentityNr: int[] getBands()> -> _SOURCE_
<android.net.TrafficStats: long getRxPackets(java.lang.String)> -> _SOURCE_
<android.telecom.TelecomManager: int getCurrentTtyMode()> -> _SOURCE_
<android.os.Environment: java.io.File getRootDirectory()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.telephony.SubscriptionManager: boolean isValidPhoneId(int)> -> _SOURCE_
<android.view.TouchDelegate: android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo getTouchDelegateInfo()> -> _SOURCE_
<android.hardware.input.IInputManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.view.ViewRootImpl: android.view.ViewParent getParent()> -> _SOURCE_
<android.os.incremental.IIncrementalService$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.server.SystemConfig: android.util.ArraySet getSystemUserWhitelistedApps()> -> _SOURCE_
<android.service.persistentdata.IPersistentDataBlockService$Stub: android.service.persistentdata.IPersistentDataBlockService getDefaultImpl()> -> _SOURCE_
<android.animation.AnimatorSet: long getTotalDuration()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$ControllerActivityCounterImpl: android.os.BatteryStats$LongCounter getMonitoredRailChargeConsumedMaMs()> -> _SOURCE_
<android.net.IEthernetServiceListener$Stub: android.net.IEthernetServiceListener getDefaultImpl()> -> _SOURCE_
<android.hardware.Camera$Parameters: float getHorizontalViewAngle()> -> _SOURCE_
<android.telephony.UiccSlotInfo: boolean getIsExtendedApduSupported()> -> _SOURCE_
<android.view.ViewGroup: android.view.animation.LayoutAnimationController getLayoutAnimation()> -> _SOURCE_
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: java.util.List getConnectedDevices()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: java.lang.String getCdmaPrlVersion(int)> -> _SOURCE_
<android.os.IUserManager$Stub$Proxy: android.os.ParcelFileDescriptor getUserIcon(int)> -> _SOURCE_
<android.telephony.SubscriptionPlan: java.util.Iterator cycleIterator()> -> _SOURCE_
<android.app.contentsuggestions.ContentSelection: android.os.Bundle getExtras()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean isVoicemailVibrationEnabled(android.telecom.PhoneAccountHandle)> -> _SOURCE_
<android.view.contentcapture.ViewNode: java.lang.String getIdEntry()> -> _SOURCE_
<android.app.NotificationHistory$HistoricalNotification: java.lang.String getKey()> -> _SOURCE_
<android.hardware.display.ColorDisplayManager: int getColorMode()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.lang.String getEsn(int)> -> _SOURCE_
<android.util.PathParser$PathData: long getNativePtr()> -> _SOURCE_
<android.media.SyncParams: float getTolerance()> -> _SOURCE_
<android.media.SubtitleController: android.media.SubtitleTrack[] getTracks()> -> _SOURCE_
<android.content.pm.PackageManager: java.lang.String getAppPredictionServicePackageName()> -> _SOURCE_
<android.os.storage.VolumeRecord: java.lang.String getFsUuid()> -> _SOURCE_
<android.os.Looper: android.os.Looper getMainLooper()> -> _SOURCE_
<android.text.style.MetricAffectingSpan$Passthrough: android.text.style.CharacterStyle getUnderlying()> -> _SOURCE_
<android.telephony.ims.stub.RcsCapabilityExchange: android.telephony.ims.aidl.IRcsFeatureListener getListener()> -> _SOURCE_
<android.content.integrity.IAppIntegrityManager$Default: android.content.pm.ParceledListSlice getCurrentRules()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: int getActivePhoneType()> -> _SOURCE_
<android.graphics.drawable.Drawable: android.graphics.Rect getDirtyBounds()> -> _SOURCE_
<com.android.internal.app.WindowDecorActionBar$ActionModeImpl: android.view.MenuInflater getMenuInflater()> -> _SOURCE_
<com.android.internal.util.ContrastColorUtil$ColorUtilsFromCompat: double[] getTempDouble3Array()> -> _SOURCE_
<android.view.IWindowFocusObserver$Stub: android.view.IWindowFocusObserver getDefaultImpl()> -> _SOURCE_
<android.telephony.ims.feature.RcsFeature: android.os.IInterface getBinder()> -> _SOURCE_
<android.net.IConnectivityManager$Stub: android.net.IConnectivityManager getDefaultImpl()> -> _SOURCE_
<android.webkit.WebViewFactory: java.lang.String getDataDirectorySuffix()> -> _SOURCE_
<android.telephony.VoiceSpecificRegistrationInfo: int hashCode()> -> _SOURCE_
<android.hardware.display.WifiDisplay: java.lang.String getFriendlyDisplayName()> -> _SOURCE_
<android.telephony.ims.ImsSsData: java.util.List getSuppServiceInfo()> -> _SOURCE_
<android.view.ViewConfiguration: int getEdgeSlop()> -> _SOURCE_
<android.view.animation.LayoutAnimationController: float getDelay()> -> _SOURCE_
<android.telephony.PreciseDataConnectionState: int getNetworkType()> -> _SOURCE_
<android.hardware.display.ColorDisplayManager$ColorDisplayManagerInternal: boolean isDisplayWhiteBalanceEnabled()> -> _SOURCE_
<android.content.Intent: android.content.Intent getSelector()> -> _SOURCE_
<android.security.KeyChain: java.security.cert.X509Certificate[] getCertificateChain(android.content.Context,java.lang.String)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.app.NotificationHistory$HistoricalNotification: long getPostedTimeMs()> -> _SOURCE_
<android.bluetooth.IBluetoothHidHost$Stub$Proxy: java.util.List getConnectedDevices()> -> _SOURCE_
<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.os.UserManager: java.lang.String getSeedAccountName()> -> _SOURCE_
<android.os.storage.StorageVolume: java.lang.String getId()> -> _SOURCE_
<android.print.PrinterCapabilitiesInfo: android.print.PrintAttributes$Margins getMinMargins()> -> _SOURCE_
<android.hardware.camera2.params.RggbChannelVector: float getGreenOdd()> -> _SOURCE_
<com.android.internal.telephony.SmsMessageBase: java.lang.String getRecipientAddress()> -> _SOURCE_
<android.media.AudioPlaybackCaptureConfiguration: android.media.projection.MediaProjection getMediaProjection()> -> _SOURCE_
<android.telephony.ims.ImsMmTelManager: int getVoWiFiRoamingModeSetting()> -> _SOURCE_
<com.android.internal.view.menu.MenuItemImpl: android.content.res.ColorStateList getIconTintList()> -> _SOURCE_
<android.animation.PropertyValuesHolder: java.lang.String getPropertyName()> -> _SOURCE_
<android.app.ApplicationPackageManager: android.content.pm.dex.ArtManager getArtManager()> -> _SOURCE_
<android.content.pm.parsing.component.ParsedInstrumentation: java.lang.String getTargetPackage()> -> _SOURCE_
<android.graphics.RenderNode: float getScaleY()> -> _SOURCE_
<com.android.internal.telephony.ISub$Default: android.telephony.SubscriptionInfo getActiveSubscriptionInfoForIccId(java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.InstallSourceInfo getInstallSourceInfo(java.lang.String)> -> _SOURCE_
<com.android.internal.app.WindowDecorActionBar$TabImpl: android.app.ActionBar$TabListener getCallback()> -> _SOURCE_
<android.nfc.NfcAdapter: boolean isNdefPushEnabled()> -> _SOURCE_
<android.telecom.Logging.EventManager$EventRecord: android.telecom.Logging.EventManager$Loggable getRecordEntry()> -> _SOURCE_
<android.net.IpSecTransform: android.net.IpSecConfig getConfig()> -> _SOURCE_
<android.telephony.SubscriptionPlan: int describeContents()> -> _SOURCE_
<android.view.inputmethod.InputMethodSubtype: java.lang.String getMode()> -> _SOURCE_
<android.telephony.TelephonyManager: void disableLocationUpdates()> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: java.util.Set getBondedDevices()> -> _SOURCE_
<com.android.server.SystemConfig: android.util.ArraySet getAllowInPowerSaveExceptIdle()> -> _SOURCE_
<android.transition.Transition: java.util.List getTargetTypes()> -> _SOURCE_
<android.security.keystore.AndroidKeyStoreKey: java.lang.String getFormat()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean getImsProvisioningStatusForCapability(int,int,int)> -> _SOURCE_
<android.telephony.CellSignalStrengthNr: boolean isValid()> -> _SOURCE_
<android.net.NetworkScorerAppData: android.content.ComponentName getRecommendationServiceComponent()> -> _SOURCE_
<com.android.internal.view.menu.SubMenuBuilder: com.android.internal.view.menu.MenuBuilder getRootMenu()> -> _SOURCE_
<android.nfc.NdefRecord: byte[] getPayload()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean isInEmergencySmsMode()> -> _SOURCE_
<com.android.internal.os.BatteryStatsHistory: java.util.List getFilesNumbers()> -> _SOURCE_
<android.content.res.AssetManager: android.util.SparseArray getAssignedPackageIdentifiers()> -> _SOURCE_
<com.android.ims.internal.IImsExternalCallStateListener$Stub: com.android.ims.internal.IImsExternalCallStateListener getDefaultImpl()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.util.List getPermittedInputMethods(android.content.ComponentName)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: java.lang.String[] getForbiddenPlmns(int,int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.view.IScrollCaptureClient$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telephony.TelephonyManager: int getCdmaEriIconIndex(int)> -> _SOURCE_
<android.telephony.CellIdentityWcdma: android.telephony.ClosedSubscriberGroupInfo getClosedSubscriberGroupInfo()> -> _SOURCE_
<android.graphics.CanvasProperty: long getNativeContainer()> -> _SOURCE_
<android.telephony.PhoneNumberRange: int hashCode()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean getDataEnabled()> -> _SOURCE_
<android.bluetooth.BluetoothActivityEnergyInfo: long getControllerEnergyUsed()> -> _SOURCE_
<android.net.Uri$PathPart: android.net.Uri$PathSegments getPathSegments()> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothClass getBluetoothClass()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean isRadioOnForSubscriber(int,java.lang.String)> -> _SOURCE_
<android.os.BatteryStatsManager: android.os.connectivity.CellularBatteryStats getCellularBatteryStats()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String iccTransmitApduBasicChannel(int,int,int,int,int,java.lang.String)> -> _SOURCE_
<android.content.ContextWrapper: java.lang.ClassLoader getClassLoader()> -> _SOURCE_
<com.android.internal.telephony.euicc.ISetNicknameCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.backup.BackupManager: boolean isBackupServiceActive(android.os.UserHandle)> -> _SOURCE_
<com.android.internal.util.FastXmlSerializer: java.lang.String getName()> -> _SOURCE_
<com.android.internal.telephony.PhoneConstants$State: com.android.internal.telephony.PhoneConstants$State valueOf(java.lang.String)> -> _SOURCE_
<android.os.UserManager: int[] getProfileIdsWithDisabled(int)> -> _SOURCE_
<com.android.internal.telephony.SmsApplication: android.content.ComponentName getDefaultRespondViaMessageApplication(android.content.Context,boolean)> -> _SOURCE_
<android.view.WindowManager$LayoutParams: long getUserActivityTimeout()> -> _SOURCE_
<android.content.ContextWrapper: java.io.File getNoBackupFilesDir()> -> _SOURCE_
<android.os.connectivity.WifiBatteryStats: long getSleepTimeMillis()> -> _SOURCE_
<android.app.ApplicationPackageManager: android.content.pm.KeySet getSigningKeySet(java.lang.String)> -> _SOURCE_
<android.telephony.DataSpecificRegistrationInfo: boolean isUsingCarrierAggregation()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: boolean isDataAllowedInVoiceCall(int)> -> _SOURCE_
<com.android.internal.inputmethod.IInputContentUriToken$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.content.integrity.IAppIntegrityManager$Stub$Proxy: android.content.pm.ParceledListSlice getCurrentRules()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isSecondaryLockscreenEnabled(android.os.UserHandle)> -> _SOURCE_
<android.media.midi.IMidiDeviceListener$Stub: android.media.midi.IMidiDeviceListener getDefaultImpl()> -> _SOURCE_
<android.service.autofill.FillEventHistory$Event: java.lang.String getDatasetId()> -> _SOURCE_
<android.media.MediaCodec: android.media.MediaCodecInfo getCodecInfo()> -> _SOURCE_
<android.print.PrintJobInfo: android.print.PrintAttributes getAttributes()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.media.AudioManager: int getAllowedCapturePolicy()> -> _SOURCE_
<android.media.session.ISessionController$Default: android.media.session.PlaybackState getPlaybackState()> -> _SOURCE_
<android.os.IUserManager$Stub$Proxy: java.lang.String getSeedAccountName()> -> _SOURCE_
<android.telephony.CellInfoCdma: android.telephony.CellInfoCdma createFromParcelBody(android.os.Parcel)> -> _SOURCE_
<android.app.Instrumentation: android.app.UiAutomation getUiAutomation()> -> _SOURCE_
<android.util.apk.WrappedX509Certificate: byte[] getSigAlgParams()> -> _SOURCE_
<android.content.pm.parsing.component.ParsedActivity: java.lang.Float getMinAspectRatio()> -> _SOURCE_
<android.telephony.ServiceState: int getState()> -> _SOURCE_
<android.view.autofill.AutofillPopupWindow: android.transition.Transition getEnterTransition()> -> _SOURCE_
<android.telephony.ServiceState: int getDuplexMode()> -> _SOURCE_
<android.app.timezone.IRulesManager$Default: android.app.timezone.RulesState getRulesState()> -> _SOURCE_
<android.os.connectivity.WifiActivityEnergyInfo: long getControllerRxDurationMillis()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long getGpsBatteryDrainMaMs()> -> _SOURCE_
<android.nfc.INfcFCardEmulation$Default: java.util.List getNfcFServices(int)> -> _SOURCE_
<android.widget.OverScroller: float getCurrVelocity()> -> _SOURCE_
<com.android.internal.telephony.euicc.IRetrieveNotificationCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.bluetooth.BluetoothGattServer: java.util.List getServices()> -> _SOURCE_
<android.app.IActivityTaskManager$Stub$Proxy: android.app.ActivityManager$StackInfo getFocusedStackInfo()> -> _SOURCE_
<android.animation.PropertyValuesHolder: java.lang.Class getValueType()> -> _SOURCE_
<android.telephony.ims.ImsMmTelManager: boolean isTtyOverVolteEnabled()> -> _SOURCE_
<android.telephony.CellInfoLte: android.telephony.CellInfo sanitizeLocationInfo()> -> _SOURCE_
<com.android.internal.widget.ActionBarOverlayLayout: java.lang.CharSequence getTitle()> -> _SOURCE_
<android.os.IBatteryPropertiesRegistrar$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.VoiceInteractor$CommandRequest: java.lang.String getRequestTypeName()> -> _SOURCE_
<android.app.role.RoleManager: boolean isRoleAvailable(java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.lang.String[] getPcscfAddress(java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.animation.FloatKeyframeSet: java.lang.Class getType()> -> _SOURCE_
<com.android.internal.telephony.IIntegerConsumer$Stub: android.os.IBinder asBinder()> -> _SOURCE_
<com.android.internal.telephony.IOns$Stub: com.android.internal.telephony.IOns getDefaultImpl()> -> _SOURCE_
<android.bluetooth.BluetoothA2dp: java.util.List getConnectedDevices()> -> _SOURCE_
<android.telephony.CellIdentityTdscdma: java.lang.String getMobileNetworkOperator()> -> _SOURCE_
<android.graphics.drawable.DrawableContainer: boolean isStateful()> -> _SOURCE_
<android.content.pm.ShortcutInfo: java.lang.String getTextResName()> -> _SOURCE_
<android.net.LinkProperties: java.lang.String getDomains()> -> _SOURCE_
<android.media.tv.TvTrackInfo: int getType()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.view.textclassifier.ConversationAction: float getConfidenceScore()> -> _SOURCE_
<android.view.ScrollCaptureTarget: android.view.ScrollCaptureCallback getCallback()> -> _SOURCE_
<android.media.MediaPlayer: android.os.PersistableBundle getMetrics()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.String getAlwaysOnVpnPackageForUser(int)> -> _SOURCE_
<android.net.lowpan.ILowpanManagerListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.CallQuality: int hashCode()> -> _SOURCE_
<android.app.prediction.IPredictionCallback$Stub: android.app.prediction.IPredictionCallback getDefaultImpl()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.util.Set getDefaultCrossProfilePackages()> -> _SOURCE_
<android.net.wifi.nl80211.IApInterface$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.graphics.drawable.BitmapDrawable: android.graphics.Shader$TileMode getTileModeX()> -> _SOURCE_
<android.telephony.ims.ImsMmTelManager: boolean isVtSettingEnabled()> -> _SOURCE_
<com.android.internal.telecom.ITelecomService$Default: android.content.ComponentName getDefaultPhoneApp()> -> _SOURCE_
<android.app.usage.UsageStats: long getLastTimeVisible()> -> _SOURCE_
<android.os.Process: long getStartUptimeMillis()> -> _SOURCE_
<android.app.assist.AssistStructure$WindowNode: android.app.assist.AssistStructure$ViewNode getRootViewNode()> -> _SOURCE_
<android.content.pm.InstantAppResolveInfo: android.os.Bundle getExtras()> -> _SOURCE_
<android.view.ViewGroup: boolean getTouchscreenBlocksFocus()> -> _SOURCE_
<android.telephony.CellConfigLte: int hashCode()> -> _SOURCE_
<android.nfc.cardemulation.CardEmulation: java.lang.String getRouteDestinationForPreferredPaymentService()> -> _SOURCE_
<android.os.IIncidentCompanion$Stub$Proxy: android.os.IncidentManager$IncidentReport getIncidentReport(java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.content.pm.IDataLoader$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telephony.PhoneNumberUtils: boolean isEmergencyNumber(java.lang.String)> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: long getStaticSharedLibVersion()> -> _SOURCE_
<android.hardware.input.InputManager: android.hardware.input.InputManager getInstance()> -> _SOURCE_
<android.media.MediaDrm: android.os.PersistableBundle getMetrics()> -> _SOURCE_
<com.android.internal.telephony.IBooleanConsumer$Stub$Proxy: android.os.IBinder asBinder()> -> _SOURCE_
<android.net.IConnectivityManager$Default: android.net.LinkProperties getActiveLinkProperties()> -> _SOURCE_
<android.net.lowpan.LowpanInterface: android.net.lowpan.ILowpanInterface getService()> -> _SOURCE_
<android.print.PrintJobInfo: java.lang.String getLabel()> -> _SOURCE_
<android.hardware.location.GeofenceHardwareRequest: double getLatitude()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean getGuestUserDisabled(android.content.ComponentName)> -> _SOURCE_
<android.telephony.CallForwardingInfo: int getTimeoutSeconds()> -> _SOURCE_
<android.bluetooth.OobData: byte[] getLeBluetoothDeviceAddress()> -> _SOURCE_
<android.telecom.PhoneAccount: android.os.Bundle getExtras()> -> _SOURCE_
<android.widget.Toast: float getVerticalMargin()> -> _SOURCE_
<android.hardware.display.IDisplayManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.view.KeyEvent: long getEventTimeNano()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.hardware.camera2.CaptureRequest: java.util.List getKeys()> -> _SOURCE_
<android.app.ActivityOptions: boolean getLockTaskMode()> -> _SOURCE_
<android.telephony.CellInfoGsm: android.telephony.CellSignalStrength getCellSignalStrength()> -> _SOURCE_
<android.media.MediaRouter$RouteInfo: java.lang.CharSequence getDescription()> -> _SOURCE_
<android.bluetooth.BluetoothCodecConfig: long getCodecSpecific3()> -> _SOURCE_
<android.util.KeyValueListParser$FloatValue: float getValue()> -> _SOURCE_
<android.webkit.ServiceWorkerController: android.webkit.ServiceWorkerController getInstance()> -> _SOURCE_
<android.net.StaticIpConfiguration: java.util.List getDnsServers()> -> _SOURCE_
<android.os.IBatteryPropertiesRegistrar$Stub: android.os.IBatteryPropertiesRegistrar getDefaultImpl()> -> _SOURCE_
<android.os.BatterySaverPolicyConfig: boolean getAdvertiseIsEnabled()> -> _SOURCE_
<android.os.connectivity.CellularBatteryStats: long getSleepTimeMillis()> -> _SOURCE_
<android.accessibilityservice.IAccessibilityServiceConnection$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.ITransientNotificationCallback$Stub: android.app.ITransientNotificationCallback getDefaultImpl()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getContentDescription()> -> _SOURCE_
<android.hardware.usb.UsbManager: long getScreenUnlockedFunctions()> -> _SOURCE_
<android.content.pm.PackageParser$Package: boolean isUpdatedSystemApp()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.util.List queryIntentServicesAsUser(android.content.Intent,int,int)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: android.util.LongSparseArray getKernelMemoryStats()> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getLine1NumberForSubscriber(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.telephony.CellInfoNr: java.lang.String toString()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.location.GnssMeasurementCorrections: float getEnvironmentBearingUncertaintyDegrees()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Default: android.os.PersistableBundle getTransferOwnershipBundle()> -> _SOURCE_
<android.graphics.ImageDecoder$ContentResolverSource: android.content.res.Resources getResources()> -> _SOURCE_
<android.app.slice.SliceManager: java.util.Collection getSliceDescendants(android.net.Uri)> -> _SOURCE_
<android.text.Layout: float getSpacingAdd()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getLabelFor()> -> _SOURCE_
<com.android.server.SystemConfig: android.util.ArrayMap getPermissions()> -> _SOURCE_
<android.app.NotificationManager$Policy: int getAllSuppressedVisualEffects()> -> _SOURCE_
<android.print.PrinterInfo: boolean getHasCustomPrinterIcon()> -> _SOURCE_
<android.nfc.INfcAdapter$Stub$Proxy: android.nfc.INfcTag getNfcTagInterface()> -> _SOURCE_
<com.android.internal.telephony.IOnSubscriptionsChangedListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.media.Ringtone: android.net.Uri getUri()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Default: java.lang.String[] getAccountTypesWithManagementDisabled()> -> _SOURCE_
<android.widget.ExpandableListConnector: java.util.ArrayList getExpandedGroupMetadataList()> -> _SOURCE_
<android.content.ContentProvider: java.lang.String getCallingPackageUnchecked()> -> _SOURCE_
<android.text.BidiFormatter: boolean getStereoReset()> -> _SOURCE_
<android.security.keystore.IKeystoreResponseCallback$Stub: android.security.keystore.IKeystoreResponseCallback getDefaultImpl()> -> _SOURCE_
<android.os.SharedMemory: java.io.FileDescriptor getFileDescriptor()> -> _SOURCE_
<android.media.MediaCodec$OutputFrame: android.media.MediaFormat getFormat()> -> _SOURCE_
<android.telecom.Logging.Session: long getLocalExecutionTime()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.lang.String iccTransmitApduLogicalChannel(int,int,int,int,int,int,int,java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.ISub$Default: android.os.IBinder asBinder()> -> _SOURCE_
<android.view.Display: java.lang.String getName()> -> _SOURCE_
<android.app.servertransaction.ClientTransaction: android.app.IApplicationThread getClient()> -> _SOURCE_
<android.telecom.TelecomManager: boolean isInEmergencyCall()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.app.SyncNotedAppOp: java.lang.String getAttributionTag()> -> _SOURCE_
<android.widget.ProgressBar: android.graphics.drawable.Drawable getProgressDrawable()> -> _SOURCE_
<android.view.textclassifier.TextLanguage$Request: android.view.textclassifier.SystemTextClassifierMetadata getSystemTextClassifierMetadata()> -> _SOURCE_
<android.location.GpsMeasurement: long getCarrierCycles()> -> _SOURCE_
<android.telephony.TelephonyManager: int getSimApplicationState()> -> _SOURCE_
<android.media.tv.ITvInputManager$Default: java.util.List getTvContentRatingSystemList(int)> -> _SOURCE_
<com.android.internal.telephony.IMms$Default: android.net.Uri importTextMessage(java.lang.String,java.lang.String,int,java.lang.String,long,boolean,boolean)> -> _SOURCE_
<android.telephony.SubscriptionManager$OnSubscriptionsChangedListener: com.android.internal.telephony.util.HandlerExecutor access$000(android.telephony.SubscriptionManager$OnSubscriptionsChangedListener)> -> _SOURCE_
<android.telephony.mbms.IMbmsDownloadSessionCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.SubscriptionManager: boolean canDisablePhysicalSubscription()> -> _SOURCE_
<android.widget.PopupWindow: android.widget.PopupWindow$OnDismissListener getOnDismissListener()> -> _SOURCE_
<android.os.UserManager: android.os.UserManager get(android.content.Context)> -> _SOURCE_
<com.android.internal.telephony.SmsApplication$SmsApplicationData: java.lang.String access$402(com.android.internal.telephony.SmsApplication$SmsApplicationData,java.lang.String)> -> _SOURCE_
<android.hardware.usb.IUsbManager$Default: android.hardware.usb.UsbAccessory getCurrentAccessory()> -> _SOURCE_
<com.android.internal.telecom.ITelecomService$Stub$Proxy: java.util.List getPhoneAccountsSupportingScheme(java.lang.String,java.lang.String)> -> _SOURCE_
<com.android.internal.app.IVoiceInteractor$Stub: com.android.internal.app.IVoiceInteractor getDefaultImpl()> -> _SOURCE_
<android.app.IAlarmManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.accounts.IAccountManagerResponse$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.accessibilityservice.AccessibilityService: android.util.SparseArray getWindowsOnAllDisplays()> -> _SOURCE_
<android.hardware.location.ContextHubManager: android.hardware.location.NanoAppInstanceInfo getNanoAppInstanceInfo(int)> -> _SOURCE_
<android.app.ApplicationPackageManager: android.content.pm.ApplicationInfo getApplicationInfoAsUser(java.lang.String,int,int)> -> _SOURCE_
<android.net.IConnectivityManager$Default: android.net.NetworkInfo[] getAllNetworkInfo()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: boolean isVideoCallingEnabled(java.lang.String,java.lang.String)> -> _SOURCE_
<android.hardware.display.DeviceProductInfo: int[] getRelativeAddress()> -> _SOURCE_
<android.bluetooth.BluetoothA2dp: android.bluetooth.BluetoothDevice getActiveDevice()> -> _SOURCE_
<android.graphics.drawable.NinePatchDrawable: android.graphics.Paint getPaint()> -> _SOURCE_
<com.android.internal.appwidget.IAppWidgetService$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.media.tv.ITvInputManager$Stub$Proxy: java.util.List getAvailableTvStreamConfigList(java.lang.String,int)> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: java.lang.String getClassName()> -> _SOURCE_
<android.media.session.IActiveSessionsListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String getNameForUid(int)> -> _SOURCE_
<android.telephony.CellIdentityWcdma: java.util.Set getAdditionalPlmns()> -> _SOURCE_
<android.app.ApplicationPackageManager: boolean isPermissionRevokedByPolicy(java.lang.String,java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.euicc.ISwitchToProfileCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telephony.PreciseDataConnectionState: java.lang.String getDataConnectionApn()> -> _SOURCE_
<android.view.DisplayAdjustments: android.content.res.CompatibilityInfo getCompatibilityInfo()> -> _SOURCE_
<android.app.usage.NetworkStats: android.app.usage.NetworkStats$Bucket getDeviceSummaryForNetwork()> -> _SOURCE_
<android.nfc.cardemulation.ApduServiceInfo: java.util.List getSubsetAids()> -> _SOURCE_
<com.android.internal.telephony.SmsApplication: android.content.ComponentName getDefaultSendToApplication(android.content.Context,boolean)> -> _SOURCE_
<android.bluetooth.IBluetoothHidHost$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telephony.TelephonyManager: int getCurrentPhoneType()> -> _SOURCE_
<android.permission.IOnPermissionsChangeListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.text.MeasuredParagraph: android.text.AutoGrowArray$FloatArray getWidths()> -> _SOURCE_
<android.widget.ProgressBar: android.graphics.PorterDuff$Mode getProgressBackgroundTintMode()> -> _SOURCE_
<android.telephony.SmsCbEtwsInfo: boolean isPrimary()> -> _SOURCE_
<android.net.Uri$StringUri: java.lang.String getAuthority()> -> _SOURCE_
<android.util.Property: java.lang.Class getType()> -> _SOURCE_
<android.telephony.SmsManager: boolean updateMessageOnIcc(int,int,byte[])> -> _SOURCE_
<android.os.VibrationEffect$Composed: long getDuration()> -> _SOURCE_
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreferredPreviewSizeForVideo()> -> _SOURCE_
<android.hardware.lights.LightsManager: java.util.List getLights()> -> _SOURCE_
<com.android.internal.app.ToolbarActionBar: android.content.Context getThemedContext()> -> _SOURCE_
<android.view.InsetsController: android.view.InsetsState getLastDispatchedState()> -> _SOURCE_
<com.android.internal.telephony.SmsApplication$SmsApplicationData: java.lang.String access$000(com.android.internal.telephony.SmsApplication$SmsApplicationData)> -> _SOURCE_
<com.android.server.SystemConfig: android.util.ArrayMap getAndClearPackageToUserTypeWhitelist()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isFactoryResetProtectionPolicySupported()> -> _SOURCE_
<com.android.internal.app.IBatteryStats$Default: android.os.connectivity.CellularBatteryStats getCellularBatteryStats()> -> _SOURCE_
<android.view.autofill.AutofillManager: java.lang.String getDefaultFieldClassificationAlgorithm()> -> _SOURCE_
<android.app.Fragment: boolean getUserVisibleHint()> -> _SOURCE_
<android.app.WallpaperManager$Globals: android.app.WallpaperColors getWallpaperColors(int,int,int)> -> _SOURCE_
<android.database.sqlite.SQLiteProgram: java.lang.String[] getColumnNames()> -> _SOURCE_
<android.hardware.camera2.legacy.ParameterUtils: java.util.List getAvailableZoomCropRectangles(android.hardware.Camera$Parameters,android.graphics.Rect)> -> _SOURCE_
<android.telephony.TelephonyManager: boolean hasCarrierPrivileges()> -> _SOURCE_
<android.telephony.data.ApnSetting: java.lang.String getProxyAddressAsString()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.widget.AbsListView$InputConnectionWrapper: android.os.Handler getHandler()> -> _SOURCE_
<android.net.ConnectivityManager: android.net.NetworkCapabilities getNetworkCapabilities(android.net.Network)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.content.ContentResolver: android.content.SyncAdapterType[] getSyncAdapterTypes()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: android.telephony.CarrierRestrictionRules getAllowedCarriers()> -> _SOURCE_
<android.telephony.ims.ImsReasonInfo: java.lang.String getExtraMessage()> -> _SOURCE_
<android.animation.AnimatorSet$SeekState: long getPlayTimeNormalized()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean getEmergencyCallbackMode(int)> -> _SOURCE_
<android.net.nsd.NsdServiceInfo: java.lang.String getServiceType()> -> _SOURCE_
<com.android.internal.telephony.IMms$Stub$Proxy: android.net.Uri addMultimediaMessageDraft(java.lang.String,android.net.Uri)> -> _SOURCE_
<android.os.INetworkActivityListener$Stub: android.os.INetworkActivityListener getDefaultImpl()> -> _SOURCE_
<android.print.PrintJobInfo: java.lang.String getTag()> -> _SOURCE_
<android.app.ApplicationPackageManager: boolean isInstantApp()> -> _SOURCE_
<android.hardware.soundtrigger.SoundTrigger$Keyphrase: java.lang.String getText()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: int getDataNetworkType(java.lang.String,java.lang.String)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getIsimDomain()> -> _SOURCE_
<android.view.MotionEvent: float getToolMajor()> -> _SOURCE_
<android.telephony.ServiceState: int getChannelNumber()> -> _SOURCE_
<android.widget.Toolbar: android.graphics.drawable.Drawable getOverflowIcon()> -> _SOURCE_
<android.permission.IPermissionManager$Default: java.util.List getAutoRevokeExemptionRequestedPackages(int)> -> _SOURCE_
<android.hardware.usb.UsbManager: boolean isFunctionEnabled(java.lang.String)> -> _SOURCE_
<android.permission.PermissionControllerManager$1: long getAutoDisconnectTimeoutMs()> -> _SOURCE_
<com.android.internal.app.IBatteryStats$Stub$Proxy: android.os.connectivity.WifiBatteryStats getWifiBatteryStats()> -> _SOURCE_
<android.hardware.usb.UsbPort: android.hardware.usb.UsbPortStatus getStatus()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean needsOtaServiceProvisioning()> -> _SOURCE_
<android.telecom.Logging.EventManager: java.util.concurrent.LinkedBlockingQueue getEventRecords()> -> _SOURCE_
<android.service.notification.StatusBarNotification: java.lang.String getChannelIdLogTag()> -> _SOURCE_
<android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()> -> _SOURCE_
<android.hardware.camera2.CaptureRequest: java.lang.Object getTag()> -> _SOURCE_
<android.service.oemlock.IOemLockService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.service.dreams.IDreamManager$Stub$Proxy: android.content.ComponentName[] getDreamComponentsForUser(int)> -> _SOURCE_
<android.view.textclassifier.TextClassificationContext: java.lang.String getWidgetType()> -> _SOURCE_
<android.media.RoutingSessionInfo: java.lang.String getClientPackageName()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.util.List getEmergencyNumberListTestMode()> -> _SOURCE_
<android.os.IPowerManager$Stub$Proxy: android.os.PowerSaveState getPowerSaveState(int)> -> _SOURCE_
<android.media.MediaCodecInfo$AudioCapabilities: android.util.Range getBitrateRange()> -> _SOURCE_
<android.graphics.drawable.InsetDrawable: android.graphics.Insets getOpticalInsets()> -> _SOURCE_
<android.view.autofill.IAutofillWindowPresenter$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.telephony.gsm.SmsMessage$PduParser: com.android.internal.telephony.gsm.GsmSmsAddress getAddress()> -> _SOURCE_
<android.content.UndoOwner: java.lang.String getTag()> -> _SOURCE_
<com.android.internal.view.IInlineSuggestionsRequestCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.service.autofill.UserData: java.lang.String getFieldClassificationAlgorithm()> -> _SOURCE_
<android.location.IGnssStatusListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.graphics.drawable.VectorDrawable$VGroup: long getNativePtr()> -> _SOURCE_
<android.telephony.TelephonyManager: android.os.Bundle getVisualVoicemailSettings()> -> _SOURCE_
<android.widget.ListPopupWindow$1: com.android.internal.view.menu.ShowableListMenu getPopup()> -> _SOURCE_
<android.hardware.input.KeyboardLayout: java.lang.String getCollection()> -> _SOURCE_
<android.net.TrafficStats: long getTotalRxBytes()> -> _SOURCE_
<android.net.InterfaceConfiguration: java.lang.String getHardwareAddress()> -> _SOURCE_
<android.widget.ImageButton: java.lang.CharSequence getAccessibilityClassName()> -> _SOURCE_
<android.view.VerifiedMotionEvent: long getDownTimeNanos()> -> _SOURCE_
<android.content.pm.parsing.component.ParsedProcess: java.lang.String getName()> -> _SOURCE_
<android.net.Uri$StringUri: java.util.List getPathSegments()> -> _SOURCE_
<android.os.UserManager: android.os.UserHandle getProfileParent(android.os.UserHandle)> -> _SOURCE_
<android.media.session.PlaybackState$CustomAction: android.os.Bundle getExtras()> -> _SOURCE_
<android.widget.AbsListView$InputConnectionWrapper: java.lang.CharSequence getTextAfterCursor(int,int)> -> _SOURCE_
<android.print.IPrintManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.hardware.Camera$Parameters: boolean getVideoStabilization()> -> _SOURCE_
<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder createRecurring(java.time.ZonedDateTime,java.time.Period)> -> _SOURCE_
<android.hardware.ICameraService$Default: android.hardware.camera2.params.VendorTagDescriptor getCameraVendorTagDescriptor()> -> _SOURCE_
<android.os.UserManager: android.content.pm.UserInfo getPrimaryUser()> -> _SOURCE_
<android.app.NotificationManager: boolean isSystemConditionProviderEnabled(java.lang.String)> -> _SOURCE_
<android.permission.IOnPermissionsChangeListener$Stub: android.permission.IOnPermissionsChangeListener getDefaultImpl()> -> _SOURCE_
<android.drm.ProcessedData: java.lang.String getAccountId()> -> _SOURCE_
<android.media.midi.MidiManager: android.media.midi.MidiDeviceServer createDeviceServer(android.media.midi.MidiReceiver[],int,java.lang.String[],java.lang.String[],android.os.Bundle,int,android.media.midi.MidiDeviceServer$Callback)> -> _SOURCE_
<android.graphics.drawable.BitmapDrawable: android.graphics.Insets getOpticalInsets()> -> _SOURCE_
<android.net.INetworkStatsService$Stub$Proxy: android.net.NetworkStats getDetailedUidStats(java.lang.String[])> -> _SOURCE_
<android.provider.Settings$Secure: float getFloat(android.content.ContentResolver,java.lang.String)> -> _SOURCE_
<android.telephony.SmsCbMessage: int getSubscriptionId()> -> _SOURCE_
<android.view.MotionEvent: float getToolMinor()> -> _SOURCE_
<android.content.ContentProvider$Transport: android.database.Cursor query(java.lang.String,java.lang.String,android.net.Uri,java.lang.String[],android.os.Bundle,android.os.ICancellationSignal)> -> _SOURCE_
<android.content.pm.PackageInstaller$SessionInfo: java.lang.String getInstallerPackageName()> -> _SOURCE_
<android.app.ActivityManager: int getMaxRecentTasksStatic()> -> _SOURCE_
<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager peekInstance()> -> _SOURCE_
<com.android.internal.app.WindowDecorActionBar$ActionModeImpl: boolean isTitleOptional()> -> _SOURCE_
<android.app.usage.UsageStats: android.app.usage.UsageStats getObfuscatedForInstantApp()> -> _SOURCE_
<android.app.assist.AssistStructure$ViewNode: int[] getTextLineCharOffsets()> -> _SOURCE_
<android.os.ISystemConfig$Default: java.util.Map getDisabledUntilUsedPreinstalledCarrierAssociatedApps()> -> _SOURCE_
<com.android.internal.telephony.ISub$Stub$Proxy: int getSimStateForSlotIndex(int)> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: android.util.SparseIntArray getMinExtensionVersions()> -> _SOURCE_
<android.telephony.SmsCbMessage: boolean isCmasMessage()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: int[] getAppWidgetIds(android.content.ComponentName)> -> _SOURCE_
<android.app.RemoteInput$Builder: android.os.Bundle getExtras()> -> _SOURCE_
<android.view.textservice.SpellCheckerInfo: java.lang.String getId()> -> _SOURCE_
<com.android.internal.infra.IAndroidFuture$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.media.audiopolicy.IAudioPolicyCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.graphics.Outline: float getRadius()> -> _SOURCE_
<android.widget.SimpleCursorAdapter: android.widget.SimpleCursorAdapter$CursorToStringConverter getCursorToStringConverter()> -> _SOURCE_
<android.app.backup.BackupDataOutput: long getQuota()> -> _SOURCE_
<android.hardware.biometrics.BiometricAuthenticator$Identifier: java.lang.CharSequence getName()> -> _SOURCE_
<android.net.Ikev2VpnProfile: java.security.cert.X509Certificate getUserCert()> -> _SOURCE_
<android.telephony.SmsCbMessage: java.util.List getGeometries()> -> _SOURCE_
<android.webkit.WebStorage$Origin: java.lang.String getOrigin()> -> _SOURCE_
<com.android.internal.telephony.SmsApplication: android.content.ComponentName getDefaultExternalTelephonyProviderChangedApplication(android.content.Context,boolean)> -> _SOURCE_
<android.hardware.hdmi.IHdmiControlService$Default: int[] getSupportedTypes()> -> _SOURCE_
<android.widget.LinearLayout: float getWeightSum()> -> _SOURCE_
<android.window.IWindowOrganizerController$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telephony.SmsManager: boolean copyMessageToIcc(byte[],byte[],int)> -> _SOURCE_
<android.telephony.ims.aidl.IImsMmTelFeature$Stub$Proxy: java.lang.String getSmsFormat()> -> _SOURCE_
<android.net.LinkProperties: android.net.IpPrefix getNat64Prefix()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<com.android.internal.view.FloatingActionMode: android.view.MenuInflater getMenuInflater()> -> _SOURCE_
<android.location.GpsSatellite: float getAzimuth()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Default: java.lang.CharSequence getDeviceOwnerOrganizationName()> -> _SOURCE_
<android.widget.Toast: android.view.WindowManager$LayoutParams getWindowParams()> -> _SOURCE_
<android.service.autofill.FillEventHistory$Event: java.util.Set getSelectedDatasetIds()> -> _SOURCE_
<android.media.soundtrigger_middleware.ISoundTriggerCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.data.ApnSetting: java.lang.String getApnName()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean canConnectTo5GInDsdsMode()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: android.telephony.IccOpenLogicalChannelResponse iccOpenLogicalChannel(int,java.lang.String,java.lang.String,int)> -> _SOURCE_
<android.hardware.hdmi.IHdmiControlService$Stub$Proxy: java.util.List getPortInfo()> -> _SOURCE_
<android.animation.ValueAnimator: long getFrameDelay()> -> _SOURCE_
<android.view.WindowInsets: android.graphics.Insets getMandatorySystemGestureInsets()> -> _SOURCE_
<android.media.midi.IMidiDeviceListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.os.IDeviceIdleController$Default: java.lang.String[] getFullPowerWhitelistExceptIdle()> -> _SOURCE_
<android.graphics.drawable.VectorDrawable$VFullPath: float getTrimPathEnd()> -> _SOURCE_
<android.content.pm.ShortcutInfo: java.lang.IllegalArgumentException getInvalidIconException()> -> _SOURCE_
<android.telephony.PhoneNumberUtils: java.lang.String stripSeparators(java.lang.String)> -> _SOURCE_
<android.telephony.TelephonyScanManager$NetworkScanInfo: android.telephony.TelephonyScanManager$NetworkScanCallback access$100(android.telephony.TelephonyScanManager$NetworkScanInfo)> -> _SOURCE_
<android.app.ApplicationPackageManager: java.lang.String[] getNamesForUids(int[])> -> _SOURCE_
<android.telephony.CellInfo: int hashCode()> -> _SOURCE_
<android.service.notification.Adjustment: java.lang.String getIssuer()> -> _SOURCE_
<android.app.WallpaperManager: android.app.WallpaperColors getWallpaperColors(int)> -> _SOURCE_
<android.net.NetworkTemplate: android.net.NetworkTemplate getNetworkTemplateFromBackup(java.io.DataInputStream)> -> _SOURCE_
<android.media.AudioPlaybackCaptureConfiguration: int[] getExcludeUids()> -> _SOURCE_
<android.bluetooth.UidTraffic: long getTxBytes()> -> _SOURCE_
<android.app.slice.SliceItem: android.app.slice.Slice getSlice()> -> _SOURCE_
<android.location.Geofence: double getLongitude()> -> _SOURCE_
<com.android.internal.util.MemInfoReader: long getSwapFreeSizeKb()> -> _SOURCE_
<android.telephony.ServiceState: int getLteEarfcnRsrpBoost()> -> _SOURCE_
<android.net.lowpan.ILowpanInterface$Stub: android.net.lowpan.ILowpanInterface getDefaultImpl()> -> _SOURCE_
<android.text.BidiFormatter: android.text.BidiFormatter getInstance(java.util.Locale)> -> _SOURCE_
<android.os.Binder: android.os.TransactionTracker getTransactionTracker()> -> _SOURCE_
<android.os.Build: java.lang.String getRadioVersion()> -> _SOURCE_
<android.app.DownloadManager: java.lang.String[] getWhereArgsForIds(long[],java.lang.String[])> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: void getImsMmTelRegistrationState(int,com.android.internal.telephony.IIntegerConsumer)> -> _SOURCE_
<com.android.internal.widget.IRemoteViewsFactory$Stub: com.android.internal.widget.IRemoteViewsFactory getDefaultImpl()> -> _SOURCE_
<android.os.BasicShellCommandHandler: java.io.FileDescriptor getOutFileDescriptor()> -> _SOURCE_
<android.app.usage.ExternalStorageStats: long getAppBytes()> -> _SOURCE_
<android.media.tv.tunerresourcemanager.IResourcesReclaimListener$Stub: android.media.tv.tunerresourcemanager.IResourcesReclaimListener getDefaultImpl()> -> _SOURCE_
<android.telephony.TelephonyManager: int getDataNetworkType(int)> -> _SOURCE_
<android.view.SurfaceView$2: android.view.Surface getSurface()> -> _SOURCE_
<android.content.ISyncStatusObserver$Stub: android.content.ISyncStatusObserver getDefaultImpl()> -> _SOURCE_
<android.view.IScrollCaptureController$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.security.IKeyChainService$Default: android.content.pm.StringParceledListSlice getSystemCaAliases()> -> _SOURCE_
<android.bluetooth.BluetoothManager: java.util.List getConnectedDevices(int)> -> _SOURCE_
<android.os.storage.StorageManager: long getAllocatableBytes(java.util.UUID)> -> _SOURCE_
<android.bluetooth.BluetoothHidHost: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
<android.nfc.INfcAdapter$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.IActivityTaskManager$Stub$Proxy: android.app.ActivityManager$TaskDescription getTaskDescription(int)> -> _SOURCE_
<android.media.MediaCodecInfo$VideoCapabilities: android.util.Range getBlocksPerSecondRange()> -> _SOURCE_
<android.net.TestNetworkInterface: android.os.ParcelFileDescriptor getFileDescriptor()> -> _SOURCE_
<android.telephony.CellSignalStrengthTdscdma: int describeContents()> -> _SOURCE_
<android.os.UserManager: int getUserHandle()> -> _SOURCE_
<android.hardware.usb.IUsbManager$Stub$Proxy: long getScreenUnlockedFunctions()> -> _SOURCE_
<android.content.pm.IPackageManager$Stub$Proxy: android.content.ComponentName getHomeActivities(java.util.List)> -> _SOURCE_
<android.print.IPrinterDiscoveryObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.IActivityManager$Stub$Proxy: android.app.ActivityManager$TaskSnapshot getTaskSnapshot(int,boolean)> -> _SOURCE_
<android.app.ApplicationPackageManager: int getComponentEnabledSetting(android.content.ComponentName)> -> _SOURCE_
<android.app.IActivityManager$Stub$Proxy: android.content.res.Configuration getConfiguration()> -> _SOURCE_
<android.telephony.SubscriptionManager: android.telephony.SubscriptionInfo getActiveSubscriptionInfoForIcc(java.lang.String)> -> _SOURCE_
<android.util.EventLog$Event: byte[] getBytes()> -> _SOURCE_
<android.content.pm.IDataLoaderManager$Stub: android.content.pm.IDataLoaderManager getDefaultImpl()> -> _SOURCE_
<android.bluetooth.IBluetoothProfileServiceConnection$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.app.IVoiceInteractionSessionShowCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.drm.DrmSupportInfo: java.lang.String getDescription()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.lang.String getBoundImsServicePackage(int,boolean,int)> -> _SOURCE_
<android.os.IDeviceIdleController$Default: java.lang.String[] getSystemPowerWhitelistExceptIdle()> -> _SOURCE_
<android.media.SubtitleController: android.media.SubtitleTrack getDefaultTrack()> -> _SOURCE_
<android.media.tv.TvTrackInfo: float getVideoFrameRate()> -> _SOURCE_
<android.net.IConnectivityManager$Default: java.lang.String[] getTetherableUsbRegexs()> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub: java.lang.String getTransactionName(int)> -> _SOURCE_
<android.webkit.Plugin: java.lang.String getPath()> -> _SOURCE_
<android.graphics.drawable.AdaptiveIconDrawable: float getExtraInsetPercentage()> -> _SOURCE_
<android.content.ContextWrapper: android.view.Display getDisplayNoVerify()> -> _SOURCE_
<android.os.IDumpstate$Stub: android.os.IDumpstate getDefaultImpl()> -> _SOURCE_
<android.telephony.UssdResponse: java.lang.String getUssdRequest()> -> _SOURCE_
<android.media.MediaMetadataRetriever: android.graphics.Bitmap getPrimaryImage()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getRadioHalVersion()> -> _SOURCE_
<android.bluetooth.IBluetoothA2dpSink$Stub$Proxy: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
<android.net.Network: long getNetworkHandle()> -> _SOURCE_
<android.os.BaseBundle: boolean isEmptyParcel()> -> _SOURCE_
<android.view.ViewConfiguration: float getAmbiguousGestureMultiplier()> -> _SOURCE_
<android.telephony.ImsiEncryptionInfo: java.lang.String getMnc()> -> _SOURCE_
<android.content.pm.PackageManager: java.lang.String getAttentionServicePackageName()> -> _SOURCE_
<com.android.internal.graphics.palette.Palette: com.android.internal.graphics.palette.Palette$Swatch getDarkVibrantSwatch()> -> _SOURCE_
<android.app.usage.UsageStats: long getFirstTimeStamp()> -> _SOURCE_
<android.content.res.ResourcesImpl: android.content.res.AssetManager getAssets()> -> _SOURCE_
<android.media.RoutingSessionInfo: android.os.Bundle getControlHints()> -> _SOURCE_
<android.hardware.display.DisplayManagerGlobal: android.graphics.Point getStableDisplaySize()> -> _SOURCE_
<android.view.ViewGroup$1: android.view.View getCustomView()> -> _SOURCE_
<android.app.ISearchManager$Default: android.content.ComponentName getGlobalSearchActivity()> -> _SOURCE_
<android.net.ConnectivityThread: android.net.ConnectivityThread get()> -> _SOURCE_
<android.view.ScrollCaptureTarget: android.graphics.Rect getLocalVisibleRect()> -> _SOURCE_
<android.location.GnssMeasurement: long getReceivedSvTimeNanos()> -> _SOURCE_
<android.app.backup.IBackupObserver$Stub: android.app.backup.IBackupObserver getDefaultImpl()> -> _SOURCE_
<android.telephony.VisualVoicemailSms: java.lang.String getPrefix()> -> _SOURCE_
<android.app.Instrumentation: android.content.Context getContext()> -> _SOURCE_
<android.media.midi.IMidiDeviceOpenCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.telecom.ITelecomService$Stub$Proxy: java.lang.String getVoiceMailNumber(android.telecom.PhoneAccountHandle,java.lang.String,java.lang.String)> -> _SOURCE_
<com.android.internal.graphics.palette.ColorCutQuantizer$Vbox: com.android.internal.graphics.palette.Palette$Swatch getAverageColor()> -> _SOURCE_
<android.hardware.display.IDisplayManager$Stub$Proxy: android.hardware.display.WifiDisplayStatus getWifiDisplayStatus()> -> _SOURCE_
<android.view.WindowManagerGlobal: android.view.WindowManagerGlobal getInstance()> -> _SOURCE_
<com.android.internal.app.IAppOpsAsyncNotedCallback$Stub: com.android.internal.app.IAppOpsAsyncNotedCallback getDefaultImpl()> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: java.lang.Boolean getResizeableActivity()> -> _SOURCE_
<android.bluetooth.BluetoothHeadset: int getConnectionState(android.bluetooth.BluetoothDevice)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.app.admin.DevicePolicyManager: android.os.PersistableBundle getTransferOwnershipBundle()> -> _SOURCE_
<android.bluetooth.IBluetoothMap$Stub: android.bluetooth.IBluetoothMap getDefaultImpl()> -> _SOURCE_
<android.os.incremental.IStorageHealthListener$Stub: android.os.incremental.IStorageHealthListener getDefaultImpl()> -> _SOURCE_
<android.os.ISystemUpdateManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.text.Layout$SpannedEllipsizer: java.lang.Object[] getSpans(int,int,java.lang.Class)> -> _SOURCE_
<android.view.IGraphicsStatsCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.webkit.WebViewZygote: android.os.ZygoteProcess getProcess()> -> _SOURCE_
<android.drm.DrmInfo: java.lang.String getMimeType()> -> _SOURCE_
<android.media.tv.tunerresourcemanager.ITunerResourceManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.ActivityThread: android.app.ContextImpl getSystemUiContext()> -> _SOURCE_
<android.app.trust.IStrongAuthTracker$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: java.util.List getPermissionGroups()> -> _SOURCE_
<android.app.ActivityThread: android.app.ContextImpl getSystemContext()> -> _SOURCE_
<android.hardware.camera2.impl.RequestLastFrameNumbersHolder: long getLastZslStillFrameNumber()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: int getPasswordComplexity()> -> _SOURCE_
<android.hardware.fingerprint.FingerprintManager$CryptoObject: java.security.Signature getSignature()> -> _SOURCE_
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)> -> _SOURCE_
<android.net.ConnectivityManager: int getMultipathPreference(android.net.Network)> -> _SOURCE_
<android.telephony.ims.aidl.IImsRcsController$Stub: android.telephony.ims.aidl.IImsRcsController getDefaultImpl()> -> _SOURCE_
<android.app.timezonedetector.ManualTimeZoneSuggestion: java.util.List getDebugInfo()> -> _SOURCE_
<android.os.HardwarePropertiesManager: android.os.CpuUsageInfo[] getCpuUsages()> -> _SOURCE_
<android.os.DropBoxManager$Entry: int getFlags()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<com.android.internal.telephony.SmsRawData: int describeContents()> -> _SOURCE_
<android.net.netstats.provider.NetworkStatsProvider: android.net.netstats.provider.INetworkStatsProviderCallback getProviderCallbackBinder()> -> _SOURCE_
<android.view.accessibility.IAccessibilityManager$Stub$Proxy: long getRecommendedTimeoutMillis()> -> _SOURCE_
<android.bluetooth.IBluetoothPbapClient$Stub$Proxy: java.util.List getConnectedDevices()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: android.util.LongArray getChildNodeIds()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: boolean isReadOnly()> -> _SOURCE_
<android.printservice.PrintServiceInfo: java.lang.String getAddPrintersActivityName()> -> _SOURCE_
<android.os.connectivity.CellularBatteryStats: long getNumPacketsRx()> -> _SOURCE_
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfoForUid(android.net.Network,int,boolean)> -> _SOURCE_
<com.android.internal.widget.FloatingToolbar: boolean isShowing()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.CharSequence getSimSpecificCarrierIdName()> -> _SOURCE_
<android.view.IWindowManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.graphics.drawable.ColorDrawable: android.graphics.ColorFilter getColorFilter()> -> _SOURCE_
<android.security.IFileIntegrityService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.content.pm.IShortcutService$Stub$Proxy: long getRateLimitResetTime(java.lang.String,int)> -> _SOURCE_
<android.net.lowpan.LowpanManager: java.lang.String[] getInterfaceList()> -> _SOURCE_
<android.app.IAlarmListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.hardware.ICameraClient$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.SubscriptionManager: java.util.List getSelectableSubscriptionInfoList()> -> _SOURCE_
<android.content.ContentResolver$MimeTypeInfo: java.lang.CharSequence getContentDescription()> -> _SOURCE_
<android.hardware.SensorManager: float getInclination(float[])> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.util.List getSecondaryUsers(android.content.ComponentName)> -> _SOURCE_
<android.content.pm.PackageParser$Package: java.util.List getChildPackageNames()> -> _SOURCE_
<android.app.DirectAction: android.os.Bundle getExtras()> -> _SOURCE_
<android.hardware.input.IInputManager$Default: int[] getInputDeviceIds()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getAllCrossProfilePackages()> -> _SOURCE_
<android.location.GpsMeasurement: double getSnrInDb()> -> _SOURCE_
<android.service.oemlock.OemLockManager: boolean isOemUnlockAllowedByCarrier()> -> _SOURCE_
<android.app.ActivityManager$TaskDescription: java.lang.String getLabel()> -> _SOURCE_
<android.bluetooth.BluetoothPbap: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
<android.inputmethodservice.InlineSuggestionSession: com.android.internal.view.IInlineSuggestionsRequestCallback getRequestCallback()> -> _SOURCE_
<com.android.internal.inputmethod.IInputMethodPrivilegedOperations$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.view.contentcapture.DataShareRequest: java.lang.String getPackageName()> -> _SOURCE_
<android.app.SearchableInfo: java.lang.String getSuggestPath()> -> _SOURCE_
<android.hardware.ConsumerIrManager: android.hardware.ConsumerIrManager$CarrierFrequencyRange[] getCarrierFrequencies()> -> _SOURCE_
<android.telephony.TelephonyDisplayInfo: int hashCode()> -> _SOURCE_
<android.hardware.camera2.marshal.MarshalRegistry: android.hardware.camera2.marshal.Marshaler getMarshaler(android.hardware.camera2.utils.TypeReference,int)> -> _SOURCE_
<android.view.ThreadedRenderer: android.graphics.RenderNode getRootNode()> -> _SOURCE_
<android.graphics.drawable.AnimatedVectorDrawable: android.graphics.ColorFilter getColorFilter()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.util.Set getAlwaysOnVpnLockdownWhitelist(android.content.ComponentName)> -> _SOURCE_
<com.android.internal.telephony.IUpdateAvailableNetworksCallback$Stub$Proxy: android.os.IBinder asBinder()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: android.util.ArrayMap getPackageStats()> -> _SOURCE_
<android.os.IDeviceIdleController$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.hardware.radio.ProgramList$Chunk: java.util.Set getRemoved()> -> _SOURCE_
<android.app.Fragment: boolean getAllowReturnTransitionOverlap()> -> _SOURCE_
<com.android.internal.telephony.gsm.SmsMessage: com.android.internal.telephony.gsm.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,int,byte[],boolean)> -> _SOURCE_
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: android.bluetooth.BluetoothCodecStatus getCodecStatus(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<com.android.internal.telephony.IMms$Stub$Proxy: android.net.Uri addTextMessageDraft(java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.widget.SimpleCursorAdapter: android.widget.SimpleCursorAdapter$ViewBinder getViewBinder()> -> _SOURCE_
<android.hardware.camera2.params.StreamConfigurationMap: int[] getOutputFormats()> -> _SOURCE_
<android.app.IWallpaperManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.view.autofill.AutofillManager: int getDatasetIdFromAuthenticationId(int)> -> _SOURCE_
<android.os.TelephonyServiceManager: android.os.TelephonyServiceManager$ServiceRegisterer getEuiccControllerService()> -> _SOURCE_
<android.view.inputmethod.InputBinding: android.os.IBinder getConnectionToken()> -> _SOURCE_
<android.app.prediction.IPredictionManager$Stub: android.app.prediction.IPredictionManager getDefaultImpl()> -> _SOURCE_
<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getApplicationIcon(android.content.pm.ApplicationInfo)> -> _SOURCE_
<android.app.ITransientNotification$Stub: android.app.ITransientNotification getDefaultImpl()> -> _SOURCE_
<android.telephony.CellInfo: android.telephony.CellInfo sanitizeLocationInfo()> -> _SOURCE_
<com.android.internal.graphics.palette.Palette: java.util.List getTargets()> -> _SOURCE_
<com.android.internal.policy.PhoneWindow: android.transition.Transition getReturnTransition()> -> _SOURCE_
<android.app.ActivityThread: android.app.Application getApplication()> -> _SOURCE_
<android.bluetooth.le.IPeriodicAdvertisingCallback$Stub: android.bluetooth.le.IPeriodicAdvertisingCallback getDefaultImpl()> -> _SOURCE_
<android.widget.CompoundButton: android.graphics.BlendMode getButtonTintBlendMode()> -> _SOURCE_
<android.os.IServiceManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getSimOperatorNumericForPhone(int)> -> _SOURCE_
<android.hardware.display.IVirtualDisplayCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isInEmergencySmsMode()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable$ConstantState getConstantState()> -> _SOURCE_
<android.view.inputmethod.InputBinding: android.view.inputmethod.InputConnection getConnection()> -> _SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetherableUsbRegexs()> -> _SOURCE_
<android.app.usage.UsageStatsManager: int getAppStandbyBucket()> -> _SOURCE_
<android.location.LocationRequest: long getExpireAt()> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: java.lang.String getTaskAffinity()> -> _SOURCE_
<android.renderscript.Matrix4f: float[] getArray()> -> _SOURCE_
<android.hardware.radio.RadioManager$FmBandConfig: boolean getAf()> -> _SOURCE_
<android.content.RestrictionsManager: android.content.Intent createLocalApprovalIntent()> -> _SOURCE_
<com.android.internal.policy.IKeyguardDismissCallback$Stub: com.android.internal.policy.IKeyguardDismissCallback getDefaultImpl()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getLocaleFromDefaultSim()> -> _SOURCE_
<android.net.lowpan.ILowpanInterface$Default: java.lang.String getName()> -> _SOURCE_
<android.widget.SelectionActionModeHelper$TextClassificationHelper: android.widget.SelectionActionModeHelper$SelectionResult getOriginalSelection()> -> _SOURCE_
<android.app.LoadedApk: java.lang.String getDataDir()> -> _SOURCE_
<android.view.contentcapture.DataRemovalRequest$LocusIdRequest: android.content.LocusId getLocusId()> -> _SOURCE_
<android.hardware.LegacySensorManager: int getRotation()> -> _SOURCE_
<android.hardware.biometrics.IBiometricServiceLockoutResetCallback$Stub: android.hardware.biometrics.IBiometricServiceLockoutResetCallback getDefaultImpl()> -> _SOURCE_
<android.bluetooth.IBluetooth$Default: java.util.List getMostRecentlyConnectedDevices()> -> _SOURCE_
<android.telephony.TelephonyManager: java.util.List getCertsFromCarrierPrivilegeAccessRules()> -> _SOURCE_
<android.app.ApplicationPackageManager: android.content.ComponentName getInstantAppResolverSettingsComponent()> -> _SOURCE_
<android.telephony.CellSignalStrengthLte: android.telephony.CellSignalStrength copy()> -> _SOURCE_
<android.os.IDeviceIdentifiersPolicyService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telecom.PhoneAccount: android.graphics.drawable.Icon getIcon()> -> _SOURCE_
<android.telephony.SubscriptionManager: int getIntegerSubscriptionProperty(int,java.lang.String,int,android.content.Context)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.app.job.IJobScheduler$Default: android.content.pm.ParceledListSlice getAllJobSnapshots()> -> _SOURCE_
<android.content.integrity.IAppIntegrityManager$Stub: android.content.integrity.IAppIntegrityManager getDefaultImpl()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: android.os.Bundle getExtras()> -> _SOURCE_
<android.net.INetworkPolicyManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.os.Environment: java.io.File getOemDirectory()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: byte[] iccExchangeSimIO(int,int,int,int,int,int,java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: java.lang.String getSimLocaleForSubscriber(int)> -> _SOURCE_
<android.widget.Spinner$1: com.android.internal.view.menu.ShowableListMenu getPopup()> -> _SOURCE_
<android.telephony.PhoneNumberUtils: boolean isDialable(char)> -> _SOURCE_
<android.widget.EditText: boolean getDefaultEditable()> -> _SOURCE_
<android.telephony.SmsManager: int getPremiumSmsConsent(java.lang.String)> -> _SOURCE_
<android.app.usage.IStorageStatsManager$Stub$Proxy: long getTotalBytes(java.lang.String,java.lang.String)> -> _SOURCE_
<android.hardware.radio.RadioManager$BandConfig: android.hardware.radio.RadioManager$BandDescriptor getDescriptor()> -> _SOURCE_
<android.location.GnssMeasurement: double getAccumulatedDeltaRangeUncertaintyMeters()> -> _SOURCE_
<android.location.GnssMeasurement: double getCarrierPhaseUncertainty()> -> _SOURCE_
<android.telephony.CellSignalStrengthTdscdma: int getAsuLevel()> -> _SOURCE_
<android.animation.Animator: boolean isStarted()> -> _SOURCE_
<android.app.slice.Slice: java.util.List getHints()> -> _SOURCE_
<android.os.PowerManager: int getPowerSaveModeTrigger()> -> _SOURCE_
<com.android.internal.telephony.euicc.ILoadBoundProfilePackageCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.widget.CursorAdapter: java.lang.Object getItem(int)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.nfc.NfcAdapter: android.nfc.INfcFCardEmulation getNfcFCardEmulationService()> -> _SOURCE_
<android.service.autofill.UserData: android.util.ArrayMap getFieldClassificationArgs()> -> _SOURCE_
<android.app.INotificationManager$Default: java.util.List getZenRules()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getDataActivity()> -> _SOURCE_
<android.text.style.RelativeSizeSpan: float getSizeChange()> -> _SOURCE_
<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getActivityIcon(android.content.Intent)> -> _SOURCE_
<android.printservice.PrintServiceInfo: android.content.ComponentName getComponentName()> -> _SOURCE_
<android.content.pm.IPackageManager$Default: java.lang.String getServicesSystemSharedLibraryPackageName()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.lang.String getManualNetworkSelectionPlmn(int)> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: java.lang.String getBaseCodePath()> -> _SOURCE_
<android.media.tv.TvInputManager: boolean isRatingBlocked(android.media.tv.TvContentRating)> -> _SOURCE_
<android.content.ContentProviderClient: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)> -> _SOURCE_
<android.transition.TransitionManager: android.transition.Transition getTransition(android.transition.Scene)> -> _SOURCE_
<android.inputmethodservice.InputMethodService: android.view.inputmethod.InputConnection getCurrentInputConnection()> -> _SOURCE_
<android.net.ConnectivityManager: android.net.Network getActiveNetwork()> -> _SOURCE_
<android.hardware.hdmi.HdmiControlManager: boolean isHdmiCecVolumeControlEnabled()> -> _SOURCE_
<android.hardware.fingerprint.IFingerprintService$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telephony.CellInfoGsm: android.telephony.CellIdentity getCellIdentity()> -> _SOURCE_
<android.view.accessibility.AccessibilityManager: int getRecommendedTimeoutMillis(int,int)> -> _SOURCE_
<android.net.NetworkStats: long getElapsedRealtime()> -> _SOURCE_
<android.hardware.Sensor: java.util.UUID getUuid()> -> _SOURCE_
<android.app.AlarmManager: android.app.AlarmManager$AlarmClockInfo getNextAlarmClock()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: long getLastSecurityLogRetrievalTime()> -> _SOURCE_
<android.app.AppOpsManager: int getNumOps()> -> _SOURCE_
<android.view.ViewGroup: android.view.animation.Animation$AnimationListener getLayoutAnimationListener()> -> _SOURCE_
<android.view.contentcapture.ViewNode: java.lang.String getIdType()> -> _SOURCE_
<android.app.timezone.RulesState: java.lang.String getBaseRulesVersion()> -> _SOURCE_
<android.net.lowpan.ILowpanInterface$Default: byte[] getMacAddress()> -> _SOURCE_
<android.app.Notification$Action: android.os.Bundle getExtras()> -> _SOURCE_
<android.app.ActivityManager$TaskSnapshot: android.content.ComponentName getTopActivityComponent()> -> _SOURCE_
<android.view.MotionEvent: long getDownTime()> -> _SOURCE_
<android.bluetooth.IBluetoothHidHost$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.widget.CompoundButton: android.view.autofill.AutofillValue getAutofillValue()> -> _SOURCE_
<android.service.notification.Adjustment: java.lang.String getPackage()> -> _SOURCE_
<android.telephony.SmsManager: java.util.List getMessagesFromIcc()> -> _SOURCE_
<android.telephony.data.ApnSetting: java.lang.String getPassword()> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: java.util.List getInstrumentations()> -> _SOURCE_
<android.os.IUserManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.ims.internal.IImsMultiEndpoint$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.view.textservice.SpellCheckerSession: android.view.textservice.SpellCheckerInfo getSpellChecker()> -> _SOURCE_
<android.content.pm.PackageManager: java.lang.String getSetupWizardPackageName()> -> _SOURCE_
<android.media.MediaRoute2Info: android.os.Bundle getExtras()> -> _SOURCE_
<android.view.MotionEvent: float getXCursorPosition()> -> _SOURCE_
<android.os.UserManager: android.content.pm.UserInfo createRestrictedProfile(java.lang.String)> -> _SOURCE_
<android.webkit.WebResourceResponse: java.io.InputStream getData()> -> _SOURCE_
<android.telephony.CellSignalStrengthTdscdma: int getBitErrorRate()> -> _SOURCE_
<android.content.res.TypedArray: java.lang.String getPositionDescription()> -> _SOURCE_
<android.graphics.drawable.VectorDrawable$VectorDrawableState: long getNativeRenderer()> -> _SOURCE_
<android.content.IntentSender: android.os.UserHandle getCreatorUserHandle()> -> _SOURCE_
<android.telephony.SubscriptionManager: int getDefaultSmsPhoneId()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.telephony.NetworkRegistrationInfo: int getNrState()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.telephony.PhoneNumberUtils: boolean isNonSeparator(char)> -> _SOURCE_
<android.media.session.MediaController: java.lang.String getTag()> -> _SOURCE_
<com.android.internal.os.IResultReceiver$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.location.Location: float getSpeedAccuracyMetersPerSecond()> -> _SOURCE_
<android.app.role.IRoleManager$Stub: android.app.role.IRoleManager getDefaultImpl()> -> _SOURCE_
<android.location.ILocationManager$Stub$Proxy: java.lang.String getGnssHardwareModelName()> -> _SOURCE_
<android.net.shared.Inet4AddressUtils: java.net.Inet4Address getBroadcastAddress(java.net.Inet4Address,int)> -> _SOURCE_
<android.media.tv.ITvInputClient$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean getDoNotAskCredentialsOnBoot()> -> _SOURCE_
<android.app.Application: java.lang.String getProcessName()> -> _SOURCE_
<android.content.pm.IPackageManager$Stub$Proxy: int[] getPackageGids(java.lang.String,int,int)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean isVoWiFiSettingEnabled(int)> -> _SOURCE_
<android.app.assist.AssistStructure$ViewNode: java.lang.CharSequence getText()> -> _SOURCE_
<android.content.integrity.AppIntegrityManager: java.lang.String getCurrentRuleSetVersion()> -> _SOURCE_
<com.android.internal.app.ToolbarActionBar: android.app.ActionBar$Tab getSelectedTab()> -> _SOURCE_
<android.sysprop.CryptoProperties$type_values: java.lang.String getPropValue()> -> _SOURCE_
<android.telephony.CellInfo: long getTimestampMillis()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.media.AudioTrack: float getMaxVolume()> -> _SOURCE_
<android.content.pm.SigningInfo: android.content.pm.Signature[] getApkContentsSigners()> -> _SOURCE_
<com.android.internal.os.RailStats: com.android.internal.os.RailStats getRailStats()> -> _SOURCE_
<com.android.ims.internal.IImsServiceFeatureCallback$Stub: com.android.ims.internal.IImsServiceFeatureCallback getDefaultImpl()> -> _SOURCE_
<android.telephony.CellInfoTdscdma: int hashCode()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getVoWiFiModeSetting(int)> -> _SOURCE_
<android.telephony.SmsMessage: int getTPLayerLengthForPDU(java.lang.String)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isManagedProfile(android.content.ComponentName)> -> _SOURCE_
<android.telephony.CarrierConfigManager: android.os.PersistableBundle getDefaultConfig()> -> _SOURCE_
<android.hardware.display.IColorDisplayManager$Stub: android.hardware.display.IColorDisplayManager getDefaultImpl()> -> _SOURCE_
<android.content.pm.dex.ArtManager: java.lang.String getProfileName(java.lang.String)> -> _SOURCE_
<android.media.MediaDrm$ProvisionRequest: byte[] getData()> -> _SOURCE_
<android.net.LinkProperties: android.net.ProxyInfo getHttpProxy()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.app.usage.ExternalStorageStats: long getObbBytes()> -> _SOURCE_
<android.location.IBatchedLocationCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.widget.RemoteViews$LayoutParamAction: java.lang.String getUniqueKey()> -> _SOURCE_
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice getPersistentApplications(int)> -> _SOURCE_
<android.telecom.TelecomManager: boolean isInCall()> -> _SOURCE_
<android.nfc.INfcUnlockHandler$Stub: android.nfc.INfcUnlockHandler getDefaultImpl()> -> _SOURCE_
<android.telephony.VisualVoicemailSms: android.telecom.PhoneAccountHandle getPhoneAccountHandle()> -> _SOURCE_
<android.net.netstats.provider.INetworkStatsProviderCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.hardware.input.KeyboardLayout: int getVendorId()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.service.notification.StatusBarNotification: java.lang.String getTag()> -> _SOURCE_
<android.bluetooth.IBluetoothMap$Stub$Proxy: java.util.List getConnectedDevices()> -> _SOURCE_
<android.telecom.Logging.SessionManager: java.lang.String getSessionId()> -> _SOURCE_
<android.text.style.LocaleSpan: java.util.Locale getLocale()> -> _SOURCE_
<android.media.projection.MediaProjectionManager: android.media.projection.MediaProjection getMediaProjection(int,android.content.Intent)> -> _SOURCE_
<android.telephony.SubscriptionManager: java.util.List getOpportunisticSubscriptions()> -> _SOURCE_
<android.telephony.NetworkScanRequest: boolean getIncrementalResults()> -> _SOURCE_
<com.android.internal.graphics.palette.Palette: com.android.internal.graphics.palette.Palette$Swatch getDarkMutedSwatch()> -> _SOURCE_
<com.android.internal.telephony.euicc.IEuiccController$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telephony.CallForwardingInfo: int getStatus()> -> _SOURCE_
<android.app.AppOpsManager: java.lang.String[] access$600()> -> _SOURCE_
<android.app.INotificationManager$Default: java.util.List getEnabledNotificationListenerPackages()> -> _SOURCE_
<android.content.ContextWrapper: boolean isUiContext()> -> _SOURCE_
<android.hardware.SensorManager: boolean getRotationMatrix(float[],float[],float[],float[])> -> _SOURCE_
<com.android.internal.widget.ICheckCredentialProgressCallback$Stub: com.android.internal.widget.ICheckCredentialProgressCallback getDefaultImpl()> -> _SOURCE_
<android.content.pm.IDataLoader$Stub: android.content.pm.IDataLoader getDefaultImpl()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isVisualVoicemailEnabled(android.telecom.PhoneAccountHandle)> -> _SOURCE_
<android.media.VolumeShaper$Configuration: long getDuration()> -> _SOURCE_
<android.graphics.ImageDecoder: boolean getConserveMemory()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Default: java.util.List getAllCrossProfilePackages()> -> _SOURCE_
<android.print.PrintManager: android.print.PrintJobInfo getPrintJobInfo(android.print.PrintJobId)> -> _SOURCE_
<android.content.pm.PackageInstaller$SessionInfo: java.util.Set getWhitelistedRestrictedPermissions()> -> _SOURCE_
<android.os.SystemVibrator: boolean isVibrating()> -> _SOURCE_
<android.content.res.AssetManager: int getResourceArraySize(int)> -> _SOURCE_
<android.hardware.usb.UsbDevice: boolean getHasAudioPlayback()> -> _SOURCE_
<android.app.backup.ISelectBackupTransportCallback$Stub: android.app.backup.ISelectBackupTransportCallback getDefaultImpl()> -> _SOURCE_
<android.media.MediaDrm$ProvisionRequest: java.lang.String getDefaultUrl()> -> _SOURCE_
<android.hardware.radio.RadioMetadata$Clock: long getUtcEpochSeconds()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: long getPasswordExpiration(android.content.ComponentName,int,boolean)> -> _SOURCE_
<android.app.ApplicationPackageManager: java.util.List queryIntentContentProvidersAsUser(android.content.Intent,int,int)> -> _SOURCE_
<android.media.AudioSystem: java.lang.String getOutputDeviceName(int)> -> _SOURCE_
<android.net.INetworkPolicyManager$Stub$Proxy: android.telephony.SubscriptionPlan[] getSubscriptionPlans(int,java.lang.String)> -> _SOURCE_
<android.net.Uri$StringUri: java.lang.String getEncodedQuery()> -> _SOURCE_
<android.app.EnterTransitionCoordinator: android.transition.Transition getSharedElementTransition()> -> _SOURCE_
<android.view.ViewRootImpl: android.view.accessibility.AccessibilityNodeInfo getAccessibilityFocusedVirtualView()> -> _SOURCE_
<com.android.internal.telephony.ISub$Default: java.util.List getAllSubInfoList(java.lang.String,java.lang.String)> -> _SOURCE_
<android.location.GnssMeasurement: long getCarrierCycles()> -> _SOURCE_
<android.graphics.Canvas: android.graphics.Matrix getMatrix()> -> _SOURCE_
<android.content.ContextWrapper: android.view.autofill.AutofillManager$AutofillClient getAutofillClient()> -> _SOURCE_
<android.widget.Editor: android.text.method.WordIterator getWordIterator()> -> _SOURCE_
<android.location.LocationRequest: boolean getHideFromAppOps()> -> _SOURCE_
<android.os.UserManager: java.util.List getEnabledProfiles()> -> _SOURCE_
<android.bluetooth.IBluetooth$Default: android.os.ParcelUuid[] getUuids()> -> _SOURCE_
<android.bluetooth.IBluetoothManager$Stub$Proxy: android.bluetooth.IBluetoothGatt getBluetoothGatt()> -> _SOURCE_
<android.bluetooth.IBluetoothSap$Stub$Proxy: android.bluetooth.BluetoothDevice getClient()> -> _SOURCE_
<android.widget.ListPopupWindow: android.view.View getSelectedView()> -> _SOURCE_
<android.hardware.ICameraService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.appwidget.AppWidgetProviderInfo: android.os.UserHandle getProfile()> -> _SOURCE_
<android.content.pm.VersionedPackage: java.lang.String getPackageName()> -> _SOURCE_
<android.media.AudioManager$NativeEventHandlerDelegate: android.os.Handler getHandler()> -> _SOURCE_
<com.android.internal.telephony.ISub$Stub$Proxy: int getPhoneId(int)> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Default: java.lang.String getVoiceMailNumberForSubscriber(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean getCrossProfileContactsSearchDisabled(android.content.ComponentName)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.util.List getInstalledCaCerts(android.content.ComponentName)> -> _SOURCE_
<android.telephony.SubscriptionInfo: int getSubscriptionType()> -> _SOURCE_
<android.permission.PermissionManager: int getRuntimePermissionsVersion()> -> _SOURCE_
<android.app.Instrumentation: android.os.Bundle getBinderCounts()> -> _SOURCE_
<android.telephony.SignalStrength: int getTdScdmaLevel()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.telephony.PhoneNumberUtils: java.lang.String cdmaCheckAndProcessPlusCodeForSms(java.lang.String)> -> _SOURCE_
<android.app.AutomaticZenRule: java.lang.String getName()> -> _SOURCE_
<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Region getSafeZone()> -> _SOURCE_
<android.hardware.camera2.ICameraDeviceUser$Stub$Proxy: android.view.Surface getInputSurface()> -> _SOURCE_
<android.telephony.CellInfoTdscdma: android.telephony.CellInfoTdscdma createFromParcelBody(android.os.Parcel)> -> _SOURCE_
<android.net.NetworkPolicyManager: int getUidPolicy(int)> -> _SOURCE_
<android.bluetooth.IBluetoothPbap$Stub: android.bluetooth.IBluetoothPbap getDefaultImpl()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isDeviceProvisioned()> -> _SOURCE_
<android.telephony.CellIdentityLte: android.telephony.CellIdentityLte copy()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isNotificationListenerServicePermitted(java.lang.String,int)> -> _SOURCE_
<android.media.session.ISessionControllerCallback$Stub: android.media.session.ISessionControllerCallback getDefaultImpl()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getDeviceSoftwareVersion()> -> _SOURCE_
<android.os.UserManager: boolean isHeadlessSystemUserMode()> -> _SOURCE_
<android.graphics.Paint: float getStrikeThruThickness()> -> _SOURCE_
<com.android.internal.telephony.euicc.IRemoveNotificationFromListCallback$Stub: com.android.internal.telephony.euicc.IRemoveNotificationFromListCallback getDefaultImpl()> -> _SOURCE_
<android.hardware.display.DisplayManager: android.hardware.display.BrightnessConfiguration getDefaultBrightnessConfiguration()> -> _SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetherableWifiRegexs()> -> _SOURCE_
<android.app.IActivityManager$Stub$Proxy: long[] getProcessPss(int[])> -> _SOURCE_
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice getIntentFilterVerifications(java.lang.String)> -> _SOURCE_
<android.app.timezone.RulesState: android.app.timezone.DistroRulesVersion getInstalledDistroRulesVersion()> -> _SOURCE_
<com.android.internal.inputmethod.InputMethodPrivilegedOperations$OpsHolder: com.android.internal.inputmethod.IInputMethodPrivilegedOperations getAndWarnIfNull()> -> _SOURCE_
<android.nfc.INfcFCardEmulation$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: int getPersonalAppsSuspendedReasons(android.content.ComponentName)> -> _SOURCE_
<android.hardware.Camera$Parameters: float getVerticalViewAngle()> -> _SOURCE_
<android.widget.Magnifier: android.graphics.PointF getMagnifierDefaultSize()> -> _SOURCE_
<android.media.MicrophoneInfo: java.lang.String getAddress()> -> _SOURCE_
<android.bluetooth.BluetoothHeadsetClient: java.util.List getConnectedDevices()> -> _SOURCE_
<android.net.Uri$HierarchicalUri: java.lang.String getPath()> -> _SOURCE_
<android.os.TelephonyServiceManager: android.os.TelephonyServiceManager$ServiceRegisterer getTelephonyImsServiceRegisterer()> -> _SOURCE_
<android.os.connectivity.CellularBatteryStats: long getMonitoredRailChargeConsumedMaMillis()> -> _SOURCE_
<android.telephony.SignalStrength: java.lang.String toString()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.telephony.ServiceState: java.lang.String rilServiceStateToString(int)> -> _SOURCE_
<com.android.internal.telephony.OperatorInfo: java.lang.String getOperatorAlphaLong()> -> _SOURCE_
<android.os.storage.StorageManager: long getPrimaryStorageSize()> -> _SOURCE_
<android.bluetooth.BluetoothHeadset: android.bluetooth.BluetoothDevice getActiveDevice()> -> _SOURCE_
<android.hardware.camera2.utils.CameraIdAndSessionConfiguration: android.hardware.camera2.params.SessionConfiguration getSessionConfiguration()> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: java.lang.String getManageSpaceActivityName()> -> _SOURCE_
<android.telephony.TelephonyManager: java.util.List getAllowedCarriers(int)> -> _SOURCE_
<android.content.pm.ShortcutInfo: java.lang.CharSequence getTitle()> -> _SOURCE_
<com.android.internal.telephony.euicc.IAuthenticateServerCallback$Stub: com.android.internal.telephony.euicc.IAuthenticateServerCallback getDefaultImpl()> -> _SOURCE_
<android.telephony.CellInfo: long getTimeStamp()> -> _SOURCE_
<android.content.pm.parsing.component.ParsedIntentInfo: java.lang.CharSequence getNonLocalizedLabel()> -> _SOURCE_
<android.telephony.CellSignalStrengthWcdma: int getDbm()> -> _SOURCE_
<android.content.ContentProvider: android.content.Context getContext()> -> _SOURCE_
<android.os.IRecoverySystem$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.nfc.INfcAdapter$Stub$Proxy: android.nfc.INfcDta getNfcDtaInterface(java.lang.String)> -> _SOURCE_
<android.os.IHardwarePropertiesManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.webkit.IWebViewUpdateService$Stub$Proxy: boolean isMultiProcessEnabled()> -> _SOURCE_
<com.android.internal.os.FuseAppLoop$CallbackEntry: long getThreadId()> -> _SOURCE_
<android.os.HandlerThread: android.os.Looper getLooper()> -> _SOURCE_
<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.HdmiPlaybackClient getPlaybackClient()> -> _SOURCE_
<android.bluetooth.BluetoothDevice: android.os.ParcelUuid[] getUuids()> -> _SOURCE_
<android.widget.ProgressBar: android.graphics.BlendMode getSecondaryProgressTintBlendMode()> -> _SOURCE_
<android.app.DreamManager: boolean isDreaming()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: android.content.ComponentName getProfileOwnerAsUser(int)> -> _SOURCE_
<android.telephony.PreciseCallState: int describeContents()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: android.util.SparseArray getUidStats()> -> _SOURCE_
<android.hardware.fingerprint.IFingerprintClientActiveCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: java.util.List getUsesOptionalLibraries()> -> _SOURCE_
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: int[] getAppWidgetIdsForHost(java.lang.String,int)> -> _SOURCE_
<android.hardware.hdmi.IHdmiControlService$Default: java.util.List getPortInfo()> -> _SOURCE_
<android.telephony.NetworkRegistrationInfo: java.util.List getAvailableServices()> -> _SOURCE_
<com.android.internal.util.StateMachine$LogRec: com.android.internal.util.IState getDestState()> -> _SOURCE_
<android.content.pm.PackageInstaller$SessionInfo: android.os.UserHandle getUser()> -> _SOURCE_
<android.hardware.camera2.CameraManager: java.lang.String[] getCameraIdList()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.hardware.usb.UsbAccessory: java.lang.String getModel()> -> _SOURCE_
<android.sysprop.CryptoProperties$state_values: java.lang.String getPropValue()> -> _SOURCE_
<android.hardware.camera2.CameraCharacteristics$Key: java.lang.String getName()> -> _SOURCE_
<android.graphics.animation.RenderNodeAnimator: long getNativeAnimator()> -> _SOURCE_
<android.view.DisplayAdjustments: android.content.res.Configuration getConfiguration()> -> _SOURCE_
<android.view.accessibility.IWindowMagnificationConnection$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.hardware.display.IDisplayManagerCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.text.PrecomputedText: java.lang.CharSequence getText()> -> _SOURCE_
<android.telephony.ims.aidl.IImsSmsListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.animation.FloatKeyframeSet: float getFloatValue(float)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()> -> _SOURCE_
<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Path getIconMask()> -> _SOURCE_
<android.telephony.SmsMessage: boolean isCphsMwiMessage()> -> _SOURCE_
<android.hardware.biometrics.IBiometricServiceLockoutResetCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.internal.view.menu.MenuItemImpl: char getAlphabeticShortcut()> -> _SOURCE_
<android.view.accessibility.AccessibilityWindowInfo: android.view.accessibility.AccessibilityNodeInfo getRoot()> -> _SOURCE_
<android.widget.ProgressBar: android.graphics.BlendMode getIndeterminateTintBlendMode()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean getSmsSendCapable(boolean)> -> _SOURCE_
<android.view.autofill.AutofillManager$CompatibilityBridge: java.util.List getEnabledAccessibilityServiceList(int,java.util.List)> -> _SOURCE_
<android.bluetooth.IBluetoothStateChangeCallback$Stub: android.bluetooth.IBluetoothStateChangeCallback getDefaultImpl()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getCallWaitingStatus(int)> -> _SOURCE_
<android.view.textclassifier.SelectionSessionLogger$SignatureParser: java.lang.String getClassifierId(java.lang.String)> -> _SOURCE_
<android.content.UndoManager: android.content.UndoManager$UndoState getTopRedo(android.content.UndoOwner[])> -> _SOURCE_
<android.view.animation.Animation: int getBackgroundColor()> -> _SOURCE_
<android.telephony.ims.aidl.IImsConfigCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Default: java.util.List getBindDeviceAdminTargetUsers(android.content.ComponentName)> -> _SOURCE_
<android.app.IUriGrantsManager$Stub$Proxy: android.content.pm.ParceledListSlice getGrantedUriPermissions(java.lang.String,int)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean isAvailable(int,int,int)> -> _SOURCE_
<android.content.pm.IPackageManager$Default: java.lang.String getWellbeingPackageName()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: java.lang.String getMmsUserAgent(int)> -> _SOURCE_
<android.hardware.ICameraServiceListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.graphics.drawable.VectorDrawable$VGroup: float getTranslateY()> -> _SOURCE_
<android.app.SearchableInfo: java.lang.String getSuggestIntentData()> -> _SOURCE_
<android.widget.Spinner$DialogPopup: android.graphics.drawable.Drawable getBackground()> -> _SOURCE_
<android.hardware.usb.UsbDeviceConnection: byte[] getRawDescriptors()> -> _SOURCE_
<android.hardware.lights.ILightsManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.view.ISystemGestureExclusionListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.content.pm.FeatureInfo: java.lang.String getGlEsVersion()> -> _SOURCE_
<android.app.backup.BackupManager: long getAvailableRestoreToken(java.lang.String)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.util.List getPermittedInputMethodsForCurrentUser()> -> _SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetheredIfaces()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getParent()> -> _SOURCE_
<android.util.MapCollections: java.util.Set getEntrySet()> -> _SOURCE_
<android.net.http.SslCertificate: java.security.cert.X509Certificate getX509Certificate()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.util.Map getEmergencyNumberList(java.lang.String,java.lang.String)> -> _SOURCE_
<android.os.storage.StorageManager: boolean isBlockEncrypted()> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Default: java.lang.String getGroupIdLevel1ForSubscriber(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.telephony.NeighboringCellInfo: int getNetworkType()> -> _SOURCE_
<com.android.internal.widget.ILockSettings$Stub$Proxy: long getLong(java.lang.String,long,int)> -> _SOURCE_
<android.view.ViewConfiguration: int getMaximumFlingVelocity()> -> _SOURCE_
<android.telecom.TelecomManager: boolean isOutgoingCallPermitted(android.telecom.PhoneAccountHandle)> -> _SOURCE_
<com.android.internal.telephony.IOnSubscriptionsChangedListener$Stub: com.android.internal.telephony.IOnSubscriptionsChangedListener getDefaultImpl()> -> _SOURCE_
<android.net.lowpan.LowpanProvision: android.net.lowpan.LowpanIdentity getLowpanIdentity()> -> _SOURCE_
<android.app.AppOpsManager: com.android.internal.app.MessageSamplingConfig access$100()> -> _SOURCE_
<android.os.Environment: java.lang.String getStorageState(java.io.File)> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: java.lang.String getRealPackage()> -> _SOURCE_
<android.media.soundtrigger_middleware.ISoundTriggerCallback$Stub: android.media.soundtrigger_middleware.ISoundTriggerCallback getDefaultImpl()> -> _SOURCE_
<android.print.PrinterCapabilitiesInfo: java.util.List getMediaSizes()> -> _SOURCE_
<android.content.pm.IPackageDeleteObserver$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.Fragment: android.transition.Transition getEnterTransition()> -> _SOURCE_
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()> -> _SOURCE_
<android.app.admin.NetworkEvent: long getId()> -> _SOURCE_
<android.net.WebAddress: java.lang.String getPath()> -> _SOURCE_
<android.media.session.MediaSessionManager: java.util.List getActiveSessions(android.content.ComponentName)> -> _SOURCE_
<android.hardware.Camera$Parameters: java.util.List getZoomRatios()> -> _SOURCE_
<android.app.AppOpsManager$PackageOps: java.lang.String getPackageName()> -> _SOURCE_
<android.net.ITetheredInterfaceCallback$Stub: android.net.ITetheredInterfaceCallback getDefaultImpl()> -> _SOURCE_
<android.location.GnssSingleSatCorrection: float getExcessPathLengthMeters()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getPermittedCrossProfileNotificationListeners(android.content.ComponentName)> -> _SOURCE_
<com.android.server.SystemConfig: java.util.Set getRollbackWhitelistedPackages()> -> _SOURCE_
<android.media.AudioRecordingConfiguration: java.util.List getClientEffects()> -> _SOURCE_
<com.android.internal.textservice.ITextServicesSessionListener$Stub: com.android.internal.textservice.ITextServicesSessionListener getDefaultImpl()> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Default: java.lang.String getVoiceMailAlphaTagForSubscriber(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.app.ApplicationPackageManager: android.content.pm.KeySet getKeySetByAlias(java.lang.String,java.lang.String)> -> _SOURCE_
<android.view.IDisplayFoldListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.graphics.drawable.Drawable: android.graphics.ColorFilter getColorFilter()> -> _SOURCE_
<android.graphics.Paint: float getUnderlinePosition()> -> _SOURCE_
<android.view.ThreadedRenderer$SimpleRenderer: android.graphics.RenderNode getRootNode()> -> _SOURCE_
<android.security.IFileIntegrityService$Stub: android.security.IFileIntegrityService getDefaultImpl()> -> _SOURCE_
<android.telephony.CellSignalStrengthWcdma: int describeContents()> -> _SOURCE_
<android.bluetooth.OobData: byte[] getLeSecureConnectionsConfirmation()> -> _SOURCE_
<com.android.internal.telephony.ISub$Stub$Proxy: int getActiveSubInfoCount(java.lang.String,java.lang.String)> -> _SOURCE_
<android.hardware.location.ContextHubMessage: byte[] getData()> -> _SOURCE_
<android.hardware.hdmi.IHdmiRecordListener$Stub: android.hardware.hdmi.IHdmiRecordListener getDefaultImpl()> -> _SOURCE_
<android.app.Fragment: android.transition.Transition getSharedElementEnterTransition()> -> _SOURCE_
<android.app.Fragment: java.lang.Object getHost()> -> _SOURCE_
<android.os.IUserManager$Default: long getUserUnlockRealtime()> -> _SOURCE_
<android.util.apk.WrappedX509Certificate: java.lang.String getSigAlgOID()> -> _SOURCE_
<android.content.om.IOverlayManager$Stub$Proxy: android.content.om.OverlayInfo getOverlayInfo(java.lang.String,int)> -> _SOURCE_
<android.location.GnssMeasurementCorrections: double getHorizontalPositionUncertaintyMeters()> -> _SOURCE_
<com.android.internal.app.WindowDecorActionBar$ActionModeImpl: java.lang.CharSequence getSubtitle()> -> _SOURCE_
<android.telephony.CellIdentityNr: java.lang.String toString()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.location.ICountryDetector$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.graphics.Shader: long getNativeInstance()> -> _SOURCE_
<android.media.MediaRecorder: java.util.List getActiveMicrophones()> -> _SOURCE_
<android.content.ContextWrapper: android.content.pm.ApplicationInfo getApplicationInfo()> -> _SOURCE_
<com.android.internal.telephony.euicc.IRetrieveNotificationListCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.IActivityManager$Default: java.util.List getBugreportWhitelistedPackages()> -> _SOURCE_
<android.text.DynamicLayout: int[] getBlockEndLines()> -> _SOURCE_
<android.graphics.drawable.BitmapDrawable: boolean isFilterBitmap()> -> _SOURCE_
<android.app.AppOpsManager: android.app.RuntimeAppOpAccessMessage collectRuntimeAppOpAccessMessage()> -> _SOURCE_
<android.os.StatFs: long getTotalBytes()> -> _SOURCE_
<android.renderscript.Allocation: android.renderscript.Element getElement()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isDataEnabled()> -> _SOURCE_
<android.text.style.TextAppearanceSpan: java.lang.String getFontVariationSettings()> -> _SOURCE_
<android.content.ContentProvider$Transport: java.lang.String getProviderName()> -> _SOURCE_
<android.accessibilityservice.AccessibilityService: android.accessibilityservice.AccessibilityServiceInfo getServiceInfo()> -> _SOURCE_
<com.android.internal.telephony.euicc.IRetrieveNotificationListCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.Notification$MessagingStyle$Message: android.os.Bundle getExtras()> -> _SOURCE_
<com.android.internal.infra.ServiceConnector$Impl: long getAutoDisconnectTimeoutMs()> -> _SOURCE_
<android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint: long getMaxMacroBlockRate()> -> _SOURCE_
<android.app.RemoteInputHistoryItem: java.lang.CharSequence getText()> -> _SOURCE_
<android.telephony.SmsMessage: boolean isStatusReportMessage()> -> _SOURCE_
<android.hardware.lights.ILightsManager$Stub$Proxy: android.hardware.lights.LightState getLightState(int)> -> _SOURCE_
<android.net.lowpan.ILowpanManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telephony.TelephonyManager: boolean nvWriteCdmaPrl(byte[])> -> _SOURCE_
<android.net.INetworkManagementEventObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.appwidget.AppWidgetManager: boolean isBoundWidgetPackage(java.lang.String,int)> -> _SOURCE_
<android.hardware.iris.IIrisService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isPackageSuspended(android.content.ComponentName,java.lang.String)> -> _SOURCE_
<android.view.VerifiedMotionEvent: float getRawX()> -> _SOURCE_
<android.print.PrintJobInfo: android.os.Bundle getAdvancedOptions()> -> _SOURCE_
<android.app.job.JobInfo: android.net.NetworkRequest getRequiredNetwork()> -> _SOURCE_
<android.media.session.MediaSessionManager: java.util.List getActiveSessionsForUser(android.content.ComponentName,int)> -> _SOURCE_
<android.graphics.drawable.VectorDrawable: android.graphics.ColorFilter getColorFilter()> -> _SOURCE_
<android.app.Fragment: android.view.View getView()> -> _SOURCE_
<android.view.RemoteAnimationAdapter: boolean getChangeNeedsSnapshot()> -> _SOURCE_
<com.android.internal.policy.IShortcutService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.LoadedApk: java.lang.ClassLoader getClassLoader()> -> _SOURCE_
<android.app.ActivityManager: int getUidImportance(int)> -> _SOURCE_
<android.content.ContentValues: android.util.ArrayMap getValues()> -> _SOURCE_
<android.net.lowpan.LowpanInterface: java.lang.String getPartitionId()> -> _SOURCE_
<android.view.textclassifier.TextClassifierEvent: float[] getScores()> -> _SOURCE_
<android.telephony.SubscriptionManager: int[] getActiveSubscriptionIdList(boolean)> -> _SOURCE_
<android.media.MediaFormat: float getFloat(java.lang.String)> -> _SOURCE_
<android.app.usage.UsageStats: long getTotalTimeInForeground()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.telephony.TelephonyManager: boolean hasIccCard(int)> -> _SOURCE_
<android.content.IContentService$Stub: android.content.IContentService getDefaultImpl()> -> _SOURCE_
<com.android.internal.telephony.ICarrierConfigLoader$Stub$Proxy: java.lang.String getDefaultCarrierServicePackageName()> -> _SOURCE_
<android.telephony.SmsMessage: byte[] getUserData()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Default: android.app.admin.SystemUpdatePolicy getSystemUpdatePolicy()> -> _SOURCE_
<android.accounts.AccountManager: int getAccountVisibility(android.accounts.Account,java.lang.String)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.location.GnssMeasurement: double getPseudorangeRateMetersPerSecond()> -> _SOURCE_
<android.view.Display: long getPresentationDeadlineNanos()> -> _SOURCE_
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String getAttentionServicePackageName()> -> _SOURCE_
<android.hardware.location.ContextHubInfo: java.lang.String getToolchain()> -> _SOURCE_
<android.widget.Spinner$DropdownPopup: java.lang.CharSequence getHintText()> -> _SOURCE_
<android.telephony.ServiceState: int getCdmaSystemId()> -> _SOURCE_
<android.telephony.ImsiEncryptionInfo: int getKeyType()> -> _SOURCE_
<android.hardware.display.DisplayManagerGlobal: int[] getDisplayIds()> -> _SOURCE_
<android.nfc.NfcAdapter: android.nfc.INfcAdapterExtras getNfcAdapterExtrasInterface()> -> _SOURCE_
<android.hardware.hdmi.IHdmiCecVolumeControlFeatureListener$Stub: android.hardware.hdmi.IHdmiCecVolumeControlFeatureListener getDefaultImpl()> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: java.util.List getAdoptPermissions()> -> _SOURCE_
<android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl: android.hardware.camera2.impl.CameraDeviceImpl$StateCallbackKK getDeviceStateCallback()> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: java.lang.CharSequence getNonLocalizedLabel()> -> _SOURCE_
<android.telephony.ims.aidl.IImsMmTelFeature$Stub$Proxy: com.android.ims.internal.IImsMultiEndpoint getMultiEndpointInterface()> -> _SOURCE_
<android.net.ProxyInfo: java.lang.String getHost()> -> _SOURCE_
<android.hardware.ICamera$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.view.SurfaceView$RemoteAccessibilityEmbeddedConnection: android.view.accessibility.IAccessibilityEmbeddedConnection getConnection()> -> _SOURCE_
<android.media.tv.TvInputInfo: android.os.Bundle getExtras()> -> _SOURCE_
<android.telephony.SmsCbEtwsInfo: java.lang.String toString()> -> _SOURCE_
<android.telephony.SmsManager: int getSmsCapacityOnIcc()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: com.android.internal.os.BatteryStatsImpl$ControllerActivityCounterImpl getOrCreateModemControllerActivityLocked()> -> _SOURCE_
<android.app.job.JobInfo: long getMinBackoffMillis()> -> _SOURCE_
<android.app.SearchManager: android.content.ComponentName getWebSearchActivity()> -> _SOURCE_
<android.location.GeocoderParams: java.lang.String getClientPackage()> -> _SOURCE_
<android.hardware.usb.UsbAccessory: java.lang.String getSerial()> -> _SOURCE_
<android.content.pm.split.SplitAssetDependencyLoader: android.content.res.AssetManager getBaseAssetManager()> -> _SOURCE_
<android.os.IPowerManager$Stub: android.os.IPowerManager getDefaultImpl()> -> _SOURCE_
<android.os.UserManager: boolean isSettingRestrictedForUser(java.lang.String,int,java.lang.String,int)> -> _SOURCE_
<android.media.audiopolicy.AudioVolumeGroup: int[] getLegacyStreamTypes()> -> _SOURCE_
<android.content.pm.IPackageStatsObserver$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: android.os.BatteryStats$Timer getBluetoothUnoptimizedScanTimer()> -> _SOURCE_
<android.view.inputmethod.InputMethodSubtype: java.lang.String getLocale()> -> _SOURCE_
<android.bluetooth.BluetoothPbapClient: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
<com.android.internal.telephony.SmsMessageBase$SubmitPduBase: java.lang.String toString()> -> _SOURCE_
<android.app.LoadedApk: android.app.AppComponentFactory getAppFactory()> -> _SOURCE_
<android.text.method.DateKeyListener: android.text.method.DateKeyListener getInstance()> -> _SOURCE_
<android.telephony.SmsCbMessage: int getServiceCategory()> -> _SOURCE_
<android.telephony.CallQuality: int getCallDuration()> -> _SOURCE_
<android.app.ResourcesManager: android.content.res.Configuration getConfiguration()> -> _SOURCE_
<android.os.health.HealthKeys$SortedIntArray: int[] getArray()> -> _SOURCE_
<android.content.ContentResolver: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)> -> _SOURCE_
<android.os.IDeviceIdentifiersPolicyService$Stub: android.os.IDeviceIdentifiersPolicyService getDefaultImpl()> -> _SOURCE_
<android.media.AudioTrack$NativePositionEventHandlerDelegate: android.os.Handler getHandler()> -> _SOURCE_
<android.app.BackStackRecord: java.lang.CharSequence getBreadCrumbTitle()> -> _SOURCE_
<android.app.ApplicationPackageManager: boolean isSignedByExactly(java.lang.String,android.content.pm.KeySet)> -> _SOURCE_
<android.media.AudioDeviceInfo: int[] getChannelMasks()> -> _SOURCE_
<android.media.AudioManager: boolean isBluetoothScoAvailableOffCall()> -> _SOURCE_
<android.hardware.biometrics.CryptoObject: long getOpId()> -> _SOURCE_
<android.provider.Settings$Secure: java.lang.String getString(android.content.ContentResolver,java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getDataNetworkType(java.lang.String,java.lang.String)> -> _SOURCE_
<android.telephony.TelephonyManager: int getSimCardState(int)> -> _SOURCE_
<android.hardware.input.InputManager: java.lang.String[] getEnabledKeyboardLayoutsForInputDevice(android.hardware.input.InputDeviceIdentifier)> -> _SOURCE_
<android.view.SurfaceControlViewHost$SurfacePackage: android.view.accessibility.IAccessibilityEmbeddedConnection getAccessibilityEmbeddedConnection()> -> _SOURCE_
<android.location.GnssReflectingPlane: double getLatitudeDegrees()> -> _SOURCE_
<android.view.IRecentsAnimationController$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.content.IntentSender: android.os.IBinder getWhitelistToken()> -> _SOURCE_
<android.telephony.CellSignalStrengthCdma: int getCdmaEcio()> -> _SOURCE_
<android.view.KeyEvent: long getDownTime()> -> _SOURCE_
<android.telephony.SubscriptionManager: boolean isSubscriptionEnabled(int)> -> _SOURCE_
<android.telephony.CallForwardingInfo: int getReason()> -> _SOURCE_
<android.app.ActionBar: int getHideOffset()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Default: java.util.List getActiveAdmins(int)> -> _SOURCE_
<android.media.IAudioService$Stub$Proxy: java.util.List getAudioVolumeGroups()> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: java.lang.String getRestrictedAccountType()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getBindDeviceAdminTargetUsers(android.content.ComponentName)> -> _SOURCE_
<android.view.accessibility.IAccessibilityInteractionConnection$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.backup.BackupManager: java.lang.String selectBackupTransport(java.lang.String)> -> _SOURCE_
<android.telephony.CellIdentity: java.lang.String getGlobalCellId()> -> _SOURCE_
<android.media.IPlayer$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.WallpaperManager: android.graphics.drawable.Drawable getFastDrawable()> -> _SOURCE_
<android.telephony.SmsMessage: java.lang.String getRecipientAddress()> -> _SOURCE_
<android.renderscript.RenderScript: android.renderscript.RenderScript$RSMessageHandler getMessageHandler()> -> _SOURCE_
<android.os.IServiceCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.NetworkRegistrationInfo: boolean isInService()> -> _SOURCE_
<android.app.Notification$WearableExtender: android.app.PendingIntent getDisplayIntent()> -> _SOURCE_
<android.database.CursorWrapper: boolean isLast()> -> _SOURCE_
<android.bluetooth.BluetoothProfileConnector: java.lang.Object getService()> -> _SOURCE_
<com.android.internal.os.KernelCpuProcStringReader: com.android.internal.os.KernelCpuProcStringReader getUserSysTimeReaderInstance()> -> _SOURCE_
<com.android.internal.os.BinderInternal: long getLastGcTime()> -> _SOURCE_
<com.android.internal.graphics.SfVsyncFrameCallbackProvider: long getFrameTime()> -> _SOURCE_
<android.net.wifi.nl80211.IClientInterface$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.hardware.biometrics.IBiometricServiceReceiver$Stub: android.hardware.biometrics.IBiometricServiceReceiver getDefaultImpl()> -> _SOURCE_
<android.app.AlarmManager$AlarmClockInfo: android.app.PendingIntent getShowIntent()> -> _SOURCE_
<android.hardware.face.FaceManager$AuthenticationResult: android.hardware.biometrics.CryptoObject getCryptoObject()> -> _SOURCE_
<android.app.SystemServiceRegistry: java.lang.Object getSystemService(android.app.ContextImpl,java.lang.String)> -> _SOURCE_
<android.hardware.usb.UsbManager: android.hardware.usb.UsbAccessory[] getAccessoryList()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<com.android.internal.telephony.ISetOpportunisticDataCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.server.SystemConfig: android.util.ArraySet getLinkedApps()> -> _SOURCE_
<android.os.IIncidentAuthListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.bluetooth.BluetoothDevice: boolean isBondingInitiatedLocally()> -> _SOURCE_
<android.animation.AnimatorSet: long getStartDelay()> -> _SOURCE_
<android.app.job.IJobScheduler$Stub: android.app.job.IJobScheduler getDefaultImpl()> -> _SOURCE_
<android.view.InsetsSource: android.graphics.Rect getVisibleFrame()> -> _SOURCE_
<android.net.lowpan.LowpanInterface: android.net.IpPrefix[] getLinkNetworks()> -> _SOURCE_
<android.net.INetworkPolicyListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telecom.TelecomManager: java.util.List getAllPhoneAccountHandles()> -> _SOURCE_
<android.net.wifi.nl80211.IWificond$Default: int[] getAvailableDFSChannels()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getActivePhoneTypeForSlot(int)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: int getCallStateForSlot(int)> -> _SOURCE_
<android.content.res.AssetManager: android.content.res.ApkAssets[] getApkAssets()> -> _SOURCE_
<android.accessibilityservice.IAccessibilityServiceConnection$Stub$Proxy: android.view.accessibility.AccessibilityWindowInfo getWindow(int)> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.CharSequence getDeviceOwnerOrganizationName()> -> _SOURCE_
<android.net.CaptivePortalData: long getExpiryTimeMillis()> -> _SOURCE_
<android.bluetooth.BluetoothGatt: java.util.List getServices()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.lang.String[] getForbiddenPlmns(int,int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.hardware.Sensor: java.lang.String getVendor()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.net.INetworkStatsSession$Stub$Proxy: android.net.NetworkStatsHistory getHistoryIntervalForUid(android.net.NetworkTemplate,int,int,int,int,long,long)> -> _SOURCE_
<android.view.contentcapture.ViewNode: android.os.LocaleList getLocaleList()> -> _SOURCE_
<android.app.WallpaperManager: android.graphics.drawable.Drawable getBuiltInDrawable(int,int,boolean,float,float)> -> _SOURCE_
<android.content.RestrictionEntry: java.lang.String[] getAllSelectedStrings()> -> _SOURCE_
<android.hardware.camera2.impl.CaptureCallbackHolder: android.hardware.camera2.impl.CaptureCallback getCallback()> -> _SOURCE_
<android.hardware.camera2.ICameraDeviceCallbacks$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean isImsRegistered(int)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: boolean getImsProvisioningStatusForCapability(int,int,int)> -> _SOURCE_
<android.telephony.ServiceState: int[] getCellBandwidths()> -> _SOURCE_
<android.telephony.ServiceState: boolean getVoiceRoaming()> -> _SOURCE_
<com.android.internal.telephony.ISub$Stub$Proxy: java.util.List getAvailableSubscriptionInfoList(java.lang.String,java.lang.String)> -> _SOURCE_
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.media.projection.MediaProjectionInfo: java.lang.String getPackageName()> -> _SOURCE_
<android.telephony.CarrierRestrictionRules: java.util.List access$302(android.telephony.CarrierRestrictionRules,java.util.List)> -> _SOURCE_
<android.hardware.fingerprint.IFingerprintService$Stub$Proxy: java.util.List getEnrolledFingerprints(int,java.lang.String)> -> _SOURCE_
<android.os.BatterySaverPolicyConfig: boolean getDisableSoundTrigger()> -> _SOURCE_
<android.content.ClipboardManager: android.content.ClipData getPrimaryClip()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: int getSubscriptionSpecificCarrierId(int)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String[] getForbiddenPlmns()> -> _SOURCE_
<android.media.MediaDrm$KeyStatus: byte[] getKeyId()> -> _SOURCE_
<android.os.VibrationEffect$Composed: java.util.List getPrimitiveEffects()> -> _SOURCE_
<android.app.TaskStackBuilder: android.content.Intent[] getIntents()> -> _SOURCE_
<android.service.euicc.EuiccProfileInfo: java.lang.String getServiceProviderName()> -> _SOURCE_
<android.telephony.DataConnectionRealTimeInfo: java.lang.String toString()> -> _SOURCE_
<android.media.AudioManager: boolean isHdmiSystemAudioSupported()> -> _SOURCE_
<com.android.internal.app.MessageSamplingConfig: long getExpirationTimeSinceBootMillis()> -> _SOURCE_
<android.accessibilityservice.IAccessibilityServiceConnection$Stub$Proxy: float getMagnificationCenterX(int)> -> _SOURCE_
<android.app.LoadedApk: java.lang.String getAppDir()> -> _SOURCE_
<android.hardware.display.BrightnessConfiguration: android.util.Pair getCurve()> -> _SOURCE_
<com.android.internal.widget.ILockSettings$Stub$Proxy: java.lang.String getString(java.lang.String,java.lang.String,int)> -> _SOURCE_
<android.view.InsetsAnimationThread: android.os.Handler getHandler()> -> _SOURCE_
<com.android.internal.telephony.CellNetworkScanResult: int getStatus()> -> _SOURCE_
<android.telephony.CellInfoLte: int hashCode()> -> _SOURCE_
<android.telephony.UiccSlotInfo: int getLogicalSlotIdx()> -> _SOURCE_
<android.net.ConnectivityManager: int getRestrictBackgroundStatus()> -> _SOURCE_
<android.net.INetworkStatsSession$Stub$Proxy: android.net.NetworkStats getSummaryForNetwork(android.net.NetworkTemplate,long,long)> -> _SOURCE_
<android.telephony.TelephonyManager: int getPhoneCount()> -> _SOURCE_
<android.os.IUserManager$Stub$Proxy: java.lang.String getUserAccount(int)> -> _SOURCE_
<android.net.wifi.nl80211.IWificond$Stub$Proxy: int[] getAvailable6gChannels()> -> _SOURCE_
<com.android.internal.widget.LockPatternUtils$StrongAuthTracker: android.app.trust.IStrongAuthTracker$Stub getStub()> -> _SOURCE_
<android.app.IAppTask$Stub: android.app.IAppTask getDefaultImpl()> -> _SOURCE_
<android.content.Context: android.view.contentcapture.ContentCaptureManager$ContentCaptureClient getContentCaptureClient()> -> _SOURCE_
<com.android.internal.telecom.ITelecomService$Stub$Proxy: android.telecom.PhoneAccountHandle getSimCallManagerForUser(int)> -> _SOURCE_
<com.android.net.IProxyService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.util.Set getCrossProfileCalendarPackages(android.content.ComponentName)> -> _SOURCE_
<android.bluetooth.BluetoothCodecStatus: android.bluetooth.BluetoothCodecConfig[] getCodecsLocalCapabilities()> -> _SOURCE_
<android.hardware.lights.LightsManager: android.hardware.lights.LightsManager$LightsSession openSession()> -> _SOURCE_
<android.provider.DocumentsContract: java.lang.String getDocumentId(android.net.Uri)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.util.List getUserControlDisabledPackages(android.content.ComponentName)> -> _SOURCE_
<android.hardware.hdmi.IHdmiControlService$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.net.lowpan.ILowpanInterface$Default: java.lang.String getNcpVersion()> -> _SOURCE_
<android.app.job.IJobScheduler$Stub$Proxy: android.content.pm.ParceledListSlice getAllJobSnapshots()> -> _SOURCE_
<android.net.NetworkScorerAppData: java.lang.String getRecommendationServicePackageName()> -> _SOURCE_
<android.net.lowpan.LowpanChannelInfo: float getSpectrumCenterFrequency()> -> _SOURCE_
<android.view.WindowManagerGlobal: android.view.IWindowManager getWindowManagerService()> -> _SOURCE_
<android.os.Debug: java.util.Map getRuntimeStats()> -> _SOURCE_
<android.bluetooth.IBluetoothMetadataListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.widget.ToastPresenter: android.os.IBinder getToken()> -> _SOURCE_
<android.app.ApplicationPackageManager: android.content.Intent getLaunchIntentForPackage(java.lang.String)> -> _SOURCE_
<android.telephony.SubscriptionManager: android.net.Uri getUriForSubscriptionId(int)> -> _SOURCE_
<com.android.internal.telephony.ICarrierConfigLoader$Stub$Proxy: android.os.PersistableBundle getConfigForSubIdWithFeature(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.app.ApplicationPackageManager: java.util.List queryBroadcastReceiversAsUser(android.content.Intent,int,int)> -> _SOURCE_
<android.media.MediaCodec$OutputFrame: java.util.Set getChangedKeys()> -> _SOURCE_
<android.graphics.Paint: android.graphics.ColorFilter getColorFilter()> -> _SOURCE_
<android.provider.Settings$NameValueTable: android.net.Uri getUriFor(android.net.Uri,java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: boolean getRcsProvisioningStatusForCapability(int,int)> -> _SOURCE_
<android.media.session.ISessionController$Stub$Proxy: java.lang.String getTag()> -> _SOURCE_
<android.os.connectivity.WifiActivityEnergyInfo: long getControllerTxDurationMillis()> -> _SOURCE_
<android.os.Messenger: android.os.IBinder getBinder()> -> _SOURCE_
<android.location.GnssClock: java.lang.String getReferenceCodeTypeForIsb()> -> _SOURCE_
<android.telephony.AvailableNetworkInfo: java.lang.String toString()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.app.DisabledWallpaperManager: android.graphics.drawable.Drawable getBuiltInDrawable(int)> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec: java.security.spec.AlgorithmParameterSpec getAlgorithmParameterSpec()> -> _SOURCE_
<android.app.ActivityManager: int getMaxNumPictureInPictureActions()> -> _SOURCE_
<android.telephony.SubscriptionManager: int getDefaultSmsSubscriptionId()> -> _SOURCE_
<android.app.Notification$MessagingStyle: java.lang.CharSequence getHeadsUpStatusBarText()> -> _SOURCE_
<android.print.PrintManager: android.graphics.drawable.Icon getCustomPrinterIcon(android.print.PrinterId)> -> _SOURCE_
<com.android.internal.compat.IPlatformCompat$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: android.os.BatteryStats$Timer getBluetoothUnoptimizedScanBackgroundTimer()> -> _SOURCE_
<android.telephony.DataFailCause: boolean isPermanentFailure(android.content.Context,int,int)> -> _SOURCE_
<com.android.internal.os.BackgroundThread: com.android.internal.os.BackgroundThread get()> -> _SOURCE_
<android.content.pm.ShortcutInfo: java.lang.CharSequence getDisabledMessage()> -> _SOURCE_
<android.bluetooth.IBluetoothHidDeviceCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.view.autofill.AutofillId: long getVirtualChildLongId()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long getBatteryUptimeLocked()> -> _SOURCE_
<com.android.internal.view.IInputContext$Stub: com.android.internal.view.IInputContext getDefaultImpl()> -> _SOURCE_
<android.app.assist.AssistStructure$ViewNode: android.view.autofill.AutofillId getAutofillId()> -> _SOURCE_
<android.app.IActivityManager$Stub$Proxy: android.graphics.Rect getTaskBounds(int)> -> _SOURCE_
<android.graphics.RenderNode: float getPivotY()> -> _SOURCE_
<android.app.IActivityManager$Default: java.util.List getRunningAppProcesses()> -> _SOURCE_
<android.app.ISearchManager$Stub$Proxy: android.app.SearchableInfo getSearchableInfo(android.content.ComponentName)> -> _SOURCE_
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.hardware.biometrics.CryptoObject: javax.crypto.Mac getMac()> -> _SOURCE_
<com.android.internal.graphics.palette.Palette: com.android.internal.graphics.palette.Palette$Swatch getLightVibrantSwatch()> -> _SOURCE_
<android.telecom.Log: android.telecom.Logging.SessionManager getSessionManager()> -> _SOURCE_
<android.app.ActivityManager: java.util.List getRunningTasks(int)> -> _SOURCE_
<android.app.Fragment: java.lang.String getTag()> -> _SOURCE_
<android.location.Address: java.lang.String getPremises()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getManualNetworkSelectionPlmn()> -> _SOURCE_
<com.android.internal.app.IAppOpsService$Stub$Proxy: java.util.List getOpsForPackage(int,java.lang.String,int[])> -> _SOURCE_
<android.view.Window: android.transition.Transition getSharedElementEnterTransition()> -> _SOURCE_
<android.hardware.input.IInputManager$Stub$Proxy: android.hardware.input.KeyboardLayout getKeyboardLayout(java.lang.String)> -> _SOURCE_
<android.telephony.TelephonyDisplayInfo: int getNetworkType()> -> _SOURCE_
<android.location.ILocationManager$Stub$Proxy: java.lang.String getBestProvider(android.location.Criteria,boolean)> -> _SOURCE_
<android.app.AppOpsManager$OpEntry: long getRejectTime()> -> _SOURCE_
<android.content.pm.ChangedPackages: java.util.List getPackageNames()> -> _SOURCE_
<android.webkit.WebView$WebViewTransport: android.webkit.WebView getWebView()> -> _SOURCE_
<android.hardware.location.NanoApp: java.lang.String getName()> -> _SOURCE_
<android.hardware.display.DisplayManagerGlobal: android.hardware.display.BrightnessConfiguration getBrightnessConfigurationForUser(int)> -> _SOURCE_
<android.telecom.Logging.Session: android.telecom.Logging.Session$Info getInfo()> -> _SOURCE_
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: android.bluetooth.BluetoothDevice getActiveDevice()> -> _SOURCE_
<android.content.pm.ApplicationInfo: java.lang.String getCodePath()> -> _SOURCE_
<android.app.SystemServiceRegistry: java.lang.String getSystemServiceName(java.lang.Class)> -> _SOURCE_
<android.net.wifi.nl80211.PnoNetwork: int[] getFrequenciesMhz()> -> _SOURCE_
<com.android.internal.telephony.ISms$Stub$Proxy: java.lang.String createAppSpecificSmsTokenWithPackageInfo(int,java.lang.String,java.lang.String,android.app.PendingIntent)> -> _SOURCE_
<android.app.ActivityTransitionCoordinator: android.view.Window getWindow()> -> _SOURCE_
<android.media.midi.IMidiDeviceListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.media.MediaDescription: android.net.Uri getMediaUri()> -> _SOURCE_
<android.renderscript.RenderScript: java.lang.String getCachePath()> -> _SOURCE_
<android.os.connectivity.GpsBatteryStats: long getEnergyConsumedMaMs()> -> _SOURCE_
<android.graphics.Paint: float getTextScaleX()> -> _SOURCE_
<android.os.UserManager: boolean isUserUnlocked(int)> -> _SOURCE_
<com.android.ims.internal.IImsCallSession$Stub$Proxy: android.telephony.ims.ImsCallProfile getCallProfile()> -> _SOURCE_
<android.media.session.IActiveSessionsListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.printservice.recommendation.RecommendationInfo: java.lang.CharSequence getPackageName()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getSimOperatorNumeric()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo$CollectionInfo getCollectionInfo()> -> _SOURCE_
<com.android.internal.app.ToolbarActionBar: float getElevation()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: boolean canConnectTo5GInDsdsMode()> -> _SOURCE_
<com.android.internal.view.menu.ActionMenuItem: android.content.Intent getIntent()> -> _SOURCE_
<android.content.LocusId: java.lang.String getId()> -> _SOURCE_
<android.content.Intent: android.content.ClipData getClipData()> -> _SOURCE_
<android.telephony.TelephonyManager: android.telephony.ServiceState getServiceState()> -> _SOURCE_
<com.android.internal.os.BatteryStatsHelper: double getComputedPower()> -> _SOURCE_
<android.hardware.display.IColorDisplayManager$Default: android.hardware.display.Time getNightDisplayCustomEndTime()> -> _SOURCE_
<android.security.keystore.recovery.KeyChainSnapshot: java.util.List getWrappedApplicationKeys()> -> _SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkInfo getActiveNetworkInfoForUid(int,boolean)> -> _SOURCE_
<com.android.internal.view.menu.ListMenuPresenter: android.widget.ListAdapter getAdapter()> -> _SOURCE_
<android.content.Context: android.os.UserHandle getUser()> -> _SOURCE_
<android.bluetooth.IBluetoothCallback$Stub: android.bluetooth.IBluetoothCallback getDefaultImpl()> -> _SOURCE_
<android.content.Intent: java.lang.String getPackage()> -> _SOURCE_
<android.net.Uri$AbstractHierarchicalUri: java.lang.String getEncodedUserInfo()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.lang.CharSequence getBackgroundPermissionOptionLabel()> -> _SOURCE_
<android.content.ContentProvider: android.net.Uri getUriWithoutUserId(android.net.Uri)> -> _SOURCE_
<android.view.IDisplayWindowRotationCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.os.ServiceManager: java.lang.String[] listServices()> -> _SOURCE_
<android.drm.DrmManagerClient: android.content.ContentValues getConstraints(android.net.Uri,int)> -> _SOURCE_
<android.telephony.ims.ImsMmTelManager: boolean isCapable(int,int)> -> _SOURCE_
<android.content.pm.StringParceledListSlice: java.util.List getList()> -> _SOURCE_
<android.location.GnssAntennaInfo$SphericalCorrections: double getDeltaTheta()> -> _SOURCE_
<android.service.oemlock.OemLockManager: boolean isDeviceOemUnlocked()> -> _SOURCE_
<android.graphics.Color: float[] getComponents()> -> _SOURCE_
<android.content.om.IOverlayManager$Stub: android.content.om.IOverlayManager getDefaultImpl()> -> _SOURCE_
<com.android.internal.os.BatteryStatsHelper: com.android.internal.os.PowerProfile getPowerProfile()> -> _SOURCE_
<android.os.IUserManager$Stub$Proxy: long getUserCreationTime(int)> -> _SOURCE_
<android.os._$$Lambda$ThreadLocalWorkSource$IP9vRFCDG5YwbWbXAEGHH52B9IE: java.lang.Object get()> -> _SOURCE_
<android.animation.KeyframeSet: java.lang.Class getType()> -> _SOURCE_
<android.telephony.SubscriptionInfo: java.lang.String toString()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.bluetooth.BluetoothSocket: java.io.OutputStream getOutputStream()> -> _SOURCE_
<android.view.inputmethod.InlineSuggestionsRequest: java.util.List getInlinePresentationSpecs()> -> _SOURCE_
<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.String[] getSupportedEcdsaSignatureDigests()> -> _SOURCE_
<android.graphics.HardwareRendererObserver: long getNativeInstance()> -> _SOURCE_
<android.os.PowerWhitelistManager: boolean isWhitelisted(java.lang.String,boolean)> -> _SOURCE_
<android.app.Dialog: android.view.SearchEvent getSearchEvent()> -> _SOURCE_
<android.view.KeyEvent: int getModifierMetaStateMask()> -> _SOURCE_
<android.media.RoutingSessionInfo: java.lang.CharSequence getName()> -> _SOURCE_
<android.text.method.ReplacementTransformationMethod$SpannedReplacementCharSequence: java.lang.Object[] getSpans(int,int,java.lang.Class)> -> _SOURCE_
<android.content.pm.ShortcutInfo: android.content.ComponentName getActivity()> -> _SOURCE_
<com.android.internal.util.StateMachine: android.os.Handler getHandler()> -> _SOURCE_
<android.location.GpsMeasurement: double getPseudorangeUncertaintyInMeters()> -> _SOURCE_
<android.media.IAudioService$Default: java.util.List getActiveRecordingConfigurations()> -> _SOURCE_
<android.media.WebVttRenderingWidget$RegionLayout: android.media.TextTrackRegion getRegion()> -> _SOURCE_
<android.hardware.camera2.impl.PhysicalCaptureResultInfo: android.hardware.camera2.impl.CameraMetadataNative getCameraMetadata()> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: java.lang.String getOverlayCategory()> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec: java.math.BigInteger getCertificateSerialNumber()> -> _SOURCE_
<android.net.ConnectivityManager: android.net.Network getProcessDefaultNetwork()> -> _SOURCE_
<android.app.contentsuggestions.IContentSuggestionsManager$Stub: android.app.contentsuggestions.IContentSuggestionsManager getDefaultImpl()> -> _SOURCE_
<android.net.IpSecConfig: android.net.IpSecAlgorithm getAuthenticatedEncryption()> -> _SOURCE_
<android.os.incremental.IIncrementalService$Stub: android.os.incremental.IIncrementalService getDefaultImpl()> -> _SOURCE_
<android.app.DisabledWallpaperManager: android.graphics.Bitmap getBitmap()> -> _SOURCE_
<android.content.om.IOverlayManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.media.AudioPlaybackConfiguration: android.media.AudioAttributes getAudioAttributes()> -> _SOURCE_
<android.os.storage.StorageManager: boolean isEncrypted(java.io.File)> -> _SOURCE_
<android.app.JobSchedulerImpl: java.util.List getAllJobSnapshots()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String iccTransmitApduLogicalChannelBySlot(int,int,int,int,int,int,int,java.lang.String)> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: java.lang.String[] getSplitCodePaths()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isUninstallInQueue(java.lang.String)> -> _SOURCE_
<android.security.keystore.IKeystoreOperationResultCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.backup.BackupManager: java.lang.String getDestinationString(java.lang.String)> -> _SOURCE_
<android.telephony.CellSignalStrengthNr: int getCsiRsrq()> -> _SOURCE_
<android.media.midi.IMidiManager$Stub$Proxy: android.media.midi.MidiDeviceInfo getServiceDeviceInfo(java.lang.String,java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.SmsApplication$SmsApplicationData: java.lang.String access$500(com.android.internal.telephony.SmsApplication$SmsApplicationData)> -> _SOURCE_
<com.android.internal.telephony.ISub$Stub$Proxy: int getPreferredDataSubscriptionId()> -> _SOURCE_
<android.accessibilityservice.GestureDescription$StrokeDescription: long getDuration()> -> _SOURCE_
<com.android.internal.telephony.euicc.ICancelSessionCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telephony.PhoneNumberUtils: boolean isWellFormedSmsAddress(java.lang.String)> -> _SOURCE_
<android.media.midi.IMidiManager$Stub$Proxy: android.media.midi.MidiDeviceInfo[] getDevices()> -> _SOURCE_
<android.webkit.WebChromeClient: android.view.View getVideoLoadingProgressView()> -> _SOURCE_
<android.media.AudioPlaybackCaptureConfiguration: int[] getExcludeUsages()> -> _SOURCE_
<android.net.Uri$HierarchicalUri: java.lang.String getAuthority()> -> _SOURCE_
<android.app.Notification$BubbleMetadata: android.app.PendingIntent getDeleteIntent()> -> _SOURCE_
<android.view.textservice.SpellCheckerInfo: android.content.pm.ServiceInfo getServiceInfo()> -> _SOURCE_
<android.bluetooth.BluetoothA2dpSink: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
<android.telephony.CellIdentityTdscdma: android.telephony.CellIdentityTdscdma copy()> -> _SOURCE_
<android.hardware.hdmi.IHdmiVendorCommandListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.os.IMessenger$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.CarrierRestrictionRules: java.util.List access$200(android.telephony.CarrierRestrictionRules)> -> _SOURCE_
<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()> -> _SOURCE_
<android.os.VibrationEffect: android.os.VibrationEffect get(int,boolean)> -> _SOURCE_
<android.telephony.TelephonyRegistryManager: void addOnOpportunisticSubscriptionsChangedListener(android.telephony.SubscriptionManager$OnOpportunisticSubscriptionsChangedListener,java.util.concurrent.Executor)> -> _SOURCE_
<android.os.SimpleClock: java.time.ZoneId getZone()> -> _SOURCE_
<android.telephony.SubscriptionPlan: android.util.RecurrenceRule getCycleRule()> -> _SOURCE_
<android.bluetooth.IBluetooth$Stub$Proxy: java.lang.String getRemoteName(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<android.app.ApplicationPackageManager: java.lang.String getSharedSystemSharedLibraryPackageName()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getText()> -> _SOURCE_
<android.service.notification.Adjustment: java.lang.CharSequence getExplanation()> -> _SOURCE_
<android.widget.ToastPresenter: android.view.WindowManager$LayoutParams getLayoutParams()> -> _SOURCE_
<android.media.MediaPlayer$TrackInfo: android.media.MediaFormat getFormat()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getNetworkSelectionMode(int)> -> _SOURCE_
<android.content.pm.PackageManager: java.lang.String getContentCaptureServicePackageName()> -> _SOURCE_
<android.hardware.radio.RadioManager$ProgramInfo: java.util.Collection getRelatedContent()> -> _SOURCE_
<com.android.internal.telephony.GsmAlphabet: int[] getEnabledSingleShiftTables()> -> _SOURCE_
<android.hardware.radio.TunerAdapter: boolean isAnalogForced()> -> _SOURCE_
<android.hardware.cas.V1_1.ICas$Stub: java.util.ArrayList getHashChain()> -> _SOURCE_
<android.view.InputChannel: android.os.IBinder getToken()> -> _SOURCE_
<android.net.wifi.nl80211.IWificond$Stub$Proxy: android.net.wifi.nl80211.DeviceWiphyCapabilities getDeviceWiphyCapabilities(java.lang.String)> -> _SOURCE_
<android.media.IRecordingConfigDispatcher$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.net.LocalSocket: android.net.LocalSocketAddress getLocalSocketAddress()> -> _SOURCE_
<android.graphics.NinePatch: android.graphics.Bitmap getBitmap()> -> _SOURCE_
<android.net.lowpan.LowpanProperties$LowpanStandardProperty: java.lang.String getName()> -> _SOURCE_
<android.hardware.radio.Announcement: android.hardware.radio.ProgramSelector getSelector()> -> _SOURCE_
<android.telephony.PhoneNumberUtils: java.lang.String normalizeNumber(java.lang.String)> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: android.os.IBinder getLeashedParent()> -> _SOURCE_
<android.telephony.mbms.ServiceInfo: java.lang.String getServiceClassName()> -> _SOURCE_
<com.android.internal.telephony.ISub$Default: int getActiveSubInfoCountMax()> -> _SOURCE_
<android.service.dreams.IDreamManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.os.INetworkManagementService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.SmsMessage: int getProtocolIdentifier()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: java.lang.String getManualNetworkSelectionPlmn(int)> -> _SOURCE_
<android.os.IUserManager$Stub$Proxy: android.os.PersistableBundle getSeedAccountOptions()> -> _SOURCE_
<android.graphics.ColorSpace: android.graphics.ColorSpace get(int)> -> _SOURCE_
<android.widget.inline.InlinePresentationSpec: android.util.Size getMinSize()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.lang.String getSimLocaleForSubscriber(int)> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isPotentialEmergencyNumber(java.lang.String)> -> _SOURCE_
<android.net.ConnectivityManager: int getConnectionOwnerUid(int,java.net.InetSocketAddress,java.net.InetSocketAddress)> -> _SOURCE_
<android.net.TrafficStats: long getUidTcpRxSegments(int)> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: long[] getUsesStaticLibrariesVersions()> -> _SOURCE_
<android.app.assist.AssistStructure$ViewNode: java.lang.String getClassName()> -> _SOURCE_
<android.telephony.SubscriptionManager: int lambda$addSubscriptionsIntoGroup$8(java.lang.Integer)> -> _SOURCE_
<android.content.pm.PackageManager: android.content.pm.ModuleInfo getModuleInfo(java.lang.String,int)> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: boolean isDiscovering()> -> _SOURCE_
<android.app.AutomaticZenRule: android.net.Uri getConditionId()> -> _SOURCE_
<android.util.proto.ProtoStream: java.lang.String getFieldIdString(long)> -> _SOURCE_
<android.os.BatteryManager: boolean isCharging()> -> _SOURCE_
<android.graphics.ParcelableColorSpace: boolean isWideGamut()> -> _SOURCE_
<android.bluetooth.IBluetooth$Stub$Proxy: android.bluetooth.BluetoothClass getBluetoothClass()> -> _SOURCE_
<android.app.ActivityManager: boolean isActivityStartAllowedOnDisplay(android.content.Context,int,android.content.Intent)> -> _SOURCE_
<android.telephony.PinResult: int getType()> -> _SOURCE_
<android.widget.AbsSpinner: android.widget.Adapter getAdapter()> -> _SOURCE_
<android.app.job.JobParameters: java.lang.String getDebugStopReason()> -> _SOURCE_
<android.bluetooth.BluetoothMapClient: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
<android.view.inputmethod.CursorAnchorInfo: float getInsertionMarkerTop()> -> _SOURCE_
<android.telephony.ims.aidl.IImsRcsFeature$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.os.IResultReceiver$Stub: com.android.internal.os.IResultReceiver getDefaultImpl()> -> _SOURCE_
<android.os.UserManager: java.util.List getUserRestrictionSources(java.lang.String,android.os.UserHandle)> -> _SOURCE_
<android.view.textclassifier.TextClassificationConstants: java.lang.String getTextClassifierServicePackageOverride()> -> _SOURCE_
<android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri,android.media.VolumeShaper$Configuration)> -> _SOURCE_
<android.widget.ExpandableListConnector: android.widget.Filter getFilter()> -> _SOURCE_
<android.telephony.PhoneNumberUtils: java.lang.String formatNumber(java.lang.String)> -> _SOURCE_
<android.net.NetworkPolicy: android.net.NetworkPolicy getNetworkPolicyFromBackup(java.io.DataInputStream)> -> _SOURCE_
<android.content.ContentProvider: java.lang.String getWritePermission()> -> _SOURCE_
<android.bluetooth.IBluetoothHearingAid$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.telephony.euicc.IPrepareDownloadCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.ActivityManager$TaskSnapshot: android.graphics.Rect getContentInsets()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: android.telephony.ims.aidl.IImsRcsFeature getRcsFeatureAndListen(int,com.android.ims.internal.IImsServiceFeatureCallback)> -> _SOURCE_
<android.app.Fragment: android.os.Bundle getArguments()> -> _SOURCE_
<android.service.textclassifier.ITextClassifierCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.webkit.TracingController: android.webkit.TracingController getInstance()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getCarrierPrivilegeStatus(int)> -> _SOURCE_
<android.telephony.ims.aidl.IRcsUceControllerCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.widget.TextView$Marquee: float getMaxFadeScroll()> -> _SOURCE_
<android.hardware.display.DisplayManager: android.view.Display getDisplay(int)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<com.android.internal.inputmethod.IInputMethodPrivilegedOperations$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.media.tv.TvTrackInfo: java.lang.String getId()> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getNaiForSubscriber(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.os.IUserRestrictionsListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder createNonrecurring(java.time.ZonedDateTime,java.time.ZonedDateTime)> -> _SOURCE_
<android.telephony.CellConfigLte: java.lang.String toString()> -> _SOURCE_
<android.security.IKeyChainAliasCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.accounts.AccountManager$Future2Task: java.lang.Object getResult()> -> _SOURCE_
<android.telephony.CallAttributes: int describeContents()> -> _SOURCE_
<android.bluetooth.le.IScannerCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.IAlarmManager$Stub$Proxy: long getNextWakeFromIdleTime()> -> _SOURCE_
<android.telephony.PreciseCallState: int hashCode()> -> _SOURCE_
<android.view.contentcapture.ContentCaptureSession: android.view.contentcapture.ContentCaptureSessionId getContentCaptureSessionId()> -> _SOURCE_
<android.telephony.ServiceState: java.lang.String getOperatorAlpha()> -> _SOURCE_
<android.media.soundtrigger.SoundTriggerManager: int getDetectionServiceOperationsTimeout()> -> _SOURCE_
<android.location.Address: java.lang.String getLocality()> -> _SOURCE_
<android.media.Image: long getNativeContext()> -> _SOURCE_
<android.window.ITaskOrganizer$Stub: android.window.ITaskOrganizer getDefaultImpl()> -> _SOURCE_
<android.app.Notification: long getTimeoutAfter()> -> _SOURCE_
<android.graphics.drawable.ColorStateListDrawable: boolean isStateful()> -> _SOURCE_
<android.hardware.hdmi.IHdmiSystemAudioModeChangeListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.CellIdentityCdma$1: android.telephony.CellIdentityCdma createFromParcel(android.os.Parcel)> -> _SOURCE_
<android.telephony.TelephonyManager: android.telephony.IccOpenLogicalChannelResponse iccOpenLogicalChannel(int,java.lang.String,int)> -> _SOURCE_
<android.hardware.ICameraService$Stub$Proxy: android.hardware.camera2.impl.CameraMetadataNative getCameraCharacteristics(java.lang.String)> -> _SOURCE_
<android.os.ISystemConfig$Default: java.util.List getDisabledUntilUsedPreinstalledCarrierApps()> -> _SOURCE_
<android.view.Display: java.lang.String getUniqueId()> -> _SOURCE_
<android.widget.RemoteViews$RemoteViewsContextWrapper: android.content.res.Resources$Theme getTheme()> -> _SOURCE_
<android.print.IPrintManager$Stub$Proxy: java.util.List getPrintServiceRecommendations(int)> -> _SOURCE_
<com.android.internal.telephony.ISub$Stub$Proxy: int getAllSubInfoCount(java.lang.String,java.lang.String)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: java.util.Map getScreenOffRpmStats()> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: java.lang.String[] getSplitNames()> -> _SOURCE_
<android.telecom.TelecomManager: java.lang.String getDefaultDialerPackage()> -> _SOURCE_
<android.app.slice.SliceManager: java.util.List getPinnedSlices()> -> _SOURCE_
<android.telephony.VisualVoicemailSms$Builder: java.lang.String access$300(android.telephony.VisualVoicemailSms$Builder)> -> _SOURCE_
<android.view.textclassifier.TextClassifierEvent: java.lang.String getResultId()> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: java.lang.String getOverlayTargetName()> -> _SOURCE_
<android.telephony.TelephonyManager: void silenceRinger()> -> _SOURCE_
<android.view.ViewRootImpl: android.view.accessibility.IAccessibilityEmbeddedConnection getAccessibilityEmbeddedConnection()> -> _SOURCE_
<android.location.GpsNavigationMessage: byte getType()> -> _SOURCE_
<android.net.LinkProperties: java.util.List getAllRoutes()> -> _SOURCE_
<android.view.IWindowManager$Default: android.graphics.Region getCurrentImeTouchRegion()> -> _SOURCE_
<android.app.ISearchManager$Default: java.util.List getSearchablesInGlobalSearch()> -> _SOURCE_
<android.app.IActivityTaskManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.media.session.MediaSessionLegacyHelper: boolean isGlobalPriorityActive()> -> _SOURCE_
<com.android.internal.telephony.SmsAddress: boolean couldBeEmailGateway()> -> _SOURCE_
<android.net.TrafficStats: long getUidUdpRxPackets(int)> -> _SOURCE_
<android.bluetooth.IBluetoothMap$Default: android.bluetooth.BluetoothDevice getClient()> -> _SOURCE_
<android.view.MotionEvent: float getRawX()> -> _SOURCE_
<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo getPrimaryUser()> -> _SOURCE_
<android.util.apk.WrappedX509Certificate: java.security.Principal getIssuerDN()> -> _SOURCE_
<android.view.textclassifier.TextLinks$Request: java.lang.String getCallingPackageName()> -> _SOURCE_
<android.content.pm.ModuleInfo: java.lang.String getApexModuleName()> -> _SOURCE_
<android.telecom.TelecomManager: java.util.List getPhoneAccountsForPackage()> -> _SOURCE_
<android.content.ContextWrapper: java.util.concurrent.Executor getMainExecutor()> -> _SOURCE_
<android.os.IUserManager$Stub: android.os.IUserManager getDefaultImpl()> -> _SOURCE_
<android.view.InsetsAnimationControlImpl: android.graphics.Insets getHiddenStateInsets()> -> _SOURCE_
<android.util.apk.WrappedX509Certificate: java.math.BigInteger getSerialNumber()> -> _SOURCE_
<android.content.res.Resources: android.util.LongSparseArray getPreloadedDrawables()> -> _SOURCE_
<android.os.NativeHandle: java.io.FileDescriptor[] getFileDescriptors()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: android.content.ComponentName getDeviceOwnerComponentOnCallingUser()> -> _SOURCE_
<android.content.res.ColorStateList: int[] getColors()> -> _SOURCE_
<android.provider.Settings$System: float getFloat(android.content.ContentResolver,java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.SmsHeader$MiscElt: int hashCode()> -> _SOURCE_
<android.security.keystore.AndroidKeyStoreKey: byte[] getEncoded()> -> _SOURCE_
<android.view.textclassifier.SelectionEvent: long getDurationSinceSessionStart()> -> _SOURCE_
<android.app.ContextImpl: android.content.res.AssetManager getAssets()> -> _SOURCE_
<android.system.suspend.ISuspendCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.view.autofill.AutofillPopupWindow: float getElevation()> -> _SOURCE_
<android.permission.IPermissionManager$Stub$Proxy: java.util.List getAutoRevokeExemptionRequestedPackages(int)> -> _SOURCE_
<android.database.sqlite.SQLiteProgram: java.lang.String getSql()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: boolean isDataEnabled(int)> -> _SOURCE_
<android.app.servertransaction.ClientTransactionItem: int getPostExecutionState()> -> _SOURCE_
<android.media.IAudioService$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Default: java.lang.String getIsimImpi(int)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: int[] getSlotsMapping()> -> _SOURCE_
<android.view.ViewConfiguration: int getScrollDefaultDelay()> -> _SOURCE_
<android.os.IProgressListener$Stub: android.os.IProgressListener getDefaultImpl()> -> _SOURCE_
<android.os.BasicShellCommandHandler: java.io.PrintWriter getErrPrintWriter()> -> _SOURCE_
<com.android.internal.view.menu.MenuItemImpl: java.lang.CharSequence getContentDescription()> -> _SOURCE_
<com.android.internal.telephony.ITelephonyRegistry$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.telecom.ITelecomService$Default: java.util.List getSelfManagedPhoneAccounts(java.lang.String,java.lang.String)> -> _SOURCE_
<android.database.CursorToBulkCursorAdaptor: android.os.Bundle getExtras()> -> _SOURCE_
<android.telephony.NetworkScanRequest: java.util.ArrayList getPlmns()> -> _SOURCE_
<android.app.job.JobInfo: long getMinLatencyMillis()> -> _SOURCE_
<android.service.oemlock.OemLockManager: boolean isOemUnlockAllowedByUser()> -> _SOURCE_
<android.media.audiopolicy.AudioPolicyConfig: java.util.ArrayList getMixes()> -> _SOURCE_
<android.telephony.CellInfoGsm$1: android.telephony.CellInfoGsm createFromParcel(android.os.Parcel)> -> _SOURCE_
<com.android.internal.telephony.ISub$Default: boolean isSubscriptionEnabled(int)> -> _SOURCE_
<android.app.ApplicationPackageManager: android.content.pm.PackageInfo getPackageInfoAsUser(java.lang.String,int,int)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: android.telephony.ims.aidl.IImsRegistration getImsRegistration(int,int)> -> _SOURCE_
<android.app.job.JobInfo: long getMinFlexMillis()> -> _SOURCE_
<android.os.storage.StorageManager: java.util.List getRecentStorageVolumes()> -> _SOURCE_
<com.android.internal.telephony.euicc.IGetEuiccInfo1Callback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkInfo getNetworkInfoForUid(android.net.Network,int,boolean)> -> _SOURCE_
<android.print.IPrintManager$Stub$Proxy: android.graphics.drawable.Icon getCustomPrinterIcon(android.print.PrinterId,int)> -> _SOURCE_
<android.graphics.drawable.DrawableContainer: android.graphics.drawable.Drawable$ConstantState getConstantState()> -> _SOURCE_
<android.content.ContextWrapper: android.view.DisplayAdjustments getDisplayAdjustments(int)> -> _SOURCE_
<com.android.internal.util.MemInfoReader: long getCachedSizeKb()> -> _SOURCE_
<android.app.NotificationManager: int getRuleInstanceCount(android.content.ComponentName)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: java.lang.String getEndPlatformVersion()> -> _SOURCE_
<android.net.lowpan.LowpanInterface: java.lang.String getName()> -> _SOURCE_
<android.view.WindowManagerGlobal: java.util.ArrayList getWindowViews()> -> _SOURCE_
<android.hardware.display.VirtualDisplayConfig: java.lang.String getName()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: int getDataActivity()> -> _SOURCE_
<android.database.sqlite.SQLiteCursor: android.database.sqlite.SQLiteDatabase getDatabase()> -> _SOURCE_
<android.media.UnstyledTextExtractor: android.media.TextTrackCueSpan[][] getText()> -> _SOURCE_
<android.location.Location: float getVerticalAccuracyMeters()> -> _SOURCE_
<android.telephony.NetworkRegistrationInfo: int getTransportType()> -> _SOURCE_
<android.service.notification.StatusBarNotification: java.lang.String getKey()> -> _SOURCE_
<android.widget.CursorAdapter: android.content.res.Resources$Theme getDropDownViewTheme()> -> _SOURCE_
<android.provider.Settings$System: long getLong(android.content.ContentResolver,java.lang.String,long)> -> _SOURCE_
<android.bluetooth.BluetoothHidDeviceAppSdpSettings: java.lang.String getName()> -> _SOURCE_
<android.app.contentsuggestions.ClassificationsRequest: java.util.List getSelections()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.lang.String getGlobalPrivateDnsHost(android.content.ComponentName)> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: boolean isInMemoryDatabase()> -> _SOURCE_
<android.nfc.NdefRecord: byte[] getType()> -> _SOURCE_
<android.net.IConnectivityManager$Default: java.lang.String[] getTetheredIfaces()> -> _SOURCE_
<android.view.Display: float getRefreshRate()> -> _SOURCE_
<com.android.internal.telephony.gsm.SmsMessage$PduParser: java.lang.String getSCAddress()> -> _SOURCE_
<com.android.internal.view.IDragAndDropPermissions$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.inputmethodservice._$$Lambda$InputMethodService$TZAfta6HEKUpxapSrZpy7Hhlwrw: java.lang.Object get()> -> _SOURCE_
<android.content.Intent: java.lang.String getLaunchToken()> -> _SOURCE_
<android.net.MacAddress: java.net.Inet6Address getLinkLocalIpv6FromEui48Mac()> -> _SOURCE_
<com.android.ims.internal.IImsCallSession$Default: java.lang.String getCallId()> -> _SOURCE_
<android.media.AudioManager: boolean isMusicActiveRemotely()> -> _SOURCE_
<android.media.midi.IMidiDeviceServer$Stub$Proxy: android.media.midi.MidiDeviceInfo getDeviceInfo()> -> _SOURCE_
<android.hardware.face.FaceManager: int getMappedAcquiredInfo(int,int)> -> _SOURCE_
<android.media.IMediaHTTPConnection$Stub$Proxy: long getSize()> -> _SOURCE_
<android.animation.ValueAnimator: long getTotalDuration()> -> _SOURCE_
<android.location.Address: java.util.Locale getLocale()> -> _SOURCE_
<android.view.WindowInsetsAnimation: long getDurationMillis()> -> _SOURCE_
<android.view.textclassifier.TextSelection$Request: java.lang.String getCallingPackageName()> -> _SOURCE_
<android.content.pm.IPackageInstallerSession$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.bluetooth.le.ScanSettings: long getReportDelayMillis()> -> _SOURCE_
<android.hardware.display.IDisplayManager$Stub$Proxy: android.content.pm.ParceledListSlice getBrightnessEvents(java.lang.String)> -> _SOURCE_
<android.hardware.camera2.utils.SubmitInfo: long getLastFrameNumber()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.lang.String getDefaultBrowserPackageNameAsUser(int)> -> _SOURCE_
<android.telephony.SubscriptionManager: int getDefaultVoiceSubscriptionId()> -> _SOURCE_
<android.util.apk.WrappedX509Certificate: java.security.PublicKey getPublicKey()> -> _SOURCE_
<com.android.internal.inputmethod.CancellationGroup$Completable$Values: java.lang.Object getValue()> -> _SOURCE_
<android.content.pm.IPackageDataObserver$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.Notification$WearableExtender: boolean getContentIntentAvailableOffline()> -> _SOURCE_
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice getInstalledApplications(int,int)> -> _SOURCE_
<android.os.storage.StorageManager: android.os.storage.StorageVolume[] getVolumeList(int,int)> -> _SOURCE_
<android.media.session.PlaybackState$CustomAction: java.lang.String getAction()> -> _SOURCE_
<android.nfc.Tag: int[] getTechCodeList()> -> _SOURCE_
<android.graphics.Paint: float getStrikeThruPosition()> -> _SOURCE_
<android.bluetooth.IBluetoothA2dp$Default: android.bluetooth.BluetoothDevice getActiveDevice()> -> _SOURCE_
<android.telephony.SmsCbMessage: int getMessagePriority()> -> _SOURCE_
<com.android.internal.telephony.SmsMessageBase: java.lang.String getDisplayOriginatingAddress()> -> _SOURCE_
<android.bluetooth.BluetoothMapClient: java.util.List getConnectedDevices()> -> _SOURCE_
<android.view.TextureLayer: long getDeferredLayerUpdater()> -> _SOURCE_
<android.security.keystore.recovery.WrappedApplicationKey: byte[] getMetadata()> -> _SOURCE_
<android.app.SearchManager: java.util.List getSearchablesInGlobalSearch()> -> _SOURCE_
<android.app.WallpaperManager: int getDesiredMinimumWidth()> -> _SOURCE_
<com.android.internal.util.MemInfoReader: long getTotalSize()> -> _SOURCE_
<android.os.IThermalService$Stub$Proxy: float getThermalHeadroom(int)> -> _SOURCE_
<com.android.internal.telephony.ISub$Default: boolean isActiveSubId(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.net.TrafficStats: long getUidTcpRxBytes(int)> -> _SOURCE_
<android.app.PackageDeleteObserver: android.content.pm.IPackageDeleteObserver2 getBinder()> -> _SOURCE_
<android.hardware.camera2.params.OutputConfiguration: android.view.Surface getSurface()> -> _SOURCE_
<android.text.FontConfig$Alias: java.lang.String getName()> -> _SOURCE_
<android.location.ILocationManager$Default: java.lang.String getExtraLocationControllerPackage()> -> _SOURCE_
<com.android.internal.util.MemInfoReader: long getKernelUsedSizeKb()> -> _SOURCE_
<android.graphics.animation.RenderNodeAnimator: android.animation.TimeInterpolator getInterpolator()> -> _SOURCE_
<android.telephony.TelephonyManager: void shutdownAllRadios()> -> _SOURCE_
<android.telephony.TelephonyManager: int getCdmaEriIconMode(int)> -> _SOURCE_
<android.telephony.PreciseDataConnectionState: android.net.LinkProperties getLinkProperties()> -> _SOURCE_
<android.telephony.data.ApnSetting: java.lang.String getOperatorNumeric()> -> _SOURCE_
<android.app.Notification$WearableExtender: boolean getHintAvoidBackgroundClipping()> -> _SOURCE_
<android.telephony.CellSignalStrengthLte: int getCqi()> -> _SOURCE_
<android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor getLifeMonitor()> -> _SOURCE_
<android.app.RemoteInputHistoryItem: java.lang.String getMimeType()> -> _SOURCE_
<android.telephony.CellIdentity: boolean isValidPlmn(java.lang.String)> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: long getSourceNodeId()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isTtyModeSupported()> -> _SOURCE_
<android.app.ApplicationPackageManager: android.content.pm.InstrumentationInfo getInstrumentationInfo(android.content.ComponentName,int)> -> _SOURCE_
<android.telephony.CellSignalStrength: int getAsuFromRscpDbm(int)> -> _SOURCE_
<android.app.LoaderManagerImpl: android.app.FragmentHostCallback getFragmentHostCallback()> -> _SOURCE_
<android.net.INetworkPolicyManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.hardware.ISensorPrivacyManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.net.LinkProperties: java.util.List getPcscfServers()> -> _SOURCE_
<android.bluetooth.le.AdvertiseData: boolean getIncludeTxPowerLevel()> -> _SOURCE_
<android.media.MediaDrm: java.util.List getSupportedCryptoSchemes()> -> _SOURCE_
<android.util.EventLog$Event: java.lang.Object getData()> -> _SOURCE_
<android.os.IIncidentManager$Stub$Proxy: android.os.IncidentManager$IncidentReport getIncidentReport(java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.content.pm.ShortcutInfo: java.lang.CharSequence getLabel()> -> _SOURCE_
<android.print.PrintAttributes: android.print.PrintAttributes$MediaSize getMediaSize()> -> _SOURCE_
<android.graphics.drawable.VectorDrawable$VGroup: float getScaleX()> -> _SOURCE_
<android.window.WindowContainerTransaction: java.util.List getHierarchyOps()> -> _SOURCE_
<android.net.lowpan.LowpanInterface: android.net.lowpan.LowpanCredential getLowpanCredential()> -> _SOURCE_
<android.telephony.CellIdentityWcdma: android.telephony.CellIdentity sanitizeLocationInfo()> -> _SOURCE_
<android.service.notification.NotificationListenerService$Ranking: java.util.List getSmartActions()> -> _SOURCE_
<android.animation.Animator: long getTotalDuration()> -> _SOURCE_
<android.app.Instrumentation$ActivityResult: android.content.Intent getResultData()> -> _SOURCE_
<android.app.IStopUserCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.telecom.ITelecomService$Stub$Proxy: java.util.List getPhoneAccountsForPackage(java.lang.String)> -> _SOURCE_
<android.hardware.camera2.params.MandatoryStreamCombination$MandatoryStreamInformation: java.util.List getAvailableSizes()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getHintText()> -> _SOURCE_
<android.view.inputmethod.InlineSuggestionsRequest: android.os.IBinder getHostInputToken()> -> _SOURCE_
<android.hardware.camera2.CameraCharacteristics: java.util.List getAvailablePhysicalCameraRequestKeys()> -> _SOURCE_
<android.telephony.SubscriptionManager: java.util.List getSubscriptionsInGroup(android.os.ParcelUuid)> -> _SOURCE_
<android.telecom.ParcelableCallAnalytics: java.util.List getVideoEvents()> -> _SOURCE_
<android.app.AppOpsManager: boolean isListeningForOpNoted()> -> _SOURCE_
<android.accounts.IAccountManager$Stub$Proxy: java.lang.String getPreviousName(android.accounts.Account)> -> _SOURCE_
<android.os.storage.StorageManager: android.os.storage.VolumeInfo getPrimaryPhysicalVolume()> -> _SOURCE_
<android.hardware.hdmi.IHdmiControlCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getVoiceMailAlphaTag()> -> _SOURCE_
<android.security.KeyStore: boolean isConfirmationPromptSupported()> -> _SOURCE_
<com.android.internal.telephony.OperatorInfo$State: com.android.internal.telephony.OperatorInfo$State[] values()> -> _SOURCE_
<android.bluetooth.IBluetoothHeadset$Default: android.bluetooth.BluetoothDevice getActiveDevice()> -> _SOURCE_
<android.print.PrintAttributes$Resolution: java.lang.String getId()> -> _SOURCE_
<android.os.BatterySaverPolicyConfig: boolean getEnableDataSaver()> -> _SOURCE_
<android.content.pm.ComponentInfo: android.content.pm.ApplicationInfo getApplicationInfo()> -> _SOURCE_
<android.content.pm.dex.IArtManager$Stub: android.content.pm.dex.IArtManager getDefaultImpl()> -> _SOURCE_
<android.telephony.SignalStrength: int getEvdoEcio()> -> _SOURCE_
<android.net.INetworkPolicyManager$Default: boolean getRestrictBackground()> -> _SOURCE_
<android.app.SharedPreferencesImpl: java.lang.String getString(java.lang.String,java.lang.String)> -> _SOURCE_
<android.telephony.CellIdentityTdscdma: android.telephony.CellIdentity sanitizeLocationInfo()> -> _SOURCE_
<com.android.internal.telephony.ISub$Stub$Proxy: int getDefaultVoiceSubId()> -> _SOURCE_
<android.app.ApplicationPackageManager: android.os.storage.VolumeInfo getPrimaryStorageCurrentVolume()> -> _SOURCE_
<android.media.IMediaHTTPConnection$Stub: android.media.IMediaHTTPConnection getDefaultImpl()> -> _SOURCE_
<com.android.internal.telephony.IMms$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.accessibilityservice.GestureDescription$StrokeDescription: android.graphics.Path getPath()> -> _SOURCE_
<android.content.integrity.AppIntegrityManager: java.lang.String getCurrentRuleSetProvider()> -> _SOURCE_
<android.view.IWallpaperVisibilityListener$Stub: android.view.IWallpaperVisibilityListener getDefaultImpl()> -> _SOURCE_
<android.security.keystore.ICredstoreTokenCallback$Stub: android.security.keystore.ICredstoreTokenCallback getDefaultImpl()> -> _SOURCE_
<com.android.internal.telephony.OperatorInfo: int describeContents()> -> _SOURCE_
<android.window.IWindowOrganizerController$Default: android.window.ITaskOrganizerController getTaskOrganizerController()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean isRttSupported(int)> -> _SOURCE_
<android.media.tv.TvContentRating: java.lang.String getRatingSystem()> -> _SOURCE_
<android.telecom.TelecomManager: java.util.List getPhoneAccountsSupportingScheme(java.lang.String)> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: int[] getSplitFlags()> -> _SOURCE_
<android.bluetooth.IBluetoothGatt$Stub: android.bluetooth.IBluetoothGatt getDefaultImpl()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.lang.String getAppPredictionServicePackageName()> -> _SOURCE_
<android.view.ViewRootImpl: android.view.InsetsController getInsetsController()> -> _SOURCE_
<android.content.res.XmlBlock$Parser: java.lang.String getNamespace()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$ControllerActivityCounterImpl: android.os.BatteryStats$LongCounter getRxTimeCounter()> -> _SOURCE_
<android.nfc.tech.BasicTagTechnology: android.nfc.Tag getTag()> -> _SOURCE_
<android.hardware.display.IVirtualDisplayCallback$Stub: android.hardware.display.IVirtualDisplayCallback getDefaultImpl()> -> _SOURCE_
<android.telephony.PhoneNumberUtils: java.lang.String toCallerIDMinMatch(java.lang.String)> -> _SOURCE_
<android.os.BatteryProperty: long getLong()> -> _SOURCE_
<android.app.IUidObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.os.UserManager: int getUserIconBadgeResId(int)> -> _SOURCE_
<android.os.StatsServiceManager: android.os.StatsServiceManager$ServiceRegisterer getStatsCompanionServiceRegisterer()> -> _SOURCE_
<android.hardware.usb.IUsbSerialReader$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.os.UserManager: int getUserSwitchability(android.os.UserHandle)> -> _SOURCE_
<android.webkit.CookieManager: boolean allowFileSchemeCookies()> -> _SOURCE_
<android.os.PowerManager: int getDefaultScreenBrightnessSetting()> -> _SOURCE_
<android.content.pm.IPackageManager$Default: android.content.pm.dex.IArtManager getArtManager()> -> _SOURCE_
<com.android.internal.telecom.ITelecomService$Stub$Proxy: android.telecom.PhoneAccountHandle getSimCallManager(int)> -> _SOURCE_
<android.bluetooth.le.ScanRecord: byte[] getBytes()> -> _SOURCE_
<android.telephony.SubscriptionPlan: long access$402(android.telephony.SubscriptionPlan,long)> -> _SOURCE_
<android.telephony.TelephonyManager: int getCallWaitingStatus()> -> _SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: android.net.ProxyInfo getGlobalProxy()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: long getCpuActiveTime()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.lang.String iccTransmitApduBasicChannelBySlot(int,java.lang.String,int,int,int,int,int,java.lang.String)> -> _SOURCE_
<android.telephony.CellSignalStrengthCdma: int getAsuLevel()> -> _SOURCE_
<android.telephony.CbGeoUtils$Circle: android.telephony.CbGeoUtils$LatLng getCenter()> -> _SOURCE_
<android.content.pm.IPackageManager$Stub$Proxy: android.os.Bundle getSuspendedPackageAppExtras(java.lang.String,int)> -> _SOURCE_
<android.hardware.camera2.params.ReprocessFormatsMap: int[] getInputs()> -> _SOURCE_
<android.bluetooth.BluetoothHeadset: boolean isAudioConnected(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<android.os.Environment: java.io.File getDataPreloadsMediaDirectory()> -> _SOURCE_
<android.content.pm.IPackageInstallerSession$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getActiveAdmins(int)> -> _SOURCE_
<android.hardware.camera2.legacy.ParameterUtils: java.util.List getAvailablePreviewZoomCropRectangles(android.hardware.Camera$Parameters,android.graphics.Rect,android.util.Size)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: android.app.admin.SystemUpdatePolicy getSystemUpdatePolicy()> -> _SOURCE_
<android.graphics.drawable.AnimatedVectorDrawable: android.graphics.Insets getOpticalInsets()> -> _SOURCE_
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: android.bluetooth.BluetoothDevice getActiveDevice()> -> _SOURCE_
<android.metrics.LogMaker: long getCounterBucket()> -> _SOURCE_
<android.graphics.RenderNode: float getAlpha()> -> _SOURCE_
<android.media.MediaDescription: java.lang.CharSequence getDescription()> -> _SOURCE_
<android.hardware.location.GeofenceHardwareRequest: double getRadius()> -> _SOURCE_
<android.app.blob.IBlobStoreSession$Default: long getSize()> -> _SOURCE_
<android.telephony.CallAttributes: android.telephony.PreciseCallState getPreciseCallState()> -> _SOURCE_
<android.graphics.drawable.DrawableContainer$DrawableContainerState: android.graphics.Rect getConstantPadding()> -> _SOURCE_
<android.content.pm.ILauncherApps$Stub$Proxy: android.content.pm.ParceledListSlice getLauncherActivities(java.lang.String,java.lang.String,android.os.UserHandle)> -> _SOURCE_
<android.telephony.TelephonyFrameworkInitializer: android.os.TelephonyServiceManager getTelephonyServiceManager()> -> _SOURCE_
<com.android.internal.util.MemInfoReader: long[] getRawInfo()> -> _SOURCE_
<android.content.pm.ShortcutInfo: java.lang.String getPackage()> -> _SOURCE_
<android.telephony.CellIdentityCdma: int getLongitude()> -> _SOURCE_
<android.media.MediaRoute2Info: java.lang.String getOriginalId()> -> _SOURCE_
<com.android.internal.telephony.SmsMessageBase: boolean isEmail()> -> _SOURCE_
<com.android.internal.os.ZygoteConnection: boolean isPreloadComplete()> -> _SOURCE_
<com.android.internal.telephony.euicc.IPrepareDownloadCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telephony.SubscriptionPlan: long getDataLimitBytes()> -> _SOURCE_
<android.hardware.location.IContextHubClient$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telephony.Rlog: java.lang.String pii(java.lang.String,java.lang.Object)> -> _SOURCE_
<android.media.projection.IMediaProjectionManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.os.storage.IStorageShutdownObserver$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telephony.SubscriptionInfo: int getIconTint()> -> _SOURCE_
<android.app.IAlarmListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.graphics.drawable.Icon: android.net.Uri getUri()> -> _SOURCE_
<android.media.tv.ITvInputManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.compat.IOverrideValidator$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.media.AudioFocusRequest: android.media.AudioManager$OnAudioFocusChangeListener getOnAudioFocusChangeListener()> -> _SOURCE_
<android.content.res.AssetFileDescriptor: long getDeclaredLength()> -> _SOURCE_
<android.app.contentsuggestions.IClassificationsCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.TelephonyManager: int getNetworkType(int)> -> _SOURCE_
<com.android.internal.view.InputConnectionWrapper: android.os.Handler getHandler()> -> _SOURCE_
<android.telephony.SmsMessage: boolean isMwiDontStore()> -> _SOURCE_
<android.app.IUriGrantsManager$Stub$Proxy: android.content.pm.ParceledListSlice getUriPermissions(java.lang.String,boolean,boolean)> -> _SOURCE_
<android.os.Environment: java.io.File getDataSystemDeDirectory()> -> _SOURCE_
<android.provider.Settings$Secure: float getFloat(android.content.ContentResolver,java.lang.String,float)> -> _SOURCE_
<android.media.session.IOnMediaKeyEventDispatchedListener$Stub: android.media.session.IOnMediaKeyEventDispatchedListener getDefaultImpl()> -> _SOURCE_
<android.app.DisabledWallpaperManager: int getWallpaperId(int)> -> _SOURCE_
<android.hardware.usb.UsbManager: android.os.ParcelFileDescriptor getControlFd(long)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean isRadioOnWithFeature(java.lang.String,java.lang.String)> -> _SOURCE_
<android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getNotificationChannels(java.lang.String,java.lang.String,int)> -> _SOURCE_
<android.hardware.camera2.params.SessionConfiguration: java.util.concurrent.Executor getExecutor()> -> _SOURCE_
<android.window.WindowContainerTransaction$Change: boolean getFocusable()> -> _SOURCE_
<android.app.usage.UsageEvents$Event: android.content.res.Configuration getConfiguration()> -> _SOURCE_
<android.os.ParcelFileDescriptor: long getStatSize()> -> _SOURCE_
<android.telephony.CarrierRestrictionRules: android.telephony.CarrierRestrictionRules$Builder newBuilder()> -> _SOURCE_
<android.view.accessibility.CaptioningManager: float getFontScale()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getTooltipText()> -> _SOURCE_
<android.media.session.MediaSession: android.media.session.MediaSession$Token getSessionToken()> -> _SOURCE_
<android.content.pm.UserInfo: android.os.UserHandle getUserHandle()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: java.util.Map getWakeupReasonStats()> -> _SOURCE_
<android.text.style.TextAppearanceSpan: java.lang.String getFontFeatureSettings()> -> _SOURCE_
<android.telephony.CallQuality: int getUplinkCallQualityLevel()> -> _SOURCE_
<android.content.res.Resources: android.content.res.Resources getSystem()> -> _SOURCE_
<android.app.NotificationChannelGroup: java.lang.CharSequence getName()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: void getImsMmTelRegistrationTransportType(int,com.android.internal.telephony.IIntegerConsumer)> -> _SOURCE_
<android.accessibilityservice.IAccessibilityServiceClient$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.lang.CharSequence getLongSupportMessage(android.content.ComponentName)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isActivePasswordSufficient()> -> _SOURCE_
<android.telephony.mbms.IDownloadStatusListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.os.storage.IStorageManager$Stub$Proxy: android.os.storage.DiskInfo[] getDisks()> -> _SOURCE_
<android.app.ActivityTransitionCoordinator: long getFadeDuration()> -> _SOURCE_
<android.content.BroadcastReceiver: android.content.BroadcastReceiver$PendingResult getPendingResult()> -> _SOURCE_
<android.content.res.AssetManager: int[] getStyleAttributes(int)> -> _SOURCE_
<android.bluetooth.le.ScanResult: android.bluetooth.BluetoothDevice getDevice()> -> _SOURCE_
<android.os.VibrationEffect: android.os.VibrationEffect get(android.net.Uri,android.content.Context)> -> _SOURCE_
<android.telephony.SubscriptionManager: boolean isUsableSubIdValue(int)> -> _SOURCE_
<android.telephony.CallQuality: int getCodecType()> -> _SOURCE_
<android.bluetooth.BluetoothActivityEnergyInfo: android.bluetooth.UidTraffic[] getUidTraffic()> -> _SOURCE_
<android.accessibilityservice.AccessibilityShortcutInfo: android.content.ComponentName getComponentName()> -> _SOURCE_
<com.android.internal.statusbar.IStatusBar$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.hardware.radio.RadioManager$ProgramInfo: android.hardware.radio.ProgramSelector getSelector()> -> _SOURCE_
<android.app.usage.IUsageStatsManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.view.ViewConfiguration: int getHoverTapSlop()> -> _SOURCE_
<android.telephony.CarrierRestrictionRules: java.lang.String toString()> -> _SOURCE_
<android.telephony.CallQuality: int getNumRtpPacketsNotReceived()> -> _SOURCE_
<android.webkit.Plugin: java.lang.String getFileName()> -> _SOURCE_
<android.renderscript.Sampler: android.renderscript.Sampler$Value getWrapT()> -> _SOURCE_
<android.bluetooth.IBluetoothSocketManager$Stub: android.bluetooth.IBluetoothSocketManager getDefaultImpl()> -> _SOURCE_
<android.media.AudioDeviceInfo: int[] getChannelCounts()> -> _SOURCE_
<android.view.WindowInsetsAnimation$Bounds: android.graphics.Insets getUpperBound()> -> _SOURCE_
<android.app.AlertDialog$Builder: android.content.Context getContext()> -> _SOURCE_
<android.os.UpdateEngine$AllocateSpaceResult: long getFreeSpaceRequired()> -> _SOURCE_
<android.util.AtomicFile: long getLastModifiedTime()> -> _SOURCE_
<android.content.res.AssetFileDescriptor: long getStartOffset()> -> _SOURCE_
<android.hardware.camera2.CaptureResult: android.hardware.camera2.impl.CameraMetadataNative getNativeCopy()> -> _SOURCE_
<com.android.internal.telephony.SmsHeader$SpecialSmsMsg: int hashCode()> -> _SOURCE_
<android.database.sqlite.SQLiteDebug: android.database.sqlite.SQLiteDebug$PagerStats getDatabaseInfo()> -> _SOURCE_
<android.hardware.Sensor: java.lang.String getStringType()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.telephony.ims.ImsSsInfo: java.lang.String getIcbNum()> -> _SOURCE_
<android.view.textclassifier.TextClassification$Request: java.time.ZonedDateTime getReferenceTime()> -> _SOURCE_
<android.telephony.UiccSlotInfo: java.lang.String getCardId()> -> _SOURCE_
<android.os.storage.StorageManager: android.util.Pair getPrimaryStoragePathAndSize()> -> _SOURCE_
<android.content.pm.PackageInstaller$SessionInfo: long getUpdatedMillis()> -> _SOURCE_
<android.animation.Keyframe$IntKeyframe: java.lang.Object getValue()> -> _SOURCE_
<android.location.Location: double getLongitude()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.app.prediction.AppTarget: java.lang.String getClassName()> -> _SOURCE_
<android.view.SurfaceView$RemoteAccessibilityEmbeddedConnection: android.os.IBinder getLeashToken()> -> _SOURCE_
<android.content.pm.PackageInstaller: java.util.List getAllSessions()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean getCameraDisabled(android.content.ComponentName,int)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.security.keystore.ICredstoreTokenCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.app.ToolbarActionBar: java.lang.CharSequence getSubtitle()> -> _SOURCE_
<android.telephony.CellIdentity: java.lang.String getMccString()> -> _SOURCE_
<android.os.BasicShellCommandHandler: java.io.PrintWriter getOutPrintWriter()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.lang.String getAlwaysOnVpnPackage()> -> _SOURCE_
<android.telephony.CellIdentityGsm: int hashCode()> -> _SOURCE_
<android.net.wifi.nl80211.IWificond$Default: int[] getAvailable2gChannels()> -> _SOURCE_
<android.app.FragmentHostCallback: android.app.LoaderManagerImpl getLoaderManagerImpl()> -> _SOURCE_
<android.telephony.ImsiEncryptionInfo: java.lang.String getMcc()> -> _SOURCE_
<android.content.pm.ICrossProfileApps$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.hardware.Camera$Parameters: int getMaxNumDetectedFaces()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.content.pm.dex.IArtManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.os.PowerManager: boolean isWakeLockLevelSupported(int)> -> _SOURCE_
<android.telephony.SmsManager: boolean isImsSmsSupported()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.lang.String getProfileOwnerNameAsUser(int)> -> _SOURCE_
<android.view.accessibility.AccessibilityRecord: java.util.List getText()> -> _SOURCE_
<android.nfc.cardemulation.NfcFCardEmulation: java.util.List getNfcFServices()> -> _SOURCE_
<android.app.job.IJobScheduler$Stub$Proxy: android.app.job.JobInfo getPendingJob(int)> -> _SOURCE_
<android.app.ActivityManager$TaskSnapshot: long getId()> -> _SOURCE_
<android.hardware.cas.V1_1.IMediaCasService$Proxy: android.internal.hidl.base.V1_0.DebugInfo getDebugInfo()> -> _SOURCE_
<android.view.IWindowSessionCallback$Stub: android.view.IWindowSessionCallback getDefaultImpl()> -> _SOURCE_
<android.print.IPrintDocumentAdapter$Stub: android.print.IPrintDocumentAdapter getDefaultImpl()> -> _SOURCE_
<android.bluetooth.IBluetoothAvrcpController$Stub$Proxy: android.bluetooth.BluetoothAvrcpPlayerSettings getPlayerSettings(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<android.os.Debug$MemoryInfo: java.util.Map getMemoryStats()> -> _SOURCE_
<android.telephony.ModemActivityInfo$TransmitPower: java.lang.String toString()> -> _SOURCE_
<android.net.IpSecAlgorithm: java.lang.String getName()> -> _SOURCE_
<android.app.ContextImpl: android.view.autofill.AutofillManager$AutofillClient getAutofillClient()> -> _SOURCE_
<android.app.ActivityManager: android.content.pm.ParceledListSlice getGrantedUriPermissions(java.lang.String)> -> _SOURCE_
<android.app.blob.IBlobStoreSession$Stub$Proxy: long getSize()> -> _SOURCE_
<android.hardware.face.IFaceService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.animation.StateListAnimator: java.util.ArrayList getTuples()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: android.telephony.IccOpenLogicalChannelResponse iccOpenLogicalChannelBySlot(int,java.lang.String,java.lang.String,int)> -> _SOURCE_
<com.android.internal.view.menu.ActionMenuItem: char getNumericShortcut()> -> _SOURCE_
<android.widget.Toolbar: android.graphics.drawable.Drawable getNavigationIcon()> -> _SOURCE_
<android.content.res.ResourcesImpl: android.content.res.ConfigurationBoundResourceCache getAnimatorCache()> -> _SOURCE_
<com.android.internal.telephony.IMms$Default: android.os.IBinder asBinder()> -> _SOURCE_
<android.app.usage.UsageEvents$Event: java.lang.String getClassName()> -> _SOURCE_
<android.location.ILocationListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.hardware.radio.TunerAdapter: boolean isAntennaConnected()> -> _SOURCE_
<android.telephony.SubscriptionPlan: int[] access$802(android.telephony.SubscriptionPlan,int[])> -> _SOURCE_
<android.app.slice.Slice: android.app.slice.SliceSpec getSpec()> -> _SOURCE_
<android.telephony.mbms.vendor.IMbmsDownloadService$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.content.pm.PackageManager: int getUserId()> -> _SOURCE_
<android.telephony.CallAttributes: java.lang.String toString()> -> _SOURCE_
<com.android.internal.view.menu.ActionMenuItem: android.graphics.PorterDuff$Mode getIconTintMode()> -> _SOURCE_
<android.view.CutoutSpecification: android.graphics.Rect getLeftBound()> -> _SOURCE_
<android.app.AppGlobals: android.permission.IPermissionManager getPermissionManager()> -> _SOURCE_
<com.android.server.SystemConfig: android.util.ArraySet getDisabledUntilUsedPreinstalledCarrierApps()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean isWorldPhone(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.content.pm.SharedLibraryInfo: android.content.pm.VersionedPackage getDeclaringPackage()> -> _SOURCE_
<android.content.pm.ILauncherApps$Stub$Proxy: android.os.ParcelFileDescriptor getShortcutIconFd(java.lang.String,java.lang.String,java.lang.String,int)> -> _SOURCE_
<android.content.pm.ShortcutInfo: android.os.PersistableBundle[] getIntentPersistableExtrases()> -> _SOURCE_
<android.drm.ProcessedData: java.lang.String getSubscriptionId()> -> _SOURCE_
<android.media.audiopolicy.AudioVolumeGroup: java.util.List getAudioAttributes()> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: java.util.Map getProcesses()> -> _SOURCE_
<android.telephony.TelephonyManager: android.content.ComponentName getAndUpdateDefaultRespondViaMessageApplication()> -> _SOURCE_
<android.os.ShellCommand: android.os.ShellCallback getShellCallback()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Default: java.util.List getAffiliationIds(android.content.ComponentName)> -> _SOURCE_
<android.content.pm.SharedLibraryInfo: java.lang.String getPackageName()> -> _SOURCE_
<android.appwidget.AppWidgetManager: java.util.List getInstalledProviders()> -> _SOURCE_
<android.app.FragmentManager: android.app.FragmentTransaction openTransaction()> -> _SOURCE_
<android.app.NotificationManager: android.app.NotificationChannel getNotificationChannel(java.lang.String,java.lang.String)> -> _SOURCE_
<com.android.internal.view.IInlineSuggestionsResponseCallback$Stub: com.android.internal.view.IInlineSuggestionsResponseCallback getDefaultImpl()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: int getSubscriptionCarrierId(int)> -> _SOURCE_
<android.telephony.SubscriptionPlan: long access$602(android.telephony.SubscriptionPlan,long)> -> _SOURCE_
<android.content.pm.ApplicationInfo: java.lang.String getBaseResourcePath()> -> _SOURCE_
<android.transition.Transition: android.transition.PathMotion getPathMotion()> -> _SOURCE_
<android.hardware.hdmi.IHdmiControlCallback$Stub: android.hardware.hdmi.IHdmiControlCallback getDefaultImpl()> -> _SOURCE_
<android.view.Display: android.view.DisplayCutout getCutout()> -> _SOURCE_
<android.bluetooth.IBluetooth$Stub$Proxy: byte[] getMetadata(android.bluetooth.BluetoothDevice,int)> -> _SOURCE_
<android.app.INotificationManager$Stub$Proxy: java.util.List getZenRules()> -> _SOURCE_
<android.os.ISystemUpdateManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.location.ILocationManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.media.IAudioService$Stub$Proxy: java.util.List getDevicesForAttributes(android.media.AudioAttributes)> -> _SOURCE_
<android.nfc.INfcDta$Stub: android.nfc.INfcDta getDefaultImpl()> -> _SOURCE_
<android.bluetooth.IBluetoothHeadsetClient$Stub$Proxy: android.os.Bundle getCurrentAgEvents(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<android.media.MicrophoneInfo: float getMaxSpl()> -> _SOURCE_
<android.print.PrintJobInfo: android.print.PrintDocumentInfo getDocumentInfo()> -> _SOURCE_
<android.database.AbstractCursor: java.util.List getNotificationUris()> -> _SOURCE_
<android.app.assist.AssistStructure$ViewNodeBuilder: java.lang.CharSequence getText()> -> _SOURCE_
<android.view.autofill.IAutoFillManager$Stub: android.view.autofill.IAutoFillManager getDefaultImpl()> -> _SOURCE_
<android.hardware.camera2.CameraCharacteristics: java.util.List getKeysNeedingPermission()> -> _SOURCE_
<android.hardware.display.BrightnessConfiguration: float getShortTermModelLowerLuxMultiplier()> -> _SOURCE_
<android.app.Notification$Action: android.app.RemoteInput[] getDataOnlyRemoteInputs()> -> _SOURCE_
<android.app.Activity: java.util.HashMap getLastNonConfigurationChildInstances()> -> _SOURCE_
<android.os.IThermalService$Stub$Proxy: android.os.Temperature[] getCurrentTemperaturesWithType(int)> -> _SOURCE_
<android.widget.ArrayAdapter: android.content.res.Resources$Theme getDropDownViewTheme()> -> _SOURCE_
<android.content.ContextWrapper: android.content.Context getBaseContext()> -> _SOURCE_
<android.renderscript.Allocation: long getStride()> -> _SOURCE_
<android.content.LoggingContentInterface: android.database.Cursor query(android.net.Uri,java.lang.String[],android.os.Bundle,android.os.CancellationSignal)> -> _SOURCE_
<com.android.internal.telephony.ISms$Stub$Proxy: boolean isSmsSimPickActivityNeeded(int)> -> _SOURCE_
<android.content.IntentFilter: java.lang.String[] getHosts()> -> _SOURCE_
<android.telephony.PhoneNumberUtils: java.lang.String formatNumberToRFC3966(java.lang.String,java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.euicc.IRetrieveNotificationCallback$Stub: com.android.internal.telephony.euicc.IRetrieveNotificationCallback getDefaultImpl()> -> _SOURCE_
<android.app.ApplicationPackageManager: android.os.Bundle getSuspendedPackageAppExtras()> -> _SOURCE_
<android.telephony.PhoneNumberUtils: android.net.Uri convertSipUriToTelUri(android.net.Uri)> -> _SOURCE_
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()> -> _SOURCE_
<android.app.Dialog: android.app.Activity getOwnerActivity()> -> _SOURCE_
<android.telephony.TelephonyManager: java.util.List getClientRequestStats(int)> -> _SOURCE_
<android.app.prediction.AppTarget: android.content.pm.ShortcutInfo getShortcutInfo()> -> _SOURCE_
<android.content.res.AssetManager: boolean getThemeValue(long,int,android.util.TypedValue,boolean)> -> _SOURCE_
<android.app.FragmentManagerNonConfig: java.util.List getFragments()> -> _SOURCE_
<android.hardware.display.IDisplayManager$Stub$Proxy: android.graphics.Point getStableDisplaySize()> -> _SOURCE_
<android.security.keystore.ParcelableKeyGenParameterSpec: android.security.keystore.KeyGenParameterSpec getSpec()> -> _SOURCE_
<com.android.internal.app.IBatteryStats$Default: long getAwakeTimeBattery()> -> _SOURCE_
<android.hardware.location.NanoAppState: long getNanoAppVersion()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: boolean enableDataConnectivity()> -> _SOURCE_
<android.graphics.drawable.VectorDrawable$VectorDrawableState: float getAlpha()> -> _SOURCE_
<android.media.MediaCodec: java.nio.ByteBuffer[] getOutputBuffers()> -> _SOURCE_
<android.os.health.SystemHealthManager: android.os.health.HealthStats takeMyUidSnapshot()> -> _SOURCE_
<android.content.ContextWrapper: android.content.SharedPreferences getSharedPreferences(java.io.File,int)> -> _SOURCE_
<android.app.ActivityManager$TaskDescription: android.graphics.Bitmap getIcon()> -> _SOURCE_
<android.service.notification.NotificationListenerService$Ranking: java.lang.String getOverrideGroupKey()> -> _SOURCE_
<android.telephony.UssdResponse: int describeContents()> -> _SOURCE_
<android.hardware.Camera$Parameters: java.util.List getSupportedFlashModes()> -> _SOURCE_
<android.app.Notification$MessagingStyle$Message: java.lang.CharSequence getText()> -> _SOURCE_
<android.view.contentcapture.DataShareRequest: android.content.LocusId getLocusId()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: java.lang.String[] getMergedSubscriberIds(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isDataEnabledForApn(int)> -> _SOURCE_
<android.media.AudioManager: int getVibrateSetting(int)> -> _SOURCE_
<com.android.internal.widget.ToolbarWidgetWrapper: java.lang.CharSequence getTitle()> -> _SOURCE_
<com.android.internal.telephony.SmsApplication$SmsApplicationData: java.lang.String access$300(com.android.internal.telephony.SmsApplication$SmsApplicationData)> -> _SOURCE_
<android.window.IWindowOrganizerController$Stub$Proxy: android.window.IDisplayAreaOrganizerController getDisplayAreaOrganizerController()> -> _SOURCE_
<android.telephony.TelephonyHistogram: int[] getBucketEndPoints()> -> _SOURCE_
<android.text.Layout: android.text.TextPaint getPaint()> -> _SOURCE_
<android.content.pm.IPackageManager$Default: java.lang.String getSystemTextClassifierPackageName()> -> _SOURCE_
<android.location.Address: java.lang.String getCountryName()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.telecom.PhoneAccount: java.lang.CharSequence getLabel()> -> _SOURCE_
<android.os.IUserManager$Stub$Proxy: android.os.Bundle getApplicationRestrictions(java.lang.String)> -> _SOURCE_
<android.os.Environment: java.io.File getLegacyExternalStorageDirectory()> -> _SOURCE_
<com.android.internal.view.IInlineSuggestionsResponseCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.ApplicationPackageManager: boolean isPackageStateProtected(java.lang.String,int)> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getVoiceMailAlphaTag(java.lang.String,java.lang.String)> -> _SOURCE_
<android.net.IConnectivityManager$Default: android.net.ProxyInfo getGlobalProxy()> -> _SOURCE_
<android.media.IMediaRouterClient$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.util.MapCollections$MapIterator: java.lang.Object getKey()> -> _SOURCE_
<android.telephony.SmsCbLocation: boolean isInLocationArea(java.lang.String,int,int)> -> _SOURCE_
<android.net.INetworkStatsService$Stub$Proxy: java.lang.String[] getMobileIfaces()> -> _SOURCE_
<android.provider.FontsContract: android.content.pm.ProviderInfo getProvider(android.content.pm.PackageManager,android.provider.FontRequest)> -> _SOURCE_
<android.util.proto.ProtoStream: java.lang.String getFieldTypeString(long)> -> _SOURCE_
<android.app.trust.IStrongAuthTracker$Stub: android.app.trust.IStrongAuthTracker getDefaultImpl()> -> _SOURCE_
<com.android.internal.graphics.palette.Palette: com.android.internal.graphics.palette.Palette$Swatch getVibrantSwatch()> -> _SOURCE_
<android.content.pm.dex.IArtManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.content.res.FontResourcesParser$FontFileResourceEntry: java.lang.String getVariationSettings()> -> _SOURCE_
<android.app.ApplicationPackageManager: boolean isSignedBy(java.lang.String,android.content.pm.KeySet)> -> _SOURCE_
<android.net.wifi.nl80211.IWifiScannerImpl$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.net.lowpan.LowpanInterface: boolean isCommissioned()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.util.List getPackagesWithCarrierPrivileges(int)> -> _SOURCE_
<android.content.UndoOperation: android.content.UndoOwner getOwner()> -> _SOURCE_
<android.app.contentsuggestions.ContentClassification: java.lang.String getId()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int isMultiSimSupported(java.lang.String,java.lang.String)> -> _SOURCE_
<android.app.LoadedApk: android.content.res.AssetManager getAssets()> -> _SOURCE_
<android.util.Property: java.lang.String getName()> -> _SOURCE_
<android.view.accessibility.IWindowMagnificationConnection$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: java.util.List getAvailableExtraData()> -> _SOURCE_
<android.nfc.cardemulation.NfcFServiceInfo: android.content.ComponentName getComponent()> -> _SOURCE_
<android.hardware.usb.UsbDevice: java.lang.String getSerialNumber()> -> _SOURCE_
<android.view.IWindowManager$Stub: android.view.IWindowManager getDefaultImpl()> -> _SOURCE_
<android.net.wifi.nl80211.IClientInterface$Default: byte[] getMacAddress()> -> _SOURCE_
<android.os.IDeviceIdentifiersPolicyService$Default: java.lang.String getSerial()> -> _SOURCE_
<android.hardware.camera2.CameraCharacteristics$Key: android.hardware.camera2.impl.CameraMetadataNative$Key getNativeKey()> -> _SOURCE_
<android.media.MediaDescrambler: android.os.IHwBinder getBinder()> -> _SOURCE_
<android.os.IDeviceIdleController$Stub$Proxy: int[] getAppIdTempWhitelist()> -> _SOURCE_
<android.database.AbstractCursor: boolean getWantsAllOnMoveCalls()> -> _SOURCE_
<android.os.IHardwarePropertiesManager$Stub$Proxy: float[] getDeviceTemperatures(java.lang.String,int,int)> -> _SOURCE_
<android.bluetooth.IBluetoothA2dpSink$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.ims.internal.IImsCallSession$Stub$Proxy: android.telephony.ims.ImsCallProfile getRemoteCallProfile()> -> _SOURCE_
<android.app.DisabledWallpaperManager: android.app.DisabledWallpaperManager getInstance()> -> _SOURCE_
<android.hardware.camera2.params.RggbChannelVector: float getGreenEven()> -> _SOURCE_
<android.net.TrafficStats: long getTotalTxPackets()> -> _SOURCE_
<android.app.job.JobInfo$TriggerContentUri: android.net.Uri getUri()> -> _SOURCE_
<com.android.internal.view.IInlineSuggestionsResponseCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telephony.CellIdentityGsm: java.lang.String getMncString()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.view.textservice.SpellCheckerInfo: android.content.ComponentName getComponent()> -> _SOURCE_
<android.net.RouteInfo: android.net.IpPrefix getDestination()> -> _SOURCE_
<android.telephony.TelephonyManager: android.telephony.TelephonyManager createForSubscriptionId(int)> -> _SOURCE_
<android.net.wifi.nl80211.IWificond$Stub$Proxy: int[] getAvailable2gChannels()> -> _SOURCE_
<android.app.ApplicationPackageManager: int getInstallReason(java.lang.String,android.os.UserHandle)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.lang.CharSequence getShortSupportMessage(android.content.ComponentName)> -> _SOURCE_
<android.app.ActivityOptions: android.content.Intent getResultData()> -> _SOURCE_
<android.security.keystore.AndroidKeyStoreKey: java.lang.String getAlgorithm()> -> _SOURCE_
<android.content.pm.IPackageManager$Default: java.lang.String getDefaultTextClassifierPackageName()> -> _SOURCE_
<android.telephony.SubscriptionManager: int lambda$setIconTint$2(int,int,com.android.internal.telephony.ISub)> -> _SOURCE_
<android.telephony.CellSignalStrengthTdscdma: int hashCode()> -> _SOURCE_
<android.os.IVibratorService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.net.wifi.nl80211.IApInterface$Stub$Proxy: java.lang.String getInterfaceName()> -> _SOURCE_
<com.android.telephony.Rlog: java.lang.String pii(boolean,java.lang.Object)> -> _SOURCE_
<com.android.internal.policy.DecorContext: android.content.AutofillOptions getAutofillOptions()> -> _SOURCE_
<android.provider.DeviceConfig$Properties: java.util.Set getKeyset()> -> _SOURCE_
<android.content.IContentService$Stub$Proxy: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String,android.content.ComponentName)> -> _SOURCE_
<android.telephony.CellConfigLte: boolean isEndcAvailable()> -> _SOURCE_
<android.app.IActivityController$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.media.MediaRecorder: android.media.AudioRecordingConfiguration getActiveRecordingConfiguration()> -> _SOURCE_
<android.os.UserManager: boolean isSameProfileGroup(android.os.UserHandle,android.os.UserHandle)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: android.telephony.ims.aidl.IImsConfig getImsConfig(int,int)> -> _SOURCE_
<android.media.tv.tunerresourcemanager.TunerResourceManager: boolean isHigherPriority(android.media.tv.tunerresourcemanager.ResourceClientProfile,android.media.tv.tunerresourcemanager.ResourceClientProfile)> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: java.util.ArrayList getDbStats()> -> _SOURCE_
<android.media.AudioManager: int getRingerMode()> -> _SOURCE_
<android.net.wifi.nl80211.IInterfaceEventCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.content.ContentResolver: java.lang.String getAttributionTag()> -> _SOURCE_
<android.graphics.fonts.FontVariationAxis: java.lang.String getTag()> -> _SOURCE_
<android.media.soundtrigger.SoundTriggerDetector$EventPayload: byte[] getTriggerAudio()> -> _SOURCE_
<android.bluetooth.le.ScanResult: android.bluetooth.le.ScanRecord getScanRecord()> -> _SOURCE_
<android.view.accessibility.IAccessibilityManager$Stub: android.view.accessibility.IAccessibilityManager getDefaultImpl()> -> _SOURCE_
<android.widget.Editor: android.widget.TextView getTextView()> -> _SOURCE_
<android.view.ScrollCaptureSession: android.graphics.Rect getScrollBounds()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isMeteredDataDisabledPackageForUser(android.content.ComponentName,java.lang.String,int)> -> _SOURCE_
<android.view.InputDevice: int getId()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.app.ApplicationPackageManager: android.os.storage.VolumeInfo getPackageCurrentVolume(android.content.pm.ApplicationInfo,android.os.storage.StorageManager)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.util.List getUiccCardsInfo(java.lang.String)> -> _SOURCE_
<android.content.UndoOperation: java.lang.Object getOwnerData()> -> _SOURCE_
<com.android.internal.content.om.OverlayConfig: com.android.internal.content.om.OverlayConfig getZygoteInstance()> -> _SOURCE_
<android.bluetooth.IBluetoothPbap$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.content.RestrictionEntry: java.lang.String[] getChoiceValues()> -> _SOURCE_
<android.view.IDisplayWindowRotationController$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: int getCdmaEriIconMode(java.lang.String,java.lang.String)> -> _SOURCE_
<android.os.Parcel: long getBlobAshmemSize()> -> _SOURCE_
<android.media.session.ISessionManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telephony.SubscriptionManager: void addSubscriptionsIntoGroup(java.util.List,android.os.ParcelUuid)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.util.List getCertsFromCarrierPrivilegeAccessRules(int)> -> _SOURCE_
<com.android.internal.net.INetworkWatchlistManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkCapabilities[] getDefaultNetworkCapabilitiesForUser(int,java.lang.String)> -> _SOURCE_
<android.content.ComponentName: java.lang.String getPackageName()> -> _SOURCE_
<android.location.GpsClock: byte getType()> -> _SOURCE_
<android.service.notification.StatusBarNotification: com.android.internal.logging.InstanceId getInstanceId()> -> _SOURCE_
<android.app.job.IJobCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.hardware.location.IContextHubClientCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.media.AudioTrack: android.os.PersistableBundle getMetrics()> -> _SOURCE_
<android.hardware.hdmi.HdmiSwitchClient: java.util.List getDeviceList()> -> _SOURCE_
<android.print.PrintDocumentInfo: java.lang.String getName()> -> _SOURCE_
<android.telephony.PreciseDataConnectionState: int getDataConnectionState()> -> _SOURCE_
<android.net.nsd.INsdManager$Stub$Proxy: android.os.Messenger getMessenger()> -> _SOURCE_
<com.android.internal.telephony.SmsApplication: java.util.Collection getApplicationCollectionAsUser(android.content.Context,int)> -> _SOURCE_
<android.app.LoadedApk$ReceiverDispatcher: android.content.IIntentReceiver getIIntentReceiver()> -> _SOURCE_
<android.net.lowpan.ILowpanInterface$Default: java.lang.String getRole()> -> _SOURCE_
<android.view.autofill.AutofillValue: java.lang.CharSequence getTextValue()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: boolean isDataEnabledForApn(int,int,java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: java.lang.String iccTransmitApduLogicalChannel(int,int,int,int,int,int,int,java.lang.String)> -> _SOURCE_
<android.content.pm.parsing.component.ParsedService: java.lang.String getPermission()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isUniqueDeviceAttestationSupported()> -> _SOURCE_
<android.media.IRecordingConfigDispatcher$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.content.pm.ResolveInfo: android.content.pm.ComponentInfo getComponentInfo()> -> _SOURCE_
<com.android.internal.widget.VerifyCredentialResponse: byte[] getPayload()> -> _SOURCE_
<android.app.Fragment: android.transition.Transition getExitTransition()> -> _SOURCE_
<android.telephony.UiccAccessRule: java.util.List getSignatures(android.content.pm.PackageInfo)> -> _SOURCE_
<android.net.Proxy: java.lang.String getDefaultHost()> -> _SOURCE_
<android.service.notification.StatusBarNotification: android.content.Context getPackageContext(android.content.Context)> -> _SOURCE_
<android.view.Display: android.view.Display$HdrCapabilities getHdrCapabilities()> -> _SOURCE_
<android.content.IContentService$Stub$Proxy: android.os.Bundle getCache(java.lang.String,android.net.Uri,int)> -> _SOURCE_
<android.app.slice.ISliceManager$Stub: android.app.slice.ISliceManager getDefaultImpl()> -> _SOURCE_
<com.android.internal.telephony.euicc.IDeleteProfileCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.UiccAccessRule: byte[] encodeRules(android.telephony.UiccAccessRule[])> -> _SOURCE_
<android.util.apk.WrappedX509Certificate: java.lang.String getSigAlgName()> -> _SOURCE_
<android.content.ContentResolver: java.lang.String getPackageName()> -> _SOURCE_
<android.graphics.drawable.NinePatchDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()> -> _SOURCE_
<android.content.pm.ShortcutInfo: java.lang.CharSequence getShortLabel()> -> _SOURCE_
<android.app.Notification$WearableExtender: java.lang.String getBridgeTag()> -> _SOURCE_
<com.android.internal.telecom.ITelecomService$Stub$Proxy: java.lang.String getDefaultDialerPackageForUser(int)> -> _SOURCE_
<android.app.slice.SliceItem: long getLong()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean canChangeDtmfToneLength()> -> _SOURCE_
<android.os.IIncidentDumpCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.Notification$WearableExtender: android.graphics.Bitmap getBackground()> -> _SOURCE_
<android.widget.Toolbar: android.view.View getNavigationView()> -> _SOURCE_
<android.content.Context: android.content.AutofillOptions getAutofillOptions()> -> _SOURCE_
<android.graphics.ColorSpace$Rgb: java.util.function.DoubleUnaryOperator getOetf()> -> _SOURCE_
<android.security.KeyStore: long getmtime(java.lang.String,int)> -> _SOURCE_
<android.util.apk.WrappedX509Certificate: java.util.Set getNonCriticalExtensionOIDs()> -> _SOURCE_
<android.net.ConnectivityManager: boolean isDefaultNetworkActive()> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: java.util.Map getKeySetMapping()> -> _SOURCE_
<android.media.MediaCodec$OutputFrame: long getPresentationTimeUs()> -> _SOURCE_
<com.android.internal.telephony.ISub$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.view.IWindow$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.internal.telephony.euicc.IRemoveNotificationFromListCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getClassName()> -> _SOURCE_
<com.android.internal.telephony.euicc.IGetRulesAuthTableCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.DisabledWallpaperManager: android.graphics.drawable.Drawable getDrawable()> -> _SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetherableIfaces()> -> _SOURCE_
<android.hardware.camera2.ICameraDeviceUser$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.hardware.camera2.CameraCharacteristics: java.util.Set getPhysicalCameraIds()> -> _SOURCE_
<android.view.InputDevice$MotionRange: float getFlat()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String iccTransmitApduLogicalChannel(int,int,int,int,int,int,java.lang.String)> -> _SOURCE_
<android.graphics.RenderNode: float getRotationX()> -> _SOURCE_
<android.transition.ChangeClipBounds: java.lang.String[] getTransitionProperties()> -> _SOURCE_
<android.view.animation.AnimationSet: java.util.List getAnimations()> -> _SOURCE_
<android.app.Notification: android.graphics.drawable.Icon getSmallIcon()> -> _SOURCE_
<android.view.IPinnedStackListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.view.InsetsController: android.view.InsetsState getState()> -> _SOURCE_
<android.app.ActivityOptions: boolean getLaunchTaskBehind()> -> _SOURCE_
<android.net.TrafficStats: long getLoopbackTxBytes()> -> _SOURCE_
<android.app.IActivityManager$Stub$Proxy: android.content.pm.UserInfo getCurrentUser()> -> _SOURCE_
<android.app.slice.ISliceManager$Default: android.app.slice.SliceSpec[] getPinnedSpecs(android.net.Uri,java.lang.String)> -> _SOURCE_
<android.accounts.IAccountManager$Stub$Proxy: android.accounts.Account[] getAccountsForPackage(java.lang.String,int,java.lang.String)> -> _SOURCE_
<android.app.NotificationHistory$HistoricalNotification: java.lang.String getText()> -> _SOURCE_
<android.media.session.ISessionController$Stub$Proxy: android.media.session.PlaybackState getPlaybackState()> -> _SOURCE_
<android.telephony.SignalStrength: int getWcdmaLevel()> -> _SOURCE_
<android.app.IActivityManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.net.LinkProperties: java.util.List getAllLinkAddresses()> -> _SOURCE_
<android.location.Location: float getBearingAccuracyDegrees()> -> _SOURCE_
<android.widget.ExpandableListConnector: java.lang.Object getItem(int)> -> _SOURCE_
<android.app.AlarmManager: long getNextWakeFromIdleTime()> -> _SOURCE_
<android.database.sqlite.SqliteWrapper: android.database.Cursor query(android.content.Context,android.content.ContentResolver,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SOURCE_
<com.android.internal.app.IBatteryStats$Default: android.os.ParcelFileDescriptor getStatisticsStream()> -> _SOURCE_
<android.permission.IPermissionController$Stub: android.permission.IPermissionController getDefaultImpl()> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Default: java.lang.String getIccSerialNumber(java.lang.String)> -> _SOURCE_
<android.view.InsetsSourceControl: android.view.SurfaceControl getLeash()> -> _SOURCE_
<android.content.pm.IPackageManager$Default: java.lang.String[] getSystemSharedLibraryNames()> -> _SOURCE_
<android.hardware.display.ColorDisplayManager: boolean isNightDisplayActivated()> -> _SOURCE_
<android.app.LoadedApk: android.app.Application getApplication()> -> _SOURCE_
<android.hardware.radio.V1_5.CellInfo$CellInfoRatSpecificInfo: byte getDiscriminator()> -> _SOURCE_
<android.content.pm.PackageManager: java.util.List queryBroadcastReceiversAsUser(android.content.Intent,int,android.os.UserHandle)> -> _SOURCE_
<android.telephony.TelephonyManager: void <clinit>()> -> _SOURCE_
<android.os.BatterySaverPolicyConfig: boolean getEnableFirewall()> -> _SOURCE_
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: java.util.List getConnectedDevices()> -> _SOURCE_
<android.net.NetworkRequest: android.net.NetworkSpecifier getNetworkSpecifier()> -> _SOURCE_
<android.security.keystore.recovery.WrappedApplicationKey: java.lang.String getAlias()> -> _SOURCE_
<android.telephony.CellIdentityWcdma: int hashCode()> -> _SOURCE_
<android.telephony.VisualVoicemailSmsFilterSettings: java.lang.String toString()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.service.notification.NotificationListenerService$Ranking: java.util.List getSmartReplies()> -> _SOURCE_
<com.android.internal.telephony.INumberVerificationCallback$Stub: com.android.internal.telephony.INumberVerificationCallback getDefaultImpl()> -> _SOURCE_
<android.graphics.fonts.SystemFonts: java.util.Map getRawSystemFallbackMap()> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec: java.util.Date getCertificateNotBefore()> -> _SOURCE_
<android.content.pm.PackageManager: java.lang.String getSystemCaptionsServicePackageName()> -> _SOURCE_
<android.view.textclassifier.TextClassificationManager: android.view.textclassifier.TextClassifier getTextClassifier()> -> _SOURCE_
<android.os.connectivity.WifiBatteryStats: long getLoggingDurationMillis()> -> _SOURCE_
<android.view.textclassifier.ConversationActions$Request: android.view.textclassifier.SystemTextClassifierMetadata getSystemTextClassifierMetadata()> -> _SOURCE_
<android.widget.Toolbar: android.graphics.drawable.Drawable getLogo()> -> _SOURCE_
<android.location.ILocationManager$Stub$Proxy: java.lang.String getFromLocation(double,double,int,android.location.GeocoderParams,java.util.List)> -> _SOURCE_
<android.os.TelephonyServiceManager: android.os.TelephonyServiceManager$ServiceRegisterer getTelephonyServiceRegisterer()> -> _SOURCE_
<android.location.GnssClock: double getDriftNanosPerSecond()> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getMsisdnForSubscriber(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.accounts.AccountManager: android.content.IntentSender createRequestAccountAccessIntentSenderAsUser(android.accounts.Account,java.lang.String,android.os.UserHandle)> -> _SOURCE_
<android.nfc.NfcAdapter: java.util.List getSupportedOffHostSecureElements()> -> _SOURCE_
<android.view.DragEvent: com.android.internal.view.IDragAndDropPermissions getDragAndDropPermissions()> -> _SOURCE_
<android.telephony.TelephonyManager: int getPreferredNetworkType(int)> -> _SOURCE_
<android.net.NetworkStats: int[] getUniqueUids()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean getSmsReceiveCapable(boolean)> -> _SOURCE_
<android.telephony.CellIdentity: java.lang.CharSequence getOperatorAlphaShort()> -> _SOURCE_
<android.os.IRemoteCallback$Stub: android.os.IRemoteCallback getDefaultImpl()> -> _SOURCE_
<android.media.AudioManager: long getAdditionalOutputDeviceDelay(android.media.AudioDeviceInfo)> -> _SOURCE_
<com.android.internal.policy.PhoneWindow: java.util.List getSystemGestureExclusionRects()> -> _SOURCE_
<android.net.NetworkCapabilities: java.lang.String getSsid()> -> _SOURCE_
<android.media.RingtoneManager: int getRingtonePosition(android.net.Uri)> -> _SOURCE_
<com.android.internal.net.VpnConfig: android.content.Intent getIntentForConfirmation()> -> _SOURCE_
<android.widget.ListPopupWindow: android.widget.ListView getListView()> -> _SOURCE_
<android.os.PowerManager: int getDefaultScreenBrightnessForVrSetting()> -> _SOURCE_
<com.android.internal.telephony.ISms$Stub$Proxy: int getPremiumSmsPermission(java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean needMobileRadioShutdown()> -> _SOURCE_
<android.net.wifi.nl80211.ISendMgmtFrameEvent$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.internal.util.function.pooled.OmniFunction: java.lang.Object get()> -> _SOURCE_
<android.view.DisplayCutout: android.graphics.Rect getBoundingRectLeft()> -> _SOURCE_
<android.media.VolumeShaper: float getVolume()> -> _SOURCE_
<android.security.keystore.AndroidKeyStoreRSAPublicKey: java.math.BigInteger getModulus()> -> _SOURCE_
<android.widget.SmartSelectSprite$RoundedRectangleShape: float getRoundRatio()> -> _SOURCE_
<android.net.lowpan.ILowpanInterfaceListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.webkit.IWebViewUpdateService$Stub$Proxy: android.webkit.WebViewProviderInfo[] getValidWebViewPackages()> -> _SOURCE_
<android.content.ContextWrapper: java.io.File getExternalFilesDir(java.lang.String)> -> _SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetheringErroredIfaces()> -> _SOURCE_
<android.bluetooth.IBluetoothProfileServiceConnection$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.internal.telecom.ITelecomService$Default: java.util.List getAllPhoneAccountHandles()> -> _SOURCE_
<android.media.Ringtone: android.media.AudioAttributes getAudioAttributes()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: int getDataActivationState(int,java.lang.String)> -> _SOURCE_
<android.view.contentcapture.ContentCaptureManager: android.content.ComponentName getServiceSettingsComponentName()> -> _SOURCE_
<android.content.pm.ApplicationInfo: java.lang.String getResourcePath()> -> _SOURCE_
<android.telephony.SubscriptionManager: int getDefaultDataSubscriptionId()> -> _SOURCE_
<android.media.MediaMetadata: android.media.MediaDescription getDescription()> -> _SOURCE_
<android.app.INotificationManager$Stub$Proxy: android.service.notification.StatusBarNotification[] getHistoricalNotifications(java.lang.String,int,boolean)> -> _SOURCE_
<android.nfc.cardemulation.NfcFServiceInfo: java.lang.String getT3tPmm()> -> _SOURCE_
<android.app.WallpaperColors: android.graphics.Color getTertiaryColor()> -> _SOURCE_
<android.telephony.Rlog: boolean isLoggable(java.lang.String,int)> -> _SOURCE_
<android.media.ExifInterface: long getDateTimeDigitized()> -> _SOURCE_
<android.service.notification.ZenModeConfig: java.lang.String getOwnerCaption(android.content.Context,java.lang.String)> -> _SOURCE_
<android.provider.Settings$NameValueCache: android.util.ArrayMap getStringsForPrefix(android.content.ContentResolver,java.lang.String,java.util.List)> -> _SOURCE_
<android.text.Layout: long getRunRange(int)> -> _SOURCE_
<android.content.res.AssetFileDescriptor: android.os.Bundle getExtras()> -> _SOURCE_
<com.android.server.SystemConfig: android.util.ArraySet getAllowUnthrottledLocation()> -> _SOURCE_
<android.view.IWindowSessionCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telephony.SignalStrength: int getLteDbm()> -> _SOURCE_
<android.location.Address: double getLongitude()> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Default: java.lang.String getDeviceIdForPhone(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.telecom.Log: java.lang.String getSessionId()> -> _SOURCE_
<android.graphics.drawable.VectorDrawable$VGroup: float getPivotY()> -> _SOURCE_
<android.text.Layout: float getLineRight(int)> -> _SOURCE_
<android.bluetooth.BluetoothHidDevice: java.util.List getConnectedDevices()> -> _SOURCE_
<android.content.SyncAdapterType: java.lang.String getPackageName()> -> _SOURCE_
<android.hardware.camera2.TotalCaptureResult: java.util.List getPartialResults()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean isHearingAidCompatibilitySupported()> -> _SOURCE_
<android.net.IConnectivityManager$Default: java.lang.String[] getTetherableIfaces()> -> _SOURCE_
<android.hardware.usb.UsbDevice: java.lang.String getDeviceName(int)> -> _SOURCE_
<android.content.RestrictionsManager: android.os.Bundle getApplicationRestrictions()> -> _SOURCE_
<android.hardware.location.NanoAppBinary: byte[] getBinaryNoHeader()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub: com.android.internal.telephony.ITelephony asInterface(android.os.IBinder)> -> _SOURCE_
<android.hardware.Camera$Parameters: boolean getAutoWhiteBalanceLock()> -> _SOURCE_
<android.telephony.SmsManager: int checkSmsShortCodeDestination(java.lang.String,java.lang.String)> -> _SOURCE_
<android.text.Layout: java.lang.Object[] getParagraphSpans(android.text.Spanned,int,int,java.lang.Class)> -> _SOURCE_
<android.webkit.WebResourceResponse: java.lang.String getMimeType()> -> _SOURCE_
<android.hardware.display.DisplayManagerGlobal: android.util.Pair getMinimumBrightnessCurve()> -> _SOURCE_
<android.content.res.AssetManager: java.lang.String getResourceTypeName(int)> -> _SOURCE_
<android.print.PrintJobInfo: android.print.PrintJobId getId()> -> _SOURCE_
<android.net.NetworkCapabilities: int[] getTransportTypes()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.util.List queryPermissionsByGroup(java.lang.String,int)> -> _SOURCE_
<android.net.wifi.nl80211.IWifiScannerImpl$Stub: android.net.wifi.nl80211.IWifiScannerImpl getDefaultImpl()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()> -> _SOURCE_
<android.net.IConnectivityManager$Default: java.lang.String[] getTetherableWifiRegexs()> -> _SOURCE_
<android.hardware.display.IColorDisplayManager$Stub$Proxy: android.hardware.display.Time getNightDisplayCustomStartTime()> -> _SOURCE_
<com.android.internal.inputmethod.ICharSequenceResultCallback$Stub: com.android.internal.inputmethod.ICharSequenceResultCallback getDefaultImpl()> -> _SOURCE_
<android.app.FragmentHostCallback: android.app.FragmentManagerImpl getFragmentManagerImpl()> -> _SOURCE_
<android.content.res.AssetManager: boolean isUpToDate()> -> _SOURCE_
<android.widget.EditorTouchState: float getLastUpY()> -> _SOURCE_
<android.telecom.PhoneAccountHandle: android.content.ComponentName getComponentName()> -> _SOURCE_
<android.telephony.ModemInfo: java.lang.String toString()> -> _SOURCE_
<android.os.storage.StorageManager: int getProxyFileDescriptorMountPointId()> -> _SOURCE_
<com.android.internal.policy.PhoneWindow: android.transition.Transition getReenterTransition()> -> _SOURCE_
<android.hardware.face.FaceManager: java.lang.String getErrorString(android.content.Context,int,int)> -> _SOURCE_
<android.net.ConnectivityDiagnosticsManager$ConnectivityReport: android.net.NetworkCapabilities getNetworkCapabilities()> -> _SOURCE_
<android.os.PowerManager: boolean isAmbientDisplayAvailable()> -> _SOURCE_
<android.widget.ExpandableListConnector: long getItemId(int)> -> _SOURCE_
<android.location.Location: float getAccuracy()> -> _SOURCE_
<android.hardware.ICameraService$Stub$Proxy: android.hardware.camera2.params.VendorTagDescriptor getCameraVendorTagDescriptor()> -> _SOURCE_
<android.app.prediction.AppPredictionContext: java.lang.String getUiSurface()> -> _SOURCE_
<android.telephony.SmsMessage$MessageClass: android.telephony.SmsMessage$MessageClass valueOf(java.lang.String)> -> _SOURCE_
<android.app.ContextImpl: java.io.File getObbDir()> -> _SOURCE_
<android.telephony.ModemActivityInfo: java.util.List getTransmitPowerInfo()> -> _SOURCE_
<android.widget.RemoteViewsAdapter$RemoteViewsFrameLayout: android.view.View getErrorView()> -> _SOURCE_
<android.bluetooth.IBluetoothSocketManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase$OpenParams: long getIdleConnectionTimeout()> -> _SOURCE_
<android.widget.ArrayAdapter: java.lang.CharSequence[] getAutofillOptions()> -> _SOURCE_
<com.android.internal.widget.ILockSettings$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.security.IKeyChainService$Default: android.content.pm.StringParceledListSlice getUserCaAliases()> -> _SOURCE_
<android.content.pm.ShortcutManager: java.util.List getPinnedShortcuts()> -> _SOURCE_
<android.net.RouteInfo: java.lang.String getInterface()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Default: java.util.List getPermittedCrossProfileNotificationListeners(android.content.ComponentName)> -> _SOURCE_
<android.app.INotificationManager$Stub$Proxy: java.util.List getAllowedAssistantAdjustments(java.lang.String)> -> _SOURCE_
<android.media.RingtoneManager: android.net.Uri getDefaultUri(int)> -> _SOURCE_
<android.service.textclassifier.TextClassifierService: android.view.textclassifier.TextClassifier getLocalTextClassifier()> -> _SOURCE_
<android.view.InputDevice: android.hardware.input.InputDeviceIdentifier getIdentifier()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: android.os.BatteryStats$ControllerActivityCounter getModemControllerActivity()> -> _SOURCE_
<android.telephony.ims.aidl.IImsRcsFeature$Stub: android.telephony.ims.aidl.IImsRcsFeature getDefaultImpl()> -> _SOURCE_
<android.content.pm.InstantAppResolveInfo: long getLongVersionCode()> -> _SOURCE_
<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()> -> _SOURCE_
<android.os.IDeviceIdleController$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.media.session.PlaybackState: java.lang.CharSequence getErrorMessage()> -> _SOURCE_
<android.app.slice.SliceItem: android.widget.RemoteViews getRemoteView()> -> _SOURCE_
<android.os.IProgressListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isSystemOnlyUser(android.content.ComponentName)> -> _SOURCE_
<android.app.ContextImpl: android.content.Context getApplicationContext()> -> _SOURCE_
<android.app.assist.AssistStructure$HtmlInfoNode: java.util.List getAttributes()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean getBluetoothContactSharingDisabled(android.content.ComponentName)> -> _SOURCE_
<android.content.pm.InstantAppResolveInfo: byte[] getDigestBytes()> -> _SOURCE_
<android.telephony.CbGeoUtils$Circle: double getRadius()> -> _SOURCE_
<android.view.textclassifier.TextLinksParams: android.view.textclassifier.TextClassifier$EntityConfig getEntityConfig()> -> _SOURCE_
<android.hardware.SerialPort: java.lang.String getName()> -> _SOURCE_
<android.service.notification.ZenModeConfig: android.content.ComponentName getScheduleConditionProvider()> -> _SOURCE_
<android.bluetooth.BluetoothPbap: java.util.List getConnectedDevices()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$ControllerActivityCounterImpl: android.os.BatteryStats$LongCounter getIdleTimeCounter()> -> _SOURCE_
<android.hardware.input.IInputManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.os.Environment: java.io.File getPackageCacheDirectory()> -> _SOURCE_
<com.android.internal.telephony.IPhoneStateListener$Stub: com.android.internal.telephony.IPhoneStateListener asInterface(android.os.IBinder)> -> _SOURCE_
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ChangedPackages getChangedPackages(int,int)> -> _SOURCE_
<android.graphics.animation.FallbackLUTInterpolator: float getInterpolation(float)> -> _SOURCE_
<android.view.accessibility.AccessibilityManager: java.util.List getAccessibilityShortcutTargets(int)> -> _SOURCE_
<android.hardware.location.IContextHubClient$Stub: android.hardware.location.IContextHubClient getDefaultImpl()> -> _SOURCE_
<android.media.RemoteController: long getEstimatedMediaPosition()> -> _SOURCE_
<android.view.contentcapture.ContentCaptureManager: boolean isContentCaptureFeatureEnabled()> -> _SOURCE_
<android.hardware.SystemSensorManager: java.util.List getFullSensorList()> -> _SOURCE_
<android.telecom.TelecomManager: java.util.List getCallCapablePhoneAccounts(boolean)> -> _SOURCE_
<android.hardware.cas.V1_0.IMediaCasService$Stub: android.internal.hidl.base.V1_0.DebugInfo getDebugInfo()> -> _SOURCE_
<android.view.contentcapture.ContentCaptureManager: boolean isContentCaptureEnabled()> -> _SOURCE_
<android.app.ActivityManager: int getLargeMemoryClass()> -> _SOURCE_
<android.util.XmlPullAttributes: java.lang.String getAttributeName(int)> -> _SOURCE_
<android.app.ApplicationPackageManager: android.content.res.Resources getResourcesForApplication(java.lang.String)> -> _SOURCE_
<android.media.midi.MidiDeviceInfo: android.os.Bundle getProperties()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: android.os.Bundle getUserRestrictions(android.content.ComponentName,boolean)> -> _SOURCE_
<android.app.IAppTask$Default: android.app.ActivityManager$RecentTaskInfo getTaskInfo()> -> _SOURCE_
<android.view.ViewConfiguration: int getDoubleTapMinTime()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo getCollectionItemInfo()> -> _SOURCE_
<android.security.keystore.AndroidKeyStoreECPrivateKey: java.security.spec.ECParameterSpec getParams()> -> _SOURCE_
<android.telephony.ModemActivityInfo: java.lang.String toString()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getNetworkOperator()> -> _SOURCE_
<android.renderscript.ProgramStore: android.renderscript.ProgramStore$BlendDstFunc getBlendDstFunc()> -> _SOURCE_
<android.os.IThermalService$Stub$Proxy: android.os.CoolingDevice[] getCurrentCoolingDevicesWithType(int)> -> _SOURCE_
<android.telephony.SmsCbCmasInfo: int describeContents()> -> _SOURCE_
<android.app.ContextImpl: java.io.File getCodeCacheDirBeforeBind(java.io.File)> -> _SOURCE_
<android.view.Display: android.view.Display$Mode getMode()> -> _SOURCE_
<android.view.MotionEvent: float getYCursorPosition()> -> _SOURCE_
<android.animation.PathKeyframes$FloatKeyframesBase: java.lang.Class getType()> -> _SOURCE_
<com.android.internal.widget.ILockSettings$Stub$Proxy: byte[] getHashFactor(com.android.internal.widget.LockscreenCredential,int)> -> _SOURCE_
<android.app.Notification$MessagingStyle$Message: java.util.List getMessagesFromBundleArray(android.os.Parcelable[])> -> _SOURCE_
<android.hardware.Camera$Parameters: java.lang.String getFlashMode()> -> _SOURCE_
<android.app.ITransientNotification$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.animation.ValueAnimator: android.animation.TimeInterpolator getInterpolator()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: java.lang.String[] getPcscfAddress(java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.telephony.euicc.EuiccNotification: java.lang.String getTargetAddr()> -> _SOURCE_
<android.bluetooth.BluetoothHearingAid: java.util.List getConnectedDevices()> -> _SOURCE_
<android.telephony.VisualVoicemailSms: int describeContents()> -> _SOURCE_
<android.bluetooth.IBluetoothHearingAid$Default: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
<android.app.admin.DevicePolicyManager: int getPasswordMinimumUpperCase(android.content.ComponentName,int)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub: android.os.IBinder asBinder()> -> _SOURCE_
<android.net.wifi.nl80211.IApInterface$Default: java.lang.String getInterfaceName()> -> _SOURCE_
<android.content.pm.InstallSourceInfo: java.lang.String getInstallingPackageName()> -> _SOURCE_
<android.telephony.ims.ImsExternalCallState: android.net.Uri getAddress()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean setPreferredNetworkTypeToGlobal()> -> _SOURCE_
<android.hardware.ICameraService$Stub$Proxy: android.hardware.CameraInfo getCameraInfo(int)> -> _SOURCE_
<android.os.IRemoteCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.media.MicrophoneInfo: float getMinSpl()> -> _SOURCE_
<android.bluetooth.BluetoothActivityEnergyInfo: long getControllerTxTimeMillis()> -> _SOURCE_
<android.content.Context: java.util.concurrent.Executor getMainExecutor()> -> _SOURCE_
<android.os.IUpdateEngineCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.data.ApnSetting: java.lang.String getUser()> -> _SOURCE_
<android.os.storage.StorageManager: boolean isCheckpointSupported()> -> _SOURCE_
<android.content.res.XmlBlock$Parser: java.lang.String getIdAttribute()> -> _SOURCE_
<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager$DelegateImpl getDelegate()> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: java.lang.String getEsn(int)> -> _SOURCE_
<android.view.textclassifier.TextClassifierEvent: int[] getActionIndices()> -> _SOURCE_
<android.media.MediaCodecInfo$EncoderCapabilities: android.util.Range getComplexityRange()> -> _SOURCE_
<android.app.NotificationHistory$HistoricalNotification: java.lang.String getTitle()> -> _SOURCE_
<android.webkit.WebViewFactory: android.webkit.IWebViewUpdateService getUpdateServiceUnchecked()> -> _SOURCE_
<android.os.IVoldTaskListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.location.IBatchedLocationCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.NotificationHistory$HistoricalNotification: java.lang.String getConversationId()> -> _SOURCE_
<android.accessibilityservice.IAccessibilityServiceConnection$Stub$Proxy: android.accessibilityservice.AccessibilityServiceInfo getServiceInfo()> -> _SOURCE_
<android.telephony.ServiceState: java.lang.String getRoamingLogString(int)> -> _SOURCE_
<android.provider.Settings$System: long getLong(android.content.ContentResolver,java.lang.String)> -> _SOURCE_
<android.telephony.CellSignalStrengthNr: int getCsiRsrp()> -> _SOURCE_
<android.os.storage.IStorageManager$Stub$Proxy: android.os.storage.VolumeRecord[] getVolumeRecords(int)> -> _SOURCE_
<android.view.textclassifier.TextLanguage: android.os.Bundle getExtras()> -> _SOURCE_
<android.window.IDisplayAreaOrganizer$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.LoadedApk: java.lang.String[] getSplitAppDirs()> -> _SOURCE_
<android.webkit.IWebViewUpdateService$Default: android.content.pm.PackageInfo getCurrentWebViewPackage()> -> _SOURCE_
<android.widget._$$Lambda$TextView$DJlzb7VS7J_1890Kto7GAApQDN0: java.lang.Object get()> -> _SOURCE_
<android.telephony.TelephonyManager: android.content.ComponentName getDefaultRespondViaMessageApplication()> -> _SOURCE_
<android.hardware.camera2.CaptureResult$Key: android.hardware.camera2.impl.CameraMetadataNative$Key getNativeKey()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean isModemEnabledForSlot(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.provider.FontsContract$FontFamilyResult: android.provider.FontsContract$FontInfo[] getFonts()> -> _SOURCE_
<android.text.style.TextAppearanceSpan: android.content.res.ColorStateList getLinkTextColor()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.lang.String getCdmaPrlVersion(int)> -> _SOURCE_
<android.hardware.hdmi.HdmiControlManager: java.util.List getConnectedDevicesList()> -> _SOURCE_
<android.net.TrafficStats: long getMobileRxPackets()> -> _SOURCE_
<android.view.ViewConfiguration: float getScaledVerticalScrollFactor()> -> _SOURCE_
<android.app.TaskInfo: android.window.WindowContainerToken getToken()> -> _SOURCE_
<android.app.NotificationManager: android.app.NotificationChannel getNotificationChannel(java.lang.String)> -> _SOURCE_
<com.android.internal.database.SortCursor: long getLong(int)> -> _SOURCE_
<android.telecom.TelecomManager: java.lang.String getSystemDialerPackage()> -> _SOURCE_
<com.android.internal.widget.ICheckCredentialProgressCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.internal.os.BackgroundThread: android.os.Handler getHandler()> -> _SOURCE_
<android.hardware.radio.ProgramList$Chunk: java.util.Set getModified()> -> _SOURCE_
<android.app.ContextImpl: android.content.res.Resources$Theme getTheme()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean isDataAllowedInVoiceCall(int)> -> _SOURCE_
<android.accounts.AccountManager: android.accounts.Account[] getAccountsForPackage(java.lang.String,int)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.media.IMediaHTTPConnection$Default: java.lang.String getUri()> -> _SOURCE_
<android.view.contentcapture.IDataShareWriteAdapter$Stub: android.view.contentcapture.IDataShareWriteAdapter getDefaultImpl()> -> _SOURCE_
<android.os.IInstalld$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: java.util.Map getKernelWakelockStats()> -> _SOURCE_
<android.app.ContextImpl: android.os.IBinder getActivityToken()> -> _SOURCE_
<android.os.storage.StorageManager: boolean isEncrypted()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean hasCarrierPrivileges(int)> -> _SOURCE_
<android.telephony.SmsCbMessage: int describeContents()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.util.Set getMimeGroup(java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.ISetOpportunisticDataCallback$Stub$Proxy: android.os.IBinder asBinder()> -> _SOURCE_
<android.telephony.TelephonyManager: int getDataState()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String nvReadItem(int)> -> _SOURCE_
<com.android.internal.telephony.ICarrierConfigLoader$Stub: com.android.internal.telephony.ICarrierConfigLoader getDefaultImpl()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: android.telephony.CarrierRestrictionRules getAllowedCarriers()> -> _SOURCE_
<android.os.Build$Partition: java.lang.String getName()> -> _SOURCE_
<android.content.ContentResolver$MimeTypeInfo: android.graphics.drawable.Icon getIcon()> -> _SOURCE_
<android.net.Uri$HierarchicalUri: java.lang.String getEncodedSchemeSpecificPart()> -> _SOURCE_
<android.telephony.TelephonyManager: android.telephony.CdmaEriInformation getCdmaEriInformation()> -> _SOURCE_
<android.widget.AdapterViewAnimator: android.animation.ObjectAnimator getDefaultInAnimation()> -> _SOURCE_
<android.media.AudioDeviceInfo: int[] getEncapsulationMetadataTypes()> -> _SOURCE_
<android.app.ApplicationPackageManager: android.content.pm.PackageInfo getPackageInfo(android.content.pm.VersionedPackage,int)> -> _SOURCE_
<android.media.session.MediaSessionManager: java.util.List getSession2Tokens(int)> -> _SOURCE_
<android.app.Notification$BubbleMetadata: android.graphics.drawable.Icon getBubbleIcon()> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec: java.util.Date getKeyValidityForConsumptionEnd()> -> _SOURCE_
<android.view.IWindowSession$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.ServiceState: java.lang.String getVoiceOperatorAlphaShort()> -> _SOURCE_
<android.hardware.display.DisplayManager: android.graphics.Point getStableDisplaySize()> -> _SOURCE_
<android.telephony.TelephonyManager: com.android.internal.telephony.CellNetworkScanResult getAvailableNetworks()> -> _SOURCE_
<android.telephony.ServiceState: java.util.List getNetworkRegistrationInfoListForDomain(int)> -> _SOURCE_
<android.hardware.soundtrigger.SoundTrigger$ModuleProperties: java.lang.String getImplementor()> -> _SOURCE_
<android.view.IWindowManager$Stub$Proxy: float getCurrentAnimatorScale()> -> _SOURCE_
<android.view.IRecentsAnimationController$Stub: android.view.IRecentsAnimationController getDefaultImpl()> -> _SOURCE_
<android.app.VrManager: boolean isVrModeEnabled()> -> _SOURCE_
<android.app.IActivityManager$Stub$Proxy: android.content.pm.ParceledListSlice getRecentTasks(int,int,int)> -> _SOURCE_
<android.widget.ListPopupWindow: long getSelectedItemId()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: android.os.BatteryStats$Timer getFlashlightTurnedOnTimer()> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: java.util.List getUsesLibraries()> -> _SOURCE_
<android.telephony.SmsMessage: int getStatus()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: java.util.List getEmergencyNumberListTestMode()> -> _SOURCE_
<android.content.ContextWrapper: android.app.IApplicationThread getIApplicationThread()> -> _SOURCE_
<android.net.Ikev2VpnProfile: java.lang.String getUserIdentity()> -> _SOURCE_
<android.media.MediaCodec: android.os.PersistableBundle getMetrics()> -> _SOURCE_
<android.hardware.biometrics.IBiometricServiceLockoutResetCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.net.wifi.nl80211.IClientInterface$Stub$Proxy: byte[] getMacAddress()> -> _SOURCE_
<android.os.IUserManager$Default: long getUserStartRealtime()> -> _SOURCE_
<android.view.IPinnedStackListener$Stub: android.view.IPinnedStackListener getDefaultImpl()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: android.app.admin.PasswordMetrics getPasswordMinimumMetrics(int)> -> _SOURCE_
<com.android.internal.telephony.ISub$Stub: android.os.IBinder asBinder()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getOtaSpNumberSchemaForPhone(int,java.lang.String)> -> _SOURCE_
<android.hardware.camera2.params.SessionConfiguration: android.hardware.camera2.CaptureRequest getSessionParameters()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: boolean isRadioOnWithFeature(java.lang.String,java.lang.String)> -> _SOURCE_
<android.os.storage.IObbActionListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telecom.PhoneAccount: android.net.Uri getSubscriptionAddress()> -> _SOURCE_
<android.content.rollback.IRollbackManager$Default: android.content.pm.ParceledListSlice getAvailableRollbacks()> -> _SOURCE_
<android.bluetooth.IBluetooth$Stub$Proxy: long getSupportedProfiles()> -> _SOURCE_
<android.app.trust.ITrustManager$Stub: android.app.trust.ITrustManager getDefaultImpl()> -> _SOURCE_
<android.telephony.CellInfo: android.telephony.CellInfo create(android.hardware.radio.V1_5.CellInfo,long)> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Default: android.telephony.ImsiEncryptionInfo getCarrierInfoForImsiEncryption(int,int,java.lang.String)> -> _SOURCE_
<android.os.BaseBundle: boolean isDefinitelyEmpty()> -> _SOURCE_
<android.telephony.SmsMessage: int[] calculateLength(java.lang.String,boolean)> -> _SOURCE_
<com.android.internal.widget.LockPatternUtils: java.lang.String getDeviceOwnerInfo()> -> _SOURCE_
<android.view.InsetsAnimationControlImpl: float getCurrentFraction()> -> _SOURCE_
<android.hardware.location.IContextHubCallback$Stub: android.hardware.location.IContextHubCallback getDefaultImpl()> -> _SOURCE_
<android.view.contentcapture.ViewNode: android.view.autofill.AutofillValue getAutofillValue()> -> _SOURCE_
<android.net.ProxyInfo: java.lang.String getExclusionListAsString()> -> _SOURCE_
<android.app.backup.BackupManager: boolean isBackupEnabled()> -> _SOURCE_
<android.content.ContextWrapper: java.lang.String getBasePackageName()> -> _SOURCE_
<android.print.ILayoutResultCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.hardware.SensorPrivacyManager: boolean isSensorPrivacyEnabled()> -> _SOURCE_
<android.app.Fragment: android.app.SharedElementCallback getExitTransitionCallback()> -> _SOURCE_
<android.telephony.CarrierConfigManager: void overrideConfig(int,android.os.PersistableBundle,boolean)> -> _SOURCE_
<android.media.MediaCas: android.hardware.cas.V1_0.IMediaCasService getService()> -> _SOURCE_
<android.content.SyncRequest: java.lang.String getProvider()> -> _SOURCE_
<android.graphics.drawable.LayerDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: java.lang.String iccTransmitApduBasicChannelBySlot(int,java.lang.String,int,int,int,int,int,java.lang.String)> -> _SOURCE_
<android.accessibilityservice.AccessibilityService: java.util.List getWindows()> -> _SOURCE_
<com.android.internal.app.WindowDecorActionBar: android.view.View getCustomView()> -> _SOURCE_
<android.media.midi.IMidiManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.timezonedetector.TelephonyTimeZoneSuggestion: java.lang.String getZoneId()> -> _SOURCE_
<android.app.WallpaperInfo: java.lang.String getPackageName()> -> _SOURCE_
<android.media.AudioTrack: float getMinVolume()> -> _SOURCE_
<android.telecom.TelecomManager: boolean isIncomingCallPermitted(android.telecom.PhoneAccountHandle)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.util.MergedConfiguration: android.content.res.Configuration getMergedConfiguration()> -> _SOURCE_
<android.net.lowpan.ILowpanInterface$Stub$Proxy: byte[] getExtendedAddress()> -> _SOURCE_
<android.content.pm.IPackageInstaller$Stub$Proxy: android.content.pm.ParceledListSlice getAllSessions(int)> -> _SOURCE_
<android.telephony.CarrierRestrictionRules: java.util.List getAllowedCarriers()> -> _SOURCE_
<android.telephony.ims.ImsRcsManager: boolean isAvailable(int)> -> _SOURCE_
<android.os.Environment: java.io.File getApexDirectory()> -> _SOURCE_
<android.hardware.camera2.params.MeteringRectangle: android.util.Size getSize()> -> _SOURCE_
<android.bluetooth.BluetoothHearingAid: long getHiSyncId(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: boolean isVoicemailVibrationEnabled(android.telecom.PhoneAccountHandle)> -> _SOURCE_
<android.view.contentcapture.IContentCaptureManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.widget.Magnifier: android.graphics.Point getSourcePosition()> -> _SOURCE_
<android.util.XmlPullAttributes: java.lang.String getPositionDescription()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Default: java.util.List getCrossProfilePackages(android.content.ComponentName)> -> _SOURCE_
<android.app.IActivityManager$Default: java.util.List getProcessesInErrorState()> -> _SOURCE_
<com.android.internal.policy.PhoneWindow: android.transition.Transition getSharedElementExitTransition()> -> _SOURCE_
<android.hardware.location.NanoApp: java.lang.String getPublisher()> -> _SOURCE_
<android.net.IpConfiguration: android.net.IpConfiguration$IpAssignment getIpAssignment()> -> _SOURCE_
<android.net.wifi.nl80211.IWificond$Default: int[] getAvailable5gNonDFSChannels()> -> _SOURCE_
<android.content.pm.Signature: java.security.PublicKey getPublicKey()> -> _SOURCE_
<android.app.usage.StorageStatsManager: java.util.Collection queryCratesForUser(java.util.UUID,android.os.UserHandle)> -> _SOURCE_
<android.hardware.input.InputManager: android.hardware.input.TouchCalibration getTouchCalibration(java.lang.String,int)> -> _SOURCE_
<android.telephony.ClientRequestStats: java.lang.String getCallingPackage()> -> _SOURCE_
<com.android.internal.os.BatteryStatsHistory: android.util.AtomicFile getActiveFile()> -> _SOURCE_
<android.telephony.ims.ImsMmTelManager: boolean isAdvancedCallingSettingEnabled()> -> _SOURCE_
<android.hardware.camera2.params.StreamConfiguration: android.util.Size getSize()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.lang.String getLine1AlphaTagForDisplay(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.os.UserManager: boolean isUserAGoat()> -> _SOURCE_
<com.android.internal.database.SortCursor: byte[] getBlob(int)> -> _SOURCE_
<android.bluetooth.IBluetoothA2dpSink$Stub$Proxy: android.bluetooth.BluetoothAudioConfig getAudioConfig(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<android.hardware.display.IDisplayManagerCallback$Stub: android.hardware.display.IDisplayManagerCallback getDefaultImpl()> -> _SOURCE_
<android.graphics.ColorSpace$Connector: android.graphics.ColorSpace getDestination()> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: java.lang.String getClassLoaderName()> -> _SOURCE_
<android.app.IActivityManager$Default: android.content.pm.UserInfo getCurrentUser()> -> _SOURCE_
<com.android.internal.statusbar.IStatusBar$Stub: com.android.internal.statusbar.IStatusBar getDefaultImpl()> -> _SOURCE_
<android.graphics.drawable.GradientDrawable: float[] getCornerRadii()> -> _SOURCE_
<android.net.ConnectivityManager: java.lang.String[] getTetheringErroredIfaces()> -> _SOURCE_
<android.view.IRemoteAnimationRunner$Stub: android.view.IRemoteAnimationRunner getDefaultImpl()> -> _SOURCE_
<com.android.internal.telephony.ISub$Default: android.telephony.SubscriptionInfo getActiveSubscriptionInfo(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.app.LoadedApk: java.lang.String[] getOverlayDirs()> -> _SOURCE_
<android.media.AudioManager: int getUiSoundsStreamType()> -> _SOURCE_
<android.webkit.WebMessage: java.lang.String getData()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.lang.CharSequence getText(java.lang.String,int,android.content.pm.ApplicationInfo)> -> _SOURCE_
<android.content.pm.parsing.component.ParsedComponent: java.lang.CharSequence getNonLocalizedLabel()> -> _SOURCE_
<android.app.role.IRoleManager$Stub$Proxy: java.lang.String getDefaultSmsPackage(int)> -> _SOURCE_
<com.android.internal.os.RpmStats: com.android.internal.os.RpmStats$PowerStateSubsystem getSubsystem(java.lang.String)> -> _SOURCE_
<android.telephony.CellSignalStrengthCdma: int hashCode()> -> _SOURCE_
<android.telephony.CellSignalStrengthGsm: int hashCode()> -> _SOURCE_
<com.android.internal.util.function.pooled.PooledLambdaImpl: long getAsLong()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: android.os.BatteryStats$Timer getForegroundActivityTimer()> -> _SOURCE_
<android.media.AudioManager: int getStreamMinVolumeInt(int)> -> _SOURCE_
<android.graphics.RenderNode: float getPivotX()> -> _SOURCE_
<android.telephony.mbms.MbmsTempFileProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SOURCE_
<android.telephony.SmsCbMessage: java.lang.String getLanguageCode()> -> _SOURCE_
<android.view.ViewConfiguration: int getJumpTapTimeout()> -> _SOURCE_
<android.hardware.display.VirtualDisplay: android.view.Display getDisplay()> -> _SOURCE_
<android.content.ContentProviderProxy: android.database.Cursor query(java.lang.String,java.lang.String,android.net.Uri,java.lang.String[],android.os.Bundle,android.os.ICancellationSignal)> -> _SOURCE_
<android.os.BatterySaverPolicyConfig: boolean getDisableAod()> -> _SOURCE_
<android.content.ContentResolver: android.content.IContentService getContentService()> -> _SOURCE_
<android.security.keystore.recovery.KeyChainSnapshot: byte[] getServerParams()> -> _SOURCE_
<android.app.usage.IStorageStatsManager$Stub$Proxy: long getCacheQuotaBytes(java.lang.String,int,java.lang.String)> -> _SOURCE_
<android.app.ApplicationPackageManager: boolean isInstantApp(java.lang.String)> -> _SOURCE_
<android.content.res.AssetManager: java.lang.String[] getLocales()> -> _SOURCE_
<android.net.wifi.nl80211.IScanEvent$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.CallForwardingInfo: int describeContents()> -> _SOURCE_
<android.telephony.SmsCbLocation: int getCid()> -> _SOURCE_
<android.view.autofill.AutofillPopupWindow$2: android.os.IBinder getApplicationWindowToken()> -> _SOURCE_
<android.security.keymaster.KeymasterCertificateChain: java.util.List getCertificates()> -> _SOURCE_
<android.app.contentsuggestions.IContentSuggestionsManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.internal.telephony.IPhoneStateListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.ActivityOptions: java.lang.String getPackageName()> -> _SOURCE_
<android.hardware.Camera$Parameters: boolean getAutoExposureLock()> -> _SOURCE_
<com.android.internal.telephony.SmsApplication$SmsApplicationData: java.lang.String access$102(com.android.internal.telephony.SmsApplication$SmsApplicationData,java.lang.String)> -> _SOURCE_
<android.printservice.PrintServiceInfo: android.content.pm.ResolveInfo getResolveInfo()> -> _SOURCE_
<android.bluetooth.IBluetoothHidHost$Stub: android.bluetooth.IBluetoothHidHost getDefaultImpl()> -> _SOURCE_
<android.bluetooth.BluetoothHeadsetClient: java.util.List getCurrentCalls(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<android.content.pm.IDataLoader$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.internal.telephony.INumberVerificationCallback$Default: android.os.IBinder asBinder()> -> _SOURCE_
<android.view.WindowInsetsAnimation: float getFraction()> -> _SOURCE_
<android.animation.PathKeyframes: java.lang.Class getType()> -> _SOURCE_
<android.util.apk.WrappedX509Certificate: java.util.Date getNotBefore()> -> _SOURCE_
<android.content.pm.ShortcutManager: long getRateLimitResetTime()> -> _SOURCE_
<android.telephony.euicc.DownloadableSubscription: java.lang.String getConfirmationCode()> -> _SOURCE_
<android.os.connectivity.WifiBatteryStats: long getIdleTimeMillis()> -> _SOURCE_
<android.app.IActivityManager$Stub$Proxy: android.content.pm.ParceledListSlice getHistoricalProcessExitReasons(java.lang.String,int,int,int)> -> _SOURCE_
<android.content.pm.ShortcutManager$ShareShortcutInfo: android.content.ComponentName getTargetComponent()> -> _SOURCE_
<android.app.INotificationManager$Stub$Proxy: android.app.NotificationChannelGroup getPopulatedNotificationChannelGroupForPackage(java.lang.String,int,java.lang.String,boolean)> -> _SOURCE_
<android.app.LoadedApk$ServiceDispatcher: java.lang.RuntimeException getUnbindLocation()> -> _SOURCE_
<android.bluetooth.IBluetoothMapClient$Stub: android.bluetooth.IBluetoothMapClient getDefaultImpl()> -> _SOURCE_
<android.hardware.camera2.legacy.RequestHandlerThread: android.os.Handler getHandler()> -> _SOURCE_
<android.content.ContextWrapper: android.os.UserHandle getUser()> -> _SOURCE_
<android.app.Notification$WearableExtender: java.util.List getPages()> -> _SOURCE_
<com.android.internal.os.BatteryStatsHelper: double getMaxDrainedPower()> -> _SOURCE_
<android.app.NotificationManager: java.util.List getAllowedAssistantAdjustments()> -> _SOURCE_
<android.app.SyncNotedAppOp: java.lang.String getOp()> -> _SOURCE_
<android.content.om.OverlayInfo: java.lang.String getTargetPackageName()> -> _SOURCE_
<android.telephony.SmsCbMessage: int getMaximumWaitingDuration()> -> _SOURCE_
<android.telephony.TelephonyManager: byte[] iccExchangeSimIO(int,int,int,int,int,int,java.lang.String)> -> _SOURCE_
<android.content.ClipData$Item: java.lang.CharSequence getText()> -> _SOURCE_
<android.hardware.radio.ProgramSelector$Identifier: long getValue()> -> _SOURCE_
<android.net.lowpan.ILowpanInterface$Stub$Proxy: java.lang.String getDriverVersion()> -> _SOURCE_
<android.app.Activity: android.app.ActionBar getActionBar()> -> _SOURCE_
<android.app.IUriGrantsManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.text.DynamicLayout: int[] getBlockIndices()> -> _SOURCE_
<android.telephony.BarringInfo$BarringServiceInfo: int getBarringType()> -> _SOURCE_
<android.net.LocalSocketImpl: java.io.OutputStream getOutputStream()> -> _SOURCE_
<android.telephony.ims.ImsCallProfile: android.os.Bundle getCallExtras()> -> _SOURCE_
<android.location.GpsMeasurement: double getElevationUncertaintyInDeg()> -> _SOURCE_
<android.view.textclassifier.ConversationActions$Request: java.util.List getConversation()> -> _SOURCE_
<android.telephony.NetworkRegistrationInfo: boolean isRegistered()> -> _SOURCE_
<android.view.IWindow$Stub: android.view.IWindow getDefaultImpl()> -> _SOURCE_
<android.os.image.DynamicSystemManager: android.gsi.GsiProgress getInstallationProgress()> -> _SOURCE_
<android.telephony.CellSignalStrengthNr: int getSsRsrq()> -> _SOURCE_
<com.android.internal.view.menu.StandardMenuPopup: android.widget.ListView getListView()> -> _SOURCE_
<android.telephony.ServiceState: int getCssIndicator()> -> _SOURCE_
<com.android.internal.os.BatteryStatsHelper: double getMaxPower()> -> _SOURCE_
<android.security.IKeyChainService$Stub$Proxy: java.util.List getCaCertificateChainAliases(java.lang.String,boolean)> -> _SOURCE_
<android.os.IDumpstateListener$Stub: android.os.IDumpstateListener getDefaultImpl()> -> _SOURCE_
<android.telephony.emergency.EmergencyNumber: java.lang.String getCountryIso()> -> _SOURCE_
<android.view.textclassifier.ConversationAction: java.lang.CharSequence getTextReply()> -> _SOURCE_
<android.app.SearchManager: android.content.ComponentName getGlobalSearchActivity()> -> _SOURCE_
<android.os.BatterySaverPolicyConfig: boolean getDisableLaunchBoost()> -> _SOURCE_
<android.app.PictureInPictureParams: float getAspectRatio()> -> _SOURCE_
<android.net.INetworkStatsService$Stub$Proxy: long getUidStats(int,int)> -> _SOURCE_
<android.media.MediaCodec$OutputFrame: android.media.MediaCodec$LinearBlock getLinearBlock()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: android.util.ArrayMap getJobStats()> -> _SOURCE_
<android.ddm.DdmHandleAppName: android.ddm.DdmHandleAppName$Names getNames()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isIdle()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.CharSequence getEndUserSessionMessage(android.content.ComponentName)> -> _SOURCE_
<android.location.GpsMeasurement: float getCarrierFrequencyInHz()> -> _SOURCE_
<android.inputmethodservice.InputMethodService: android.view.inputmethod.EditorInfo getCurrentInputEditorInfo()> -> _SOURCE_
<android.text.MeasuredParagraph: char[] getChars()> -> _SOURCE_
<android.widget.LinearLayout: android.graphics.drawable.Drawable getDividerDrawable()> -> _SOURCE_
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName,int,int)> -> _SOURCE_
<com.android.internal.telephony.SmsHeader: java.lang.String toString()> -> _SOURCE_
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
<com.android.internal.view.IDragAndDropPermissions$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.hardware.Camera$Parameters: java.util.List getSupportedJpegThumbnailSizes()> -> _SOURCE_
<com.android.internal.telephony.IOns$Default: boolean isEnabled(java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.GsmAlphabet: int[] access$100()> -> _SOURCE_
<android.service.euicc.EuiccProfileInfo: java.lang.String getProfileName()> -> _SOURCE_
<android.drm.DrmManagerClient: java.lang.String[] getAvailableDrmEngines()> -> _SOURCE_
<android.media.IAudioServerStateDispatcher$Stub: android.media.IAudioServerStateDispatcher getDefaultImpl()> -> _SOURCE_
<android.telephony.ims.feature._$$Lambda$RcsFeature$RcsFeatureBinder$Ca_Lrg0AjuEm0MywLfQlW_OLbac: java.lang.Object get()> -> _SOURCE_
<android.telecom.TelecomAnalytics: java.util.List getCallAnalytics()> -> _SOURCE_
<android.hardware.location.ContextHubManager: android.hardware.location.ContextHubClient createClient(android.hardware.location.ContextHubInfo,android.hardware.location.ContextHubClientCallback,java.util.concurrent.Executor)> -> _SOURCE_
<android.nfc.INfcAdapterExtras$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.view.ViewConfiguration: int getMaximumDrawingCacheSize()> -> _SOURCE_
<android.telephony.ims.RcsContactUceCapability: android.net.Uri getContactUri()> -> _SOURCE_
<android.telecom.TelecomManager: int getCallState()> -> _SOURCE_
<android.bluetooth.IBluetoothHearingAid$Stub: android.bluetooth.IBluetoothHearingAid getDefaultImpl()> -> _SOURCE_
<android.os.Environment: java.io.File getDataDirectory(java.lang.String)> -> _SOURCE_
<android.telephony.NetworkScanRequest: int describeContents()> -> _SOURCE_
<android.bluetooth.le.ScanFilter: byte[] getServiceDataMask()> -> _SOURCE_
<android.bluetooth.IBluetoothHidDevice$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.backup.FullBackupDataOutput: android.app.backup.BackupDataOutput getData()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isCallerApplicationRestrictionsManagingPackage()> -> _SOURCE_
<android.view.IWindowManager$Stub$Proxy: float getAnimationScale(int)> -> _SOURCE_
<android.media.MediaCodecInfo$AudioCapabilities: android.util.Range[] getSupportedSampleRateRanges()> -> _SOURCE_
<android.accounts.IAccountManager$Stub$Proxy: java.util.Map getPackagesAndVisibilityForAccount(android.accounts.Account)> -> _SOURCE_
<android.provider.Settings$Secure: float getFloatForUser(android.content.ContentResolver,java.lang.String,float,int)> -> _SOURCE_
<android.telephony.ICellInfoCallback$Stub: android.os.IBinder asBinder()> -> _SOURCE_
<android.media.tv.TvInputManager: android.media.tv.TvInputInfo getTvInputInfo(java.lang.String)> -> _SOURCE_
<android.view.CutoutSpecification: android.graphics.Rect getBottomBound()> -> _SOURCE_
<android.hardware.input.InputManager: android.hardware.input.KeyboardLayout[] getKeyboardLayouts()> -> _SOURCE_
<android.media.IAudioService$Default: java.util.List getDevicesForAttributes(android.media.AudioAttributes)> -> _SOURCE_
<android.print.PrintDocumentInfo: long getDataSize()> -> _SOURCE_
<android.app.assist.AssistStructure$ViewNode: android.view.ViewStructure$HtmlInfo getHtmlInfo()> -> _SOURCE_
<android.graphics.drawable.AdaptiveIconDrawable: boolean isStateful()> -> _SOURCE_
<android.view.ViewConfiguration: int getHoverTooltipShowTimeout()> -> _SOURCE_
<android.bluetooth.IBluetoothManager$Stub$Proxy: java.lang.String getAddress()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getCrossProfilePackages(android.content.ComponentName)> -> _SOURCE_
<android.hardware.camera2.utils.TypeReference: java.lang.reflect.Type getType()> -> _SOURCE_
<android.telephony.PhoneNumberUtils: java.lang.String calledPartyBCDFragmentToString(byte[],int,int,int)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.os.IDeviceIdleController$Stub$Proxy: java.lang.String[] getFullPowerWhitelist()> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: boolean isBleScanAlwaysAvailable()> -> _SOURCE_
<android.hardware.camera2.impl.CameraOfflineSessionImpl: android.hardware.camera2.CameraDevice getDevice()> -> _SOURCE_
<android.app.DirectAction: android.os.IBinder getActivityId()> -> _SOURCE_
<android.telephony.CarrierConfigManager$Ims: android.os.PersistableBundle access$200()> -> _SOURCE_
<com.android.internal.telephony.euicc.ISetNicknameCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.media.MediaPlayer$DrmInfo: java.util.UUID[] getSupportedSchemes()> -> _SOURCE_
<android.security.keystore.IKeystoreService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.net.lowpan.LowpanManager: android.net.lowpan.LowpanInterface getInterface(java.lang.String)> -> _SOURCE_
<android.view.WindowInsets: android.graphics.Insets getStableInsets()> -> _SOURCE_
<android.graphics.Paint: java.lang.String getFontFeatureSettings()> -> _SOURCE_
<android.telephony.UiccSlotInfo: boolean isRemovable()> -> _SOURCE_
<android.content.pm.IPackageInstallerCallback$Stub: android.content.pm.IPackageInstallerCallback getDefaultImpl()> -> _SOURCE_
<android.content.ContentResolver: android.content.SyncAdapterType[] getSyncAdapterTypesAsUser(int)> -> _SOURCE_
<android.text.FontConfig$Family: java.lang.String getName()> -> _SOURCE_
<android.content.pm.IPackageInstaller$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.content.ContentProvider: android.os.UserHandle getUserHandleFromUri(android.net.Uri)> -> _SOURCE_
<android.location.Address: java.lang.String getFeatureName()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.telephony.PreciseCallState: java.lang.String toString()> -> _SOURCE_
<android.telecom.TelecomManager: android.net.Uri getAdnUriForPhoneAccount(android.telecom.PhoneAccountHandle)> -> _SOURCE_
<android.media.ExifInterface: long getDateTime()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.lang.String iccTransmitApduBasicChannel(int,java.lang.String,int,int,int,int,int,java.lang.String)> -> _SOURCE_
<android.os.IPowerManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.net.http.SslCertificate: android.net.http.SslCertificate$DName getIssuedBy()> -> _SOURCE_
<android.app.IActivityManager$Default: java.util.List getTasks(int)> -> _SOURCE_
<android.hardware.camera2.params.StreamConfigurationMap: int[] getInputFormats()> -> _SOURCE_
<android.view.inputmethod.InputMethodManager: boolean isInputMethodPickerShown()> -> _SOURCE_
<android.location.ILocationManager$Default: java.util.List getAllProviders()> -> _SOURCE_
<android.permission.PermissionManager: java.util.Set getAutoRevokeExemptionGrantedPackages()> -> _SOURCE_
<android.print.IPrintDocumentAdapterObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.IccOpenLogicalChannelResponse: java.lang.String toString()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.widget.ListPopupWindow: android.view.View getAnchorView()> -> _SOURCE_
<com.android.internal.os.ZygoteConnection: java.io.FileDescriptor getFileDescriptor()> -> _SOURCE_
<android.hardware.camera2.impl.CaptureCallbackHolder: android.hardware.camera2.CaptureRequest getRequest()> -> _SOURCE_
<android.text.style.CharacterStyle$Passthrough: android.text.style.CharacterStyle getUnderlying()> -> _SOURCE_
<android.app.INotificationManager$Stub$Proxy: android.content.ComponentName getEffectsSuppressor()> -> _SOURCE_
<android.hardware.usb.IUsbManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telephony.euicc.EuiccManager: boolean isSupportedCountry(java.lang.String)> -> _SOURCE_
<com.android.internal.util.MemInfoReader: long getSwapTotalSizeKb()> -> _SOURCE_
<android.net.http.SslCertificate: android.net.http.SslCertificate$DName getIssuedTo()> -> _SOURCE_
<android.app.backup.BackupManager: java.lang.String getDataManagementLabel(java.lang.String)> -> _SOURCE_
<android.telephony.DataFailCause: boolean isEventLoggable(int)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getMeid()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.os.IThermalEventListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.media.session.MediaController: android.media.session.MediaController$TransportControls getTransportControls()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: android.telephony.IccOpenLogicalChannelResponse iccOpenLogicalChannelBySlot(int,java.lang.String,java.lang.String,int)> -> _SOURCE_
<android.view.textclassifier.SelectionEvent: boolean isTerminal()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.lang.CharSequence getOrganizationNameForUser(int)> -> _SOURCE_
<android.media.soundtrigger_middleware.ISoundTriggerCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.AppOpsManager: android.app.AppOpsManager$PausedNotedAppOpsCollection pauseNotedAppOpsCollection()> -> _SOURCE_
<android.animation.AnimatorSet$SeekState: long getPlayTime()> -> _SOURCE_
<android.app.NotificationManager: java.util.List getNotificationChannelGroups()> -> _SOURCE_
<android.telephony.UiccCardInfo: int describeContents()> -> _SOURCE_
<android.telephony.CellIdentityWcdma: int getMcc()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean isMvnoMatched(int,int,java.lang.String)> -> _SOURCE_
<android.telephony.SubscriptionManager: int lambda$createSubscriptionGroup$7(java.lang.Integer)> -> _SOURCE_
<android.bluetooth.IBluetooth$Stub$Proxy: android.os.ParcelUuid[] getRemoteUuids(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<android.webkit.WebView$PrivateAccess: float getHorizontalScrollFactor()> -> _SOURCE_
<android.widget.RemoteViewsAdapter$FixedSizeRemoteViewsCache: android.widget.RemoteViewsAdapter$RemoteViewsMetaData getTemporaryMetaData()> -> _SOURCE_
<android.graphics.drawable.shapes.Shape: float getHeight()> -> _SOURCE_
<android.app.IRequestFinishCallback$Stub: android.app.IRequestFinishCallback getDefaultImpl()> -> _SOURCE_
<android.telephony.TelephonyManager: int getDataActivity()> -> _SOURCE_
<android.view.inputmethod.InputMethodManager: java.util.List getEnabledInputMethodListAsUser(int)> -> _SOURCE_
<android.telephony.ims.aidl.IImsCallSessionListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.location.GnssMeasurement: long getReceivedSvTimeUncertaintyNanos()> -> _SOURCE_
<android.media.midi.IMidiManager$Stub$Proxy: android.media.midi.MidiDeviceStatus getDeviceStatus(android.media.midi.MidiDeviceInfo)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean isVideoCallingEnabled(java.lang.String,java.lang.String)> -> _SOURCE_
<android.net.lowpan.ILowpanInterface$Stub$Proxy: android.net.lowpan.LowpanChannelInfo[] getSupportedChannels()> -> _SOURCE_
<android.view.IWindowId$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.util.apk.ApkSigningBlockUtils: android.util.Pair getSignatureAlgorithmJcaSignatureAlgorithm(int)> -> _SOURCE_
<android.app.SharedPreferencesImpl: float getFloat(java.lang.String,float)> -> _SOURCE_
<android.net.ConnectivityManager: java.lang.String[] getTetherableIfaces()> -> _SOURCE_
<android.printservice.recommendation.IRecommendationsChangeListener$Stub: android.printservice.recommendation.IRecommendationsChangeListener getDefaultImpl()> -> _SOURCE_
<android.telephony.TelephonyDisplayInfo: int getOverrideNetworkType()> -> _SOURCE_
<android.accessibilityservice.IAccessibilityServiceClient$Stub: android.accessibilityservice.IAccessibilityServiceClient getDefaultImpl()> -> _SOURCE_
<android.telephony.TelephonyManager: int changeIccLockPassword(java.lang.String,java.lang.String)> -> _SOURCE_
<android.media.session.ISessionCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.media.AudioRecordingConfiguration: android.media.AudioFormat getFormat()> -> _SOURCE_
<android.net.IConnectivityDiagnosticsCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.ims.internal.IImsFeatureStatusCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.debug.AdbManager: boolean isAdbWifiQrSupported()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: java.lang.String getCdmaEriTextForSubscriber(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.content.pm.SharedLibraryInfo: java.lang.String getPath()> -> _SOURCE_
<android.app.job.JobParameters: android.net.Uri[] getTriggeredContentUris()> -> _SOURCE_
<com.android.ims.internal.IImsVideoCallProvider$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.print.IWriteResultCallback$Stub: android.print.IWriteResultCallback getDefaultImpl()> -> _SOURCE_
<android.view.Display: boolean isWideColorGamut()> -> _SOURCE_
<android.media.AudioFocusRequest: android.media.AudioAttributes getAudioAttributes()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isDeviceOwnerAppOnCallingUser(java.lang.String)> -> _SOURCE_
<com.android.ims.internal.IImsExternalCallStateListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.net.wifi.nl80211.IPnoScanEvent$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: java.util.List getCertsFromCarrierPrivilegeAccessRules(int)> -> _SOURCE_
<android.database.CursorToBulkCursorAdaptor: android.database.BulkCursorDescriptor getBulkCursorDescriptor()> -> _SOURCE_
<android.telecom.TelecomManager: android.content.ComponentName getDefaultPhoneApp()> -> _SOURCE_
<android.telephony.SubscriptionManager: void addSubscriptionInfoRecord(java.lang.String,java.lang.String,int,int)> -> _SOURCE_
<com.android.internal.telephony.euicc.IGetRulesAuthTableCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: com.android.internal.os.BatteryStatsImpl$ControllerActivityCounterImpl getOrCreateBluetoothControllerActivityLocked()> -> _SOURCE_
<android.app.role.IRoleController$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getIccAuthentication(int,int,java.lang.String)> -> _SOURCE_
<android.content.pm.ProviderInfoList: java.util.List getList()> -> _SOURCE_
<android.os.Environment: java.io.File getStorageDirectory()> -> _SOURCE_
<com.android.internal.graphics.palette.Target: float getSaturationWeight()> -> _SOURCE_
<android.hardware.input.IInputManager$Stub$Proxy: android.hardware.input.KeyboardLayout[] getKeyboardLayouts()> -> _SOURCE_
<android.net.lowpan.LowpanManager: android.net.lowpan.LowpanManager getManager()> -> _SOURCE_
<com.android.internal.telephony.euicc.IEuiccCardController$Stub: com.android.internal.telephony.euicc.IEuiccCardController getDefaultImpl()> -> _SOURCE_
<com.android.internal.view.menu.MenuItemImpl: android.view.ContextMenu$ContextMenuInfo getMenuInfo()> -> _SOURCE_
<android.hardware.face.IFaceService$Default: java.util.List getEnrolledFaces(int,java.lang.String)> -> _SOURCE_
<android.app.PendingIntent: java.lang.String getTargetPackage()> -> _SOURCE_
<android.app.IActivityTaskManager$Stub$Proxy: android.graphics.Point getAppTaskThumbnailSize()> -> _SOURCE_
<android.bluetooth.IBluetoothA2dp$Default: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
<android.os.IThermalService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.content.IOnPrimaryClipChangedListener$Stub: android.content.IOnPrimaryClipChangedListener getDefaultImpl()> -> _SOURCE_
<android.widget.ProgressBar: android.graphics.PorterDuff$Mode getIndeterminateTintMode()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Default: java.lang.String getDeviceOwnerName()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean getDataEnabled(int)> -> _SOURCE_
<android.content.pm.LauncherApps$AppUsageLimit: long getUsageRemaining()> -> _SOURCE_
<android.content.res.AssetManager: android.util.SparseArray getAssignedPackageIdentifiers(boolean,boolean)> -> _SOURCE_
<android.view.DisplayCutout: android.graphics.Rect getSafeInsets()> -> _SOURCE_
<android.widget.Editor: android.graphics.drawable.Drawable getCursorDrawable()> -> _SOURCE_
<android.location.GnssMeasurement: double getTimeOffsetNanos()> -> _SOURCE_
<android.os.Environment: java.io.File getDataMiscDirectory()> -> _SOURCE_
<android.content.pm.IPackageManager$Default: java.lang.String getContentCaptureServicePackageName()> -> _SOURCE_
<android.widget.ListPopupWindow: android.graphics.drawable.Drawable getBackground()> -> _SOURCE_
<android.content.res.AssetManager: java.util.Map getOverlayableMap(java.lang.String)> -> _SOURCE_
<android.telephony.CarrierRestrictionRules: int describeContents()> -> _SOURCE_
<android.hardware.camera2.ICameraDeviceUser$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.RadioAccessSpecifier: int hashCode()> -> _SOURCE_
<android.hardware.ISerialManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.media.MediaRouter$RouteCategory: java.lang.CharSequence getName()> -> _SOURCE_
<android.print.ILayoutResultCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.os.IIncidentAuthListener$Stub: android.os.IIncidentAuthListener getDefaultImpl()> -> _SOURCE_
<com.android.ims.internal.IImsCallSession$Stub$Proxy: java.lang.String getCallId()> -> _SOURCE_
<android.hardware.lights.ILightsManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getTraversalAfter()> -> _SOURCE_
<android.app.DirectAction: android.content.LocusId getLocusId()> -> _SOURCE_
<android.view.accessibility.IWindowMagnificationConnection$Stub: android.view.accessibility.IWindowMagnificationConnection getDefaultImpl()> -> _SOURCE_
<android.app.IActivityTaskManager$Stub$Proxy: java.util.List getFilteredTasks(int,boolean)> -> _SOURCE_
<com.android.internal.view.menu.MenuItemImpl: android.view.SubMenu getSubMenu()> -> _SOURCE_
<android.text.MeasuredParagraph: android.text.AutoGrowArray$IntArray getSpanEndCache()> -> _SOURCE_
<android.service.notification.StatusBarNotification: android.metrics.LogMaker getLogMaker()> -> _SOURCE_
<android.view.contentcapture.IContentCaptureDirectManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: int isMultiSimSupported(java.lang.String,java.lang.String)> -> _SOURCE_
<android.print.PrintManager: java.util.List getPrintServices(int)> -> _SOURCE_
<android.content.res.AssetManager: boolean getResourceValue(int,int,android.util.TypedValue,boolean)> -> _SOURCE_
<com.android.internal.content.om.OverlayScanner: java.util.Collection getAllParsedInfos()> -> _SOURCE_
<android.content.pm.IDexModuleRegisterCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.os.ParcelableParcel: android.os.Parcel getParcel()> -> _SOURCE_
<android.app.ContextImpl: java.lang.String getPackageCodePath()> -> _SOURCE_
<android.telephony.SubscriptionManager: android.net.Uri addSubscriptionInfoRecord(java.lang.String,int)> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: java.util.List getImplicitPermissions()> -> _SOURCE_
<android.net.wifi.nl80211.IWificond$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.view.IInputMonitorHost$Stub: android.view.IInputMonitorHost getDefaultImpl()> -> _SOURCE_
<com.android.internal.telephony.IMms$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.blob.LeaseInfo: java.lang.CharSequence getDescription()> -> _SOURCE_
<android.hardware.camera2.legacy.CameraDeviceUserShim$CameraLooper: android.hardware.Camera getCamera()> -> _SOURCE_
<android.media.AudioManager: int getRingerModeInternal()> -> _SOURCE_
<android.animation.Keyframe$FloatKeyframe: java.lang.Object getValue()> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getIsimIst(int)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: java.util.List getPackagesWithCarrierPrivileges(int)> -> _SOURCE_
<android.webkit.WebView: android.net.Uri getSafeBrowsingPrivacyPolicyUrl()> -> _SOURCE_
<android.telephony.TelephonyManager: int getCarrierIdFromMccMnc(java.lang.String)> -> _SOURCE_
<com.android.internal.app.ToolbarActionBar: boolean isTitleTruncated()> -> _SOURCE_
<android.content.pm.ICrossProfileApps$Stub$Proxy: java.util.List getTargetUserProfiles(java.lang.String)> -> _SOURCE_
<android.hardware.usb.UsbDevice: boolean getHasVideoCapture()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: boolean isDataConnectivityPossible(int)> -> _SOURCE_
<android.app.SharedPreferencesImpl: long getLong(java.lang.String,long)> -> _SOURCE_
<android.os.HandlerThread: android.os.Handler getThreadHandler()> -> _SOURCE_
<android.view.textclassifier.TextLinks$Request: android.os.Bundle getExtras()> -> _SOURCE_
<android.view.WindowMetrics: android.view.WindowInsets getWindowInsets()> -> _SOURCE_
<android.bluetooth.IBluetoothMetadataListener$Stub: android.bluetooth.IBluetoothMetadataListener getDefaultImpl()> -> _SOURCE_
<android.net.LinkProperties: java.util.List getStackedLinks()> -> _SOURCE_
<android.telephony.ims.aidl.IImsConfigCallback$Stub: android.telephony.ims.aidl.IImsConfigCallback getDefaultImpl()> -> _SOURCE_
<android.telephony.PreciseDataConnectionState: int describeContents()> -> _SOURCE_
<android.transition.Transition: java.util.List getTargetIds()> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothAdapter getDefaultAdapter()> -> _SOURCE_
<android.media.MediaRouter$RouteInfo: java.lang.Object getTag()> -> _SOURCE_
<android.telephony.UiccCardInfo: int hashCode()> -> _SOURCE_
<android.database.CursorWrapper: boolean isClosed()> -> _SOURCE_
<android.net.INetworkScoreCache$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.view.accessibility.AccessibilityManager: boolean isHighTextContrastEnabled()> -> _SOURCE_
<android.media.MediaCodecInfo$VideoCapabilities: android.util.Range getBlockCountRange()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: android.util.SparseArray getPidStats()> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getLine1Number(java.lang.String,java.lang.String)> -> _SOURCE_
<android.graphics.drawable.BitmapDrawable: android.graphics.PorterDuff$Mode getTintMode()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: long getMaximumTimeToLock(android.content.ComponentName,int,boolean)> -> _SOURCE_
<android.app.prediction.AppTarget: android.app.prediction.AppTargetId getId()> -> _SOURCE_
<android.net.ConnectivityManager: boolean getBackgroundDataSetting()> -> _SOURCE_
<android.view.InputDevice$MotionRange: float getResolution()> -> _SOURCE_
<android.os.BasicShellCommandHandler: java.io.FileDescriptor getInFileDescriptor()> -> _SOURCE_
<android.telephony.ims.aidl.IImsConfigCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.os.IUserManager$Stub$Proxy: java.lang.String getSeedAccountType()> -> _SOURCE_
<android.content.pm.LauncherApps$AppUsageLimit: long getTotalUsageLimit()> -> _SOURCE_
<android.net.TrafficStats: long getMobileTcpRxPackets()> -> _SOURCE_
<android.app.AppOpsManager$OpEventProxyInfo: java.lang.String getAttributionTag()> -> _SOURCE_
<android.hardware.usb.IUsbManager$Default: java.util.List getPorts()> -> _SOURCE_
<com.android.internal.graphics.palette.Target: float getMinimumLightness()> -> _SOURCE_
<android.telephony.SignalStrength: int getEvdoDbm()> -> _SOURCE_
<android.net.lowpan.ILowpanNetScanCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.content.UndoManager$UndoState: java.lang.CharSequence getLabel()> -> _SOURCE_
<android.content.pm.ShortcutInfo: android.app.Person[] getPersons()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Default: java.lang.CharSequence getDeviceOwnerLockScreenInfo()> -> _SOURCE_
<android.hardware.location.NanoAppBinary: byte[] getBinary()> -> _SOURCE_
<android.content.IContentService$Stub$Proxy: java.util.List getCurrentSyncs()> -> _SOURCE_
<android.media.MicrophoneInfo: android.media.MicrophoneInfo$Coordinate3F getOrientation()> -> _SOURCE_
<android.hardware.Sensor: float getResolution()> -> _SOURCE_
<android.telephony.CellIdentityWcdma: int getUarfcn()> -> _SOURCE_
<android.provider.Settings$NameValueCache: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)> -> _SOURCE_
<android.telephony.CarrierConfigManager$Gps: android.os.PersistableBundle access$100()> -> _SOURCE_
<android.content.pm.IPackageManager$Stub$Proxy: android.content.ComponentName getInstantAppResolverSettingsComponent()> -> _SOURCE_
<android.view.autofill.IAugmentedAutofillManagerClient$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.nfc.INfcCardEmulation$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getSimSerialNumber()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: void getImsMmTelRegistrationState(int,com.android.internal.telephony.IIntegerConsumer)> -> _SOURCE_
<android.telephony.SubscriptionManager: int getDefaultDataPhoneId()> -> _SOURCE_
<android.os.StrictMode$ViolationInfo: java.lang.String getStackTrace()> -> _SOURCE_
<android.hardware.camera2.utils.TypeReference: java.lang.Class getRawType()> -> _SOURCE_
<android.service.persistentdata.IPersistentDataBlockService$Default: boolean getOemUnlockEnabled()> -> _SOURCE_
<android.os.IUserManager$Default: android.os.PersistableBundle getSeedAccountOptions()> -> _SOURCE_
<android.os.incremental.IIncrementalService$Stub$Proxy: byte[] getMetadataById(int,byte[])> -> _SOURCE_
<android.app.ApplicationPackageManager: java.util.List getDeclaredSharedLibraries(java.lang.String,int)> -> _SOURCE_
<android.service.textclassifier.ITextClassifierService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: android.os.BatteryStats$LevelStepTracker getChargeLevelStepTracker()> -> _SOURCE_
<android.content.pm.parsing.component.ParsedComponent: android.content.ComponentName getComponentName()> -> _SOURCE_
<android.app.usage.StorageStatsManager: android.app.usage.StorageStats queryStatsForUid(java.util.UUID,int)> -> _SOURCE_
<android.location.GeocoderParams: java.util.Locale getLocale()> -> _SOURCE_
<android.hardware.hdmi.IHdmiCecVolumeControlFeatureListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.view.textclassifier.TextLanguage: java.lang.String getId()> -> _SOURCE_
<android.content.pm.PackageInstaller$Session: boolean isStaged()> -> _SOURCE_
<android.telephony.PackageChangeReceiver: java.lang.String getPackageName(android.content.Intent)> -> _SOURCE_
<android.app.ApplicationPackageManager: android.os.UserManager getUserManager()> -> _SOURCE_
<android.app.RemoteAction: java.lang.CharSequence getTitle()> -> _SOURCE_
<android.graphics.PorterDuffColorFilter: android.graphics.PorterDuff$Mode getMode()> -> _SOURCE_
<android.service.textclassifier.ITextClassifierService$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getDrawable(java.lang.String,int,android.content.pm.ApplicationInfo)> -> _SOURCE_
<android.bluetooth.IBluetoothHeadset$Default: java.util.List getConnectedDevices()> -> _SOURCE_
<android.permission.PermissionManager$SplitPermissionInfo: java.util.List getNewPermissions()> -> _SOURCE_
<android.os.UserManager: boolean isDemoUser()> -> _SOURCE_
<android.media.RingtoneManager: android.media.Ringtone getRingtone(int)> -> _SOURCE_
<android.view.CutoutSpecification: android.graphics.Rect getTopBound()> -> _SOURCE_
<android.media.MicrophoneInfo: java.util.List getFrequencyResponse()> -> _SOURCE_
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String getInstantAppAndroidId(java.lang.String,int)> -> _SOURCE_
<android.app.Activity: java.lang.String getLocalClassName()> -> _SOURCE_
<android.animation.Keyframe$ObjectKeyframe: java.lang.Object getValue()> -> _SOURCE_
<android.transition.PatternPathMotion: android.graphics.Path getPatternPath()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: android.util.ArrayMap getProcessStats()> -> _SOURCE_
<android.app.backup.IBackupManager$Stub$Proxy: android.content.ComponentName getCurrentTransportComponentForUser(int)> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isApnMetered(int)> -> _SOURCE_
<android.app.SearchManager: android.database.Cursor getSuggestions(android.app.SearchableInfo,java.lang.String)> -> _SOURCE_
<android.bluetooth.IBluetooth$Default: android.bluetooth.IBluetoothSocketManager getSocketManager()> -> _SOURCE_
<android.widget.HeaderViewListAdapter: android.widget.ListAdapter getWrappedAdapter()> -> _SOURCE_
<com.android.internal.policy.PhoneWindow: boolean getSharedElementsUseOverlay()> -> _SOURCE_
<android.view.ViewRootImpl: android.view.View getView()> -> _SOURCE_
<android.location.GpsMeasurementsEvent: java.util.Collection getMeasurements()> -> _SOURCE_
<android.os.PowerManager$WakeLock: java.lang.String getTag()> -> _SOURCE_
<android.content.pm.LauncherActivityInfo: android.content.ComponentName getComponentName()> -> _SOURCE_
<android.telephony.PreciseDataConnectionState: android.net.LinkProperties getDataConnectionLinkProperties()> -> _SOURCE_
<android.net.ConnectivityManager: android.net.NetworkRequest getDefaultRequest()> -> _SOURCE_
<android.media.MediaRouter2Utils: java.lang.String getProviderId(java.lang.String)> -> _SOURCE_
<android.app.role.RoleManager: java.util.List getRoleHoldersAsUser(java.lang.String,android.os.UserHandle)> -> _SOURCE_
<android.view.IDisplayWindowRotationCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.timedetector.ITimeDetectorService$Stub: android.app.timedetector.ITimeDetectorService getDefaultImpl()> -> _SOURCE_
<android.view.autofill.IAutoFillManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.hardware.fingerprint.IFingerprintClientActiveCallback$Stub: android.hardware.fingerprint.IFingerprintClientActiveCallback getDefaultImpl()> -> _SOURCE_
<android.net.INetworkPolicyListener$Stub: android.net.INetworkPolicyListener getDefaultImpl()> -> _SOURCE_
<android.telephony.VoiceSpecificRegistrationInfo: java.lang.String toString()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isRinging()> -> _SOURCE_
<android.os.image.DynamicSystemManager: boolean isInUse()> -> _SOURCE_
<android.view.textclassifier.ConversationActions: java.util.List getConversationActions()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getIsimImpi()> -> _SOURCE_
<android.content.pm.DataLoaderManager: android.content.pm.IDataLoader getDataLoader(int)> -> _SOURCE_
<com.android.internal.telephony.euicc.ISetDefaultSmdpAddressCallback$Stub: com.android.internal.telephony.euicc.ISetDefaultSmdpAddressCallback getDefaultImpl()> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Default: java.lang.String getIccSerialNumberWithFeature(java.lang.String,java.lang.String)> -> _SOURCE_
<android.bluetooth.BluetoothHidDeviceAppSdpSettings: byte[] getDescriptors()> -> _SOURCE_
<android.widget.AbsListView$InputConnectionWrapper: java.lang.CharSequence getSelectedText(int)> -> _SOURCE_
<android.text.method.LinkMovementMethod: android.text.method.MovementMethod getInstance()> -> _SOURCE_
<android.net.NetworkCapabilities: android.net.TransportInfo getTransportInfo()> -> _SOURCE_
<android.os.BinderProxy: int getProxyCount()> -> _SOURCE_
<android.hardware.ICameraService$Default: android.hardware.camera2.params.VendorTagDescriptorCache getCameraVendorTagCache()> -> _SOURCE_
<com.android.internal.telephony.ISub$Default: android.telephony.SubscriptionInfo getActiveSubscriptionInfoForSimSlotIndex(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.content.pm.ShortcutInfo: android.content.Intent[] getIntents()> -> _SOURCE_
<android.media.session.IOnMediaKeyListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.backup.IBackupManager$Stub$Proxy: android.content.Intent getConfigurationIntent(java.lang.String)> -> _SOURCE_
<android.view.accessibility.IWindowMagnificationConnectionCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.CellIdentityCdma: int getSystemId()> -> _SOURCE_
<android.media.MediaDrm$KeyRequest: byte[] getData()> -> _SOURCE_
<android.telephony.TelephonyManager: int getCurrentPhoneTypeForSlot(int)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: java.lang.String getTypeAllocationCodeForSlot(int)> -> _SOURCE_
<android.hardware.display.IDisplayManager$Stub$Proxy: int[] getDisplayIds()> -> _SOURCE_
<android.telecom.TelecomManager: int getAllPhoneAccountsCount()> -> _SOURCE_
<android.os.storage.DiskInfo: java.lang.String getDescription()> -> _SOURCE_
<android.hardware.camera2.CameraCharacteristics: java.util.List getAvailableCaptureRequestKeys()> -> _SOURCE_
<android.net.lowpan.LowpanCredential: byte[] getMasterKey()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: boolean isConcurrentVoiceAndDataAllowed(int)> -> _SOURCE_
<android.widget.ScrollBarDrawable: boolean getAlwaysDrawHorizontalTrack()> -> _SOURCE_
<android.telephony.SmsManager: boolean enableCellBroadcastRange(int,int,int)> -> _SOURCE_
<android.telephony.TelephonyRegistryManager: void addOnSubscriptionsChangedListener(android.telephony.SubscriptionManager$OnSubscriptionsChangedListener,java.util.concurrent.Executor)> -> _SOURCE_
<android.content.ContentProvider: java.lang.String getCallingPackage()> -> _SOURCE_
<android.transition.TransitionManager: java.util.ArrayList access$000()> -> _SOURCE_
<android.telephony.UiccCardInfo: java.lang.String getIccId()> -> _SOURCE_
<android.os.connectivity.WifiActivityEnergyInfo: long getControllerScanDurationMillis()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase$OpenParams: java.lang.String getSynchronousMode()> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec: java.lang.String[] getBlockModes()> -> _SOURCE_
<android.app.WallpaperManager: android.graphics.drawable.Drawable getBuiltInDrawable(int,int,boolean,float,float,int)> -> _SOURCE_
<android.app.SearchableInfo: boolean getVoiceSearchLaunchWebSearch()> -> _SOURCE_
<android.app.blob.IBlobStoreManager$Stub: android.app.blob.IBlobStoreManager getDefaultImpl()> -> _SOURCE_
<android.telephony.SubscriptionManager: int lambda$setDisplayName$3(java.lang.String,int,int,com.android.internal.telephony.ISub)> -> _SOURCE_
<android.service.dreams.IDreamManager$Default: android.content.ComponentName[] getDreamComponents()> -> _SOURCE_
<android.graphics.drawable.GradientDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()> -> _SOURCE_
<android.telephony.SubscriptionInfo: int getMnc()> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec: byte[] getAttestationChallenge()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: boolean isRadioOnForSubscriber(int,java.lang.String)> -> _SOURCE_
<android.telephony.CellIdentityWcdma: java.lang.String getMobileNetworkOperator()> -> _SOURCE_
<android.app.slice.ISliceManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.service.notification.IStatusBarNotificationHolder$Default: android.service.notification.StatusBarNotification get()> -> _SOURCE_
<android.net.Uri$OpaqueUri: java.lang.String getEncodedFragment()> -> _SOURCE_
<android.media.IAudioService$Stub$Proxy: android.media.IRingtonePlayer getRingtonePlayer()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean nvWriteItem(int,java.lang.String)> -> _SOURCE_
<android.bluetooth.BluetoothHeadsetClient: android.os.Bundle getCurrentAgEvents(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<android.net.wifi.nl80211.IApInterface$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder resetNetworkTypes()> -> _SOURCE_
<com.android.telephony.Rlog: java.lang.String pii(java.lang.String,java.lang.Object)> -> _SOURCE_
<android.app.assist.AssistStructure$ViewNode: android.view.autofill.AutofillValue getAutofillValue()> -> _SOURCE_
<android.graphics.Paint: android.graphics.MaskFilter getMaskFilter()> -> _SOURCE_
<android.telephony.SubscriptionManager: void clearSubscriptionInfo()> -> _SOURCE_
<android.service.autofill.FillEventHistory$Event: java.util.Map getManuallyEnteredField()> -> _SOURCE_
<android.accessibilityservice.AccessibilityShortcutInfo: android.content.pm.ActivityInfo getActivityInfo()> -> _SOURCE_
<com.android.internal.telephony.SmsAddress: boolean isAlphanumeric()> -> _SOURCE_
<android.view.accessibility.IAccessibilityInteractionConnectionCallback$Stub: android.view.accessibility.IAccessibilityInteractionConnectionCallback getDefaultImpl()> -> _SOURCE_
<android.hardware.location.IContextHubService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getSimCountryIso()> -> _SOURCE_
<android.view.ViewRootImpl: android.view.ImeFocusController getImeFocusController()> -> _SOURCE_
<android.net.ConnectivityManager: boolean isNetworkSupported(int)> -> _SOURCE_
<android.telecom.Logging.EventManager$EventRecord$EventTiming: java.lang.Object getKey()> -> _SOURCE_
<android.telephony.TelephonyManager: int getVoiceMessageCount(int)> -> _SOURCE_
<android.telephony.SmsManager: com.android.internal.telephony.ISms access$000()> -> _SOURCE_
<android.hardware.cas.V1_0.IDescramblerBase$Proxy: java.util.ArrayList getHashChain()> -> _SOURCE_
<android.telecom.PhoneAccountHandle: java.lang.String getId()> -> _SOURCE_
<android.view.autofill.AutofillManager: android.service.autofill.UserData getUserData()> -> _SOURCE_
<android.view.FrameMetricsObserver: android.graphics.HardwareRendererObserver getRendererObserver()> -> _SOURCE_
<android.util.MergedConfiguration: android.content.res.Configuration getOverrideConfiguration()> -> _SOURCE_
<android.os.IUserManager$Default: java.util.List getUsers(boolean,boolean,boolean)> -> _SOURCE_
<android.app.LoadedApk: android.content.res.Resources getResources()> -> _SOURCE_
<android.net.TestNetworkInterface: java.lang.String getInterfaceName()> -> _SOURCE_
<android.telephony.CellInfoLte: android.telephony.CellConfigLte getCellConfig()> -> _SOURCE_
<android.media.Ringtone: boolean isPlaying()> -> _SOURCE_
<android.net.NetworkStatsHistory: long getStart()> -> _SOURCE_
<android.os.IHardwarePropertiesManager$Stub$Proxy: float[] getFanSpeeds(java.lang.String)> -> _SOURCE_
<android.graphics.ImageDecoder: android.graphics.ImageDecoder$OnPartialImageListener getOnPartialImageListener()> -> _SOURCE_
<android.hardware.radio.TunerAdapter: boolean getMute()> -> _SOURCE_
<android.app.WallpaperColors: android.graphics.Color getPrimaryColor()> -> _SOURCE_
<android.os.Environment: boolean isExternalStorageManager()> -> _SOURCE_
<android.os.LocaleList: android.os.LocaleList getDefault()> -> _SOURCE_
<android.content.pm.PackageManager: java.util.List queryIntentServicesAsUser(android.content.Intent,int,android.os.UserHandle)> -> _SOURCE_
<android.view.RemoteAnimationAdapter: long getDuration()> -> _SOURCE_
<android.app.IWallpaperManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean handlePinMmi(java.lang.String)> -> _SOURCE_
<android.app.KeyguardManager: boolean isKeyguardLocked()> -> _SOURCE_
<android.media.IAudioService$Default: java.util.List getActivePlaybackConfigurations()> -> _SOURCE_
<android.content.Context: java.lang.String getOpPackageName()> -> _SOURCE_
<android.hardware.location.ContextHubInfo: float getPeakMips()> -> _SOURCE_
<com.android.internal.telephony.IBooleanConsumer$Stub: android.os.IBinder asBinder()> -> _SOURCE_
<android.hardware.face.FaceManager: boolean isHardwareDetected()> -> _SOURCE_
<android.app.assist.AssistStructure$ViewNode: java.lang.String getWebScheme()> -> _SOURCE_
<android.media.session.MediaController: android.media.session.ISessionController getSessionBinder()> -> _SOURCE_
<com.android.internal.policy.PhoneFallbackEventHandler: android.app.KeyguardManager getKeyguardManager()> -> _SOURCE_
<android.telephony.CellSignalStrengthCdma: int getCdmaLevel()> -> _SOURCE_
<android.telephony.CellSignalStrengthLte: int getLevel()> -> _SOURCE_
<android.view.VerifiedInputEvent: long getEventTimeNanos()> -> _SOURCE_
<android.os.TelephonyServiceManager: android.os.TelephonyServiceManager$ServiceRegisterer getPhoneSubServiceRegisterer()> -> _SOURCE_
<android.app.PictureInPictureParams: android.util.Rational getAspectRatioRational()> -> _SOURCE_
<android.content.pm.PackageInstaller$SessionInfo: android.content.Intent getDetailsIntent()> -> _SOURCE_
<android.hardware.Camera: android.hardware.Camera$Parameters getParametersCopy(android.hardware.Camera$Parameters)> -> _SOURCE_
<android.os.incremental.IncrementalManager: android.os.incremental.IncrementalStorage createStorage(java.lang.String,android.os.incremental.IncrementalStorage,int)> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: java.util.Set getQueriesProviders()> -> _SOURCE_
<android.graphics.drawable.DrawableWrapper: android.graphics.drawable.Drawable getDrawable()> -> _SOURCE_
<android.os.StrictMode: android.os.StrictMode$ThreadPolicy getThreadPolicy()> -> _SOURCE_
<android.view.ViewGroup: android.animation.LayoutTransition getLayoutTransition()> -> _SOURCE_
<android.hardware.camera2.impl.CameraMetadataNative$Key: android.hardware.camera2.utils.TypeReference getTypeReference()> -> _SOURCE_
<android.app.ActivityTransitionCoordinator$GhostViewListeners: android.view.View getView()> -> _SOURCE_
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: java.util.Set getInputFormats()> -> _SOURCE_
<com.android.internal.telephony.euicc.IEuiccController$Default: java.util.List getSupportedCountries(boolean)> -> _SOURCE_
<android.location.Location: double getElapsedRealtimeUncertaintyNanos()> -> _SOURCE_
<android.media.AudioManager: int getMode()> -> _SOURCE_
<android.telephony.ims.feature.RcsFeature: android.telephony.ims.feature.ImsFeature$Capabilities queryCapabilityStatus()> -> _SOURCE_
<android.media.IAudioFocusDispatcher$Stub: android.media.IAudioFocusDispatcher getDefaultImpl()> -> _SOURCE_
<com.android.internal.os._$$Lambda$6_ytl6NLMGWt_iQr4_PfakNWUKQ: java.lang.Object get()> -> _SOURCE_
<android.media.session.IOnVolumeKeyLongPressListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.Notification: java.lang.String getGroup()> -> _SOURCE_
<android.security.KeyStore: android.security.KeyStore getInstance()> -> _SOURCE_
<android.telephony.CellIdentityGsm: int getArfcn()> -> _SOURCE_
<com.android.internal.telephony.SmsRawData: byte[] getBytes()> -> _SOURCE_
<android.view.textservice.SpellCheckerSubtype: java.util.Locale getLocaleObject()> -> _SOURCE_
<android.hardware.input.IInputManager$Stub$Proxy: android.view.InputDevice getInputDevice(int)> -> _SOURCE_
<android.app.VoiceInteractor$Request: android.content.Context getContext()> -> _SOURCE_
<android.provider.SyncStateContract$Helpers: byte[] get(android.content.ContentProviderClient,android.net.Uri,android.accounts.Account)> -> _SOURCE_
<android.content.pm.LauncherActivityInfo: android.graphics.drawable.Drawable getBadgedIcon(int)> -> _SOURCE_
<android.app.DownloadManager: android.net.Uri getUriForDownloadedFile(long)> -> _SOURCE_
<android.hardware.radio.ITuner$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.hardware.camera2.CameraManager: android.hardware.camera2.CameraCharacteristics getCameraCharacteristics(java.lang.String)> -> _SOURCE_
<android.net.NetworkPolicyManager: android.telephony.SubscriptionPlan[] getSubscriptionPlans(int,java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getIccSerialNumberForSubscriber(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.net.wifi.nl80211.IClientInterface$Stub$Proxy: java.lang.String getInterfaceName()> -> _SOURCE_
<android.content.ContextWrapper: java.io.File getPreloadsFileCache()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getDataActivationState(int,java.lang.String)> -> _SOURCE_
<android.app.Notification$BubbleMetadata: android.app.PendingIntent getIntent()> -> _SOURCE_
<com.android.ims.internal.IImsUt$Stub: com.android.ims.internal.IImsUt getDefaultImpl()> -> _SOURCE_
<android.os.storage.IStorageEventListener$Stub: android.os.storage.IStorageEventListener getDefaultImpl()> -> _SOURCE_
<android.bluetooth.IBluetoothA2dpSink$Stub: android.bluetooth.IBluetoothA2dpSink getDefaultImpl()> -> _SOURCE_
<android.service.euicc.EuiccProfileInfo: java.util.List getUiccAccessRules()> -> _SOURCE_
<android.net.ConnectivityManager: android.net.Network getActiveNetworkForUid(int)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: java.lang.String getAidForAppType(int,int)> -> _SOURCE_
<android.hardware.usb.UsbAccessory: java.lang.String getUri()> -> _SOURCE_
<android.os.IHardwarePropertiesManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.location.GpsClock: double getDriftUncertaintyInNsPerSec()> -> _SOURCE_
<android.metrics.LogMaker: java.lang.String getPackageName()> -> _SOURCE_
<com.android.internal.view.FloatingActionMode: android.view.View getCustomView()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo$RangeInfo getRangeInfo()> -> _SOURCE_
<android.text.Annotation: java.lang.String getKey()> -> _SOURCE_
<android.app.IActivityManager$Stub$Proxy: int[] getRunningUserIds()> -> _SOURCE_
<android.bluetooth.le.AdvertiseData: java.util.Map getServiceData()> -> _SOURCE_
<android.system.suspend.ISuspendControlService$Default: android.system.suspend.WakeLockInfo[] getWakeLockStats()> -> _SOURCE_
<android.service.autofill.FieldClassification: java.util.List getMatches()> -> _SOURCE_
<android.app.backup.IFullBackupRestoreObserver$Stub: android.app.backup.IFullBackupRestoreObserver getDefaultImpl()> -> _SOURCE_
<android.net.INetworkStatsService$Stub: android.net.INetworkStatsService getDefaultImpl()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: java.lang.String sendEnvelopeWithStatus(int,java.lang.String)> -> _SOURCE_
<android.content.pm.parsing.component.ParsedMainComponent: java.lang.String getClassName()> -> _SOURCE_
<android.view.IRemoteAnimationFinishedCallback$Stub: android.view.IRemoteAnimationFinishedCallback getDefaultImpl()> -> _SOURCE_
<android.telephony.SmsCbMessage: android.content.ContentValues getContentValues()> -> _SOURCE_
<android.media.session.MediaController: android.media.session.PlaybackState getPlaybackState()> -> _SOURCE_
<android.database.CursorWrapper: boolean isAfterLast()> -> _SOURCE_
<android.graphics.fonts.FontFamily: long getNativePtr()> -> _SOURCE_
<android.widget.Toolbar: android.widget.ActionMenuPresenter getOuterActionMenuPresenter()> -> _SOURCE_
<android.media.AudioManager: int getStreamMaxVolume(int)> -> _SOURCE_
<android.hardware.usb.UsbManager: java.util.HashMap getDeviceList()> -> _SOURCE_
<android.app.backup.IRestoreSession$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean isDataEnabledForApn(int,int,java.lang.String)> -> _SOURCE_
<android.net.Ikev2VpnProfile: android.net.ProxyInfo getProxyInfo()> -> _SOURCE_
<com.android.internal.telephony.ICarrierConfigLoader$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.view.textservice.SpellCheckerSession: com.android.internal.textservice.ITextServicesSessionListener getTextServicesSessionListener()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: android.os.BatteryStats$Timer getCameraTurnedOnTimer()> -> _SOURCE_
<android.bluetooth.BluetoothGattCharacteristic: android.bluetooth.BluetoothGattService getService()> -> _SOURCE_
<android.media.MediaCodec: java.nio.ByteBuffer[] getInputBuffers()> -> _SOURCE_
<android.hardware.face.FaceManager: long generateChallenge()> -> _SOURCE_
<android.graphics.drawable.Drawable: android.graphics.Insets getOpticalInsets()> -> _SOURCE_
<android.media.session.ISessionManager$Stub$Proxy: android.content.pm.ParceledListSlice getSession2Tokens(int)> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: int[] getSplitRevisionCodes()> -> _SOURCE_
<android.hardware.camera2.marshal.Marshaler: android.hardware.camera2.utils.TypeReference getTypeReference()> -> _SOURCE_
<android.content.Loader: android.content.Context getContext()> -> _SOURCE_
<android.content.ContentProvider: java.lang.String getCallingAttributionTag()> -> _SOURCE_
<android.telephony.CellIdentityNr: int getPci()> -> _SOURCE_
<android.net.lowpan.ILowpanInterface$Default: android.net.lowpan.LowpanCredential getLowpanCredential()> -> _SOURCE_
<com.android.internal.view.IInputMethodClient$Stub: com.android.internal.view.IInputMethodClient getDefaultImpl()> -> _SOURCE_
<android.app.AppOpsManager: boolean isOperationActive(int,int,java.lang.String)> -> _SOURCE_
<android.location.Address: java.lang.String getSubLocality()> -> _SOURCE_
<android.net.TrafficStats: long getMobileRxBytes()> -> _SOURCE_
<android.nfc.Tag: android.nfc.INfcTag getTagService()> -> _SOURCE_
<android.widget.CheckBox: java.lang.CharSequence getAccessibilityClassName()> -> _SOURCE_
<android.app.usage.NetworkStatsManager: android.app.usage.NetworkStats queryDetailsForUid(android.net.NetworkTemplate,long,long,int)> -> _SOURCE_
<android.graphics.RenderNode: float getCameraDistance()> -> _SOURCE_
<android.bluetooth.IBluetoothAvrcpController$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.WindowConfiguration: android.graphics.Rect getAppBounds()> -> _SOURCE_
<android.view.ScrollCaptureTarget: android.view.View getContainingView()> -> _SOURCE_
<android.bluetooth.IBluetoothMap$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.usage.UsageStatsManager: int getUsageSource()> -> _SOURCE_
<android.telephony.CellLocation: android.telephony.CellLocation getEmpty()> -> _SOURCE_
<android.hardware.camera2.impl.CameraMetadataNative: java.util.ArrayList getRecommendedStreamConfigurations()> -> _SOURCE_
<android.renderscript.ProgramStore: android.renderscript.ProgramStore$BlendSrcFunc getBlendSrcFunc()> -> _SOURCE_
<android.net.lowpan.LowpanInterface: java.lang.String getRole()> -> _SOURCE_
<android.net.StaticIpConfiguration: android.net.LinkAddress getIpAddress()> -> _SOURCE_
<android.media.midi.MidiDeviceServer$1: android.media.midi.MidiDeviceInfo getDeviceInfo()> -> _SOURCE_
<android.hardware.camera2.CameraCharacteristics: java.util.List getKeys()> -> _SOURCE_
<android.os.PowerManager: int getLocationPowerSaveMode()> -> _SOURCE_
<android.content.pm.IPackageDeleteObserver2$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.hardware.LegacySensorManager: int getSensors()> -> _SOURCE_
<android.telephony.CellIdentityTdscdma: int getCpid()> -> _SOURCE_
<android.app.SearchableInfo: java.lang.String getSuggestAuthority()> -> _SOURCE_
<android.telephony.SmsMessage: boolean shouldAppendPageNumberAsPrefix()> -> _SOURCE_
<android.net.IpConfiguration: android.net.ProxyInfo getHttpProxy()> -> _SOURCE_
<com.android.internal.telephony.ITelephonyRegistry$Stub: android.os.IBinder asBinder()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: int getVoiceMessageCountForSubscriber(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.app.job.JobInfo: long getFlexMillis()> -> _SOURCE_
<android.os.UserManager: boolean isUserRunningOrStopping(android.os.UserHandle)> -> _SOURCE_
<android.media.session.ISessionController$Default: java.lang.String getTag()> -> _SOURCE_
<android.view.accessibility.CaptioningManager: java.util.Locale getLocale()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.lang.String getDeviceOwner()> -> _SOURCE_
<android.telephony.CellIdentity: int getType()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: boolean getDataEnabled(int)> -> _SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: com.android.internal.net.LegacyVpnInfo getLegacyVpnInfo(int)> -> _SOURCE_
<android.bluetooth.le.PeriodicAdvertisingReport: long getTimestampNanos()> -> _SOURCE_
<android.app.trust.ITrustListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.IServiceConnection$Stub: android.app.IServiceConnection getDefaultImpl()> -> _SOURCE_
<android.os.VibrationEffect$Waveform: long getDuration()> -> _SOURCE_
<android.telephony.CellIdentityWcdma: int getChannelNumber()> -> _SOURCE_
<android.renderscript.RenderScript: long getMinorID()> -> _SOURCE_
<com.android.internal.telephony.SmsApplication$SmsApplicationData: java.lang.String access$602(com.android.internal.telephony.SmsApplication$SmsApplicationData,java.lang.String)> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: java.util.List getQueriesPackages()> -> _SOURCE_
<android.telephony.TelephonyManager: android.telephony.ims.aidl.IImsConfig getImsConfig(int,int)> -> _SOURCE_
<android.content.ContentResolver: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)> -> _SOURCE_
<com.android.internal.util.StateMachine: android.os.Message getCurrentMessage()> -> _SOURCE_
<android.security.FileIntegrityManager: boolean isApkVeritySupported()> -> _SOURCE_
<android.telephony.UiccAccessRule: java.lang.String toString()> -> _SOURCE_
<android.graphics.animation.RenderNodeAnimator: long getTotalDuration()> -> _SOURCE_
<android.os.IHardwarePropertiesManager$Stub$Proxy: android.os.CpuUsageInfo[] getCpuUsages(java.lang.String)> -> _SOURCE_
<android.graphics.drawable.VectorDrawable$VFullPath: float getTrimPathStart()> -> _SOURCE_
<android.security.net.config.NetworkSecurityConfig$Builder: android.security.net.config.NetworkSecurityConfig$Builder getParent()> -> _SOURCE_
<android.content.res.XmlBlock$Parser: java.lang.String getClassAttribute()> -> _SOURCE_
<android.media.RingtoneManager: boolean getStopPreviousRingtone()> -> _SOURCE_
<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.view.Display: int[] getSupportedColorModes()> -> _SOURCE_
<android.opengl.EGLObjectHandle: long getNativeHandle()> -> _SOURCE_
<android.hardware.camera2.impl.CameraMetadataNative$Key: java.lang.Class getType()> -> _SOURCE_
<android.location.ICountryDetector$Stub: android.location.ICountryDetector getDefaultImpl()> -> _SOURCE_
<com.android.internal.telephony.uicc.IccUtils: java.lang.String getDecimalSubstring(java.lang.String)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: android.os.BatteryStats$Timer getVideoTurnedOnTimer()> -> _SOURCE_
<com.android.internal.os.KernelCpuProcStringReader: com.android.internal.os.KernelCpuProcStringReader getClusterTimeReaderInstance()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.util.List getInstantApps()> -> _SOURCE_
<android.service.gatekeeper.GateKeeperResponse: boolean getShouldReEnroll()> -> _SOURCE_
<android.content.pm.UserInfo: boolean isDemo()> -> _SOURCE_
<android.net.lowpan.ILowpanInterface$Stub$Proxy: java.lang.String getState()> -> _SOURCE_
<android.telephony.SubscriptionManager: int getDefaultVoicePhoneId()> -> _SOURCE_
<android.graphics.Paint: long getColorLong()> -> _SOURCE_
<android.net.ConnectivityManager: android.net.LinkProperties getLinkProperties(android.net.Network)> -> _SOURCE_
<android.hardware.display.ColorDisplayManager$ColorDisplayManagerInternal: android.hardware.display.ColorDisplayManager$ColorDisplayManagerInternal getInstance()> -> _SOURCE_
<android.content.RestrictionEntry: java.lang.String[] getChoiceEntries()> -> _SOURCE_
<android.content.pm.IPackageDeleteObserver2$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.hardware.radio.RadioManager$ModuleProperties: java.lang.String getProduct()> -> _SOURCE_
<android.telephony.NetworkScanRequest: int hashCode()> -> _SOURCE_
<android.telephony.UiccAccessRule: byte[] getCertHash(android.content.pm.Signature,java.lang.String)> -> _SOURCE_
<android.os.UserManager: boolean isGuestUserEphemeral()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: int getCallWaitingStatus(int)> -> _SOURCE_
<android.app.LoadedApk: java.lang.String getPackageName()> -> _SOURCE_
<android.hardware.camera2.params.Face: android.graphics.Point getLeftEyePosition()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.app.backup.IBackupManager$Stub$Proxy: long getAvailableRestoreTokenForUser(int,java.lang.String)> -> _SOURCE_
<android.media.tv.TvContentRating: java.lang.String getDomain()> -> _SOURCE_
<android.os.ServiceManagerProxy: android.os.IBinder getService(java.lang.String)> -> _SOURCE_
<android.content.ContentResolver: boolean getMasterSyncAutomatically()> -> _SOURCE_
<android.telephony.SubscriptionInfo: java.util.List getAllAccessRules()> -> _SOURCE_
<android.net.ITestNetworkManager$Stub: android.net.ITestNetworkManager getDefaultImpl()> -> _SOURCE_
<android.view.textservice.TextServicesManager: boolean isSpellCheckerEnabled()> -> _SOURCE_
<android.telephony.CellSignalStrengthGsm: int describeContents()> -> _SOURCE_
<android.database.AbstractCursor: android.net.Uri getNotificationUri()> -> _SOURCE_
<android.telephony.NetworkRegistrationInfo: int getDomain()> -> _SOURCE_
<android.hardware.hdmi.IHdmiMhlVendorCommandListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String getSystemCaptionsServicePackageName()> -> _SOURCE_
<android.accounts.IAccountManager$Stub$Proxy: java.lang.String getUserData(android.accounts.Account,java.lang.String)> -> _SOURCE_
<android.view.inputmethod.InputConnectionWrapper: java.lang.CharSequence getTextAfterCursor(int,int)> -> _SOURCE_
<android.app.IBackupAgent$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.CbGeoUtils: android.telephony.CbGeoUtils$LatLng parseLatLngFromString(java.lang.String)> -> _SOURCE_
<android.view.Window: android.view.Window$WindowControllerCallback getWindowControllerCallback()> -> _SOURCE_
<com.android.internal.util.SyncResultReceiver: java.util.ArrayList getParcelableListResult()> -> _SOURCE_
<android.media.audiopolicy.AudioMix: android.media.audiopolicy.AudioMixingRule getRule()> -> _SOURCE_
<android.location.GpsMeasurement: double getAccumulatedDeltaRangeUncertaintyInMeters()> -> _SOURCE_
<android.telephony.TelephonyManager: void enableVisualVoicemailSmsFilter(int,android.telephony.VisualVoicemailSmsFilterSettings)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid$Sensor: android.os.BatteryStats$Timer getSensorTime()> -> _SOURCE_
<android.accounts.IAccountManager$Stub$Proxy: android.accounts.Account[] getAccountsAsUser(java.lang.String,int,java.lang.String)> -> _SOURCE_
<android.app.usage.StorageStatsManager: boolean isQuotaSupported(java.util.UUID)> -> _SOURCE_
<android.net.INetworkStatsService$Stub$Proxy: long getTotalStats(int)> -> _SOURCE_
<android.app.ApplicationPackageManager: boolean isPackageAvailable(java.lang.String)> -> _SOURCE_
<android.app.IInstrumentationWatcher$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.util.Half: boolean isNaN()> -> _SOURCE_
<android.telephony.PreciseDataConnectionState: int getDataConnectionApnTypeBitMask()> -> _SOURCE_
<android.telephony.SmsMessage: java.lang.String getDisplayOriginatingAddress()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.telephony.SmsCbCmasInfo: int getCategory()> -> _SOURCE_
<android.bluetooth.BluetoothMap: android.bluetooth.BluetoothDevice getClient()> -> _SOURCE_
<android.telephony.CellIdentityLte: java.lang.String toString()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<com.android.internal.app.IAppOpsService$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.view.InputBindResult: android.graphics.Matrix getActivityViewToScreenMatrix()> -> _SOURCE_
<android.telephony.CellInfoTdscdma: android.telephony.CellInfo sanitizeLocationInfo()> -> _SOURCE_
<android.app.ActivityManager: int getLauncherLargeIconSize()> -> _SOURCE_
<android.hardware.radio.ITuner$Default: android.hardware.radio.RadioManager$BandConfig getConfiguration()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getCdmaEriText(int)> -> _SOURCE_
<android.os.TelephonyServiceManager: android.os.TelephonyServiceManager$ServiceRegisterer getCarrierConfigServiceRegisterer()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$ControllerActivityCounterImpl: android.os.BatteryStats$LongCounter getScanTimeCounter()> -> _SOURCE_
<android.view.DragEvent: android.content.ClipData getClipData()> -> _SOURCE_
<android.hardware.biometrics.BiometricAuthenticator$AuthenticationResult: android.hardware.biometrics.BiometricAuthenticator$Identifier getId()> -> _SOURCE_
<android.widget.SmartSelectSprite$RectangleWithTextSelectionLayout: android.graphics.RectF getRectangle()> -> _SOURCE_
<android.graphics.drawable.GradientDrawable: float getGradientCenterX()> -> _SOURCE_
<android.view.DisplayAdjustments: android.view.DisplayAdjustments$FixedRotationAdjustments getFixedRotationAdjustments()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isEmergencyAssistanceEnabled()> -> _SOURCE_
<android.hardware.camera2.CaptureRequest: android.hardware.camera2.impl.CameraMetadataNative getNativeCopy()> -> _SOURCE_
<android.content.IntentSender: java.lang.String getCreatorPackage()> -> _SOURCE_
<android.graphics.drawable.RotateDrawable: float getToDegrees()> -> _SOURCE_
<android.app.KeyguardManager: boolean inKeyguardRestrictedInputMode()> -> _SOURCE_
<android.bluetooth.le.ScanFilter: android.os.ParcelUuid getServiceSolicitationUuid()> -> _SOURCE_
<android.provider.DocumentsContract: android.os.Bundle getDocumentMetadata(android.content.ContentResolver,android.net.Uri)> -> _SOURCE_
<android.os.IDeviceIdleController$Default: java.lang.String[] getRemovedSystemPowerWhitelistApps()> -> _SOURCE_
<android.app.trust.ITrustManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.CellIdentityTdscdma: android.telephony.ClosedSubscriberGroupInfo getClosedSubscriberGroupInfo()> -> _SOURCE_
<android.view.accessibility.AccessibilityEvent: long getEventTime()> -> _SOURCE_
<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.Region getTransparentRegion()> -> _SOURCE_
<android.graphics.Bitmap: int getDefaultDensity()> -> _SOURCE_
<android.view.Choreographer: android.view.Choreographer getSfInstance()> -> _SOURCE_
<android.view.autofill.AutofillManager: java.util.List getAvailableFieldClassificationAlgorithms()> -> _SOURCE_
<android.view.contentcapture.ContentCaptureEvent: java.lang.String getTypeAsString(int)> -> _SOURCE_
<android.media.MediaDescription: android.graphics.Bitmap getIconBitmap()> -> _SOURCE_
<android.telephony.ims.aidl.IImsRegistration$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.location.ILocationManager$Default: android.location.LocationTime getGnssTimeMillis()> -> _SOURCE_
<android.security.GateKeeper: android.service.gatekeeper.IGateKeeperService getService()> -> _SOURCE_
<android.view.InputDevice: java.lang.String getDescriptor()> -> _SOURCE_
<android.os.IThermalEventListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.internal.util.SyncResultReceiver: android.os.Parcelable getParcelableResult()> -> _SOURCE_
<android.bluetooth.IBluetoothHidDevice$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.lang.String getCdmaMdn(int)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: android.util.ArrayMap getSyncStats()> -> _SOURCE_
<android.os.IInstalld$Stub$Proxy: long[] getUserSize(java.lang.String,int,int,int[])> -> _SOURCE_
<android.app.ITaskStackListener$Stub: android.app.ITaskStackListener getDefaultImpl()> -> _SOURCE_
<android.app.ActivityThread: android.os.Looper getLooper()> -> _SOURCE_
<android.os.HardwarePropertiesManager: float[] getFanSpeeds()> -> _SOURCE_
<android.hardware.radio.ITuner$Stub$Proxy: android.graphics.Bitmap getImage(int)> -> _SOURCE_
<com.android.server.SystemConfig: java.util.ArrayList getSplitPermissions()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.util.List getCrossProfileWidgetProviders(android.content.ComponentName)> -> _SOURCE_
<android.animation.PropertyValuesHolder$FloatPropertyValuesHolder: java.lang.Object getAnimatedValue()> -> _SOURCE_
<com.android.internal.telephony.ISms$Stub$Proxy: java.lang.String getSmscAddressFromIccEfForSubscriber(int,java.lang.String)> -> _SOURCE_
<android.app.KeyguardManager: boolean isDeviceSecure(int)> -> _SOURCE_
<android.app.usage.UsageStatsManager: boolean isAppInactive(java.lang.String)> -> _SOURCE_
<android.app.blob.BlobHandle: long getExpiryTimeMillis()> -> _SOURCE_
<android.hardware.display.ColorDisplayManager$ColorDisplayManagerInternal: boolean isSaturationActivated()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getCallState()> -> _SOURCE_
<android.os.storage.StorageManager: java.util.List getVolumeRecords()> -> _SOURCE_
<android.telephony.ServiceState: boolean getDataRoaming()> -> _SOURCE_
<android.bluetooth.IBluetoothA2dp$Stub: android.bluetooth.IBluetoothA2dp getDefaultImpl()> -> _SOURCE_
<android.media.AudioMetadata$AutoGrowByteBuffer: java.nio.ByteBuffer getRawByteBuffer()> -> _SOURCE_
<android.app.blob.BlobStoreManager$Session: boolean isSameSignatureAccessAllowed()> -> _SOURCE_
<android.net.netstats.provider.INetworkStatsProviderCallback$Stub: android.net.netstats.provider.INetworkStatsProviderCallback getDefaultImpl()> -> _SOURCE_
<android.telephony.CellSignalStrengthGsm: int getDbm()> -> _SOURCE_
<android.widget.Spinner$DropDownAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.lang.String getSubscriptionCarrierName(int)> -> _SOURCE_
<android.hardware.fingerprint.FingerprintManager: java.util.List getEnrolledFingerprints()> -> _SOURCE_
<android.transition.Transition: java.util.List getTargetNames()> -> _SOURCE_
<android.app.ActivityThread$ActivityClientRecord: java.lang.String getStateString()> -> _SOURCE_
<com.android.internal.app.WindowDecorActionBar$TabImpl: android.graphics.drawable.Drawable getIcon()> -> _SOURCE_
<android.telecom.PhoneAccount: java.lang.String getGroupId()> -> _SOURCE_
<android.content.pm.PackageManager: java.lang.String[] getUnsuspendablePackages(java.lang.String[])> -> _SOURCE_
<android.hardware.camera2.legacy.RequestThreadManager: long flush()> -> _SOURCE_
<android.os.Environment: java.io.File getDataSystemCeDirectory()> -> _SOURCE_
<android.graphics.drawable.BitmapDrawable: android.graphics.Bitmap getBitmap()> -> _SOURCE_
<com.android.internal.telephony.ICarrierConfigLoader$Stub$Proxy: android.os.PersistableBundle getConfigForSubId(int,java.lang.String)> -> _SOURCE_
<com.android.server.SystemConfig: android.util.ArrayMap getDisabledUntilUsedPreinstalledCarrierAssociatedApps()> -> _SOURCE_
<android.net.Uri: java.util.Set getQueryParameterNames()> -> _SOURCE_
<android.media.soundtrigger_middleware.ISoundTriggerMiddlewareService$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telephony.ims.feature.CapabilityChangeRequest: java.util.List getCapabilitiesToDisable()> -> _SOURCE_
<android.media.session.IOnMediaKeyEventSessionChangedListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.os.IVibratorStateListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.transition.VisibilityPropagation: java.lang.String[] getPropagationProperties()> -> _SOURCE_
<android.telephony.ServiceState: java.lang.String getOperatorAlphaShortRaw()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getMsisdn()> -> _SOURCE_
<android.content.pm.ILauncherApps$Stub$Proxy: android.os.Bundle getSuspendedPackageLauncherExtras(java.lang.String,android.os.UserHandle)> -> _SOURCE_
<android.os.ICancellationSignal$Stub: android.os.ICancellationSignal getDefaultImpl()> -> _SOURCE_
<android.content.IContentService$Default: java.util.List getCurrentSyncs()> -> _SOURCE_
<com.android.internal.view.StandaloneActionMode: boolean isTitleOptional()> -> _SOURCE_
<android.media.AudioManager: boolean isSpeakerphoneOn()> -> _SOURCE_
<com.android.internal.view.menu.MenuPopup: android.graphics.Rect getEpicenterBounds()> -> _SOURCE_
<android.telephony.SignalStrength: int getCdmaAsuLevel()> -> _SOURCE_
<android.bluetooth.IBluetoothPbapClient$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.view.DisplayCutout: android.graphics.Rect getBoundingRectTop()> -> _SOURCE_
<com.android.internal.telephony.euicc.IGetDefaultSmdpAddressCallback$Stub: com.android.internal.telephony.euicc.IGetDefaultSmdpAddressCallback getDefaultImpl()> -> _SOURCE_
<android.app.assist.AssistStructure: android.content.ComponentName getActivityComponent()> -> _SOURCE_
<android.telephony.TelephonyManager: int getPhoneType()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getGroupIdLevel1(int)> -> _SOURCE_
<android.view.Choreographer: long getFrameDelay()> -> _SOURCE_
<android.bluetooth.IBluetoothManagerCallback$Stub: android.bluetooth.IBluetoothManagerCallback getDefaultImpl()> -> _SOURCE_
<android.app.INotificationManager$Stub$Proxy: android.app.NotificationChannel getConversationNotificationChannel(java.lang.String,int,java.lang.String,java.lang.String,boolean,java.lang.String)> -> _SOURCE_
<android.location.Location: java.lang.String getProvider()> -> _SOURCE_
<android.content.pm.UserInfo: boolean isRestricted()> -> _SOURCE_
<android.content.res.Resources$Theme: android.content.res.Resources$ThemeKey getKey()> -> _SOURCE_
<android.transition.TransitionManager: android.util.ArrayMap access$100()> -> _SOURCE_
<android.view.accessibility.IAccessibilityEmbeddedConnection$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.os.PowerManager: int getMinimumScreenBrightnessSetting()> -> _SOURCE_
<android.graphics.ColorSpace$Rgb: float[] getInverseTransform()> -> _SOURCE_
<android.os.UserManager: boolean isRestrictedProfile()> -> _SOURCE_
<android.hardware.location.ContextHubManager: int[] getContextHubHandles()> -> _SOURCE_
<android.telephony.CellIdentityTdscdma: int getCid()> -> _SOURCE_
<android.net.ConnectivityManager: android.net.Network getBoundNetworkForProcess()> -> _SOURCE_
<android.hardware.biometrics.IBiometricServiceReceiverInternal$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.database.CursorWrapper: java.lang.String[] getColumnNames()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.util.List getPrimaryStorageCandidateVolumes()> -> _SOURCE_
<android.telephony.CallForwardingInfo: int hashCode()> -> _SOURCE_
<android.hardware.biometrics.IBiometricServiceReceiver$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.bluetooth.BluetoothSocket: java.io.InputStream getInputStream()> -> _SOURCE_
<android.net.http.SslCertificate: java.lang.String getValidNotAfter()> -> _SOURCE_
<android.bluetooth.IBluetoothManager$Default: android.bluetooth.IBluetoothGatt getBluetoothGatt()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$DualTimer: android.os.BatteryStats$Timer getSubTimer()> -> _SOURCE_
<android.telephony.NetworkRegistrationInfo: boolean isSearching()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.hardware.display.DisplayManagerGlobal: android.hardware.display.BrightnessConfiguration getDefaultBrightnessConfiguration()> -> _SOURCE_
<android.telephony.SmsMessage: android.telephony.SmsMessage createFromPdu(byte[],java.lang.String)> -> _SOURCE_
<android.text.AutoGrowArray$IntArray: int[] getRawArray()> -> _SOURCE_
<android.util.XmlPullAttributes: java.lang.String getAttributeNamespace(int)> -> _SOURCE_
<android.security.keystore.AndroidKeyStorePublicKey: java.lang.String getFormat()> -> _SOURCE_
<com.android.internal.view.IInputContext$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.view.IScrollCaptureClient$Stub: android.view.IScrollCaptureClient getDefaultImpl()> -> _SOURCE_
<android.app.UriGrantsManager: android.content.pm.ParceledListSlice getGrantedUriPermissions(java.lang.String)> -> _SOURCE_
<android.content.pm.ICrossProfileApps$Default: java.util.List getTargetUserProfiles(java.lang.String)> -> _SOURCE_
<android.telephony.SmsManager: void <clinit>()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isEphemeralUser(android.content.ComponentName)> -> _SOURCE_
<android.app.FragmentController: android.app.LoaderManager getLoaderManager()> -> _SOURCE_
<android.media.MediaRouter$RouteInfo: java.lang.CharSequence getStatus()> -> _SOURCE_
<android.net.LinkProperties: java.util.List getAddresses()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: boolean needMobileRadioShutdown()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Default: java.util.List getDelegatePackages(android.content.ComponentName,java.lang.String)> -> _SOURCE_
<android.hardware.SensorDirectChannel: boolean isValid()> -> _SOURCE_
<android.service.notification.IStatusBarNotificationHolder$Stub: android.service.notification.IStatusBarNotificationHolder getDefaultImpl()> -> _SOURCE_
<android.print.PrintAttributes: android.print.PrintAttributes$Resolution getResolution()> -> _SOURCE_
<android.net.LinkProperties: java.util.List getAllAddresses()> -> _SOURCE_
<android.hardware.soundtrigger.IRecognitionStatusCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.content.ContextWrapper: java.io.File getSharedPreferencesPath(java.lang.String)> -> _SOURCE_
<android.content.pm.ShortcutInfo: java.lang.CharSequence getText()> -> _SOURCE_
<android.os.IIncidentManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl: android.hardware.camera2.CameraDevice getDevice()> -> _SOURCE_
<com.android.internal.policy.PhoneFallbackEventHandler: android.telephony.TelephonyManager getTelephonyManager()> -> _SOURCE_
<android.net.LinkProperties: android.net.CaptivePortalData getCaptivePortalData()> -> _SOURCE_
<android.view.ViewConfiguration: int getKeyRepeatDelay()> -> _SOURCE_
<android.app.usage.UsageEvents$Event: android.app.usage.UsageEvents$Event getObfuscatedIfInstantApp()> -> _SOURCE_
<com.android.internal.widget.IRemoteViewsFactory$Stub$Proxy: android.widget.RemoteViews getViewAt(int)> -> _SOURCE_
<android.net.lowpan.ILowpanEnergyScanCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telephony.CellSignalStrengthWcdma: int hashCode()> -> _SOURCE_
<android.telephony.CellSignalStrengthCdma: int getDbm()> -> _SOURCE_
<android.widget.PopupWindow: float getElevation()> -> _SOURCE_
<android.content.pm.PackageUserState: java.lang.String[] getOverlayPaths()> -> _SOURCE_
<android.hardware.Camera$Parameters: java.util.List getMeteringAreas()> -> _SOURCE_
<android.telephony.NetworkRegistrationInfo: int describeContents()> -> _SOURCE_
<android.content.pm.parsing.component.ComponentParseUtils: java.lang.CharSequence getNonLocalizedLabel(android.content.pm.parsing.component.ParsedComponent)> -> _SOURCE_
<android.bluetooth.BluetoothGattCharacteristic: java.util.List getDescriptors()> -> _SOURCE_
<android.bluetooth.BluetoothDevice: int getBondState()> -> _SOURCE_
<android.bluetooth.BluetoothPan: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
<android.app.role.RoleManager: java.util.List getRoleHolders(java.lang.String)> -> _SOURCE_
<com.android.internal.os.PowerProfile: double getAveragePower(java.lang.String,int)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.telephony.CarrierRestrictionRules: java.lang.Boolean lambda$areCarrierIdentifiersAllowed$0(java.lang.Boolean)> -> _SOURCE_
<android.view.ScrollCaptureSession: android.view.Surface getSurface()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$ControllerActivityCounterImpl: android.os.BatteryStats$LongCounter getPowerCounter()> -> _SOURCE_
<android.widget.FrameLayout: boolean getMeasureAllChildren()> -> _SOURCE_
<android.telephony.data.ApnSetting: java.lang.String getMmsProxyAddressAsString()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.os.storage.IStorageManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.IActivityTaskManager$Stub$Proxy: android.content.pm.ParceledListSlice getRecentTasks(int,int,int)> -> _SOURCE_
<android.app.IAlarmManager$Stub$Proxy: android.app.AlarmManager$AlarmClockInfo getNextAlarmClock(int)> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getDelegatePackages(android.content.ComponentName,java.lang.String)> -> _SOURCE_
<android.drm.DrmInfoRequest: java.lang.String getMimeType()> -> _SOURCE_
<android.telephony.PhoneCapability: int describeContents()> -> _SOURCE_
<android.app.usage.IStorageStatsManager$Stub$Proxy: long getCacheBytes(java.lang.String,java.lang.String)> -> _SOURCE_
<android.bluetooth.IBluetooth$Stub$Proxy: java.lang.String getName()> -> _SOURCE_
<android.os.UserManager: int getUserTypeForStatsd(java.lang.String)> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: android.os.Bundle getApplicationRestrictions(android.content.ComponentName,java.lang.String,java.lang.String)> -> _SOURCE_
<android.view.SurfaceControlViewHost: android.view.SurfaceControlViewHost$SurfacePackage getSurfacePackage()> -> _SOURCE_
<android.hardware.SensorPrivacyManager: android.hardware.SensorPrivacyManager getInstance(android.content.Context)> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: java.lang.String getOverlayTarget()> -> _SOURCE_
<android.os.IUserManager$Default: java.util.List getUserRestrictionSources(java.lang.String,int)> -> _SOURCE_
<android.telephony.CellIdentity: android.telephony.CellIdentity create(android.hardware.radio.V1_2.CellIdentity)> -> _SOURCE_
<android.telecom.TelecomManager: java.util.List getAllPhoneAccounts()> -> _SOURCE_
<android.telephony.ims.ImsRcsManager: android.telephony.ims.RcsUceAdapter getUceAdapter()> -> _SOURCE_
<android.content.pm.LauncherActivityInfo: java.lang.String getName()> -> _SOURCE_
<android.text.style.ReplacementSpan: java.lang.CharSequence getContentDescription()> -> _SOURCE_
<android.telephony.LteVopsSupportInfo: int getEmcBearerSupport()> -> _SOURCE_
<com.android.internal.view.IInputMethodSession$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.database.BulkCursorToCursorAdaptor: android.database.IContentObserver getObserver()> -> _SOURCE_
<android.net.wifi.nl80211.ISendMgmtFrameEvent$Stub: android.net.wifi.nl80211.ISendMgmtFrameEvent getDefaultImpl()> -> _SOURCE_
<android.graphics.ColorSpace: android.graphics.ColorSpace get(android.graphics.ColorSpace$Named)> -> _SOURCE_
<android.animation.ValueAnimator: java.lang.String getNameForTrace()> -> _SOURCE_
<android.location.IGnssNavigationMessageListener$Stub: android.location.IGnssNavigationMessageListener getDefaultImpl()> -> _SOURCE_
<com.android.internal.util.MemInfoReader: long getTotalSizeKb()> -> _SOURCE_
<android.os.SystemConfigManager: java.util.Set getDisabledUntilUsedPreinstalledCarrierApps()> -> _SOURCE_
<android.service.persistentdata.IPersistentDataBlockService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.CellSignalStrengthTdscdma: int getRssi()> -> _SOURCE_
<android.telephony.NetworkScanRequest: int getIncrementalResultsPeriodicity()> -> _SOURCE_
<android.telephony.SubscriptionManager$OnSubscriptionsChangedListener: com.android.internal.telephony.util.HandlerExecutor getHandlerExecutor()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getCarrierIdListVersion(int)> -> _SOURCE_
<android.hardware.cas.V1_1.ICasListener$Proxy: java.util.ArrayList getHashChain()> -> _SOURCE_
<android.bluetooth.BluetoothGattDescriptor: java.util.UUID getUuid()> -> _SOURCE_
<android.location.GpsMeasurement: double getCodePhaseInChips()> -> _SOURCE_
<android.content.ContextWrapper: android.content.res.Resources getResources()> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: java.util.List getOriginalPackages()> -> _SOURCE_
<android.view.inputmethod.InputMethodInfo: java.lang.String getId()> -> _SOURCE_
<android.view.inputmethod.InputConnectionWrapper: android.view.inputmethod.ExtractedText getExtractedText(android.view.inputmethod.ExtractedTextRequest,int)> -> _SOURCE_
<android.transition.Visibility: java.lang.String[] getTransitionProperties()> -> _SOURCE_
<android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()> -> _SOURCE_
<android.util.MemoryIntArray: int getMaxSize()> -> _SOURCE_
<android.app.ISearchManager$Stub: android.app.ISearchManager getDefaultImpl()> -> _SOURCE_
<android.content.pm.PackageManager: java.util.Set getWhitelistedRestrictedPermissions(java.lang.String,int)> -> _SOURCE_
<android.net.LinkProperties: java.util.List getAllInterfaceNames()> -> _SOURCE_
<android.graphics.drawable.ColorStateListDrawable: android.content.res.ColorStateList getColorStateList()> -> _SOURCE_
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.PackageInfo getPackageInfoVersioned(android.content.pm.VersionedPackage,int,int)> -> _SOURCE_
<android.hardware.radio.RadioManager$ModuleProperties: java.util.Map getDabFrequencyTable()> -> _SOURCE_
<android.app.LoadedApk$ReceiverDispatcher: java.lang.RuntimeException getUnregisterLocation()> -> _SOURCE_
<android.location.GnssAntennaInfo$PhaseCenterOffset: double getZOffsetUncertaintyMm()> -> _SOURCE_
<android.widget.CompoundButton: android.graphics.PorterDuff$Mode getButtonTintMode()> -> _SOURCE_
<android.os.INetworkManagementService$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.location.GpsClock: long getTimeInNs()> -> _SOURCE_
<android.os.FactoryTest: int getMode()> -> _SOURCE_
<com.android.internal.view.menu.MenuAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SOURCE_
<android.transition.ChangeBounds: boolean getResizeClip()> -> _SOURCE_
<android.bluetooth.IBluetoothManagerCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.view.autofill.AutofillPopupWindow$2: android.view.ViewTreeObserver getViewTreeObserver()> -> _SOURCE_
<android.view.IScrollCaptureController$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: java.util.List getNeighboringCellInfo(java.lang.String,java.lang.String)> -> _SOURCE_
<android.telephony.SmsMessage: int getStatusOnIcc()> -> _SOURCE_
<android.app.Activity: android.app.Application getApplication()> -> _SOURCE_
<android.content.ContextWrapper: android.os.Handler getMainThreadHandler()> -> _SOURCE_
<android.bluetooth.IBluetoothGattServerCallback$Stub: android.bluetooth.IBluetoothGattServerCallback getDefaultImpl()> -> _SOURCE_
<android.bluetooth.BluetoothActivityEnergyInfo: long getControllerRxTimeMillis()> -> _SOURCE_
<android.telephony.RadioAccessFamily: int getRafFromNetworkType(int)> -> _SOURCE_
<android.app.Notification$MessagingStyle: java.lang.CharSequence getConversationTitle()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: int getSubIdForPhoneAccountHandle(android.telecom.PhoneAccountHandle,java.lang.String,java.lang.String)> -> _SOURCE_
<android.app.timezone.DistroRulesVersion: java.lang.String getRulesVersion()> -> _SOURCE_
<android.hardware.usb.UsbDevice: java.lang.String getVersion()> -> _SOURCE_
<android.net.lowpan.ILowpanInterface$Default: java.lang.String getDriverVersion()> -> _SOURCE_
<android.view.autofill.AutofillManager: boolean isAutofillSupported()> -> _SOURCE_
<android.view.InsetsAnimationControlImpl: android.util.SparseArray getControls()> -> _SOURCE_
<android.graphics.drawable.VectorDrawable: android.graphics.Insets getOpticalInsets()> -> _SOURCE_
<android.content.pm.LauncherApps: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,android.os.UserHandle)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.app.ActivityManager: int getPackageImportance(java.lang.String)> -> _SOURCE_
<android.app.IAppTask$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telephony.TelephonyManager: int invokeOemRilRequestRaw(byte[],byte[])> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Default: boolean getDoNotAskCredentialsOnBoot()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean getRcsProvisioningStatusForCapability(int,int)> -> _SOURCE_
<android.net.TrafficStats: long getTxBytes(java.lang.String)> -> _SOURCE_
<android.service.textclassifier.ITextClassifierCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.ContextImpl: java.io.File getCodeCacheDir()> -> _SOURCE_
<android.app.IApplicationThread$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.telephony.SmsApplication: boolean isDefaultSmsApplication(android.content.Context,java.lang.String)> -> _SOURCE_
<android.provider.Settings$Global: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)> -> _SOURCE_
<android.net.INetworkStatsSession$Stub: android.net.INetworkStatsSession getDefaultImpl()> -> _SOURCE_
<android.hardware.biometrics.CryptoObject: android.security.identity.IdentityCredential getIdentityCredential()> -> _SOURCE_
<android.os.storage.StorageManager: long getStorageCacheBytes(java.io.File,int)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.view.WindowInsetsAnimation: android.view.animation.Interpolator getInterpolator()> -> _SOURCE_
<android.telephony.PinResult: android.telephony.PinResult getDefaultFailedResult()> -> _SOURCE_
<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.impl.CameraMetadataNative getNativeCopy()> -> _SOURCE_
<android.os.BatterySaverPolicyConfig: boolean getForceBackgroundCheck()> -> _SOURCE_
<android.os.UserManager: android.graphics.Bitmap getUserIcon(int)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: android.app.admin.FactoryResetProtectionPolicy getFactoryResetProtectionPolicy(android.content.ComponentName)> -> _SOURCE_
<android.view.ViewConfiguration: int getScrollBarSize()> -> _SOURCE_
<android.print.PrintAttributes$MediaSize: java.lang.String getId()> -> _SOURCE_
<android.app.DisabledWallpaperManager: int getWallpaperIdForUser(int,int)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.lang.CharSequence getDeviceOwnerLockScreenInfo()> -> _SOURCE_
<android.telephony.MbmsDownloadSession: android.os.IBinder$DeathRecipient access$500(android.telephony.MbmsDownloadSession)> -> _SOURCE_
<android.hardware.radio.ITunerCallback$Stub: android.hardware.radio.ITunerCallback getDefaultImpl()> -> _SOURCE_
<android.accounts.Account: java.lang.String getAccessId()> -> _SOURCE_
<android.os.IDeviceIdleController$Stub$Proxy: int[] getAppIdWhitelistExceptIdle()> -> _SOURCE_
<android.app.DisabledWallpaperManager: android.content.Intent getCropAndSetWallpaperIntent(android.net.Uri)> -> _SOURCE_
<android.app.BackStackRecord: boolean isEmpty()> -> _SOURCE_
<android.net.ConnectivityManager: java.lang.String[] getTetherableWifiRegexs()> -> _SOURCE_
<android.content.res._$$Lambda$ResourcesImpl$h3PTRX185BeQl8SVC2_w9arp5Og: java.lang.Object get()> -> _SOURCE_
<android.content.pm.ApplicationInfo: android.content.pm.ApplicationInfo getApplicationInfo()> -> _SOURCE_
<android.telecom._$$Lambda$qa4s1Fm2YuohEunaJUJcmJXDXG0: java.lang.String getSessionId()> -> _SOURCE_
<android.media.midi.IMidiDeviceServer$Stub: android.media.midi.IMidiDeviceServer getDefaultImpl()> -> _SOURCE_
<android.content.pm.parsing.component.ParsedActivity: android.content.pm.ActivityInfo$WindowLayout getWindowLayout()> -> _SOURCE_
<android.app.Fragment: android.transition.Transition getSharedElementReturnTransition()> -> _SOURCE_
<android.app.NotificationChannel: java.lang.String getGroup()> -> _SOURCE_
<android.media.MediaDescription: java.lang.String getMediaId()> -> _SOURCE_
<android.app.IActivityManager$Default: java.util.List getAllStackInfos()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getCdmaPrlVersion()> -> _SOURCE_
<android.os.storage.IStorageManager$Stub$Proxy: long getCacheSizeBytes(java.lang.String,int)> -> _SOURCE_
<android.hardware.hdmi.IHdmiMhlVendorCommandListener$Stub: android.hardware.hdmi.IHdmiMhlVendorCommandListener getDefaultImpl()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean iccCloseLogicalChannel(int)> -> _SOURCE_
<android.app.IWallpaperManager$Stub$Proxy: android.app.WallpaperColors getWallpaperColors(int,int,int)> -> _SOURCE_
<android.app.ActivityManager: java.util.List getBugreportWhitelistedPackages()> -> _SOURCE_
<android.os.IUserManager$Stub$Proxy: java.util.List getProfiles(int,boolean)> -> _SOURCE_
<android.app.JobSchedulerImpl: android.app.job.JobInfo getPendingJob(int)> -> _SOURCE_
<android.app.usage.UsageEvents$Event: android.app.usage.UsageEvents$Event getObfuscatedNotificationEvent()> -> _SOURCE_
<android.content.pm.parsing.component.ParsedActivity: boolean getSupportsSizeChanges()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.util.List getAllPermissionGroups(int)> -> _SOURCE_
<android.content.ContentResolver: boolean isSyncActive(android.accounts.Account,java.lang.String)> -> _SOURCE_
<android.net.wifi.nl80211.IWifiScannerImpl$Default: android.net.wifi.nl80211.NativeScanResult[] getScanResults()> -> _SOURCE_
<android.app.UiModeManager: boolean isUiModeLocked()> -> _SOURCE_
<android.app.AppOpsManager: java.util.List getPackagesForOps(int[])> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean disableDataConnectivity()> -> _SOURCE_
<android.animation.AnimatorSet: long getDuration()> -> _SOURCE_
<android.window.ITaskOrganizerController$Default: java.util.List getRootTasks(int,int[])> -> _SOURCE_
<android.hardware.ISensorPrivacyListener$Stub: android.hardware.ISensorPrivacyListener getDefaultImpl()> -> _SOURCE_
<com.android.internal.telephony.gsm.SmsMessage$PduParser: long getSCTimestampMillis()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: android.os.Bundle getApplicationRestrictions(android.content.ComponentName,java.lang.String)> -> _SOURCE_
<android.media.RingtoneManager: android.net.Uri getCacheForType(int)> -> _SOURCE_
<android.animation.ValueAnimator: android.animation.AnimationHandler getAnimationHandler()> -> _SOURCE_
<android.app.DisabledWallpaperManager: android.app.WallpaperInfo getWallpaperInfo()> -> _SOURCE_
<android.permission.IPermissionManager$Stub$Proxy: java.util.List getSplitPermissions()> -> _SOURCE_
<android.os.IIncidentCompanion$Default: java.util.List getIncidentReportList(java.lang.String,java.lang.String)> -> _SOURCE_
<android.content.IRestrictionsManager$Stub: android.content.IRestrictionsManager getDefaultImpl()> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Default: java.lang.String getSubscriberIdForSubscriber(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.telephony.SmsCbMessage: boolean isEmergencyMessage()> -> _SOURCE_
<android.hardware.display.IDisplayManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.hardware.cas.V1_0.IDescramblerBase$Stub: java.util.ArrayList getHashChain()> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Default: java.lang.String getLine1AlphaTagForSubscriber(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.telephony.ModemActivityInfo: long getTimestamp()> -> _SOURCE_
<android.telephony.SignalStrength: int getCdmaEcio()> -> _SOURCE_
<android.app.role.RoleManager: java.util.List getHeldRolesFromController(java.lang.String)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: android.os.BatteryStats$ControllerActivityCounter getBluetoothControllerActivity()> -> _SOURCE_
<android.hardware.cas.V1_0.ICasListener$Proxy: java.util.ArrayList getHashChain()> -> _SOURCE_
<android.content.IContentService$Stub$Proxy: android.content.SyncAdapterType[] getSyncAdapterTypesAsUser(int)> -> _SOURCE_
<android.telephony.SubscriptionManager: int[] getSubId(int)> -> _SOURCE_
<android.app.ActivityThread: android.content.res.Configuration getConfiguration()> -> _SOURCE_
<android.net.NetworkScoreManager: java.util.List getAllValidScorers()> -> _SOURCE_
<android.os.Environment$UserEnvironment: java.io.File[] getExternalDirs()> -> _SOURCE_
<android.view.IRotationWatcher$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.hardware.cas.V1_0.IMediaCasService$Stub: java.util.ArrayList getHashChain()> -> _SOURCE_
<android.media.MicrophoneInfo: int getType()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.net.wifi.nl80211.IPnoScanEvent$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.view.accessibility.AccessibilityRecord: java.lang.CharSequence getContentDescription()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.hardware.display.WifiDisplaySessionInfo: java.lang.String getPassphrase()> -> _SOURCE_
<android.graphics.fonts.Font: android.os.LocaleList getLocaleList()> -> _SOURCE_
<android.telephony.SubscriptionManager: int getDefaultSubscriptionId()> -> _SOURCE_
<android.media.IPlaybackConfigDispatcher$Stub: android.media.IPlaybackConfigDispatcher getDefaultImpl()> -> _SOURCE_
<android.app.job.JobParameters: android.app.job.IJobCallback getCallback()> -> _SOURCE_
<android.view.ViewGroup: android.view.View getDeepestFocusedChild()> -> _SOURCE_
<android.telephony.PhoneNumberUtils: java.lang.String getUsernameFromUriNumber(java.lang.String)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.media.IAudioFocusDispatcher$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telecom.TelecomManager: boolean isRinging()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.app.ContextImpl: java.lang.String getPackageResourcePath()> -> _SOURCE_
<android.bluetooth.IBluetoothHeadsetClient$Default: java.util.List getConnectedDevices()> -> _SOURCE_
<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtype()> -> _SOURCE_
<android.bluetooth.BluetoothHidDevice: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
<android.telephony.CellIdentityWcdma: android.telephony.CellLocation asCellLocation()> -> _SOURCE_
<com.android.ims.internal.IImsFeatureStatusCallback$Stub: com.android.ims.internal.IImsFeatureStatusCallback getDefaultImpl()> -> _SOURCE_
<android.app.ApplicationLoaders: android.app.ApplicationLoaders getDefault()> -> _SOURCE_
<android.companion.ICompanionDeviceManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.print.PrintAttributes$MediaSize: android.util.ArraySet getAllPredefinedSizes()> -> _SOURCE_
<android.net.INetworkStatsService$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.media.tv.ITvInputManager$Stub$Proxy: java.util.List getTvInputList(int)> -> _SOURCE_
<android.print.IPrintJobStateChangeListener$Stub: android.print.IPrintJobStateChangeListener getDefaultImpl()> -> _SOURCE_
<android.hardware.display.ColorDisplayManager: int getTransformCapabilities()> -> _SOURCE_
<com.android.internal.os.TransferPipe: android.os.ParcelFileDescriptor getWriteFd()> -> _SOURCE_
<android.media.AudioManager: java.util.List getAudioVolumeGroups()> -> _SOURCE_
<android.app.FragmentManagerImpl: java.util.List getFragments()> -> _SOURCE_
<android.os.StatFs: long getAvailableBlocksLong()> -> _SOURCE_
<android.app.Notification: java.lang.String getChannelId()> -> _SOURCE_
<android.bluetooth.IBluetoothHidDevice$Default: java.util.List getConnectedDevices()> -> _SOURCE_
<com.android.internal.os.KernelCpuUidBpfMapReader: com.android.internal.os.KernelCpuUidBpfMapReader getActiveTimeReaderInstance()> -> _SOURCE_
<android.media.session.ISession2TokensListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.PhoneNumberUtils: java.lang.String calledPartyBCDFragmentToString(byte[],int,int)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.net.lowpan.ILowpanInterfaceListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.net.IConnectivityManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.graphics.palette.Target: float getTargetLightness()> -> _SOURCE_
<android.content.rollback.IRollbackManager$Stub$Proxy: android.content.pm.ParceledListSlice getRecentlyCommittedRollbacks()> -> _SOURCE_
<android.view.RemoteAnimationAdapter: long getStatusBarTransitionDelay()> -> _SOURCE_
<com.android.internal.app.LocalePicker$LocaleInfo: java.util.Locale getLocale()> -> _SOURCE_
<android.app.AppOpsManager$AttributedHistoricalOps: java.lang.String getTag()> -> _SOURCE_
<android.view.Window: float getElevation()> -> _SOURCE_
<android.telephony.mbms.IMbmsDownloadSessionCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.media.MediaDescription: android.net.Uri getIconUri()> -> _SOURCE_
<android.telephony.SubscriptionInfo: java.lang.CharSequence getCarrierName()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isVideoCallingEnabled()> -> _SOURCE_
<android.telephony.CellSignalStrengthLte: boolean isValid()> -> _SOURCE_
<android.os.StatsServiceManager$ServiceRegisterer: android.os.IBinder getOrThrow()> -> _SOURCE_
<android.hardware.usb.UsbManager: java.util.List getPorts()> -> _SOURCE_
<android.webkit.IWebViewUpdateService$Stub$Proxy: java.lang.String getCurrentWebViewPackageName()> -> _SOURCE_
<android.animation.AnimationHandler: android.animation.AnimationHandler getInstance()> -> _SOURCE_
<android.app.assist.AssistStructure$ViewNode: android.os.LocaleList getLocaleList()> -> _SOURCE_
<android.app.VoiceInteractor$Request: android.app.Activity getActivity()> -> _SOURCE_
<android.net.INetworkManagementEventObserver$Stub: android.net.INetworkManagementEventObserver getDefaultImpl()> -> _SOURCE_
<android.view.contentcapture.ContentCaptureContext: android.content.ComponentName getActivityComponent()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: long getPasswordExpiration(android.content.ComponentName)> -> _SOURCE_
<android.location.Address: java.lang.String getUrl()> -> _SOURCE_
<android.app.blob.BlobStoreManager: long getRemainingLeaseQuotaBytes()> -> _SOURCE_
<com.android.internal.telephony.ISms$Default: int getPreferredSmsSubscription()> -> _SOURCE_
<com.android.internal.telephony.ISub$Stub$Proxy: int getDefaultDataSubId()> -> _SOURCE_
<android.view.textclassifier.ConversationActions: java.lang.String getId()> -> _SOURCE_
<android.view.autofill.AutofillPopupWindow: android.transition.Transition getExitTransition()> -> _SOURCE_
<com.android.internal.app.WindowDecorActionBar$TabImpl: java.lang.CharSequence getText()> -> _SOURCE_
<android.app.WallpaperManager: android.graphics.Bitmap getBitmap(boolean)> -> _SOURCE_
<android.service.notification.IStatusBarNotificationHolder$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)> -> _SOURCE_
<android.text.method.ArrowKeyMovementMethod: android.text.method.MovementMethod getInstance()> -> _SOURCE_
<android.nfc.cardemulation.AidGroup: java.util.List getAids()> -> _SOURCE_
<android.media.MediaCas: boolean isSystemIdSupported(int)> -> _SOURCE_
<android.view.autofill.IAutoFillManagerClient$Stub: android.view.autofill.IAutoFillManagerClient getDefaultImpl()> -> _SOURCE_
<android.content.ContentProviderClient: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.net.TrafficStats: long getUidUdpTxBytes(int)> -> _SOURCE_
<android.telephony.TelephonyManager: int getImsRegTechnologyForMmTel()> -> _SOURCE_
<android.media.IRingtonePlayer$Stub: android.media.IRingtonePlayer getDefaultImpl()> -> _SOURCE_
<android.service.notification.IConditionProvider$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.printservice.recommendation.RecommendationInfo: java.lang.CharSequence getName()> -> _SOURCE_
<android.app.job.JobParameters: android.content.ClipData getClipData()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.print.PrinterCapabilitiesInfo: java.util.List getResolutions()> -> _SOURCE_
<android.media.session.PlaybackState: java.util.List getCustomActions()> -> _SOURCE_
<android.companion.ICompanionDeviceManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.CellInfo: boolean isRegistered()> -> _SOURCE_
<android.net.ConnectivityDiagnosticsManager$DataStallReport: android.net.NetworkCapabilities getNetworkCapabilities()> -> _SOURCE_
<android.net.LocalSocket: android.net.Credentials getPeerCredentials()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.app.Notification$CarExtender: android.graphics.Bitmap getLargeIcon()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getSubIdForPhoneAccount(android.telecom.PhoneAccount)> -> _SOURCE_
<android.media.AudioManager: java.util.List getMicrophones()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.content.res.FontResourcesParser$ProviderResourceEntry: java.util.List getCerts()> -> _SOURCE_
<android.content.res.ResourcesImpl: android.content.res.CompatibilityInfo getCompatibilityInfo()> -> _SOURCE_
<android.net.LocalSocketImpl: java.io.InputStream getInputStream()> -> _SOURCE_
<com.android.internal.app.IBatteryStats$Default: long getAwakeTimePlugged()> -> _SOURCE_
<android.content.res.AssetManager: java.lang.String[] getNonSystemLocales()> -> _SOURCE_
<android.media.AudioRecord: int read(float[],int,int,int)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.telephony.SubscriptionManager: java.util.List getActiveSubscriptionInfoList()> -> _SOURCE_
<android.text.FontConfig$Alias: java.lang.String getToName()> -> _SOURCE_
<android.bluetooth.BluetoothHeadset: boolean isAudioOn()> -> _SOURCE_
<android.provider.FontRequest: java.lang.String getProviderAuthority()> -> _SOURCE_
<android.media.midi.MidiDeviceServer: android.media.midi.IMidiDeviceServer getBinderInterface()> -> _SOURCE_
<android.media.RoutingSessionInfo: java.util.List getDeselectableRoutes()> -> _SOURCE_
<android.location.GnssMeasurement: double getFullInterSignalBiasUncertaintyNanos()> -> _SOURCE_
<android.app.Activity: android.app.LoaderManager getLoaderManager()> -> _SOURCE_
<android.inputmethodservice.InputMethodService: boolean getCurrentInputStarted()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: int getCurrentFailedPasswordAttempts()> -> _SOURCE_
<android.print.IPrintServicesChangeListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.TelephonyManager: int getSimState(int)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.security.KeyStore$CertificateChainPromise: java.util.concurrent.CompletableFuture getFuture()> -> _SOURCE_
<android.hardware.usb.IUsbManager$Stub$Proxy: java.util.List getPorts()> -> _SOURCE_
<android.view.ViewConfiguration: int getScrollBarFadeDuration()> -> _SOURCE_
<android.telephony.CellIdentityGsm: int getLac()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.telephony.RadioAccessSpecifier: int[] getChannels()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.security.net.config.ManifestConfigSource: android.security.net.config.NetworkSecurityConfig getDefaultConfig()> -> _SOURCE_
<android.media.AudioManager: boolean isMasterMute()> -> _SOURCE_
<android.app.ResourcesManager: android.app.ResourcesManager getInstance()> -> _SOURCE_
<android.telephony.TelephonyHistogram: int getAverageTime()> -> _SOURCE_
<android.app.contentsuggestions.SelectionsRequest: android.os.Bundle getExtras()> -> _SOURCE_
<android.security.net.config.ManifestConfigSource$DefaultConfigSource: java.util.Set getPerDomainConfigs()> -> _SOURCE_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtype()> -> _SOURCE_
<android.telephony.PreciseDataConnectionState: int hashCode()> -> _SOURCE_
<android.telephony.ModemActivityInfo: int getReceiveTimeMillis()> -> _SOURCE_
<android.content.pm.ShortcutInfo: android.content.Intent[] getIntentsNoExtras()> -> _SOURCE_
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String[] getUnsuspendablePackagesForUser(java.lang.String[],int)> -> _SOURCE_
<com.android.internal.telecom.ITelecomService$Stub$Proxy: android.content.ComponentName getDefaultPhoneApp()> -> _SOURCE_
<android.telephony.BarringInfo: android.telephony.BarringInfo createLocationInfoSanitizedCopy()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean isVoWiFiRoamingSettingEnabled(int)> -> _SOURCE_
<android.hardware.camera2.impl.CameraDeviceImpl: java.lang.String getId()> -> _SOURCE_
<android.media.TimedText: android.graphics.Rect getBounds()> -> _SOURCE_
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.KeySet getSigningKeySet(java.lang.String)> -> _SOURCE_
<android.view.IGraphicsStats$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telephony.TelephonyManager: void toggleRadioOnOff()> -> _SOURCE_
<android.bluetooth.IBluetoothGattServerCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telephony.ServiceState: int getDataRegistrationState()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.telephony.CellSignalStrengthNr: android.telephony.CellSignalStrength copy()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: android.os.BatteryStats$ControllerActivityCounter getWifiControllerActivity()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: android.os.BatteryStats$LevelStepTracker getDischargeLevelStepTracker()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.lang.String[] getAccountTypesWithManagementDisabledAsUser(int,boolean)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: int getPasswordMinimumLowerCase(android.content.ComponentName,int)> -> _SOURCE_
<android.hardware.input.ITabletModeChangedListener$Stub: android.hardware.input.ITabletModeChangedListener getDefaultImpl()> -> _SOURCE_
<android.telephony.UiccSlotInfo: boolean getIsActive()> -> _SOURCE_
<android.app.Fragment: android.app.Activity getActivity()> -> _SOURCE_
<android.telephony.PhoneNumberUtils: boolean isPotentialLocalEmergencyNumber(android.content.Context,java.lang.String)> -> _SOURCE_
<android.os.PowerManager: int getCurrentThermalStatus()> -> _SOURCE_
<android.telephony.SignalStrength: int getGsmDbm()> -> _SOURCE_
<android.app.RemoteInput: java.util.Set getAllowedDataTypes()> -> _SOURCE_
<android.media.session.MediaController: long getFlags()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.lang.String getSystemTextClassifierPackageName()> -> _SOURCE_
<android.service.notification.StatusBarNotification: java.lang.String getGroupKey()> -> _SOURCE_
<android.view.textclassifier.ConversationActions$Message: android.app.Person getAuthor()> -> _SOURCE_
<com.android.ims.internal.IImsUt$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.content.pm.ShortcutQueryWrapper: android.content.ComponentName getActivity()> -> _SOURCE_
<android.bluetooth.BluetoothHidDeviceAppSdpSettings: java.lang.String getDescription()> -> _SOURCE_
<android.accessibilityservice.AccessibilityService: java.lang.Object getSystemService(java.lang.String)> -> _SOURCE_
<android.media.MediaDrm$CertificateRequest: byte[] getData()> -> _SOURCE_
<android.app.assist.AssistStructure: long getAcquisitionEndTime()> -> _SOURCE_
<com.android.internal.telephony.SmsMessageBase: java.lang.String getEmailFrom()> -> _SOURCE_
<android.media.session.PlaybackState: long getActiveQueueItemId()> -> _SOURCE_
<com.android.internal.view.menu.BaseMenuPresenter: android.view.View getItemView(com.android.internal.view.menu.MenuItemImpl,android.view.View,android.view.ViewGroup)> -> _SOURCE_
<android.telephony.BarringInfo$BarringServiceInfo: int getConditionalBarringTimeSeconds()> -> _SOURCE_
<android.content.ContextWrapper: android.content.ContentCaptureOptions getContentCaptureOptions()> -> _SOURCE_
<android.hardware.location.IContextHubClientCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.ITaskStackListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.view.autofill.AutofillPopupWindow$2: boolean isAttachedToWindow()> -> _SOURCE_
<android.os.PowerManager: boolean isLightDeviceIdleMode()> -> _SOURCE_
<android.os.health.TimerStat: long getTime()> -> _SOURCE_
<com.android.internal.view.IInputMethodSession$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.transition.Transition: long getDuration()> -> _SOURCE_
<android.app.NotificationManager: int getImportance()> -> _SOURCE_
<com.android.internal.telephony.ISub$Default: android.os.ParcelUuid createSubscriptionGroup(int[],java.lang.String)> -> _SOURCE_
<android.media.tv.TvInputManager: java.util.List getHardwareList()> -> _SOURCE_
<android.os.Build$Partition: java.lang.String getFingerprint()> -> _SOURCE_
<android.view.accessibility.AccessibilityRequestPreparer: android.view.View getView()> -> _SOURCE_
<android.os.IVold$Stub: android.os.IVold getDefaultImpl()> -> _SOURCE_
<android.net.Uri$OpaqueUri: java.util.List getPathSegments()> -> _SOURCE_
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)> -> _SOURCE_
<android.telecom.Logging.Session: long getExecutionStartTimeMilliseconds()> -> _SOURCE_
<android.telephony.CellSignalStrengthNr: java.lang.String toString()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.content.pm.IPackageInstallerSessionFileSystemConnector$Stub: android.content.pm.IPackageInstallerSessionFileSystemConnector getDefaultImpl()> -> _SOURCE_
<android.hardware.display.DeviceProductInfo: java.lang.String getProductId()> -> _SOURCE_
<android.content.pm.permission.SplitPermissionInfoParcelable: java.util.List getNewPermissions()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: int getStorageEncryptionStatus(int)> -> _SOURCE_
<android.hardware.usb.UsbAccessory: java.lang.String getVersion()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: android.telephony.VisualVoicemailSmsFilterSettings getActiveVisualVoicemailSmsFilterSettings(int)> -> _SOURCE_
<android.telephony.SignalStrength: int getWcdmaAsuLevel()> -> _SOURCE_
<android.location.LocationRequest: float getSmallestDisplacement()> -> _SOURCE_
<android.transition.ChangeImageTransform: java.lang.String[] getTransitionProperties()> -> _SOURCE_
<android.print.PrinterId: android.content.ComponentName getServiceName()> -> _SOURCE_
<android.net.ITetheringStatsProvider$Stub: android.net.ITetheringStatsProvider getDefaultImpl()> -> _SOURCE_
<android.bluetooth.IBluetoothPan$Stub: android.bluetooth.IBluetoothPan getDefaultImpl()> -> _SOURCE_
<android.hardware.camera2.CameraManager: boolean isHiddenPhysicalCamera(java.lang.String)> -> _SOURCE_
<android.transition.Transition: android.graphics.Rect getEpicenter()> -> _SOURCE_
<android.view.IDisplayWindowRotationCallback$Stub: android.view.IDisplayWindowRotationCallback getDefaultImpl()> -> _SOURCE_
<android.net.wifi.nl80211.NativeScanResult: byte[] getInformationElements()> -> _SOURCE_
<android.os.storage.VolumeInfo: java.io.File getInternalPath()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isDataAllowedInVoiceCall()> -> _SOURCE_
<android.telephony.SmsMessage: java.lang.String getEmailFrom()> -> _SOURCE_
<com.android.internal.telephony.GsmAlphabet: java.lang.String gsm7BitPackedToString(byte[],int,int)> -> _SOURCE_
<android.service.autofill.UserData: android.util.ArrayMap getFieldClassificationAlgorithms()> -> _SOURCE_
<android.text.method.SingleLineTransformationMethod: char[] getReplacement()> -> _SOURCE_
<android.telephony.SmsCbLocation: boolean isInLocationArea(android.telephony.SmsCbLocation)> -> _SOURCE_
<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfoAsUser(java.lang.String,int,android.os.UserHandle)> -> _SOURCE_
<android.app.AutomaticZenRule: android.service.notification.ZenPolicy getZenPolicy()> -> _SOURCE_
<com.android.internal.telephony.IMms$Stub$Proxy: android.net.Uri importTextMessage(java.lang.String,java.lang.String,int,java.lang.String,long,boolean,boolean)> -> _SOURCE_
<android.app.ApplicationPackageManager: java.lang.String[] getSystemSharedLibraryNames()> -> _SOURCE_
<android.graphics.BlendModeColorFilter: android.graphics.BlendMode getMode()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean supplyPuk(java.lang.String,java.lang.String)> -> _SOURCE_
<android.view.contentcapture.ContentCaptureContext: android.view.contentcapture.ContentCaptureSessionId getParentSessionId()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: long getLastBugReportRequestTime()> -> _SOURCE_
<android.nfc.cardemulation.CardEmulation: java.util.List getAidsForService(android.content.ComponentName,java.lang.String)> -> _SOURCE_
<android.location.GnssSingleSatCorrection: android.location.GnssReflectingPlane getReflectingPlane()> -> _SOURCE_
<android.hardware.face.FaceManager: void getFeature(int,int,android.hardware.face.FaceManager$GetFeatureCallback)> -> _SOURCE_
<com.android.internal.view.StandaloneActionMode: android.view.Menu getMenu()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: java.lang.String getCdmaEriText(java.lang.String,java.lang.String)> -> _SOURCE_
<android.app.IWallpaperManagerCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Default: java.lang.String getSubscriberIdWithFeature(java.lang.String,java.lang.String)> -> _SOURCE_
<android.widget.TextView$Marquee: float getScroll()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Default: long getLastBugReportRequestTime()> -> _SOURCE_
<android.widget.EditorTouchState: float getLastDownY()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.lang.String getDeviceOwnerNameOnAnyUser()> -> _SOURCE_
<android.media.IMediaRouterClient$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.hardware.biometrics.IBiometricEnabledOnKeyguardCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.bluetooth.IBluetoothHearingAid$Stub$Proxy: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
<android.print.PrintManager$PrintJobStateChangeListenerWrapper: android.print.PrintManager$PrintJobStateChangeListener getListener()> -> _SOURCE_
<android.hardware.Sensor: int getType()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<com.android.internal.net.VpnProfile: java.util.List getAllowedAlgorithms()> -> _SOURCE_
<android.app.Notification$CarExtender$UnreadConversation: android.app.PendingIntent getReplyPendingIntent()> -> _SOURCE_
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.InstrumentationInfo getInstrumentationInfo(android.content.ComponentName,int)> -> _SOURCE_
<android.os.IThermalStatusListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.content.ContentProvider: java.lang.String getReadPermission()> -> _SOURCE_
<android.media.Utils: java.lang.String getFileDisplayNameFromUri(android.content.Context,android.net.Uri)> -> _SOURCE_
<android.bluetooth.IBluetooth$Default: long getSupportedProfiles()> -> _SOURCE_
<android.app.ContextImpl: java.io.File getCacheDir()> -> _SOURCE_
<android.telephony.ServiceState: java.lang.String getOperatorNumeric()> -> _SOURCE_
<android.app.IWallpaperManager$Stub$Proxy: java.lang.String getName()> -> _SOURCE_
<android.app.servertransaction.ClientTransaction: java.util.List getCallbacks()> -> _SOURCE_
<android.net.nsd.NsdServiceInfo: java.lang.String getServiceName()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.content.pm.BaseParceledListSlice: java.util.List getList()> -> _SOURCE_
<android.app.backup.IBackupManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.os.Environment: java.io.File getExternalStoragePublicDirectory(java.lang.String)> -> _SOURCE_
<com.android.internal.database.SortCursor: java.lang.String[] getColumnNames()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Default: java.util.List getPermittedInputMethodsForCurrentUser()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean getSmsSendCapableForPhone(int,boolean)> -> _SOURCE_
<android.app.DownloadManager: java.lang.String getMimeTypeForDownloadedFile(long)> -> _SOURCE_
<android.app.usage.UsageStatsManager: java.util.List queryUsageStats(int,long,long)> -> _SOURCE_
<android.view.accessibility.IAccessibilityInteractionConnection$Stub: android.view.accessibility.IAccessibilityInteractionConnection getDefaultImpl()> -> _SOURCE_
<android.service.notification.IStatusBarNotificationHolder$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: java.lang.String getDeviceId(java.lang.String)> -> _SOURCE_
<android.graphics.drawable.RippleDrawable: android.graphics.Paint getRipplePaint()> -> _SOURCE_
<android.os.ParcelableParcel: java.lang.ClassLoader getClassLoader()> -> _SOURCE_
<android.hardware.biometrics.IAuthService$Default: long[] getAuthenticatorIds()> -> _SOURCE_
<android.net.LinkProperties: java.lang.String getPrivateDnsServerName()> -> _SOURCE_
<com.android.internal.telephony.ICarrierConfigLoader$Stub: com.android.internal.telephony.ICarrierConfigLoader asInterface(android.os.IBinder)> -> _SOURCE_
<android.os.storage.StorageVolume: java.lang.String getUuid()> -> _SOURCE_
<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.view.Surface getInputSurface()> -> _SOURCE_
<android.media.soundtrigger.SoundTriggerManager: android.hardware.soundtrigger.SoundTrigger$ModelParamRange queryParameter(java.util.UUID,int)> -> _SOURCE_
<com.android.internal.telephony.IMms$Stub$Proxy: boolean getAutoPersisting()> -> _SOURCE_
<android.graphics.BlendMode: android.graphics.Xfermode getXfermode()> -> _SOURCE_
<android.renderscript.Allocation: android.renderscript.Allocation$MipmapControl getMipmap()> -> _SOURCE_
<android.content.ContentProvider: java.lang.String getCallingFeatureId()> -> _SOURCE_
<android.hardware.camera2.ICameraOfflineSession$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.view.accessibility.IAccessibilityManager$Default: long getRecommendedTimeoutMillis()> -> _SOURCE_
<com.android.internal.util.FunctionalUtils: java.lang.String getLambdaName(java.lang.Object)> -> _SOURCE_
<android.widget._$$Lambda$etfJkiCJnT2dqM2O4M2TCm9i_oA: java.lang.Object get()> -> _SOURCE_
<android.app.VrManager: int getVr2dDisplayId()> -> _SOURCE_
<android.media.RingtoneManager: android.net.Uri getActualDefaultRingtoneUri(android.content.Context,int)> -> _SOURCE_
<android.text.style.SuggestionSpan: java.lang.String getNotificationTargetClassName()> -> _SOURCE_
<android.hardware.iris.IIrisService$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.nfc.tech.NfcB: android.nfc.tech.NfcB get(android.nfc.Tag)> -> _SOURCE_
<android.telephony.CallQuality: java.lang.String toString()> -> _SOURCE_
<android.os.IUserManager$Stub$Proxy: android.os.Bundle getApplicationRestrictionsForUser(java.lang.String,int)> -> _SOURCE_
<android.view.textclassifier.ConversationActions$Message: java.time.ZonedDateTime getReferenceTime()> -> _SOURCE_
<android.app.AppOpsManager: android.os.IBinder getToken(com.android.internal.app.IAppOpsService)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: com.android.internal.telephony.CellNetworkScanResult getCellNetworkScanResults(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.media.session.MediaController: java.util.List getQueue()> -> _SOURCE_
<android.hardware.usb.UsbDevice: int getDeviceSubclass()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.content.ContextWrapper: java.io.File[] getObbDirs()> -> _SOURCE_
<android.view.contentcapture.ContentCaptureSession: android.view.contentcapture.ContentCaptureContext getContentCaptureContext()> -> _SOURCE_
<android.os.storage.IStorageManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.hardware.usb.UsbRequest: android.hardware.usb.UsbEndpoint getEndpoint()> -> _SOURCE_
<android.telephony.BarringInfo$BarringServiceInfo: int describeContents()> -> _SOURCE_
<android.app.assist.AssistStructure: long getAcquisitionStartTime()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getError()> -> _SOURCE_
<android.location.LocationManager: java.util.List getProviderPackages(java.lang.String)> -> _SOURCE_
<android.telephony.SubscriptionInfo: int getCardId()> -> _SOURCE_
<android.telephony.NeighboringCellInfo: int getCid()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.provider.Settings$Secure: long getLong(android.content.ContentResolver,java.lang.String)> -> _SOURCE_
<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getInstantAppIcon(java.lang.String)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.util.List getPermittedAccessibilityServices(android.content.ComponentName)> -> _SOURCE_
<com.android.internal.app.IAppOpsService$Stub$Proxy: java.util.List getPackagesForOps(int[])> -> _SOURCE_
<com.android.internal.telephony.euicc.IGetRulesAuthTableCallback$Stub: com.android.internal.telephony.euicc.IGetRulesAuthTableCallback getDefaultImpl()> -> _SOURCE_
<android.media.MediaRouter: android.media.MediaRouter$RouteInfo getFallbackRoute()> -> _SOURCE_
<android.os.storage.StorageManager: boolean isAllocationSupported(java.io.FileDescriptor)> -> _SOURCE_
<android.telephony.CellIdentityGsm: int getPsc()> -> _SOURCE_
<android.location.GpsMeasurement: double getPseudorangeRateUncertaintyInMetersPerSec()> -> _SOURCE_
<android.view.contentcapture.MainContentCaptureSession: android.view.contentcapture.MainContentCaptureSession getMainCaptureSession()> -> _SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: android.net.Network getActiveNetworkForUid(int,boolean)> -> _SOURCE_
<android.app.blob.IBlobStoreManager$Default: java.util.List getLeasedBlobs(java.lang.String)> -> _SOURCE_
<android.telephony.TelephonyManager: boolean resetRadioConfig()> -> _SOURCE_
<android.telephony.SmsManager: boolean disableCellBroadcastRange(int,int,int)> -> _SOURCE_
<android.telephony.CellIdentityLte: int[] getBands()> -> _SOURCE_
<android.content.pm.IPackageDeleteObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.content.ContentProviderProxy: java.lang.String getType(android.net.Uri)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: int getCarrierPrivilegeStatus(int)> -> _SOURCE_
<android.net.wifi.nl80211.IScanEvent$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.hardware.display.ColorDisplayManager$ColorDisplayManagerInternal: android.hardware.display.Time getNightDisplayCustomStartTime()> -> _SOURCE_
<android.telephony.UiccCardInfo: int getSlotIndex()> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: java.lang.String[] getSplitClassLoaderNames()> -> _SOURCE_
<android.content.om.OverlayManager: android.content.om.OverlayInfo getOverlayInfo(java.lang.String,android.os.UserHandle)> -> _SOURCE_
<android.telephony.ServiceState: int describeContents()> -> _SOURCE_
<android.view.contentcapture.ViewNode: android.view.autofill.AutofillId getParentAutofillId()> -> _SOURCE_
<android.app.Service: android.view.contentcapture.ContentCaptureManager$ContentCaptureClient getContentCaptureClient()> -> _SOURCE_
<android.telephony.CallAttributes: android.telephony.CallQuality getCallQuality()> -> _SOURCE_
<android.hardware.location.IContextHubService$Stub$Proxy: java.util.List getContextHubs()> -> _SOURCE_
<android.net.lowpan.ILowpanManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.printservice.PrintServiceInfo: java.lang.String getSettingsActivityName()> -> _SOURCE_
<android.graphics.drawable.LayerDrawable: boolean isStateful()> -> _SOURCE_
<android.telephony.TelephonyManager: android.os.PersistableBundle getCarrierConfig()> -> _SOURCE_
<android.location.LocationManager: java.lang.String getExtraLocationControllerPackage()> -> _SOURCE_
<android.telephony.TelephonyManager: int getDataActivationState()> -> _SOURCE_
<android.util.TimingsTraceLog: java.util.List getUnfinishedTracesForDebug()> -> _SOURCE_
<android.os.Bundle: short getShort(java.lang.String)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.view.contentcapture.ViewNode: java.lang.String getIdPackage()> -> _SOURCE_
<android.telephony.NetworkRegistrationInfo: android.telephony.DataSpecificRegistrationInfo getDataSpecificInfo()> -> _SOURCE_
<android.os.Debug: int getGlobalExternalFreedCount()> -> _SOURCE_
<android.graphics.ColorSpace$Rgb: float[] getPrimaries()> -> _SOURCE_
<com.android.internal.textservice.ISpellCheckerSessionListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.internal.view.menu.SubMenuBuilder: android.view.MenuItem getItem()> -> _SOURCE_
<android.net.IEthernetServiceListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.ims.internal.IImsCallSession$Stub: com.android.ims.internal.IImsCallSession getDefaultImpl()> -> _SOURCE_
<android.view.animation.Transformation: float getAlpha()> -> _SOURCE_
<android.content.pm.IPackageInstallerSession$Default: android.content.pm.DataLoaderParamsParcel getDataLoaderParams()> -> _SOURCE_
<com.android.internal.telephony.INumberVerificationCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.bluetooth.BluetoothSap: java.util.List getConnectedDevices()> -> _SOURCE_
<android.service.notification.NotificationListenerService: android.service.notification.StatusBarNotification[] getActiveNotifications()> -> _SOURCE_
<android.app.ApplicationPackageManager: android.content.res.Resources getResourcesForApplicationAsUser(java.lang.String,int)> -> _SOURCE_
<android.telephony.SmsCbLocation: java.lang.String getPlmn()> -> _SOURCE_
<android.hardware.radio.RadioManager$ModuleProperties: java.lang.String getServiceName()> -> _SOURCE_
<android.telephony.CellSignalStrength: int getRscpDbmFromAsu(int)> -> _SOURCE_
<android.telephony.BarringInfo: java.lang.String toString()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.database.BulkCursorToCursorAdaptor: java.lang.String[] getColumnNames()> -> _SOURCE_
<android.view.ViewRootInsetsControllerHost: android.view.inputmethod.InputMethodManager getInputMethodManager()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: android.telecom.PhoneAccountHandle getPhoneAccountHandleForSubscriptionId(int)> -> _SOURCE_
<android.telecom.TelecomManager: boolean isInManagedCall()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isNetworkRoaming(int)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getIsimImpi(int)> -> _SOURCE_
<android.telephony.PhoneNumberUtils: boolean isISODigit(char)> -> _SOURCE_
<android.content.pm.PackageParser$Package: boolean isVendor()> -> _SOURCE_
<android.content.ClipData$Item: android.net.Uri getUri()> -> _SOURCE_
<android.os.storage.StorageManager: java.lang.String getBestVolumeDescription(android.os.storage.VolumeInfo)> -> _SOURCE_
<android.net.NetworkInfo: java.lang.String getSubtypeName()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.telephony.PreciseDataConnectionState: int getState()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.media.tv.ITvInputManager$Stub$Proxy: java.util.List getDvbDeviceList()> -> _SOURCE_
<android.hardware.input.InputDeviceIdentifier: java.lang.String getDescriptor()> -> _SOURCE_
<android.os.UserManager: int[] getProfileIds(int,boolean)> -> _SOURCE_
<android.media.AudioManager: int getMaxVolumeIndexForAttributes(android.media.AudioAttributes)> -> _SOURCE_
<android.app.RemoteInput: java.lang.CharSequence[] getChoices()> -> _SOURCE_
<android.view.Window: boolean getAllowEnterTransitionOverlap()> -> _SOURCE_
<android.telephony.SubscriptionInfo$1: android.telephony.SubscriptionInfo createFromParcel(android.os.Parcel)> -> _SOURCE_
<android.telephony.CellIdentityLte: android.telephony.CellLocation asCellLocation()> -> _SOURCE_
<android.app.backup.IRestoreSession$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.os.RailStats: long getCellularTotalEnergyUseduWs()> -> _SOURCE_
<com.android.internal.view.StandaloneActionMode: android.view.View getCustomView()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: android.os.BatteryStats$Timer getForegroundServiceTimer()> -> _SOURCE_
<android.view.contentcapture.ViewNode: android.os.Bundle getExtras()> -> _SOURCE_
<com.android.internal.telephony.ISms$Stub$Proxy: java.lang.String createAppSpecificSmsToken(int,java.lang.String,android.app.PendingIntent)> -> _SOURCE_
<android.net.wifi.nl80211.IInterfaceEventCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.app.WindowDecorActionBar$ActionModeImpl: android.view.Menu getMenu()> -> _SOURCE_
<android.location.GpsNavigationMessage: byte getPrn()> -> _SOURCE_
<android.app.backup.IBackupManager$Stub$Proxy: android.content.Intent getDataManagementIntentForUser(int,java.lang.String)> -> _SOURCE_
<android.hardware.camera2.impl.CaptureResultExtras: long getFrameNumber()> -> _SOURCE_
<android.telephony.SubscriptionInfo: java.util.List getHplmns()> -> _SOURCE_
<android.hardware.camera2.CameraCharacteristics: java.util.List getAvailableCaptureResultKeys()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.location.GnssMeasurement: java.lang.String getCodeType()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<com.android.internal.os.KernelSingleUidTimeReader: android.util.SparseArray getLastUidCpuTimeMs()> -> _SOURCE_
<android.security.keystore.IKeystoreOperationResultCallback$Stub: android.security.keystore.IKeystoreOperationResultCallback getDefaultImpl()> -> _SOURCE_
<android.content.res.ResourcesImpl$ThemeImpl: java.lang.String[] getTheme()> -> _SOURCE_
<android.net.IpPrefix: java.net.InetAddress getAddress()> -> _SOURCE_
<com.android.internal.os._$$Lambda$RuntimeInit$ep4ioD9YINkHI5Q1wZ0N_7VFAOg: java.lang.Object get()> -> _SOURCE_
<android.app.backup.BackupManager: android.content.ComponentName getCurrentTransportComponent()> -> _SOURCE_
<android.content.ContextWrapper: java.io.File getFileStreamPath(java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: int getCallState()> -> _SOURCE_
<android.telecom.TelecomManager: android.telecom.PhoneAccountHandle getSimCallManager(int)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getActivePhoneType()> -> _SOURCE_
<android.view.contentcapture.ViewNode: java.lang.String getHint()> -> _SOURCE_
<android.net.TrafficStats: long getUidRxPackets(int)> -> _SOURCE_
<android.location.ILocationManager$Default: java.util.List getProviderPackages(java.lang.String)> -> _SOURCE_
<android.telecom.PhoneAccountHandle: android.os.UserHandle getUserHandle()> -> _SOURCE_
<android.location.GnssMeasurement: double getPseudorangeRateUncertaintyMetersPerSecond()> -> _SOURCE_
<android.telephony.SmsCbMessage: java.lang.String getMessageBody()> -> _SOURCE_
<android.content.pm.PackageManager: java.util.Set getMimeGroup(java.lang.String)> -> _SOURCE_
<android.hardware.radio.TunerCallbackAdapter: android.hardware.radio.RadioManager$ProgramInfo getCurrentProgramInformation()> -> _SOURCE_
<android.media.tv.TvInputManager: java.util.List getDvbDeviceList()> -> _SOURCE_
<android.net.NetworkInfo: java.lang.String getReason()> -> _SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: android.net.ProxyInfo getProxyForNetwork(android.net.Network)> -> _SOURCE_
<android.os.PowerManager: boolean isPowerSaveMode()> -> _SOURCE_
<android.os.incremental.IncrementalManager: boolean isAllowed()> -> _SOURCE_
<android.nfc.tech.NfcB: android.nfc.Tag getTag()> -> _SOURCE_
<android.app.assist.AssistStructure$ViewNode: android.graphics.Matrix getTransformation()> -> _SOURCE_
<android.telephony.TelephonyManager: int getCurrentPhoneType(int)> -> _SOURCE_
<android.content.pm.PackageUserState$SuspendParams: android.content.pm.PackageUserState$SuspendParams getInstanceOrNull(android.content.pm.SuspendDialogInfo,android.os.PersistableBundle,android.os.PersistableBundle)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isDeviceIdAttestationSupported()> -> _SOURCE_
<android.telephony.UssdResponse$1: android.telephony.UssdResponse createFromParcel(android.os.Parcel)> -> _SOURCE_
<android.util.proto.EncodedBuffer: java.lang.String getDebugString()> -> _SOURCE_
<android.drm.DrmManagerClient: android.content.ContentValues getMetadata(android.net.Uri)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.os.PowerManager: android.os.PowerSaveState getPowerSaveState(int)> -> _SOURCE_
<android.print.PrintAttributes$Resolution: java.lang.String getLabel()> -> _SOURCE_
<android.hardware.camera2.legacy.RequestQueue: android.hardware.camera2.legacy.RequestQueue$RequestQueueEntry getNext()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.util.List getOverrideApns(android.content.ComponentName)> -> _SOURCE_
<android.net.lowpan.ILowpanInterface$Stub$Proxy: java.lang.String[] getLinkAddresses()> -> _SOURCE_
<android.telephony.SignalStrength: int getEvdoLevel()> -> _SOURCE_
<android.widget.ScrollBarDrawable: android.graphics.drawable.Drawable getVerticalThumbDrawable()> -> _SOURCE_
<android.app.Notification$TvExtender: boolean getSuppressShowOverApps()> -> _SOURCE_
<android.telephony.SubscriptionPlan: java.lang.CharSequence getTitle()> -> _SOURCE_
<android.accounts.AccountManager: android.accounts.Account[] getAccountsByTypeAsUser(java.lang.String,android.os.UserHandle)> -> _SOURCE_
<android.os.ServiceManager: boolean isDeclared(java.lang.String)> -> _SOURCE_
<android.security.keystore.AndroidKeyStoreRSAPublicKey: java.math.BigInteger getPublicExponent()> -> _SOURCE_
<android.view.ViewRootImpl: android.view.AccessibilityInteractionController getAccessibilityInteractionController()> -> _SOURCE_
<android.media.tv.TvInputManager: int getInputState(java.lang.String)> -> _SOURCE_
<android.graphics.fonts.FontVariationAxis: float getStyleValue()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: android.os.BatteryStats$LevelStepTracker getDailyDischargeLevelStepTracker()> -> _SOURCE_
<android.content.ContextWrapper: java.io.File getDir(java.lang.String,int)> -> _SOURCE_
<android.hardware.camera2.legacy.SurfaceTextureRenderer: android.graphics.SurfaceTexture getSurfaceTexture()> -> _SOURCE_
<android.content.res.Resources: android.content.res.AssetManager getAssets()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isLockTaskPermitted(java.lang.String)> -> _SOURCE_
<android.app.usage.StorageStatsManager: android.app.usage.StorageStats queryStatsForUser(java.util.UUID,android.os.UserHandle)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.provider.Settings$Bookmarks: java.lang.CharSequence getLabelForFolder(android.content.res.Resources,java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.SmsApplication: android.content.ComponentName getDefaultSimFullApplication(android.content.Context,boolean)> -> _SOURCE_
<android.bluetooth.IBluetoothStateChangeCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.view.animation.Animation: float getScaleFactor()> -> _SOURCE_
<android.app.Notification$Action: android.graphics.drawable.Icon getIcon()> -> _SOURCE_
<com.android.internal.view.IInputMethodManager$Default: android.view.inputmethod.InputMethodSubtype getLastInputMethodSubtype()> -> _SOURCE_
<android.hardware.camera2.params.Capability: android.util.Range getZoomRatioRange()> -> _SOURCE_
<android.app.usage.UsageStatsManager: android.app.usage.UsageEvents queryEventsForSelf(long,long)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<com.android.internal.widget.IRemoteViewsFactory$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.accounts.AccountManager: android.accounts.Account[] getAccountsAsUser(int)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.view.animation.Animation: android.view.animation.Interpolator getInterpolator()> -> _SOURCE_
<android.telephony.data.ApnSetting: java.lang.String getMvnoTypeStringFromInt(int)> -> _SOURCE_
<android.telephony.PhoneNumberUtils: boolean isEmergencyNumber(int,java.lang.String)> -> _SOURCE_
<android.view.autofill.IAugmentedAutofillManagerClient$Stub: android.view.autofill.IAugmentedAutofillManagerClient getDefaultImpl()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.util.List getSharedLibraries(int)> -> _SOURCE_
<android.app.WallpaperManager: android.graphics.drawable.Drawable getBuiltInDrawable()> -> _SOURCE_
<android.telephony.TelephonyManager: int getCarrierIdListVersion()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: boolean isInEmergencySmsMode()> -> _SOURCE_
<android.content.pm.ShortcutManager: boolean isRateLimitingActive()> -> _SOURCE_
<android.content.res.ObbScanner: android.content.res.ObbInfo getObbInfo(java.lang.String)> -> _SOURCE_
<android.telephony.CallQuality: int describeContents()> -> _SOURCE_
<android.app.ActivityThread: android.os.Bundle getCoreSettings()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.String[] getLockTaskPackages(android.content.ComponentName)> -> _SOURCE_
<android.content.pm.PackageInstaller$Session: android.content.pm.DataLoaderParams getDataLoaderParams()> -> _SOURCE_
<android.drm.DrmRights: java.lang.String getSubscriptionId()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: boolean isWorldPhone(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.app.backup.IBackupManager$Stub: android.app.backup.IBackupManager getDefaultImpl()> -> _SOURCE_
<com.android.internal.util.SyncResultReceiver: java.lang.String getStringResult()> -> _SOURCE_
<android.telephony.euicc.DownloadableSubscription: java.lang.String getCarrierName()> -> _SOURCE_
<android.view.ViewDebug: long getViewRootImplCount()> -> _SOURCE_
<android.graphics.drawable.ColorDrawable: android.graphics.Xfermode getXfermode()> -> _SOURCE_
<com.android.internal.telephony.IOnSubscriptionsChangedListener$Default: android.os.IBinder asBinder()> -> _SOURCE_
<com.android.internal.widget.ToolbarWidgetWrapper: android.content.Context getContext()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: int getRadioPowerState(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.nfc.tech.IsoDep: byte[] getHistoricalBytes()> -> _SOURCE_
<android.media.tv.TvInputManager$Session: java.util.List getTracks(int)> -> _SOURCE_
<android.graphics.Bitmap: android.graphics.NinePatch$InsetStruct getNinePatchInsets()> -> _SOURCE_
<com.android.server.SystemConfig: android.util.ArrayMap getAvailableFeatures()> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getGroupIdLevel1ForSubscriber(int,java.lang.String,java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.lang.String[] getMergedSubscriberIds(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.app.Fragment: android.content.Context getContext()> -> _SOURCE_
<android.content.pm.PackageInstaller$SessionInfo: boolean getEnableRollback()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.util.List queryIntentServices(android.content.Intent,int)> -> _SOURCE_
<android.debug.IAdbManager$Stub: android.debug.IAdbManager getDefaultImpl()> -> _SOURCE_
<android.media.session.ISessionController$Default: android.os.Bundle getExtras()> -> _SOURCE_
<android.telephony.mbms.ServiceInfo: java.util.Date getSessionStartTime()> -> _SOURCE_
<com.android.internal.telephony.gsm.SmsMessage$PduParser: byte[] getUserData()> -> _SOURCE_
<android.widget.PopupWindow: android.graphics.Rect getEpicenterBounds()> -> _SOURCE_
<android.hardware.usb.UsbDevice: boolean getHasVideoPlayback()> -> _SOURCE_
<android.net.Uri$HierarchicalUri: java.lang.String getSchemeSpecificPart()> -> _SOURCE_
<android.view.InsetsAnimationControlImpl: android.view.WindowInsetsAnimationControlListener getListener()> -> _SOURCE_
<android.net.netstats.provider.NetworkStatsProvider: android.net.netstats.provider.INetworkStatsProvider getProviderBinder()> -> _SOURCE_
<android.app.SharedPreferencesImpl: java.util.Map getAll()> -> _SOURCE_
<android.net.ConnectivityManager: android.net.NetworkRequest access$1000()> -> _SOURCE_
<android.graphics.ColorSpace$Rgb: java.util.function.DoubleUnaryOperator getEotf()> -> _SOURCE_
<android.view.KeyEvent: int getMaxKeyCode()> -> _SOURCE_
<android.app.usage.IStorageStatsManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.widget.EdgeEffect: android.graphics.BlendMode getBlendMode()> -> _SOURCE_
<android.telephony.CellIdentityWcdma: int getLac()> -> _SOURCE_
<android.app.backup.BackupManager: boolean isAppEligibleForBackup(java.lang.String)> -> _SOURCE_
<android.hardware.radio.TunerAdapter: java.util.Map getParameters(java.util.List)> -> _SOURCE_
<android.hardware.radio.RadioManager$ProgramInfo: android.hardware.radio.ProgramSelector$Identifier getPhysicallyTunedTo()> -> _SOURCE_
<android.app.SearchManager: android.content.Intent getAssistIntent(boolean)> -> _SOURCE_
<android.media.MediaTimestamp: long getAnchorMediaTimeUs()> -> _SOURCE_
<android.widget.ListPopupWindow: android.graphics.Rect getEpicenterBounds()> -> _SOURCE_
<android.view.MotionEvent: float getY()> -> _SOURCE_
<android.os.UserManager: boolean isPrimaryUser()> -> _SOURCE_
<android.telephony.mbms.FileInfo: java.lang.String getMimeType()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: android.content.ComponentName getProfileOwner(int)> -> _SOURCE_
<android.view.inputmethod.InputConnectionWrapper: java.lang.CharSequence getTextBeforeCursor(int,int)> -> _SOURCE_
<android.location.GnssAntennaInfo: android.location.GnssAntennaInfo$PhaseCenterOffset getPhaseCenterOffset()> -> _SOURCE_
<android.telephony.TelephonyDisplayInfo: int describeContents()> -> _SOURCE_
<android.accounts.AccountManager: java.lang.String getPassword(android.accounts.Account)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.telephony.TelephonyManager: void enableLocationUpdates()> -> _SOURCE_
<android.app.JobSchedulerImpl: java.util.List getStartedJobs()> -> _SOURCE_
<android.net.wifi.nl80211.IApInterfaceEventCallback$Stub: android.net.wifi.nl80211.IApInterfaceEventCallback getDefaultImpl()> -> _SOURCE_
<android.app.job.JobInfo: android.os.Bundle getTransientExtras()> -> _SOURCE_
<com.android.internal.telephony.cdma.sms.BearerData: java.lang.String getLanguage()> -> _SOURCE_
<android.view.IScrollCaptureController$Stub: android.view.IScrollCaptureController getDefaultImpl()> -> _SOURCE_
<android.media.ExifInterface: android.graphics.Bitmap getThumbnailBitmap()> -> _SOURCE_
<android.net.INetworkScoreService$Stub$Proxy: java.lang.String getActiveScorerPackage()> -> _SOURCE_
<android.os.DropBoxManager$Entry: java.io.InputStream getInputStream()> -> _SOURCE_
<android.service.vr.IPersistentVrStateCallbacks$Stub: android.service.vr.IPersistentVrStateCallbacks getDefaultImpl()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: java.lang.String getCdmaMdn(int)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.util.List getActiveAdminsAsUser(int)> -> _SOURCE_
<com.android.internal.telephony.IMms$Default: android.net.Uri addMultimediaMessageDraft(java.lang.String,android.net.Uri)> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getImeiForSubscriber(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Default: java.util.List getCrossProfileWidgetProviders(android.content.ComponentName)> -> _SOURCE_
<android.media.tv.ITvInputManager$Stub$Proxy: java.util.List getTvContentRatingSystemList(int)> -> _SOURCE_
<android.graphics.RenderNode: boolean getClipToOutline()> -> _SOURCE_
<android.graphics.animation.RenderNodeAnimator: long getStartDelay()> -> _SOURCE_
<android.view.textclassifier.TextClassification: android.content.Intent getIntent()> -> _SOURCE_
<android.view.Display$HdrCapabilities: float getDesiredMaxLuminance()> -> _SOURCE_
<android.content.ContentResolver: boolean getSyncAutomaticallyAsUser(android.accounts.Account,java.lang.String,int)> -> _SOURCE_
<android.media.soundtrigger_middleware.ISoundTriggerModule$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.service.notification.NotificationListenerService: android.app.INotificationManager getNotificationInterface()> -> _SOURCE_
<android.os.storage.StorageManager: boolean isObbMounted(java.lang.String)> -> _SOURCE_
<android.hardware.camera2.legacy.RequestHolder: long getFrameNumber()> -> _SOURCE_
<android.view.InputDevice: android.os.Vibrator getVibrator()> -> _SOURCE_
<android.app.Dialog: android.view.LayoutInflater getLayoutInflater()> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec: java.lang.String[] getSignaturePaddings()> -> _SOURCE_
<android.media.session.IOnMediaKeyListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.media.MediaRouter: android.media.MediaRouter$RouteInfo getDefaultRoute()> -> _SOURCE_
<android.hardware.location.NanoAppBinary: long getHwHubType()> -> _SOURCE_
<android.telephony.CellIdentityTdscdma: int getLac()> -> _SOURCE_
<android.nfc.INfcAdapter$Default: android.nfc.INfcFCardEmulation getNfcFCardEmulationInterface()> -> _SOURCE_
<android.media.tv.TvInputManager$TvInputCallbackRecord: android.media.tv.TvInputManager$TvInputCallback getCallback()> -> _SOURCE_
<android.view.autofill.IAugmentedAutofillManagerClient$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.view.SurfaceControlViewHost: android.view.IWindow getWindowToken()> -> _SOURCE_
<android.webkit.IWebViewUpdateService$Default: android.webkit.WebViewProviderInfo[] getAllWebViewPackages()> -> _SOURCE_
<android.hardware.hdmi.HdmiTvClient$3: byte[] getOneTouchRecordSource(int)> -> _SOURCE_
<android.net.CaptivePortalData: android.net.Uri getUserPortalUrl()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean getAutoTimeRequired()> -> _SOURCE_
<android.media.IAudioService$Stub$Proxy: java.util.List getActivePlaybackConfigurations()> -> _SOURCE_
<android.telephony.IccOpenLogicalChannelResponse: int getChannel()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: int getCarrierIdListVersion(int)> -> _SOURCE_
<android.telephony.TelephonyManager: int getVoiceActivationState(int)> -> _SOURCE_
<android.os.storage.IStorageManager$Stub$Proxy: java.lang.String getMountedObbPath(java.lang.String)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.util.List retrieveNetworkLogs(android.content.ComponentName,long)> -> _SOURCE_
<android.media.MediaRoute2Info: java.lang.CharSequence getDescription()> -> _SOURCE_
<android.os.MemoryFile: java.io.FileDescriptor getFileDescriptor()> -> _SOURCE_
<com.android.internal.app.IBatteryStats$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.widget.AdapterViewAnimator: android.view.View getSelectedView()> -> _SOURCE_
<android.app.backup.IBackupManager$Stub$Proxy: java.lang.String[] getTransportWhitelist()> -> _SOURCE_
<android.telephony.SignalStrength: int getLteRsrq()> -> _SOURCE_
<android.media.SubtitleController: android.media.SubtitleTrack getSelectedTrack()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean getCrossProfileContactsSearchDisabled(android.os.UserHandle)> -> _SOURCE_
<android.media.AudioManager: java.util.Map getReportedSurroundFormats()> -> _SOURCE_
<android.net.lowpan.LowpanManager: android.net.lowpan.LowpanInterface getInterfaceNoCreate(android.net.lowpan.ILowpanInterface)> -> _SOURCE_
<android.service.notification.NotificationListenerService: android.content.Context getContext()> -> _SOURCE_
<com.android.internal.telephony.ISms$Default: int getSmsCapacityOnIccForSubscriber(int)> -> _SOURCE_
<android.content.pm.ShortcutQueryWrapper: java.util.List getShortcutIds()> -> _SOURCE_
<android.accessibilityservice.AccessibilityService$ScreenshotResult: android.hardware.HardwareBuffer getHardwareBuffer()> -> _SOURCE_
<android.app.blob.BlobStoreManager$Session: boolean isPublicAccessAllowed()> -> _SOURCE_
<android.os.CoolingDevice: java.lang.String getName()> -> _SOURCE_
<android.net.Ikev2VpnProfile: java.lang.String getUsername()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: boolean isRttSupported(int)> -> _SOURCE_
<android.telephony.SmsCbEtwsInfo: int getWarningType()> -> _SOURCE_
<android.app.usage.NetworkStats$Bucket: long getEndTimeStamp()> -> _SOURCE_
<android.printservice.recommendation.IRecommendationsChangeListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.accessibilityservice.AccessibilityService$MagnificationController: float getCenterX()> -> _SOURCE_
<android.view.IRemoteAnimationFinishedCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.bluetooth.BluetoothSocket: android.bluetooth.BluetoothDevice getRemoteDevice()> -> _SOURCE_
<android.os.UserManager: boolean isRestrictedProfile(android.os.UserHandle)> -> _SOURCE_
<android.os.BaseBundle: boolean isEmpty()> -> _SOURCE_
<android.content.pm.IDataLoaderStatusListener$Stub: android.content.pm.IDataLoaderStatusListener getDefaultImpl()> -> _SOURCE_
<android.telephony.PhoneNumberUtils: java.lang.String convertAndStrip(java.lang.String)> -> _SOURCE_
<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.String[] getSupportedRsaSignatureWithPkcs1PaddingDigests()> -> _SOURCE_
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.VerifierDeviceIdentity getVerifierDeviceIdentity()> -> _SOURCE_
<android.app.blob.BlobInfo: long getId()> -> _SOURCE_
<android.hardware.location.ContextHubManager: android.hardware.location.ContextHubClient createClient(android.hardware.location.ContextHubInfo,android.app.PendingIntent,long)> -> _SOURCE_
<android.app.IActivityTaskManager$Default: java.util.List getFilteredTasks(int,boolean)> -> _SOURCE_
<android.media.RemoteControlClient: android.app.PendingIntent getRcMediaIntent()> -> _SOURCE_
<android.app.ActivityTaskManager: java.lang.String listAllStacks()> -> _SOURCE_
<com.android.internal.widget.ToolbarWidgetWrapper: boolean isTitleTruncated()> -> _SOURCE_
<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getActivityBanner(android.content.ComponentName)> -> _SOURCE_
<android.telephony.PhoneNumberUtils: java.lang.String getStrippedReversed(java.lang.String)> -> _SOURCE_
<android.text.FontConfig$Family: java.lang.String getLanguages()> -> _SOURCE_
<android.telephony.CarrierConfigManager: java.lang.String getDefaultCarrierServicePackageName()> -> _SOURCE_
<android.app.NotificationHistory$HistoricalNotification: java.lang.String getChannelName()> -> _SOURCE_
<com.android.internal.policy.PhoneWindow: long getTransitionBackgroundFadeDuration()> -> _SOURCE_
<android.content.Context: android.view.Display getDisplayNoVerify()> -> _SOURCE_
<android.app.ActivityManager: boolean isVrModePackageEnabled(android.content.ComponentName)> -> _SOURCE_
<android.app.LoadedApk$ServiceDispatcher: android.app.IServiceConnection getIServiceConnection()> -> _SOURCE_
<android.net.IConnectivityManager$Default: java.util.List getVpnLockdownWhitelist(int)> -> _SOURCE_
<android.location.LocationTime: long getElapsedRealtimeNanos()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: long getLastNetworkLogRetrievalTime()> -> _SOURCE_
<android.os.IDeviceIdleController$Stub$Proxy: int[] getAppIdUserWhitelist()> -> _SOURCE_
<android.service.notification.NotificationListenerService$RankingMap: java.lang.String[] getOrderedKeys()> -> _SOURCE_
<android.os.storage.StorageVolume: java.io.File getDirectory()> -> _SOURCE_
<android.content.pm.parsing.component.ParsedComponent: java.lang.String getName()> -> _SOURCE_
<android.content.pm.IPinItemRequest$Default: android.os.Bundle getExtras()> -> _SOURCE_
<android.content.UndoManager: android.content.UndoOperation getLastOperation(int)> -> _SOURCE_
<android.view.contentcapture.ContentCaptureManager$LocalDataShareAdapterResourceManager: java.util.concurrent.Executor getExecutor(android.view.contentcapture.ContentCaptureManager$DataShareAdapterDelegate)> -> _SOURCE_
<com.android.internal.telephony.ISetOpportunisticDataCallback$Stub: java.lang.String getTransactionName(int)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isLogoutEnabled()> -> _SOURCE_
<android.app.ApplicationPackageManager: boolean isAutoRevokeWhitelisted()> -> _SOURCE_
<android.telecom.PhoneAccount: android.net.Uri getAddress()> -> _SOURCE_
<android.location.GnssMeasurement: double getAccumulatedDeltaRangeMeters()> -> _SOURCE_
<android.view.inputmethod.InlineSuggestionsResponse: java.util.List getInlineSuggestions()> -> _SOURCE_
<android.net.IpSecManager$IpSecTunnelInterface: java.lang.String getInterfaceName()> -> _SOURCE_
<android.location.ICountryListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.DownloadManager: java.lang.Long getRecommendedMaxBytesOverMobile(android.content.Context)> -> _SOURCE_
<android.content.pm.ShortcutInfo: android.content.Intent getIntent()> -> _SOURCE_
<android.telephony.ims.aidl.IImsMmTelFeature$Stub: android.telephony.ims.aidl.IImsMmTelFeature getDefaultImpl()> -> _SOURCE_
<com.android.internal.telephony.cdma.SmsMessage: com.android.internal.telephony.cdma.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,java.lang.String,boolean,com.android.internal.telephony.SmsHeader,int)> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isDataConnectionAllowed()> -> _SOURCE_
<android.media.AudioManager: boolean isMusicActive()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.util.Set getDisallowedSystemApps(android.content.ComponentName,int,java.lang.String)> -> _SOURCE_
<android.content.UndoManager: android.content.UndoManager$UndoState getTopUndo(android.content.UndoOwner[])> -> _SOURCE_
<android.bluetooth.IBluetoothMap$Stub$Proxy: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
<android.os.Trace: boolean isEnabled()> -> _SOURCE_
<android.media.session.ISessionController$Default: long getFlags()> -> _SOURCE_
<android.app.ApplicationPackageManager: byte[] getInstantAppCookie()> -> _SOURCE_
<android.app.job.JobParameters: android.os.Bundle getTransientExtras()> -> _SOURCE_
<android.content.om.OverlayInfo: java.lang.String getTargetOverlayableName()> -> _SOURCE_
<android.telephony.CarrierConfigManager: void <clinit>()> -> _SOURCE_
<com.android.server.SystemConfig: android.util.ArraySet getAllowInDataUsageSave()> -> _SOURCE_
<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.HdmiClient getClient(int)> -> _SOURCE_
<android.app.SearchManager: java.util.List getGlobalSearchActivities()> -> _SOURCE_
<com.android.internal.telephony.euicc.IDisableProfileCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: void getImsMmTelRegistrationTransportType(int,com.android.internal.telephony.IIntegerConsumer)> -> _SOURCE_
<android.service.notification.INotificationListener$Stub: android.service.notification.INotificationListener getDefaultImpl()> -> _SOURCE_
<android.telephony.CellSignalStrengthLte: int getDbm()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.location.GnssClock: double getElapsedRealtimeUncertaintyNanos()> -> _SOURCE_
<android.hardware.soundtrigger.SoundTrigger$RecognitionEvent: byte[] getData()> -> _SOURCE_
<android.text.style.TtsSpan: android.os.PersistableBundle getArgs()> -> _SOURCE_
<com.android.internal.view.menu.SubMenuBuilder: boolean isQwertyMode()> -> _SOURCE_
<android.app.assist.AssistContent: android.content.ClipData getClipData()> -> _SOURCE_
<android.media.midi.IMidiManager$Stub: android.media.midi.IMidiManager getDefaultImpl()> -> _SOURCE_
<android.view.IPinnedStackListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.media.AudioRecord: android.os.PersistableBundle getMetrics()> -> _SOURCE_
<android.telephony.ServiceState: int getVoiceNetworkType()> -> _SOURCE_
<android.app.usage.StorageStatsManager: android.app.usage.StorageStats queryStatsForPackage(java.lang.String,java.lang.String,android.os.UserHandle)> -> _SOURCE_
<android.media.AudioManager: android.media.IRingtonePlayer getRingtonePlayer()> -> _SOURCE_
<android.app.IUidObserver$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.os.Environment: java.io.File getDataPreloadsAppsDirectory()> -> _SOURCE_
<android.view.Window: boolean getAllowReturnTransitionOverlap()> -> _SOURCE_
<android.os.IThermalService$Stub$Proxy: android.os.Temperature[] getCurrentTemperatures()> -> _SOURCE_
<com.android.internal.view.menu.BaseMenuPresenter: com.android.internal.view.menu.MenuPresenter$Callback getCallback()> -> _SOURCE_
<android.view.DragEvent: boolean getResult()> -> _SOURCE_
<android.os.IIncidentReportStatusListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.media.IAudioService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.ActivityManager: boolean getPackageAskScreenCompat(java.lang.String)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: android.app.admin.DevicePolicyManager getParentProfileInstance(android.content.ComponentName)> -> _SOURCE_
<android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()> -> _SOURCE_
<android.widget.ListPopupWindow: java.lang.Object getSelectedItem()> -> _SOURCE_
<android.app.usage.StorageStatsManager: long getFreeBytes(java.util.UUID)> -> _SOURCE_
<android.app.AppOpsManager$HistoricalOp: java.lang.String getOpName()> -> _SOURCE_
<com.android.internal.policy.DecorContext: java.lang.Object getSystemService(java.lang.String)> -> _SOURCE_
<android.print.PrinterInfo: java.lang.String getName()> -> _SOURCE_
<android.net.lowpan.ILowpanEnergyScanCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.internal.os.BatteryStatsHelper: double getMaxRealPower()> -> _SOURCE_
<android.app.usage.StorageStatsManager: long getFreeBytes(java.lang.String)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isUninstallBlocked(android.content.ComponentName,java.lang.String)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getLine1AlphaTag(int)> -> _SOURCE_
<android.view.WindowInsets: android.graphics.Insets getSystemGestureInsets()> -> _SOURCE_
<android.app.IAssistDataReceiver$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.media.IAudioService$Default: android.media.IRingtonePlayer getRingtonePlayer()> -> _SOURCE_
<android.text.method.DigitsKeyListener: char[] getAcceptedChars()> -> _SOURCE_
<android.content.ContentResolver: android.content.SyncStatusInfo getSyncStatusAsUser(android.accounts.Account,java.lang.String,int)> -> _SOURCE_
<android.content.ContextWrapper: java.io.File[] getExternalMediaDirs()> -> _SOURCE_
<android.view.textclassifier.TextClassificationSessionId: java.lang.String getValue()> -> _SOURCE_
<com.android.internal.os.TransferPipe: android.os.ParcelFileDescriptor getReadFd()> -> _SOURCE_
<android.view.Display: android.view.DisplayAddress getAddress()> -> _SOURCE_
<android.app.ActivityTransitionCoordinator: java.util.ArrayList getAcceptedNames()> -> _SOURCE_
<android.hardware.input.InputManager: int[] getInputDeviceIds()> -> _SOURCE_
<android.net.ConnectivityManager: android.net.NetworkCapabilities[] getDefaultNetworkCapabilitiesForUser(int)> -> _SOURCE_
<android.transition.ArcMotion: float getMinimumVerticalAngle()> -> _SOURCE_
<android.content.res.Resources: android.content.res.CompatibilityInfo getCompatibilityInfo()> -> _SOURCE_
<android.hardware.Camera$Parameters: float getExposureCompensationStep()> -> _SOURCE_
<android.view.textclassifier.TextClassifier$EntityConfig: java.util.Collection getHints()> -> _SOURCE_
<android.net.lowpan.ILowpanInterface$Default: android.net.IpPrefix[] getLinkNetworks()> -> _SOURCE_
<android.net.lowpan.ILowpanInterface$Default: java.lang.String getPartitionId()> -> _SOURCE_
<android.media.midi.MidiDeviceServer: android.media.midi.MidiReceiver[] getOutputPortReceivers()> -> _SOURCE_
<android.net.nsd.NsdServiceInfo: byte[] getTxtRecord()> -> _SOURCE_
<android.graphics.fonts.SystemFonts: java.util.Set getAvailableFonts()> -> _SOURCE_
<android.app.blob.IBlobCommitCallback$Stub: android.app.blob.IBlobCommitCallback getDefaultImpl()> -> _SOURCE_
<android.hardware.camera2.CaptureRequest$Key: long getVendorId()> -> _SOURCE_
<com.android.internal.app.ISoundTriggerService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.internal.telephony.GsmAlphabet: java.lang.String gsm8BitUnpackedToString(byte[],int,int)> -> _SOURCE_
<android.hardware.usb.IUsbManager$Stub$Proxy: android.hardware.usb.UsbAccessory getCurrentAccessory()> -> _SOURCE_
<android.view.contentcapture.ContentCaptureHelper: java.lang.String getLoggingLevelAsString(int)> -> _SOURCE_
<android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor getWallpaper(java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)> -> _SOURCE_
<android.security.KeyChain: java.security.KeyPair getKeyPair(android.content.Context,java.lang.String)> -> _SOURCE_
<android.app.role.IRoleManager$Stub$Proxy: java.util.List getHeldRolesFromController(java.lang.String)> -> _SOURCE_
<android.view.accessibility.CaptioningManager: android.view.accessibility.CaptioningManager$CaptionStyle getUserStyle()> -> _SOURCE_
<android.content.pm.ShortcutManager: java.util.List getDynamicShortcuts()> -> _SOURCE_
<android.content.integrity.AppIntegrityManager: android.content.integrity.RuleSet getCurrentRuleSet()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getNetworkTypeName(int)> -> _SOURCE_
<com.android.server.SystemConfig: android.util.ArraySet getSystemUserBlacklistedApps()> -> _SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkQuotaInfo getActiveNetworkQuotaInfo()> -> _SOURCE_
<android.telecom.TelecomManager: boolean isTtySupported()> -> _SOURCE_
<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$EncoderCapabilities getEncoderCapabilities()> -> _SOURCE_
<android.content.ContextWrapper: java.lang.Object getSystemService(java.lang.String)> -> _SOURCE_
<android.bluetooth.IBluetoothGattCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.graphics.Paint: long getShadowLayerColorLong()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: boolean getEmergencyCallbackMode(int)> -> _SOURCE_
<android.telephony.UiccAccessRule: int hashCode()> -> _SOURCE_
<android.content.pm.LauncherActivityInfo: java.lang.CharSequence getLabel()> -> _SOURCE_
<android.location.Address: android.os.Bundle getExtras()> -> _SOURCE_
<android.graphics.drawable.Drawable: int getIntrinsicHeight()> -> _SOURCE_
<android.media.MediaMetadataRetriever$BitmapParams: android.graphics.Bitmap$Config getPreferredConfig()> -> _SOURCE_
<android.app.ApplicationPackageManager: boolean getApplicationHiddenSettingAsUser(java.lang.String,android.os.UserHandle)> -> _SOURCE_
<android.os.DeviceIdleManager: android.os.IDeviceIdleController getService()> -> _SOURCE_
<android.telephony.MmsManager: void downloadMultimediaMessage(int,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent,long)> -> _SOURCE_
<android.view.inputmethod.InputMethodSubtype: java.util.Locale getLocaleObject()> -> _SOURCE_
<com.android.internal.os.BatterySipper: java.lang.String[] getPackages()> -> _SOURCE_
<com.android.internal.app.IAppOpsStartedCallback$Stub: com.android.internal.app.IAppOpsStartedCallback getDefaultImpl()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getSubscriptionCarrierId(int)> -> _SOURCE_
<android.net.InterfaceConfiguration: java.lang.Iterable getFlags()> -> _SOURCE_
<android.media.session.MediaController: android.app.PendingIntent getSessionActivity()> -> _SOURCE_
<android.app.INotificationManager$Default: android.app.NotificationManager$Policy getConsolidatedNotificationPolicy()> -> _SOURCE_
<android.app.ContextImpl: android.graphics.drawable.Drawable getWallpaper()> -> _SOURCE_
<android.animation.PathKeyframes$IntKeyframesBase: java.lang.Class getType()> -> _SOURCE_
<android.hardware.usb.UsbDevice: java.lang.String getProductName()> -> _SOURCE_
<android.telephony.SmsCbMessage: java.lang.String toString()> -> _SOURCE_
<android.app.ITransientNotificationCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.app.WindowDecorActionBar$ActionModeImpl: java.lang.CharSequence getTitle()> -> _SOURCE_
<android.net.netstats.provider.INetworkStatsProvider$Stub: android.net.netstats.provider.INetworkStatsProvider getDefaultImpl()> -> _SOURCE_
<android.app.contentsuggestions.ISelectionsCallback$Stub: android.app.contentsuggestions.ISelectionsCallback getDefaultImpl()> -> _SOURCE_
<android.view.KeyboardShortcutGroup: java.lang.CharSequence getLabel()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long getHistoryBaseTime()> -> _SOURCE_
<android.net.INetworkStatsService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.IActivityTaskManager$Default: android.app.ActivityManager$StackInfo getFocusedStackInfo()> -> _SOURCE_
<android.telecom.TelecomManager: android.telecom.PhoneAccountHandle getDefaultOutgoingPhoneAccount(java.lang.String)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getNai()> -> _SOURCE_
<android.os.UserManager: boolean isEphemeralUser()> -> _SOURCE_
<android.hardware.camera2.impl.CaptureCallback: android.hardware.camera2.CameraCaptureSession$CaptureCallback getSessionCallback()> -> _SOURCE_
<android.print.IPrintManager$Stub$Proxy: java.util.List getPrintServices(int,int)> -> _SOURCE_
<android.hardware.display.IDisplayManager$Stub$Proxy: android.hardware.display.Curve getMinimumBrightnessCurve()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isAdminActive(android.content.ComponentName)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.bluetooth.IBluetooth$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.net.ConnectivityManager: android.net.ProxyInfo getGlobalProxy()> -> _SOURCE_
<android.view.ViewConfiguration: int getMinimumFlingVelocity()> -> _SOURCE_
<android.app.WallpaperManager: android.app.WallpaperInfo getWallpaperInfo(int)> -> _SOURCE_
<android.media.session.ISession2TokensListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.view.IInputMethodManager$Default: java.util.List getEnabledInputMethodList(int)> -> _SOURCE_
<android.app.ActivityThread: java.util.Map getActivitiesToBeDestroyed()> -> _SOURCE_
<android.text.method.TextKeyListener$NullKeyListener: android.text.method.TextKeyListener$NullKeyListener getInstance()> -> _SOURCE_
<android.provider.Settings$System: float getFloatForUser(android.content.ContentResolver,java.lang.String,float,int)> -> _SOURCE_
<android.hardware.hdmi.IHdmiDeviceEventListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.location.IGnssMeasurementsListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.graphics.ImageDecoder: boolean getMutable()> -> _SOURCE_
<android.bluetooth.le.PeriodicAdvertisingParameters: boolean getIncludeTxPower()> -> _SOURCE_
<android.net.INetworkScoreCache$Stub: android.net.INetworkScoreCache getDefaultImpl()> -> _SOURCE_
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfoForUid(int)> -> _SOURCE_
<android.renderscript.Allocation: android.renderscript.Type getType()> -> _SOURCE_
<android.os.incremental.IIncrementalServiceConnector$Stub: android.os.incremental.IIncrementalServiceConnector getDefaultImpl()> -> _SOURCE_
<android.os.Environment: java.io.File getDataPreloadsDemoDirectory()> -> _SOURCE_
<android.location.GpsNavigationMessage: byte[] getData()> -> _SOURCE_
<com.android.internal.telephony.SmsApplication: com.android.internal.telephony.SmsApplication$SmsApplicationData getApplicationForPackage(java.util.Collection,java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Default: android.os.IBinder asBinder()> -> _SOURCE_
<android.hardware.hdmi.HdmiControlManager: boolean getSystemAudioMode()> -> _SOURCE_
<android.bluetooth.BluetoothDevice: java.lang.String getAlias()> -> _SOURCE_
<android.media.AudioMetadata$1: java.lang.String getName()> -> _SOURCE_
<com.android.internal.telephony.IPhoneStateListener$Stub: com.android.internal.telephony.IPhoneStateListener getDefaultImpl()> -> _SOURCE_
<android.app.blob.BlobInfo: long getExpiryTimeMs()> -> _SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: android.net.Network[] getAllNetworks()> -> _SOURCE_
<android.app.ActivityManager: long getTotalRam()> -> _SOURCE_
<android.os.Debug: int getThreadExternalAllocCount()> -> _SOURCE_
<android.app.NotificationChannel: java.lang.String getParentChannelId()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase$OpenParams: java.lang.String getJournalMode()> -> _SOURCE_
<android.hardware.display.VirtualDisplayConfig: java.lang.String getUniqueId()> -> _SOURCE_
<android.telephony.CellIdentity: android.telephony.CellIdentity create(android.hardware.radio.V1_5.CellIdentity)> -> _SOURCE_
<android.content.res.AssetFileDescriptor: android.os.ParcelFileDescriptor getParcelFileDescriptor()> -> _SOURCE_
<android.app.ApplicationPackageManager: int getInstantAppCookieMaxSize()> -> _SOURCE_
<com.android.internal.telephony.ISms$Default: boolean updateMessageOnIccEfForSubscriber(int,java.lang.String,int,int,byte[])> -> _SOURCE_
<android.print.PrintManager: java.util.List getPrintServiceRecommendations()> -> _SOURCE_
<android.content.Context: java.lang.String getAttributionTag()> -> _SOURCE_
<android.hardware.cas.V1_2.ICas$Proxy: android.internal.hidl.base.V1_0.DebugInfo getDebugInfo()> -> _SOURCE_
<android.content.pm.PackagePartitions$SystemPartition: java.io.File getOverlayFolder()> -> _SOURCE_
<android.app.DisabledWallpaperManager: boolean isSetWallpaperAllowed()> -> _SOURCE_
<android.app.usage.NetworkStats$Bucket: long getTxPackets()> -> _SOURCE_
<com.android.internal.policy.PhoneWindow: android.media.AudioManager getAudioManager()> -> _SOURCE_
<android.bluetooth.IBluetooth$Default: java.lang.String getName()> -> _SOURCE_
<android.util.apk.WrappedX509Certificate: byte[] getSignature()> -> _SOURCE_
<android.app.Activity: android.os.IBinder getAssistToken()> -> _SOURCE_
<android.print.ILayoutResultCallback$Stub: android.print.ILayoutResultCallback getDefaultImpl()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: android.telephony.IccOpenLogicalChannelResponse iccOpenLogicalChannel(int,java.lang.String,java.lang.String,int)> -> _SOURCE_
<android.telephony.TelephonyManager: int getSubscriptionId()> -> _SOURCE_
<android.telephony.RadioAccessFamily: java.lang.String toString()> -> _SOURCE_
<android.view.accessibility.AccessibilityWindowInfo: android.view.accessibility.AccessibilityNodeInfo getAnchor()> -> _SOURCE_
<com.android.internal.graphics.SfVsyncFrameCallbackProvider: long getFrameDelay()> -> _SOURCE_
<android.widget.RadioGroup: java.lang.CharSequence getAccessibilityClassName()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: android.telephony.ims.aidl.IImsConfig getImsConfig(int,int)> -> _SOURCE_
<android.os.storage.VolumeInfo: java.lang.String getNormalizedFsUuid()> -> _SOURCE_
<android.media.AudioManager: int getDeviceVolumeBehavior(android.media.AudioDeviceAttributes)> -> _SOURCE_
<android.view.inputmethod.InputMethodManager: java.util.List getInputMethodList()> -> _SOURCE_
<android.telephony.CellIdentityTdscdma: android.telephony.CellLocation asCellLocation()> -> _SOURCE_
<android.view.IWindowSession$Stub: android.view.IWindowSession getDefaultImpl()> -> _SOURCE_
<android.view.ActionMode: boolean getTitleOptionalHint()> -> _SOURCE_
<android.hardware.camera2.CaptureResult$Key: long getVendorId()> -> _SOURCE_
<android.accounts.IAccountAuthenticatorResponse$Stub: android.accounts.IAccountAuthenticatorResponse getDefaultImpl()> -> _SOURCE_
<android.os.BasicShellCommandHandler: java.io.FileDescriptor getErrFileDescriptor()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.lang.String getWifiMacAddress(android.content.ComponentName)> -> _SOURCE_
<android.view.FocusFinder: android.view.FocusFinder getInstance()> -> _SOURCE_
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)> -> _SOURCE_
<android.view.SurfaceControl: android.graphics.ColorSpace[] getCompositionColorSpaces()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean getEmergencyCallbackMode()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.util.List queryContentProviders(java.lang.String,int,int,java.lang.String)> -> _SOURCE_
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int,int)> -> _SOURCE_
<android.content.pm.ILauncherApps$Stub$Proxy: android.content.pm.ParceledListSlice getAllSessions(java.lang.String)> -> _SOURCE_
<android.view.Display: long getAppVsyncOffsetNanos()> -> _SOURCE_
<android.content.pm.permission.SplitPermissionInfoParcelable: java.lang.String getSplitPermission()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getEsn(int)> -> _SOURCE_
<android.view.textclassifier.TextLanguage$Request: java.lang.String getCallingPackageName()> -> _SOURCE_
<android.hardware.display.WifiDisplay: java.lang.String getDeviceAddress()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.emergency.EmergencyNumber: java.lang.String getMnc()> -> _SOURCE_
<android.os.health.HealthStats: java.lang.String getDataType()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.view.contentcapture.IContentCaptureManager$Stub: android.view.contentcapture.IContentCaptureManager getDefaultImpl()> -> _SOURCE_
<android.app.role.RoleControllerManager$1: android.os.Handler getJobHandler()> -> _SOURCE_
<android.telephony.LteVopsSupportInfo: int getVopsSupport()> -> _SOURCE_
<android.os.ServiceManager: android.os.IBinder checkService(java.lang.String)> -> _SOURCE_
<android.telephony.PhoneNumberRange: java.lang.String toString()> -> _SOURCE_
<android.media.MediaPlayer: android.media.AudioDeviceInfo getPreferredDevice()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: java.lang.String getBoundImsServicePackage(int,boolean,int)> -> _SOURCE_
<android.hardware.camera2.CaptureResult$Key: java.lang.String getName()> -> _SOURCE_
<android.hardware.face.FaceManager: java.util.List getEnrolledFaces(int)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: int getOrganizationColor(android.content.ComponentName)> -> _SOURCE_
<com.android.internal.os.IDropBoxManagerService$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.view.DisplayCutout$ParcelableWrapper: android.view.DisplayCutout get()> -> _SOURCE_
<android.media.MediaCodec$OutputFrame: android.hardware.HardwareBuffer getHardwareBuffer()> -> _SOURCE_
<android.content.pm.IPackageManager$Stub$Proxy: android.content.ComponentName getInstantAppResolverComponent()> -> _SOURCE_
<android.content.pm.IPackageInstallerCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.INotificationManager$Stub$Proxy: android.app.NotificationChannelGroup getNotificationChannelGroupForPackage(java.lang.String,java.lang.String,int)> -> _SOURCE_
<android.content.ContentProvider$Transport: java.lang.String getType(android.net.Uri)> -> _SOURCE_
<android.bluetooth.IBluetoothAvrcpController$Stub$Proxy: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
<android.animation.ValueAnimator: android.animation.PropertyValuesHolder[] getValues()> -> _SOURCE_
<android.os.IVoldMountCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: android.view.textservice.SpellCheckerInfo[] getEnabledSpellCheckers(int)> -> _SOURCE_
<android.content.pm.PackageManager: boolean isDeviceUpgrading()> -> _SOURCE_
<android.telephony.PreciseDataConnectionState: android.telephony.data.ApnSetting getApnSetting()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: android.content.ComponentName getGlobalProxyAdmin()> -> _SOURCE_
<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan build()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: java.util.Map getRpmStats()> -> _SOURCE_
<android.location.LocationManager$GnssStatusListenerManager: int getTtff()> -> _SOURCE_
<android.app.IActivityManager$Stub$Proxy: android.os.Debug$MemoryInfo[] getProcessMemoryInfo(int[])> -> _SOURCE_
<android.app.ActivityOptions: android.graphics.GraphicBuffer getThumbnail()> -> _SOURCE_
<android.view.Window: android.view.Window$Callback getCallback()> -> _SOURCE_
<android.text.PrecomputedText: android.text.PrecomputedText$Params getParams()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean enableDataConnectivity()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: boolean isImsRegistered(int)> -> _SOURCE_
<android.util.jar.StrictJarManifest: java.util.Map getEntries()> -> _SOURCE_
<android.content.RestrictionEntry: android.content.RestrictionEntry[] getRestrictions()> -> _SOURCE_
<android.content.pm.LauncherApps: android.os.Bundle getSuspendedPackageLauncherExtras(java.lang.String,android.os.UserHandle)> -> _SOURCE_
<android.app.IInstrumentationWatcher$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.SmsCbCmasInfo: int getCertainty()> -> _SOURCE_
<android.media.tv.TvInputInfo: android.content.ComponentName getComponent()> -> _SOURCE_
<android.telephony.SmsManager: void getSmsMessagesForFinancialApp(android.os.Bundle,java.util.concurrent.Executor,android.telephony.SmsManager$FinancialSmsCallback)> -> _SOURCE_
<android.net.NetworkQuotaInfo: long getHardLimitBytes()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: android.os.connectivity.WifiBatteryStats getWifiBatteryStats()> -> _SOURCE_
<android.media.AudioDeviceInfo: java.lang.String getAddress()> -> _SOURCE_
<android.telephony.RadioAccessSpecifier: int describeContents()> -> _SOURCE_
<android.widget.AbsListView$InputConnectionWrapper: java.lang.CharSequence getTextBeforeCursor(int,int)> -> _SOURCE_
<android.telephony.TelephonyManager: void dial(java.lang.String)> -> _SOURCE_
<android.hardware.usb.UsbDevice: boolean getHasMidi()> -> _SOURCE_
<android.media.IRemoteVolumeController$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.internal.policy.IShortcutService$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.Activity: android.view.LayoutInflater getLayoutInflater()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getSimOperatorName(int)> -> _SOURCE_
<android.database.CursorWrapper: java.util.List getNotificationUris()> -> _SOURCE_
<android.telephony.ims.aidl.IImsMmTelListener$Stub: android.telephony.ims.aidl.IImsMmTelListener getDefaultImpl()> -> _SOURCE_
<com.android.internal.telephony.SmsHeader$PortAddrs: int hashCode()> -> _SOURCE_
<android.hardware.radio.IRadioService$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telephony.CellSignalStrengthTdscdma: boolean isValid()> -> _SOURCE_
<android.content.pm.IPinItemRequest$Stub$Proxy: android.content.pm.ShortcutInfo getShortcutInfo()> -> _SOURCE_
<android.telephony.ims.aidl.IRcsUceControllerCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.nfc.ITagRemovedCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.NotificationManager: java.util.List getNotificationChannels()> -> _SOURCE_
<android.os.StrictMode: int getThreadPolicyMask()> -> _SOURCE_
<android.graphics.ColorSpace: long getNativeInstance()> -> _SOURCE_
<android.app.IActivityManager$Default: android.content.res.Configuration getConfiguration()> -> _SOURCE_
<android.telephony.TelephonyManager: int getLteOnCdmaModeStatic()> -> _SOURCE_
<com.android.internal.view.BaseSurfaceHolder: android.view.Surface getSurface()> -> _SOURCE_
<com.android.internal.database.SortCursor: float getFloat(int)> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String[] getIsimPcscf(int)> -> _SOURCE_
<android.location.GpsSatellite: float getSnr()> -> _SOURCE_
<android.text.style.TextAppearanceSpan: android.content.res.ColorStateList getTextColor()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getCdmaEriIconMode(java.lang.String,java.lang.String)> -> _SOURCE_
<android.hardware.camera2.legacy.RequestQueue$RequestQueueEntry: java.lang.Long getFrameNumber()> -> _SOURCE_
<android.media.AudioManager: boolean isMicrophoneMute()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.app.ApplicationPackageManager: boolean isPackageSuspendedForUser(java.lang.String,int)> -> _SOURCE_
<android.os.connectivity.WifiActivityEnergyInfo: long getControllerIdleDurationMillis()> -> _SOURCE_
<android.media.session.MediaSession: java.lang.String getCallingPackage()> -> _SOURCE_
<android.content.ContextWrapper: java.lang.String getPackageName()> -> _SOURCE_
<android.content.pm.UserInfo: boolean isManagedProfile()> -> _SOURCE_
<android.webkit.TracingConfig: java.util.List getCustomIncludedCategories()> -> _SOURCE_
<android.os.INetworkActivityListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.view.Window: android.view.WindowManager$LayoutParams getAttributes()> -> _SOURCE_
<android.media.session.ISessionControllerCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.view.DisplayCutout: android.graphics.Rect getBoundingRectBottom()> -> _SOURCE_
<android.bluetooth.IBluetoothHidDevice$Stub$Proxy: java.util.List getConnectedDevices()> -> _SOURCE_
<android.transition.ChangeTransform: boolean getReparentWithOverlay()> -> _SOURCE_
<android.net.Uri$AbstractHierarchicalUri: java.lang.String getUserInfo()> -> _SOURCE_
<android.telephony.ServiceState: boolean isEmergencyOnly()> -> _SOURCE_
<android.companion.IFindDeviceCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: java.util.List getVpnLockdownWhitelist(int)> -> _SOURCE_
<android.app.ContextImpl: android.os.Handler getMainThreadHandler()> -> _SOURCE_
<android.os.INetworkActivityListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.usage.UsageEvents$Event: java.lang.String getPackageName()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Default: java.util.List getDelegatedScopes(android.content.ComponentName,java.lang.String)> -> _SOURCE_
<android.graphics.drawable.DrawableContainer: android.graphics.drawable.Drawable getCurrent()> -> _SOURCE_
<com.android.internal.telephony.euicc.ILoadBoundProfilePackageCallback$Stub: com.android.internal.telephony.euicc.ILoadBoundProfilePackageCallback getDefaultImpl()> -> _SOURCE_
<android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getNotificationChannelsForPackage(java.lang.String,int,boolean)> -> _SOURCE_
<android.graphics.drawable.StateListDrawable: android.graphics.drawable.StateListDrawable$StateListState getStateListState()> -> _SOURCE_
<android.net.INetworkScoreService$Default: java.util.List getAllValidScorers()> -> _SOURCE_
<android.media.RoutingSessionInfo: java.util.List getTransferableRoutes()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: boolean isVoWiFiRoamingSettingEnabled(int)> -> _SOURCE_
<android.media.tv.TvInputInfo: java.lang.String getId()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: android.content.pm.StringParceledListSlice getOwnerInstalledCaCerts(android.os.UserHandle)> -> _SOURCE_
<android.content.pm.PackageManager: java.lang.String getIncidentReportApproverPackageName()> -> _SOURCE_
<android.telephony.VisualVoicemailSms$Builder: android.telephony.VisualVoicemailSms build()> -> _SOURCE_
<android.widget.ProgressBar: android.graphics.drawable.Drawable getIndeterminateDrawable()> -> _SOURCE_
<android.app.role.IRoleManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.view.textclassifier.SelectionEvent: long getEventTime()> -> _SOURCE_
<android.view.autofill.IAutofillWindowPresenter$Stub: android.view.autofill.IAutofillWindowPresenter getDefaultImpl()> -> _SOURCE_
<android.telephony.CellSignalStrengthLte: int getTimingAdvance()> -> _SOURCE_
<android.app.job.JobWorkItem: long getEstimatedNetworkUploadBytes()> -> _SOURCE_
<com.android.internal.os.IDropBoxManagerService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.internal.telecom.ITelecomService$Default: java.util.List getPhoneAccountsForPackage(java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.ISms$Stub: com.android.internal.telephony.ISms asInterface(android.os.IBinder)> -> _SOURCE_
<android.os.Handler: android.os.Looper getLooper()> -> _SOURCE_
<android.hardware.ISensorPrivacyManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.AvailableNetworkInfo: int getPriority()> -> _SOURCE_
<android.content.res.AssetManager: java.lang.String getResourcePackageName(int)> -> _SOURCE_
<android.location.GnssSingleSatCorrection: float getCarrierFrequencyHz()> -> _SOURCE_
<android.os.Environment: java.io.File getProductDirectory()> -> _SOURCE_
<android.telephony.mbms.IDownloadStatusListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.ims.internal.IImsServiceFeatureCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.os.image.DynamicSystemManager: android.os.image.DynamicSystemManager$Session createPartition(java.lang.String,long,boolean)> -> _SOURCE_
<android.util.XmlPullAttributes: java.lang.String getAttributeValue(java.lang.String,java.lang.String)> -> _SOURCE_
<android.location.IBatchedLocationCallback$Stub: android.location.IBatchedLocationCallback getDefaultImpl()> -> _SOURCE_
<android.telephony.SubscriptionPlan: int getDataLimitBehavior()> -> _SOURCE_
<android.app.IUiModeManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.view.textservice.SpellCheckerSession: com.android.internal.textservice.ISpellCheckerSessionListener getSpellCheckerSessionListener()> -> _SOURCE_
<android.os.HidlMemory: android.os.NativeHandle getHandle()> -> _SOURCE_
<com.android.internal.telephony.euicc.IGetEuiccChallengeCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.print.PrintJobInfo: long getCreationTime()> -> _SOURCE_
<android.app.backup.IBackupManager$Stub$Proxy: java.lang.String getCurrentTransportForUser(int)> -> _SOURCE_
<android.media.IStrategyPreferredDeviceDispatcher$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.hardware.display.ColorDisplayManager: int getNightDisplayAutoModeRaw()> -> _SOURCE_
<android.content.pm.IPackageInstallerSession$Stub$Proxy: android.content.pm.DataLoaderParamsParcel getDataLoaderParams()> -> _SOURCE_
<android.app.Notification$MessagingStyle$Message: android.app.Person getSenderPerson()> -> _SOURCE_
<android.view.textclassifier.TextLinks$TextLinkSpan: android.view.textclassifier.TextLinks$TextLink getTextLink()> -> _SOURCE_
<android.net.wifi.nl80211.IPnoScanEvent$Stub: android.net.wifi.nl80211.IPnoScanEvent getDefaultImpl()> -> _SOURCE_
<android.telephony.ServiceState: int getBetterNRFrequencyRange(int,int)> -> _SOURCE_
<android.telephony.ServiceState: java.lang.String getDataOperatorAlphaShort()> -> _SOURCE_
<android.graphics.drawable.VectorDrawable$VFullPath: float getStrokeWidth()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String iccTransmitApduBasicChannelBySlot(int,int,int,int,int,int,java.lang.String)> -> _SOURCE_
<android.app.ApplicationPackageManager: java.util.List getPackageCandidateVolumes(android.content.pm.ApplicationInfo)> -> _SOURCE_
<android.hardware.location.ContextHubInfo: short getChrePatchVersion()> -> _SOURCE_
<android.media.PlaybackParams: float getPitch()> -> _SOURCE_
<android.hardware.fingerprint.IFingerprintService$Stub: android.hardware.fingerprint.IFingerprintService getDefaultImpl()> -> _SOURCE_
<android.content.pm.IPackageManager$Stub$Proxy: byte[] getPreferredActivityBackup(int)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isBackupServiceEnabled(android.content.ComponentName)> -> _SOURCE_
<com.android.internal.view.IInlineSuggestionsRequestCallback$Stub: com.android.internal.view.IInlineSuggestionsRequestCallback getDefaultImpl()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.util.List getPreferredPackages(int)> -> _SOURCE_
<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getApplicationLogo(android.content.pm.ApplicationInfo)> -> _SOURCE_
<com.android.internal.telephony.ISub$Default: java.util.List getSubscriptionsInGroup(android.os.ParcelUuid,java.lang.String,java.lang.String)> -> _SOURCE_
<android.bluetooth.BluetoothHearingAid: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
<android.app.role.RoleControllerManager: java.util.concurrent.CompletableFuture lambda$isApplicationVisibleForRole$5(java.lang.String,java.lang.String,android.app.role.IRoleController)> -> _SOURCE_
<android.util.apk.WrappedX509Certificate: byte[] getTBSCertificate()> -> _SOURCE_
<android.nfc.INfcAdapterExtras$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telephony.mbms.IDownloadProgressListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.graphics.Paint: android.graphics.Paint$Align getTextAlign()> -> _SOURCE_
<com.android.internal.telephony.euicc.ISetNicknameCallback$Stub: com.android.internal.telephony.euicc.ISetNicknameCallback getDefaultImpl()> -> _SOURCE_
<android.net.LocalSocketImpl: java.io.FileDescriptor[] getAncillaryFileDescriptors()> -> _SOURCE_
<android.net.IConnectivityManager$Default: android.net.NetworkQuotaInfo getActiveNetworkQuotaInfo()> -> _SOURCE_
<android.net.NetworkCapabilities: int[] getCapabilities()> -> _SOURCE_
<android.view.ViewRootImpl: java.util.List getRootSystemGestureExclusionRects()> -> _SOURCE_
<com.android.internal.app.IAppOpsService$Stub$Proxy: java.util.List getUidOps(int,int[])> -> _SOURCE_
<android.app.assist.AssistStructure$ViewNode: android.os.Bundle getExtras()> -> _SOURCE_
<android.content.res.FontResourcesParser$ProviderResourceEntry: java.lang.String getQuery()> -> _SOURCE_
<android.database.sqlite.SQLiteQueryBuilder: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.app.backup.FullBackupDataOutput: long getQuota()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getMeteredDataDisabledPackages(android.content.ComponentName)> -> _SOURCE_
<android.net.ITetheringStatsProvider$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.IActivityManager$Stub$Proxy: android.app.ActivityManager$StackInfo getFocusedStackInfo()> -> _SOURCE_
<android.os.TestLooperManager: android.os.MessageQueue getQueue()> -> _SOURCE_
<android.telephony.TelephonyManager: int isMultiSimSupported()> -> _SOURCE_
<android.nfc.INfcUnlockHandler$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Default: java.lang.String[] getIsimImpu(int)> -> _SOURCE_
<android.telephony.SmsCbEtwsInfo: boolean isEmergencyUserAlert()> -> _SOURCE_
<com.android.internal.util.StateMachine: com.android.internal.util.IState getCurrentState()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Default: java.util.List getMeteredDataDisabledPackages(android.content.ComponentName)> -> _SOURCE_
<android.graphics.drawable.RotateDrawable: float getPivotX()> -> _SOURCE_
<android.telephony.UiccSlotInfo: boolean getIsEuicc()> -> _SOURCE_
<android.bluetooth.le.PeriodicAdvertisingReport: android.bluetooth.le.ScanRecord getData()> -> _SOURCE_
<com.android.internal.telephony.ISub$Stub$Proxy: int getEnabledSubscriptionId(int)> -> _SOURCE_
<com.android.ims.internal.IImsUtListener$Stub: com.android.ims.internal.IImsUtListener getDefaultImpl()> -> _SOURCE_
<android.service.carrier.CarrierIdentifier: java.lang.String getMnc()> -> _SOURCE_
<android.app.NotificationChannelGroup: java.lang.String getDescription()> -> _SOURCE_
<android.app.ResourcesManager: android.util.DisplayMetrics getDisplayMetrics()> -> _SOURCE_
<android.content.pm.IPackageInstaller$Stub: android.content.pm.IPackageInstaller getDefaultImpl()> -> _SOURCE_
<android.view.animation.Animation: boolean getShowWallpaper()> -> _SOURCE_
<android.app.IActivityTaskManager$Stub$Proxy: android.app.ActivityManager$StackInfo getStackInfo(int,int)> -> _SOURCE_
<android.database.sqlite.SQLiteGlobal: long getWALTruncateSize()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isRttSupported()> -> _SOURCE_
<android.hardware.camera2.legacy.RequestHolder: android.hardware.camera2.CaptureRequest getRequest()> -> _SOURCE_
<android.location.GnssMeasurementCorrections: double getAltitudeMeters()> -> _SOURCE_
<android.telephony.SmsManager: void injectSmsPdu(byte[],java.lang.String,android.app.PendingIntent)> -> _SOURCE_
<android.content.pm.PackageInstaller$SessionInfo: java.lang.CharSequence getAppLabel()> -> _SOURCE_
<android.app.usage.StorageStats: long getAppBytes()> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: java.util.List getServices()> -> _SOURCE_
<com.android.internal.app.LocalePicker: java.lang.String[] getSystemAssetLocales()> -> _SOURCE_
<com.android.internal.telephony.SmsConstants$MessageClass: com.android.internal.telephony.SmsConstants$MessageClass valueOf(java.lang.String)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$TimeBase: long getUptimeStart()> -> _SOURCE_
<android.media.soundtrigger.SoundTriggerManager$Model: java.util.UUID getVendorUuid()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$TimeBase: long getRealtimeStart()> -> _SOURCE_
<com.android.internal.os.IShellCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getCdmaMdn()> -> _SOURCE_
<android.app.Notification: long getTimeout()> -> _SOURCE_
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$Callback getCallback()> -> _SOURCE_
<android.app.backup.IBackupManagerMonitor$Stub: android.app.backup.IBackupManagerMonitor getDefaultImpl()> -> _SOURCE_
<com.android.ims.internal.IImsCallSession$Default: com.android.ims.internal.IImsVideoCallProvider getVideoCallProvider()> -> _SOURCE_
<android.database.sqlite.SQLiteProgram: android.database.sqlite.SQLiteSession getSession()> -> _SOURCE_
<android.hardware.camera2.params.MandatoryStreamCombination: java.lang.CharSequence getDescription()> -> _SOURCE_
<android.graphics.drawable.AdaptiveIconDrawable: float getExtraInsetFraction()> -> _SOURCE_
<android.telephony._$$Lambda$U5dt9Oz29BpLzJ19WIl50whqAGs: java.lang.Object applyOrThrow(java.lang.Object,java.lang.Object)> -> _SOURCE_
<android.hardware.location.NanoApp: long getAppId()> -> _SOURCE_
<android.app.Notification$CarExtender$UnreadConversation: android.app.RemoteInput getRemoteInput()> -> _SOURCE_
<android.net.ITetheringStatsProvider$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfoAsUserCached(java.lang.String,int,int)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.lang.CharSequence getLongSupportMessageForUser(android.content.ComponentName,int)> -> _SOURCE_
<android.telephony.ClientRequestStats: long getCompletedRequestsWakelockTime()> -> _SOURCE_
<com.android.internal.telephony.cdma.SmsMessage: java.util.ArrayList getSmsCbProgramData()> -> _SOURCE_
<android.util.apk.ApkSigningBlockUtils: java.lang.String getContentDigestAlgorithmJcaDigestAlgorithm(int)> -> _SOURCE_
<com.android.internal.view.IDragAndDropPermissions$Stub: com.android.internal.view.IDragAndDropPermissions getDefaultImpl()> -> _SOURCE_
<android.app.assist.AssistStructure$ViewNode: java.lang.String getIdPackage()> -> _SOURCE_
<android.net.Uri$OpaqueUri: java.lang.String getEncodedAuthority()> -> _SOURCE_
<android.net.netstats.provider.INetworkStatsProviderCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.os.IRecoverySystem$Stub: android.os.IRecoverySystem getDefaultImpl()> -> _SOURCE_
<android.net.lowpan.LowpanInterface: java.lang.String[] getSupportedNetworkTypes()> -> _SOURCE_
<android.location.GnssAntennaInfo: double getCarrierFrequencyMHz()> -> _SOURCE_
<android.view.accessibility.CaptioningManager: boolean isEnabled()> -> _SOURCE_
<android.widget.ActionMenuPresenter: android.graphics.drawable.Drawable getOverflowIcon()> -> _SOURCE_
<android.widget.ToastPresenter: android.view.View getView()> -> _SOURCE_
<android.provider.DocumentsContract: boolean isRootUri(android.content.Context,android.net.Uri)> -> _SOURCE_
<android.print.PrintJobInfo: android.print.PrinterId getPrinterId()> -> _SOURCE_
<android.hardware.display.IDisplayManager$Stub$Proxy: android.hardware.display.BrightnessConfiguration getDefaultBrightnessConfiguration()> -> _SOURCE_
<com.android.ims.internal.IImsCallSession$Default: android.telephony.ims.ImsCallProfile getLocalCallProfile()> -> _SOURCE_
<android.nfc.cardemulation.CardEmulation: java.lang.CharSequence getDescriptionForPreferredPaymentService()> -> _SOURCE_
<android.accessibilityservice.IAccessibilityServiceConnection$Stub$Proxy: android.view.accessibility.AccessibilityWindowInfo$WindowListSparseArray getWindows()> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getMsisdn(java.lang.String,java.lang.String)> -> _SOURCE_
<android.view.ViewPropertyAnimator: android.animation.ValueAnimator$AnimatorUpdateListener getUpdateListener()> -> _SOURCE_
<android.os.connectivity.WifiBatteryStats: long getKernelActiveTimeMillis()> -> _SOURCE_
<com.android.internal.telephony.ISetOpportunisticDataCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.content.pm.PackageManager: android.content.pm.InstallSourceInfo getInstallSourceInfo(java.lang.String)> -> _SOURCE_
<android.net.INetworkScoreService$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.view.SearchEvent: android.view.InputDevice getInputDevice()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.util.List queryIntentContentProviders(android.content.Intent,int)> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isImsRegistered()> -> _SOURCE_
<android.location.Address: double getLatitude()> -> _SOURCE_
<android.net.NetworkInfo: java.lang.String getTypeName()> -> _SOURCE_
<android.content.pm.PackageInstaller: java.util.List getStagedSessions()> -> _SOURCE_
<android.view.ViewConfiguration: int getDoubleTapSlop()> -> _SOURCE_
<android.os.IIncidentAuthListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.internal.telephony.euicc.IDisableProfileCallback$Stub: com.android.internal.telephony.euicc.IDisableProfileCallback getDefaultImpl()> -> _SOURCE_
<android.graphics.Paint: float getLetterSpacing()> -> _SOURCE_
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.KeySet getKeySetByAlias(java.lang.String,java.lang.String)> -> _SOURCE_
<android.nfc.tech.IsoDep: android.nfc.Tag getTag()> -> _SOURCE_
<android.telephony.SignalStrength: int getLevel()> -> _SOURCE_
<android.app.ApplicationPackageManager: android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName,int)> -> _SOURCE_
<android.hardware.input.IInputManager$Stub$Proxy: java.lang.String[] getEnabledKeyboardLayoutsForInputDevice(android.hardware.input.InputDeviceIdentifier)> -> _SOURCE_
<com.android.internal.view.IInputMethodSession$Stub: com.android.internal.view.IInputMethodSession getDefaultImpl()> -> _SOURCE_
<com.android.internal.policy.PhoneFallbackEventHandler: android.media.AudioManager getAudioManager()> -> _SOURCE_
<android.view.contentcapture.ViewNode: java.lang.CharSequence getText()> -> _SOURCE_
<com.android.ims.internal.IImsUtListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.hardware.ICameraServiceListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.os.IUpdateEngineCallback$Stub: android.os.IUpdateEngineCallback getDefaultImpl()> -> _SOURCE_
<android.hardware.input.KeyboardLayout: java.lang.String getDescriptor()> -> _SOURCE_
<android.telephony.CellIdentityTdscdma: java.util.Set getAdditionalPlmns()> -> _SOURCE_
<android.service.autofill.FillEventHistory: java.util.List getEvents()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: android.content.ComponentName getGlobalProxyAdmin(int)> -> _SOURCE_
<android.content.ClipDescription: android.os.PersistableBundle getExtras()> -> _SOURCE_
<com.android.internal.appwidget.IAppWidgetHost$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.NotificationHistory: java.lang.String[] getPooledStringsToWrite()> -> _SOURCE_
<android.animation.ValueAnimator: long getStartDelay()> -> _SOURCE_
<com.android.internal.graphics.palette.Target: float getPopulationWeight()> -> _SOURCE_
<com.android.internal.telephony.CellNetworkScanResult: java.lang.String toString()> -> _SOURCE_
<android.media.tv.TvInputManager: java.util.List getTvContentRatingSystemList()> -> _SOURCE_
<android.app.timedetector.NetworkTimeSuggestion: java.util.List getDebugInfo()> -> _SOURCE_
<android.telephony.TelephonyHistogram: int getCategory()> -> _SOURCE_
<android.app.blob.BlobInfo: java.lang.CharSequence getLabel()> -> _SOURCE_
<android.hardware.location.NanoApp: byte[] getAppBinary()> -> _SOURCE_
<android.content.SyncAdapterType: java.lang.String getSettingsActivity()> -> _SOURCE_
<android.app.Notification$BubbleMetadata: android.app.PendingIntent getBubbleIntent()> -> _SOURCE_
<android.view.inputmethod.InlineSuggestionsRequest: android.os.Bundle getExtras()> -> _SOURCE_
<android.telephony.NetworkRegistrationInfo: int hashCode()> -> _SOURCE_
<android.view.inputmethod.InputMethodManager: int getInputMethodWindowVisibleHeight()> -> _SOURCE_
<android.bluetooth.IBluetoothHeadsetClient$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.bluetooth.BluetoothCodecConfig: long getCodecSpecific1()> -> _SOURCE_
<com.android.internal.view.menu.ActionMenuItem: char getAlphabeticShortcut()> -> _SOURCE_
<android.media.IPlayer$Stub: android.media.IPlayer getDefaultImpl()> -> _SOURCE_
<android.app.Notification$WearableExtender: boolean getHintAmbientBigPicture()> -> _SOURCE_
<android.hardware.cas.V1_2.ICas$Stub: java.util.ArrayList getHashChain()> -> _SOURCE_
<android.telephony.CellInfoLte: int describeContents()> -> _SOURCE_
<android.hardware.camera2.legacy.CameraDeviceUserShim: android.hardware.camera2.impl.CameraMetadataNative getCameraInfo()> -> _SOURCE_
<android.text.style.TtsSpan: java.lang.String getType()> -> _SOURCE_
<android.graphics.Canvas: android.graphics.DrawFilter getDrawFilter()> -> _SOURCE_
<android.app.ResourcesManager: android.view.Display getAdjustedDisplay(int,android.content.res.Resources)> -> _SOURCE_
<android.database.BulkCursorProxy: android.database.CursorWindow getWindow(int)> -> _SOURCE_
<android.view.contentcapture.ContentCaptureManager: java.lang.String access$200()> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getVoiceMailNumber(java.lang.String,java.lang.String)> -> _SOURCE_
<android.content.pm.IShortcutService$Stub$Proxy: android.content.pm.ParceledListSlice getShortcuts(java.lang.String,int,int)> -> _SOURCE_
<android.telephony.ims.aidl.IImsRegistrationCallback$Stub: android.telephony.ims.aidl.IImsRegistrationCallback getDefaultImpl()> -> _SOURCE_
<android.os.storage.StorageManager: long getCacheSizeBytes(java.util.UUID)> -> _SOURCE_
<android.hardware.ICameraService$Stub$Proxy: android.hardware.camera2.params.VendorTagDescriptorCache getCameraVendorTagCache()> -> _SOURCE_
<android.graphics.drawable.BitmapDrawable: android.graphics.Shader$TileMode getTileModeY()> -> _SOURCE_
<android.view.inputmethod.InputMethodManager: int getDisplayId()> -> _SOURCE_
<android.location.Location: double getAltitude()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.telephony.TelephonyManager: android.telephony.TelephonyManager from(android.content.Context)> -> _SOURCE_
<android.app.Notification: java.util.List getContextualActions()> -> _SOURCE_
<android.nfc.NfcAdapter: android.nfc.NfcAdapter getDefaultAdapter()> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: boolean isOffloadedScanBatchingSupported()> -> _SOURCE_
<com.android.internal.telephony.euicc.IListNotificationsCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Default: long getLastNetworkLogRetrievalTime()> -> _SOURCE_
<android.app.usage.UsageStats: long getTotalTimeForegroundServiceUsed()> -> _SOURCE_
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthTokenByFeatures(java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.app.ApplicationPackageManager: android.content.ComponentName getHomeActivities(java.util.List)> -> _SOURCE_
<android.telephony.CellSignalStrengthNr: int getAsuLevel()> -> _SOURCE_
<android.view.IPinnedStackController$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.media.tv.ITvInputClient$Stub: android.media.tv.ITvInputClient getDefaultImpl()> -> _SOURCE_
<android.net.Uri$OpaqueUri: java.lang.String getEncodedPath()> -> _SOURCE_
<android.os.BatterySaverPolicyConfig: boolean getDisableAnimation()> -> _SOURCE_
<android.view.IAppTransitionAnimationSpecsFuture$Stub: android.view.IAppTransitionAnimationSpecsFuture getDefaultImpl()> -> _SOURCE_
<android.bluetooth.IBluetoothHidDevice$Stub: android.bluetooth.IBluetoothHidDevice getDefaultImpl()> -> _SOURCE_
<android.content.pm.PathPermission: java.lang.String getReadPermission()> -> _SOURCE_
<android.os.IServiceManager$Stub: android.os.IServiceManager getDefaultImpl()> -> _SOURCE_
<android.content.ContentResolver: boolean getMasterSyncAutomaticallyAsUser(int)> -> _SOURCE_
<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)> -> _SOURCE_
<android.text.style.TypefaceSpan: android.graphics.Typeface getTypeface()> -> _SOURCE_
<android.app.slice.SliceItem: java.util.List getHints()> -> _SOURCE_
<android.net.NetworkPolicyManager: boolean getRestrictBackground()> -> _SOURCE_
<android.media.midi.MidiInputPort: android.media.midi.IMidiDeviceServer getDeviceServer()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorForPhone(int)> -> _SOURCE_
<android.printservice.PrintServiceInfo: java.lang.String getId()> -> _SOURCE_
<com.android.internal.telephony.IOnSubscriptionsChangedListener$Stub$Proxy: android.os.IBinder asBinder()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean getForceEphemeralUsers(android.content.ComponentName)> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Default: java.util.List getCrossProfileCalendarPackagesForUser(int)> -> _SOURCE_
<android.os.IServiceCallback$Stub: android.os.IServiceCallback getDefaultImpl()> -> _SOURCE_
<android.webkit.WebView: android.webkit.WebViewProvider getWebViewProvider()> -> _SOURCE_
<android.media.midi.IMidiDeviceOpenCallback$Stub: android.media.midi.IMidiDeviceOpenCallback getDefaultImpl()> -> _SOURCE_
<android.app.IActivityTaskManager$Default: android.graphics.Point getAppTaskThumbnailSize()> -> _SOURCE_
<android.content.ContentResolver: java.util.List getCurrentSyncsAsUser(int)> -> _SOURCE_
<android.app.Notification$Action$WearableExtender: java.lang.CharSequence getCancelLabel()> -> _SOURCE_
<android.security.keystore.recovery.KeyChainSnapshot: java.util.List getKeyChainProtectionParams()> -> _SOURCE_
<android.os.TelephonyServiceManager: android.os.TelephonyServiceManager$ServiceRegisterer getOpportunisticNetworkServiceRegisterer()> -> _SOURCE_
<com.android.internal.view.menu.MenuItemImpl: android.view.ActionProvider getActionProvider()> -> _SOURCE_
<android.content.rollback.IRollbackManager$Stub: android.content.rollback.IRollbackManager getDefaultImpl()> -> _SOURCE_
<android.bluetooth.IBluetoothHearingAid$Stub$Proxy: java.util.List getConnectedDevices()> -> _SOURCE_
<android.telephony.TelephonyManager: android.telephony.TelephonyManager getDefault()> -> _SOURCE_
<android.widget.PopupWindow: android.view.View getContentView()> -> _SOURCE_
<com.android.internal.telephony.ISub$Stub$Proxy: java.util.List getActiveSubscriptionInfoList(java.lang.String,java.lang.String)> -> _SOURCE_
<android.widget.AbsSpinner: java.lang.CharSequence getAccessibilityClassName()> -> _SOURCE_
<android.media.AudioRecordingConfiguration: java.util.List getEffects()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: boolean isMvnoMatched(int,int,java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: int getVoWiFiModeSetting(int)> -> _SOURCE_
<android.location.Location: long getElapsedRealtimeAgeNanos()> -> _SOURCE_
<android.telephony.TelephonyManager: int getSlotIndex()> -> _SOURCE_
<android.hardware.usb.UsbRequest: java.lang.Object getClientData()> -> _SOURCE_
<android.view.autofill.AutofillManager: java.lang.String getSmartSuggestionModeToString(int)> -> _SOURCE_
<android.service.oemlock.IOemLockService$Stub$Proxy: java.lang.String getLockName()> -> _SOURCE_
<android.view.inputmethod.InputMethodManager: boolean isFullscreenMode()> -> _SOURCE_
<android.os.connectivity.CellularBatteryStats: long getNumPacketsTx()> -> _SOURCE_
<android.telephony.ServiceState: int getVoiceRegState()> -> _SOURCE_
<android.telephony.TelephonyManager: android.telephony.NetworkScan requestNetworkScan(android.telephony.NetworkScanRequest,java.util.concurrent.Executor,android.telephony.TelephonyScanManager$NetworkScanCallback)> -> _SOURCE_
<android.view.InsetsAnimationThread: android.view.InsetsAnimationThread get()> -> _SOURCE_
<android.app.AutomaticZenRule: android.content.ComponentName getOwner()> -> _SOURCE_
<com.android.internal.telephony.ISub$Default: int[] getActiveSubIdList(boolean)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: java.util.Map getEmergencyNumberList(java.lang.String,java.lang.String)> -> _SOURCE_
<android.os.StatsServiceManager: android.os.StatsServiceManager$ServiceRegisterer getStatsManagerServiceRegisterer()> -> _SOURCE_
<android.graphics.Paint: android.graphics.Typeface getTypeface()> -> _SOURCE_
<android.hardware.radio.IAnnouncementListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.hardware.camera2.CameraMetadata: java.util.ArrayList getKeys(java.lang.Class,java.lang.Class,android.hardware.camera2.CameraMetadata,int[],boolean)> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo$RangeInfo: float getMax()> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: java.lang.String getBackupAgentName()> -> _SOURCE_
<android.security.IKeyChainService$Stub: android.security.IKeyChainService getDefaultImpl()> -> _SOURCE_
<android.view.inputmethod.CursorAnchorInfo: float getInsertionMarkerBottom()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: boolean isModemEnabledForSlot(int,java.lang.String,java.lang.String)> -> _SOURCE_
<com.android.internal.util.MemInfoReader: long getCachedSize()> -> _SOURCE_
<android.media.session.ISession$Default: android.media.session.ISessionController getController()> -> _SOURCE_
<com.android.internal.telephony.ISms$Stub$Proxy: boolean isImsSmsSupportedForSubscriber(int)> -> _SOURCE_
<android.content.pm.IPinItemRequest$Default: android.appwidget.AppWidgetProviderInfo getAppWidgetProviderInfo()> -> _SOURCE_
<android.companion.ICompanionDeviceManager$Default: java.util.List getAssociations(java.lang.String,int)> -> _SOURCE_
<android.accessibilityservice.GestureDescription$StrokeDescription: float getLength()> -> _SOURCE_
<android.view.autofill.IAutoFillManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.assist.AssistContent: java.lang.String getStructuredData()> -> _SOURCE_
<android.app.ApplicationPackageManager: int getUserId()> -> _SOURCE_
<android.webkit.WebResourceResponse: java.util.Map getResponseHeaders()> -> _SOURCE_
<android.nfc.ITagRemovedCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.text.style.SuggestionSpan: java.util.Locale getLocaleObject()> -> _SOURCE_
<android.bluetooth.IBluetoothPbapClient$Stub$Proxy: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
<android.graphics.Paint: float getTextSkewX()> -> _SOURCE_
<android.os.storage.StorageManager: android.os.storage.StorageVolume getStorageVolume(java.io.File,int)> -> _SOURCE_
<android.telephony.CellIdentityGsm$1: android.telephony.CellIdentityGsm createFromParcel(android.os.Parcel)> -> _SOURCE_
<com.android.internal.view.menu.ActionMenuItem: android.view.View getActionView()> -> _SOURCE_
<android.hardware.location.IContextHubService$Stub: android.hardware.location.IContextHubService getDefaultImpl()> -> _SOURCE_
<android.nfc.INfcAdapter$Stub$Proxy: android.nfc.INfcFCardEmulation getNfcFCardEmulationInterface()> -> _SOURCE_
<android.hardware.Camera$Parameters: java.util.List getSupportedAntibanding()> -> _SOURCE_
<android.app.backup.IBackupManagerMonitor$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.content.pm.IPackageManager$Default: android.content.pm.IPackageInstaller getPackageInstaller()> -> _SOURCE_
<android.net.TrafficStats: long getTotalRxPackets()> -> _SOURCE_
<android.telephony.PhoneNumberUtils: java.lang.String formatNumber(java.lang.String,java.lang.String)> -> _SOURCE_
<android.bluetooth.IBluetoothSap$Default: android.bluetooth.BluetoothDevice getClient()> -> _SOURCE_
<android.app.role.IRoleController$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getIsimIst()> -> _SOURCE_
<android.telephony.ims.ImsManager: android.telephony.ims.ImsMmTelManager getImsMmTelManager(int)> -> _SOURCE_
<com.android.internal.telephony.IMms$Stub: java.lang.String getTransactionName(int)> -> _SOURCE_
<android.net.INetworkStatsSession$Stub$Proxy: android.net.NetworkStatsHistory getHistoryForUid(android.net.NetworkTemplate,int,int,int,int)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.lang.String getMmsUserAgent(int)> -> _SOURCE_
<android.view.ScrollCaptureSession: android.graphics.Point getPositionInWindow()> -> _SOURCE_
<android.app.blob.IBlobCommitCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder createRecurringMonthly(java.time.ZonedDateTime)> -> _SOURCE_
<android.text.method.TextKeyListener: android.text.method.TextKeyListener getInstance(boolean,android.text.method.TextKeyListener$Capitalize)> -> _SOURCE_
<android.telephony.CellSignalStrengthNr: int getSsSinr()> -> _SOURCE_
<android.hardware.hdmi.IHdmiControlService$Default: android.hardware.hdmi.HdmiDeviceInfo getActiveSource()> -> _SOURCE_
<android.telephony.ServiceState: boolean getRoaming()> -> _SOURCE_
<com.android.internal.os.StatsdHiddenApiUsageLogger: com.android.internal.os.StatsdHiddenApiUsageLogger getInstance()> -> _SOURCE_
<android.media.soundtrigger.SoundTriggerManager$Model: byte[] getModelData()> -> _SOURCE_
<android.graphics.Color: android.graphics.ColorSpace getColorSpace()> -> _SOURCE_
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ProviderInfo getProviderInfo(android.content.ComponentName,int,int)> -> _SOURCE_
<android.animation.AnimatorSet: android.animation.TimeInterpolator getInterpolator()> -> _SOURCE_
<android.os.storage.StorageVolume: java.lang.String getNormalizedUuid()> -> _SOURCE_
<android.telephony.TelephonyManager: void reportDefaultNetworkStatus(boolean)> -> _SOURCE_
<android.hardware.location.NanoAppInstanceInfo: java.lang.String getPublisher()> -> _SOURCE_
<android.view.DragEvent: float getX()> -> _SOURCE_
<android.bluetooth.IBluetoothHearingAid$Stub$Proxy: long getHiSyncId(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<android.app.role.IRoleManager$Stub$Proxy: java.util.List getRoleHoldersAsUser(java.lang.String,int)> -> _SOURCE_
<android.drm.DrmSupportInfo: java.util.Iterator getMimeTypeIterator()> -> _SOURCE_
<android.app.WallpaperManager: android.app.WallpaperManager$ColorManagementProxy getColorManagementProxy()> -> _SOURCE_
<android.hardware.Camera$Parameters: java.lang.String getAntibanding()> -> _SOURCE_
<android.hardware.SensorManager: android.hardware.SensorDirectChannel createDirectChannel(android.os.MemoryFile)> -> _SOURCE_
<com.android.internal.widget.ILockSettings$Stub$Proxy: java.util.Map getRecoveryStatus()> -> _SOURCE_
<android.location.GpsMeasurementsEvent: android.location.GpsClock getClock()> -> _SOURCE_
<android.view.textclassifier.TextLinks$TextLink: android.os.Bundle getExtras()> -> _SOURCE_
<android.media.IMediaHTTPService$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.AppOpsManager: java.util.List getOpsForPackage(int,java.lang.String,int[])> -> _SOURCE_
<android.security.net.config.CertificatesEntryRef: java.util.Set getTrustAnchors()> -> _SOURCE_
<com.android.internal.view.menu.SubMenuBuilder: boolean isGroupDividerEnabled()> -> _SOURCE_
<android.app.timezone.ICallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.internal.app.IBatteryStats$Stub$Proxy: byte[] getStatistics()> -> _SOURCE_
<android.view.textclassifier.ConversationActions$Request: java.lang.String getCallingPackageName()> -> _SOURCE_
<android.app.ActivityManager: java.util.List getRunningServices(int)> -> _SOURCE_
<android.os.UserManager: boolean isUserUnlockingOrUnlocked(android.os.UserHandle)> -> _SOURCE_
<android.drm.DrmRights: java.lang.String getAccountId()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: int getPasswordMinimumNonLetter(android.content.ComponentName,int)> -> _SOURCE_
<android.content.pm.IShortcutService$Stub: android.content.pm.IShortcutService getDefaultImpl()> -> _SOURCE_
<android.hardware.radio.ICloseHandle$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.view.Window: android.transition.Transition getSharedElementReenterTransition()> -> _SOURCE_
<android.view.InsetsController: android.view.InsetsController$Host getHost()> -> _SOURCE_
<android.telephony.PhoneCapability: java.lang.String toString()> -> _SOURCE_
<android.telephony.SubscriptionManager: boolean getBooleanSubscriptionProperty(int,java.lang.String,boolean,android.content.Context)> -> _SOURCE_
<android.app.IUserSwitchObserver$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getLine1Number()> -> _SOURCE_
<android.app.StatusBarManager: android.app.StatusBarManager$DisableInfo getDisableInfo()> -> _SOURCE_
<android.os.storage.VolumeInfo: java.lang.String getDescription()> -> _SOURCE_
<android.os.UserManager: int getUserBadgeDarkColor(int)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: android.os.BatteryStats$Timer getVibratorOnTimer()> -> _SOURCE_
<android.security.IKeyChainAliasCallback$Stub: android.security.IKeyChainAliasCallback getDefaultImpl()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.util.List getInstalledModules(int)> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.String getCertInstallerPackage(android.content.ComponentName)> -> _SOURCE_
<android.location.ILocationManager$Stub$Proxy: java.lang.String getFromLocationName(java.lang.String,double,double,double,double,int,android.location.GeocoderParams,java.util.List)> -> _SOURCE_
<android.os.incremental.IncrementalManager: boolean isFeatureEnabled()> -> _SOURCE_
<android.telephony.TelephonyManager: int getPreferredOpportunisticDataSubscription()> -> _SOURCE_
<android.content.IIntentSender$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.content.pm.ILauncherApps$Stub: android.content.pm.ILauncherApps getDefaultImpl()> -> _SOURCE_
<android.accounts.IAccountAuthenticatorResponse$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.telephony.ICarrierConfigLoader$Stub$Proxy: android.os.IBinder asBinder()> -> _SOURCE_
<android.telephony.PinResult: int getAttemptsRemaining()> -> _SOURCE_
<android.os.IPowerManager$Stub$Proxy: float getBrightnessConstraint(int)> -> _SOURCE_
<android.bluetooth.le.ScanFilter: java.lang.String getDeviceAddress()> -> _SOURCE_
<android.widget.BaseAdapter: int getViewTypeCount()> -> _SOURCE_
<android.app.NotificationHistory$HistoricalNotification: android.graphics.drawable.Icon getIcon()> -> _SOURCE_
<android.telephony.CellInfoWcdma: android.telephony.CellInfo sanitizeLocationInfo()> -> _SOURCE_
<android.hardware.camera2.CameraAccessException: java.lang.String getDefaultMessage(int)> -> _SOURCE_
<android.view.IDisplayFoldListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec: long getBoundToSpecificSecureUserId()> -> _SOURCE_
<android.telephony.RadioAccessFamily: int getRadioAccessFamily()> -> _SOURCE_
<android.net.NetworkPolicyManager: android.net.NetworkPolicy[] getNetworkPolicies()> -> _SOURCE_
<android.telephony.ClosedSubscriberGroupInfo: int getCsgIdentity()> -> _SOURCE_
<com.android.internal.view.IInputConnectionWrapper: android.view.inputmethod.InputConnection getInputConnection()> -> _SOURCE_
<android.database.CursorWrapper: double getDouble(int)> -> _SOURCE_
<android.telephony.CellIdentityLte: int getMnc()> -> _SOURCE_
<android.os.FileUtils$MemoryPipe: java.io.FileDescriptor getFD()> -> _SOURCE_
<android.widget.Editor: boolean getFlagInsertionHandleGesturesEnabled()> -> _SOURCE_
<android.os.IVibratorService$Stub: android.os.IVibratorService getDefaultImpl()> -> _SOURCE_
<android.provider.Settings$System: float getFloat(android.content.ContentResolver,java.lang.String,float)> -> _SOURCE_
<android.telephony.TelephonyManager: int getVoiceNetworkType(int)> -> _SOURCE_
<android.os.UserManager: int[] getEnabledProfileIds(int)> -> _SOURCE_
<android.app.assist.AssistStructure$ViewNode: int[] getTextLineBaselines()> -> _SOURCE_
<android.view.MotionEvent: float getHistoricalSize(int,int)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: boolean isVoWiFiSettingEnabled(int)> -> _SOURCE_
<android.os.BatterySaverPolicyConfig: boolean getEnableAdjustBrightness()> -> _SOURCE_
<android.security.net.config.UserCertificateSource: android.security.net.config.UserCertificateSource getInstance()> -> _SOURCE_
<android.telephony.UiccAccessRule: int getCarrierPrivilegeStatus(android.content.pm.Signature,java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.IUpdateAvailableNetworksCallback$Stub: android.os.IBinder asBinder()> -> _SOURCE_
<com.android.internal.telephony.SmsMessageBase: java.lang.String getEmailBody()> -> _SOURCE_
<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],android.os.Bundle,android.os.CancellationSignal)> -> _SOURCE_
<android.view.autofill.AutofillValue: long getDateValue()> -> _SOURCE_
<android.app.WallpaperManager: android.os.ParcelFileDescriptor getWallpaperFile(int)> -> _SOURCE_
<android.view.ISystemGestureExclusionListener$Stub: android.view.ISystemGestureExclusionListener getDefaultImpl()> -> _SOURCE_
<android.media.tv.TvTrackInfo: java.lang.String getEncoding()> -> _SOURCE_
<android.hardware.camera2.utils.CameraIdAndSessionConfiguration: java.lang.String getCameraId()> -> _SOURCE_
<android.telecom.Logging.EventManager: java.util.Map getCallEventRecordMap()> -> _SOURCE_
<android.location.LocationManager: boolean isExtraLocationControllerPackageEnabled()> -> _SOURCE_
<android.location.GnssMeasurement: double getFullInterSignalBiasNanos()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int[] getSlotsMapping()> -> _SOURCE_
<android.hardware.cas.V1_0.IMediaCasService$Proxy: java.util.ArrayList getHashChain()> -> _SOURCE_
<android.net.Uri$PathPart: java.lang.String getEncoded()> -> _SOURCE_
<android.content.res.loader.ResourcesLoader: java.util.List getApkAssets()> -> _SOURCE_
<android.hardware.location.IContextHubService$Stub$Proxy: android.hardware.location.ContextHubInfo getContextHubInfo(int)> -> _SOURCE_
<android.bluetooth.BluetoothSap: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
<android.app.ApplicationPackageManager: int getInstantAppCookieMaxBytes()> -> _SOURCE_
<android.net.Uri$OpaqueUri: java.lang.String getUserInfo()> -> _SOURCE_
<android.content.pm.PackageInstaller$SessionInfo: long getCreatedMillis()> -> _SOURCE_
<android.telephony.TelephonyManager: void disableServiceHandleCaching()> -> _SOURCE_
<android.telephony.PreciseCallState: int getForegroundCallState()> -> _SOURCE_
<android.widget.ProgressBar: android.graphics.BlendMode getProgressBackgroundTintBlendMode()> -> _SOURCE_
<android.media.session.ISessionManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.widget.Editor: boolean getFlagCursorDragFromAnywhereEnabled()> -> _SOURCE_
<android.nfc.Tag: java.lang.String[] getTechList()> -> _SOURCE_
<android.net.http.SslCertificate: java.util.Date getValidNotBeforeDate()> -> _SOURCE_
<android.hardware.ISensorPrivacyListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.view.menu.SubMenuBuilder: boolean isShortcutsVisible()> -> _SOURCE_
<android.telephony.SubscriptionManager: long getLongSubscriptionProperty(int,java.lang.String,long,android.content.Context)> -> _SOURCE_
<android.telecom.Logging.SessionManager: android.telecom.Logging.Session createSubsession()> -> _SOURCE_
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(android.net.Network)> -> _SOURCE_
<android.service.vr.IVrStateCallbacks$Stub: android.service.vr.IVrStateCallbacks getDefaultImpl()> -> _SOURCE_
<android.provider.Settings$Config: java.lang.String getString(android.content.ContentResolver,java.lang.String)> -> _SOURCE_
<android.telecom.Logging.EventManager$EventRecord$EventTiming: long getTime()> -> _SOURCE_
<android.print.IPrintManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.role.IOnRoleHoldersChangedListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.data.ApnSetting: java.net.InetAddress getProxyAddress()> -> _SOURCE_
<android.nfc.INfcFCardEmulation$Stub$Proxy: java.util.List getNfcFServices(int)> -> _SOURCE_
<android.hardware.usb.IUsbSerialReader$Stub$Proxy: java.lang.String getSerial(java.lang.String)> -> _SOURCE_
<android.net.NetworkProvider: java.lang.String getName()> -> _SOURCE_
<android.nfc.NfcAdapter: android.content.Context getContext()> -> _SOURCE_
<android.telephony.NeighboringCellInfo: int describeContents()> -> _SOURCE_
<android.content.pm.parsing.result.ParseTypeImpl: java.lang.Object getResult()> -> _SOURCE_
<android.os.IDeviceIdleController$Default: int[] getAppIdWhitelist()> -> _SOURCE_
<com.android.internal.telecom.ITelecomService$Stub$Proxy: java.util.List getSelfManagedPhoneAccounts(java.lang.String,java.lang.String)> -> _SOURCE_
<android.app.AsyncNotedAppOp: java.lang.String getMessage()> -> _SOURCE_
<android.app.Activity: boolean isActivityTransitionRunning()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getCallStateForSlot(int)> -> _SOURCE_
<android.net.wifi.nl80211.IWifiScannerImpl$Stub$Proxy: android.net.wifi.nl80211.NativeScanResult[] getPnoScanResults()> -> _SOURCE_
<android.telephony.SubscriptionPlan: long getDataUsageBytes()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.lang.String getCdmaEriTextForSubscriber(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.telephony.CellIdentityLte: int getEarfcn()> -> _SOURCE_
<android.location.GpsClock: long getFullBiasInNs()> -> _SOURCE_
<android.app.AppOpsManager$NoteOpEvent: long getDuration()> -> _SOURCE_
<com.android.internal.statusbar.IStatusBarService$Stub: com.android.internal.statusbar.IStatusBarService getDefaultImpl()> -> _SOURCE_
<com.android.internal.os.BatteryStatsHelper: long getStatsPeriod()> -> _SOURCE_
<android.app.Notification: android.app.Notification$BubbleMetadata getBubbleMetadata()> -> _SOURCE_
<android.webkit.WebView: android.webkit.PluginList getPluginList()> -> _SOURCE_
<android.telephony.ims.aidl.IImsMmTelListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub: com.android.internal.telephony.ITelephony getDefaultImpl()> -> _SOURCE_
<android.location.ILocationManager$Stub$Proxy: long getGnssCapabilities()> -> _SOURCE_
<android.telephony.SignalStrength: int getLteCqi()> -> _SOURCE_
<android.hardware.soundtrigger.SoundTrigger$RecognitionEvent: android.media.AudioFormat getCaptureFormat()> -> _SOURCE_
<android.widget.ScrollBarDrawable: android.graphics.ColorFilter getColorFilter()> -> _SOURCE_
<android.view.WindowInsetsAnimation: float getAlpha()> -> _SOURCE_
<android.telephony.PhoneNumberUtils: boolean isUriNumber(java.lang.String)> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.CancellationSignal)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isCaCertApproved(java.lang.String,int)> -> _SOURCE_
<android.hardware.camera2.CaptureRequest$Key: java.lang.String getName()> -> _SOURCE_
<android.telephony.CellSignalStrength: int getNumSignalStrengthLevels()> -> _SOURCE_
<android.bluetooth.UidTraffic: long getRxBytes()> -> _SOURCE_
<android.hardware.camera2.CaptureRequest$Key: android.hardware.camera2.impl.CameraMetadataNative$Key getNativeKey()> -> _SOURCE_
<com.android.internal.view.menu.ActionMenuItem: java.lang.CharSequence getTitle()> -> _SOURCE_
<android.view.autofill.AutofillManager$CompatibilityBridge: java.util.List getInstalledAccessibilityServiceList(java.util.List)> -> _SOURCE_
<android.app.AppOpsManager: java.util.List getPackagesForOps(java.lang.String[])> -> _SOURCE_
<android.widget.ExpandableListPosition: long getPackedPosition()> -> _SOURCE_
<android.net.IConnectivityManager$Default: java.lang.String getMobileProvisioningUrl()> -> _SOURCE_
<android.content.pm.IPackageManager$Default: android.content.pm.VerifierDeviceIdentity getVerifierDeviceIdentity()> -> _SOURCE_
<android.location.ILocationManager$Stub$Proxy: java.util.List getTestProviderCurrentRequests(java.lang.String)> -> _SOURCE_
<android.nfc.Tag: int[] getTechCodesFromStrings(java.lang.String[])> -> _SOURCE_
<android.view.accessibility.IAccessibilityManager$Default: java.util.List getAccessibilityShortcutTargets(int)> -> _SOURCE_
<android.media.MediaDescription: android.os.Bundle getExtras()> -> _SOURCE_
<android.telephony.ims.aidl.IImsMmTelFeature$Default: com.android.ims.internal.IImsEcbm getEcbmInterface()> -> _SOURCE_
<android.content.pm.IPackageInstaller$Default: android.content.pm.ParceledListSlice getStagedSessions()> -> _SOURCE_
<android.media.IRemoteVolumeController$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.service.dreams.IDreamManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.media.soundtrigger.SoundTriggerManager$Model: android.hardware.soundtrigger.SoundTrigger$GenericSoundModel getGenericSoundModel()> -> _SOURCE_
<com.android.internal.telephony.GsmAlphabet: int[] getEnabledLockingShiftTables()> -> _SOURCE_
<android.app.ActivityThread: java.lang.String getProcessName()> -> _SOURCE_
<android.content.ClipData$Item: android.content.Intent getIntent()> -> _SOURCE_
<android.telephony.ServiceState: int hashCode()> -> _SOURCE_
<android.hardware.radio.TunerCallbackAdapter: java.util.List getLastCompleteList()> -> _SOURCE_
<com.android.internal.telephony.ISub$Stub$Proxy: java.lang.String getSubscriptionProperty(int,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.telephony.CellInfoGsm: java.lang.String toString()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.app.slice.ISliceManager$Stub$Proxy: android.net.Uri[] getPinnedSlices(java.lang.String)> -> _SOURCE_
<android.graphics.drawable.VectorDrawable$VGroup: java.lang.String getGroupName()> -> _SOURCE_
<com.android.internal.telephony.IOns$Stub: com.android.internal.telephony.IOns asInterface(android.os.IBinder)> -> _SOURCE_
<android.app.ApplicationPackageManager: android.content.pm.PermissionGroupInfo getPermissionGroupInfo(java.lang.String,int)> -> _SOURCE_
<android.window.IWindowContainerToken$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.DisabledWallpaperManager: android.app.WallpaperColors getWallpaperColors(int,int)> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getDeviceIdWithFeature(java.lang.String,java.lang.String)> -> _SOURCE_
<android.telephony.CellLocation: android.telephony.CellLocation newFromBundle(android.os.Bundle)> -> _SOURCE_
<android.media.session.MediaSession$QueueItem: long getQueueId()> -> _SOURCE_
<android.media.audiopolicy.IAudioPolicyCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.os.HidlMemory: long getSize()> -> _SOURCE_
<android.os.storage.StorageManager: java.util.UUID getUuidForPath(java.io.File)> -> _SOURCE_
<android.telephony.TelephonyManager: int getSimState()> -> _SOURCE_
<android.view.accessibility.IAccessibilityManager$Stub$Proxy: java.util.List getEnabledAccessibilityServiceList(int,int)> -> _SOURCE_
<android.security.IKeyChainAliasCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.content.IContentService$Stub$Proxy: java.util.List getCurrentSyncsAsUser(int)> -> _SOURCE_
<android.net.NetworkInfo: android.net.NetworkInfo$DetailedState getDetailedState()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.lang.String[] getUnsuspendablePackages(java.lang.String[])> -> _SOURCE_
<android.os.storage.StorageManager: boolean isFileEncryptedNativeOrEmulated()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean isConcurrentVoiceAndDataAllowed(int)> -> _SOURCE_
<android.telephony.SubscriptionPlan: java.lang.CharSequence access$302(android.telephony.SubscriptionPlan,java.lang.CharSequence)> -> _SOURCE_
<android.hardware.location.IContextHubService$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telephony.CellInfoWcdma: int hashCode()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: android.content.ComponentName getProfileOwnerOrDeviceOwnerSupervisionComponent(android.os.UserHandle)> -> _SOURCE_
<android.hardware.input.IInputDevicesChangedListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.content.pm.IPinItemRequest$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.content.Context: android.app.IApplicationThread getIApplicationThread()> -> _SOURCE_
<android.content.pm.IPackageManager$Default: java.lang.String getPermissionControllerPackageName()> -> _SOURCE_
<android.os.UserManager: java.util.List getUserHandles(boolean)> -> _SOURCE_
<android.app.ActivityOptions: boolean getTaskAlwaysOnTop()> -> _SOURCE_
<android.app.INotificationManager$Stub$Proxy: java.util.List getEnabledNotificationListeners(int)> -> _SOURCE_
<android.telephony.SignalStrength: java.util.List getCellSignalStrengths(java.lang.Class)> -> _SOURCE_
<android.media.AudioManager: java.util.List getHwOffloadEncodingFormatsSupportedForA2DP()> -> _SOURCE_
<android.app.AppOpsManager: void getHistoricalOps(android.app.AppOpsManager$HistoricalOpsRequest,java.util.concurrent.Executor,java.util.function.Consumer)> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: java.util.Set getMimeGroups()> -> _SOURCE_
<android.telephony.DataSpecificRegistrationInfo: java.lang.String toString()> -> _SOURCE_
<android.os.SystemProperties: java.lang.String get(java.lang.String)> -> _SOURCE_
<android.media.tv.ITvInputManager$Stub$Proxy: java.util.List getHardwareList()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getSubscriptionSpecificCarrierId(int)> -> _SOURCE_
<android.app.Activity: android.net.Uri getReferrer()> -> _SOURCE_
<android.app.servertransaction.PendingTransactionActions: android.os.Bundle getOldState()> -> _SOURCE_
<android.app.SearchableInfo: java.lang.String getSuggestSelection()> -> _SOURCE_
<android.app.assist.AssistStructure$ViewNode: float getElevation()> -> _SOURCE_
<android.bluetooth.BluetoothGatt: android.bluetooth.BluetoothDevice getDevice()> -> _SOURCE_
<android.location.GpsMeasurement: double getDopplerShiftUncertaintyInHz()> -> _SOURCE_
<android.hardware.cas.V1_2.ICas$Proxy: java.util.ArrayList getHashChain()> -> _SOURCE_
<android.net.EthernetManager: boolean isAvailable(java.lang.String)> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: java.lang.String getViewIdResourceName()> -> _SOURCE_
<android.telephony.CarrierConfigManager: android.os.PersistableBundle getConfigByComponentForSubId(java.lang.String,int)> -> _SOURCE_
<com.android.internal.telephony.euicc.IGetSmdsAddressCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.hardware.fingerprint.FingerprintManager$CryptoObject: javax.crypto.Mac getMac()> -> _SOURCE_
<android.os.IThermalService$Stub: android.os.IThermalService getDefaultImpl()> -> _SOURCE_
<android.telephony.SignalStrength: long getTimestampMillis()> -> _SOURCE_
<android.net.NetworkIdentity: boolean getMetered()> -> _SOURCE_
<android.os.DropBoxManager: boolean isTagEnabled(java.lang.String)> -> _SOURCE_
<android.app.WallpaperManager: boolean isWallpaperBackupEligible(int)> -> _SOURCE_
<com.android.internal.app.LocalePicker: android.os.LocaleList getLocales()> -> _SOURCE_
<android.content.IClipboard$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telephony.ModemActivityInfo$TransmitPower: int getTimeInMillis()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String iccTransmitApduBasicChannel(int,int,int,int,int,int,java.lang.String)> -> _SOURCE_
<android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int,int)> -> _SOURCE_
<android.net.LinkProperties: java.lang.String getInterfaceName()> -> _SOURCE_
<android.view.IWindowManager$Stub$Proxy: float[] getAnimationScales()> -> _SOURCE_
<android.app.timedetector.TelephonyTimeSuggestion: android.os.TimestampedValue getUtcTime()> -> _SOURCE_
<android.bluetooth.IBluetoothAvrcpController$Stub$Proxy: java.util.List getConnectedDevices()> -> _SOURCE_
<android.app.usage.StorageStatsManager: android.app.usage.StorageStats queryStatsForPackage(java.util.UUID,java.lang.String,android.os.UserHandle)> -> _SOURCE_
<android.print.PrintJobInfo: float getProgress()> -> _SOURCE_
<android.widget.Toolbar: java.lang.CharSequence getNavigationContentDescription()> -> _SOURCE_
<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getUserBadgedIcon(android.graphics.drawable.Drawable,android.os.UserHandle)> -> _SOURCE_
<android.os.IUserManager$Stub$Proxy: android.os.Bundle getUserRestrictions(int)> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: java.util.List getSupportedProfiles()> -> _SOURCE_
<android.app.ActivityManager: java.util.List getRunningExternalApplications()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: java.lang.String iccTransmitApduBasicChannel(int,java.lang.String,int,int,int,int,int,java.lang.String)> -> _SOURCE_
<android.telephony.NeighboringCellInfo: int getPsc()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: boolean isAvailable(int,int,int)> -> _SOURCE_
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice getInstalledPackages(int,int)> -> _SOURCE_
<android.telephony.VisualVoicemailSmsFilterSettings$Builder: android.telephony.VisualVoicemailSmsFilterSettings build()> -> _SOURCE_
<android.telephony.UssdResponse: java.lang.CharSequence getReturnMessage()> -> _SOURCE_
<android.content.pm.SharedLibraryInfo: java.util.List getDependentPackages()> -> _SOURCE_
<android.app.usage.StorageStats: long getCodeBytes()> -> _SOURCE_
<android.app.ActivityManager: java.util.List getAppTasks()> -> _SOURCE_
<android.os.BatterySaverPolicyConfig: boolean getDisableVibration()> -> _SOURCE_
<android.app.Notification$WearableExtender: java.util.List getActions()> -> _SOURCE_
<android.hardware.hdmi.IHdmiInputChangeListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.view.ImeFocusController: android.view.View getServedView()> -> _SOURCE_
<android.graphics.Paint: float getShadowLayerDx()> -> _SOURCE_
<android.app.ActivityThread: java.util.concurrent.Executor getExecutor()> -> _SOURCE_
<android.app.contentsuggestions.IClassificationsCallback$Stub: android.app.contentsuggestions.IClassificationsCallback getDefaultImpl()> -> _SOURCE_
<com.android.internal.util.StateMachine$LogRec: com.android.internal.util.IState getState()> -> _SOURCE_
<android.telephony.ims.ImsExternalCallState: android.net.Uri getLocalAddress()> -> _SOURCE_
<android.hardware.ICameraClient$Stub: android.hardware.ICameraClient getDefaultImpl()> -> _SOURCE_
<android.app.slice.SliceSpec: java.lang.String getType()> -> _SOURCE_
<android.graphics.drawable.VectorDrawable: long getNativeTree()> -> _SOURCE_
<android.os.PowerManager: int getLastSleepReason()> -> _SOURCE_
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String getInstallerPackageName(java.lang.String)> -> _SOURCE_
<android.media.RoutingSessionInfo: java.lang.String getId()> -> _SOURCE_
<android.hardware.camera2.params.MandatoryStreamCombination$Builder: java.util.List getAvailableMandatoryStreamCombinations()> -> _SOURCE_
<com.android.internal.telephony.IOns$Stub: java.lang.String getTransactionName(int)> -> _SOURCE_
<android.telephony.CellSignalStrengthCdma: int describeContents()> -> _SOURCE_
<android.app.prediction.AppPredictionContext: android.os.Bundle getExtras()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String dataStateToString(int)> -> _SOURCE_
<android.telephony.TelephonyHistogram: int getMaxTime()> -> _SOURCE_
<android.hardware.camera2.params.Face: android.graphics.Point getMouthPosition()> -> _SOURCE_
<android.telephony.PhoneNumberUtils: boolean isPotentialEmergencyNumber(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: int getPermissionGrantState(android.content.ComponentName,java.lang.String,java.lang.String)> -> _SOURCE_
<android.view.ViewRootImpl: java.lang.CharSequence getTitle()> -> _SOURCE_
<android.app.ActivityOptions: android.view.RemoteAnimationAdapter getRemoteAnimationAdapter()> -> _SOURCE_
<android.hardware.hdmi.IHdmiControlService$Stub$Proxy: android.hardware.hdmi.HdmiDeviceInfo getActiveSource()> -> _SOURCE_
<com.android.internal.widget.IRemoteViewsFactory$Stub$Proxy: long getItemId(int)> -> _SOURCE_
<android.hardware.camera2.impl.FrameNumberTracker: long getCompletedFrameNumber()> -> _SOURCE_
<android.media.session.PlaybackState$CustomAction: java.lang.CharSequence getName()> -> _SOURCE_
<android.app.AppOpsManager$OpEntry: long getDuration()> -> _SOURCE_
<android.telephony.TelephonyManager: void switchMultiSimConfig(int)> -> _SOURCE_
<android.view.InsetsState: android.graphics.Rect getDisplayFrame()> -> _SOURCE_
<android.animation.Keyframe: float getFraction()> -> _SOURCE_
<android.os.IClientCallback$Stub: android.os.IClientCallback getDefaultImpl()> -> _SOURCE_
<android.telephony.CellIdentityWcdma: java.lang.String getMccString()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.media.MediaPlayer: android.media.MediaTimestamp getTimestamp()> -> _SOURCE_
<android.content.pm.UserInfo: boolean isSystemOnly()> -> _SOURCE_
<android.app.ISearchManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.internal.telecom.ITelecomService$Stub$Proxy: java.util.List getAllPhoneAccountHandles()> -> _SOURCE_
<android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityWindowInfo getWindow(int,int,boolean)> -> _SOURCE_
<android.view.ViewDebug: long getViewInstanceCount()> -> _SOURCE_
<android.os.PowerManager: int getLastShutdownReason()> -> _SOURCE_
<android.app.INotificationManager$Stub$Proxy: java.lang.String getNotificationDelegate(java.lang.String)> -> _SOURCE_
<android.telephony.ICellInfoCallback$Stub: java.lang.String getTransactionName(int)> -> _SOURCE_
<com.android.internal.content.om.OverlayConfigParser: java.util.ArrayList getConfigurations(com.android.internal.content.om.OverlayConfigParser$OverlayPartition,com.android.internal.content.om.OverlayScanner)> -> _SOURCE_
<com.android.internal.telephony.ISub$Default: int[] getSubId(int)> -> _SOURCE_
<android.telephony.ims.aidl.IImsConfig$Stub$Proxy: java.lang.String getConfigString(int)> -> _SOURCE_
<com.android.internal.telephony.ISub$Stub$Proxy: java.util.List getOpportunisticSubscriptions(java.lang.String,java.lang.String)> -> _SOURCE_
<android.media.AudioManager: int getFocusRampTimeMs(int,android.media.AudioAttributes)> -> _SOURCE_
<android.media.IStrategyPreferredDeviceDispatcher$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getManufacturerCode(int)> -> _SOURCE_
<android.app.timezone.ICallback$Stub: android.app.timezone.ICallback getDefaultImpl()> -> _SOURCE_
<com.android.internal.telephony.euicc.IDisableProfileCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.lang.String getAidForAppType(int,int)> -> _SOURCE_
<android.bluetooth.le.ScanFilter: android.os.ParcelUuid getServiceUuid()> -> _SOURCE_
<android.hardware.camera2.utils.TypeReference: android.hardware.camera2.utils.TypeReference getComponentType()> -> _SOURCE_
<android.app.slice.SliceItem: android.os.Bundle getBundle()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean isDataConnectivityPossible(int)> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isTetheringApnRequired(int)> -> _SOURCE_
<com.android.internal.graphics.palette.Target: float getMinimumSaturation()> -> _SOURCE_
<android.os.storage.StorageManager: java.lang.String getPrimaryStorageUuid()> -> _SOURCE_
<android.telephony.SmsCbMessage: android.telephony.SmsCbLocation getLocation()> -> _SOURCE_
<android.telephony.euicc.EuiccInfo: java.lang.String getOsVersion()> -> _SOURCE_
<android.content.res.ResourcesImpl: android.content.res.ConfigurationBoundResourceCache getStateListAnimatorCache()> -> _SOURCE_
<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.HdmiTvClient getTvClient()> -> _SOURCE_
<android.telephony.CellIdentityLte: int getPci()> -> _SOURCE_
<android.content.pm.dex.ArtManager: java.lang.String getCurrentProfilePath(java.lang.String,int,java.lang.String)> -> _SOURCE_
<android.net.Uri$StringUri: java.lang.String getEncodedPath()> -> _SOURCE_
<android.net.NetworkQuotaInfo: long getSoftLimitBytes()> -> _SOURCE_
<android.hardware.input.IInputDevicesChangedListener$Stub: android.hardware.input.IInputDevicesChangedListener getDefaultImpl()> -> _SOURCE_
<android.app.usage.UsageEvents$Event: java.lang.String getTaskRootPackageName()> -> _SOURCE_
<android.telephony.CellIdentityCdma: android.telephony.CellIdentityCdma createFromParcelBody(android.os.Parcel)> -> _SOURCE_
<android.app.IActivityManager$Default: java.util.List getRunningExternalApplications()> -> _SOURCE_
<android.bluetooth.IBluetooth$Stub$Proxy: android.bluetooth.BluetoothDevice[] getBondedDevices()> -> _SOURCE_
<android.nfc.cardemulation.AidGroup: java.lang.String getCategory()> -> _SOURCE_
<android.hardware.input.IInputManager$Stub$Proxy: android.hardware.input.TouchCalibration getTouchCalibrationForInputDevice(java.lang.String,int)> -> _SOURCE_
<android.nfc.INfcAdapter$Stub$Proxy: android.nfc.INfcAdapterExtras getNfcAdapterExtrasInterface(java.lang.String)> -> _SOURCE_
<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodClient getClient()> -> _SOURCE_
<android.app.KeyguardManager: boolean getPrivateNotificationsAllowed()> -> _SOURCE_
<android.permission.PermissionManager: java.util.List getSplitPermissions()> -> _SOURCE_
<android.widget._$$Lambda$aOGBsMC_jnvTDjezYLRtz35nAPI: java.lang.Object get()> -> _SOURCE_
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int,int)> -> _SOURCE_
<com.android.internal.widget.ToolbarWidgetWrapper: java.lang.CharSequence getSubtitle()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean isDataEnabled(int)> -> _SOURCE_
<com.android.internal.telephony.INumberVerificationCallback$Stub: android.os.IBinder asBinder()> -> _SOURCE_
<com.android.internal.app.WindowDecorActionBar$TabImpl: java.lang.Object getTag()> -> _SOURCE_
<android.net.TrafficStats: long getTxPackets(java.lang.String)> -> _SOURCE_
<android.nfc.NfcAdapter: android.nfc.INfcCardEmulation getCardEmulationService()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: int getActivePhoneTypeForSlot(int)> -> _SOURCE_
<android.telephony.PhoneCapability: int hashCode()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long getNextMinDailyDeadline()> -> _SOURCE_
<android.graphics.RenderNode: float getTranslationY()> -> _SOURCE_
<android.app.INotificationManager$Default: android.service.notification.ZenModeConfig getZenModeConfig()> -> _SOURCE_
<android.app.Service: android.app.Application getApplication()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isModemEnabledForSlot(int)> -> _SOURCE_
<android.widget.ProgressBar: android.content.res.ColorStateList getProgressBackgroundTintList()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: android.telephony.ims.aidl.IImsRegistration getImsRegistration(int,int)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.lang.String getAlwaysOnVpnPackage(android.content.ComponentName)> -> _SOURCE_
<android.app.Fragment: android.app.FragmentManager getFragmentManager()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: int getProfileWithMinimumFailedPasswordsForWipe(int)> -> _SOURCE_
<android.media.IMediaRouterService$Stub$Proxy: java.util.List getActiveSessions(android.media.IMediaRouter2Manager)> -> _SOURCE_
<android.net.Uri$StringUri: java.lang.String getEncodedFragment()> -> _SOURCE_
<android.os.UserManager: java.lang.String getUserName()> -> _SOURCE_
<android.text.DynamicLayout: android.util.ArraySet getBlocksAlwaysNeedToBeRedrawn()> -> _SOURCE_
<android.content.res.Resources: android.graphics.drawable.DrawableInflater getDrawableInflater()> -> _SOURCE_
<android.media.tv.TvInputManager: boolean isSingleSessionActive()> -> _SOURCE_
<android.app.Notification: boolean getAllowSystemGeneratedContextualActions()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isNetworkRoaming()> -> _SOURCE_
<android.hardware.cas.V1_0.ICasListener$Proxy: android.internal.hidl.base.V1_0.DebugInfo getDebugInfo()> -> _SOURCE_
<android.hardware.radio.RadioManager$ModuleProperties: java.lang.String getSerial()> -> _SOURCE_
<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaFormat getDefaultFormat()> -> _SOURCE_
<android.telephony.TelephonyManager: int getCallState()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getTraversalBefore()> -> _SOURCE_
<com.android.internal.telephony.ISms$Default: java.util.List getAllMessagesFromIccEfForSubscriber(int,java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.ISms$Default: boolean isSMSPromptEnabled()> -> _SOURCE_
<com.android.internal.telephony.ISub$Stub$Proxy: int getActiveDataSubscriptionId()> -> _SOURCE_
<android.widget.Toolbar: android.graphics.drawable.Drawable getCollapseIcon()> -> _SOURCE_
<android.media.tv.TvInputManager: java.util.List getTvInputList()> -> _SOURCE_
<android.content.pm.ActivityInfo: boolean isFixedOrientationPortrait()> -> _SOURCE_
<android.net.NetworkWatchlistManager: byte[] getWatchlistConfigHash()> -> _SOURCE_
<android.media.MediaCas: android.os.IHwBinder getBinder()> -> _SOURCE_
<android.graphics.drawable.ColorStateListDrawable: android.graphics.drawable.Drawable getCurrent()> -> _SOURCE_
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String getSharedSystemSharedLibraryPackageName()> -> _SOURCE_
<android.content.res.AssetManager: java.lang.CharSequence[] getResourceTextArray(int)> -> _SOURCE_
<com.android.internal.telephony.SmsApplication$SmsApplicationData: java.lang.String access$202(com.android.internal.telephony.SmsApplication$SmsApplicationData,java.lang.String)> -> _SOURCE_
<android.text.TextUtils: java.lang.String getEllipsisString(android.text.TextUtils$TruncateAt)> -> _SOURCE_
<com.android.internal.telecom.ITelecomService$Stub$Proxy: java.lang.String getDefaultDialerPackage()> -> _SOURCE_
<android.view.InputMonitor: android.view.InputChannel getInputChannel()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: int getNetworkSelectionMode(int)> -> _SOURCE_
<android.net.TrafficStats: long getMobileTxPackets()> -> _SOURCE_
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: android.os.Bundle getAppWidgetOptions(java.lang.String,int)> -> _SOURCE_
<android.widget.ProgressBar: java.lang.CharSequence getAccessibilityClassName()> -> _SOURCE_
<android.app.INotificationManager$Stub$Proxy: android.service.notification.StatusBarNotification[] getActiveNotifications(java.lang.String)> -> _SOURCE_
<android.location.GpsMeasurement: double getCarrierPhaseUncertainty()> -> _SOURCE_
<android.hardware.lights.LightsManager: android.hardware.lights.LightState getLightState(android.hardware.lights.Light)> -> _SOURCE_
<android.view.contentcapture.ContentCaptureSession: java.lang.String getStateAsString(int)> -> _SOURCE_
<android.net.TrafficStats: long getLoopbackTxPackets()> -> _SOURCE_
<android.media.VolumeProvider: java.lang.String getVolumeControlId()> -> _SOURCE_
<android.telephony.ServiceState: java.lang.String getVoiceOperatorNumeric()> -> _SOURCE_
<com.android.internal.os.TransferPipe: java.io.OutputStream getNewOutputStream()> -> _SOURCE_
<android.hardware.biometrics.IBiometricServiceReceiverInternal$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.widget.Toast: android.view.View getView()> -> _SOURCE_
<android.hardware.input.KeyboardLayout: java.lang.String getLabel()> -> _SOURCE_
<com.android.internal.compat.IOverrideValidator$Stub: com.android.internal.compat.IOverrideValidator getDefaultImpl()> -> _SOURCE_
<android.view.accessibility.CaptioningManager: java.lang.String getRawLocale()> -> _SOURCE_
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String getAppPredictionServicePackageName()> -> _SOURCE_
<android.media.AudioSystem: java.util.ArrayList getDevicesForAttributes(android.media.AudioAttributes)> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getDeviceSvnUsingSubId(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.telephony.CellIdentityCdma: android.telephony.CellIdentityCdma copy()> -> _SOURCE_
<android.content.pm.ShortcutManager: android.content.Intent createShortcutResultIntent(android.content.pm.ShortcutInfo)> -> _SOURCE_
<android.service.notification.NotificationRankingUpdate: android.service.notification.NotificationListenerService$RankingMap getRankingMap()> -> _SOURCE_
<android.telephony.DataSpecificRegistrationInfo: android.telephony.LteVopsSupportInfo getLteVopsSupportInfo()> -> _SOURCE_
<android.telephony.MbmsDownloadSession: android.content.Context access$700(android.telephony.MbmsDownloadSession)> -> _SOURCE_
<com.android.internal.telephony.ISms$Default: android.os.Bundle getCarrierConfigValuesForSubscriber(int)> -> _SOURCE_
<android.net.INetworkStatsService$Default: java.lang.String[] getMobileIfaces()> -> _SOURCE_
<android.content.res.Resources: android.content.res.Configuration[] getSizeConfigurations()> -> _SOURCE_
<android.hardware.display.DisplayManagerGlobal: android.hardware.display.WifiDisplayStatus getWifiDisplayStatus()> -> _SOURCE_
<android.media.MediaDescription: java.lang.CharSequence getSubtitle()> -> _SOURCE_
<android.view.accessibility.AccessibilityManager: android.os.Handler$Callback getCallback()> -> _SOURCE_
<android.app.ActivityManager$TaskDescription: android.graphics.drawable.Icon getRawIcon()> -> _SOURCE_
<android.os.IncidentManager$IncidentReport: long getTimestamp()> -> _SOURCE_
<android.hardware.camera2.params.MeteringRectangle: android.graphics.Rect getRect()> -> _SOURCE_
<android.content.rollback.IRollbackManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.IActivityTaskManager$Stub: android.app.IActivityTaskManager getDefaultImpl()> -> _SOURCE_
<android.app.Instrumentation: boolean isProfiling()> -> _SOURCE_
<android.location.IGnssMeasurementsListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.media.session.ISessionManager$Stub$Proxy: java.util.List getSessions(android.content.ComponentName,int)> -> _SOURCE_
<com.android.internal.app.ToolbarActionBar: java.lang.CharSequence getTitle()> -> _SOURCE_
<android.app.job.JobInfo: long getIntervalMillis()> -> _SOURCE_
<android.bluetooth.OobData: byte[] getLeSecureConnectionsRandom()> -> _SOURCE_
<android.app.backup.IBackupManager$Stub$Proxy: java.lang.String getDestinationString(java.lang.String)> -> _SOURCE_
<android.graphics.Paint: float getStrokeMiter()> -> _SOURCE_
<android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()> -> _SOURCE_
<android.hardware.location.NanoAppInstanceInfo: java.lang.String getName()> -> _SOURCE_
<android.hardware.location.IContextHubTransactionCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.location.LocationTime: long getTime()> -> _SOURCE_
<android.bluetooth.IBluetoothManager$Default: java.lang.String getAddress()> -> _SOURCE_
<android.content.res.ApkAssets: java.lang.String getAssetPath()> -> _SOURCE_
<com.android.internal.view.menu.MenuPopup: int getId()> -> _SOURCE_
<android.widget.CursorAdapter: long getItemId(int)> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getIsimDomain(int)> -> _SOURCE_
<android.view.animation.Transformation: android.graphics.Rect getClipRect()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.util.List getDelegatedScopes(android.content.ComponentName,java.lang.String)> -> _SOURCE_
<android.net.INetworkStatsService$Stub$Proxy: android.net.NetworkStats getDataLayerSnapshotForUid(int)> -> _SOURCE_
<android.media.MediaFormat: java.util.Set getKeys()> -> _SOURCE_
<android.telephony.ims.stub.ImsSmsImplBase: java.lang.String getSmsFormat()> -> _SOURCE_
<android.os.storage.StorageVolume: java.lang.String getUserLabel()> -> _SOURCE_
<android.net.Ikev2VpnProfile: java.lang.String getPassword()> -> _SOURCE_
<android.app.KeyguardManager: boolean isKeyguardSecure()> -> _SOURCE_
<android.hardware.display.IDisplayManager$Stub$Proxy: android.hardware.display.BrightnessConfiguration getBrightnessConfigurationForUser(int)> -> _SOURCE_
<android.content.LoggingContentInterface: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)> -> _SOURCE_
<android.location.ILocationListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getTypeAllocationCode(int)> -> _SOURCE_
<android.hardware.camera2.CaptureResult: long getFrameNumber()> -> _SOURCE_
<android.content.res.Resources: java.lang.String getLastResourceResolution()> -> _SOURCE_
<com.android.internal.telephony.ISub$Default: boolean canDisablePhysicalSubscription()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.CharSequence getOrganizationName(android.content.ComponentName)> -> _SOURCE_
<android.telephony.TelephonyManager: java.util.Map getEmergencyNumberList(int)> -> _SOURCE_
<android.bluetooth.IBluetoothGatt$Default: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
<android.app.SystemServiceRegistry$StaticApplicationContextServiceFetcher: java.lang.Object getService(android.app.ContextImpl)> -> _SOURCE_
<com.android.internal.os.BatteryStatsHelper: double getTotalPower()> -> _SOURCE_
<android.media.Ringtone: java.lang.String getTitle(android.content.Context,android.net.Uri,boolean,boolean)> -> _SOURCE_
<android.view.contentcapture.ViewNode: android.view.autofill.AutofillId getAutofillId()> -> _SOURCE_
<android.graphics.drawable.BitmapDrawable: android.graphics.ColorFilter getColorFilter()> -> _SOURCE_
<android.telephony.CellIdentityCdma: java.lang.String toString()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.os.IVoldMountCallback$Stub: android.os.IVoldMountCallback getDefaultImpl()> -> _SOURCE_
<android.app.Instrumentation$ActivityMonitor: android.app.Activity getLastActivity()> -> _SOURCE_
<android.telephony.SubscriptionManager: java.util.List getAvailableSubscriptionInfoList()> -> _SOURCE_
<android.net.LocalSocketAddress: java.lang.String getName()> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: java.util.List getActivities()> -> _SOURCE_
<android.os.PowerManager: int getMaximumScreenBrightnessForVrSetting()> -> _SOURCE_
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.Notification$InboxStyle: java.util.ArrayList getLines()> -> _SOURCE_
<android.accessibilityservice.AccessibilityService: android.accessibilityservice.AccessibilityButtonController getAccessibilityButtonController()> -> _SOURCE_
<android.view.IAppTransitionAnimationSpecsFuture$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.os.Debug: int getGlobalExternalAllocSize()> -> _SOURCE_
<android.window.WindowContainerTransaction$Change: android.view.SurfaceControl$Transaction getBoundsChangeTransaction()> -> _SOURCE_
<android.net.NetworkStats: long getTotalBytes()> -> _SOURCE_
<android.app.IWallpaperManagerCallback$Stub: android.app.IWallpaperManagerCallback getDefaultImpl()> -> _SOURCE_
<android.telephony.ServiceState: java.util.List getNetworkRegistrationInfoListForTransportType(int)> -> _SOURCE_
<android.view.SurfaceView$2: android.graphics.Rect getSurfaceFrame()> -> _SOURCE_
<android.telephony.SignalStrength: int getEvdoAsuLevel()> -> _SOURCE_
<android.app.VoiceInteractor$Prompt: java.lang.CharSequence getVisualPrompt()> -> _SOURCE_
<android.app.trust.ITrustListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.timezone.RulesManager: android.app.timezone.RulesState getRulesState()> -> _SOURCE_
<android.telecom.Logging.EventManager$EventRecord: java.util.List getEvents()> -> _SOURCE_
<android.os.IServiceManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.ActivityTaskManager: int getMaxRecentTasksStatic()> -> _SOURCE_
<android.renderscript.Matrix3f: float[] getArray()> -> _SOURCE_
<android.text.AutoGrowArray$ByteArray: byte[] getRawArray()> -> _SOURCE_
<android.content.res.Resources: android.view.DisplayAdjustments getDisplayAdjustments()> -> _SOURCE_
<android.net.Uri$StringUri: java.lang.String getEncodedAuthority()> -> _SOURCE_
<android.content.pm.IPackageManager$Default: android.content.ComponentName getInstantAppResolverComponent()> -> _SOURCE_
<android.app.IUiAutomationConnection$Stub: android.app.IUiAutomationConnection getDefaultImpl()> -> _SOURCE_
<android.telecom.ParcelableCallAnalytics: long getCallDurationMillis()> -> _SOURCE_
<android.net.LocalSocket: java.io.OutputStream getOutputStream()> -> _SOURCE_
<android.hardware.fingerprint.IFingerprintService$Default: java.util.List getEnrolledFingerprints(int,java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: int getLteOnCdmaMode(java.lang.String,java.lang.String)> -> _SOURCE_
<android.telephony.ims.ImsCallProfile: android.os.Bundle getProprietaryCallExtras()> -> _SOURCE_
<android.app.contentsuggestions.IClassificationsCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telephony.SmsCbLocation: int getLac()> -> _SOURCE_
<android.util.Singleton: java.lang.Object get()> -> _SOURCE_
<android.telephony.ClosedSubscriberGroupInfo: java.lang.String toString()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.accessibilityservice.AccessibilityShortcutInfo: java.lang.String getSettingsActivityName()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Timer: long getTotalTimeLocked(long,int)> -> _SOURCE_
<android.util.KeyValueListParser$LongValue: long getValue()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteSession getThreadSession()> -> _SOURCE_
<android.graphics.NinePatch: android.graphics.Paint getPaint()> -> _SOURCE_
<android.hardware.location.IContextHubService$Default: int[] getContextHubHandles()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isRemovingAdmin(android.content.ComponentName,int)> -> _SOURCE_
<android.telephony.SubscriptionInfo: java.lang.String givePrintableIccid(java.lang.String)> -> _SOURCE_
<android.view.accessibility.AccessibilityManager: java.util.List getInstalledAccessibilityServiceList()> -> _SOURCE_
<android.media.MediaTimestamp: long getAnchorSytemNanoTime()> -> _SOURCE_
<android.telephony.TelephonyManager: int getNetworkSelectionMode()> -> _SOURCE_
<android.hardware.SensorManager: boolean isDynamicSensorDiscoverySupported()> -> _SOURCE_
<android.hardware.Camera$Parameters: java.util.List getSupportedColorEffects()> -> _SOURCE_
<android.content.ContentProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)> -> _SOURCE_
<android.telephony.TelephonyManager: boolean getSmsReceiveCapableForPhone(int,boolean)> -> _SOURCE_
<android.util.XmlPullAttributes: java.lang.String getAttributeValue(int)> -> _SOURCE_
<android.content.pm.ShortcutInfo: java.lang.String getDisabledMessageResName()> -> _SOURCE_
<android.os.TelephonyServiceManager: android.os.TelephonyServiceManager$ServiceRegisterer getTelephonyRcsMessageServiceRegisterer()> -> _SOURCE_
<android.view.accessibility.IAccessibilityManagerClient$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.os.UserManager: android.graphics.drawable.Drawable getBadgedIconForUser(android.graphics.drawable.Drawable,android.os.UserHandle)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: android.telephony.ims.aidl.IImsRcsFeature getRcsFeatureAndListen(int,com.android.ims.internal.IImsServiceFeatureCallback)> -> _SOURCE_
<com.android.internal.telephony.SmsApplication: android.content.ComponentName getDefaultMmsApplication(android.content.Context,boolean)> -> _SOURCE_
<android.app.ApplicationLoaders: java.lang.ClassLoader getCachedNonBootclasspathSystemLib(java.lang.String,java.lang.ClassLoader,java.lang.String,java.util.List)> -> _SOURCE_
<android.telephony.ims.aidl.IImsCapabilityCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.util.List retrieveSecurityLogs(android.content.ComponentName)> -> _SOURCE_
<android.media.tv.ITvInputManager$Stub$Proxy: java.util.List getBlockedRatings(int)> -> _SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkCapabilities getNetworkCapabilities(android.net.Network,java.lang.String)> -> _SOURCE_
<android.view.textclassifier.TextLinks: java.util.Collection getLinks()> -> _SOURCE_
<android.telephony.UiccAccessRule: int describeContents()> -> _SOURCE_
<android.graphics.drawable.RippleDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()> -> _SOURCE_
<android.media.session.MediaController: android.os.Bundle getExtras()> -> _SOURCE_
<android.media.IMediaRouterService$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.bluetooth.IBluetoothHeadsetClient$Stub$Proxy: java.util.List getCurrentCalls(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<android.app.Activity: android.transition.TransitionManager getContentTransitionManager()> -> _SOURCE_
<android.nfc.tech.NfcB: byte[] getProtocolInfo()> -> _SOURCE_
<android.hardware.camera2.CameraMetadata: long getNativeMetadataPtr()> -> _SOURCE_
<android.hardware.display.IDisplayManager$Stub$Proxy: android.view.DisplayInfo getDisplayInfo(int)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: int getDeviceOwnerUserId()> -> _SOURCE_
<android.view.textclassifier.TextClassification$Request: java.lang.String getCallingPackageName()> -> _SOURCE_
<com.android.internal.telephony.euicc.IGetAllProfilesCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.nfc.TransceiveResult: byte[] getResponseOrThrow()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isMasterVolumeMuted(android.content.ComponentName)> -> _SOURCE_
<android.telephony.BarringInfo$BarringServiceInfo: boolean isConditionallyBarred()> -> _SOURCE_
<android.widget.PopupWindow: android.transition.Transition getExitTransition()> -> _SOURCE_
<android.telephony.SubscriptionManager: int[] getSubscriptionIds(int)> -> _SOURCE_
<android.os.BatterySaverPolicyConfig: float getAdjustBrightnessFactor()> -> _SOURCE_
<android.media.AudioManager: int getStreamVolume(int)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<com.android.internal.telephony.ITelephonyRegistry$Stub: java.lang.String getTransactionName(int)> -> _SOURCE_
<android.telephony.SmsMessage: boolean isReplyPathPresent()> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: java.lang.String getPermission()> -> _SOURCE_
<android.bluetooth.IBluetoothHeadsetClient$Default: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
<android.app.SystemServiceRegistry$CachedServiceFetcher: java.lang.Object getService(android.app.ContextImpl)> -> _SOURCE_
<android.hardware.radio.ProgramList$Filter: java.util.Set getIdentifiers()> -> _SOURCE_
<android.media.IPlayer$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.media.tv.ITvInputManager$Stub$Proxy: android.media.tv.TvInputInfo getTvInputInfo(java.lang.String,int)> -> _SOURCE_
<android.view.WindowInsetsAnimation: float getInterpolatedFraction()> -> _SOURCE_
<android.telephony.TelephonyManager$MultiSimVariants: android.telephony.TelephonyManager$MultiSimVariants valueOf(java.lang.String)> -> _SOURCE_
<android.accessibilityservice.IAccessibilityServiceClient$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: byte[] getRestrictUpdateHash()> -> _SOURCE_
<android.telephony.TelephonyManager: com.android.internal.telephony.ISub getSubscriptionService()> -> _SOURCE_
<android.os.Environment: java.io.File getOdmDirectory()> -> _SOURCE_
<android.bluetooth.IBluetoothHearingAid$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.provider.Settings$Secure: long getLong(android.content.ContentResolver,java.lang.String,long)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: android.content.ComponentName getProfileOwner()> -> _SOURCE_
<android.graphics.drawable.VectorDrawable$VFullPath: long getNativePtr()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.content.pm.ModuleInfo: java.lang.String getPackageName()> -> _SOURCE_
<android.media.tv.TvInputManager$Session: android.media.tv.TvTrackInfo getVideoTrackToNotify()> -> _SOURCE_
<android.security.keystore.recovery.WrappedApplicationKey: byte[] getEncryptedKeyMaterial()> -> _SOURCE_
<android.accessibilityservice.AccessibilityService: android.accessibilityservice.FingerprintGestureController getFingerprintGestureController()> -> _SOURCE_
<android.media.AudioManager: int getLastAudibleStreamVolume(int)> -> _SOURCE_
<android.security.net.config.ApplicationConfig: android.security.net.config.ApplicationConfig getDefaultInstance()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getSimCountryIsoForPhone(int)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.media.audiopolicy.IAudioPolicyCallback$Stub: android.media.audiopolicy.IAudioPolicyCallback getDefaultImpl()> -> _SOURCE_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: android.os.IBinder asBinder()> -> _SOURCE_
<android.os.DeviceIdleManager: java.lang.String[] getSystemPowerWhitelistExceptIdle()> -> _SOURCE_
<android.view.accessibility.CaptioningManager: int getRawUserStyle()> -> _SOURCE_
<android.webkit.CookieSyncManager: android.webkit.CookieSyncManager getInstance()> -> _SOURCE_
<android.app.VrManager: boolean isPersistentVrModeEnabled()> -> _SOURCE_
<android.hardware.radio.RadioManager$ProgramInfo: android.hardware.radio.RadioMetadata getMetadata()> -> _SOURCE_
<android.telephony.SmsManager: java.lang.String createAppSpecificSmsToken(android.app.PendingIntent)> -> _SOURCE_
<android.content.pm.PackageManager: java.lang.CharSequence getBackgroundPermissionOptionLabel()> -> _SOURCE_
<android.bluetooth.BluetoothHidHost: java.util.List getConnectedDevices()> -> _SOURCE_
<android.net.netstats.provider.INetworkStatsProvider$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.internal.policy.PhoneWindow: android.view.View getStatusBarBackgroundView()> -> _SOURCE_
<android.content.IContentService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.bluetooth.le.IAdvertisingSetCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.view.contentcapture.ContentCaptureEvent: android.view.contentcapture.ContentCaptureContext getContentCaptureContext()> -> _SOURCE_
<android.net.INetworkStatsSession$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.widget.PopupWindow: android.transition.Transition getEnterTransition()> -> _SOURCE_
<android.database.CursorWrapper: short getShort(int)> -> _SOURCE_
<android.media.session.MediaController$PlaybackInfo: java.lang.String getVolumeControlId()> -> _SOURCE_
<android.media.AudioManager: java.util.Map getSurroundFormats()> -> _SOURCE_
<android.telephony.CallAttributes: int getNetworkType()> -> _SOURCE_
<android.view.WindowInsets: android.graphics.Insets getSystemWindowInsets()> -> _SOURCE_
<android.app.Notification$CarExtender$UnreadConversation: android.os.Bundle getBundleForUnreadConversation()> -> _SOURCE_
<android.hardware.display.ColorDisplayManager: int getNightDisplayAutoMode()> -> _SOURCE_
<android.app.WallpaperManager: boolean isWallpaperSupported()> -> _SOURCE_
<android.os.UserManager: android.os.PersistableBundle getSeedAccountOptions()> -> _SOURCE_
<android.view.ViewConfiguration: long getZoomControlsTimeout()> -> _SOURCE_
<android.bluetooth.BluetoothManager: java.util.List getDevicesMatchingConnectionStates(int,int[])> -> _SOURCE_
<android.hardware.fingerprint.FingerprintManager: java.lang.String getErrorString(android.content.Context,int,int)> -> _SOURCE_
<android.text.Layout: float getLineLeft(int)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String[] getIsimPcscf()> -> _SOURCE_
<android.telephony.euicc.EuiccManager: int getOtaStatus()> -> _SOURCE_
<android.app.IWallpaperManager$Stub$Proxy: android.app.WallpaperInfo getWallpaperInfo(int)> -> _SOURCE_
<android.app.slice.Slice: java.util.List getItems()> -> _SOURCE_
<com.android.internal.policy.DecorContext: android.content.ContentCaptureOptions getContentCaptureOptions()> -> _SOURCE_
<android.os.Debug: int getGlobalExternalFreedSize()> -> _SOURCE_
<android.app.slice.SliceItem: java.lang.String getFormat()> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub: com.android.internal.telephony.IPhoneSubInfo getDefaultImpl()> -> _SOURCE_
<android.telephony.VoiceSpecificRegistrationInfo: int describeContents()> -> _SOURCE_
<android.app.usage.UsageStats: long getLastTimeForegroundServiceUsed()> -> _SOURCE_
<android.telephony.SubscriptionInfo: android.os.ParcelUuid getGroupUuid()> -> _SOURCE_
<android.text.style.TextAppearanceSpan: float getShadowDy()> -> _SOURCE_
<android.bluetooth.IBluetoothGattCallback$Stub: android.bluetooth.IBluetoothGattCallback getDefaultImpl()> -> _SOURCE_
<android.content.pm.PackageInstaller$SessionInfo: boolean getAllocateAggressive()> -> _SOURCE_
<android.webkit.WebResourceResponse: int getStatusCode()> -> _SOURCE_
<android.media.AudioPlaybackConfiguration$IPlayerShell: android.media.IPlayer getIPlayer()> -> _SOURCE_
<android.view.contentcapture.ViewNode: java.lang.String getClassName()> -> _SOURCE_
<android.content.ContextWrapper: boolean isCredentialProtectedStorage()> -> _SOURCE_
<android.view.ISystemGestureExclusionListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.ActivityManager: boolean isInLockTaskMode()> -> _SOURCE_
<android.view.autofill.AutofillManager: boolean isAutofillUiShowing()> -> _SOURCE_
<android.net.IEthernetManager$Stub: android.net.IEthernetManager getDefaultImpl()> -> _SOURCE_
<android.window.IWindowOrganizerController$Stub$Proxy: android.window.ITaskOrganizerController getTaskOrganizerController()> -> _SOURCE_
<android.net.wifi.nl80211.NativeScanResult: android.net.MacAddress getBssid()> -> _SOURCE_
<android.content.pm.IPackageManager$Default: java.util.List getAllPackages()> -> _SOURCE_
<android.hardware.radio.ITunerCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.IActivityTaskManager$Stub$Proxy: android.app.ActivityManager$TaskSnapshot getTaskSnapshot(int,boolean)> -> _SOURCE_
<android.view.textclassifier.TextSelection$Request: android.view.textclassifier.SystemTextClassifierMetadata getSystemTextClassifierMetadata()> -> _SOURCE_
<android.view.accessibility.AccessibilityManager: boolean isAccessibilityVolumeStreamActive()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: android.os.BatteryStats$Timer getMulticastWakelockStats()> -> _SOURCE_
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: java.util.List getReqFeatures()> -> _SOURCE_
<android.app.Activity: android.transition.Scene getContentScene()> -> _SOURCE_
<android.app.admin.FactoryResetProtectionPolicy: java.util.List getFactoryResetProtectionAccounts()> -> _SOURCE_
<android.content.pm.InstallSourceInfo: android.content.pm.SigningInfo getInitiatingPackageSigningInfo()> -> _SOURCE_
<android.net.Ikev2VpnProfile: byte[] getPresharedKey()> -> _SOURCE_
<android.telephony.data.ApnSetting: android.net.Uri getMmsc()> -> _SOURCE_
<android.os.connectivity.WifiActivityEnergyInfo: long getTimeSinceBootMillis()> -> _SOURCE_
<android.hardware.input.IInputManager$Stub$Proxy: int[] getInputDeviceIds()> -> _SOURCE_
<android.media.tv.TvTrackInfo: byte getVideoActiveFormatDescription()> -> _SOURCE_
<android.security.net.config.ManifestConfigSource$DefaultConfigSource: android.security.net.config.NetworkSecurityConfig getDefaultConfig()> -> _SOURCE_
<android.content.pm.InstantAppResolveInfo$InstantAppDigest: int[] getDigestPrefixSecure()> -> _SOURCE_
<android.media.AudioManager: boolean isBluetoothScoOn()> -> _SOURCE_
<android.telephony.SubscriptionInfo: int getSimSlotIndex()> -> _SOURCE_
<android.bluetooth.BluetoothHeadset: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
<android.app.admin.DevicePolicyManager: int getPasswordMinimumLength(android.content.ComponentName,int)> -> _SOURCE_
<android.animation.AnimatorSet: java.util.ArrayList getChildAnimations()> -> _SOURCE_
<android.telephony.mbms.IDownloadStatusListener$Stub: android.telephony.mbms.IDownloadStatusListener getDefaultImpl()> -> _SOURCE_
<android.webkit.CookieManager: android.webkit.CookieManager getInstance()> -> _SOURCE_
<android.telephony.CellSignalStrengthCdma: boolean isValid()> -> _SOURCE_
<android.location.GnssMeasurement: double getSnrInDb()> -> _SOURCE_
<android.bluetooth.BluetoothPan: java.util.List getConnectedDevices()> -> _SOURCE_
<android.app.AsyncNotedAppOp: java.lang.String getOp()> -> _SOURCE_
<android.database.ContentObserver: android.database.IContentObserver getContentObserver()> -> _SOURCE_
<android.media.AudioManager: android.media.AudioDeviceInfo[] getDevicesStatic(int)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getSimOperator()> -> _SOURCE_
<android.util.EventLog$Event: java.lang.Exception getLastError()> -> _SOURCE_
<android.telecom.ParcelableCallAnalytics: java.lang.String getConnectionService()> -> _SOURCE_
<android.view.CutoutSpecification: android.graphics.Path getPath()> -> _SOURCE_
<android.telephony.SubscriptionManager$IntegerPropertyInvalidatedCache: java.lang.Object recompute(java.lang.Integer)> -> _SOURCE_
<android.telephony.CellInfo: int describeContents()> -> _SOURCE_
<android.view.textservice.TextServicesManager: android.view.textservice.TextServicesManager getInstance()> -> _SOURCE_
<android.animation.ValueAnimator: float getDurationScale()> -> _SOURCE_
<com.android.internal.telephony.ISms$Default: android.os.IBinder asBinder()> -> _SOURCE_
<android.hardware.display.VirtualDisplay: android.view.Surface getSurface()> -> _SOURCE_
<android.telephony.MbmsDownloadSession: java.lang.String access$300()> -> _SOURCE_
<android.telephony.CellIdentityTdscdma: java.lang.String getMccString()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.app.contentsuggestions.ContentClassification: android.os.Bundle getExtras()> -> _SOURCE_
<android.printservice.PrintServiceInfo: java.lang.String getAdvancedOptionsActivityName()> -> _SOURCE_
<com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.view.textclassifier.SystemTextClassifierMetadata: java.lang.String getCallingPackageName()> -> _SOURCE_
<android.graphics.text.LineBreaker$ParagraphConstraints: float getDefaultTabStop()> -> _SOURCE_
<android.telephony.TelephonyHistogram: int[] getBucketCounters()> -> _SOURCE_
<android.app.Notification$Action$WearableExtender: java.lang.CharSequence getInProgressLabel()> -> _SOURCE_
<com.android.internal.view.menu.MenuItemImpl: java.lang.String getShortcutLabel()> -> _SOURCE_
<android.view.ViewGroup$1: java.lang.CharSequence getSubtitle()> -> _SOURCE_
<android.net.TrafficStats: long getLoopbackRxPackets()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: java.lang.String getImeiForSlot(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.security.net.config.NetworkSecurityConfig: android.security.net.config.NetworkSecurityTrustManager getTrustManager()> -> _SOURCE_
<android.hardware.location.ContextHubInfo: int[] getSupportedSensors()> -> _SOURCE_
<android.app.AppOpsManager: java.lang.String[] getOpStrs()> -> _SOURCE_
<android.graphics.fonts.Font: java.io.File getFile()> -> _SOURCE_
<com.android.internal.app.WindowDecorActionBar: float getElevation()> -> _SOURCE_
<android.app.INotificationManager$Stub$Proxy: android.app.NotificationManager$Policy getConsolidatedNotificationPolicy()> -> _SOURCE_
<android.app.job.JobInfo: long getInitialBackoffMillis()> -> _SOURCE_
<android.content.pm.IDataLoaderStatusListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.media.session.ISessionController$Default: android.content.pm.ParceledListSlice getQueue()> -> _SOURCE_
<com.android.internal.telephony.IOnSubscriptionsChangedListener$Stub: com.android.internal.telephony.IOnSubscriptionsChangedListener asInterface(android.os.IBinder)> -> _SOURCE_
<android.content.pm.PackageManager: void getPackageSizeInfo(java.lang.String,android.content.pm.IPackageStatsObserver)> -> _SOURCE_
<android.view.InsetsController$InternalAnimationControlListener: long getDurationMs()> -> _SOURCE_
<android.hardware.hdmi.HdmiDeviceInfo: java.lang.String getDisplayName()> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getIccSimChallengeResponse(int,int,int,java.lang.String)> -> _SOURCE_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: java.util.List getEnabledInputMethodList(int)> -> _SOURCE_
<android.hardware.location.IContextHubService$Stub$Proxy: int[] getContextHubHandles()> -> _SOURCE_
<android.telephony.CellInfoLte: android.telephony.CellInfoLte createFromParcelBody(android.os.Parcel)> -> _SOURCE_
<com.android.internal.telephony.IIntegerConsumer$Stub: java.lang.String getTransactionName(int)> -> _SOURCE_
<android.app.ActivityOptions: android.os.ResultReceiver getResultReceiver()> -> _SOURCE_
<android.app.Activity: android.view.WindowManager getWindowManager()> -> _SOURCE_
<android.telephony.CellInfo: android.telephony.CellInfo create(android.hardware.radio.V1_0.CellInfo)> -> _SOURCE_
<android.app.AppOpsManager: java.lang.String access$200()> -> _SOURCE_
<android.os.connectivity.CellularBatteryStats: long getNumBytesRx()> -> _SOURCE_
<com.android.internal.widget.ActionBarContainer: android.view.View getTabContainer()> -> _SOURCE_
<android.view.ViewConfiguration: int getDoubleTapTimeout()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: android.telephony.CellIdentity getCellLocation(java.lang.String,java.lang.String)> -> _SOURCE_
<android.transition.Transition: android.animation.TimeInterpolator getInterpolator()> -> _SOURCE_
<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewFpsRange()> -> _SOURCE_
<com.android.internal.telephony.ICarrierConfigLoader$Default: android.os.PersistableBundle getConfigForSubId(int,java.lang.String)> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getPaneTitle()> -> _SOURCE_
<com.android.internal.app.IAppOpsStartedCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.String getWifiMacAddress(android.content.ComponentName)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean isAdvancedCallingSettingEnabled(int)> -> _SOURCE_
<android.media.SubtitleData: long getDurationUs()> -> _SOURCE_
<android.app.DisabledWallpaperManager: android.graphics.drawable.Drawable getBuiltInDrawable()> -> _SOURCE_
<android.provider.FontRequest: java.lang.String getQuery()> -> _SOURCE_
<android.location.Address: java.lang.String getSubAdminArea()> -> _SOURCE_
<android.telephony.NetworkRegistrationInfo: android.telephony.CellIdentity getCellIdentity()> -> _SOURCE_
<android.app.contentsuggestions.ISelectionsCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.widget.RemoteViews$Action: java.lang.String getUniqueKey()> -> _SOURCE_
<android.telephony.PreciseDataConnectionState: java.lang.String toString()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<com.android.internal.widget.ILockSettings$Default: android.security.keystore.recovery.KeyChainSnapshot getKeyChainSnapshot()> -> _SOURCE_
<android.os.IVoldMountCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.net.IEthernetManager$Stub$Proxy: android.net.IpConfiguration getConfiguration(java.lang.String)> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec: java.lang.String[] getEncryptionPaddings()> -> _SOURCE_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.webkit.WebView: android.content.pm.PackageInfo getCurrentWebViewPackage()> -> _SOURCE_
<android.content.pm.ShortcutInfo: java.lang.String getResourceEntryName(java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Default: java.lang.String getDeviceId(java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.SmsApplication$SmsApplicationData: boolean isComplete()> -> _SOURCE_
<android.bluetooth.IBluetooth$Stub$Proxy: java.lang.String getRemoteAlias(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)> -> _SOURCE_
<android.os.connectivity.WifiBatteryStats: long getNumBytesRx()> -> _SOURCE_
<android.app.WallpaperManager: boolean isSetWallpaperAllowed()> -> _SOURCE_
<android.hardware.cas.V1_1.ICasListener$Stub: android.internal.hidl.base.V1_0.DebugInfo getDebugInfo()> -> _SOURCE_
<android.location.GpsMeasurement: long getReceivedGpsTowUncertaintyInNs()> -> _SOURCE_
<android.bluetooth.IBluetoothCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.os.KernelMemoryBandwidthStats: android.util.LongSparseLongArray getBandwidthEntries()> -> _SOURCE_
<android.telephony.ClosedSubscriberGroupInfo: int hashCode()> -> _SOURCE_
<android.telephony.NetworkRegistrationInfo: java.lang.String domainToString(int)> -> _SOURCE_
<android.view.inputmethod.CursorAnchorInfo: float getInsertionMarkerBaseline()> -> _SOURCE_
<com.android.internal.view.IInputSessionCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.view.accessibility.AccessibilityManager: java.util.List getEnabledAccessibilityServiceList(int)> -> _SOURCE_
<android.util.jar.StrictJarManifest: java.util.jar.Attributes getMainAttributes()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int[] supplyPukReportResultForSubscriber(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isDeviceOwnerAppOnAnyUser(java.lang.String)> -> _SOURCE_
<com.android.server.SystemConfig: android.util.ArraySet getBugreportWhitelistedPackages()> -> _SOURCE_
<android.telephony.CbGeoUtils$Polygon: java.util.List getVertices()> -> _SOURCE_
<android.bluetooth.BluetoothAvrcpController: android.bluetooth.BluetoothAvrcpPlayerSettings getPlayerSettings(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: android.view.inputmethod.InputMethodSubtype getLastInputMethodSubtype()> -> _SOURCE_
<android.telephony.ims.ImsCallProfile: java.util.List getEmergencyUrns()> -> _SOURCE_
<android.telephony.CellIdentityGsm: int getBsic()> -> _SOURCE_
<com.android.internal.telephony.ISub$Default: int getActiveDataSubscriptionId()> -> _SOURCE_
<android.hardware.hdmi.IHdmiRecordListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.Activity: android.app.ActivityOptions getActivityOptions()> -> _SOURCE_
<com.android.internal.policy.IShortcutService$Stub: com.android.internal.policy.IShortcutService getDefaultImpl()> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: android.bluetooth.le.PeriodicAdvertisingManager getPeriodicAdvertisingManager()> -> _SOURCE_
<android.os.IIncidentCompanion$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.telecom.ITelecomService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: android.net.Uri getVoicemailRingtoneUri(android.telecom.PhoneAccountHandle)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean isApplicationOnUicc(int,int)> -> _SOURCE_
<android.app.IAssistDataReceiver$Stub: android.app.IAssistDataReceiver getDefaultImpl()> -> _SOURCE_
<android.media.AudioTrack: android.media.AudioDeviceInfo getPreferredDevice()> -> _SOURCE_
<android.metrics.LogMaker: java.lang.String getCounterName()> -> _SOURCE_
<android.telephony.TelephonyManager: int getSimSpecificCarrierId()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: int getVoWiFiRoamingModeSetting(int)> -> _SOURCE_
<android.view.autofill.AutofillValue: boolean getToggleValue()> -> _SOURCE_
<android.text.style.LocaleSpan: android.os.LocaleList getLocales()> -> _SOURCE_
<android.app.role.IRoleManager$Default: java.util.List getHeldRolesFromController(java.lang.String)> -> _SOURCE_
<android.hardware.cas.V1_1.ICas$Proxy: android.internal.hidl.base.V1_0.DebugInfo getDebugInfo()> -> _SOURCE_
<android.telephony.mbms.IDownloadProgressListener$Stub: android.telephony.mbms.IDownloadProgressListener getDefaultImpl()> -> _SOURCE_
<android.net.Uri: android.net.Uri getCanonicalUri()> -> _SOURCE_
<android.telephony.IccOpenLogicalChannelResponse: int describeContents()> -> _SOURCE_
<android.nfc.INfcAdapter$Default: android.nfc.INfcCardEmulation getNfcCardEmulationInterface()> -> _SOURCE_
<android.app.assist.AssistStructure$ViewNode: java.lang.String getIdEntry()> -> _SOURCE_
<android.view.autofill.IAugmentedAutofillManagerClient$Stub$Proxy: android.graphics.Rect getViewCoordinates(android.view.autofill.AutofillId)> -> _SOURCE_
<android.telephony.TelephonyManager: boolean enableModemForSlot(int,boolean)> -> _SOURCE_
<android.app.DownloadManager: java.lang.Long getMaxBytesOverMobile(android.content.Context)> -> _SOURCE_
<android.telephony.CellSignalStrengthCdma: int getEvdoAsuLevel()> -> _SOURCE_
<android.telephony.CarrierConfigManager: android.os.PersistableBundle getConfigForSubId(int)> -> _SOURCE_
<android.media.projection.IMediaProjection$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.media.IVolumeController$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.Notification$Builder: android.app.Notification$Style getStyle()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long getNextMaxDailyDeadline()> -> _SOURCE_
<android.app.SearchableInfo$ActionKeyInfo: java.lang.String getQueryActionMsg()> -> _SOURCE_
<com.android.internal.telephony.SmsMessageBase: java.lang.String getMessageBody()> -> _SOURCE_
<android.app.usage.NetworkStats$Bucket: long getRxPackets()> -> _SOURCE_
<com.android.internal.telephony.ISms$Stub$Proxy: int getPreferredSmsSubscription()> -> _SOURCE_
<android.telephony.CellSignalStrengthTdscdma: int getLevel()> -> _SOURCE_
<android.security.net.config.PinSet: java.util.Set getPinAlgorithms()> -> _SOURCE_
<android.content.pm.dex.ISnapshotRuntimeProfileCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.widget.Scroller: float getCurrVelocity()> -> _SOURCE_
<com.android.internal.telephony.PhoneConstants$State: com.android.internal.telephony.PhoneConstants$State[] values()> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: boolean isLe2MPhySupported()> -> _SOURCE_
<android.content.integrity.IAppIntegrityManager$Stub$Proxy: java.util.List getWhitelistedRuleProviders()> -> _SOURCE_
<android.app.NotificationManager: android.content.ComponentName getEffectsSuppressor()> -> _SOURCE_
<com.android.internal.app.IAppOpsService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.os.IUserManager$Default: java.lang.String getSeedAccountType()> -> _SOURCE_
<com.android.internal.view.menu.MenuBuilder: android.graphics.drawable.Drawable getHeaderIcon()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getEsn()> -> _SOURCE_
<android.renderscript.Sampler: float getAnisotropy()> -> _SOURCE_
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.graphics.drawable.GradientDrawable: android.content.res.ColorStateList getColor()> -> _SOURCE_
<android.app.ResourcesManager: android.content.res.Resources getResources(android.os.IBinder,java.lang.String,java.lang.String[],java.lang.String[],java.lang.String[],int,android.content.res.Configuration,android.content.res.CompatibilityInfo,java.lang.ClassLoader,java.util.List)> -> _SOURCE_
<android.hardware.SerialManager: java.lang.String[] getSerialPorts()> -> _SOURCE_
<android.telephony.ServiceState: boolean isGsm(int)> -> _SOURCE_
<android.permission.PermissionControllerManager: java.util.concurrent.CompletableFuture lambda$countPermissionApps$17(java.util.List,int,android.permission.IPermissionController)> -> _SOURCE_
<android.location.ILocationManager$Stub$Proxy: android.location.LocationTime getGnssTimeMillis()> -> _SOURCE_
<android.telephony.SubscriptionInfo: boolean isGroupDisabled()> -> _SOURCE_
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: java.util.Set getHighSpeedVideoFpsRanges()> -> _SOURCE_
<android.bluetooth.IBluetoothMap$Default: java.util.List getConnectedDevices()> -> _SOURCE_
<android.media.MediaMetadataEditor: int[] getEditableKeys()> -> _SOURCE_
<android.app.usage.StorageStatsManager: long getCacheBytes(java.lang.String)> -> _SOURCE_
<android.hardware.display.DeviceProductInfo$ManufactureDate: java.lang.Integer getWeek()> -> _SOURCE_
<android.app.backup.IBackupCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.widget.ExpandableListConnector: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SOURCE_
<android.content.pm.ShortcutQueryWrapper: java.util.List getLocusIds()> -> _SOURCE_
<android.view.Window: long getTransitionBackgroundFadeDuration()> -> _SOURCE_
<android.content.Context: java.lang.String getFeatureId()> -> _SOURCE_
<android.view.MotionEvent: float getOrientation()> -> _SOURCE_
<android.content.rollback.IRollbackManager$Stub$Proxy: android.content.pm.ParceledListSlice getAvailableRollbacks()> -> _SOURCE_
<android.app.ActivityOptions: android.graphics.Rect getLaunchBounds()> -> _SOURCE_
<com.android.internal.graphics.palette.Target: float getLightnessWeight()> -> _SOURCE_
<android.content.ContextWrapper: android.content.Context getApplicationContext()> -> _SOURCE_
<android.os.FileBridge: java.io.FileDescriptor getClientSocket()> -> _SOURCE_
<android.app.job.IJobScheduler$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodSubtype getLastInputMethodSubtype()> -> _SOURCE_
<android.hardware.usb.UsbDeviceConnection: android.content.Context getContext()> -> _SOURCE_
<android.telephony.CellInfoTdscdma$1: android.telephony.CellInfoTdscdma createFromParcel(android.os.Parcel)> -> _SOURCE_
<android.os.UserManager: android.os.Bundle getUserRestrictions()> -> _SOURCE_
<android.hardware.display.DisplayManager: boolean isMinimalPostProcessingRequested(int)> -> _SOURCE_
<android.debug.IAdbManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.CellIdentityGsm: android.telephony.CellIdentityGsm copy()> -> _SOURCE_
<android.app.IUiAutomationConnection$Default: android.view.WindowAnimationFrameStats getWindowAnimationFrameStats()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: java.lang.String getDeviceIdWithFeature(java.lang.String,java.lang.String)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getIccAuthentication(int,int,int,java.lang.String)> -> _SOURCE_
<android.os.connectivity.CellularBatteryStats: long getEnergyConsumedMaMillis()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: int getCdmaEriIconIndexForSubscriber(int,java.lang.String,java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.ISub$Stub$Proxy: android.telephony.SubscriptionInfo getActiveSubscriptionInfo(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.content.ContentProvider: android.app.AppOpsManager getAppOpsManager()> -> _SOURCE_
<android.content.BroadcastReceiver$PendingResult: java.lang.String getResultData()> -> _SOURCE_
<android.os._$$Lambda$Binder$aNRcHb8WfLrWjcSlV42Wu5psFwU: java.lang.Object get()> -> _SOURCE_
<android.os.storage.StorageManager: boolean isUserKeyUnlocked(int)> -> _SOURCE_
<android.webkit.IWebViewUpdateService$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.Application: android.view.autofill.AutofillManager$AutofillClient getAutofillClient()> -> _SOURCE_
<android.telephony.TelephonyHistogram: int getSampleCount()> -> _SOURCE_
<com.android.internal.telephony.INumberVerificationCallback$Stub$Proxy: android.os.IBinder asBinder()> -> _SOURCE_
<android.media.soundtrigger_middleware.ISoundTriggerMiddlewareService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.nfc.INfcDta$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.blob.BlobHandle: java.lang.CharSequence getLabel()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean isRadioOnForSubscriberWithFeature(int,java.lang.String,java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getDataNetworkTypeForSubscriber(int,java.lang.String,java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getCdmaRoamingMode(int)> -> _SOURCE_
<android.text.method.SingleLineTransformationMethod: android.text.method.SingleLineTransformationMethod getInstance()> -> _SOURCE_
<android.os.IncidentManager: java.util.List getPendingReports()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: android.os.PersistableBundle getTransferOwnershipBundle()> -> _SOURCE_
<com.android.internal.util.StatLogger: long getTime()> -> _SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: byte[] getNetworkWatchlistConfigHash()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.lang.String getIncidentReportApproverPackageName()> -> _SOURCE_
<android.database.CursorToBulkCursorAdaptor: android.database.CursorWindow getWindow(int)> -> _SOURCE_
<android.service.notification.IConditionProvider$Stub: android.service.notification.IConditionProvider getDefaultImpl()> -> _SOURCE_
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.bluetooth.le.ScanRecord: byte[] getServiceData(android.os.ParcelUuid)> -> _SOURCE_
<android.net.ConnectivityManager: android.net.ConnectivityManager getInstanceOrNull()> -> _SOURCE_
<android.view.InsetsAnimationControlImpl: android.view.WindowInsetsAnimation getAnimation()> -> _SOURCE_
<android.net.Uri$OpaqueUri: java.lang.String getQuery()> -> _SOURCE_
<com.android.internal.app.IBatteryStats$Default: android.os.connectivity.WifiBatteryStats getWifiBatteryStats()> -> _SOURCE_
<android.content.ContextWrapper: java.lang.String getPackageResourcePath()> -> _SOURCE_
<android.app.usage.IStorageStatsManager$Stub: android.app.usage.IStorageStatsManager getDefaultImpl()> -> _SOURCE_
<android.permission.PermissionControllerManager: java.util.concurrent.CompletableFuture lambda$getAppPermissions$13(java.lang.String,android.permission.IPermissionController)> -> _SOURCE_
<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getDefaultActivityIcon()> -> _SOURCE_
<android.webkit.WebView: java.lang.ClassLoader getWebViewClassLoader()> -> _SOURCE_
<android.content.ContentResolver$MimeTypeInfo: java.lang.CharSequence getLabel()> -> _SOURCE_
<android.content.pm.parsing.component.ParsedActivity: java.lang.String getRequestedVrComponent()> -> _SOURCE_
<android.media.tv.tunerresourcemanager.ResourceClientProfile: java.lang.String getTvInputSessionId()> -> _SOURCE_
<android.telephony.CdmaEriInformation: int describeContents()> -> _SOURCE_
<android.content.pm.UserInfo: boolean isGuest()> -> _SOURCE_
<com.android.internal.telephony.ISetOpportunisticDataCallback$Stub: com.android.internal.telephony.ISetOpportunisticDataCallback getDefaultImpl()> -> _SOURCE_
<android.view.contentcapture.ContentCaptureSession: java.lang.String getFlushReasonAsString(int)> -> _SOURCE_
<android.app.timedetector.ManualTimeSuggestion: java.util.List getDebugInfo()> -> _SOURCE_
<android.telephony.VisualVoicemailSmsFilterSettings: int describeContents()> -> _SOURCE_
<android.app.backup.IBackupCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.accessibilityservice.IAccessibilityServiceConnection$Default: java.util.List getSystemActions()> -> _SOURCE_
<android.telephony.CellSignalStrengthNr: int describeContents()> -> _SOURCE_
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String getSystemTextClassifierPackageName()> -> _SOURCE_
<android.permission.IPermissionManager$Stub: android.permission.IPermissionManager getDefaultImpl()> -> _SOURCE_
<android.media.MediaCodecInfo: java.lang.String getCanonicalName()> -> _SOURCE_
<android.view.textclassifier.ConversationAction: android.app.RemoteAction getAction()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isDataConnectivityPossible()> -> _SOURCE_
<android.location.Address: java.lang.String getCountryCode()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<com.android.internal.telephony.IMms$Default: android.net.Uri importMultimediaMessage(java.lang.String,android.net.Uri,java.lang.String,long,boolean,boolean)> -> _SOURCE_
<android.content.IOnPrimaryClipChangedListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.net.nsd.INsdManager$Stub: android.net.nsd.INsdManager getDefaultImpl()> -> _SOURCE_
<android.telephony.SignalStrength: int getLteRssnr()> -> _SOURCE_
<android.content.IClipboard$Stub$Proxy: android.content.ClipDescription getPrimaryClipDescription(java.lang.String,int)> -> _SOURCE_
<android.app.ApplicationPackageManager: java.util.List getPackagesHoldingPermissions(java.lang.String[],int)> -> _SOURCE_
<android.telephony.ModemInfo: int hashCode()> -> _SOURCE_
<com.android.internal.telephony.ISub$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.os.IIncidentManager$Stub: android.os.IIncidentManager getDefaultImpl()> -> _SOURCE_
<android.media.IRingtonePlayer$Default: java.lang.String getTitle(android.net.Uri)> -> _SOURCE_
<android.telephony.TelephonyManager: int getSimCardState()> -> _SOURCE_
<android.telephony.emergency.EmergencyNumber: java.util.List getEmergencyUrns()> -> _SOURCE_
<com.android.internal.telephony.IMms$Default: boolean getAutoPersisting()> -> _SOURCE_
<android.os.connectivity.WifiBatteryStats: long getNumBytesTx()> -> _SOURCE_
<android.net.ConnectivityManager: java.lang.String getNetworkTypeName(int)> -> _SOURCE_
<com.android.internal.telephony.gsm.SmsMessage: com.android.internal.telephony.gsm.SmsMessage$SubmitPdu getDeliverPdu(java.lang.String,java.lang.String,java.lang.String,long)> -> _SOURCE_
<android.internal.hidl.base.V1_0.IBase$Proxy: java.util.ArrayList getHashChain()> -> _SOURCE_
<com.android.internal.telephony.IOns$Stub$Proxy: android.os.IBinder asBinder()> -> _SOURCE_
<android.os.IIncidentReportStatusListener$Stub: android.os.IIncidentReportStatusListener getDefaultImpl()> -> _SOURCE_
<android.media.AudioManager: boolean isCallScreeningModeSupported()> -> _SOURCE_
<android.view.InsetsController$InternalAnimationControlListener: android.view.animation.Interpolator getAlphaInterpolator()> -> _SOURCE_
<android.media.MediaCodecInfo$CodecCapabilities: java.lang.String getMimeType()> -> _SOURCE_
<android.security.IKeyChainService$Default: java.util.List getCaCertificateChainAliases(java.lang.String,boolean)> -> _SOURCE_
<android.app._$$Lambda$AppOpsManager$HistoricalOp$DkVcBvqB32SMHlxw0sWQPh3GL1A: java.lang.Object get()> -> _SOURCE_
<android.telephony.ims.ImsMmTelManager: boolean isVoWiFiRoamingSettingEnabled()> -> _SOURCE_
<android.app.backup.IBackupManager$Stub$Proxy: android.content.Intent getConfigurationIntentForUser(int,java.lang.String)> -> _SOURCE_
<android.content.Intent: java.lang.String getAction()> -> _SOURCE_
<android.media.tv.ITvInputManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.bluetooth.IBluetoothHidDevice$Default: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
<android.content.pm.PackageItemInfo: android.content.pm.ApplicationInfo getApplicationInfo()> -> _SOURCE_
<android.appwidget.AppWidgetManager: java.util.List getInstalledProviders(int)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getDataActivityForSubId(int)> -> _SOURCE_
<com.android.internal.view.menu.MenuItemImpl: android.graphics.drawable.Drawable getIcon()> -> _SOURCE_
<com.android.ims.internal.IImsExternalCallStateListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.CarrierConfigManager$Wifi: android.os.PersistableBundle access$300()> -> _SOURCE_
<android.telephony.SubscriptionManager: void invalidateActiveDataSubIdCaches()> -> _SOURCE_
<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getUserBadgedDrawableForDensity(android.graphics.drawable.Drawable,android.os.UserHandle,android.graphics.Rect,int)> -> _SOURCE_
<android.accessibilityservice.GestureDescription: int getMaxStrokeCount()> -> _SOURCE_
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice getSharedLibraries(java.lang.String,int,int)> -> _SOURCE_
<android.app.VoiceInteractor: android.app.VoiceInteractor$Request[] getActiveRequests()> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getDeviceSvn(java.lang.String,java.lang.String)> -> _SOURCE_
<android.app.ApplicationPackageManager: boolean isUpgrade()> -> _SOURCE_
<com.android.internal.os.BatteryStatsHelper: android.content.Intent getBatteryBroadcast()> -> _SOURCE_
<android.database.sqlite.SQLiteQueryBuilder: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.IIntegerConsumer$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.ApplicationPackageManager: android.content.res.Resources getResourcesForActivity(android.content.ComponentName)> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: java.lang.String getVersionName()> -> _SOURCE_
<android.view.textclassifier.TextClassification: android.os.Bundle getExtras()> -> _SOURCE_
<android.view.autofill.IAutoFillManagerClient$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.telephony.ISms$Stub$Proxy: java.util.List getAllMessagesFromIccEfForSubscriber(int,java.lang.String)> -> _SOURCE_
<android.accounts.AccountManager: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.os.connectivity.WifiBatteryStats: long getRxTimeMillis()> -> _SOURCE_
<android.util.XmlPullAttributes: java.lang.String getIdAttribute()> -> _SOURCE_
<android.content.res.Resources: java.util.List getLoaders()> -> _SOURCE_
<android.widget.ActionMenuPresenter$ActionMenuPopupCallback: com.android.internal.view.menu.ShowableListMenu getPopup()> -> _SOURCE_
<android.content.res.XmlBlock$Parser: java.lang.String getPrefix()> -> _SOURCE_
<android.app.role.RoleControllerManager: java.util.concurrent.CompletableFuture lambda$isRoleVisible$6(java.lang.String,android.app.role.IRoleController)> -> _SOURCE_
<com.android.internal.view.StandaloneActionMode: java.lang.CharSequence getTitle()> -> _SOURCE_
<android.telephony.ServiceState: int getCdmaRoamingIndicator()> -> _SOURCE_
<android.os.IInstalld$Stub$Proxy: long[] getAppSize(java.lang.String,java.lang.String[],int,int,int,long[],java.lang.String[])> -> _SOURCE_
<android.media.audiopolicy.AudioProductStrategy: android.media.AudioAttributes getAudioAttributes()> -> _SOURCE_
<com.android.internal.telephony.GsmAlphabet: char gsmExtendedToChar(int)> -> _SOURCE_
<android.os.Binder: android.os.UserHandle getCallingUserHandle()> -> _SOURCE_
<android.media.IPlaybackConfigDispatcher$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.SmsMessage: boolean hasEmsSupport()> -> _SOURCE_
<android.telephony.PreciseCallState: int getPreciseDisconnectCause()> -> _SOURCE_
<android.os.UserManager: int getUserSwitchability()> -> _SOURCE_
<android.hardware.location.ContextHubInfo: android.hardware.location.MemoryRegion[] getMemoryRegions()> -> _SOURCE_
<android.telephony.ims.aidl.IImsCapabilityCallback$Stub: android.telephony.ims.aidl.IImsCapabilityCallback getDefaultImpl()> -> _SOURCE_
<android.net.lowpan.LowpanInterface: boolean isUp()> -> _SOURCE_
<android.os.IRecoverySystemProgressListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: long getParentNodeId()> -> _SOURCE_
<android.telephony.SubscriptionManager: boolean canManageSubscription(android.telephony.SubscriptionInfo,java.lang.String)> -> _SOURCE_
<android.hardware.location.GeofenceHardwareRequestParcelable: double getLatitude()> -> _SOURCE_
<android.telephony.CellInfo: int getCellConnectionStatus()> -> _SOURCE_
<com.android.internal.app.IVoiceInteractionSessionShowCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.ApplicationPackageManager: java.util.List getInstalledApplications(int)> -> _SOURCE_
<com.android.ims.internal.IImsCallSession$Stub$Proxy: android.telephony.ims.ImsCallProfile getLocalCallProfile()> -> _SOURCE_
<android.view.animation.Animation: long getDuration()> -> _SOURCE_
<android.content.pm.PackageParser$Package: boolean isSystem()> -> _SOURCE_
<android.view.textclassifier.TextClassificationManager: android.view.textclassifier.TextClassificationConstants getSettings(android.content.Context)> -> _SOURCE_
<android.telephony.SmsMessage: boolean isMWIClearMessage()> -> _SOURCE_
<android.os.PowerManager: float getThermalHeadroom(int)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean getAutoTimeEnabled(android.content.ComponentName)> -> _SOURCE_
<android.app.JobSchedulerImpl: java.util.List getAllPendingJobs()> -> _SOURCE_
<android.media.soundtrigger_middleware.ISoundTriggerModule$Stub: android.media.soundtrigger_middleware.ISoundTriggerModule getDefaultImpl()> -> _SOURCE_
<android.graphics.RenderNode: boolean getUseCompositingLayer()> -> _SOURCE_
<android.content.pm.PackageManager: java.util.List queryContentProviders(java.lang.String,int,int,java.lang.String)> -> _SOURCE_
<android.app.ActivityOptions: android.view.AppTransitionAnimationSpec[] getAnimSpecs()> -> _SOURCE_
<android.app.Notification$BubbleMetadata: boolean getAutoExpandBubble()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getVoiceNetworkTypeForSubscriber(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.content.pm.IPackageDeleteObserver$Stub: android.content.pm.IPackageDeleteObserver getDefaultImpl()> -> _SOURCE_
<android.hardware.location.ContextHubManager: java.util.List getContextHubs()> -> _SOURCE_
<android.telephony.SmsCbMessage: int getDataCodingScheme()> -> _SOURCE_
<android.graphics.ColorSpace$Connector: android.graphics.ColorSpace$RenderIntent getRenderIntent()> -> _SOURCE_
<android.app.IUiModeManager$Default: long getCustomNightModeStart()> -> _SOURCE_
<android.media.VolumeShaper$Configuration: float[] getTimes()> -> _SOURCE_
<android.permission.IPermissionManager$Stub$Proxy: java.util.List getWhitelistedRestrictedPermissions(java.lang.String,int,int)> -> _SOURCE_
<android.database.sqlite.SQLiteQueryBuilder: java.util.Collection getProjectionGreylist()> -> _SOURCE_
<android.telephony.SmsMessage: java.lang.String getDisplayMessageBody()> -> _SOURCE_
<com.android.internal.app.IBatteryStats$Stub: com.android.internal.app.IBatteryStats getDefaultImpl()> -> _SOURCE_
<android.hardware.input.ITabletModeChangedListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: boolean isDataRoamingEnabled(int)> -> _SOURCE_
<android.app.INotificationManager$Default: boolean getPrivateNotificationsAllowed()> -> _SOURCE_
<android.media.session.MediaController: java.lang.CharSequence getQueueTitle()> -> _SOURCE_
<android.bluetooth.BluetoothA2dpSink: java.util.List getConnectedDevices()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean hasIccCard()> -> _SOURCE_
<android.hardware.biometrics.BiometricAuthenticator$Identifier: long getDeviceId()> -> _SOURCE_
<android.media.session.MediaSession: android.media.session.MediaController getController()> -> _SOURCE_
<android.telephony.SmsManager: java.lang.String getImsSmsFormat()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isCurrentInputMethodSetByOwner()> -> _SOURCE_
<com.android.internal.telephony.euicc.IGetDefaultSmdpAddressCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.ResourcesManager: android.util.DisplayMetrics getDisplayMetrics(int,android.view.DisplayAdjustments)> -> _SOURCE_
<android.net.INetworkStatsSession$Default: int[] getRelevantUids()> -> _SOURCE_
<android.telephony.TelephonyManager: int[] supplyPinReportResult(java.lang.String)> -> _SOURCE_
<android.media.AudioTrack: float getAudioDescriptionMixLeveldB()> -> _SOURCE_
<android.view.textservice.TextServicesManager: android.view.textservice.SpellCheckerInfo[] getEnabledSpellCheckers()> -> _SOURCE_
<android.hardware.hdmi.IHdmiControlService$Default: java.util.List getDeviceList()> -> _SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String getAlwaysOnVpnPackage(int)> -> _SOURCE_
<com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: java.lang.String getEid(int,java.lang.String)> -> _SOURCE_
<android.net.INetworkStatsSession$Stub$Proxy: int[] getRelevantUids()> -> _SOURCE_
<android.telephony.TelephonyManager: int getActiveModemCount()> -> _SOURCE_
<android.media.VolumeShaper$Configuration: int getMaximumCurvePoints()> -> _SOURCE_
<android.content.pm.LauncherApps: android.graphics.drawable.Drawable getShortcutBadgedIconDrawable(android.content.pm.ShortcutInfo,int)> -> _SOURCE_
<android.content.IntentSender: java.lang.String getTargetPackage()> -> _SOURCE_
<android.content.pm.IOnAppsChangedListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.location.ILocationManager$Stub$Proxy: java.lang.String getExtraLocationControllerPackage()> -> _SOURCE_
<android.app.backup.IBackupManager$Stub$Proxy: java.lang.CharSequence getDataManagementLabelForUser(int,java.lang.String)> -> _SOURCE_
<android.telephony.ims.aidl.IImsMmTelFeature$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.hardware.hdmi.HdmiTvClient: java.util.List getDeviceList()> -> _SOURCE_
<android.app.usage.IStorageStatsManager$Stub$Proxy: long getFreeBytes(java.lang.String,java.lang.String)> -> _SOURCE_
<android.accounts.IAccountManager$Stub$Proxy: android.accounts.AuthenticatorDescription[] getAuthenticatorTypes(int)> -> _SOURCE_
<android.app.ApplicationPackageManager: java.lang.String getSystemCaptionsServicePackageName()> -> _SOURCE_
<android.content.pm.PackageUserState: java.util.Map getSharedLibraryOverlayPaths()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.String getApplicationRestrictionsManagingPackage(android.content.ComponentName)> -> _SOURCE_
<android.hardware.fingerprint.FingerprintManager$AuthenticationResult: android.hardware.fingerprint.FingerprintManager$CryptoObject getCryptoObject()> -> _SOURCE_
<android.telephony.ServiceState: int getNrState()> -> _SOURCE_
<android.net.NetworkIdentity: boolean getDefaultNetwork()> -> _SOURCE_
<android.location.GnssReflectingPlane: double getLongitudeDegrees()> -> _SOURCE_
<android.content.Context: android.view.Display getDisplay()> -> _SOURCE_
<android.media.IMediaRouter2Manager$Stub: android.media.IMediaRouter2Manager getDefaultImpl()> -> _SOURCE_
<android.os.ISystemConfig$Stub$Proxy: java.util.Map getDisabledUntilUsedPreinstalledCarrierAssociatedApps()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: java.lang.String getDeviceSoftwareVersionForSlot(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.content.Context: android.content.ContentCaptureOptions getContentCaptureOptions()> -> _SOURCE_
<android.security.keystore.IKeystoreExportKeyCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.view.inputmethod.InputMethodInfo: android.content.pm.ServiceInfo getServiceInfo()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: boolean isVtSettingEnabled(int)> -> _SOURCE_
<com.android.internal.telephony.IOns$Stub: android.os.IBinder asBinder()> -> _SOURCE_
<android.system.suspend.ISuspendCallback$Stub: android.system.suspend.ISuspendCallback getDefaultImpl()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getEmergencyNumberDbVersion(int)> -> _SOURCE_
<android.content.pm.PackageManager: java.util.List queryIntentActivitiesAsUser(android.content.Intent,int,android.os.UserHandle)> -> _SOURCE_
<android.service.carrier.CarrierIdentifier: java.lang.String getSpn()> -> _SOURCE_
<com.android.internal.util.StateMachine$LogRec: long getWhat()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getOriginalText()> -> _SOURCE_
<android.hardware.ICameraServiceListener$Stub: android.hardware.ICameraServiceListener getDefaultImpl()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.lang.CharSequence getDeviceOwnerOrganizationName()> -> _SOURCE_
<android.text.method.MultiTapKeyListener: android.text.method.MultiTapKeyListener getInstance(boolean,android.text.method.TextKeyListener$Capitalize)> -> _SOURCE_
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.PermissionGroupInfo getPermissionGroupInfo(java.lang.String,int)> -> _SOURCE_
<android.hardware.camera2.params.Face: android.graphics.Point getRightEyePosition()> -> _SOURCE_
<android.security.keystore.AndroidKeyStoreLoadStoreParameter: java.security.KeyStore$ProtectionParameter getProtectionParameter()> -> _SOURCE_
<android.widget.PopupWindow: android.graphics.drawable.Drawable getBackground()> -> _SOURCE_
<android.telephony.CellInfoLte: android.telephony.CellSignalStrength getCellSignalStrength()> -> _SOURCE_
<android.net.Uri$OpaqueUri: java.lang.String getHost()> -> _SOURCE_
<android.media.MediaTimestamp: float getMediaClockRate()> -> _SOURCE_
<android.os.IVold$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.Notification$MessagingStyle: java.util.List getHistoricMessages()> -> _SOURCE_
<android.net.IpPrefix: byte[] getRawAddress()> -> _SOURCE_
<android.security.keystore.recovery.RecoveryCertPath: java.security.cert.CertPath getCertPath()> -> _SOURCE_
<android.app.RuntimeAppOpAccessMessage: java.lang.String getAttributionTag()> -> _SOURCE_
<android.media.AudioDeviceInfo: java.lang.CharSequence getProductName()> -> _SOURCE_
<android.os.storage.StorageManager: boolean isCacheBehaviorGroup(java.io.File)> -> _SOURCE_
<android.view.InsetsAnimationControlImpl: float getCurrentAlpha()> -> _SOURCE_
<android.graphics.drawable.DrawableContainer$DrawableContainerState: android.graphics.drawable.Drawable[] getChildren()> -> _SOURCE_
<com.android.ims.internal.IImsEcbmListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.NotificationManager: boolean isNotificationPolicyAccessGrantedForPackage(java.lang.String)> -> _SOURCE_
<android.bluetooth.BluetoothActivityEnergyInfo: long getControllerIdleTimeMillis()> -> _SOURCE_
<android.app.PendingIntent: android.content.IntentSender getIntentSender()> -> _SOURCE_
<android.accounts.IAccountManager$Stub: android.accounts.IAccountManager getDefaultImpl()> -> _SOURCE_
<android.media.MediaPlayer$TrackInfo: java.lang.String getLanguage()> -> _SOURCE_
<android.telephony.SubscriptionManager: java.util.List getAccessibleSubscriptionInfoList()> -> _SOURCE_
<android.hardware.location.NanoAppBinary: long getNanoAppId()> -> _SOURCE_
<android.bluetooth.IBluetoothHidDevice$Default: java.lang.String getUserAppName()> -> _SOURCE_
<android.content.ContentResolver: android.content.SyncInfo getCurrentSync()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: int getImsRegTechnologyForMmTel(int)> -> _SOURCE_
<android.telephony.ModemActivityInfo: int getIdleTimeMillis()> -> _SOURCE_
<android.app.Notification$Builder: android.os.Bundle getExtras()> -> _SOURCE_
<android.hardware.Camera$Parameters: java.util.List getSupportedVideoSizes()> -> _SOURCE_
<android.app.Notification$WearableExtender: boolean getHintShowBackgroundOnly()> -> _SOURCE_
<android.view.IDisplayWindowListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.UiModeManager: boolean isNightModeLocked()> -> _SOURCE_
<android.media.projection.IMediaProjection$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.RemoteInput: boolean getAllowFreeFormInput()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: android.telephony.CallForwardingInfo getCallForwarding(int,int)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: boolean isMmTelCapabilityProvisionedInCache(int,int,int)> -> _SOURCE_
<android.net.ConnectivityManager: java.lang.String[] getTetheredIfaces()> -> _SOURCE_
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String getPermissionControllerPackageName()> -> _SOURCE_
<android.hardware.camera2.legacy.CameraDeviceUserShim: android.view.Surface getInputSurface()> -> _SOURCE_
<android.service.vr.IVrManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.widget.Spinner: android.graphics.drawable.Drawable getPopupBackground()> -> _SOURCE_
<android.telecom.TelecomAnalytics$SessionTiming: long getTime()> -> _SOURCE_
<android.telephony.NetworkRegistrationInfo: java.lang.String serviceTypeToString(int)> -> _SOURCE_
<android.media.IRemoteVolumeObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.view.textclassifier.TextClassificationContext: android.view.textclassifier.SystemTextClassifierMetadata getSystemTextClassifierMetadata()> -> _SOURCE_
<android.bluetooth.IBluetoothManager$Default: java.util.List getSystemConfigEnabledProfilesForPackage(java.lang.String)> -> _SOURCE_
<android.telephony.CbGeoUtils$Polygon$Point: android.telephony.CbGeoUtils$Polygon$Point subtract(android.telephony.CbGeoUtils$Polygon$Point)> -> _SOURCE_
<android.content.UndoManager: boolean isInUndo()> -> _SOURCE_
<android.os.storage.StorageManager: long getCacheQuotaBytes(java.util.UUID)> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: java.util.Map getOverlayables()> -> _SOURCE_
<android.hardware.cas.V1_0.ICas$Stub: android.internal.hidl.base.V1_0.DebugInfo getDebugInfo()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Default: java.lang.String getIsimDomain(int)> -> _SOURCE_
<android.bluetooth.IBluetoothPbap$Stub$Proxy: java.util.List getConnectedDevices()> -> _SOURCE_
<android.window.WindowContainerTransaction$Change: boolean getHidden()> -> _SOURCE_
<android.telephony.NeighboringCellInfo: int getLac()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: android.telephony.SignalStrength getSignalStrength(int)> -> _SOURCE_
<android.net.IpConfiguration: android.net.IpConfiguration$ProxySettings getProxySettings()> -> _SOURCE_
<android.hardware.display.IVirtualDisplayCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telephony.mbms.DownloadRequest: android.content.Intent getIntentForApp()> -> _SOURCE_
<android.accessibilityservice.AccessibilityServiceInfo: android.content.pm.ResolveInfo getResolveInfo()> -> _SOURCE_
<android.view.IAppTransitionAnimationSpecsFuture$Default: android.view.AppTransitionAnimationSpec[] get()> -> _SOURCE_
<android.media.AudioRecord: android.media.AudioDeviceInfo getPreferredDevice()> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: android.bluetooth.le.BluetoothLeScanner getBluetoothLeScanner()> -> _SOURCE_
<android.view.textclassifier.TextSelection$Request: android.os.Bundle getExtras()> -> _SOURCE_
<android.security.net.config.NetworkSecurityConfig: java.util.Set getTrustAnchors()> -> _SOURCE_
<android.media.AudioTrack: android.media.AudioFormat getFormat()> -> _SOURCE_
<android.widget.RadioButton: java.lang.CharSequence getAccessibilityClassName()> -> _SOURCE_
<com.android.internal.view.InputBindResult: java.lang.String getResultString()> -> _SOURCE_
<android.app.IAppTask$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.backup.IRestoreSession$Stub: android.app.backup.IRestoreSession getDefaultImpl()> -> _SOURCE_
<android.location.ILocationManager$Stub$Proxy: android.location.Location getLastLocation(android.location.LocationRequest,java.lang.String,java.lang.String)> -> _SOURCE_
<android.telephony.ServiceState: boolean isPsOnlyTech(int)> -> _SOURCE_
<android.telephony.SubscriptionManager: int getPreferredDataSubscriptionId()> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: boolean isLePeriodicAdvertisingSupported()> -> _SOURCE_
<android.app.IServiceConnection$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.ActivityManager: int getMemoryClass()> -> _SOURCE_
<android.telephony.ServiceState: java.lang.String toString()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.security.AttestedKeyPair: java.util.List getAttestationRecord()> -> _SOURCE_
<android.app.ApplicationPackageManager: android.content.res.Resources getResourcesForApplication(android.content.pm.ApplicationInfo)> -> _SOURCE_
<android.telephony.SmsManager: java.lang.String createAppSpecificSmsTokenWithPackageInfo(java.lang.String,android.app.PendingIntent)> -> _SOURCE_
<android.telephony.SmsCbMessage: int getSerialNumber()> -> _SOURCE_
<com.android.internal.telephony.ISms$Stub$Proxy: android.os.IBinder asBinder()> -> _SOURCE_
<android.graphics.drawable.VectorDrawable$VPath: android.util.PathParser$PathData getPathData()> -> _SOURCE_
<android.media.AudioPlaybackConfiguration: android.media.IPlayer getIPlayer()> -> _SOURCE_
<android.net.NetworkStatsHistory: long getBucketDuration()> -> _SOURCE_
<android.telephony.SubscriptionManager: android.telephony.SubscriptionInfo getDefaultSmsSubscriptionInfo()> -> _SOURCE_
<android.app.blob.IBlobStoreManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.media.session.MediaSessionManager$RemoteUserInfo: java.lang.String getPackageName()> -> _SOURCE_
<android.view.textclassifier.TextClassificationContext: java.lang.String getWidgetVersion()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: java.lang.String getStartPlatformVersion()> -> _SOURCE_
<android.view.contentcapture.ViewNode: int[] getTextLineCharOffsets()> -> _SOURCE_
<android.media.projection.IMediaProjectionWatcherCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.service.euicc.EuiccProfileInfo: android.service.carrier.CarrierIdentifier getCarrierIdentifier()> -> _SOURCE_
<android.telephony.CellIdentityLte$1: android.telephony.CellIdentityLte createFromParcel(android.os.Parcel)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: boolean isOnBatteryLocked()> -> _SOURCE_
<android.graphics.Paint: float getTextSize()> -> _SOURCE_
<android.telephony.euicc.EuiccManager: java.lang.String getEid()> -> _SOURCE_
<com.android.internal.telephony.ISub$Stub$Proxy: android.telephony.SubscriptionInfo getActiveSubscriptionInfoForSimSlotIndex(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.telephony.TelephonyManager: long getAllowedNetworkTypes()> -> _SOURCE_
<android.telephony.NetworkRegistrationInfo: java.lang.String toString()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.app.slice.SliceItem: android.app.RemoteInput getRemoteInput()> -> _SOURCE_
<android.content.pm.InstantAppResolveInfo$InstantAppDigest: byte[][] getDigestBytes()> -> _SOURCE_
<android.hardware.cas.V1_2.ICasListener$Proxy: android.internal.hidl.base.V1_0.DebugInfo getDebugInfo()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean getCrossProfileCallerIdDisabled(android.os.UserHandle)> -> _SOURCE_
<android.location.GpsMeasurement: double getCodePhaseUncertaintyInChips()> -> _SOURCE_
<android.text.method.TimeKeyListener: android.text.method.TimeKeyListener getInstance()> -> _SOURCE_
<com.android.internal.telephony.IPhoneStateListener$Stub: android.os.IBinder asBinder()> -> _SOURCE_
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String[] getSystemSharedLibraryNames()> -> _SOURCE_
<android.net.NetworkCapabilities: java.util.Set getUids()> -> _SOURCE_
<android.content.res.AssetManager: android.content.res.AssetManager getSystem()> -> _SOURCE_
<android.telephony.ServiceState: boolean isUsingCarrierAggregation()> -> _SOURCE_
<com.android.internal.telephony.SmsMessageBase: java.lang.String getPseudoSubject()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getDataState()> -> _SOURCE_
<android.telephony.ims.aidl.IImsMmTelFeature$Default: com.android.ims.internal.IImsUt getUtInterface()> -> _SOURCE_
<android.view.DisplayAddress$Physical: long getPhysicalDisplayId()> -> _SOURCE_
<android.view.IAppTransitionAnimationSpecsFuture$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.media.session.ISession2TokensListener$Stub: android.media.session.ISession2TokensListener getDefaultImpl()> -> _SOURCE_
<android.webkit.WebMessage: android.webkit.WebMessagePort[] getPorts()> -> _SOURCE_
<android.content.pm.IPackageInstaller$Stub$Proxy: android.content.pm.PackageInstaller$SessionInfo getSessionInfo(int)> -> _SOURCE_
<android.telephony.SmsManager: java.util.ArrayList getAllMessagesFromIcc()> -> _SOURCE_
<android.app.Activity: android.content.Intent getIntent()> -> _SOURCE_
<android.view.ViewRootImpl: android.view.SurfaceControl getBoundsLayer()> -> _SOURCE_
<android.telephony.CallQuality: int getNumRtpPacketsTransmittedLost()> -> _SOURCE_
<android.content.ContextWrapper: java.io.File getObbDir()> -> _SOURCE_
<android.view.textclassifier.TextClassification: android.graphics.drawable.Drawable getIcon()> -> _SOURCE_
<android.graphics.drawable.GradientDrawable: android.graphics.drawable.GradientDrawable$Orientation getOrientation()> -> _SOURCE_
<android.location.GpsClock: double getTimeUncertaintyInNs()> -> _SOURCE_
<android.content.pm.VersionedPackage: long getLongVersionCode()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getCdmaMdn(int)> -> _SOURCE_
<android.util.KeyValueListParser$FloatValue: java.lang.String getKey()> -> _SOURCE_
<android.os.IIncidentDumpCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.security.net.config.NetworkSecurityConfig$Builder: java.util.List getCertificatesEntryRefs()> -> _SOURCE_
<android.media.IAudioService$Stub$Proxy: android.media.AudioDeviceAttributes getPreferredDeviceForStrategy(int)> -> _SOURCE_
<com.android.internal.util.function.pooled.PooledLambdaImpl: java.lang.String getTraceName()> -> _SOURCE_
<android.util.TypedValue: float getFloat()> -> _SOURCE_
<android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getNotificationChannelGroupsForPackage(java.lang.String,int,boolean)> -> _SOURCE_
<android.app.IActivityTaskManager$Stub$Proxy: android.graphics.Bitmap getTaskDescriptionIcon(java.lang.String,int)> -> _SOURCE_
<android.media.MediaDrm: android.media.MediaDrm$ProvisionRequest getProvisionRequest()> -> _SOURCE_
<android.telephony.CbGeoUtils$Circle: java.lang.String toString()> -> _SOURCE_
<android.widget.CursorAdapter: android.widget.FilterQueryProvider getFilterQueryProvider()> -> _SOURCE_
<android.app.backup.IBackupManagerMonitor$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.internal.telephony.cdma.SmsMessage: int getNextMessageId()> -> _SOURCE_
<android.bluetooth.BluetoothCodecStatus: android.bluetooth.BluetoothCodecConfig[] getCodecsSelectableCapabilities()> -> _SOURCE_
<android.accessibilityservice.IAccessibilityServiceConnection$Stub$Proxy: float getMagnificationScale(int)> -> _SOURCE_
<android.webkit.WebSettings: int getForceDark()> -> _SOURCE_
<android.telephony.ModemInfo: int describeContents()> -> _SOURCE_
<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder createRecurringWeekly(java.time.ZonedDateTime)> -> _SOURCE_
<android.hardware.display.ColorDisplayManager: java.time.LocalTime getNightDisplayCustomStartTime()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getPermittedInputMethods(android.content.ComponentName)> -> _SOURCE_
<com.android.internal.policy.PhoneWindow: android.transition.Transition getSharedElementEnterTransition()> -> _SOURCE_
<android.net.lowpan.LowpanIdentity: java.lang.String getType()> -> _SOURCE_
<android.os.BasicShellCommandHandler: java.lang.String getNextArgRequired()> -> _SOURCE_
<android.os.storage.StorageManager: boolean isUsbMassStorageEnabled()> -> _SOURCE_
<android.nfc.INfcTag$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.content.pm.PackageInfo: long getLongVersionCode()> -> _SOURCE_
<android.app.Notification$WearableExtender: boolean getHintHideIcon()> -> _SOURCE_
<android.appwidget.AppWidgetManager: java.util.List getInstalledProvidersForProfile(android.os.UserHandle)> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: java.util.List getPermissions()> -> _SOURCE_
<android.widget.ListPopupWindow: boolean isShowing()> -> _SOURCE_
<android.net.Uri$HierarchicalUri: java.lang.String getScheme()> -> _SOURCE_
<android.app.VoiceInteractor$ConfirmationRequest: java.lang.String getRequestTypeName()> -> _SOURCE_
<android.view.InputEvent: android.view.InputDevice getDevice()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.graphics.Paint: long getNativeInstance()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: long getLeashedParentNodeId()> -> _SOURCE_
<android.drm.DrmEvent: java.lang.String getMessage()> -> _SOURCE_
<android.hardware.location.IContextHubTransactionCallback$Stub: android.hardware.location.IContextHubTransactionCallback getDefaultImpl()> -> _SOURCE_
<android.net.wifi.nl80211.NativeWifiClient: android.net.MacAddress getMacAddress()> -> _SOURCE_
<android.telephony.NetworkScanRequest: int getScanType()> -> _SOURCE_
<android.hardware.location.NanoAppInstanceInfo: int[] getOutputEvents()> -> _SOURCE_
<android.telephony.ICellInfoCallback$Stub$Proxy: android.os.IBinder asBinder()> -> _SOURCE_
<android.content.pm.LauncherApps: java.util.List getShortcutConfigActivityList(java.lang.String,android.os.UserHandle)> -> _SOURCE_
<com.android.internal.telephony.SmsApplication: android.content.ComponentName lambda$replacePreferredActivity$1(android.content.pm.ResolveInfo)> -> _SOURCE_
<android.content.pm.PackageInstaller$SessionInfo: java.lang.String getStagedSessionErrorMessage()> -> _SOURCE_
<android.debug.AdbManager: boolean isAdbWifiSupported()> -> _SOURCE_
<android.print.IPrintManager$Stub$Proxy: android.print.PrintJobInfo getPrintJobInfo(android.print.PrintJobId,int,int)> -> _SOURCE_
<android.nfc.tech.NfcB: boolean isConnected()> -> _SOURCE_
<android.print.IPrintJobStateChangeListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.content.IClipboard$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.view.WindowId: android.view.IWindowId getTarget()> -> _SOURCE_
<android.content.pm.PackageInstaller$SessionInfo: java.lang.String getAppPackageName()> -> _SOURCE_
<android.hardware.fingerprint.FingerprintManager$CryptoObject: android.security.identity.IdentityCredential getIdentityCredential()> -> _SOURCE_
<android.database.sqlite.SQLiteProgram: java.lang.Object[] getBindArgs()> -> _SOURCE_
<android.os.StatsServiceManager: android.os.StatsServiceManager$ServiceRegisterer getStatsdServiceRegisterer()> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Default: java.lang.String getMsisdnForSubscriber(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.Throwable access$100(java.lang.String,java.lang.String)> -> _SOURCE_
<android.telephony.mbms.DownloadRequest: java.lang.String getFileServiceId()> -> _SOURCE_
<android.telephony.CellIdentityNr$1: android.telephony.CellIdentityNr createFromParcel(android.os.Parcel)> -> _SOURCE_
<android.os.ISystemUpdateManager$Stub: android.os.ISystemUpdateManager getDefaultImpl()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: java.util.List getTelephonyHistograms()> -> _SOURCE_
<android.app.IWallpaperManager$Default: java.lang.String getName()> -> _SOURCE_
<android.bluetooth.BluetoothHeadsetClientCall: java.lang.String getNumber()> -> _SOURCE_
<android.bluetooth.le.ScanSettings: boolean getLegacy()> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getDeviceIdForPhone(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.telephony.TelephonyManager: android.telephony.SignalStrength getSignalStrength()> -> _SOURCE_
<android.view.inputmethod.InputMethodInfo: java.lang.String getServiceName()> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: android.content.pm.PackageParser$SigningDetails getSigningDetails()> -> _SOURCE_
<android.telephony.TelephonyManager: void enableVideoCalling(boolean)> -> _SOURCE_
<android.telephony.PhoneNumberUtils: boolean isLocalEmergencyNumber(android.content.Context,int,java.lang.String)> -> _SOURCE_
<android.telephony.SmsMessage: boolean isMWISetMessage()> -> _SOURCE_
<android.telephony.mbms.DownloadRequest: int getMaxAppIntentSize()> -> _SOURCE_
<android.util.SizeF: float getHeight()> -> _SOURCE_
<android.app.NotificationChannel: long[] getVibrationPattern()> -> _SOURCE_
<android.database.CursorWindow: java.lang.String getName()> -> _SOURCE_
<android.widget.ProgressBar: android.graphics.drawable.shapes.Shape getDrawableShape()> -> _SOURCE_
<android.net.EthernetManager: boolean isAvailable()> -> _SOURCE_
<android.content.ContextWrapper: android.os.Looper getMainLooper()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getNumberOfModemsWithSimultaneousDataConnections(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.os.connectivity.GpsBatteryStats: long[] getTimeInGpsSignalQualityLevel()> -> _SOURCE_
<android.app.blob.BlobInfo: java.util.List getLeases()> -> _SOURCE_
<android.app.timezone.IRulesManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.telephony.IIntegerConsumer$Stub: com.android.internal.telephony.IIntegerConsumer asInterface(android.os.IBinder)> -> _SOURCE_
<com.android.internal.infra.ServiceConnector$Impl: android.os.Handler getJobHandler()> -> _SOURCE_
<android.graphics.drawable.NinePatchDrawable: android.graphics.Region getTransparentRegion()> -> _SOURCE_
<android.telephony.NeighboringCellInfo: int getRssi()> -> _SOURCE_
<android.telephony.euicc.EuiccNotification: byte[] getData()> -> _SOURCE_
<com.android.internal.telephony.cdma.SmsMessage: com.android.internal.telephony.cdma.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,com.android.internal.telephony.cdma.sms.UserData,boolean)> -> _SOURCE_
<android.hardware.radio.RadioManager$ProgramInfo: android.hardware.radio.ProgramSelector$Identifier getLogicallyTunedTo()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo getTouchDelegateInfo()> -> _SOURCE_
<android.hardware.face.FaceManager$AuthenticationResult: android.hardware.face.Face getFace()> -> _SOURCE_
<android.app.IActivityManager$Default: android.os.ParcelFileDescriptor getLifeMonitor()> -> _SOURCE_
<android.view.textclassifier.SelectionEvent: long getDurationSincePreviousEvent()> -> _SOURCE_
<android.app.Notification$CarExtender$UnreadConversation: long getLatestTimestamp()> -> _SOURCE_
<android.bluetooth.IBluetoothMap$Stub$Proxy: android.bluetooth.BluetoothDevice getClient()> -> _SOURCE_
<android.os.SystemProperties$Handle: java.lang.String get()> -> _SOURCE_
<android.media.AudioManager: android.media.AudioDeviceInfo[] getDevices(int)> -> _SOURCE_
<android.view.textclassifier.TextClassification: java.lang.String getId()> -> _SOURCE_
<com.android.internal.app.IBatteryStats$Stub$Proxy: android.os.connectivity.GpsBatteryStats getGpsBatteryStats()> -> _SOURCE_
<android.telephony.ServiceState: int getDataRegState()> -> _SOURCE_
<com.android.internal.view.menu.ActionMenuItem: java.lang.CharSequence getTitleCondensed()> -> _SOURCE_
<android.hardware.fingerprint.FingerprintManager: boolean isHardwareDetected()> -> _SOURCE_
<android.app.ActivityManager: boolean isSystemReady()> -> _SOURCE_
<android.telephony.PreciseDataConnectionState: int getDataConnectionNetworkType()> -> _SOURCE_
<android.app.blob.BlobStoreManager: java.util.List getLeasedBlobs()> -> _SOURCE_
<android.telephony.SubscriptionManager: android.os.ParcelUuid createSubscriptionGroup(java.util.List)> -> _SOURCE_
<android.location.GnssMeasurementsEvent: android.location.GnssClock getClock()> -> _SOURCE_
<android.net.Uri$OpaqueUri: java.lang.String getEncodedUserInfo()> -> _SOURCE_
<android.net.ConnectivityDiagnosticsManager$DataStallReport: long getReportTimestamp()> -> _SOURCE_
<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$AudioCapabilities getAudioCapabilities()> -> _SOURCE_
<android.media.projection.IMediaProjectionManager$Stub$Proxy: android.media.projection.MediaProjectionInfo getActiveProjectionInfo()> -> _SOURCE_
<android.telephony.SmsMessage: java.lang.String getMessageBody()> -> _SOURCE_
<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager getInstance()> -> _SOURCE_
<android.net.INetworkPolicyManager$Stub$Proxy: android.net.NetworkQuotaInfo getNetworkQuotaInfo(android.net.NetworkState)> -> _SOURCE_
<android.permission.IPermissionManager$Default: java.util.List getSplitPermissions()> -> _SOURCE_
<com.android.internal.telephony.IOnSubscriptionsChangedListener$Stub: java.lang.String getTransactionName(int)> -> _SOURCE_
<com.android.internal.view.menu.MenuBuilder: android.view.View getHeaderView()> -> _SOURCE_
<android.accessibilityservice.GestureDescription: long getMaxGestureDuration()> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: java.lang.String getAddress()> -> _SOURCE_
<android.view.DisplayAddress$Physical: byte getPort()> -> _SOURCE_
<android.location.GnssMeasurement: float getCarrierFrequencyHz()> -> _SOURCE_
<android.app.usage.NetworkStatsManager: android.app.usage.NetworkStats queryDetailsForUidTag(int,java.lang.String,long,long,int,int)> -> _SOURCE_
<android.content.rollback.IRollbackManager$Default: android.content.pm.ParceledListSlice getRecentlyCommittedRollbacks()> -> _SOURCE_
<android.content.RestrictionEntry: java.lang.String getKey()> -> _SOURCE_
<android.view.inputmethod.InputMethodManager: java.util.List getInputMethodListAsUser(int)> -> _SOURCE_
<android.telephony.NetworkRegistrationInfo: int getRoamingType()> -> _SOURCE_
<android.os.VibrationEffect$Waveform: int[] getAmplitudes()> -> _SOURCE_
<android.database.sqlite.SQLiteConnectionPool: java.lang.String getPath()> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: java.lang.String getCompileSdkVersionCodeName()> -> _SOURCE_
<android.location.GnssSingleSatCorrection: float getExcessPathLengthUncertaintyMeters()> -> _SOURCE_
<android.graphics.drawable.RippleDrawable: android.graphics.Rect getDirtyBounds()> -> _SOURCE_
<android.app.ActivityManager: int getCurrentUser()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.bluetooth.BluetoothClass: byte[] getClassOfDeviceBytes()> -> _SOURCE_
<android.media.IMediaRouter2$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.bluetooth.BluetoothGattService: java.util.List getIncludedServices()> -> _SOURCE_
<android.net.ISocketKeepaliveCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.hardware.input.InputManager: android.os.Vibrator getInputDeviceVibrator(int)> -> _SOURCE_
<android.hardware.hdmi.IHdmiHotplugEventListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telephony.CellIdentityLte: int getCi()> -> _SOURCE_
<android.net.INetworkPolicyManager$Stub$Proxy: int[] getUidsWithPolicy(int)> -> _SOURCE_
<android.app.timezone.ICallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.net.LocalSocketImpl: android.net.LocalSocketAddress getSockAddress()> -> _SOURCE_
<android.media.AudioRecord: java.util.List getActiveMicrophones()> -> _SOURCE_
<android.telephony.UiccSlotInfo: int hashCode()> -> _SOURCE_
<android.service.notification.IConditionProvider$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.window.ITaskOrganizerController$Stub$Proxy: java.util.List getRootTasks(int,int[])> -> _SOURCE_
<com.android.internal.telephony.OperatorInfo$State: com.android.internal.telephony.OperatorInfo$State valueOf(java.lang.String)> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: java.lang.String getSharedUserId()> -> _SOURCE_
<android.media.MediaPlayer: android.media.MediaTimeProvider getMediaTimeProvider()> -> _SOURCE_
<android.view.ContextThemeWrapper: java.lang.Object getSystemService(java.lang.String)> -> _SOURCE_
<android.app.LoadedApk: java.io.File getDeviceProtectedDataDirFile()> -> _SOURCE_
<android.widget.RemoteViews: java.lang.String getPackage()> -> _SOURCE_
<com.android.internal.telephony.SmsApplication$SmsApplicationData: java.lang.String access$302(com.android.internal.telephony.SmsApplication$SmsApplicationData,java.lang.String)> -> _SOURCE_
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthTokenLabel(java.lang.String,java.lang.String,android.accounts.AccountManagerCallback,android.os.Handler)> -> _SOURCE_
<com.android.internal.telephony.IOns$Default: int getPreferredDataSubscriptionId(java.lang.String,java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.ISub$Stub$Proxy: java.util.List getSubscriptionsInGroup(android.os.ParcelUuid,java.lang.String,java.lang.String)> -> _SOURCE_
<android.app.ApplicationPackageManager: android.content.ComponentName getInstantAppInstallerComponent()> -> _SOURCE_
<android.media.midi.MidiDeviceServer$OutputPortClient: android.media.midi.MidiInputPort getInputPort()> -> _SOURCE_
<android.view.textservice.SpellCheckerSubtype: java.lang.CharSequence getDisplayName(android.content.Context,java.lang.String,android.content.pm.ApplicationInfo)> -> _SOURCE_
<android.security.keystore.AndroidKeyStoreECPublicKey: java.security.spec.ECPoint getW()> -> _SOURCE_
<android.widget.HeaderViewListAdapter: android.widget.Filter getFilter()> -> _SOURCE_
<android.print.IPrintManager$Default: java.util.List getPrintServiceRecommendations(int)> -> _SOURCE_
<android.app.Activity: android.view.Window getWindow()> -> _SOURCE_
<android.os.Debug$MemoryInfo: java.lang.String getOtherLabel(int)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: android.os.BatteryStats$Timer getWifiScanBackgroundTimer()> -> _SOURCE_
<android.content.pm.IPackageManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.graphics.ImageDecoder$ImageInfo: android.util.Size getSize()> -> _SOURCE_
<android.security.keystore.IKeystoreOperationResultCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.net.lowpan.ILowpanInterface$Stub$Proxy: byte[] getMacAddress()> -> _SOURCE_
<android.app.NotificationHistory: android.app.NotificationHistory$HistoricalNotification getNextNotification()> -> _SOURCE_
<android.net.Uri$StringUri: java.lang.String getQuery()> -> _SOURCE_
<android.app.INotificationManager$Stub$Proxy: android.service.notification.StatusBarNotification[] getHistoricalNotificationsWithAttribution(java.lang.String,java.lang.String,int,boolean)> -> _SOURCE_
<android.graphics.ColorSpace$Rgb: float[] getWhitePoint()> -> _SOURCE_
<android.telephony.SignalStrength: int getTdScdmaAsuLevel()> -> _SOURCE_
<android.media.ExifInterface: long getGpsDateTime()> -> _SOURCE_
<android.database.CursorWrapper: java.lang.String getString(int)> -> _SOURCE_
<android.hardware.input.IInputDevicesChangedListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.ITaskStackListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.view.IGraphicsStatsCallback$Stub: android.view.IGraphicsStatsCallback getDefaultImpl()> -> _SOURCE_
<android.transition.ArcMotion: float getMaximumAngle()> -> _SOURCE_
<android.media.RoutingSessionInfo: java.util.List getSelectableRoutes()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Default: java.util.List getPermittedAccessibilityServicesForUser(int)> -> _SOURCE_
<android.app.NotificationHistory$HistoricalNotification: java.lang.String getPackage()> -> _SOURCE_
<android.telephony.TelephonyManager: void access$200()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: int getPasswordMinimumNumeric(android.content.ComponentName,int)> -> _SOURCE_
<android.net.http.SslCertificate: java.lang.String getValidNotBefore()> -> _SOURCE_
<android.net.TrafficStats: long getLoopbackRxBytes()> -> _SOURCE_
<android.os.MemoryFile: int getSize(java.io.FileDescriptor)> -> _SOURCE_
<android.media.MediaCodecInfo$AudioCapabilities: int[] getSupportedSampleRates()> -> _SOURCE_
<com.android.internal.telephony.IOns$Default: android.os.IBinder asBinder()> -> _SOURCE_
<android.content.pm.ShortcutManager: int getMaxShortcutCountPerActivity()> -> _SOURCE_
<android.provider.Settings$System: long getLongForUser(android.content.ContentResolver,java.lang.String,int)> -> _SOURCE_
<android.telephony.CallQuality: boolean isOutgoingSilenceDetectedAtCallSetup()> -> _SOURCE_
<com.android.internal.widget.ILockSettings$Stub$Proxy: java.lang.String getKey(java.lang.String)> -> _SOURCE_
<android.net.nsd.NsdServiceInfo: java.net.InetAddress getHost()> -> _SOURCE_
<android.app.timezonedetector.TelephonyTimeZoneSuggestion: java.util.List getDebugInfo()> -> _SOURCE_
<com.android.internal.telephony.ISms$Default: java.lang.String getSmscAddressFromIccEfForSubscriber(int,java.lang.String)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv: com.android.internal.os.BatteryStatsImpl getBatteryStats()> -> _SOURCE_
<android.bluetooth.IBluetoothHeadset$Default: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
<android.hardware.camera2.ICameraDeviceUser$Stub: android.hardware.camera2.ICameraDeviceUser getDefaultImpl()> -> _SOURCE_
<android.hardware.location.IContextHubClientCallback$Stub: android.hardware.location.IContextHubClientCallback getDefaultImpl()> -> _SOURCE_
<com.android.internal.util.StateMachine$LogRec: long getTime()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.util.Set getWhitelistedRestrictedPermissions(java.lang.String,int)> -> _SOURCE_
<android.hardware.input.InputManager: int isMicMuted()> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: java.lang.String getProcessName()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: int[] supplyPinReportResultForSubscriber(int,java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: java.lang.String getManufacturerCodeForSlot(int)> -> _SOURCE_
<android.app.ApplicationPackageManager: android.content.pm.PackageInstaller getPackageInstaller()> -> _SOURCE_
<android.app.IActivityManager$Stub$Proxy: java.util.List getBugreportWhitelistedPackages()> -> _SOURCE_
<android.location.GpsMeasurement: double getCarrierPhase()> -> _SOURCE_
<android.hardware.location.ContextHubInfo: java.lang.String getName()> -> _SOURCE_
<android.os.UserManager: int getUserRestrictionSource(java.lang.String,android.os.UserHandle)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getTypeAllocationCode()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
<android.widget.Editor$PinnedPopupWindow: boolean isShowing()> -> _SOURCE_
<android.telephony.NetworkRegistrationInfo: boolean isEmergencyEnabled()> -> _SOURCE_
<android.bluetooth.IBluetoothPan$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.hardware.soundtrigger.IRecognitionStatusCallback$Stub: android.hardware.soundtrigger.IRecognitionStatusCallback getDefaultImpl()> -> _SOURCE_
<android.app.VoiceInteractor$AbortVoiceRequest: java.lang.String getRequestTypeName()> -> _SOURCE_
<android.hardware.display.DeviceProductInfo: java.lang.Integer getModelYear()> -> _SOURCE_
<android.telephony.SmsMessage: java.lang.String getPseudoSubject()> -> _SOURCE_
<android.hardware.radio.RadioManager$FmBandConfig: boolean getEa()> -> _SOURCE_
<android.telephony.ims.aidl.IImsMmTelFeature$Stub$Proxy: com.android.ims.internal.IImsEcbm getEcbmInterface()> -> _SOURCE_
<android.media.RingtoneManager: android.net.Uri getRingtoneUri(int)> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isImsRegistered(int)> -> _SOURCE_
<android.app.ApplicationPackageManager: java.util.List getInstalledPackages(int)> -> _SOURCE_
<android.os.IIncidentCompanion$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.admin.StartInstallingUpdateCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.media.projection.MediaProjection: android.media.projection.IMediaProjection getProjection()> -> _SOURCE_
<android.telephony.SmsMessage: android.telephony.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,short,byte[],boolean)> -> _SOURCE_
<android.view.autofill.AutofillPopupWindow$2: android.view.View getRootView()> -> _SOURCE_
<android.app.Notification$MessagingStyle$Message: android.os.Bundle[] getBundleArrayForMessages(java.util.List)> -> _SOURCE_
<com.android.internal.view.menu.MenuItemImpl: java.lang.CharSequence getTitleCondensed()> -> _SOURCE_
<android.os.UserManager: boolean isUserUnlockingOrUnlocked(int)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: android.os.IBinder asBinder()> -> _SOURCE_
<android.view.SurfaceControlViewHost: android.view.WindowlessWindowManager getWindowlessWM()> -> _SOURCE_
<android.bluetooth.IBluetoothHeadsetClient$Stub: android.bluetooth.IBluetoothHeadsetClient getDefaultImpl()> -> _SOURCE_
<android.media.RingtoneManager: int getDefaultType(android.net.Uri)> -> _SOURCE_
<android.media.session.MediaSession: android.media.session.MediaSessionManager$RemoteUserInfo getCurrentControllerInfo()> -> _SOURCE_
<android.location.LocationManager$GetCurrentLocationTransport: java.lang.String getListenerId()> -> _SOURCE_
<android.widget.RemoteViews$RemoteViewsContextWrapper: java.lang.String getPackageName()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getAidForAppType(int)> -> _SOURCE_
<android.app.KeyguardManager: boolean isDeviceLocked()> -> _SOURCE_
<android.os.UserManager: boolean isQuietModeEnabled(android.os.UserHandle)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.content.ContentValues: boolean isEmpty()> -> _SOURCE_
<android.media.IRingtonePlayer$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telephony.CellIdentityGsm: int getChannelNumber()> -> _SOURCE_
<android.service.textclassifier.ITextClassifierService$Stub: android.service.textclassifier.ITextClassifierService getDefaultImpl()> -> _SOURCE_
<android.telephony.SmsMessage: int[] calculateLength(java.lang.String,boolean,int)> -> _SOURCE_
<android.telephony.SubscriptionManager: void <clinit>()> -> _SOURCE_
<android.location.ILocationManager$Stub$Proxy: java.util.List getAllProviders()> -> _SOURCE_
<android.location.GnssMeasurement: double getCn0DbHz()> -> _SOURCE_
<android.location.GnssClock: double getBiasUncertaintyNanos()> -> _SOURCE_
<android.view.InsetsSource: android.graphics.Rect getFrame()> -> _SOURCE_
<android.hardware.fingerprint.FingerprintManager$CryptoObject: javax.crypto.Cipher getCipher()> -> _SOURCE_
<android.app.ActivityManager: boolean isLowMemoryKillReportSupported()> -> _SOURCE_
<android.app.Person: java.lang.CharSequence getName()> -> _SOURCE_
<android.webkit.WebResourceResponse: java.lang.String getReasonPhrase()> -> _SOURCE_
<android.app.Fragment: android.app.SharedElementCallback getEnterTransitionCallback()> -> _SOURCE_
<android.widget.FrameLayout: java.lang.CharSequence getAccessibilityClassName()> -> _SOURCE_
<com.android.internal.telephony.ISub$Stub$Proxy: android.os.ParcelUuid createSubscriptionGroup(int[],java.lang.String)> -> _SOURCE_
<android.app.usage.ExternalStorageStats: long getVideoBytes()> -> _SOURCE_
<android.app.INotificationManager$Stub$Proxy: android.content.ComponentName getAllowedNotificationAssistantForUser(int)> -> _SOURCE_
<com.android.internal.app.IAppOpsService$Default: java.util.List getUidOps(int,int[])> -> _SOURCE_
<android.view.ViewGroup$1: android.view.MenuInflater getMenuInflater()> -> _SOURCE_
<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getApplicationIcon(java.lang.String)> -> _SOURCE_
<android.app.IActivityTaskManager$Default: java.util.List getTasks(int)> -> _SOURCE_
<android.bluetooth.BluetoothHeadset: boolean isInbandRingingEnabled()> -> _SOURCE_
<android.telephony.TelephonyManager: java.util.Map getEmergencyNumberList()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.bluetooth.BluetoothPbapClient: java.util.List getConnectedDevices()> -> _SOURCE_
<android.media.session.ISessionController$Default: android.app.PendingIntent getLaunchPendingIntent()> -> _SOURCE_
<com.android.internal.os.IResultReceiver$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.internal.telephony.IMms$Stub: com.android.internal.telephony.IMms getDefaultImpl()> -> _SOURCE_
<android.provider.DeviceConfig: java.util.List getPublicNamespaces()> -> _SOURCE_
<com.android.internal.telephony.CellNetworkScanResult: java.util.List getOperators()> -> _SOURCE_
<com.android.internal.telephony.euicc.IGetEuiccChallengeCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.UiAutomation: android.view.WindowAnimationFrameStats getWindowAnimationFrameStats()> -> _SOURCE_
<android.animation.ValueAnimator: long getCurrentPlayTime()> -> _SOURCE_
<android.nfc.cardemulation.ApduServiceInfo: java.util.List getPrefixAids()> -> _SOURCE_
<android.os.IUserRestrictionsListener$Stub: android.os.IUserRestrictionsListener getDefaultImpl()> -> _SOURCE_
<android.app.backup.IBackupManager$Default: java.lang.String[] getTransportWhitelist()> -> _SOURCE_
<android.content.pm.parsing.component.ParsedProcess: java.util.Set getDeniedPermissions()> -> _SOURCE_
<android.view.VelocityTracker: float getYVelocity()> -> _SOURCE_
<android.telephony.CellIdentityCdma: int getBasestationId()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.lang.String iccTransmitApduLogicalChannelBySlot(int,int,int,int,int,int,int,java.lang.String)> -> _SOURCE_
<android.webkit.IWebViewUpdateService$Stub$Proxy: android.content.pm.PackageInfo getCurrentWebViewPackage()> -> _SOURCE_
<android.app.usage.UsageStatsManager: android.app.usage.UsageEvents queryEvents(long,long)> -> _SOURCE_
<android.text.Layout: android.text.Layout$Alignment getParagraphAlignment(int)> -> _SOURCE_
<android.content.ISyncStatusObserver$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.accessibilityservice.AccessibilityService: java.util.List getSystemActions()> -> _SOURCE_
<android.service.notification.StatusBarNotification: java.lang.String getPackageName()> -> _SOURCE_
<android.os.IThermalService$Stub$Proxy: android.os.CoolingDevice[] getCurrentCoolingDevices()> -> _SOURCE_
<android.os.StatFs: long getBlockSizeLong()> -> _SOURCE_
<android.telephony.SubscriptionManager: int getAllSubscriptionInfoCount()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: android.os.UserHandle getDeviceOwnerUser()> -> _SOURCE_
<android.os.IDeviceIdleController$Default: java.lang.String[] getUserPowerWhitelist()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean isIccLockEnabled(int)> -> _SOURCE_
<android.widget.AbsListView$InputConnectionWrapper: android.view.inputmethod.ExtractedText getExtractedText(android.view.inputmethod.ExtractedTextRequest,int)> -> _SOURCE_
<android.media.tv.TvInputHardwareInfo: java.lang.String getAudioAddress()> -> _SOURCE_
<android.app.prediction.AppTarget: android.os.UserHandle getUser()> -> _SOURCE_
<android.content.pm.PackageManager: java.util.List getInstalledModules(int)> -> _SOURCE_
<android.app.ContextImpl: java.io.File[] getObbDirs()> -> _SOURCE_
<com.android.internal.view.menu.ActionMenuItem: android.view.ActionProvider getActionProvider()> -> _SOURCE_
<com.android.internal.textservice.ISpellCheckerSession$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.widget.Editor: android.view.ActionMode getTextActionMode()> -> _SOURCE_
<android.app.Notification$MessagingStyle$Message: android.net.Uri getDataUri()> -> _SOURCE_
<android.hardware.camera2.legacy.RequestHolder: java.util.Collection getHolderTargets()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getCarrierIdFromMccMnc(int,java.lang.String,boolean)> -> _SOURCE_
<android.app.Notification$MessagingStyle: android.app.Person getUser()> -> _SOURCE_
<android.app.backup.IBackupManager$Stub$Proxy: android.content.Intent getDataManagementIntent(java.lang.String)> -> _SOURCE_
<android.view.textclassifier.TextClassification: java.lang.String getText()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.util.List getInstalledPackagesAsUser(int,int)> -> _SOURCE_
<android.os.UserManager: java.lang.String getSeedAccountType()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.content.pm.LauncherApps: java.util.List getAllPackageInstallerSessions()> -> _SOURCE_
<android.nfc.NfcActivityManager: android.nfc.NfcActivityManager$NfcActivityState getActivityState(android.app.Activity)> -> _SOURCE_
<android.media.AudioPlaybackConfiguration: android.media.PlayerProxy getPlayerProxy()> -> _SOURCE_
<android.app.assist.AssistStructure$ViewNode: java.lang.CharSequence[] getAutofillOptions()> -> _SOURCE_
<android.print.IPrintDocumentAdapterObserver$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.content.pm.parsing.component.ParsedPermission: java.lang.String getGroup()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getCrossProfileCalendarPackagesForUser(int)> -> _SOURCE_
<android.app.servertransaction.ClientTransaction: android.os.IBinder getActivityToken()> -> _SOURCE_
<android.telephony.RadioAccessSpecifier: int[] getBands()> -> _SOURCE_
<android.graphics.drawable.ColorStateListDrawable: android.graphics.ColorFilter getColorFilter()> -> _SOURCE_
<android.media.AudioRecord: android.media.AudioRecordingConfiguration getActiveRecordingConfiguration()> -> _SOURCE_
<android.net.lowpan.ILowpanNetScanCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.content.pm.IPackageInstallerSessionFileSystemConnector$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.bluetooth.IBluetoothManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.os.Environment: java.lang.String getExternalStorageState()> -> _SOURCE_
<android.bluetooth.IBluetoothMapClient$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.media.MediaFormat: java.nio.ByteBuffer getByteBuffer(java.lang.String)> -> _SOURCE_
<android.hardware.location.ContextHubInfo: java.lang.String getVendor()> -> _SOURCE_
<android.graphics.Paint: android.graphics.Xfermode getXfermode()> -> _SOURCE_
<android.print.IPrintManager$Default: java.util.List getPrintServices(int,int)> -> _SOURCE_
<android.os.PowerManager: int getMaximumScreenBrightnessSetting()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.content.pm.SharedLibraryInfo: java.lang.String getName()> -> _SOURCE_
<android.media.MicrophoneInfo: java.lang.String getDescription()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getLine1AlphaTag()> -> _SOURCE_
<android.content.ContextWrapper: android.graphics.drawable.Drawable getWallpaper()> -> _SOURCE_
<android.permission.PermissionControllerManager: void getPermissionUsages(boolean,long,java.util.concurrent.Executor,android.permission.PermissionControllerManager$OnPermissionUsageResultCallback)> -> _SOURCE_
<android.service.notification.NotificationListenerService: android.service.notification.StatusBarNotification[] getActiveNotifications(java.lang.String[],int)> -> _SOURCE_
<com.android.server.SystemConfig: android.util.ArraySet getAppDataIsolationWhitelistedApps()> -> _SOURCE_
<com.android.internal.view.menu.CascadingMenuPopup$CascadingMenuInfo: android.widget.ListView getListView()> -> _SOURCE_
<android.view.textclassifier.SelectionEvent: android.view.textclassifier.TextClassificationSessionId getSessionId()> -> _SOURCE_
<android.net.IpConfiguration: android.net.StaticIpConfiguration getStaticIpConfiguration()> -> _SOURCE_
<android.view.GestureExclusionTracker$GestureExclusionViewInfo: android.view.View getView()> -> _SOURCE_
<android.content.pm.PackageInstaller$SessionInfo: boolean getInstallAsVirtualPreload()> -> _SOURCE_
<android.graphics.drawable.GradientDrawable: float getCornerRadius()> -> _SOURCE_
<com.android.internal.policy.IKeyguardDismissCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.provider.Settings$Global: float getFloat(android.content.ContentResolver,java.lang.String,float)> -> _SOURCE_
<android.telephony.SmsCbCmasInfo: java.lang.String toString()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: long getLastNetworkLogRetrievalTime()> -> _SOURCE_
<android.hardware.fingerprint.FingerprintManager$AuthenticationResult: android.hardware.fingerprint.Fingerprint getFingerprint()> -> _SOURCE_
<android.widget.Magnifier: android.graphics.Bitmap getContent()> -> _SOURCE_
<com.android.internal.telephony.ITelephonyRegistry$Default: android.os.IBinder asBinder()> -> _SOURCE_
<android.content.pm.PackageInstaller$SessionInfo: boolean getRequestDowngrade()> -> _SOURCE_
<android.content.pm.DataLoaderParams: java.lang.String getArguments()> -> _SOURCE_
<android.telephony.TelephonyHistogram: int getMinTime()> -> _SOURCE_
<android.app.job.JobInfo: long getTriggerContentMaxDelay()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.util.List getBindDeviceAdminTargetUsers(android.content.ComponentName)> -> _SOURCE_
<com.android.internal.telephony.gsm.SmsMessage$PduParser: com.android.internal.telephony.SmsHeader getUserDataHeader()> -> _SOURCE_
<android.telephony.CellInfo: android.telephony.CellInfo create(android.hardware.radio.V1_2.CellInfo)> -> _SOURCE_
<android.os.TimestampedValue: long getReferenceTimeMillis()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg: android.util.ArrayMap getServiceStats()> -> _SOURCE_
<android.telecom.TelecomManager: android.telecom.PhoneAccountHandle getUserSelectedOutgoingPhoneAccount()> -> _SOURCE_
<android.bluetooth.IBluetoothHearingAid$Stub$Proxy: java.util.List getActiveDevices()> -> _SOURCE_
<android.widget.CompoundButton: java.lang.CharSequence getAccessibilityClassName()> -> _SOURCE_
<android.accounts.IAccountAuthenticator$Stub: android.accounts.IAccountAuthenticator getDefaultImpl()> -> _SOURCE_
<android.os.BasicShellCommandHandler: java.io.InputStream getRawInputStream()> -> _SOURCE_
<android.content.UndoOwner: java.lang.Object getData()> -> _SOURCE_
<android.telephony.CellIdentityLte: java.util.Set getAdditionalPlmns()> -> _SOURCE_
<android.app.PropertyInvalidatedCache: java.util.ArrayList getActiveCaches()> -> _SOURCE_
<android.media.AudioFocusRequest: android.os.Handler getOnAudioFocusChangeListenerHandler()> -> _SOURCE_
<android.hardware.face.IFaceService$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.view.menu.MenuBuilder: java.lang.CharSequence getHeaderTitle()> -> _SOURCE_
<android.app.Notification$Action: android.app.RemoteInput[] getRemoteInputs()> -> _SOURCE_
<android.net.INetworkStatsSession$Stub$Proxy: android.net.NetworkStats getDeviceSummaryForNetwork(android.net.NetworkTemplate,long,long)> -> _SOURCE_
<android.hardware.display.IColorDisplayManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.widget.CompoundButton: android.graphics.drawable.Drawable getButtonDrawable()> -> _SOURCE_
<android.os.Environment: java.io.File getExternalStorageDirectory()> -> _SOURCE_
<android.telecom.Logging.Session: java.lang.String getNextChildId()> -> _SOURCE_
<com.android.internal.telephony.euicc.ISwitchToProfileCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.companion.CompanionDeviceManager: java.util.List getAssociations()> -> _SOURCE_
<android.telephony.SignalStrength: int getTdScdmaDbm()> -> _SOURCE_
<android.content.pm.PackagePartitions$SystemPartition: java.io.File getAppFolder()> -> _SOURCE_
<android.os.Process: long getStartElapsedRealtime()> -> _SOURCE_
<android.app.WallpaperManager: android.app.WallpaperManager getInstance(android.content.Context)> -> _SOURCE_
<android.security.keystore.AndroidKeyStorePublicKey: byte[] getEncoded()> -> _SOURCE_
<android.net.LinkAddress: java.net.InetAddress getAddress()> -> _SOURCE_
<android.app.assist.AssistStructure$ViewNode: java.lang.String getTextIdEntry()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: android.util.ArrayMap getWakelockStats()> -> _SOURCE_
<android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getConversationsForPackage(java.lang.String,int)> -> _SOURCE_
<android.hardware.hdmi.IHdmiControlService$Stub$Proxy: int[] getSupportedTypes()> -> _SOURCE_
<android.telephony.PhoneNumberUtils: java.lang.String formatNumber(java.lang.String,int)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean isCapable(int,int,int)> -> _SOURCE_
<android.os.IThermalEventListener$Stub: android.os.IThermalEventListener getDefaultImpl()> -> _SOURCE_
<android.media.Rating: float getStarRating()> -> _SOURCE_
<android.app.backup.IFullBackupRestoreObserver$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isSeparateProfileChallengeAllowed(int)> -> _SOURCE_
<android.app.Notification: android.content.LocusId getLocusId()> -> _SOURCE_
<android.service.autofill.FillEventHistory$Event: java.util.Map getChangedFields()> -> _SOURCE_
<com.android.internal.compat.CompatibilityChangeInfo: boolean getLoggingOnly()> -> _SOURCE_
<android.hardware.usb.UsbManager: android.hardware.usb.UsbPortStatus getPortStatus(android.hardware.usb.UsbPort)> -> _SOURCE_
<android.bluetooth.IBluetoothHeadsetClient$Stub$Proxy: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
<com.android.server.SystemConfig: int[] getGlobalGids()> -> _SOURCE_
<android.text.SpannableStringBuilder: android.text.InputFilter[] getFilters()> -> _SOURCE_
<android.telephony.CellIdentityWcdma$1: android.telephony.CellIdentityWcdma createFromParcel(android.os.Parcel)> -> _SOURCE_
<android.service.notification.NotificationListenerService: android.service.notification.StatusBarNotification[] getSnoozedNotifications()> -> _SOURCE_
<android.view.KeyEvent: java.lang.String getCharacters()> -> _SOURCE_
<android.net.NetworkCapabilities: android.net.NetworkSpecifier getNetworkSpecifier()> -> _SOURCE_
<android.net.lowpan.LowpanChannelInfo: java.lang.String getName()> -> _SOURCE_
<android.content.IContentService$Stub$Proxy: android.content.SyncStatusInfo getSyncStatusAsUser(android.accounts.Account,java.lang.String,android.content.ComponentName,int)> -> _SOURCE_
<android.content.res.GradientColor: android.content.res.ConstantState getConstantState()> -> _SOURCE_
<android.net.INetworkPolicyManager$Stub$Proxy: android.net.NetworkPolicy[] getNetworkPolicies(java.lang.String)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: int getPasswordMinimumSymbols(android.content.ComponentName,int)> -> _SOURCE_
<android.content.res.FontResourcesParser$FontFamilyFilesResourceEntry: android.content.res.FontResourcesParser$FontFileResourceEntry[] getEntries()> -> _SOURCE_
<android.os.Debug: int getThreadExternalAllocSize()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Default: boolean getAutoTimeRequired()> -> _SOURCE_
<android.media.MediaRouter$Static: android.view.Display[] getAllPresentationDisplays()> -> _SOURCE_
<android.os.incremental.IIncrementalServiceConnector$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.content.pm.InstallSourceInfo: java.lang.String getInitiatingPackageName()> -> _SOURCE_
<android.os.UserManager: boolean isSplitSystemUser()> -> _SOURCE_
<android.widget.Magnifier: float getElevation()> -> _SOURCE_
<android.content.ContentProvider$Transport: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)> -> _SOURCE_
<android.content.Intent: android.content.Intent getIntent(java.lang.String)> -> _SOURCE_
<android.media.SyncParams: float getFrameRate()> -> _SOURCE_
<android.os.FileUtils$MemoryPipe: java.io.FileDescriptor getInternalFD()> -> _SOURCE_
<android.telephony.NetworkScanRequest: int getSearchPeriodicity()> -> _SOURCE_
<android.view.contentcapture.ContentCaptureEvent: android.view.contentcapture.ViewNode getViewNode()> -> _SOURCE_
<android.transition.ArcMotion: float getMinimumHorizontalAngle()> -> _SOURCE_
<android.content.pm.ILauncherApps$Stub$Proxy: android.content.IntentSender getShortcutConfigActivityIntent(java.lang.String,android.content.ComponentName,android.os.UserHandle)> -> _SOURCE_
<android.print.PrinterDiscoverySession: java.util.List getPrinters()> -> _SOURCE_
<android.hardware.location.NanoAppInstanceInfo: int[] getNeededSensors()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getNetworkTypeName()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.widget.PopupWindow: android.view.View getAnchor()> -> _SOURCE_
<android.app.usage.NetworkStatsManager: android.app.usage.NetworkStats$Bucket querySummaryForDevice(int,java.lang.String,long,long)> -> _SOURCE_
<android.view.InsetsAnimationControlImpl: android.graphics.Insets getShownStateInsets()> -> _SOURCE_
<android.app.WallpaperManager: android.app.WallpaperColors getWallpaperColors(int,int)> -> _SOURCE_
<android.content.ContextWrapper: android.os.IBinder getActivityToken()> -> _SOURCE_
<com.android.internal.util.AsyncService: android.os.Handler getHandler()> -> _SOURCE_
<android.content.pm.IShortcutService$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.telephony.euicc.IListNotificationsCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.TelephonyManager: void unregisterImsFeatureCallback(int,int,com.android.ims.internal.IImsServiceFeatureCallback)> -> _SOURCE_
<android.content.pm.IPinItemRequest$Stub$Proxy: android.os.Bundle getExtras()> -> _SOURCE_
<android.telephony.CallQuality: boolean isRtpInactivityDetected()> -> _SOURCE_
<android.content.pm.PackagePartitions$SystemPartition: java.io.File getFolder()> -> _SOURCE_
<android.os.storage.IStorageEventListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.ActivityTaskManager: int getMaxAppRecentsLimitStatic()> -> _SOURCE_
<android.telephony.CellIdentityGsm: int getCid()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: long getLastBugReportRequestTime()> -> _SOURCE_
<android.accessibilityservice.IAccessibilityServiceConnection$Stub$Proxy: java.util.List getSystemActions()> -> _SOURCE_
<android.hardware.display.IColorDisplayManager$Default: android.hardware.display.Time getNightDisplayCustomStartTime()> -> _SOURCE_
<android.os.UserManager: int getUserBadgeColor(int)> -> _SOURCE_
<android.telephony.mbms.FileServiceInfo: java.util.List getFiles()> -> _SOURCE_
<android.net.NetworkCapabilities: java.lang.String getRequestorPackageName()> -> _SOURCE_
<android.hardware.Camera$Parameters: java.util.List getSupportedFocusModes()> -> _SOURCE_
<android.media.session.ISessionController$Default: android.os.Bundle getSessionInfo()> -> _SOURCE_
<android.telephony.ServiceState: android.telephony.NetworkRegistrationInfo getNetworkRegistrationInfo(int,int)> -> _SOURCE_
<android.media.session.MediaSessionManager: android.media.session.ISession createSession(android.media.session.MediaSession$CallbackStub,java.lang.String,android.os.Bundle)> -> _SOURCE_
<android.telephony.CellSignalStrengthCdma: int getCdmaDbm()> -> _SOURCE_
<android.telephony.TelephonyManager: java.util.List getTelephonyHistograms()> -> _SOURCE_
<com.android.internal.os.IDropBoxManagerService$Stub$Proxy: android.os.DropBoxManager$Entry getNextEntry(java.lang.String,long,java.lang.String)> -> _SOURCE_
<android.view.inputmethod.InputMethodManager: boolean isActive()> -> _SOURCE_
<android.app.ITransientNotification$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.view.contentcapture.ContentCaptureEvent: android.view.autofill.AutofillId getId()> -> _SOURCE_
<android.app.admin.NetworkEvent: long getTimestamp()> -> _SOURCE_
<android.content.pm.PackageInstaller$SessionInfo: int[] getChildSessionIds()> -> _SOURCE_
<com.android.internal.policy.PhoneWindow: android.transition.Scene getContentScene()> -> _SOURCE_
<android.bluetooth.IBluetooth$Stub$Proxy: java.lang.String getAddress()> -> _SOURCE_
<android.widget.AccessibilityIterators$LineTextSegmentIterator: android.widget.AccessibilityIterators$LineTextSegmentIterator getInstance()> -> _SOURCE_
<android.hardware.biometrics.IAuthService$Stub$Proxy: long[] getAuthenticatorIds()> -> _SOURCE_
<android.content.pm.dex.ArtManager: boolean isRuntimeProfilingEnabled(int)> -> _SOURCE_
<android.telecom.TelecomManager: android.telecom.PhoneAccountHandle getConnectionManager()> -> _SOURCE_
<android.net.PlatformVpnProfile: java.lang.String getTypeString()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.location.ICountryListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.text.method.DigitsKeyListener: android.text.method.DigitsKeyListener getInstance()> -> _SOURCE_
<android.view.inputmethod.InputContentInfo: android.content.ClipDescription getDescription()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: java.lang.String[] getMergedImsisFromGroup(int,java.lang.String)> -> _SOURCE_
<android.os.storage.StorageManager: android.os.storage.StorageVolume getPrimaryVolume(android.os.storage.StorageVolume[])> -> _SOURCE_
<android.hardware.radio.IRadioService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.internal.os.IDropBoxManagerService$Stub: com.android.internal.os.IDropBoxManagerService getDefaultImpl()> -> _SOURCE_
<android.app.admin.DnsEvent: java.lang.String getHostname()> -> _SOURCE_
<android.bluetooth.IBluetoothManager$Stub$Proxy: java.util.List getSystemConfigEnabledProfilesForPackage(java.lang.String)> -> _SOURCE_
<android.os.storage.VolumeRecord: java.lang.String getNormalizedFsUuid()> -> _SOURCE_
<android.os.storage.StorageManager: long getStorageFullBytes(java.io.File)> -> _SOURCE_
<android.media.tv.TvInputManager: java.util.List getBlockedRatings()> -> _SOURCE_
<android.location.GpsNavigationMessageEvent: android.location.GpsNavigationMessage getNavigationMessage()> -> _SOURCE_
<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getActivityBanner(android.content.Intent)> -> _SOURCE_
<android.content.pm.InstallSourceInfo: java.lang.String getOriginatingPackageName()> -> _SOURCE_
<android.telephony.UiccSlotInfo: int getCardStateInfo()> -> _SOURCE_
<android.telephony.SignalStrength: int getDbm()> -> _SOURCE_
<android.app.Notification$CarExtender$UnreadConversation: android.app.PendingIntent getReadPendingIntent()> -> _SOURCE_
<android.content.ClipboardManager: java.lang.CharSequence getText()> -> _SOURCE_
<android.app.ActivityManager: java.util.Collection getSupportedLocales()> -> _SOURCE_
<android.telephony.RadioAccessSpecifier: int getRadioAccessNetwork()> -> _SOURCE_
<android.hardware.hdmi.HdmiControlManager: int getPhysicalAddress()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.hardware.cas.V1_2.IMediaCasService$Stub: android.internal.hidl.base.V1_0.DebugInfo getDebugInfo()> -> _SOURCE_
<android.app.AppOpsManager: java.lang.String getUidStateName(int)> -> _SOURCE_
<android.nfc.Tag: byte[] getId()> -> _SOURCE_
<android.app.FragmentManagerImpl: android.app.Fragment getPrimaryNavigationFragment()> -> _SOURCE_
<com.android.internal.telephony.euicc.IEuiccCardController$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telephony.PreciseDataConnectionState: int getDataConnectionFailCause()> -> _SOURCE_
<android.net.NetworkQuotaInfo: long getEstimatedBytes()> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: boolean getLeAccess()> -> _SOURCE_
<android.hardware.display.ColorDisplayManager$ColorDisplayManagerInternal: boolean isNightDisplayActivated()> -> _SOURCE_
<android.view.WindowManager$LayoutParams: java.lang.CharSequence getTitle()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: java.lang.String getCurrentPackageName()> -> _SOURCE_
<android.os.BasicShellCommandHandler: java.lang.String getNextArg()> -> _SOURCE_
<android.database.sqlite.SQLiteCompatibilityWalFlags: java.lang.String getWALSyncMode()> -> _SOURCE_
<android.telephony.UiccCardInfo: android.telephony.UiccCardInfo getUnprivileged()> -> _SOURCE_
<android.os.connectivity.WifiBatteryStats: long getTxTimeMillis()> -> _SOURCE_
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.ActivityTransitionCoordinator: android.view.ViewGroup getDecor()> -> _SOURCE_
<android.os.storage.StorageVolume: java.io.File getPathFile()> -> _SOURCE_
<android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getConversations(boolean)> -> _SOURCE_
<android.content.pm.ShortcutInfo: long getLastChangedTimestamp()> -> _SOURCE_
<android.os.IVold$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.app.IBatteryStats$Stub$Proxy: android.os.ParcelFileDescriptor getStatisticsStream()> -> _SOURCE_
<android.view.contentcapture.ContentCaptureEvent: java.lang.CharSequence getText()> -> _SOURCE_
<android.app.blob.IBlobStoreManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.graphics.drawable.VectorDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getNetworkCountryIso()> -> _SOURCE_
<android.os.UserManager: android.os.Bundle getApplicationRestrictions(java.lang.String)> -> _SOURCE_
<android.location.GnssClock: double getTimeUncertaintyNanos()> -> _SOURCE_
<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder createRecurringDaily(java.time.ZonedDateTime)> -> _SOURCE_
<com.android.internal.telephony.SmsHeader: byte[] toByteArray(com.android.internal.telephony.SmsHeader)> -> _SOURCE_
<android.hardware.usb.UsbManager: long usbFunctionsFromString(java.lang.String)> -> _SOURCE_
<android.text.method.TextKeyListener: android.text.method.TextKeyListener getInstance()> -> _SOURCE_
<android.window.IWindowContainerTransactionCallback$Stub: android.window.IWindowContainerTransactionCallback getDefaultImpl()> -> _SOURCE_
<com.android.internal.telephony.ISms$Stub$Proxy: android.os.Bundle getCarrierConfigValuesForSubscriber(int)> -> _SOURCE_
<android.telephony.SmsCbLocation: java.lang.String toString()> -> _SOURCE_
<android.inputmethodservice.ExtractEditText: boolean isFocused()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: boolean isApnMetered(int,int)> -> _SOURCE_
<android.security.AttestedKeyPair: java.security.KeyPair getKeyPair()> -> _SOURCE_
<android.print.PrintJobInfo: java.lang.String getAdvancedStringOption(java.lang.String)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.telephony.mbms.MbmsTempFileProvider: java.lang.String getType(android.net.Uri)> -> _SOURCE_
<android.util.apk.WrappedX509Certificate: boolean[] getKeyUsage()> -> _SOURCE_
<android.os.Environment: java.io.File getDataPreloadsDirectory()> -> _SOURCE_
<android.hardware.camera2.impl.CameraOfflineSessionImpl: android.hardware.camera2.impl.CameraOfflineSessionImpl$CameraDeviceCallbacks getCallbacks()> -> _SOURCE_
<android.nfc.NdefRecord: byte[] getId()> -> _SOURCE_
<android.media.IMediaRouterClient$Stub: android.media.IMediaRouterClient getDefaultImpl()> -> _SOURCE_
<android.service.persistentdata.IPersistentDataBlockService$Default: long getMaximumDataBlockSize()> -> _SOURCE_
<android.database.sqlite.SQLiteCursor: java.lang.String[] getColumnNames()> -> _SOURCE_
<android.telephony.ImsiEncryptionInfo: int describeContents()> -> _SOURCE_
<android.security.keystore.ICredstoreTokenCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.usage.StorageStatsManager: long getCacheQuotaBytes(java.lang.String,int)> -> _SOURCE_
<android.telephony.SubscriptionManager: boolean lambda$getActiveSubscriptionInfoList$1$SubscriptionManager(android.telephony.SubscriptionInfo)> -> _SOURCE_
<android.media.IMediaHTTPConnection$Stub$Proxy: java.lang.String getUri()> -> _SOURCE_
<android.hardware.location.ContextHubInfo: long getChrePlatformId()> -> _SOURCE_
<android.hardware.location.IContextHubCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.bluetooth.IBluetoothAvrcpController$Default: java.util.List getConnectedDevices()> -> _SOURCE_
<android.net.lowpan.LowpanInterface: android.net.lowpan.LowpanChannelInfo[] getSupportedChannels()> -> _SOURCE_
<android.telephony.TelephonyManager: int getCarrierPrivilegeStatus(int)> -> _SOURCE_
<android.content.pm.ApplicationInfo: java.lang.String[] getSplitCodePaths()> -> _SOURCE_
<android.database.CursorWrapper: android.os.Bundle getExtras()> -> _SOURCE_
<android.telecom.PhoneAccount: java.lang.CharSequence getShortDescription()> -> _SOURCE_
<android.os.UserManager: int getUserHandle(int)> -> _SOURCE_
<android.media.Image: android.hardware.HardwareBuffer getHardwareBuffer()> -> _SOURCE_
<android.os.incremental.IncrementalManager: android.os.incremental.IncrementalStorage openStorage(java.lang.String)> -> _SOURCE_
<android.view.ScrollCaptureTarget: android.graphics.Rect getScrollBounds()> -> _SOURCE_
<android.content.ContextWrapper: java.io.File getDatabasePath(java.lang.String)> -> _SOURCE_
<android.view.contentcapture.ViewNode: java.lang.CharSequence getContentDescription()> -> _SOURCE_
<android.bluetooth.IBluetoothA2dp$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.widget._$$Lambda$GgAIoNUUH8pNRbtcqGeR1oLuEXw: java.lang.Object get()> -> _SOURCE_
<android.app.Notification$Style: java.lang.CharSequence getHeadsUpStatusBarText()> -> _SOURCE_
<android.app.DirectAction: java.lang.String getId()> -> _SOURCE_
<android.graphics.drawable.Icon: android.graphics.Bitmap getBitmap()> -> _SOURCE_
<android.app.ActivityManager: boolean isSmallBatteryDevice()> -> _SOURCE_
<android.media.soundtrigger_middleware.ISoundTriggerMiddlewareService$Stub: android.media.soundtrigger_middleware.ISoundTriggerMiddlewareService getDefaultImpl()> -> _SOURCE_
<android.os.Environment: java.io.File getExpandDirectory()> -> _SOURCE_
<com.android.internal.graphics.palette.Target: float getTargetSaturation()> -> _SOURCE_
<android.app.LoadedApk$ReceiverDispatcher: android.content.BroadcastReceiver getIntentReceiver()> -> _SOURCE_
<android.content.pm.IPackageInstallerSession$Default: int[] getChildSessionIds()> -> _SOURCE_
<android.telephony.ServiceState: java.lang.String rilRadioTechnologyToString(int)> -> _SOURCE_
<android.content.pm.LauncherActivityInfo: android.content.pm.ApplicationInfo getApplicationInfo()> -> _SOURCE_
<android.os.storage.DiskInfo: java.lang.String getShortDescription()> -> _SOURCE_
<android.view.contentcapture.ContentCaptureEvent: java.util.List getIds()> -> _SOURCE_
<android.hardware.usb.UsbAccessory: java.lang.String getDescription()> -> _SOURCE_
<android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityInteractionClient getInstance()> -> _SOURCE_
<android.nfc.INfcCardEmulation$Stub: android.nfc.INfcCardEmulation getDefaultImpl()> -> _SOURCE_
<android.bluetooth.OobData: byte[] getSecurityManagerTk()> -> _SOURCE_
<android.hardware.camera2.params.SessionConfiguration: android.hardware.camera2.params.InputConfiguration getInputConfiguration()> -> _SOURCE_
<android.service.vr.IVrStateCallbacks$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.net.lowpan.LowpanIdentity: byte[] getXpanid()> -> _SOURCE_
<android.view.autofill.AutofillManager: android.content.ComponentName getAutofillServiceComponentName()> -> _SOURCE_
<android.nfc.INfcTag$Stub: android.nfc.INfcTag getDefaultImpl()> -> _SOURCE_
<android.net.ConnectivityDiagnosticsManager$ConnectivityReport: android.os.PersistableBundle getAdditionalInfo()> -> _SOURCE_
<android.media.session.IOnMediaKeyListener$Stub: android.media.session.IOnMediaKeyListener getDefaultImpl()> -> _SOURCE_
<android.print.IPrintManager$Stub: android.print.IPrintManager getDefaultImpl()> -> _SOURCE_
<android.telephony.ims.ImsRcsManager$AvailabilityCallback: android.telephony.ims.aidl.IImsCapabilityCallback getBinder()> -> _SOURCE_
<android.view.IRemoteAnimationRunner$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.view.Window: android.content.res.TypedArray getWindowStyle()> -> _SOURCE_
<android.telephony.CellIdentityGsm: int getMnc()> -> _SOURCE_
<android.provider.Settings$Bookmarks: java.lang.CharSequence getTitle(android.content.Context,android.database.Cursor)> -> _SOURCE_
<android.media.session.ISessionController$Stub$Proxy: android.media.MediaMetadata getMetadata()> -> _SOURCE_
<com.android.server.SystemConfig: android.util.ArraySet getAllowInPowerSave()> -> _SOURCE_
<android.graphics.Bitmap: android.graphics.ColorSpace getColorSpace()> -> _SOURCE_
<android.media.MediaCodec: android.media.MediaFormat getInputFormat()> -> _SOURCE_
<android.accessibilityservice.AccessibilityService$MagnificationController: float getCenterY()> -> _SOURCE_
<com.android.ims.internal.IImsMultiEndpoint$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telephony.ims.RcsContactUceCapability: java.util.List getCapableExtensionTags()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.util.List queryIntentActivitiesAsUser(android.content.Intent,int,int)> -> _SOURCE_
<android.content.pm.IPackageInstaller$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.hardware.biometrics.IBiometricServiceReceiver$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.hardware.camera2.CaptureFailure: android.hardware.camera2.CaptureRequest getRequest()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.view.autofill.AutofillPopupWindow: android.view.WindowManager$LayoutParams getDecorViewLayoutParams()> -> _SOURCE_
<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()> -> _SOURCE_
<android.hardware.soundtrigger.SoundTriggerModule: android.hardware.soundtrigger.SoundTrigger$ModelParamRange queryParameter(int,int)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: int getCdmaEriIconIndex(java.lang.String,java.lang.String)> -> _SOURCE_
<android.view.AccessibilityIterators$CharacterTextSegmentIterator: android.view.AccessibilityIterators$CharacterTextSegmentIterator getInstance(java.util.Locale)> -> _SOURCE_
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothClass getBluetoothClass()> -> _SOURCE_
<android.telephony.IccOpenLogicalChannelResponse: byte[] getSelectResponse()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.media.MediaCodecInfo: java.lang.String[] getSupportedTypes()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.security.net.config.XmlConfigSource: android.security.net.config.NetworkSecurityConfig getDefaultConfig()> -> _SOURCE_
<android.telephony.TelephonyManager: int getVoiceNetworkType()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.app.ContextImpl: android.os.UserHandle getUser()> -> _SOURCE_
<android.app.role.RoleControllerManager: java.util.concurrent.CompletableFuture lambda$onAddRoleHolder$1(java.lang.String,java.lang.String,int,android.app.role.IRoleController)> -> _SOURCE_
<android.content.om.IOverlayManager$Stub$Proxy: java.util.List getOverlayInfosForTarget(java.lang.String,int)> -> _SOURCE_
<android.app.AppOpsManager$HistoricalOps: long getDurationMillis()> -> _SOURCE_
<com.android.internal.policy.DecorContext: android.content.res.AssetManager getAssets()> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: java.lang.String getRequiredAccountType()> -> _SOURCE_
<android.telephony.CellSignalStrengthCdma: int getEvdoLevel()> -> _SOURCE_
<android.drm.DrmInfo: byte[] getData()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.telephony.CellIdentityCdma: int getNetworkId()> -> _SOURCE_
<android.app.ActivityOptions: android.window.WindowContainerToken getLaunchTaskDisplayArea()> -> _SOURCE_
<android.os.IUserManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.hardware.display.DisplayManagerGlobal: java.util.List getAmbientBrightnessStats()> -> _SOURCE_
<android.telephony.ServiceState: boolean getIsManualSelection()> -> _SOURCE_
<android.media.session.MediaController: java.lang.String getPackageName()> -> _SOURCE_
<android.app.usage.ExternalStorageStats: long getAudioBytes()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<com.android.internal.os.Zygote: java.io.FileDescriptor getUsapPoolEventFD()> -> _SOURCE_
<android.view.ViewGroup: android.view.View getFocusedChild()> -> _SOURCE_
<com.android.ims.internal.IImsUt$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.UiAutomation: android.view.accessibility.AccessibilityNodeInfo getRootInActiveWindow()> -> _SOURCE_
<com.android.internal.util.function.pooled.OmniFunction: java.lang.Object getOrThrow()> -> _SOURCE_
<android.telephony.SignalStrength: int hashCode()> -> _SOURCE_
<android.net.TrafficStats: long getMobileTxBytes()> -> _SOURCE_
<android.os.IDeviceIdentifiersPolicyService$Stub$Proxy: java.lang.String getSerial()> -> _SOURCE_
<com.android.internal.app.WindowDecorActionBar$TabImpl: java.lang.CharSequence getContentDescription()> -> _SOURCE_
<android.os.UserManager: boolean isProfile()> -> _SOURCE_
<android.view.textclassifier.TextLinks$Request: android.os.LocaleList getDefaultLocales()> -> _SOURCE_
<android.app.NotificationChannel: java.lang.CharSequence getName()> -> _SOURCE_
<android.telecom.Log: android.telecom.Logging.Session$Info getExternalSession()> -> _SOURCE_
<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.HdmiSwitchClient getSwitchClient()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$ControllerActivityCounterImpl: android.os.BatteryStats$LongCounter getSleepTimeCounter()> -> _SOURCE_
<android.service.vr.IVrManager$Stub: android.service.vr.IVrManager getDefaultImpl()> -> _SOURCE_
<android.os.IUserManager$Stub$Proxy: long getUserStartRealtime()> -> _SOURCE_
<android.widget.Editor: android.widget.Editor$SelectionModifierCursorController getSelectionController()> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: boolean isLeCodedPhySupported()> -> _SOURCE_
<android.location.GnssReflectingPlane: double getAltitudeMeters()> -> _SOURCE_
<android.security.net.config.ResourceCertificateSource: java.util.Set getCertificates()> -> _SOURCE_
<android.os.SharedMemory: android.os.ParcelFileDescriptor getFdDup()> -> _SOURCE_
<android.graphics.ImageDecoder: boolean getRequireUnpremultiplied()> -> _SOURCE_
<android.hardware.display.IColorDisplayManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.hardware.biometrics.BiometricAuthenticator$AuthenticationResult: android.hardware.biometrics.CryptoObject getCryptoObject()> -> _SOURCE_
<android.view.KeyboardShortcutGroup: java.util.List getItems()> -> _SOURCE_
<android.service.gatekeeper.IGateKeeperService$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.media.RingtoneManager: android.database.Cursor getCursor()> -> _SOURCE_
<android.bluetooth.IBluetoothManager$Stub$Proxy: java.lang.String getName()> -> _SOURCE_
<android.telephony.ims.aidl.IImsRegistration$Stub: android.telephony.ims.aidl.IImsRegistration getDefaultImpl()> -> _SOURCE_
<android.database.sqlite.SQLiteProgram: android.database.sqlite.SQLiteDatabase getDatabase()> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: float getMaxAspectRatio()> -> _SOURCE_
<android.content.pm.LauncherApps: android.content.IntentSender getShortcutConfigActivityIntent(android.content.pm.LauncherActivityInfo)> -> _SOURCE_
<android.content.integrity.AppIntegrityManager: java.util.List getWhitelistedRuleProviders()> -> _SOURCE_
<android.provider.Settings: java.lang.String getPackageNameForUid(android.content.Context,int)> -> _SOURCE_
<android.telephony.ims.aidl.IImsRegistration$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.media.AudioTrack: android.media.PlaybackParams getPlaybackParams()> -> _SOURCE_
<android.util.LauncherIcons$ShadowDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()> -> _SOURCE_
<android.view.IDisplayWindowRotationController$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityWindowInfo getWindow()> -> _SOURCE_
<android.view.ViewRootImpl: android.view.View getAccessibilityFocusedHost()> -> _SOURCE_
<android.view.KeyEvent: android.view.KeyCharacterMap getKeyCharacterMap()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<com.android.internal.telephony.IBooleanConsumer$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.security.keystore.IKeystoreResponseCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.view.AccessibilityIterators$ParagraphTextSegmentIterator: android.view.AccessibilityIterators$ParagraphTextSegmentIterator getInstance()> -> _SOURCE_
<android.net.NetworkScorerAppData: android.content.ComponentName getEnableUseOpenWifiActivity()> -> _SOURCE_
<android.hardware.fingerprint.FingerprintManager: java.util.List getEnrolledFingerprints(int)> -> _SOURCE_
<com.android.internal.telephony.GsmAlphabet: java.lang.String gsm7BitPackedToString(byte[],int,int,int,int,int)> -> _SOURCE_
<com.android.internal.app.IBatteryStats$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.os.BaseBundle: java.lang.String getPairValue()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getVisualVoicemailPackageName()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.content.res.ResourcesImpl: android.content.res.Configuration getConfiguration()> -> _SOURCE_
<android.media.AudioManager: boolean isSilentMode()> -> _SOURCE_
<android.hardware.ICameraService$Stub$Proxy: android.hardware.camera2.utils.ConcurrentCameraIdCombination[] getConcurrentCameraIds()> -> _SOURCE_
<com.android.internal.policy.PhoneWindow: android.transition.Transition getSharedElementReenterTransition()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isLteCdmaEvdoGsmWcdmaEnabled()> -> _SOURCE_
<android.content.pm.parsing.component.ParsedProvider: java.lang.String getReadPermission()> -> _SOURCE_
<android.content.UndoManager: int getUpdateNestingLevel()> -> _SOURCE_
<android.view.Display: java.lang.String getOwnerPackageName()> -> _SOURCE_
<android.telephony.NetworkRegistrationInfo: android.telephony.VoiceSpecificRegistrationInfo getVoiceSpecificInfo()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: long getAllowedNetworkTypes(int)> -> _SOURCE_
<com.android.internal.telephony.ISetOpportunisticDataCallback$Stub: android.os.IBinder asBinder()> -> _SOURCE_
<android.app.DisabledWallpaperManager: android.app.WallpaperInfo getWallpaperInfo(int)> -> _SOURCE_
<android.app.Fragment: boolean getAllowEnterTransitionOverlap()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: java.util.List getAttachedDbs()> -> _SOURCE_
<com.android.net.IProxyService$Stub: com.android.net.IProxyService getDefaultImpl()> -> _SOURCE_
<android.telephony.SmsManager: java.util.ArrayList divideMessage(java.lang.String)> -> _SOURCE_
<android.animation.StateListAnimator: android.animation.Animator getRunningAnimator()> -> _SOURCE_
<com.android.internal.telephony.ICarrierConfigLoader$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: int getCalculatedPreferredNetworkType(java.lang.String,java.lang.String)> -> _SOURCE_
<android.telephony.AccessNetworkConstants: java.lang.String transportTypeToString(int)> -> _SOURCE_
<android.widget.AdapterViewAnimator: android.view.View getCurrentView()> -> _SOURCE_
<android.app.FragmentHostCallback: android.os.Handler getHandler()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getDeviceSoftwareVersion(int)> -> _SOURCE_
<android.content.res.AssetManager: java.util.List getLoaders()> -> _SOURCE_
<android.os.IInstalld$Stub$Proxy: android.os.storage.CrateMetadata[] getAppCrates(java.lang.String,java.lang.String[],int)> -> _SOURCE_
<android.content.pm.PackageInstaller$SessionInfo: boolean getDontKillApp()> -> _SOURCE_
<android.print.IPrintDocumentAdapter$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.os.UserManager: java.util.List getProfiles(int)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean isManualNetworkSelectionAllowed(int)> -> _SOURCE_
<android.app.ContextImpl: android.content.res.Resources getResources()> -> _SOURCE_
<com.android.internal.telephony.SmsApplication$SmsApplicationData: java.lang.String getApplicationName(android.content.Context)> -> _SOURCE_
<android.os.WorkSource$WorkChain: java.lang.String[] getTags()> -> _SOURCE_
<android.view.accessibility.CaptioningManager$CaptionStyle: android.view.accessibility.CaptioningManager$CaptionStyle getCustomStyle(android.content.ContentResolver)> -> _SOURCE_
<android.telephony.UiccCardInfo: java.lang.String getEid()> -> _SOURCE_
<android.telephony.SubscriptionPlan: long getDataUsageTime()> -> _SOURCE_
<android.net.WebAddress: java.lang.String getScheme()> -> _SOURCE_
<android.view.InputDevice$MotionRange: float getFuzz()> -> _SOURCE_
<android.net.TestNetworkManager: android.net.TestNetworkInterface createTapInterface()> -> _SOURCE_
<android.telephony.ModemActivityInfo: int[] getTransmitTimeMillis()> -> _SOURCE_
<android.media.IMediaHTTPService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.CellIdentityLte: int getTac()> -> _SOURCE_
<android.view.inputmethod.InputMethodInfo: java.lang.String getSettingsActivity()> -> _SOURCE_
<android.widget.PopupWindow: boolean getOverlapAnchor()> -> _SOURCE_
<android.telephony.PhoneNumberUtils: java.lang.String extractNetworkPortion(java.lang.String)> -> _SOURCE_
<android.animation.KeyframeSet: java.util.List getKeyframes()> -> _SOURCE_
<android.content.res.XmlBlock$Parser: java.lang.String getPositionDescription()> -> _SOURCE_
<android.app.NotificationChannel: android.net.Uri getSound()> -> _SOURCE_
<android.media.midi.IMidiDeviceServer$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.view.textclassifier.TextClassificationManager: android.view.textclassifier.TextClassifier createTextClassificationSession(android.view.textclassifier.TextClassificationContext)> -> _SOURCE_
<android.app.IActivityManager$Stub$Proxy: java.util.List getRunningAppProcesses()> -> _SOURCE_
<android.content.pm.parsing.component.ParsedComponent: android.os.Bundle getMetaData()> -> _SOURCE_
<android.view.Window: java.util.List getSystemGestureExclusionRects()> -> _SOURCE_
<android.app.assist.AssistContent: android.content.Intent getIntent()> -> _SOURCE_
<com.android.server.SystemConfig: android.util.ArrayMap getAllowedAssociations()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Default: java.util.List getPermittedAccessibilityServices(android.content.ComponentName)> -> _SOURCE_
<android.telephony.ims.feature.ImsFeature: int getFeatureState()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.app.ContextImpl: java.io.File getPreloadsFileCache()> -> _SOURCE_
<android.hardware.hdmi.IHdmiMhlVendorCommandListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telephony.TelephonyManager: void requestCellInfoUpdate(android.os.WorkSource,java.util.concurrent.Executor,android.telephony.TelephonyManager$CellInfoCallback)> -> _SOURCE_
<android.accounts.AccountManager: java.lang.String blockingGetAuthToken(android.accounts.Account,java.lang.String,boolean)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.os.UserManager: boolean isLinkedUser()> -> _SOURCE_
<android.app.EnterTransitionCoordinator: android.transition.Transition getViewsTransition()> -> _SOURCE_
<android.net.LinkProperties: java.util.List getDnsServers()> -> _SOURCE_
<android.security.KeyStore$KeyCharacteristicsCallbackResult: android.security.keystore.KeystoreResponse getKeystoreResponse()> -> _SOURCE_
<android.content.ClipboardManager: android.content.ClipDescription getPrimaryClipDescription()> -> _SOURCE_
<android.hardware.usb.UsbInterface: int getId()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.hardware.camera2.params.Capability: android.util.Size getMaxStreamingSize()> -> _SOURCE_
<android.media.WebVttRenderingWidget$CueLayout: android.media.TextTrackCue getCue()> -> _SOURCE_
<android.view.inputmethod.InputContentInfo: android.net.Uri getLinkUri()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isAlwaysOnVpnLockdownEnabled(android.content.ComponentName)> -> _SOURCE_
<android.media.tv.TvTrackInfo: java.lang.String getLanguage()> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: java.util.List getUsesStaticLibraries()> -> _SOURCE_
<android.security.KeyChain$KeyChainConnection: android.security.IKeyChainService getService()> -> _SOURCE_
<android.bluetooth.le.ScanRecord: java.util.List getServiceUuids()> -> _SOURCE_
<android.bluetooth.le.AdvertiseData: boolean getIncludeDeviceName()> -> _SOURCE_
<android.content.pm.IPackageManager$Stub: android.content.pm.IPackageManager getDefaultImpl()> -> _SOURCE_
<android.telephony.SubscriptionManager: int lambda$setDataRoaming$5(int,int,com.android.internal.telephony.ISub)> -> _SOURCE_
<android.app.IActivityTaskManager$Stub$Proxy: java.util.List getTasks(int)> -> _SOURCE_
<android.widget.TextView$Marquee: float getGhostOffset()> -> _SOURCE_
<android.content.pm.PackageInstaller$Session: int[] getChildSessionIds()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getAlwaysOnVpnLockdownWhitelist(android.content.ComponentName)> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: android.os.ParcelUuid[] getUuids()> -> _SOURCE_
<android.net.ConnectivityDiagnosticsManager$ConnectivityReport: android.net.LinkProperties getLinkProperties()> -> _SOURCE_
<android.content.pm.PackageInstaller$SessionInfo: java.lang.String[] getGrantedRuntimePermissions()> -> _SOURCE_
<android.view.inputmethod.InputMethodSubtype: java.lang.String getLanguageTag()> -> _SOURCE_
<android.app.backup.IRestoreObserver$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.media.MediaRouter$RouteInfo: android.graphics.drawable.Drawable getIconDrawable()> -> _SOURCE_
<android.webkit.IWebViewUpdateService$Default: java.lang.String getCurrentWebViewPackageName()> -> _SOURCE_
<android.content.SyncRequest: android.accounts.Account getAccount()> -> _SOURCE_
<android.permission.PermissionControllerManager: void getRuntimePermissionBackup(android.os.UserHandle,java.util.concurrent.Executor,java.util.function.Consumer)> -> _SOURCE_
<android.app.DisabledWallpaperManager: android.graphics.drawable.Drawable getFastDrawable()> -> _SOURCE_
<android.telephony.mbms.DownloadRequest: android.net.Uri getSourceUri()> -> _SOURCE_
<android.media.IAudioService$Default: java.util.List getAudioVolumeGroups()> -> _SOURCE_
<android.os.INetworkManagementService$Default: boolean getIpForwardingEnabled()> -> _SOURCE_
<android.os.IUserManager$Default: java.util.List getProfiles(int,boolean)> -> _SOURCE_
<android.media.projection.MediaProjectionManager: android.media.projection.MediaProjectionInfo getActiveProjectionInfo()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName(int)> -> _SOURCE_
<android.graphics.Paint: float getShadowLayerDy()> -> _SOURCE_
<android.net.Uri$Part: java.lang.String getEncoded()> -> _SOURCE_
<android.hardware.camera2.CameraManager: java.util.Set getConcurrentCameraIds()> -> _SOURCE_
<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getActivityIcon(android.content.ComponentName)> -> _SOURCE_
<android.media.tv.ITvInputManagerCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.net.StaticIpConfiguration: java.lang.String getDomains()> -> _SOURCE_
<android.telephony.SubscriptionInfo: java.lang.String getIccId()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.net.EthernetManager: android.net.IpConfiguration getConfiguration(java.lang.String)> -> _SOURCE_
<android.os.connectivity.WifiBatteryStats: long getEnergyConsumedMaMillis()> -> _SOURCE_
<android.os.WorkSource$WorkChain: java.lang.String getAttributionTag()> -> _SOURCE_
<android.animation.AnimationHandler: long getFrameDelay()> -> _SOURCE_
<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.contentcapture.ViewNode getNode()> -> _SOURCE_
<android.print.IWriteResultCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.view.inputmethod.InputMethodManager: boolean isCursorAnchorInfoEnabled()> -> _SOURCE_
<android.view.MotionEvent: float getPressure()> -> _SOURCE_
<com.android.internal.app.ISoundTriggerService$Stub$Proxy: android.hardware.soundtrigger.SoundTrigger$ModuleProperties getModuleProperties()> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: java.util.List getFeatureGroups()> -> _SOURCE_
<android.content.UndoManager: android.content.UndoOperation getLastOperation(java.lang.Class,android.content.UndoOwner,int)> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isHearingAidCompatibilitySupported()> -> _SOURCE_
<android.media.soundtrigger.SoundTriggerManager: boolean isRecognitionActive(java.util.UUID)> -> _SOURCE_
<android.hardware.display.IDisplayManager$Stub: android.hardware.display.IDisplayManager getDefaultImpl()> -> _SOURCE_
<android.telephony.SmsMessage: android.telephony.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,java.lang.String,boolean)> -> _SOURCE_
<android.media.AudioManager: java.util.List getAudioProductStrategies()> -> _SOURCE_
<android.net.IConnectivityDiagnosticsCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.internal.telecom.ITelecomService$Default: java.lang.String getSystemDialerPackage()> -> _SOURCE_
<android.media.tv.tunerresourcemanager.IResourcesReclaimListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.INotificationManager$Stub: android.app.INotificationManager getDefaultImpl()> -> _SOURCE_
<android.permission.IPermissionManager$Stub$Proxy: java.util.List getAutoRevokeExemptionGrantedPackages(int)> -> _SOURCE_
<android.app.ISearchManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.Notification$MessagingStyle: java.util.List getMessages()> -> _SOURCE_
<android.view.ViewGroup$1: android.view.Menu getMenu()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.util.List getTrustAgentConfiguration(android.content.ComponentName,android.content.ComponentName)> -> _SOURCE_
<android.app.ApplicationPackageManager: int getApplicationEnabledSetting(java.lang.String)> -> _SOURCE_
<android.view.ViewRootImpl: android.view.ViewParent getParentForAccessibility()> -> _SOURCE_
<android.window.IWindowContainerTransactionCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.role.IRoleManager$Default: java.util.List getRoleHoldersAsUser(java.lang.String,int)> -> _SOURCE_
<android.content.ContentProvider: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)> -> _SOURCE_
<android.net.lowpan.LowpanChannelInfo: float getSpectrumBandwidth()> -> _SOURCE_
<android.app.slice.ISliceManager$Stub$Proxy: byte[] getBackupPayload(int)> -> _SOURCE_
<android.net.RouteInfo: android.net.RouteInfo$RouteKey getRouteKey()> -> _SOURCE_
<android.net.ConnectivityDiagnosticsManager$DataStallReport: android.net.Network getNetwork()> -> _SOURCE_
<android.hardware.display.DisplayManager: java.util.List getAmbientBrightnessStats()> -> _SOURCE_
<android.telephony.CellIdentityWcdma: int getCid()> -> _SOURCE_
<android.content.pm.ILauncherApps$Stub$Proxy: android.content.pm.ParceledListSlice getShortcutConfigActivities(java.lang.String,java.lang.String,android.os.UserHandle)> -> _SOURCE_
<android.telephony.NetworkScanRequest: int getMaxSearchTime()> -> _SOURCE_
<android.hardware.input.InputManager: int isInTabletMode()> -> _SOURCE_
<android.media.midi.IMidiDeviceServer$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.DisabledWallpaperManager: boolean isWallpaperSupported()> -> _SOURCE_
<android.app.contentsuggestions.ContentSelection: java.lang.String getId()> -> _SOURCE_
<android.bluetooth.le.TruncatedFilter: android.bluetooth.le.ScanFilter getFilter()> -> _SOURCE_
<android.bluetooth.BluetoothAvrcpController: java.util.List getConnectedDevices()> -> _SOURCE_
<android.content.IIntentSender$Stub: android.content.IIntentSender getDefaultImpl()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: android.content.Intent createAdminSupportIntent(java.lang.String)> -> _SOURCE_
<android.hardware.display.IDisplayManagerCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.os.IIncidentCompanion$Stub$Proxy: java.util.List getPendingReports()> -> _SOURCE_
<android.content.pm.IPackageMoveObserver$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.provider.Settings$System: float getFloatForUser(android.content.ContentResolver,java.lang.String,int)> -> _SOURCE_
<android.text.Layout: android.text.Layout$Alignment getAlignment()> -> _SOURCE_
<android.view.textclassifier.TextLinks$Request: android.view.textclassifier.SystemTextClassifierMetadata getSystemTextClassifierMetadata()> -> _SOURCE_
<android.permission.IPermissionManager$Stub$Proxy: java.lang.String[] getAppOpPermissionPackages(java.lang.String)> -> _SOURCE_
<android.hardware.radio.ProgramSelector: long[] getVendorIds()> -> _SOURCE_
<android.companion.IFindDeviceCallback$Stub: android.companion.IFindDeviceCallback getDefaultImpl()> -> _SOURCE_
<android.graphics.text.LineBreaker$ParagraphConstraints: float getWidth()> -> _SOURCE_
<android.telecom.TelecomManager: java.util.List getCallCapablePhoneAccounts()> -> _SOURCE_
<android.os.UserManager: android.content.pm.UserInfo findCurrentGuestUser()> -> _SOURCE_
<android.app.admin.FreezePeriod: java.time.MonthDay getEnd()> -> _SOURCE_
<android.accessibilityservice.AccessibilityService: android.accessibilityservice.AccessibilityService$SoftKeyboardController getSoftKeyboardController()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getTelephonyProperty(java.lang.String,java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean isUserDataEnabled(int)> -> _SOURCE_
<android.telephony.CellSignalStrengthTdscdma: int getRscp()> -> _SOURCE_
<android.webkit.WebStorage: android.webkit.WebStorage getInstance()> -> _SOURCE_
<android.bluetooth.IBluetoothHidHost$Default: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
<android.app.backup.IBackupObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.os.IDumpstate$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.nfc.NdefRecord: short getTnf()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: java.lang.String getImsProvisioningString(int,int)> -> _SOURCE_
<android.os.IBatteryPropertiesRegistrar$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isWifiCallingAvailable()> -> _SOURCE_
<com.android.internal.telephony.cdma.SmsMessage: com.android.internal.telephony.SmsConstants$MessageClass getMessageClass()> -> _SOURCE_
<android.media.session.ISessionController$Stub$Proxy: java.lang.CharSequence getQueueTitle()> -> _SOURCE_
<android.graphics.fonts.Font: android.graphics.fonts.FontVariationAxis[] getAxes()> -> _SOURCE_
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice getAllIntentFilters(java.lang.String)> -> _SOURCE_
<android.app.PendingIntent: android.content.Intent getIntent()> -> _SOURCE_
<android.telephony.ModemActivityInfo: boolean isValid()> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Default: java.lang.String getNaiForSubscriber(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.telephony.ims.ImsSsData: java.util.List getCallForwardInfo()> -> _SOURCE_
<com.android.internal.telephony.IMms$Stub: android.os.IBinder asBinder()> -> _SOURCE_
<android.media.IAudioRoutesObserver$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.telephony.ISub$Stub$Proxy: java.util.List getAllSubInfoList(java.lang.String,java.lang.String)> -> _SOURCE_
<android.telephony.CellIdentityLte: android.telephony.ClosedSubscriberGroupInfo getClosedSubscriberGroupInfo()> -> _SOURCE_
<com.android.internal.app.AlertController: android.widget.ListView getListView()> -> _SOURCE_
<android.app.admin.FreezePeriod: java.time.MonthDay getStart()> -> _SOURCE_
<android.media.midi.MidiInputPort: android.os.IBinder getToken()> -> _SOURCE_
<com.android.internal.telephony.ISub$Default: int getDefaultDataSubId()> -> _SOURCE_
<android.location.AbstractListenerManager$Registration: java.lang.Object getRequest()> -> _SOURCE_
<android.os.IUpdateEngine$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.view.accessibility.IAccessibilityInteractionConnectionCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.view.IPinnedStackController$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.telephony.IUpdateAvailableNetworksCallback$Stub: java.lang.String getTransactionName(int)> -> _SOURCE_
<android.telephony.SubscriptionManager: void invalidateDefaultSubIdCaches()> -> _SOURCE_
<android.content.res.XmlBlock$Parser: java.lang.String getInputEncoding()> -> _SOURCE_
<android.app.IActivityTaskManager$Default: android.window.IWindowOrganizerController getWindowOrganizerController()> -> _SOURCE_
<android.graphics.PathMeasure: float getLength()> -> _SOURCE_
<com.android.internal.telephony.IMms$Stub$Proxy: boolean deleteStoredMessage(java.lang.String,android.net.Uri)> -> _SOURCE_
<android.location.Geofence: float getRadius()> -> _SOURCE_
<android.view.accessibility.AccessibilityWindowInfo: java.lang.CharSequence getTitle()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getManufacturerCode()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.app.ActivityManager: boolean isRunningInUserTestHarness()> -> _SOURCE_
<android.provider.Settings$Global: long getLong(android.content.ContentResolver,java.lang.String,long)> -> _SOURCE_
<android.net.Ikev2VpnProfile: java.security.PrivateKey getRsaPrivateKey()> -> _SOURCE_
<android.app.job.JobInfo: long getEstimatedNetworkDownloadBytes()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: android.os.BatteryStats$Timer getAggregatedPartialWakelockTimer()> -> _SOURCE_
<android.view.InsetsAnimationThreadControlRunner: android.view.WindowInsetsAnimation getAnimation()> -> _SOURCE_
<android.bluetooth.BluetoothHeadsetClient: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
<android.ddm.DdmHandleAppName$Names: java.lang.String getAppName()> -> _SOURCE_
<android.telephony.CellSignalStrengthGsm: int getAsuLevel()> -> _SOURCE_
<android.bluetooth.IBluetoothHidDeviceCallback$Stub: android.bluetooth.IBluetoothHidDeviceCallback getDefaultImpl()> -> _SOURCE_
<android.net.lowpan.ILowpanEnergyScanCallback$Stub: android.net.lowpan.ILowpanEnergyScanCallback getDefaultImpl()> -> _SOURCE_
<android.graphics.drawable.VectorDrawable$VGroup: float getTranslateX()> -> _SOURCE_
<android.bluetooth.IBluetooth$Stub$Proxy: java.util.List getMostRecentlyConnectedDevices()> -> _SOURCE_
<android.view.InsetsController$InternalAnimationControlListener: android.view.animation.Interpolator getInterpolator()> -> _SOURCE_
<android.app.Activity: java.lang.String getCallingPackage()> -> _SOURCE_
<android.content.ContextWrapper: java.lang.String getPackageCodePath()> -> _SOURCE_
<android.app.assist.AssistStructure$ViewNodeBuilder: java.lang.CharSequence getHint()> -> _SOURCE_
<android.net.Uri$HierarchicalUri: java.lang.String getEncodedFragment()> -> _SOURCE_
<android.window.ITaskOrganizer$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.ApplicationPackageManager: int getPreferredActivities(java.util.List,java.util.List,java.lang.String)> -> _SOURCE_
<android.telephony.SubscriptionManager: void invalidateSlotIndexCaches()> -> _SOURCE_
<android.webkit.WebView$HitTestResult: java.lang.String getExtra()> -> _SOURCE_
<android.os.incremental.IIncrementalService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.TelephonyManager: android.telephony.ServiceState getServiceStateForSubscriber(int)> -> _SOURCE_
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)> -> _SOURCE_
<android.security.net.config.TrustedCertificateStoreAdapter: java.io.File getCertificateFile(java.io.File,java.security.cert.X509Certificate)> -> _SOURCE_
<android.os.health.HealthKeys$Constants: java.lang.String getDataType()> -> _SOURCE_
<android.hardware.hdmi.IHdmiSystemAudioModeChangeListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.content.pm.parsing.component.ParsedInstrumentation: java.lang.String getTargetProcesses()> -> _SOURCE_
<android.location.LocationManager: java.lang.String[] getBackgroundThrottlingWhitelist()> -> _SOURCE_
<com.android.internal.telecom.ITelecomService$Default: java.util.List getAllPhoneAccounts()> -> _SOURCE_
<android.content.pm.LauncherApps$PinItemRequest: android.content.pm.ShortcutInfo getShortcutInfo()> -> _SOURCE_
<android.location.ICountryDetector$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.service.gatekeeper.IGateKeeperService$Stub$Proxy: long getSecureUserId(int)> -> _SOURCE_
<android.media.IRecordingConfigDispatcher$Stub: android.media.IRecordingConfigDispatcher getDefaultImpl()> -> _SOURCE_
<android.app.ActivityOptions: java.util.ArrayList getSharedElementNames()> -> _SOURCE_
<android.hardware.lights.ILightsManager$Default: java.util.List getLights()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isOrganizationOwnedDeviceWithManagedProfile()> -> _SOURCE_
<android.app.AppOpsManager: android.os.IBinder getClientId()> -> _SOURCE_
<android.os.Process: boolean isIsolated()> -> _SOURCE_
<android.os.IRecoverySystem$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.ActivityManager: boolean isUserRunning(int)> -> _SOURCE_
<android.view.autofill.AutofillManager: boolean isEnabled()> -> _SOURCE_
<com.android.ims.internal.IImsEcbmListener$Stub: com.android.ims.internal.IImsEcbmListener getDefaultImpl()> -> _SOURCE_
<android.app.role.RoleManager: boolean isRoleHeld(java.lang.String)> -> _SOURCE_
<android.view._$$Lambda$Y3lG3v_J32_xL0IjMGgNorZjESw: java.lang.Object get()> -> _SOURCE_
<android.view.textclassifier.SystemTextClassifier$BlockingCallback: android.os.Parcelable get()> -> _SOURCE_
<android.bluetooth.BluetoothGattCharacteristic: byte[] getValue()> -> _SOURCE_
<android.hardware.fingerprint.IFingerprintServiceReceiver$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.ims.ImsCallProfile: android.telephony.ims.ImsStreamMediaProfile getMediaProfile()> -> _SOURCE_
<android.database.BulkCursorToCursorAdaptor: android.os.Bundle getExtras()> -> _SOURCE_
<android.app.ApplicationPackageManager: int getIntentVerificationStatusAsUser(java.lang.String,int)> -> _SOURCE_
<android.service.voice.IVoiceInteractionSession$Stub: android.service.voice.IVoiceInteractionSession getDefaultImpl()> -> _SOURCE_
<android.hardware.IConsumerIrService$Stub: android.hardware.IConsumerIrService getDefaultImpl()> -> _SOURCE_
<android.bluetooth.IBluetoothMapClient$Default: java.util.List getConnectedDevices()> -> _SOURCE_
<com.android.internal.telephony.ISms$Default: java.lang.String createAppSpecificSmsTokenWithPackageInfo(int,java.lang.String,java.lang.String,android.app.PendingIntent)> -> _SOURCE_
<android.renderscript.Sampler: android.renderscript.Sampler$Value getMinification()> -> _SOURCE_
<android.app.job.IJobScheduler$Stub$Proxy: java.util.List getStartedJobs()> -> _SOURCE_
<android.net.NetworkScoreManager: java.lang.String getActiveScorerPackage()> -> _SOURCE_
<android.app.ApplicationPackageManager: android.content.pm.FeatureInfo[] getSystemAvailableFeatures()> -> _SOURCE_
<android.os.LocaleList: android.os.LocaleList getEmptyLocaleList()> -> _SOURCE_
<com.android.internal.telephony.euicc.IDeleteProfileCallback$Stub: com.android.internal.telephony.euicc.IDeleteProfileCallback getDefaultImpl()> -> _SOURCE_
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String[] getAppOpPermissionPackages(java.lang.String)> -> _SOURCE_
<android.telephony.AvailableNetworkInfo: int getSubId()> -> _SOURCE_
<android.telephony.CarrierConfigManager: boolean isConfigForIdentifiedCarrier(android.os.PersistableBundle)> -> _SOURCE_
<android.content.pm.PackageParser$Component: android.content.ComponentName getComponentName()> -> _SOURCE_
<android.app.usage.UsageStatsManager: java.util.Map getAppStandbyBuckets()> -> _SOURCE_
<android.telephony.SubscriptionManager: int lambda$setOpportunistic$6$SubscriptionManager(boolean,int,com.android.internal.telephony.ISub)> -> _SOURCE_
<android.telephony.TelephonyManager: int getCallStateForSlot(int)> -> _SOURCE_
<android.app.servertransaction.PendingTransactionActions: android.app.servertransaction.PendingTransactionActions$StopInfo getStopInfo()> -> _SOURCE_
<android.renderscript.Element: android.renderscript.Element$DataKind getDataKind()> -> _SOURCE_
<android.window.IDisplayAreaOrganizerController$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.print.PrintAttributes: android.print.PrintAttributes$Margins getMinMargins()> -> _SOURCE_
<android.view.WindowInsets: android.graphics.Insets getInsets(android.graphics.Insets[],int)> -> _SOURCE_
<android.hardware.ISerialManager$Stub: android.hardware.ISerialManager getDefaultImpl()> -> _SOURCE_
<android.os.UserManager: android.content.pm.UserInfo createProfileForUser(java.lang.String,java.lang.String,int,int,java.lang.String[])> -> _SOURCE_
<android.widget.ProgressBar: android.content.res.ColorStateList getSecondaryProgressTintList()> -> _SOURCE_
<android.text.Layout: android.text.TextDirectionHeuristic getTextDirectionHeuristic()> -> _SOURCE_
<com.android.ims.internal.IImsVideoCallCallback$Stub: com.android.ims.internal.IImsVideoCallCallback getDefaultImpl()> -> _SOURCE_
<com.android.internal.telephony.euicc.IGetDefaultSmdpAddressCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.hardware.camera2.params.Face: android.graphics.Rect getBounds()> -> _SOURCE_
<android.content.pm.IShortcutChangeCallback$Stub: android.content.pm.IShortcutChangeCallback getDefaultImpl()> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageUtils: android.content.pm.parsing.result.ParseResult getSigningDetails(android.content.pm.parsing.result.ParseInput,java.lang.String,boolean,boolean,android.content.pm.PackageParser$SigningDetails,int)> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getCrossProfileWidgetProviders(android.content.ComponentName)> -> _SOURCE_
<android.widget.ScrollBarDrawable: android.graphics.drawable.Drawable getHorizontalThumbDrawable()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getPermittedAccessibilityServices(android.content.ComponentName)> -> _SOURCE_
<android.media.AudioManager: java.lang.String getParameters(java.lang.String)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.telephony.PinResult: int hashCode()> -> _SOURCE_
<android.os.INetworkManagementService$Default: java.lang.String[] getDnsForwarders()> -> _SOURCE_
<android.animation.Keyframe$FloatKeyframe: float getFloatValue()> -> _SOURCE_
<android.os.IUserManager$Stub$Proxy: java.util.List getUserRestrictionSources(java.lang.String,int)> -> _SOURCE_
<android.telephony.CellInfoGsm: android.telephony.CellInfo sanitizeLocationInfo()> -> _SOURCE_
<android.view.accessibility.AccessibilityManager: android.view.accessibility.IAccessibilityManagerClient getClient()> -> _SOURCE_
<android.telephony.ModemActivityInfo$TransmitPower: android.util.Range getPowerRangeInDbm()> -> _SOURCE_
<android.telephony.CellIdentityLte: android.telephony.CellIdentityLte createFromParcelBody(android.os.Parcel)> -> _SOURCE_
<android.view.SurfaceControl: boolean getProtectedContentSupport()> -> _SOURCE_
<android.app.AppOpsManager$NoteOpEvent: long getNoteTime()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeIdManager: android.view.accessibility.AccessibilityNodeIdManager getInstance()> -> _SOURCE_
<android.graphics.ImageDecoder$ImageInfo: java.lang.String getMimeType()> -> _SOURCE_
<android.telephony.UiccAccessRule: int getCarrierPrivilegeStatus(android.content.pm.PackageInfo)> -> _SOURCE_
<android.app.WallpaperColors: android.graphics.Color getSecondaryColor()> -> _SOURCE_
<android.telephony.SubscriptionManager: android.telephony.SubscriptionInfo getActiveSubscriptionInfo(int)> -> _SOURCE_
<android.location.GnssStatus: float getCn0DbHz(int)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.net.Uri$HierarchicalUri: java.lang.String getFragment()> -> _SOURCE_
<android.util.TimeUtils: java.lang.String getTimeZoneDatabaseVersion()> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: java.util.List getAttributions()> -> _SOURCE_
<android.content.IRestrictionsManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.os.UserManager: android.content.pm.UserInfo getUserInfo(int)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.content.pm.PackageParser$Package: long getLatestPackageUseTimeInMills()> -> _SOURCE_
<android.media.tv.TvContentRatingSystemInfo: android.net.Uri getXmlUri()> -> _SOURCE_
<android.view.SurfaceControl: android.os.IBinder getInternalDisplayToken()> -> _SOURCE_
<android.telephony.TelephonyManager: java.util.List getDevicePolicyOverrideApns(android.content.Context)> -> _SOURCE_
<android.content.IContentService$Default: android.content.SyncAdapterType[] getSyncAdapterTypes()> -> _SOURCE_
<android.hardware.biometrics.BiometricManager: long[] getAuthenticatorIds()> -> _SOURCE_
<android.view.ViewConfiguration: long getSendRecurringAccessibilityEventsInterval()> -> _SOURCE_
<android.provider.FontRequest: java.util.List getCertificates()> -> _SOURCE_
<com.android.internal.statusbar.IStatusBar$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telephony.ims.ImsMmTelManager$CapabilityCallback: android.telephony.ims.aidl.IImsCapabilityCallback getBinder()> -> _SOURCE_
<android.location.Address: java.lang.String getThoroughfare()> -> _SOURCE_
<android.telephony.ClosedSubscriberGroupInfo: java.lang.String getHomeNodebName()> -> _SOURCE_
<android.media.audiopolicy.AudioPolicy: android.media.projection.MediaProjection getMediaProjection()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean rebootRadio()> -> _SOURCE_
<android.app.AppOpsManager$OpEntry: java.util.Map getAttributedOpEntries()> -> _SOURCE_
<android.telephony.ClientRequestStats: int describeContents()> -> _SOURCE_
<android.telephony.ims.ImsSsInfo: java.lang.String getIncomingCommunicationBarringNumber()> -> _SOURCE_
<android.telephony.ims.ImsRcsManager: boolean isCapable(int,int)> -> _SOURCE_
<android.content.pm.ApplicationInfo: java.lang.String[] getAllApkPaths()> -> _SOURCE_
<android.media.MediaCodec: java.lang.String getName()> -> _SOURCE_
<android.content.Intent: android.net.Uri getData()> -> _SOURCE_
<android.hardware.usb.UsbDevice: android.hardware.usb.UsbInterface getInterface(int)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<com.android.server.SystemConfig: com.android.server.SystemConfig getInstance()> -> _SOURCE_
<com.android.internal.telephony.gsm.GsmSmsAddress: java.lang.String getAddressString()> -> _SOURCE_
<android.hardware.hdmi.IHdmiCecVolumeControlFeatureListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.util.ExceptionUtils: java.lang.String getCompleteMessage(java.lang.String,java.lang.Throwable)> -> _SOURCE_
<android.app.usage.UsageEvents$Event: java.lang.String getTaskRootClassName()> -> _SOURCE_
<android.view.textclassifier.TextLanguage$Request: java.lang.CharSequence getText()> -> _SOURCE_
<com.android.internal.app.ToolbarActionBar: android.view.View getCustomView()> -> _SOURCE_
<android.telephony.CellSignalStrengthLte: int getRsrq()> -> _SOURCE_
<android.telephony.SmsCbMessage: android.telephony.SmsCbMessage createFromCursor(android.database.Cursor)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: int getStorageEncryptionStatus()> -> _SOURCE_
<android.media.projection.IMediaProjectionCallback$Stub: android.media.projection.IMediaProjectionCallback getDefaultImpl()> -> _SOURCE_
<com.android.internal.telephony.IOns$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isDataCapable()> -> _SOURCE_
<com.android.internal.telephony.cdma.SmsMessage: com.android.internal.telephony.cdma.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,com.android.internal.telephony.cdma.sms.UserData,boolean,int)> -> _SOURCE_
<com.android.server.SystemConfig: java.util.Set getWhitelistedStagedInstallers()> -> _SOURCE_
<com.android.internal.app.ISoundTriggerService$Default: android.hardware.soundtrigger.SoundTrigger$ModuleProperties getModuleProperties()> -> _SOURCE_
<android.os.Environment: java.util.Collection getInternalMediaDirectories()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.CharSequence getStartUserSessionMessage(android.content.ComponentName)> -> _SOURCE_
<com.android.internal.telephony.ICarrierConfigLoader$Default: android.os.IBinder asBinder()> -> _SOURCE_
<android.net.ConnectivityDiagnosticsManager$ConnectivityReport: android.net.Network getNetwork()> -> _SOURCE_
<android.app.ActivityManager: java.util.List getRunningAppProcesses()> -> _SOURCE_
<android.bluetooth.BluetoothCodecConfig: long getCodecSpecific4()> -> _SOURCE_
<android.app.UriGrantsManager: android.app.IUriGrantsManager getService()> -> _SOURCE_
<android.app.ActivityOptions: android.os.IRemoteCallback getAnimationFinishedListener()> -> _SOURCE_
<com.android.internal.telephony.IBooleanConsumer$Stub: com.android.internal.telephony.IBooleanConsumer getDefaultImpl()> -> _SOURCE_
<com.android.internal.graphics.palette.Palette: com.android.internal.graphics.palette.Palette$Swatch getLightMutedSwatch()> -> _SOURCE_
<android.hardware.ICameraService$Default: android.hardware.camera2.utils.ConcurrentCameraIdCombination[] getConcurrentCameraIds()> -> _SOURCE_
<android.widget.AdapterViewAnimator: android.widget.Adapter getAdapter()> -> _SOURCE_
<android.content.pm.IPackageInstallerSessionFileSystemConnector$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.ActivityManager: android.util.Size getAppTaskThumbnailSize()> -> _SOURCE_
<android.os.StatFs: long getFreeBlocksLong()> -> _SOURCE_
<android.hardware.location.GeofenceHardwareRequestParcelable: double getRadius()> -> _SOURCE_
<android.renderscript.Sampler: android.renderscript.Sampler$Value getWrapS()> -> _SOURCE_
<android.telephony.RadioAccessFamily: int getNetworkTypeFromRaf(int)> -> _SOURCE_
<android.bluetooth.IBluetoothPan$Default: java.util.List getConnectedDevices()> -> _SOURCE_
<android.location.LocationManager: int getGnssBatchSize()> -> _SOURCE_
<android.service.notification.Adjustment: android.os.UserHandle getUserHandle()> -> _SOURCE_
<android.view.IRecentsAnimationRunner$Stub: android.view.IRecentsAnimationRunner getDefaultImpl()> -> _SOURCE_
<android.telephony.mbms.IMbmsDownloadSessionCallback$Stub: android.telephony.mbms.IMbmsDownloadSessionCallback getDefaultImpl()> -> _SOURCE_
<android.view.IWindowId$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.os.Environment: java.io.File getDownloadCacheDirectory()> -> _SOURCE_
<android.widget.CursorAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)> -> _SOURCE_
<android.telephony.PhoneNumberUtils: int getFormatTypeForLocale(java.util.Locale)> -> _SOURCE_
<android.media.audiopolicy.AudioProductStrategy: java.util.List getAudioProductStrategies()> -> _SOURCE_
<android.telephony.TelephonyManager: int[] supplyPukReportResult(java.lang.String,java.lang.String)> -> _SOURCE_
<android.util.KeyValueListParser$StringValue: java.lang.String getKey()> -> _SOURCE_
<android.security.keystore.recovery.KeyChainSnapshot: java.security.cert.CertPath getTrustedHardwareCertPath()> -> _SOURCE_
<android.transition.Transition: java.lang.String getName()> -> _SOURCE_
<com.android.internal.widget.BackgroundFallback: android.graphics.drawable.Drawable getDrawable()> -> _SOURCE_
<android.inputmethodservice.IInputMethodSessionWrapper: android.view.inputmethod.InputMethodSession getInternalInputMethodSession()> -> _SOURCE_
<android.telecom.TelecomManager: android.telecom.PhoneAccount getPhoneAccount(android.telecom.PhoneAccountHandle)> -> _SOURCE_
<android.telecom.TelecomManager: java.lang.String getLine1Number(android.telecom.PhoneAccountHandle)> -> _SOURCE_
<android.widget.Toolbar: java.lang.CharSequence getSubtitle()> -> _SOURCE_
<android.debug.IAdbManager$Stub$Proxy: java.util.Map getPairedDevices()> -> _SOURCE_
<android.view.Display: float[] getSupportedRefreshRates()> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: java.lang.String getZygotePreloadName()> -> _SOURCE_
<android.app.backup.BackupManager: java.lang.CharSequence getDataManagementIntentLabel(java.lang.String)> -> _SOURCE_
<android.text.Layout: float getSpacingMultiplier()> -> _SOURCE_
<android.app.DisabledWallpaperManager: android.graphics.drawable.Drawable peekDrawable()> -> _SOURCE_
<android.app.Notification$WearableExtender: boolean getHintContentIntentLaunchesActivity()> -> _SOURCE_
<android.content.pm.ShortcutInfo: boolean isManifestShortcut()> -> _SOURCE_
<android.view.IInputMonitorHost$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: java.lang.String getName()> -> _SOURCE_
<com.android.ims.internal.IImsFeatureStatusCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.media.MicrophoneInfo: float getSensitivity()> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: java.util.List getProviders()> -> _SOURCE_
<android.app.IAlarmCompleteListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.net.Uri$OpaqueUri: java.lang.String getFragment()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.lang.String getManufacturerCodeForSlot(int)> -> _SOURCE_
<android.accessibilityservice.IAccessibilityServiceConnection$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.media.soundtrigger.SoundTriggerDetector$EventPayload: byte[] getData()> -> _SOURCE_
<com.android.internal.telecom.ITelecomService$Stub$Proxy: android.telecom.PhoneAccountHandle getDefaultOutgoingPhoneAccount(java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.bluetooth.IBluetoothMapClient$Stub$Proxy: java.util.List getConnectedDevices()> -> _SOURCE_
<android.view.inputmethod.BaseInputConnection: android.os.Handler getHandler()> -> _SOURCE_
<android.view.contentcapture.ViewNode: int[] getTextLineBaselines()> -> _SOURCE_
<android.os.storage.StorageManager: java.lang.String[] getVolumePaths()> -> _SOURCE_
<android.telephony.VisualVoicemailSms: java.lang.String getMessageBody()> -> _SOURCE_
<android.app.Notification$BubbleMetadata: android.graphics.drawable.Icon getIcon()> -> _SOURCE_
<android.telecom.ParcelableCallAnalytics: long getStartTimeMillis()> -> _SOURCE_
<android.app.Activity: android.view.SearchEvent getSearchEvent()> -> _SOURCE_
<android.view.contentcapture.ViewNode: java.lang.String[] getAutofillHints()> -> _SOURCE_
<android.os.Debug: boolean isDebuggerConnected()> -> _SOURCE_
<android.media.AudioManager: android.media.AudioDeviceAttributes getPreferredDeviceForStrategy(android.media.audiopolicy.AudioProductStrategy)> -> _SOURCE_
<android.provider.FontsContract$FontInfo: android.net.Uri getUri()> -> _SOURCE_
<android.security.KeyStore$ExportKeyPromise: java.util.concurrent.CompletableFuture getFuture()> -> _SOURCE_
<android.security.keystore.recovery.KeyChainSnapshot: byte[] getEncryptedRecoveryKeyBlob()> -> _SOURCE_
<com.android.internal.net.INetworkWatchlistManager$Stub: com.android.internal.net.INetworkWatchlistManager getDefaultImpl()> -> _SOURCE_
<android.app.backup.BackupManager: android.os.UserHandle getUserForAncestralSerialNumber(long)> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getSecondaryUsers(android.content.ComponentName)> -> _SOURCE_
<android.app.ApplicationPackageManager: java.lang.CharSequence getUserBadgedLabel(java.lang.CharSequence,android.os.UserHandle)> -> _SOURCE_
<android.widget.AdapterViewAnimator: android.animation.ObjectAnimator getOutAnimation()> -> _SOURCE_
<android.app.slice.SliceManager: java.util.Set getPinnedSpecs(android.net.Uri)> -> _SOURCE_
<android.database.IContentObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.internal.graphics.palette.Target: float getMaximumLightness()> -> _SOURCE_
<android.nfc.IAppCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telephony.SmsManager: java.lang.String getSmscAddress()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.os.storage.IStorageManager$Stub: android.os.storage.IStorageManager getDefaultImpl()> -> _SOURCE_
<android.telephony.ClientRequestStats: java.util.List getRequestHistograms()> -> _SOURCE_
<android.hardware.iris.IIrisService$Stub: android.hardware.iris.IIrisService getDefaultImpl()> -> _SOURCE_
<android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getNotificationChannelGroups(java.lang.String)> -> _SOURCE_
<android.app.INotificationManager$Default: android.content.ComponentName getEffectsSuppressor()> -> _SOURCE_
<android.hardware.soundtrigger.SoundTrigger: java.lang.String getCurrentOpPackageName()> -> _SOURCE_
<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.drawable.Drawable getForeground()> -> _SOURCE_
<android.app.NotificationManager: boolean isNotificationPolicyAccessGranted()> -> _SOURCE_
<android.net.wifi.nl80211.IClientInterface$Stub$Proxy: int[] getPacketCounters()> -> _SOURCE_
<com.android.internal.widget.ToolbarWidgetWrapper: boolean isOverflowMenuShowPending()> -> _SOURCE_
<android.hardware.display.Curve: float[] getY()> -> _SOURCE_
<android.hardware.camera2.ICameraDeviceUser$Default: android.hardware.camera2.impl.CameraMetadataNative getCameraInfo()> -> _SOURCE_
<android.media.AudioDeviceInfo: int[] getSampleRates()> -> _SOURCE_
<android.net.Uri$HierarchicalUri: java.lang.String getQuery()> -> _SOURCE_
<android.view.textclassifier.SelectionEvent: java.lang.String getEntityType()> -> _SOURCE_
<android.app.WallpaperInfo: android.content.ComponentName getComponent()> -> _SOURCE_
<android.os.PowerManager: boolean isIgnoringBatteryOptimizations(java.lang.String)> -> _SOURCE_
<android.os.Debug: int getGlobalExternalAllocCount()> -> _SOURCE_
<android.content.SyncRequest: android.os.Bundle getBundle()> -> _SOURCE_
<android.hardware.display.ColorDisplayManager: int getNightDisplayColorTemperature()> -> _SOURCE_
<android.app.LoadedApk$ServiceDispatcher: android.content.ServiceConnection getServiceConnection()> -> _SOURCE_
<android.app.NotificationManager: android.service.notification.StatusBarNotification[] getActiveNotifications()> -> _SOURCE_
<com.android.internal.os.IShellCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.internal.app.IVoiceInteractorRequest$Stub: com.android.internal.app.IVoiceInteractorRequest getDefaultImpl()> -> _SOURCE_
<android.net.lowpan.ILowpanManager$Stub$Proxy: java.lang.String[] getInterfaceList()> -> _SOURCE_
<android.database.sqlite.SQLiteQueryBuilder: java.util.Map getProjectionMap()> -> _SOURCE_
<android.telephony.TelephonyManager: int checkCarrierPrivilegesForPackage(java.lang.String)> -> _SOURCE_
<android.view.accessibility.IAccessibilityManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.view.WindowManagerImpl: android.graphics.Region getCurrentImeTouchRegion()> -> _SOURCE_
<android.hardware.Camera$Parameters: java.util.List getSupportedPictureSizes()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: android.os.BatteryStats$ControllerActivityCounter getBluetoothControllerActivity()> -> _SOURCE_
<android.net.lowpan.LowpanManager: android.net.lowpan.LowpanInterface getInterface()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.telephony.TelephonyManager: boolean isManualNetworkSelectionAllowed()> -> _SOURCE_
<android.net.LinkProperties: java.util.List getValidatedPrivateDnsServers()> -> _SOURCE_
<com.android.internal.database.SortCursor: double getDouble(int)> -> _SOURCE_
<android.hardware.input.TouchCalibration: float[] getAffineTransform()> -> _SOURCE_
<android.app.ExitTransitionCoordinator: android.transition.Transition getViewsTransition()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isInputMethodPermittedByAdmin(android.content.ComponentName,java.lang.String,int)> -> _SOURCE_
<android.bluetooth.BluetoothMap: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
<com.android.internal.telephony.GsmAlphabet: int access$000()> -> _SOURCE_
<android.net.Uri$AbstractHierarchicalUri: java.lang.String getHost()> -> _SOURCE_
<android.net.ConnectivityManager: boolean isActiveNetworkMetered()> -> _SOURCE_
<android.content.ContextWrapper: java.io.File getCodeCacheDir()> -> _SOURCE_
<com.android.internal.telephony.ISms$Default: java.lang.String createAppSpecificSmsToken(int,java.lang.String,android.app.PendingIntent)> -> _SOURCE_
<android.telephony.mbms.MbmsTempFileProvider: java.io.File getFileForUri(android.content.Context,java.lang.String,android.net.Uri)> -> _SOURCE_
<android.animation.PropertyValuesHolder$1: java.lang.Object getValueAtFraction(float)> -> _SOURCE_
<android.telephony.ServiceState: android.telephony.ServiceState mergeServiceStates(android.telephony.ServiceState,android.telephony.ServiceState)> -> _SOURCE_
<android.content.om.IOverlayManager$Default: java.util.List getOverlayInfosForTarget(java.lang.String,int)> -> _SOURCE_
<android.view.IWindowId$Stub: android.view.IWindowId getDefaultImpl()> -> _SOURCE_
<android.telephony.TelephonyManager: android.telephony.ims.aidl.IImsRcsFeature getImsRcsFeatureAndListen(int,com.android.ims.internal.IImsServiceFeatureCallback)> -> _SOURCE_
<android.app.INotificationManager$Stub$Proxy: android.app.NotificationChannel getNotificationChannel(java.lang.String,int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.telephony.BarringInfo: int describeContents()> -> _SOURCE_
<android.view.Window: android.view.WindowInsetsController getInsetsController()> -> _SOURCE_
<android.hardware.radio.ITunerCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.os.BatterySaverPolicyConfig: java.util.Map getDeviceSpecificSettings()> -> _SOURCE_
<android.bluetooth.BluetoothGattService: android.bluetooth.BluetoothDevice getDevice()> -> _SOURCE_
<android.os.Debug: java.lang.String getCaller()> -> _SOURCE_
<android.hardware.hdmi.IHdmiControlService$Stub$Proxy: java.util.List getDeviceList()> -> _SOURCE_
<android.telephony.CellIdentityNr: android.telephony.CellIdentity sanitizeLocationInfo()> -> _SOURCE_
<com.android.internal.view.IInputMethodClient$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.hardware.input.IInputManager$Stub: android.hardware.input.IInputManager getDefaultImpl()> -> _SOURCE_
<android.view.textclassifier.SelectionEvent: java.lang.String getWidgetVersion()> -> _SOURCE_
<android.graphics.drawable.VectorDrawable$VFullPath: float getTrimPathOffset()> -> _SOURCE_
<android.app.IUriGrantsManager$Stub: android.app.IUriGrantsManager getDefaultImpl()> -> _SOURCE_
<android.hardware.input.InputManager: android.view.InputDevice getInputDeviceByDescriptor(java.lang.String)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.app.PendingIntent: android.os.IBinder getWhitelistToken()> -> _SOURCE_
<android.hardware.camera2.impl.FrameNumberTracker: long getCompletedZslStillFrameNumber()> -> _SOURCE_
<android.content.ClipData$Item: java.lang.String getHtmlText()> -> _SOURCE_
<android.telephony.SubscriptionInfo: int getMcc()> -> _SOURCE_
<android.service.dreams.IDreamManager$Stub$Proxy: android.content.ComponentName getDefaultDreamComponentForUser(int)> -> _SOURCE_
<android.hardware.hdmi.IHdmiControlService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.view.textclassifier.TextClassificationContext: java.lang.String getPackageName()> -> _SOURCE_
<android.location.GnssClock: long getTimeNanos()> -> _SOURCE_
<android.view.Surface: long getNextFrameNumber()> -> _SOURCE_
<android.view.IWindowFocusObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: android.os.BatteryStats$LevelStepTracker getDailyChargeLevelStepTracker()> -> _SOURCE_
<android.widget.RemoteViews: android.widget.RemoteViews getDarkTextViews()> -> _SOURCE_
<android.telephony.CellInfoNr: android.telephony.CellIdentity getCellIdentity()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.telephony.TelephonyManager: boolean isAnyRadioPoweredOn()> -> _SOURCE_
<android.telephony.ims.feature._$$Lambda$45UAFJHVNK8x4IbCIjJCvNdDYHU: java.lang.Object get()> -> _SOURCE_
<android.telephony.TelephonyManager: int getVoiceMessageCount()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean getScreenCaptureDisabled(android.content.ComponentName)> -> _SOURCE_
<android.view.FrameStats: long getStartTimeNano()> -> _SOURCE_
<android.view.Window: android.transition.Transition getReenterTransition()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: android.app.admin.SystemUpdatePolicy getSystemUpdatePolicy()> -> _SOURCE_
<android.app.ActivityThread: android.content.Intent getIntentBeingBroadcast()> -> _SOURCE_
<android.graphics.ColorSpace$Rgb: long getNativeInstance()> -> _SOURCE_
<android.content.res.AssetManager: java.lang.CharSequence getResourceBagText(int,int)> -> _SOURCE_
<android.app.ContextImpl: android.content.AutofillOptions getAutofillOptions()> -> _SOURCE_
<com.android.internal.view.FloatingActionMode: java.lang.CharSequence getTitle()> -> _SOURCE_
<android.media.AudioFocusInfo: java.lang.String getClientId()> -> _SOURCE_
<android.print.PrintAttributes: boolean isPortrait()> -> _SOURCE_
<android.nfc.cardemulation.CardEmulation: java.util.List getAidsForPreferredPaymentService()> -> _SOURCE_
<android.telephony.SignalStrength: int getGsmAsuLevel()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: java.util.List getClientRequestStats(java.lang.String,java.lang.String,int)> -> _SOURCE_
<android.net.wifi.nl80211.IWifiScannerImpl$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.widget.Editor: float getLastUpPositionX()> -> _SOURCE_
<android.app.WallpaperManager: int getDesiredMinimumHeight()> -> _SOURCE_
<android.service.autofill.FillEventHistory$Event: java.util.Map getFieldsClassification()> -> _SOURCE_
<android.graphics.Paint: float getUnderlineThickness()> -> _SOURCE_
<android.os.Debug: java.lang.String[] getVmFeatureList()> -> _SOURCE_
<com.android.internal.telephony.euicc.IGetProfileCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: long getRequiredStrongAuthTimeout(android.content.ComponentName,int,boolean)> -> _SOURCE_
<android.util.TimeUtils: java.util.List getTimeZoneIdsForCountryCode(java.lang.String)> -> _SOURCE_
<android.telephony.ims.RcsContactUceCapability: android.net.Uri getServiceUri(long)> -> _SOURCE_
<android.telephony.TelephonyManager: int getSubIdForPhoneAccount(android.telecom.PhoneAccount)> -> _SOURCE_
<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()> -> _SOURCE_
<android.app.Notification: java.lang.Class getNotificationStyle()> -> _SOURCE_
<android.content.pm.LauncherApps: android.content.pm.LauncherApps$AppUsageLimit getAppUsageLimit(java.lang.String,android.os.UserHandle)> -> _SOURCE_
<android.widget.Magnifier: android.graphics.Bitmap getOriginalContent()> -> _SOURCE_
<android.telephony.NetworkRegistrationInfo$Builder: android.telephony.NetworkRegistrationInfo build()> -> _SOURCE_
<com.android.internal.view.InputConnectionWrapper: java.lang.CharSequence getTextAfterCursor(int,int)> -> _SOURCE_
<android.app.IApplicationThread$Stub: android.app.IApplicationThread getDefaultImpl()> -> _SOURCE_
<android.app.Notification$TvExtender: java.lang.String getChannel()> -> _SOURCE_
<android.telephony.SubscriptionManager: java.util.List getActiveSubscriptionInfoList(boolean)> -> _SOURCE_
<android.os.storage.StorageManager: android.os.storage.StorageVolume getStorageVolume(android.net.Uri)> -> _SOURCE_
<android.telephony.CellIdentityWcdma: android.telephony.CellIdentityWcdma createFromParcelBody(android.os.Parcel)> -> _SOURCE_
<android.security.keystore.recovery.KeyDerivationParams: byte[] getSalt()> -> _SOURCE_
<android.telephony.SubscriptionManager: android.telephony.SubscriptionInfo getActiveSubscriptionInfoForSimSlotIndex(int)> -> _SOURCE_
<com.android.internal.telephony.GsmAlphabet$TextEncodingDetails: java.lang.String toString()> -> _SOURCE_
<android.security.net.config.SystemCertificateSource: java.util.Set getCertificates()> -> _SOURCE_
<android.bluetooth.IBluetoothPbap$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.graphics.RenderNode: float getScaleX()> -> _SOURCE_
<android.app.IActivityController$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.bluetooth.IBluetoothA2dpSink$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String[] getMergedSubscriberIds()> -> _SOURCE_
<android.app.assist.AssistStructure$ViewNode: float getAlpha()> -> _SOURCE_
<android.hardware.location.ContextHubInfo: byte getChreApiMajorVersion()> -> _SOURCE_
<android.hardware.hdmi.IHdmiDeviceEventListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.Fragment: android.view.LayoutInflater getLayoutInflater()> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getLine1AlphaTag(java.lang.String,java.lang.String)> -> _SOURCE_
<android.os.Environment: java.io.File getProductServicesDirectory()> -> _SOURCE_
<android.telephony.PhoneNumberUtils: boolean isVoiceMailNumber(int,java.lang.String)> -> _SOURCE_
<android.bluetooth.BluetoothGattDescriptor: android.bluetooth.BluetoothGattCharacteristic getCharacteristic()> -> _SOURCE_
<android.os.ISystemConfig$Stub$Proxy: java.util.List getDisabledUntilUsedPreinstalledCarrierApps()> -> _SOURCE_
<android.hardware.camera2.params.MandatoryStreamCombination$Builder: android.util.Size getMinSize(android.util.Size,android.util.Size)> -> _SOURCE_
<android.os.IRecoverySystemProgressListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.SmsCbCmasInfo: int getResponseType()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getMeid(int)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: android.os.Bundle getVisualVoicemailSettings(java.lang.String,int)> -> _SOURCE_
<android.location.ILocationManager$Stub$Proxy: java.lang.String[] getBackgroundThrottlingWhitelist()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: android.graphics.Rect getBoundsInScreen()> -> _SOURCE_
<android.app.job.JobWorkItem: android.content.Intent getIntent()> -> _SOURCE_
<android.media.projection.MediaProjectionInfo: android.os.UserHandle getUserHandle()> -> _SOURCE_
<android.content.pm.dex.ISnapshotRuntimeProfileCallback$Stub: android.content.pm.dex.ISnapshotRuntimeProfileCallback getDefaultImpl()> -> _SOURCE_
<android.media.MediaFormat: java.lang.Number getNumber(java.lang.String)> -> _SOURCE_
<android.net.WebAddress: java.lang.String getHost()> -> _SOURCE_
<android.service.dreams.IDreamManager$Stub$Proxy: android.content.ComponentName[] getDreamComponents()> -> _SOURCE_
<android.widget.Button: java.lang.CharSequence getAccessibilityClassName()> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: android.bluetooth.IBluetoothManager getBluetoothManager()> -> _SOURCE_
<android.telephony.SmsMessage: boolean isEmail()> -> _SOURCE_
<android.accounts.IAccountManagerResponse$Stub: android.accounts.IAccountManagerResponse getDefaultImpl()> -> _SOURCE_
<android.telephony.SubscriptionPlan: int[] getNetworkTypes()> -> _SOURCE_
<android.text.style.TextAppearanceSpan: android.graphics.Typeface getTypeface()> -> _SOURCE_
<android.media.audiopolicy.AudioMix: android.media.AudioFormat getFormat()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isDeviceOwnerApp(java.lang.String)> -> _SOURCE_
<android.hardware.location.NanoAppMessage: byte[] getMessageBody()> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: java.lang.String getPackageName()> -> _SOURCE_
<android.hardware.camera2.CaptureRequest: java.util.Collection getTargets()> -> _SOURCE_
<android.service.notification.NotificationListenerService: java.util.List getNotificationChannels(java.lang.String,android.os.UserHandle)> -> _SOURCE_
<android.app.FragmentManagerNonConfig: java.util.List getChildNonConfigs()> -> _SOURCE_
<android.content.pm.IPackageManager$Stub$Proxy: android.graphics.Bitmap getInstantAppIcon(java.lang.String,int)> -> _SOURCE_
<android.content.pm.ShortcutQueryWrapper: long getChangedSince()> -> _SOURCE_
<android.content.ContextWrapper: java.io.File[] getExternalFilesDirs(java.lang.String)> -> _SOURCE_
<android.graphics.drawable.VectorDrawable: float getPixelSize()> -> _SOURCE_
<com.android.internal.telephony.INumberVerificationCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.os.AsyncTask: android.os.AsyncTask$Status getStatus()> -> _SOURCE_
<android.renderscript.RenderScript: android.content.Context getApplicationContext()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Default: java.util.List getSecondaryUsers(android.content.ComponentName)> -> _SOURCE_
<android.app.ContextImpl: android.content.ContentResolver getContentResolver()> -> _SOURCE_
<android.app.WallpaperInfo: java.lang.String getServiceName()> -> _SOURCE_
<android.telephony.ims.aidl.IImsSmsListener$Stub: android.telephony.ims.aidl.IImsSmsListener getDefaultImpl()> -> _SOURCE_
<android.app.prediction.IPredictionManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.os.Bundle: java.lang.CharSequence getCharSequence(java.lang.String,java.lang.CharSequence)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.media.session.PlaybackState: android.os.Bundle getExtras()> -> _SOURCE_
<android.os.INetworkManagementService$Stub$Proxy: android.net.NetworkStats getNetworkStatsTethering(int)> -> _SOURCE_
<android.view.MotionEvent: float getSize()> -> _SOURCE_
<android.location.GpsSatellite: float getElevation()> -> _SOURCE_
<android.net.InterfaceConfiguration: android.net.LinkAddress getLinkAddress()> -> _SOURCE_
<android.view.inputmethod.CursorAnchorInfo: android.graphics.Matrix getMatrix()> -> _SOURCE_
<android.telephony.TelephonyManager: void resetCarrierKeysForImsiEncryption()> -> _SOURCE_
<android.hardware.camera2.legacy.RequestQueue$RequestQueueEntry: android.hardware.camera2.legacy.BurstHolder getBurstHolder()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.util.List getPackageCandidateVolumes(android.content.pm.ApplicationInfo,android.os.storage.StorageManager,android.content.pm.IPackageManager)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: boolean isCapable(int,int,int)> -> _SOURCE_
<android.os.PowerManager: boolean isScreenOn()> -> _SOURCE_
<android.bluetooth.IBluetoothGatt$Stub$Proxy: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Default: java.lang.String getImeiForSubscriber(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.content.pm.Signature: android.content.pm.Signature[] getChainSignatures()> -> _SOURCE_
<android.hardware.HardwareBuffer: long getUsage()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getAidForAppType(int,int)> -> _SOURCE_
<android.os.DropBoxManager: android.os.DropBoxManager$Entry getNextEntry(java.lang.String,long)> -> _SOURCE_
<android.app.assist.AssistStructure$ViewNode: java.lang.CharSequence getContentDescription()> -> _SOURCE_
<android.telephony.TelephonyManager: int checkCarrierPrivilegesForPackageAnyPhone(java.lang.String)> -> _SOURCE_
<android.hardware.location.ContextHubInfo: float getStoppedPowerDrawMw()> -> _SOURCE_
<android.app.trust.IStrongAuthTracker$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.bluetooth.IBluetoothPan$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isManagedKiosk()> -> _SOURCE_
<android.location.LocationManager: java.lang.String getGnssHardwareModelName()> -> _SOURCE_
<android.view.textclassifier.TextClassification$Request: android.os.LocaleList getDefaultLocales()> -> _SOURCE_
<android.bluetooth.IBluetoothHidDevice$Stub$Proxy: java.lang.String getUserAppName()> -> _SOURCE_
<android.app.ActivityThread: android.app.servertransaction.TransactionExecutor getTransactionExecutor()> -> _SOURCE_
<android.app.ExitTransitionCoordinator: android.transition.Transition getSharedElementTransition()> -> _SOURCE_
<android.content.ClipData: android.graphics.Bitmap getIcon()> -> _SOURCE_
<android.hardware.biometrics.IBiometricEnabledOnKeyguardCallback$Stub: android.hardware.biometrics.IBiometricEnabledOnKeyguardCallback getDefaultImpl()> -> _SOURCE_
<android.view.contentcapture.IDataShareWriteAdapter$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.database.CursorWrapper: boolean isBeforeFirst()> -> _SOURCE_
<android.os.DropBoxManager$Entry: java.lang.String getTag()> -> _SOURCE_
<android.content.UndoManager: android.content.UndoOwner getOwner(java.lang.String,java.lang.Object)> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec: javax.security.auth.x500.X500Principal getCertificateSubject()> -> _SOURCE_
<android.app.UiModeManager: int getCurrentModeType()> -> _SOURCE_
<android.transition.ChangeTransform$PathAnimatorMatrix: android.graphics.Matrix getMatrix()> -> _SOURCE_
<android.telephony.RadioAccessFamily: int getPhoneId()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.lang.String getInstallerPackageName(java.lang.String)> -> _SOURCE_
<android.location.ILocationManager$Default: java.util.List getTestProviderCurrentRequests(java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean isApnMetered(int,int)> -> _SOURCE_
<android.os.IInstalld$Stub: android.os.IInstalld getDefaultImpl()> -> _SOURCE_
<android.app.Notification$MessagingStyle$Message: java.lang.String getDataMimeType()> -> _SOURCE_
<android.media.AudioManager: boolean isAudioServerRunning()> -> _SOURCE_
<android.media.MediaTimestamp: long getAnchorSystemNanoTime()> -> _SOURCE_
<android.net.IConnectivityManager$Default: java.lang.String getCaptivePortalServerUrl()> -> _SOURCE_
<android.view.inputmethod.InputMethodManager: java.util.Map getShortcutInputMethodsAndSubtypes()> -> _SOURCE_
<com.android.internal.policy.PhoneWindow: android.transition.Transition getSharedElementReturnTransition()> -> _SOURCE_
<android.app.SearchableInfo$ActionKeyInfo: java.lang.String getSuggestActionMsg()> -> _SOURCE_
<android.text.MeasuredParagraph: float getWholeWidth()> -> _SOURCE_
<android.media.MediaRouter$RouteInfo: java.lang.CharSequence getName()> -> _SOURCE_
<android.content.pm.ShortcutManager: int getMaxShortcutCountForActivity()> -> _SOURCE_
<android.os.Environment: java.io.File getSystemExtDirectory()> -> _SOURCE_
<android.bluetooth.BluetoothA2dp: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
<com.android.internal.widget.LockPatternUtils: android.app.admin.DevicePolicyManager getDevicePolicyManager()> -> _SOURCE_
<android.media.MediaRouter$RouteInfo: android.media.MediaRouter$RouteCategory getCategory()> -> _SOURCE_
<android.hardware.ISerialManager$Stub$Proxy: java.lang.String[] getSerialPorts()> -> _SOURCE_
<android.app.ApplicationPackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)> -> _SOURCE_
<android.text.style.TypefaceSpan: java.lang.String getFamily()> -> _SOURCE_
<com.android.internal.util.MemInfoReader: long getFreeSizeKb()> -> _SOURCE_
<android.app.backup.IBackupCallback$Stub: android.app.backup.IBackupCallback getDefaultImpl()> -> _SOURCE_
<android.app.ApplicationPackageManager: boolean isPackageSuspended(java.lang.String)> -> _SOURCE_
<android.os.IIncidentDumpCallback$Stub: android.os.IIncidentDumpCallback getDefaultImpl()> -> _SOURCE_
<android.view.ImeFocusController: android.view.View getNextServedView()> -> _SOURCE_
<android.app.IActivityManager$Stub$Proxy: java.util.List getTasks(int)> -> _SOURCE_
<com.android.internal.telephony.ISms$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.os.PowerManager: boolean isDeviceIdleMode()> -> _SOURCE_
<android.media.RingtoneManager: boolean isDefault(android.net.Uri)> -> _SOURCE_
<android.media.tv.ITvInputManager$Default: java.util.List getHardwareList()> -> _SOURCE_
<android.app.slice.SliceItem: long getTimestamp()> -> _SOURCE_
<android.os.PowerManager: boolean isRebootingUserspaceSupported()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: boolean isManualNetworkSelectionAllowed(int)> -> _SOURCE_
<android.app.PropertyInvalidatedCache: java.util.ArrayList getActiveCorks()> -> _SOURCE_
<android.telephony.CellIdentityTdscdma$1: android.telephony.CellIdentityTdscdma createFromParcel(android.os.Parcel)> -> _SOURCE_
<android.os.IVibratorStateListener$Stub: android.os.IVibratorStateListener getDefaultImpl()> -> _SOURCE_
<android.view.textclassifier.ConversationAction: java.lang.String getType()> -> _SOURCE_
<android.view.VelocityTracker: float getXVelocity()> -> _SOURCE_
<android.view.WindowManagerGlobal: java.lang.String[] getViewRootNames()> -> _SOURCE_
<android.media.session.IOnVolumeKeyLongPressListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.CellIdentityNr: int getChannelNumber()> -> _SOURCE_
<android.location.GpsClock: double getDriftInNsPerSec()> -> _SOURCE_
<android.webkit.IWebViewUpdateService$Stub: android.webkit.IWebViewUpdateService getDefaultImpl()> -> _SOURCE_
<android.app.INotificationManager$Stub$Proxy: android.app.NotificationHistory getNotificationHistory(java.lang.String,java.lang.String)> -> _SOURCE_
<android.app.usage.StorageStatsManager: android.app.usage.ExternalStorageStats queryExternalStatsForUser(java.lang.String,android.os.UserHandle)> -> _SOURCE_
<android.telephony.ImsiEncryptionInfo: java.security.PublicKey getPublicKey()> -> _SOURCE_
<android.telephony.SmsCbCmasInfo: int getUrgency()> -> _SOURCE_
<android.print.IPrinterDiscoveryObserver$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.view.LayoutInflater: android.content.Context getContext()> -> _SOURCE_
<com.android.internal.os.Zygote: int getUsapPoolCount()> -> _SOURCE_
<android.permission.IPermissionController$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.media.SubtitleData: byte[] getData()> -> _SOURCE_
<android.hardware.display.ColorDisplayManager: boolean isSaturationActivated()> -> _SOURCE_
<android.view.accessibility.CaptioningManager$CaptionStyle: android.graphics.Typeface getTypeface()> -> _SOURCE_
<android.hardware.location.IContextHubCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.os.storage.StorageVolume: android.os.UserHandle getOwner()> -> _SOURCE_
<android.app.NotificationManager: android.service.notification.ZenModeConfig getZenModeConfig()> -> _SOURCE_
<android.telephony.CellIdentityWcdma: int getPsc()> -> _SOURCE_
<android.app.ActivityManager$TaskDescription: java.lang.String getIconFilename()> -> _SOURCE_
<android.graphics.ColorSpace$Connector: android.graphics.ColorSpace getSource()> -> _SOURCE_
<android.app.usage.StorageStatsManager: boolean isReservedSupported(java.util.UUID)> -> _SOURCE_
<android.os.IUserManager$Default: java.lang.String getSeedAccountName()> -> _SOURCE_
<android.media.AudioManager: int[] getSupportedSystemUsages()> -> _SOURCE_
<android.content.pm.IPackageManager$Default: java.lang.String getAttentionServicePackageName()> -> _SOURCE_
<android.os.IDeviceIdleController$Stub$Proxy: java.lang.String[] getSystemPowerWhitelist()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.String getGlobalPrivateDnsHost(android.content.ComponentName)> -> _SOURCE_
<android.telephony.ims.aidl.IImsRcsController$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String sendEnvelopeWithStatus(int,java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: java.lang.String nvReadItem(int)> -> _SOURCE_
<android.window.WindowContainerTransaction$Change: android.graphics.Rect getEnterPipBounds()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.util.List getPermittedAccessibilityServices(int)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: void getRemoveWarning(android.content.ComponentName,android.os.RemoteCallback)> -> _SOURCE_
<android.app.TaskInfo: android.app.ActivityManager$TaskSnapshot getTaskSnapshot(boolean)> -> _SOURCE_
<android.app.job.JobInfo: android.content.ComponentName getService()> -> _SOURCE_
<android.app.LoadedApk: java.lang.String getLibDir()> -> _SOURCE_
<android.media.ExifInterface: byte[] getThumbnailBytes()> -> _SOURCE_
<android.telephony.SignalStrength: int getLteLevel()> -> _SOURCE_
<android.app.trust.ITrustManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.app.IAppOpsService$Stub: com.android.internal.app.IAppOpsService getDefaultImpl()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: android.os.BatteryStats$Timer getAudioTurnedOnTimer()> -> _SOURCE_
<android.widget.AdapterViewAnimator: android.animation.ObjectAnimator getInAnimation()> -> _SOURCE_
<android.media.IMediaRouterService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.content.res.AssetManager$AssetInputStream: long getNativeAsset()> -> _SOURCE_
<android.location.Country: java.lang.String getCountryIso()> -> _SOURCE_
<android.telephony.SmsMessage: long getTimestampMillis()> -> _SOURCE_
<com.android.internal.telephony.ISub$Default: int getEnabledSubscriptionId(int)> -> _SOURCE_
<android.bluetooth.IBluetoothGatt$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.net.NetworkCapabilities: int[] getUnwantedCapabilities()> -> _SOURCE_
<android.telephony.CellSignalStrengthGsm: java.lang.String toString()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.hardware.hdmi.IHdmiSystemAudioModeChangeListener$Stub: android.hardware.hdmi.IHdmiSystemAudioModeChangeListener getDefaultImpl()> -> _SOURCE_
<android.nfc.cardemulation.ApduServiceInfo: android.content.ComponentName getComponent()> -> _SOURCE_
<android.media.projection.IMediaProjection$Stub: android.media.projection.IMediaProjection getDefaultImpl()> -> _SOURCE_
<android.hardware.lights.ILightsManager$Stub$Proxy: java.util.List getLights()> -> _SOURCE_
<android.telephony.ICellInfoCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.MbmsDownloadSession: java.util.List listPendingDownloads()> -> _SOURCE_
<android.content.om.OverlayInfo: java.lang.String getPackageName()> -> _SOURCE_
<android.media.IAudioService$Default: int[] getSupportedSystemUsages()> -> _SOURCE_
<android.os.BasicShellCommandHandler: java.io.InputStream getBufferedInputStream()> -> _SOURCE_
<android.view.InputEventReceiver: android.os.IBinder getToken()> -> _SOURCE_
<com.android.internal.app.IVoiceInteractionSessionShowCallback$Stub: com.android.internal.app.IVoiceInteractionSessionShowCallback getDefaultImpl()> -> _SOURCE_
<android.view.MotionEvent: float getTouchMajor()> -> _SOURCE_
<android.graphics.ColorSpace$Rgb: float[] getTransform()> -> _SOURCE_
<android.media.AudioManager: java.util.List getActiveRecordingConfigurations()> -> _SOURCE_
<android.view.animation.Animation: boolean getDetachWallpaper()> -> _SOURCE_
<android.security.IKeyChainService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: android.telephony.CallForwardingInfo getCallForwarding(int,int)> -> _SOURCE_
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String getServicesSystemSharedLibraryPackageName()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getMmsUAProfUrl()> -> _SOURCE_
<android.telephony.CellIdentityLte: java.lang.String getMccString()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.content.UndoManager: java.lang.CharSequence getRedoLabel(android.content.UndoOwner[])> -> _SOURCE_
<android.os.UserManager: android.content.pm.UserInfo createProfileForUserEvenWhenDisallowed(java.lang.String,java.lang.String,int,int,java.lang.String[])> -> _SOURCE_
<android.bluetooth.IBluetoothMap$Default: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
<android.metrics.LogMaker: android.util.SparseArray getEntries()> -> _SOURCE_
<android.media.MediaCodecInfo$VideoCapabilities: android.util.Range getBitrateRange()> -> _SOURCE_
<com.android.internal.app.IAppOpsCallback$Stub: com.android.internal.app.IAppOpsCallback getDefaultImpl()> -> _SOURCE_
<android.os.IncidentManager$PendingReport: android.net.Uri getUri()> -> _SOURCE_
<android.app.job.JobParameters: int[] getJobStopReasonCodes()> -> _SOURCE_
<com.android.internal.os.RpmStats: com.android.internal.os.RpmStats$PowerStatePlatformSleepState getAndUpdatePlatformState(java.lang.String,long,int)> -> _SOURCE_
<android.graphics.drawable.VectorDrawable$VPath: java.lang.String getPathName()> -> _SOURCE_
<android.telephony.CellInfoTdscdma: android.telephony.CellSignalStrength getCellSignalStrength()> -> _SOURCE_
<android.telephony.CellSignalStrengthGsm: android.telephony.CellSignalStrength copy()> -> _SOURCE_
<android.view.Display$HdrCapabilities: int[] getSupportedHdrTypes()> -> _SOURCE_
<android.content.res.Resources$Theme: android.content.res.Resources getResources()> -> _SOURCE_
<android.os.UserManager: boolean isUserUnlocked(android.os.UserHandle)> -> _SOURCE_
<android.app.assist.AssistStructure$ViewNode: float getTextSize()> -> _SOURCE_
<android.hardware.hdmi.IHdmiControlService$Default: boolean getSystemAudioMode()> -> _SOURCE_
<android.app.Notification$BubbleMetadata: java.lang.String getShortcutId()> -> _SOURCE_
<android.bluetooth.BluetoothGattCharacteristic: java.util.UUID getUuid()> -> _SOURCE_
<android.location.GnssAntennaInfo$PhaseCenterOffset: double getYOffsetMm()> -> _SOURCE_
<android.graphics.drawable.AnimatedVectorDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()> -> _SOURCE_
<com.android.internal.widget.ILockSettings$Default: int[] getRecoverySecretTypes()> -> _SOURCE_
<android.location.Location: float getSpeed()> -> _SOURCE_
<android.graphics.Paint: android.graphics.Paint$FontMetrics getFontMetrics()> -> _SOURCE_
<android.hardware.camera2.params.OutputConfiguration: java.util.List getSurfaces()> -> _SOURCE_
<android.app.Notification$Action$WearableExtender: boolean getHintLaunchesActivity()> -> _SOURCE_
<android.telephony.VisualVoicemailService$VisualVoicemailTask: int hashCode()> -> _SOURCE_
<android.bluetooth.IBluetooth$Default: android.bluetooth.BluetoothClass getBluetoothClass()> -> _SOURCE_
<android.telephony.MbmsDownloadSession: java.io.File getTempFileRootDirectory()> -> _SOURCE_
<android.service.notification.ZenModeConfig: android.content.ComponentName getEventConditionProvider()> -> _SOURCE_
<android.media.IMediaHTTPConnection$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.net.Uri$StringUri: java.lang.String getScheme()> -> _SOURCE_
<android.app.IActivityTaskManager$Stub$Proxy: java.util.List getAllStackInfosOnDisplay(int)> -> _SOURCE_
<com.android.internal.telephony.SmsApplication: com.android.internal.telephony.SmsApplication$SmsApplicationData getSmsApplicationData(java.lang.String,android.content.Context)> -> _SOURCE_
<android.app.usage.IUsageStatsManager$Stub$Proxy: android.content.pm.ParceledListSlice getAppStandbyBuckets(java.lang.String,int)> -> _SOURCE_
<android.net.NetworkAgentConfig: java.lang.String getLegacyExtraInfo()> -> _SOURCE_
<android.telephony.CellSignalStrengthWcdma: boolean isValid()> -> _SOURCE_
<com.android.internal.view.BaseSurfaceHolder: android.graphics.Rect getSurfaceFrame()> -> _SOURCE_
<android.hardware.camera2.CameraManager: java.lang.String[] getCameraIdListNoLazy()> -> _SOURCE_
<android.telephony.CellSignalStrengthCdma: int getEvdoEcio()> -> _SOURCE_
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: android.content.pm.ParceledListSlice getInstalledProvidersForProfile(int,int,java.lang.String)> -> _SOURCE_
<android.bluetooth.BluetoothGattServer: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
<android.hardware.Camera$Parameters: java.lang.String getFocusMode()> -> _SOURCE_
<android.media.MediaCodecInfo: android.media.MediaCodecInfo$CodecCapabilities getCapabilitiesForType(java.lang.String)> -> _SOURCE_
<android.telephony.PhoneNumberUtils: java.lang.String convertKeypadLettersToDigits(java.lang.String)> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isApplicationOnUicc(int)> -> _SOURCE_
<android.os.storage.IObbActionListener$Stub: android.os.storage.IObbActionListener getDefaultImpl()> -> _SOURCE_
<android.app.PendingIntent: java.lang.String getTag(java.lang.String)> -> _SOURCE_
<android.hardware.SensorManager: android.hardware.SensorDirectChannel createDirectChannel(android.hardware.HardwareBuffer)> -> _SOURCE_
<android.view.InputDevice$MotionRange: float getMin()> -> _SOURCE_
<android.content.ContentResolver: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)> -> _SOURCE_
<android.media.IMediaRouterService$Stub$Proxy: android.media.RoutingSessionInfo getSystemSessionInfo()> -> _SOURCE_
<android.media.session.MediaSessionManager: boolean isTrustedForMediaControl(android.media.session.MediaSessionManager$RemoteUserInfo)> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: java.lang.String getCodePath()> -> _SOURCE_
<android.app.IWindowToken$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.os.IIncidentCompanion$Stub: android.os.IIncidentCompanion getDefaultImpl()> -> _SOURCE_
<android.os.UserManager: android.graphics.Bitmap getUserIcon()> -> _SOURCE_
<android.hardware.soundtrigger.IRecognitionStatusCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.view.accessibility.AccessibilityCache: android.util.SparseArray getWindowsOnAllDisplays()> -> _SOURCE_
<android.app.IAssistDataReceiver$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.MbmsDownloadSession: java.util.concurrent.atomic.AtomicReference access$600(android.telephony.MbmsDownloadSession)> -> _SOURCE_
<android.net.wifi.nl80211.IClientInterface$Default: android.net.wifi.nl80211.IWifiScannerImpl getWifiScannerImpl()> -> _SOURCE_
<android.app.LocalActivityManager: android.app.Activity getActivity(java.lang.String)> -> _SOURCE_
<android.database.sqlite.SQLiteGlobal: java.lang.String getDefaultSyncMode()> -> _SOURCE_
<android.window.IWindowContainerToken$Stub: android.window.IWindowContainerToken getDefaultImpl()> -> _SOURCE_
<android.graphics.Color: android.graphics.ColorSpace$Model getModel()> -> _SOURCE_
<android.net.IConnectivityDiagnosticsCallback$Stub: android.net.IConnectivityDiagnosticsCallback getDefaultImpl()> -> _SOURCE_
<android.view.contentcapture.ContentCaptureManager$LocalDataShareAdapterResourceManager: android.view.contentcapture.DataShareWriteAdapter getAdapter(android.view.contentcapture.ContentCaptureManager$DataShareAdapterDelegate)> -> _SOURCE_
<android.security.net.config.WfaCertificateSource: java.util.Set getCertificates()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: java.lang.String getPath()> -> _SOURCE_
<android.appwidget.AppWidgetManager: java.util.List getInstalledProvidersForPackage(java.lang.String,android.os.UserHandle)> -> _SOURCE_
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.SmsMessage: int getIndexOnSim()> -> _SOURCE_
<android.os.CoolingDevice: long getValue()> -> _SOURCE_
<android.security.GateKeeper: long getSecureUserId()> -> _SOURCE_
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ModuleInfo getModuleInfo(java.lang.String,int)> -> _SOURCE_
<android.telephony.MbmsDownloadSession: java.util.concurrent.atomic.AtomicBoolean access$400()> -> _SOURCE_
<android.widget.EditorTouchState: float getLastUpX()> -> _SOURCE_
<android.location.GnssClock: double getBiasNanos()> -> _SOURCE_
<android.util.KeyValueListParser$FloatValue: float getDefaultValue()> -> _SOURCE_
<android.view.Window: android.transition.Transition getEnterTransition()> -> _SOURCE_
<android.app.AppOpsManager$OpEntry: long getTime()> -> _SOURCE_
<android.app.usage.StorageStatsManager: android.app.usage.StorageStats queryStatsForUser(java.lang.String,android.os.UserHandle)> -> _SOURCE_
<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: android.util.SparseArray getAllUidCpuFreqTimeMs()> -> _SOURCE_
<android.graphics.drawable.AnimatedVectorDrawable: boolean isRunning()> -> _SOURCE_
<android.media.MediaCodecInfo$EncoderCapabilities: android.util.Range getQualityRange()> -> _SOURCE_
<android.os.IDeviceIdleController$Default: java.lang.String[] getFullPowerWhitelist()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: int getImsProvisioningInt(int,int)> -> _SOURCE_
<android.media.MediaCas$Session: byte[] getSessionId()> -> _SOURCE_
<android.accessibilityservice.AccessibilityServiceInfo: java.lang.String getDescription()> -> _SOURCE_
<android.net.lowpan.ILowpanInterface$Stub$Proxy: java.lang.String[] getSupportedNetworkTypes()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.lang.String[] getAccountTypesWithManagementDisabled()> -> _SOURCE_
<android.os.storage.IStorageManager$Default: java.lang.String getPrimaryStorageUuid()> -> _SOURCE_
<android.hardware.display.DisplayManagerGlobal: android.graphics.ColorSpace getPreferredWideGamutColorSpace()> -> _SOURCE_
<android.os.UserManager: java.util.List getAllProfiles()> -> _SOURCE_
<android.telephony._$$Lambda$Vaai8Sbs2IpNs9Mr8tx6u3YoWp4: java.lang.Object applyOrThrow(java.lang.Object,java.lang.Object)> -> _SOURCE_
<android.hardware.IConsumerIrService$Stub$Proxy: int[] getCarrierFrequencies()> -> _SOURCE_
<android.view.IWindow$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.content.pm.PackageUserState: java.lang.String[] getAllOverlayPaths()> -> _SOURCE_
<com.android.internal.telephony.ISub$Stub: com.android.internal.telephony.ISub getDefaultImpl()> -> _SOURCE_
<android.view.inputmethod.InlineSuggestionsRequest: java.lang.String getHostPackageName()> -> _SOURCE_
<android.telephony.PhoneNumberUtils: boolean isPotentialEmergencyNumber(int,java.lang.String)> -> _SOURCE_
<android.media.session.PlaybackState: long getPosition()> -> _SOURCE_
<android.telephony.ImsiEncryptionInfo: java.lang.String toString()> -> _SOURCE_
<android.app.NotificationManager: int getCurrentInterruptionFilter()> -> _SOURCE_
<android.media.midi.IMidiManager$Default: android.media.midi.MidiDeviceInfo[] getDevices()> -> _SOURCE_
<android.app.blob.BlobStoreManager$Session: long getSize()> -> _SOURCE_
<android.media.AudioManager: boolean isOffloadedPlaybackSupported(android.media.AudioFormat,android.media.AudioAttributes)> -> _SOURCE_
<android.hardware.location.ContextHubManager: android.hardware.location.ContextHubInfo getContextHubInfo(int)> -> _SOURCE_
<android.telephony.cdma.CdmaSmsCbProgramData: java.lang.String getCategoryName()> -> _SOURCE_
<android.os.UserManager: long getUserStartRealtime()> -> _SOURCE_
<android.content.pm.IShortcutChangeCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.webkit.WebIconDatabase: android.webkit.WebIconDatabase getInstance()> -> _SOURCE_
<android.app.usage.UsageEvents$Event: java.lang.String getLocusId()> -> _SOURCE_
<android.app.UiAutomation: android.accessibilityservice.AccessibilityServiceInfo getServiceInfo()> -> _SOURCE_
<android.os.StatFs: long getAvailableBytes()> -> _SOURCE_
<android.webkit.WebView: android.os.Looper getWebViewLooper()> -> _SOURCE_
<android.telephony.TelephonyManager: int getSimCount()> -> _SOURCE_
<android.content.IIntentReceiver$Stub: android.content.IIntentReceiver getDefaultImpl()> -> _SOURCE_
<android.net.ITetheringStatsProvider$Stub$Proxy: android.net.NetworkStats getTetherStats(int)> -> _SOURCE_
<android.bluetooth.le.ScanRecord: java.lang.String getDeviceName()> -> _SOURCE_
<android.animation.PropertyValuesHolder: java.lang.String getMethodName(java.lang.String,java.lang.String)> -> _SOURCE_
<com.android.internal.graphics.palette.ColorCutQuantizer: java.util.List getQuantizedColors()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.util.List getAllIntentFilters(java.lang.String)> -> _SOURCE_
<android.os.MemoryFile: java.io.InputStream getInputStream()> -> _SOURCE_
<android.telephony.TelephonyManager: void disableLocationUpdates(int)> -> _SOURCE_
<android.os.UserManager: boolean isUserNameSet()> -> _SOURCE_
<android.graphics.drawable.Icon: java.lang.String getResPackage()> -> _SOURCE_
<android.telephony.CellIdentityWcdma: java.lang.String getMncString()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.app.DisabledWallpaperManager: android.os.ParcelFileDescriptor getWallpaperFile(int,int)> -> _SOURCE_
<android.telephony.ims.aidl.IImsConfig$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.widget.ArrayAdapter: android.content.Context getContext()> -> _SOURCE_
<android.telephony.CellSignalStrength: int getEcNoDbFromAsu(int)> -> _SOURCE_
<android.view.textservice.TextServicesManager: android.view.textservice.SpellCheckerSubtype getCurrentSpellCheckerSubtype(boolean)> -> _SOURCE_
<com.android.internal.app.WindowDecorActionBar: android.content.Context getThemedContext()> -> _SOURCE_
<android.view.inputmethod.InputMethodManager: java.util.List getEnabledInputMethodList()> -> _SOURCE_
<android.widget.RemoteViews$ReflectionAction: java.lang.String getUniqueKey()> -> _SOURCE_
<android.media.IMediaRouterService$Default: android.media.RoutingSessionInfo getSystemSessionInfo()> -> _SOURCE_
<android.telephony.mbms.vendor.IMbmsDownloadService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.ims.internal.IImsCallSession$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.os.UserManager: int getUserBadgeResId(int)> -> _SOURCE_
<android.telephony.PhoneNumberUtils: boolean isVoiceMailNumber(android.content.Context,int,java.lang.String)> -> _SOURCE_
<android.app.ActionBar: float getElevation()> -> _SOURCE_
<android.os.connectivity.WifiBatteryStats: long getNumPacketsRx()> -> _SOURCE_
<android.media.MediaPlayer: android.media.MediaPlayer$DrmInfo getDrmInfo()> -> _SOURCE_
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String getDefaultTextClassifierPackageName()> -> _SOURCE_
<android.app.Dialog: android.content.Context getContext()> -> _SOURCE_
<android.telephony.TelephonyManager: void disableIms(int)> -> _SOURCE_
<android.os.SystemUpdateManager: android.os.Bundle retrieveSystemUpdateInfo()> -> _SOURCE_
<android.database.IContentObserver$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.widget.ILockSettings$Stub: com.android.internal.widget.ILockSettings getDefaultImpl()> -> _SOURCE_
<android.view.textclassifier.TextClassifierEvent: android.view.textclassifier.TextClassificationContext getEventContext()> -> _SOURCE_
<android.media.ExifInterface: byte[] getThumbnail()> -> _SOURCE_
<android.telephony.PreciseDataConnectionState: int getLastCauseCode()> -> _SOURCE_
<android.app.WallpaperInfo: android.content.pm.ServiceInfo getServiceInfo()> -> _SOURCE_
<android.telephony.TelephonyManager: android.telephony.ims.aidl.IImsMmTelFeature getImsMmTelFeatureAndListen(int,com.android.ims.internal.IImsServiceFeatureCallback)> -> _SOURCE_
<android.os.IDumpstateListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean switchSlots(int[])> -> _SOURCE_
<android.os.IncidentManager$PendingReport: java.lang.String getRequestingPackage()> -> _SOURCE_
<android.telephony.CellIdentityTdscdma: android.telephony.CellIdentityTdscdma createFromParcelBody(android.os.Parcel)> -> _SOURCE_
<android.hardware.location.NanoAppBinary: byte getTargetChreApiMinorVersion()> -> _SOURCE_
<android.telephony.SubscriptionManager: void requestEmbeddedSubscriptionInfoListRefresh(int)> -> _SOURCE_
<android.telephony.TelephonyManager: boolean handlePinMmiForSubscriber(int,java.lang.String)> -> _SOURCE_
<android.service.voice.IVoiceInteractionSession$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.os.Message: long getWhen()> -> _SOURCE_
<android.media.session.PlaybackState: long getBufferedPosition()> -> _SOURCE_
<android.telephony.ims.feature.RcsFeature: android.telephony.ims.aidl.IRcsFeatureListener getListener()> -> _SOURCE_
<android.hardware.usb.IUsbSerialReader$Stub: android.hardware.usb.IUsbSerialReader getDefaultImpl()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: android.os.BatteryStats$Timer getBluetoothScanBackgroundTimer()> -> _SOURCE_
<com.android.internal.compat.IPlatformCompat$Stub$Proxy: com.android.internal.compat.IOverrideValidator getOverrideValidator()> -> _SOURCE_
<android.database.sqlite.SQLiteQueryBuilder: java.lang.String getTables()> -> _SOURCE_
<android.app.Notification$Action: boolean getAllowGeneratedReplies()> -> _SOURCE_
<android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getNotificationChannelsBypassingDnd(java.lang.String,int)> -> _SOURCE_
<android.content.integrity.IAppIntegrityManager$Default: java.util.List getWhitelistedRuleProviders()> -> _SOURCE_
<android.content.Intent: java.lang.String getIdentifier()> -> _SOURCE_
<android.app.IActivityManager$Stub$Proxy: java.util.List getRunningExternalApplications()> -> _SOURCE_
<android.content.pm.LauncherApps$PinItemRequest: android.os.Bundle getExtras()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean iccCloseLogicalChannelBySlot(int,int)> -> _SOURCE_
<android.hardware.cas.V1_0.ICas$Proxy: android.internal.hidl.base.V1_0.DebugInfo getDebugInfo()> -> _SOURCE_
<android.telephony.CellIdentityGsm: java.lang.String toString()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.content.pm.IPackageInstallerSession$Stub: android.content.pm.IPackageInstallerSession getDefaultImpl()> -> _SOURCE_
<android.graphics.drawable.DrawableContainer: android.graphics.Insets getOpticalInsets()> -> _SOURCE_
<android.media.session.ISessionController$Default: android.media.session.MediaController$PlaybackInfo getVolumeAttributes()> -> _SOURCE_
<android.service.notification.SnoozeCriterion: java.lang.CharSequence getConfirmation()> -> _SOURCE_
<android.media.session.ISessionManager$Default: java.util.List getSessions(android.content.ComponentName,int)> -> _SOURCE_
<android.nfc.INfcDta$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.net.lowpan.ILowpanInterface$Stub$Proxy: java.lang.String getName()> -> _SOURCE_
<android.location.IGnssNavigationMessageListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.graphics.Paint: float getFontSpacing()> -> _SOURCE_
<android.telephony.TelephonyManager: android.telephony.NetworkScan requestNetworkScan(android.telephony.NetworkScanRequest,android.telephony.TelephonyScanManager$NetworkScanCallback)> -> _SOURCE_
<com.android.internal.telephony.euicc.IDeleteProfileCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isMultiSimEnabled()> -> _SOURCE_
<android.text.PrecomputedText: android.text.PrecomputedText$ParagraphInfo[] getParagraphInfo()> -> _SOURCE_
<android.app.backup.FullBackup: android.app.backup.FullBackup$BackupScheme getBackupScheme(android.content.Context)> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.CharSequence getLongSupportMessage(android.content.ComponentName)> -> _SOURCE_
<android.media.midi.IMidiDeviceOpenCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.view.Display$Mode: float getRefreshRate()> -> _SOURCE_
<android.telephony.ServiceState: java.lang.String getOperatorAlphaLongRaw()> -> _SOURCE_
<android.widget.RadioGroup: android.view.autofill.AutofillValue getAutofillValue()> -> _SOURCE_
<android.hardware.radio.RadioManager$ModuleProperties: java.lang.String getVersion()> -> _SOURCE_
<android.security.keystore.IKeystoreKeyCharacteristicsCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.internal.telephony.euicc.IGetAllProfilesCallback$Stub: com.android.internal.telephony.euicc.IGetAllProfilesCallback getDefaultImpl()> -> _SOURCE_
<android.net.ConnectivityManager: android.net.ProxyInfo getDefaultProxy()> -> _SOURCE_
<android.hardware.radio.TunerAdapter: android.graphics.Bitmap getMetadataImage(int)> -> _SOURCE_
<android.net.IpSecManager$UdpEncapsulationSocket: java.io.FileDescriptor getFileDescriptor()> -> _SOURCE_
<android.os.Environment: boolean isExternalStorageLegacy()> -> _SOURCE_
<android.accessibilityservice.FingerprintGestureController: boolean isGestureDetectionAvailable()> -> _SOURCE_
<android.os.UserManager$EnforcingUser: android.os.UserHandle getUserHandle()> -> _SOURCE_
<android.media.MediaHTTPConnection: long getSize()> -> _SOURCE_
<android.telephony.ServiceState: int getBitmaskFromString(java.lang.String)> -> _SOURCE_
<android.app.Notification$CarExtender$UnreadConversation: java.lang.String getParticipant()> -> _SOURCE_
<android.graphics.Paint: android.graphics.Paint$FontMetricsInt getFontMetricsInt()> -> _SOURCE_
<android.accessibilityservice.GestureDescription$MotionEventGenerator: java.util.List getGestureStepsFromGestureDescription(android.accessibilityservice.GestureDescription,int)> -> _SOURCE_
<android.telephony.TelephonyManager: void call(java.lang.String,java.lang.String)> -> _SOURCE_
<android.view.ViewConfiguration: int getFadingEdgeLength()> -> _SOURCE_
<android.telephony.DataConnectionRealTimeInfo: long getTime()> -> _SOURCE_
<android.net.ISocketKeepaliveCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String[] getIsimImpu()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getMmsUserAgent()> -> _SOURCE_
<com.android.internal.telephony.IUpdateAvailableNetworksCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.util.StateSet: int[] get(int)> -> _SOURCE_
<android.telephony.SignalStrength: int getCdmaLevel()> -> _SOURCE_
<android.graphics.drawable.VectorDrawable$VGroup: float getScaleY()> -> _SOURCE_
<android.telecom.TelecomManager: android.telecom.PhoneAccountHandle getSimCallManagerForSubscription(int)> -> _SOURCE_
<android.content.pm.parsing.result.ParseTypeImpl: java.lang.String getErrorMessage()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: android.os.BatteryStats$ControllerActivityCounter getModemControllerActivity()> -> _SOURCE_
<android.hardware.camera2.params.StreamConfigurationDuration: long getDuration()> -> _SOURCE_
<android.os.StatFs: long getBlockCountLong()> -> _SOURCE_
<android.hardware.camera2.CameraManager$CameraManagerGlobal: java.lang.String[] getCameraIdList()> -> _SOURCE_
<android.media.session.ISessionController$Stub$Proxy: java.lang.String getPackageName()> -> _SOURCE_
<android.app.prediction.AppTargetId: java.lang.String getId()> -> _SOURCE_
<android.app.IUiModeManager$Stub$Proxy: long getCustomNightModeEnd()> -> _SOURCE_
<android.app.Notification$WearableExtender: java.lang.String getDismissalId()> -> _SOURCE_
<android.hardware.display.Time: java.time.LocalTime getLocalTime()> -> _SOURCE_
<android.database.AbstractWindowedCursor: android.database.CursorWindow getWindow()> -> _SOURCE_
<android.app.timezone.RulesState: android.app.timezone.DistroRulesVersion getStagedDistroRulesVersion()> -> _SOURCE_
<android.os.storage.StorageManager: android.os.storage.StorageVolume getPrimaryStorageVolume()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean disableDataConnectivity()> -> _SOURCE_
<android.content.pm.CrossProfileApps: java.util.List getTargetUserProfiles()> -> _SOURCE_
<android.content.pm.PackagePartitions$SystemPartition: java.io.File getPrivAppFolder()> -> _SOURCE_
<android.content.IIntentSender$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telephony.ims.aidl.IImsConfig$Stub: android.telephony.ims.aidl.IImsConfig getDefaultImpl()> -> _SOURCE_
<android.view.IRecentsAnimationRunner$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: java.lang.String getMmsUAProfUrl(int)> -> _SOURCE_
<android.graphics.RenderNode: float getRotationY()> -> _SOURCE_
<android.service.autofill.FieldClassification$Match: java.lang.String getCategoryId()> -> _SOURCE_
<android.telephony.NetworkScanRequest: android.telephony.RadioAccessSpecifier[] getSpecifiers()> -> _SOURCE_
<android.os.IDeviceIdentifiersPolicyService$Stub$Proxy: java.lang.String getSerialForPackage(java.lang.String,java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.lang.String getMeidForSlot(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.os.storage.DiskInfo: java.lang.String getId()> -> _SOURCE_
<com.android.internal.app.IAppOpsNotedCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.hardware.camera2.ICameraDeviceUser$Stub$Proxy: android.hardware.camera2.impl.CameraMetadataNative getCameraInfo()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getCardIdForDefaultEuicc(int,java.lang.String)> -> _SOURCE_
<android.os.HidlMemory: java.lang.String getName()> -> _SOURCE_
<android.net.ConnectivityManager: java.util.HashMap access$800()> -> _SOURCE_
<android.media.session.ISession$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.media.MediaDrm$Certificate: byte[] getContent()> -> _SOURCE_
<android.telephony.SmsMessage$MessageClass: android.telephony.SmsMessage$MessageClass[] values()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: boolean hasIccCard()> -> _SOURCE_
<android.telephony.SubscriptionInfo: boolean areUiccApplicationsEnabled()> -> _SOURCE_
<android.telephony.CellIdentityWcdma: int getMnc()> -> _SOURCE_
<android.app.ApplicationPackageManager: boolean isSafeMode()> -> _SOURCE_
<android.os.IDumpstateListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.os.storage.StorageManager: boolean isNonDefaultBlockEncrypted()> -> _SOURCE_
<android.app.Activity: android.app.Activity getParent()> -> _SOURCE_
<android.telephony.SmsCbMessage: int getMessageFormat()> -> _SOURCE_
<android.telephony.TelephonyManager: long getBitMaskForNetworkType(int)> -> _SOURCE_
<android.hardware.Sensor: java.lang.String getName()> -> _SOURCE_
<android.hardware.display.BrightnessConfiguration: float getShortTermModelUpperLuxMultiplier()> -> _SOURCE_
<android.location.LocationProvider: java.lang.String getName()> -> _SOURCE_
<com.android.internal.policy.PhoneWindow: android.view.View getNavigationBarBackgroundView()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.bluetooth.le.IPeriodicAdvertisingCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.hardware.camera2.CaptureResult: java.util.List getKeys()> -> _SOURCE_
<android.hardware.cas.V1_0.ICasListener$Stub: android.internal.hidl.base.V1_0.DebugInfo getDebugInfo()> -> _SOURCE_
<android.hardware.hdmi.HdmiSwitchClient: java.util.List getPortInfo()> -> _SOURCE_
<android.net.IEthernetServiceListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.usage.ExternalStorageStats: long getTotalBytes()> -> _SOURCE_
<com.android.internal.telephony.ICarrierConfigLoader$Stub: android.os.IBinder asBinder()> -> _SOURCE_
<android.net.NetworkStats: java.lang.String[] getUniqueIfaces()> -> _SOURCE_
<android.content.ContentResolver: android.content.ContentResolver$OpenResourceIdResult getResourceId(android.net.Uri)> -> _SOURCE_
<android.webkit.WebViewFactory: java.lang.Class getWebViewProviderClass(java.lang.ClassLoader)> -> _SOURCE_
<android.print.PrinterInfo: android.print.PrinterCapabilitiesInfo getCapabilities()> -> _SOURCE_
<android.widget.ExpandableListConnector: android.widget.ExpandableListAdapter getAdapter()> -> _SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String getCaptivePortalServerUrl()> -> _SOURCE_
<android.widget.RemoteViewsAdapter$RemoteViewsFrameLayout: android.view.View getDefaultView()> -> _SOURCE_
<android.accounts.IAccountAuthenticator$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.media.projection.IMediaProjectionWatcherCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telephony.TelephonyScanManager: android.util.SparseArray access$000(android.telephony.TelephonyScanManager)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isAlwaysOnVpnLockdownEnabled()> -> _SOURCE_
<com.android.internal.app.IBatteryStats$Stub$Proxy: long getAwakeTimePlugged()> -> _SOURCE_
<android.hardware.input.IInputManager$Stub$Proxy: java.lang.String getCurrentKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier)> -> _SOURCE_
<android.app.usage.StorageStats: long getCacheBytes()> -> _SOURCE_
<android.transition.Transition: android.transition.TransitionPropagation getPropagation()> -> _SOURCE_
<android.app.Notification: java.lang.String getSortKey()> -> _SOURCE_
<android.os.incremental.IStorageHealthListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.hardware.usb.IUsbManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.server.SystemConfig: android.util.ArraySet getDefaultVrComponents()> -> _SOURCE_
<android.net.ITestNetworkManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.hardware.camera2.CameraCharacteristics$Key: long getVendorId()> -> _SOURCE_
<android.security.keystore.AndroidKeyStoreKey: java.lang.String getAlias()> -> _SOURCE_
<android.media.soundtrigger.SoundTriggerManager$Model: java.util.UUID getModelUuid()> -> _SOURCE_
<android.hardware.input.InputManager: boolean isInputDeviceEnabled(int)> -> _SOURCE_
<android.hardware.display.IColorDisplayManager$Stub$Proxy: android.hardware.display.Time getNightDisplayCustomEndTime()> -> _SOURCE_
<android.os.UserManager: boolean isManagedProfile()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.util.Set getAffiliationIds(android.content.ComponentName)> -> _SOURCE_
<android.media.AudioAttributes: android.os.Bundle getBundle()> -> _SOURCE_
<android.os.IDumpstate$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telephony.CarrierRestrictionRules: int getMultiSimPolicy()> -> _SOURCE_
<android.app.IWallpaperManager$Stub: android.app.IWallpaperManager getDefaultImpl()> -> _SOURCE_
<android.media.session.IOnMediaKeyEventDispatchedListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.WallpaperInfo: android.net.Uri getSettingsSliceUri()> -> _SOURCE_
<android.security.keystore.IKeystoreResponseCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.SubscriptionManager: android.content.res.Resources getResourcesForSubId(android.content.Context,int)> -> _SOURCE_
<android.media.Image: java.lang.Object getOwner()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: boolean needsOtaServiceProvisioning()> -> _SOURCE_
<android.net.TestNetworkManager: android.net.TestNetworkInterface createTunInterface(android.net.LinkAddress[])> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.lang.String getProfileOwnerName()> -> _SOURCE_
<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo getUserInfo(int)> -> _SOURCE_
<android.net.lowpan.LowpanInterface: boolean isConnected()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getVoiceMailAlphaTag(int)> -> _SOURCE_
<android.nfc.tech.IsoDep: android.nfc.tech.IsoDep get(android.nfc.Tag)> -> _SOURCE_
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$ConstantState getConstantState()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.String getProfileOwnerName(int)> -> _SOURCE_
<android.hardware.input.IInputManager$Default: android.hardware.input.KeyboardLayout[] getKeyboardLayouts()> -> _SOURCE_
<android.view.View$DragShadowBuilder: android.view.View getView()> -> _SOURCE_
<android.app.usage.NetworkStats$Bucket: long getTxBytes()> -> _SOURCE_
<android.net.LinkProperties: java.util.List getRoutes()> -> _SOURCE_
<android.media.IAudioService$Stub$Proxy: java.util.List getActiveRecordingConfigurations()> -> _SOURCE_
<android.net.CaptivePortalData: android.net.Uri getVenueInfoUrl()> -> _SOURCE_
<android.telephony.TelephonyManager: long getPreferredNetworkTypeBitmask()> -> _SOURCE_
<android.telephony.SubscriptionPlan: java.lang.CharSequence access$202(android.telephony.SubscriptionPlan,java.lang.CharSequence)> -> _SOURCE_
<android.webkit.WebView$PrivateAccess: int getHorizontalScrollbarHeight()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: android.os.BatteryStats$Counter getBluetoothScanResultBgCounter()> -> _SOURCE_
<android.view.IDisplayWindowRotationController$Stub: android.view.IDisplayWindowRotationController getDefaultImpl()> -> _SOURCE_
<com.android.internal.compat.CompatibilityChangeInfo: long getId()> -> _SOURCE_
<android.telephony.CellInfo: java.lang.String toString()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.widget.Spinner: android.content.Context getPopupContext()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.lang.String getLine1NumberForDisplay(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.os.BasicShellCommandHandler: int getRemainingArgsCount()> -> _SOURCE_
<android.net.lowpan.ILowpanInterface$Default: android.net.lowpan.LowpanIdentity getLowpanIdentity()> -> _SOURCE_
<android.view.accessibility.IAccessibilityManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.AppOpsManager: boolean isOpActive(java.lang.String,int,java.lang.String)> -> _SOURCE_
<android.telephony.TelephonyManager: boolean enableDataConnectivity()> -> _SOURCE_
<com.android.internal.telephony.euicc.ICancelSessionCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: boolean isVideoTelephonyAvailable(int)> -> _SOURCE_
<android.telephony.ServiceState: boolean getDataRoamingFromRegistration()> -> _SOURCE_
<android.os.IUserManager$Stub$Proxy: java.util.List getUsers(boolean,boolean,boolean)> -> _SOURCE_
<android.media.soundtrigger.SoundTriggerManager: android.hardware.soundtrigger.SoundTrigger$ModuleProperties getModuleProperties()> -> _SOURCE_
<android.telephony.CellIdentityGsm: android.telephony.CellIdentity sanitizeLocationInfo()> -> _SOURCE_
<android.service.notification.StatusBarNotification: java.lang.String getOpPkg()> -> _SOURCE_
<android.window.IWindowContainerToken$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.view.ViewConfiguration: int getHoverTooltipHideTimeout()> -> _SOURCE_
<android.telephony.ImsiEncryptionInfo: java.util.Date getExpirationTime()> -> _SOURCE_
<android.app.AutomaticZenRule: long getCreationTime()> -> _SOURCE_
<android.media.AudioManager: boolean hasHapticChannels(android.net.Uri)> -> _SOURCE_
<android.view.IGraphicsStatsCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.view.VerifiedMotionEvent: float getRawY()> -> _SOURCE_
<android.view.DisplayInfo: float[] getDefaultRefreshRates()> -> _SOURCE_
<android.content.IIntentReceiver$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.os.IUserManager$Default: android.content.pm.UserInfo getPrimaryUser()> -> _SOURCE_
<android.hardware.camera2.TotalCaptureResult: java.util.Map getPhysicalCameraResults()> -> _SOURCE_
<android.view.InputDevice$MotionRange: float getMax()> -> _SOURCE_
<android.renderscript.Element: android.renderscript.Element$DataType getDataType()> -> _SOURCE_
<android.hardware.soundtrigger.SoundTrigger$Keyphrase: java.util.Locale getLocale()> -> _SOURCE_
<android.telephony.SmsCbMessage: boolean needGeoFencingCheck()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getRadioAccessFamily(int,java.lang.String)> -> _SOURCE_
<android.animation.Animator: android.animation.TimeInterpolator getInterpolator()> -> _SOURCE_
<android.graphics.fonts.SystemFonts: android.text.FontConfig$Alias[] getAliases()> -> _SOURCE_
<android.graphics.ImageDecoder$ResourceSource: android.content.res.Resources getResources()> -> _SOURCE_
<android.nfc.NfcAdapter: android.nfc.INfcTag getTagService()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.CharSequence getShortSupportMessage(android.content.ComponentName)> -> _SOURCE_
<android.net.nsd.INsdManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.view.textservice.SpellCheckerSession: boolean isSessionDisconnected()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getSimSerialNumber(int)> -> _SOURCE_
<android.net.ConnectivityManager: android.net.LinkProperties getActiveLinkProperties()> -> _SOURCE_
<android.transition.Scene: android.view.ViewGroup getSceneRoot()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isSecurityLoggingEnabled(android.content.ComponentName)> -> _SOURCE_
<android.app.servertransaction.TransactionExecutorHelper: java.lang.String getStateName(int)> -> _SOURCE_
<com.android.internal.telephony.GsmAlphabet: boolean isGsmSeptets(char)> -> _SOURCE_
<android.util.apk.ApkSigningBlockUtils: android.util.Pair getEocd(java.io.RandomAccessFile)> -> _SOURCE_
<android.net.Ikev2VpnProfile: java.security.cert.X509Certificate getServerRootCaCert()> -> _SOURCE_
<android.view.animation.LayoutAnimationController: android.view.animation.Animation getAnimation()> -> _SOURCE_
<com.android.internal.telephony.SmsMessageBase: boolean isEmailAddress(java.lang.String)> -> _SOURCE_
<android.content.pm.PackageParser$ApkLite: long getLongVersionCode()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.util.Set getCrossProfilePackages(android.content.ComponentName)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean isDataRoamingEnabled(int)> -> _SOURCE_
<android.content.pm.ShortcutInfo: android.content.LocusId getLocusId()> -> _SOURCE_
<android.net.NetworkInfo: java.lang.String getExtraInfo()> -> _SOURCE_
<android.telephony.ClosedSubscriberGroupInfo: int describeContents()> -> _SOURCE_
<android.net.http.SslCertificate$DName: java.lang.String getDName()> -> _SOURCE_
<android.companion.ICompanionDeviceManager$Stub: android.companion.ICompanionDeviceManager getDefaultImpl()> -> _SOURCE_
<android.app.assist.AssistStructure$ViewNode: java.lang.String getHint()> -> _SOURCE_
<android.app.timezone.IRulesManager$Stub: android.app.timezone.IRulesManager getDefaultImpl()> -> _SOURCE_
<android.app.INotificationManager$Stub$Proxy: byte[] getBackupPayload(int)> -> _SOURCE_
<android.accessibilityservice.AccessibilityServiceInfo: java.lang.String getId()> -> _SOURCE_
<android.telephony.CarrierRestrictionRules: int getDefaultCarrierRestriction()> -> _SOURCE_
<android.widget.EditText: android.text.Editable getText()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: java.lang.String getNetworkCountryIsoForPhone(int)> -> _SOURCE_
<android.view.contentcapture.ViewNode$ViewStructureImpl: android.graphics.Rect getTempRect()> -> _SOURCE_
<com.android.internal.view.IInputContext$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: android.app.admin.DevicePolicyManager getParentProfileInstance(android.content.pm.UserInfo)> -> _SOURCE_
<android.media.midi.MidiManager: android.media.midi.MidiDeviceInfo[] getDevices()> -> _SOURCE_
<android.bluetooth.IBluetoothA2dpSink$Default: java.util.List getConnectedDevices()> -> _SOURCE_
<android.print.IWriteResultCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.os.IDeviceIdleController$Default: java.lang.String[] getSystemPowerWhitelist()> -> _SOURCE_
<android.view.inputmethod.InputConnectionWrapper: java.lang.CharSequence getSelectedText(int)> -> _SOURCE_
<android.content.IContentService$Default: android.os.Bundle getCache(java.lang.String,android.net.Uri,int)> -> _SOURCE_
<com.android.internal.os.ZygoteServer: java.io.FileDescriptor getZygoteSocketFileDescriptor()> -> _SOURCE_
<android.media.MediaFormat: java.util.Map getMap()> -> _SOURCE_
<android.app.IActivityManager$Default: android.app.ActivityManager$StackInfo getFocusedStackInfo()> -> _SOURCE_
<android.content.pm.ModuleInfo: java.lang.CharSequence getName()> -> _SOURCE_
<android.app.Activity: android.view.autofill.AutofillManager$AutofillClient getAutofillClient()> -> _SOURCE_
<android.app.NotificationManager: boolean isNotificationListenerAccessGranted(android.content.ComponentName)> -> _SOURCE_
<android.hardware.input.KeyboardLayout: android.os.LocaleList getLocales()> -> _SOURCE_
<android.telephony.CellInfoNr: android.telephony.CellInfo sanitizeLocationInfo()> -> _SOURCE_
<android.text.PrecomputedText$Params: android.text.TextPaint getTextPaint()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean putIntAtIndex(android.content.ContentResolver,java.lang.String,int,int)> -> _SOURCE_
<android.content.pm.parsing.component.ParsedProvider: android.os.PatternMatcher[] getUriPermissionPatterns()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String[] getPcscfAddress(java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.lang.String getDeviceIdWithFeature(java.lang.String,java.lang.String)> -> _SOURCE_
<android.animation.AnimationHandler: int getAnimationCount()> -> _SOURCE_
<android.hardware.radio.V1_5.OptionalCsgInfo: byte getDiscriminator()> -> _SOURCE_
<android.content.RestrictionEntry: boolean getSelectedState()> -> _SOURCE_
<android.telephony.ServiceState: java.lang.String getOperatorAlphaLong()> -> _SOURCE_
<android.media.soundtrigger.SoundTriggerDetector$EventPayload: java.lang.Integer getCaptureSession()> -> _SOURCE_
<android.hardware.Camera$Parameters: java.util.List getFocusAreas()> -> _SOURCE_
<android.bluetooth.BluetoothHeadsetClient: android.os.Bundle getCurrentAgFeatures(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<android.telephony.euicc.DownloadableSubscription: java.lang.String getEncodedActivationCode()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.lang.String[] getAccountTypesWithManagementDisabledAsUser(int)> -> _SOURCE_
<android.telephony.BarringInfo$BarringServiceInfo: boolean isBarred()> -> _SOURCE_
<android.media.session.ISessionManager$Stub: android.media.session.ISessionManager getDefaultImpl()> -> _SOURCE_
<android.net.lowpan.ILowpanInterface$Default: byte[] getExtendedAddress()> -> _SOURCE_
<android.os.UserManager: boolean isUserUnlocked()> -> _SOURCE_
<android.accounts.IAccountManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.media.Rating: float getPercentRating()> -> _SOURCE_
<android.hardware.location.NanoAppBinary: byte getTargetChreApiMajorVersion()> -> _SOURCE_
<com.android.internal.graphics.palette.Target: float getMaximumSaturation()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: int getCdmaEriIconModeForSubscriber(int,java.lang.String,java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.ISms$Stub$Proxy: boolean isSMSPromptEnabled()> -> _SOURCE_
<android.hardware.hdmi.IHdmiControlCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.os.UserManager: android.os.Bundle getDefaultGuestRestrictions()> -> _SOURCE_
<android.content.pm.SharedLibraryInfo: java.util.List getDependencies()> -> _SOURCE_
<android.util.KeyValueListParser$LongValue: java.lang.String getKey()> -> _SOURCE_
<android.accessibilityservice.AccessibilityService: android.view.accessibility.AccessibilityNodeInfo getRootInActiveWindow()> -> _SOURCE_
<android.graphics.drawable.AnimatedVectorDrawable: boolean isStateful()> -> _SOURCE_
<android.print.PrintJobInfo: java.lang.String getPrinterName()> -> _SOURCE_
<android.app.usage.UsageEvents$Event: long getTimeStamp()> -> _SOURCE_
<android.telephony.SubscriptionManager: int[] getActiveSubscriptionIdList()> -> _SOURCE_
<com.android.internal.widget.EditableInputConnection: android.text.Editable getEditable()> -> _SOURCE_
<android.os.UserManager: android.content.pm.UserInfo getProfileParent(int)> -> _SOURCE_
<android.telephony.SmsManager: boolean isSMSPromptEnabled()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: android.content.ComponentName getDeviceOwnerComponentOnAnyUser()> -> _SOURCE_
<android.net.wifi.nl80211.IClientInterface$Stub$Proxy: android.net.wifi.nl80211.IWifiScannerImpl getWifiScannerImpl()> -> _SOURCE_
<android.net.netstats.provider.NetworkStatsProvider: android.net.netstats.provider.INetworkStatsProviderCallback getProviderCallbackBinderOrThrow()> -> _SOURCE_
<android.content.res.ResourcesImpl$ThemeImpl: android.content.res.Resources$ThemeKey getKey()> -> _SOURCE_
<android.telephony.TelephonyManager: java.util.List getAllCellInfo()> -> _SOURCE_
<android.net.Uri$StringUri: java.lang.String getEncodedSchemeSpecificPart()> -> _SOURCE_
<android.view.WindowInsets: android.view.DisplayCutout getDisplayCutout()> -> _SOURCE_
<android.content.ContextWrapper: android.content.res.AssetManager getAssets()> -> _SOURCE_
<android.telecom.VideoProfile$CameraCapabilities: float getMaxZoom()> -> _SOURCE_
<android.security.net.config.DirectoryCertificateSource: java.util.Set getCertificates()> -> _SOURCE_
<android.app.AppOpsManager$OnOpNotedCallback: java.util.concurrent.Executor getAsyncNotedExecutor()> -> _SOURCE_
<android.view.View$AttachInfo: com.android.internal.view.ScrollCaptureInternal getScrollCaptureInternal()> -> _SOURCE_
<android.net.TrafficStats: long getTotalTxBytes()> -> _SOURCE_
<android.telephony.CellInfoTdscdma: java.lang.String toString()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: int getPreferredNetworkType(int)> -> _SOURCE_
<android.provider.SyncStateContract$Helpers: android.util.Pair getWithUri(android.content.ContentProviderClient,android.net.Uri,android.accounts.Account)> -> _SOURCE_
<android.os.storage.StorageManager: java.util.List getDisks()> -> _SOURCE_
<android.hardware.camera2.params.MeteringRectangle: android.graphics.Point getUpperLeftPoint()> -> _SOURCE_
<android.content.pm.parsing.component.ParsedPermission: android.content.pm.parsing.component.ParsedPermissionGroup getParsedPermissionGroup()> -> _SOURCE_
<android.bluetooth.IBluetoothManager$Default: java.lang.String getName()> -> _SOURCE_
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: android.view.textservice.SpellCheckerInfo getCurrentSpellChecker(int,java.lang.String)> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: android.content.ComponentName getDeviceOwnerComponent(boolean)> -> _SOURCE_
<android.telephony.TelephonyManager: android.telephony.CallForwardingInfo getCallForwarding(int)> -> _SOURCE_
<android.text.style.TextAppearanceSpan: float getShadowRadius()> -> _SOURCE_
<android.net.Ikev2VpnProfile: java.util.List getAllowedAlgorithms()> -> _SOURCE_
<android.os.connectivity.WifiBatteryStats: long getNumPacketsTx()> -> _SOURCE_
<android.graphics.drawable.ShapeDrawable: android.graphics.drawable.shapes.Shape getShape()> -> _SOURCE_
<android.location.Location: long getElapsedRealtimeNanos()> -> _SOURCE_
<android.hardware.radio.ITuner$Stub$Proxy: java.util.Map getParameters(java.util.List)> -> _SOURCE_
<android.os.UserManager: android.graphics.drawable.Drawable getBadgedDrawableForUser(android.graphics.drawable.Drawable,android.os.UserHandle,android.graphics.Rect,int)> -> _SOURCE_
<com.android.internal.widget.IRemoteViewsFactory$Stub$Proxy: android.widget.RemoteViews getLoadingView()> -> _SOURCE_
<android.location.LocationRequest: long getInterval()> -> _SOURCE_
<com.android.internal.telephony.ISub$Default: java.util.List getOpportunisticSubscriptions(java.lang.String,java.lang.String)> -> _SOURCE_
<android.telephony.TelephonyManager: void resetOtaEmergencyNumberDbFilePath()> -> _SOURCE_
<android.content.pm.IShortcutService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: android.os.connectivity.GpsBatteryStats getGpsBatteryStats()> -> _SOURCE_
<android.app.admin.ConnectEvent: java.net.InetAddress getInetAddress()> -> _SOURCE_
<android.animation.PropertyValuesHolder: java.lang.Object getAnimatedValue()> -> _SOURCE_
<android.app.IUiAutomationConnection$Stub$Proxy: android.view.WindowAnimationFrameStats getWindowAnimationFrameStats()> -> _SOURCE_
<android.view.Window: android.transition.Transition getExitTransition()> -> _SOURCE_
<android.hardware.display.DeviceProductInfo: android.hardware.display.DeviceProductInfo$ManufactureDate getManufactureDate()> -> _SOURCE_
<android.bluetooth.IBluetoothSap$Stub$Proxy: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$ControllerActivityCounterImpl: android.os.BatteryStats$LongCounter[] getTxTimeCounters()> -> _SOURCE_
<android.net.INetworkPolicyManager$Stub$Proxy: java.lang.String getSubscriptionPlansOwner(int)> -> _SOURCE_
<com.android.internal.app.IBatteryStats$Stub$Proxy: android.os.connectivity.CellularBatteryStats getCellularBatteryStats()> -> _SOURCE_
<android.telephony.SubscriptionInfo: int hashCode()> -> _SOURCE_
<android.content.ContentResolver: int getIsSyncable(android.accounts.Account,java.lang.String)> -> _SOURCE_
<android.media.tv.ITvInputManager$Default: java.util.List getAvailableTvStreamConfigList(java.lang.String,int)> -> _SOURCE_
<android.content.pm.ShortcutInfo: java.lang.String getResourceTypeAndEntryName(java.lang.String)> -> _SOURCE_
<android.net.Uri$AbstractHierarchicalUri: java.lang.String getLastPathSegment()> -> _SOURCE_
<android.accessibilityservice.IAccessibilityServiceConnection$Stub$Proxy: android.os.IBinder getOverlayWindowToken(int)> -> _SOURCE_
<android.telephony.TelephonyHistogram: int getId()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean canConnectTo5GInDsdsMode()> -> _SOURCE_
<android.database.CursorWrapper: long getLong(int)> -> _SOURCE_
<android.transition.Transition: java.util.List getTargetViewNames()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: android.util.ArrayMap getJobCompletionStats()> -> _SOURCE_
<android.bluetooth.BluetoothHeadsetClientCall: android.bluetooth.BluetoothDevice getDevice()> -> _SOURCE_
<android.view.textclassifier.TextClassificationManager: android.view.textclassifier.TextClassifier getTextClassifier(int)> -> _SOURCE_
<android.bluetooth.BluetoothHeadset: java.util.List getConnectedDevices()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.service.carrier.CarrierIdentifier: java.lang.String getGid2()> -> _SOURCE_
<android.telephony.mbms.ServiceInfo: java.util.Set getNamedContentLocales()> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: java.util.List getQueriesIntents()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getVoWiFiRoamingModeSetting(int)> -> _SOURCE_
<android.view.textservice.TextInfo: java.lang.CharSequence getCharSequence()> -> _SOURCE_
<android.content.pm.ShortcutQueryWrapper: java.lang.String getPackage()> -> _SOURCE_
<android.content.res.Configuration: android.os.LocaleList getLocales()> -> _SOURCE_
<android.app.VoiceInteractor$Request: java.lang.String getName()> -> _SOURCE_
<com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: android.telephony.euicc.EuiccInfo getEuiccInfo(int)> -> _SOURCE_
<android.drm.DrmManagerClient: java.lang.String getOriginalMimeType(android.net.Uri)> -> _SOURCE_
<android.telephony.TelephonyScanManager: void <init>()> -> _SOURCE_
<android.animation.TypeConverter: java.lang.Class getTargetType()> -> _SOURCE_
<android.telephony.SmsManager: void downloadMultimediaMessage(android.content.Context,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent)> -> _SOURCE_
<android.telephony.CellInfoLte: java.lang.String toString()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.telephony.PinResult: int describeContents()> -> _SOURCE_
<android.content.pm.ShortcutInfo: java.lang.String getIconUri()> -> _SOURCE_
<com.android.internal.view.menu.MenuItemImpl: android.view.View getActionView()> -> _SOURCE_
<android.telephony.SmsMessage: byte[] getSubmitPduEncodedMessage(boolean,java.lang.String,java.lang.String,int,int,int,int,int,int)> -> _SOURCE_
<android.telephony.SubscriptionInfo: java.lang.String getGroupOwner()> -> _SOURCE_
<android.view.MotionEvent: long getEventTimeNano()> -> _SOURCE_
<android.telephony.ims.aidl.IImsSmsListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.telephony.SmsHeader: int hashCode()> -> _SOURCE_
<android.hardware.display.DisplayManager: android.hardware.display.WifiDisplayStatus getWifiDisplayStatus()> -> _SOURCE_
<android.telephony.TelephonyManager: long getSupportedRadioAccessFamily()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: long getPageSize()> -> _SOURCE_
<android.app.ApplicationPackageManager: int getPermissionFlags(java.lang.String,java.lang.String,android.os.UserHandle)> -> _SOURCE_
<android.app.blob.BlobInfo: long getSizeBytes()> -> _SOURCE_
<android.view.textclassifier.TextLinks: java.lang.CharSequence getText()> -> _SOURCE_
<com.android.server.SystemConfig: android.util.SparseArray getSystemPermissions()> -> _SOURCE_
<android.app.Instrumentation: java.lang.String getProcessName()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: int getLteOnCdmaModeForSubscriber(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.service.notification.StatusBarNotification: java.lang.String getGroupLogTag()> -> _SOURCE_
<com.android.internal.app.IAppOpsActiveCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.database.BulkCursorProxy: android.os.Bundle getExtras()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: int getVoiceActivationState(int,java.lang.String)> -> _SOURCE_
<android.animation.PropertyValuesHolder$IntPropertyValuesHolder: java.lang.Object getAnimatedValue()> -> _SOURCE_
<android.widget.SuggestionsAdapter: java.lang.String getColumnString(android.database.Cursor,java.lang.String)> -> _SOURCE_
<android.telephony.CallQuality: int getDownlinkCallQualityLevel()> -> _SOURCE_
<android.os.storage.VolumeRecord: java.lang.String getNickname()> -> _SOURCE_
<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings getLockSettings()> -> _SOURCE_
<android.app.timezonedetector.ITimeZoneDetectorService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()> -> _SOURCE_
<android.nfc.NfcActivityManager: android.nfc.NfcActivityManager$NfcActivityState findResumedActivityState()> -> _SOURCE_
<android.telephony.ims.ImsSsData: boolean isTypeCw()> -> _SOURCE_
<com.android.internal.inputmethod.ICharSequenceResultCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.content.om.IOverlayManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.app.WindowDecorActionBar: java.lang.CharSequence getTitle()> -> _SOURCE_
<android.app.LoadedApk: android.content.res.CompatibilityInfo getCompatibilityInfo()> -> _SOURCE_
<android.window.IWindowOrganizerController$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getSubscriberIdForSubscriber(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.content.res.FontResourcesParser$ProviderResourceEntry: java.lang.String getPackage()> -> _SOURCE_
<android.view.ActionMode: java.lang.Object getTag()> -> _SOURCE_
<android.content.pm.PackageInstaller: android.content.pm.PackageInstaller$SessionInfo getSessionInfo(int)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: int getRadioHalVersion()> -> _SOURCE_
<android.view.ViewRootImpl: android.view.SurfaceControl$Transaction getBLASTSyncTransaction()> -> _SOURCE_
<android.content.pm.LauncherActivityInfo: android.os.UserHandle getUser()> -> _SOURCE_
<android.content.pm.ShortcutInfo: java.lang.String getResourceTypeName(java.lang.String)> -> _SOURCE_
<android.bluetooth.le.ScanFilter: byte[] getManufacturerData()> -> _SOURCE_
<android.net.Uri$StringUri: java.lang.String getFragment()> -> _SOURCE_
<android.net.wifi.nl80211.IClientInterface$Stub: android.net.wifi.nl80211.IClientInterface getDefaultImpl()> -> _SOURCE_
<android.view.WindowManagerImpl: android.view.Display getDefaultDisplay()> -> _SOURCE_
<android.webkit.WebSettings$ZoomDensity: int getValue()> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Default: java.lang.String getLine1NumberForSubscriber(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.os.IInstalld$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.view.inputmethod.CorrectionInfo: java.lang.CharSequence getNewText()> -> _SOURCE_
<android.content.pm.LauncherApps: java.util.List getActivityList(java.lang.String,android.os.UserHandle)> -> _SOURCE_
<android.telephony.CellIdentityTdscdma: int hashCode()> -> _SOURCE_
<android.media.MediaRecorder: android.media.AudioDeviceInfo getPreferredDevice()> -> _SOURCE_
<android.telephony.SignalStrength: int getWcdmaDbm()> -> _SOURCE_
<android.hardware.display.IDisplayManager$Default: android.hardware.display.WifiDisplayStatus getWifiDisplayStatus()> -> _SOURCE_
<android.accessibilityservice.AccessibilityService$MagnificationController: android.graphics.Region getMagnificationRegion()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean nvResetConfig(int)> -> _SOURCE_
<android.telephony.CellSignalStrengthNr: int hashCode()> -> _SOURCE_
<android.view.Display$HdrCapabilities: float getDesiredMaxAverageLuminance()> -> _SOURCE_
<android.app.WallpaperManager: int getWallpaperIdForUser(int,int)> -> _SOURCE_
<android.telecom.TelecomManager: java.util.List getSelfManagedPhoneAccounts()> -> _SOURCE_
<android.telephony.CellIdentityCdma: android.telephony.CellLocation asCellLocation()> -> _SOURCE_
<android.net.ConnectivityManager: android.net.Network getNetworkForType(int)> -> _SOURCE_
<com.android.ims.internal.IImsServiceFeatureCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.net.lowpan.ILowpanInterface$Default: android.net.lowpan.LowpanChannelInfo[] getSupportedChannels()> -> _SOURCE_
<android.app.SearchableInfo: java.lang.String getSuggestPackage()> -> _SOURCE_
<android.hardware.SensorManager: java.util.List getDynamicSensorList(int)> -> _SOURCE_
<android.os.UserManager: long[] getSerialNumbersOfUsers(boolean)> -> _SOURCE_
<android.text.method.DateTimeKeyListener: android.text.method.DateTimeKeyListener getInstance()> -> _SOURCE_
<android.view.accessibility.AccessibilityEvent: java.lang.CharSequence getPackageName()> -> _SOURCE_
<android.content.res.AssetFileDescriptor: long getLength()> -> _SOURCE_
<android.app.usage.NetworkStatsManager: android.app.usage.NetworkStats queryDetailsForUid(int,java.lang.String,long,long,int)> -> _SOURCE_
<android.telephony.PhoneNumberUtils: java.lang.String getNumberFromIntent(android.content.Intent,android.content.Context)> -> _SOURCE_
<android.os.UserManager: java.util.List getUsers()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.telephony.BarringInfo: int hashCode()> -> _SOURCE_
<android.telephony.NeighboringCellInfo: java.lang.String toString()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<com.android.internal.view.menu.ActionMenuItemView$ActionMenuItemForwardingListener: com.android.internal.view.menu.ShowableListMenu getPopup()> -> _SOURCE_
<android.service.vr.IVrStateCallbacks$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.accessibilityservice.IAccessibilityServiceConnection$Default: android.view.accessibility.AccessibilityWindowInfo$WindowListSparseArray getWindows()> -> _SOURCE_
<android.net.lowpan.LowpanCommissioningSession: android.net.lowpan.LowpanBeaconInfo getBeaconInfo()> -> _SOURCE_
<android.widget.Toolbar: java.lang.CharSequence getLogoDescription()> -> _SOURCE_
<android.bluetooth.IBluetoothPbapClient$Default: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
<android.hardware.face.IFaceServiceReceiver$Stub: android.hardware.face.IFaceServiceReceiver getDefaultImpl()> -> _SOURCE_
<android.nfc.cardemulation.ApduServiceInfo: java.lang.String getOffHostSecureElement()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: int getEmergencyNumberDbVersion(int)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: android.telephony.ServiceState getServiceStateForSubscriber(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.graphics.Region: android.graphics.Path getBoundaryPath()> -> _SOURCE_
<android.content.res.AssetManager: int[] getResourceIntArray(int)> -> _SOURCE_
<android.hardware.fingerprint.IFingerprintService$Stub$Proxy: long getAuthenticatorId(int)> -> _SOURCE_
<android.app._$$Lambda$AppOpsManager$HistoricalOp$Vs6pDL0wjOBTquwNnreWVbPQrn4: java.lang.Object get()> -> _SOURCE_
<android.app.LoadedApk: java.lang.String[] getSplitResDirs()> -> _SOURCE_
<com.android.internal.telephony.ISub$Default: java.lang.String getSubscriptionProperty(int,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.ISms$Default: boolean isImsSmsSupportedForSubscriber(int)> -> _SOURCE_
<android.print.IPrintDocumentAdapter$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.service.textclassifier.ITextClassifierCallback$Stub: android.service.textclassifier.ITextClassifierCallback getDefaultImpl()> -> _SOURCE_
<android.widget.Spinner$DropDownAdapter: boolean isEnabled(int)> -> _SOURCE_
<android.telephony.ClientRequestStats: long getPendingRequestsWakelockTime()> -> _SOURCE_
<android.app.AppGlobals: android.app.Application getInitialApplication()> -> _SOURCE_
<android.drm.ProcessedData: byte[] getData()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: android.content.ComponentName getProfileOwnerAsUser(int)> -> _SOURCE_
<android.text.style.SuggestionSpan: java.lang.String[] getSuggestions()> -> _SOURCE_
<android.content.res.AssetManager: java.lang.String getOverlayablesToString(java.lang.String)> -> _SOURCE_
<android.webkit.IWebViewUpdateService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.accessibilityservice.AccessibilityServiceInfo: java.lang.String getSettingsActivityName()> -> _SOURCE_
<android.app.assist.AssistStructure$ViewNode: java.lang.String getWebDomain()> -> _SOURCE_
<android.os.GraphicsEnvironment: android.os.GraphicsEnvironment getInstance()> -> _SOURCE_
<android.telephony.SubscriptionManager: java.util.List getCompleteActiveSubscriptionInfoList()> -> _SOURCE_
<android.telephony.SubscriptionManager: int lambda$removeSubscriptionsFromGroup$9(java.lang.Integer)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: boolean isTetheringApnRequiredForSubscriber(int)> -> _SOURCE_
<android.location.IGnssAntennaInfoListener$Stub: android.location.IGnssAntennaInfoListener getDefaultImpl()> -> _SOURCE_
<android.bluetooth.le.TruncatedFilter: java.util.List getStorageDescriptors()> -> _SOURCE_
<android.bluetooth.IBluetoothMetadataListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telephony.TelephonyManager: void resetIms(int)> -> _SOURCE_
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String getWellbeingPackageName()> -> _SOURCE_
<android.telephony.ims.feature._$$Lambda$RcsFeature$RcsFeatureBinder$M_Xsfh7yLPmebDSvMzAvEPPUmE0: java.lang.Object get()> -> _SOURCE_
<android.view.animation.AnimationSet: long getStartTime()> -> _SOURCE_
<android.content.pm.InstantAppResolveInfo: java.lang.String getPackageName()> -> _SOURCE_
<com.android.internal.telephony.SmsMessageBase: int getIndexOnIcc()> -> _SOURCE_
<android.os.BatterySaverPolicyConfig: boolean getEnableQuickDoze()> -> _SOURCE_
<android.service.dreams.IDreamManager$Stub: android.service.dreams.IDreamManager getDefaultImpl()> -> _SOURCE_
<android.hardware.ICameraService$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.content.res.ResourcesImpl: android.util.DisplayMetrics getDisplayMetrics()> -> _SOURCE_
<android.view.IWindowManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.view.contentcapture.ContentCaptureContext: android.content.LocusId getLocusId()> -> _SOURCE_
<android.content.ContentResolver: int getTargetSdkVersion()> -> _SOURCE_
<android.telephony.SmsMessage: android.telephony.SmsMessage createFromNativeSmsSubmitPdu(byte[],boolean)> -> _SOURCE_
<com.android.internal.net.INetworkWatchlistManager$Default: byte[] getWatchlistConfigHash()> -> _SOURCE_
<android.media.midi.IMidiManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.service.notification.NotificationListenerService: java.util.List getNotificationChannelGroups(java.lang.String,android.os.UserHandle)> -> _SOURCE_
<com.android.internal.os.BatteryStatsHelper: android.os.BatteryStats getStats()> -> _SOURCE_
<android.hardware.hdmi.IHdmiVendorCommandListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.assist.AssistStructure$WindowNode: java.lang.CharSequence getTitle()> -> _SOURCE_
<android.content.res.GradientColor: android.graphics.Shader getShader()> -> _SOURCE_
<android.telephony.TelephonyRegistryManager: void listenForSubscriber(int,java.lang.String,java.lang.String,android.telephony.PhoneStateListener,int,boolean)> -> _SOURCE_
<android.app.ActivityManager: android.app.IActivityManager getService()> -> _SOURCE_
<android.view.GestureExclusionTracker: java.util.List getRootSystemGestureExclusionRects()> -> _SOURCE_
<android.view.textclassifier.TextClassification: java.lang.CharSequence getLabel()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getUserControlDisabledPackages(android.content.ComponentName)> -> _SOURCE_
<android.hardware.input.InputManager: java.lang.String getCurrentKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier)> -> _SOURCE_
<android.app.ContextImpl: java.lang.String getBasePackageName()> -> _SOURCE_
<android.graphics.drawable.Icon: android.content.res.Resources getResources()> -> _SOURCE_
<android.os.SynchronousResultReceiver: java.lang.String getName()> -> _SOURCE_
<com.android.internal.view.menu.ActionMenuItem: android.content.res.ColorStateList getIconTintList()> -> _SOURCE_
<android.bluetooth.BluetoothPan: boolean isTetheringOn()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.app.DisabledWallpaperManager: android.graphics.Bitmap getBitmapAsUser(int,boolean)> -> _SOURCE_
<android.app.Notification$Builder: android.app.Notification getNotification()> -> _SOURCE_
<android.util.MapCollections: java.util.Set getKeySet()> -> _SOURCE_
<android.app.usage.IUsageStatsManager$Stub: android.app.usage.IUsageStatsManager getDefaultImpl()> -> _SOURCE_
<android.location.GpsNavigationMessage: short getStatus()> -> _SOURCE_
<android.view.ViewGroup: boolean getClipChildren()> -> _SOURCE_
<android.content.IContentService$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.provider.Settings$Secure: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)> -> _SOURCE_
<android.graphics.drawable.AdaptiveIconDrawable: android.graphics.drawable.Drawable getBackground()> -> _SOURCE_
<android.media.MediaRoute2Info: java.util.List getFeatures()> -> _SOURCE_
<android.os.UserManager: int getUserSerialNumber(int)> -> _SOURCE_
<android.window.WindowContainerTransaction$Change: android.graphics.Rect getBoundsChangeSurfaceBounds()> -> _SOURCE_
<android.view.IRemoteAnimationRunner$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.widget.Magnifier: float getCornerRadius()> -> _SOURCE_
<android.view.textclassifier.TextClassifierEvent: android.icu.util.ULocale getLocale()> -> _SOURCE_
<android.media.IAudioService$Stub$Proxy: java.util.List getAudioProductStrategies()> -> _SOURCE_
<android.media.soundtrigger.SoundTriggerManager: int getParameter(java.util.UUID,int)> -> _SOURCE_
<android.view.IInputMonitorHost$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.SmsMessage: java.lang.String getOriginatingAddress()> -> _SOURCE_
<android.media.AudioManager: int getMinVolumeIndexForAttributes(android.media.AudioAttributes)> -> _SOURCE_
<android.telephony.TelephonyManager: void resetSettings()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean endCall()> -> _SOURCE_
<android.media.audiopolicy.AudioPolicyConfig: java.lang.String getRegistration()> -> _SOURCE_
<android.telecom.Logging.Session: android.telecom.Logging.Session getParentSession()> -> _SOURCE_
<android.os.IRemoteCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.os.storage.VolumeInfo: java.util.Comparator getDescriptionComparator()> -> _SOURCE_
<android.telephony.ServiceState: int getRadioTechnology()> -> _SOURCE_
<android.hardware.cas.V1_2.IMediaCasService$Proxy: java.util.ArrayList getHashChain()> -> _SOURCE_
<android.media.AudioManager$ServiceEventHandlerDelegate: android.os.Handler getHandler()> -> _SOURCE_
<android.net.wifi.nl80211.IApInterface$Stub: android.net.wifi.nl80211.IApInterface getDefaultImpl()> -> _SOURCE_
<android.telephony.TelephonyDisplayInfo: java.lang.String toString()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.telephony.UiccCardInfo: boolean isRemovable()> -> _SOURCE_
<android.content.ContextWrapper: java.lang.String getSystemServiceName(java.lang.Class)> -> _SOURCE_
<android.telephony.SubscriptionManager: java.util.List getAllSubscriptionInfoList()> -> _SOURCE_
<android.widget.CompoundButton: android.content.res.ColorStateList getButtonTintList()> -> _SOURCE_
<android.net.IIpSecService$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.bluetooth.BluetoothGattIncludedService: java.util.UUID getUuid()> -> _SOURCE_
<android.media.tv.TvInputInfo: java.lang.String getParentId()> -> _SOURCE_
<android.telephony.ServiceState: boolean isCdma(int)> -> _SOURCE_
<com.android.internal.view.TooltipPopup: android.view.View getContentView()> -> _SOURCE_
<android.app.WallpaperManager: android.graphics.Bitmap getBitmap()> -> _SOURCE_
<android.os.Looper: android.os.MessageQueue getQueue()> -> _SOURCE_
<android.window.WindowContainerTransaction$HierarchyOp: boolean getToTop()> -> _SOURCE_
<android.provider.DocumentsContract: java.lang.String[] getHandledQueryArguments(android.os.Bundle)> -> _SOURCE_
<android.animation.ValueAnimator: float getAnimatedFraction()> -> _SOURCE_
<com.android.server.SystemConfig: java.util.Map getNamedActors()> -> _SOURCE_
<android.widget.RemoteViewsAdapter: android.content.Intent getRemoteViewsServiceIntent()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isAdminActiveAsUser(android.content.ComponentName,int)> -> _SOURCE_
<android.webkit.WebViewDelegate: boolean isTraceTagEnabled()> -> _SOURCE_
<android.telephony.SubscriptionInfo: java.lang.String getMncString()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.net.lowpan.ILowpanInterface$Stub$Proxy: android.net.IpPrefix[] getLinkNetworks()> -> _SOURCE_
<android.hardware.radio.ICloseHandle$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.view.DisplayCutout: java.util.List getBoundingRects()> -> _SOURCE_
<android.content.IClipboard$Stub$Proxy: android.content.ClipData getPrimaryClip(java.lang.String,int)> -> _SOURCE_
<android.text.style.MetricAffectingSpan: android.text.style.CharacterStyle getUnderlying()> -> _SOURCE_
<android.content.om.IOverlayManager$Default: java.lang.String[] getDefaultOverlayPackages()> -> _SOURCE_
<android.app.backup.BackupAgent: android.os.Handler getHandler()> -> _SOURCE_
<android.os.storage.StorageManager: boolean isEncryptable()> -> _SOURCE_
<android.security.net.config.UserCertificateSource: java.util.Set getCertificates()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getDeviceId(int)> -> _SOURCE_
<android.net.lowpan.LowpanScanner: java.util.Collection getChannelMask()> -> _SOURCE_
<android.telephony.BarringInfo$BarringServiceInfo: int getConditionalBarringFactor()> -> _SOURCE_
<android.webkit.TracingConfig: int getTracingMode()> -> _SOURCE_
<android.net.lowpan.ILowpanInterface$Stub$Proxy: java.lang.String getPartitionId()> -> _SOURCE_
<android.webkit.WebView$HitTestResult: int getType()> -> _SOURCE_
<android.location.ILocationManager$Stub: android.location.ILocationManager getDefaultImpl()> -> _SOURCE_
<android.app.NotificationChannel: android.media.AudioAttributes getAudioAttributes()> -> _SOURCE_
<android.renderscript.ProgramRaster: android.renderscript.ProgramRaster$CullMode getCullMode()> -> _SOURCE_
<android.window.ITaskOrganizerController$Default: java.util.List getChildTasks(android.window.WindowContainerToken,int[])> -> _SOURCE_
<android.app.ApplicationPackageManager: int getUidForSharedUser(java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.OperatorInfo: java.lang.String getOperatorNumeric()> -> _SOURCE_
<android.telephony.CellSignalStrengthWcdma: int getRscp()> -> _SOURCE_
<android.app.ActivityManager$TaskSnapshot: android.graphics.GraphicBuffer getSnapshot()> -> _SOURCE_
<android.telephony.TelephonyManager: int getIntAtIndex(android.content.ContentResolver,java.lang.String,int)> -> _SOURCE_
<android.telephony.CellIdentity: java.lang.String getPlmn()> -> _SOURCE_
<android.security.keystore.IKeystoreService$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.view.inputmethod.InputConnectionInspector: java.lang.String getMissingMethodFlagsAsString(int)> -> _SOURCE_
<android.hardware.hdmi.IHdmiHotplugEventListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.CbGeoUtils$Polygon: java.lang.String toString()> -> _SOURCE_
<android.content.pm.IPackageInstallerSession$Stub$Proxy: java.lang.String[] getNames()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: android.app.admin.SystemUpdateInfo getPendingSystemUpdate(android.content.ComponentName)> -> _SOURCE_
<com.android.internal.policy.PhoneWindow: android.transition.TransitionManager getTransitionManager()> -> _SOURCE_
<android.app.ContextImpl: android.content.pm.ApplicationInfo getApplicationInfo()> -> _SOURCE_
<android.telephony.TelephonyManager: android.net.Uri getVoicemailRingtoneUri(android.telecom.PhoneAccountHandle)> -> _SOURCE_
<android.telephony.CellSignalStrengthCdma: java.lang.String toString()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getDataStateForSubId(int)> -> _SOURCE_
<android.location.GnssAntennaInfo: android.location.GnssAntennaInfo$SphericalCorrections getSignalGainCorrections()> -> _SOURCE_
<android.telephony.CellIdentityGsm: int getMcc()> -> _SOURCE_
<android.app.assist.AssistStructure$ViewNodeBuilder: android.os.Bundle getExtras()> -> _SOURCE_
<android.content.pm.IPackageInstaller$Stub$Proxy: android.content.pm.ParceledListSlice getStagedSessions()> -> _SOURCE_
<android.bluetooth.le.IScannerCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.net.wifi.nl80211.NativeScanResult: long getTsf()> -> _SOURCE_
<android.view.ViewRootImpl: android.view.SurfaceControl getRenderSurfaceControl()> -> _SOURCE_
<com.android.internal.view.IInputSessionCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.hardware.radio.RadioManager$FmBandConfig: boolean getStereo()> -> _SOURCE_
<android.hardware.radio.RadioManager$ModuleProperties: java.lang.String getImplementor()> -> _SOURCE_
<android.content.pm.ShortcutManager: int getIconMaxWidth()> -> _SOURCE_
<android.telephony.CellSignalStrengthNr: int getDbm()> -> _SOURCE_
<android.widget.AdapterViewAnimator: android.animation.ObjectAnimator getDefaultOutAnimation()> -> _SOURCE_
<android.net.CaptivePortalData: long getByteLimit()> -> _SOURCE_
<android.content.pm.parsing.component.ParsedComponent: java.lang.String getPackageName()> -> _SOURCE_
<android.view.IRemoteAnimationFinishedCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.hardware.SensorManager: int getSensors()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.transition.ChangeScroll: java.lang.String[] getTransitionProperties()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$OverflowArrayMap: android.util.ArrayMap getMap()> -> _SOURCE_
<android.app.usage.StorageStatsManager: boolean isQuotaSupported(java.lang.String)> -> _SOURCE_
<android.util.MergedConfiguration: android.content.res.Configuration getGlobalConfiguration()> -> _SOURCE_
<android.telephony.CellIdentityNr: java.lang.String getMncString()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.system.suspend.ISuspendControlService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Default: java.util.List getUserControlDisabledPackages(android.content.ComponentName)> -> _SOURCE_
<android.app.WallpaperManager: android.content.Intent getCropAndSetWallpaperIntent(android.net.Uri)> -> _SOURCE_
<android.graphics.fonts.Font: android.graphics.fonts.FontStyle getStyle()> -> _SOURCE_
<android.bluetooth.IBluetooth$Default: long getDiscoveryEndMillis()> -> _SOURCE_
<android.net.LocalServerSocket: android.net.LocalSocketAddress getLocalSocketAddress()> -> _SOURCE_
<android.service.carrier.CarrierIdentifier: java.lang.String getGid1()> -> _SOURCE_
<android.provider.Settings$Global: float getFloat(android.content.ContentResolver,java.lang.String)> -> _SOURCE_
<android.os.IVoldListener$Stub: android.os.IVoldListener getDefaultImpl()> -> _SOURCE_
<android.content.om.OverlayManager: java.util.List getOverlayInfosForTarget(java.lang.String,android.os.UserHandle)> -> _SOURCE_
<android.app.job.JobParameters: java.lang.String getReasonCodeDescription(int)> -> _SOURCE_
<android.service.notification.StatusBarNotification: android.os.UserHandle getUser()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getNetworkCountryIsoForPhone(int)> -> _SOURCE_
<android.telephony.mbms.FileInfo: android.net.Uri getUri()> -> _SOURCE_
<android.webkit.WebChromeClient: android.graphics.Bitmap getDefaultVideoPoster()> -> _SOURCE_
<android.printservice.recommendation.RecommendationInfo: java.util.List getDiscoveredPrinters()> -> _SOURCE_
<com.android.internal.telephony.IPhoneStateListener$Default: android.os.IBinder asBinder()> -> _SOURCE_
<android.view.Choreographer: long getFrameIntervalNanos()> -> _SOURCE_
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,boolean,android.accounts.AccountManagerCallback,android.os.Handler)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.location.ILocationManager$Stub$Proxy: java.util.List getProviders(android.location.Criteria,boolean)> -> _SOURCE_
<android.content.pm.PackageParser$Permission: boolean isAppOp()> -> _SOURCE_
<android.os.storage.StorageManager: android.os.storage.StorageVolume getPrimaryVolume()> -> _SOURCE_
<android.telephony.CellIdentityNr: int hashCode()> -> _SOURCE_
<android.telephony.ServiceState: int getVoiceRoamingType()> -> _SOURCE_
<android.location.IGnssAntennaInfoListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.view.InlineSuggestionsRequestInfo: android.os.Bundle getUiExtras()> -> _SOURCE_
<android.telephony.mbms.vendor.IMbmsDownloadService$Stub: android.telephony.mbms.vendor.IMbmsDownloadService getDefaultImpl()> -> _SOURCE_
<android.telephony.SubscriptionInfo: java.lang.CharSequence getDisplayName()> -> _SOURCE_
<android.widget.Editor$InsertionPointCursorController: android.widget.Editor$InsertionHandleView getHandle()> -> _SOURCE_
<android.graphics.ImageDecoder$AssetInputStreamSource: android.content.res.Resources getResources()> -> _SOURCE_
<android.view.IWindowManager$Stub$Proxy: android.graphics.Region getCurrentImeTouchRegion()> -> _SOURCE_
<com.android.internal.app.WindowDecorActionBar: boolean isHideOnContentScrollEnabled()> -> _SOURCE_
<android.content.pm.DataLoaderParams: android.content.ComponentName getComponentName()> -> _SOURCE_
<android.app.job.IJobCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.media.session.PlaybackState: long getActions()> -> _SOURCE_
<android.window.ITaskOrganizer$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub: android.os.IBinder asBinder()> -> _SOURCE_
<android.os.IPowerManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.location.GpsMeasurement: double getAzimuthUncertaintyInDeg()> -> _SOURCE_
<android.telephony.DataFailCause: int getFailCause(int)> -> _SOURCE_
<android.app.ActivityOptions: boolean getTaskOverlay()> -> _SOURCE_
<android.telephony.SmsCbMessage: int getGeographicalScope()> -> _SOURCE_
<android.app.admin.DnsEvent: java.util.List getInetAddresses()> -> _SOURCE_
<android.telephony.TelephonyManager: int getNetworkType()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isVoicemailVibrationEnabled(android.telecom.PhoneAccountHandle)> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: java.lang.String getFileTimestamps(java.lang.String)> -> _SOURCE_
<android.os.IDeviceIdentifiersPolicyService$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.nfc.cardemulation.ApduServiceInfo: java.util.ArrayList getAidGroups()> -> _SOURCE_
<android.os.BaseBundle: java.lang.ClassLoader getClassLoader()> -> _SOURCE_
<com.android.internal.net.INetworkWatchlistManager$Stub$Proxy: byte[] getWatchlistConfigHash()> -> _SOURCE_
<android.hardware.Camera$Parameters: java.lang.String getColorEffect()> -> _SOURCE_
<android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor getWallpaperWithFeature(java.lang.String,java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)> -> _SOURCE_
<android.view.textclassifier.TextSelection$Request: java.lang.CharSequence getText()> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Default: java.lang.String getSubscriberId(java.lang.String)> -> _SOURCE_
<android.telephony.CellIdentityTdscdma: java.lang.String getMncString()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean isWifiCallingAvailable(int)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.util.List getPermittedCrossProfileNotificationListeners(android.content.ComponentName)> -> _SOURCE_
<android.net.nsd.NsdServiceInfo: java.util.Map getAttributes()> -> _SOURCE_
<android.accessibilityservice.IAccessibilityServiceConnection$Stub$Proxy: float getMagnificationCenterY(int)> -> _SOURCE_
<android.bluetooth.BluetoothGattServer: java.util.List getConnectedDevices()> -> _SOURCE_
<android.security.IKeyChainService$Stub$Proxy: android.content.pm.StringParceledListSlice getSystemCaAliases()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: boolean isEmergencyNumber(java.lang.String,boolean)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean isMmTelCapabilityProvisionedInCache(int,int,int)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isPasswordSufficientAfterProfileUnification(int,int)> -> _SOURCE_
<com.android.internal.telephony.ISub$Stub$Proxy: boolean canDisablePhysicalSubscription()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: boolean isOnBatteryScreenOffLocked()> -> _SOURCE_
<android.telephony.CallQuality: int getAverageRoundTripTime()> -> _SOURCE_
<android.view.SurfaceControl: android.os.IBinder getPhysicalDisplayToken(long)> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo$ExtraRenderingInfo: float getTextSizeInPx()> -> _SOURCE_
<android.net.ConnectivityManager: android.net.LinkProperties getLinkProperties(int)> -> _SOURCE_
<android.net.IConnectivityManager$Default: java.lang.String[] getTetheringErroredIfaces()> -> _SOURCE_
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getJpegThumbnailSize()> -> _SOURCE_
<android.app.IRequestFinishCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.service.notification.NotificationListenerService$Ranking: android.content.pm.ShortcutInfo getShortcutInfo()> -> _SOURCE_
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreviewSize()> -> _SOURCE_
<android.content.res.ColorStateList: android.content.res.ConstantState getConstantState()> -> _SOURCE_
<android.content.pm.ConfigurationInfo: java.lang.String getGlEsVersion()> -> _SOURCE_
<android.renderscript.FieldPacker: byte[] getData()> -> _SOURCE_
<com.android.internal.app.IAppOpsService$Default: java.util.List getPackagesForOps(int[])> -> _SOURCE_
<android.app.role.RoleControllerManager: java.util.concurrent.CompletableFuture lambda$onRemoveRoleHolder$2(java.lang.String,java.lang.String,int,android.app.role.IRoleController)> -> _SOURCE_
<android.telephony.TelephonyManager: void enableIms(int)> -> _SOURCE_
<android.app.ApplicationPackageManager: android.content.res.XmlResourceParser getXml(java.lang.String,int,android.content.pm.ApplicationInfo)> -> _SOURCE_
<com.android.internal.telephony.euicc.IGetEuiccInfo2Callback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: java.util.Set getUpgradeKeySets()> -> _SOURCE_
<android.telephony.SmsManager: int getSubscriptionId()> -> _SOURCE_
<android.view.autofill.AutofillManager: boolean isCompatibilityModeEnabledLocked()> -> _SOURCE_
<android.content.pm.PackageManager: boolean isAutoRevokeWhitelisted()> -> _SOURCE_
<android.app.usage.UsageStatsManager: int getAppStandbyBucket(java.lang.String)> -> _SOURCE_
<android.content.ClipDescription: long getTimestamp()> -> _SOURCE_
<android.hardware.radio.ITuner$Stub: android.hardware.radio.ITuner getDefaultImpl()> -> _SOURCE_
<android.net.Uri$OpaqueUri: java.lang.String getEncodedSchemeSpecificPart()> -> _SOURCE_
<android.bluetooth.IBluetoothMapClient$Stub$Proxy: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
<com.android.internal.net.VpnConfig: java.lang.CharSequence getVpnLabel(android.content.Context,java.lang.String)> -> _SOURCE_
<android.view.IOnKeyguardExitResult$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.graphics.Paint: float getWordSpacing()> -> _SOURCE_
<android.content.pm.PathPermission: java.lang.String getWritePermission()> -> _SOURCE_
<android.net.LinkAddress: long getExpirationTime()> -> _SOURCE_
<android.app.INotificationManager$Stub$Proxy: android.app.NotificationChannel getNotificationChannelForPackage(java.lang.String,int,java.lang.String,java.lang.String,boolean)> -> _SOURCE_
<android.view.autofill.AutofillManager: int getRequestIdFromAuthenticationId(int)> -> _SOURCE_
<com.android.internal.telecom.ITelecomService$Stub$Proxy: java.util.List getCallCapablePhoneAccounts(boolean,java.lang.String,java.lang.String)> -> _SOURCE_
<android.net.wifi.nl80211.IClientInterface$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.permission.PermissionManager: java.util.Set getAutoRevokeExemptionRequestedPackages()> -> _SOURCE_
<com.android.internal.telephony.IIntegerConsumer$Default: android.os.IBinder asBinder()> -> _SOURCE_
<android.app.LoadedApk$ServiceDispatcher: android.app.ServiceConnectionLeaked getLocation()> -> _SOURCE_
<android.app.ApplicationPackageManager: android.content.pm.InstallSourceInfo getInstallSourceInfo(java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: boolean isTtyModeSupported()> -> _SOURCE_
<android.net.NetworkStats: long getTotalPackets()> -> _SOURCE_
<android.hardware.location.ContextHubTransaction$Response: java.lang.Object getContents()> -> _SOURCE_
<android.database.MatrixCursor: java.lang.String[] getColumnNames()> -> _SOURCE_
<android.app.IActivityManager$Default: java.util.List getServices(int,int)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getImsRegTechnologyForMmTel(int)> -> _SOURCE_
<android.graphics.Paint: float getShadowLayerRadius()> -> _SOURCE_
<android.content.pm.ICrossProfileApps$Stub: android.content.pm.ICrossProfileApps getDefaultImpl()> -> _SOURCE_
<android.widget.LinearLayout: java.lang.CharSequence getAccessibilityClassName()> -> _SOURCE_
<android.location.ILocationManager$Stub$Proxy: com.android.internal.location.ProviderProperties getProviderProperties(java.lang.String)> -> _SOURCE_
<android.app.LoadedApk$ReceiverDispatcher: android.app.IntentReceiverLeaked getLocation()> -> _SOURCE_
<android.telephony.CellSignalStrengthWcdma: int getRssi()> -> _SOURCE_
<android.os.IDeviceIdleController$Stub$Proxy: java.lang.String[] getRemovedSystemPowerWhitelistApps()> -> _SOURCE_
<android.view.textservice.SpellCheckerInfo: java.lang.String getPackageName()> -> _SOURCE_
<android.net.lowpan.LowpanInterface: java.lang.String getState()> -> _SOURCE_
<android.os.TelephonyServiceManager$ServiceRegisterer: android.os.IBinder getOrThrow()> -> _SOURCE_
<android.hardware.location.NanoAppState: long getNanoAppId()> -> _SOURCE_
<android.app.ITransientNotificationCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.CarrierRestrictionRules: java.util.List getExcludedCarriers()> -> _SOURCE_
<android.app.ApplicationPackageManager: boolean isDeviceUpgrading()> -> _SOURCE_
<android.view.DragEvent: android.content.ClipDescription getClipDescription()> -> _SOURCE_
<android.telephony.CellInfoCdma: android.telephony.CellIdentity getCellIdentity()> -> _SOURCE_
<android.telephony.LteVopsSupportInfo: java.lang.String toString()> -> _SOURCE_
<android.app.IProcessObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.DisabledWallpaperManager: android.app.WallpaperColors getWallpaperColors(int)> -> _SOURCE_
<android.app.slice.SliceManager: android.app.slice.Slice bindSlice(android.net.Uri,java.util.List)> -> _SOURCE_
<android.database.CursorWrapper: float getFloat(int)> -> _SOURCE_
<android.telephony.TelephonyManager: android.telephony.VisualVoicemailSmsFilterSettings getVisualVoicemailSmsFilterSettings(int)> -> _SOURCE_
<android.os.IIncidentManager$Stub$Proxy: java.util.List getIncidentReportList(java.lang.String,java.lang.String)> -> _SOURCE_
<android.renderscript.Allocation: android.view.Surface getSurface()> -> _SOURCE_
<android.media.MediaHTTPConnection: java.lang.String getMIMEType()> -> _SOURCE_
<android.content.res.Resources$Theme: int[] getAllAttributes()> -> _SOURCE_
<android.net.NetworkTemplate: java.lang.String getSubscriberId()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: java.lang.String getSubscriptionSpecificCarrierName(int)> -> _SOURCE_
<android.net.wifi.nl80211.IWificond$Default: int[] getAvailable6gChannels()> -> _SOURCE_
<com.android.internal.graphics.palette.Palette$Swatch: float[] getHsl()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: int getPasswordHistoryLength(android.content.ComponentName,int)> -> _SOURCE_
<android.service.notification.StatusBarNotification: java.lang.String getGroup()> -> _SOURCE_
<android.app.prediction.IPredictionManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.IUriGrantsManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.ims.aidl.IImsConfig$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.widget.ToolbarWidgetWrapper: android.view.ViewGroup getViewGroup()> -> _SOURCE_
<android.transition.Transition: java.lang.String[] getTransitionProperties()> -> _SOURCE_
<android.view.SurfaceControlViewHost: android.view.View getView()> -> _SOURCE_
<android.app.ActivityOptions: android.os.IRemoteCallback getAnimationStartedListener()> -> _SOURCE_
<android.media.soundtrigger_middleware.ISoundTriggerModule$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.security.KeyStore$KeyAttestationCallbackResult: android.security.keymaster.KeymasterCertificateChain getCertificateChain()> -> _SOURCE_
<android.telephony.LteVopsSupportInfo: int hashCode()> -> _SOURCE_
<com.android.ims.internal.IImsCallSession$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.internal.util.VirtualRefBasePtr: long get()> -> _SOURCE_
<android.os.storage.IStorageShutdownObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.hardware.soundtrigger.SoundTrigger$ModuleProperties: java.util.UUID getUuid()> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String[] getIsimImpu(int)> -> _SOURCE_
<android.animation.StateListAnimator: android.view.View getTarget()> -> _SOURCE_
<android.os.BatteryManager: long getLongProperty(int)> -> _SOURCE_
<android.telephony.SubscriptionManager: int[] getCompleteActiveSubscriptionIdList()> -> _SOURCE_
<android.hardware.display.BrightnessConfiguration: android.hardware.display.BrightnessCorrection getCorrectionByCategory(int)> -> _SOURCE_
<android.location.LocationManager$LocationListenerTransport: android.location.LocationListener getKey()> -> _SOURCE_
<android.hardware.camera2.CaptureRequest$Builder: boolean isEmpty()> -> _SOURCE_
<android.telephony.TelephonyManager: android.util.Pair getRadioHalVersion()> -> _SOURCE_
<com.android.internal.telephony.IOnSubscriptionsChangedListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.permission.PermissionControllerManager$1: android.os.Handler getJobHandler()> -> _SOURCE_
<com.android.internal.telephony.IPhoneStateListener$Stub$Proxy: android.os.IBinder asBinder()> -> _SOURCE_
<android.hardware.camera2.params.RggbChannelVector: float getRed()> -> _SOURCE_
<android.content.res.XmlBlock$Parser: java.lang.String getName()> -> _SOURCE_
<android.hardware.ISerialManager$Default: java.lang.String[] getSerialPorts()> -> _SOURCE_
<android.telephony.SmsManager: android.os.Bundle getCarrierConfigValues()> -> _SOURCE_
<android.widget.Toolbar: java.lang.CharSequence getCollapseContentDescription()> -> _SOURCE_
<android.bluetooth.le.ScanFilter: android.os.ParcelUuid getServiceSolicitationUuidMask()> -> _SOURCE_
<com.android.internal.telephony.SmsMessageBase: byte[] getPdu()> -> _SOURCE_
<android.app.ActivityManager: boolean isUserAMonkey()> -> _SOURCE_
<android.telecom.TelecomManager: java.lang.String getVoiceMailNumber(android.telecom.PhoneAccountHandle)> -> _SOURCE_
<android.bluetooth.BluetoothGatt: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
<android.content.pm.IPackageInstallerSession$Stub$Proxy: int[] getChildSessionIds()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getSubscriberId(int)> -> _SOURCE_
<android.media.IAudioService$Stub: android.media.IAudioService getDefaultImpl()> -> _SOURCE_
<android.telephony.TelephonyManager: com.android.internal.telephony.IPhoneSubInfo getSubscriberInfoService()> -> _SOURCE_
<com.android.internal.view.IInputMethodManager$Default: java.util.List getInputMethodList(int)> -> _SOURCE_
<com.android.internal.telephony.IUpdateAvailableNetworksCallback$Stub: com.android.internal.telephony.IUpdateAvailableNetworksCallback getDefaultImpl()> -> _SOURCE_
<android.telephony.ims.ImsManager: android.telephony.ims.ImsRcsManager getImsRcsManager(int)> -> _SOURCE_
<android.media.session.ISessionController$Stub$Proxy: android.os.Bundle getSessionInfo()> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Default: java.lang.String getVoiceMailNumber(java.lang.String,java.lang.String)> -> _SOURCE_
<android.location.LocationManager: java.lang.String[] getIgnoreSettingsWhitelist()> -> _SOURCE_
<android.service.euicc.EuiccProfileInfo: java.lang.String getNickname()> -> _SOURCE_
<android.telephony.CellSignalStrengthWcdma: int getLevel()> -> _SOURCE_
<android.media.session.IOnVolumeKeyLongPressListener$Stub: android.media.session.IOnVolumeKeyLongPressListener getDefaultImpl()> -> _SOURCE_
<android.os.VibrationEffect$Waveform: long[] getTimings()> -> _SOURCE_
<android.app.backup.BackupManager: android.content.Intent getConfigurationIntent(java.lang.String)> -> _SOURCE_
<android.bluetooth.IBluetooth$Stub$Proxy: android.os.ParcelUuid[] getUuids()> -> _SOURCE_
<android.telephony.SubscriptionManager: int getSimStateForSlotIndex(int)> -> _SOURCE_
<android.hardware.hdmi.IHdmiDeviceEventListener$Stub: android.hardware.hdmi.IHdmiDeviceEventListener getDefaultImpl()> -> _SOURCE_
<android.bluetooth.BluetoothCodecConfig: java.lang.String getCodecName()> -> _SOURCE_
<android.view.Window: android.media.session.MediaController getMediaController()> -> _SOURCE_
<android.telephony.PhoneNumberUtils: java.lang.String extractNetworkPortionAlt(java.lang.String)> -> _SOURCE_
<android.provider.Settings$Global: long getLong(android.content.ContentResolver,java.lang.String)> -> _SOURCE_
<android.content.res.Resources$Theme: long getNativeTheme()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isIccLockEnabled()> -> _SOURCE_
<android.text.method.SingleLineTransformationMethod: char[] getOriginal()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: long[] getCpuClusterTimes()> -> _SOURCE_
<android.location.GpsMeasurement: byte getPrn()> -> _SOURCE_
<android.view.IWallpaperVisibilityListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.net.IIpSecService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.net.lowpan.ILowpanManager$Stub: android.net.lowpan.ILowpanManager getDefaultImpl()> -> _SOURCE_
<android.content.pm.LauncherActivityInfo: long getFirstInstallTime()> -> _SOURCE_
<android.bluetooth.IBluetooth$Stub$Proxy: long getDiscoveryEndMillis()> -> _SOURCE_
<android.app.FragmentHostCallback: android.content.Context getContext()> -> _SOURCE_
<android.os.PowerManager: boolean isInteractive()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getNetworkTypeForSubscriber(int,java.lang.String,java.lang.String)> -> _SOURCE_
<com.android.internal.app.ISoundTriggerService$Stub$Proxy: android.hardware.soundtrigger.SoundTrigger$GenericSoundModel getSoundModel(android.os.ParcelUuid)> -> _SOURCE_
<android.net.wifi.nl80211.IWificond$Stub: android.net.wifi.nl80211.IWificond getDefaultImpl()> -> _SOURCE_
<android.content.Context: android.view.autofill.AutofillManager$AutofillClient getAutofillClient()> -> _SOURCE_
<android.graphics.Bitmap: byte[] getNinePatchChunk()> -> _SOURCE_
<com.android.internal.view.IInputSessionCallback$Stub: com.android.internal.view.IInputSessionCallback getDefaultImpl()> -> _SOURCE_
<android.view.MotionEvent: float getRawY()> -> _SOURCE_
<android.text.FontConfig: android.text.FontConfig$Alias[] getAliases()> -> _SOURCE_
<android.media.MediaRouter: android.media.MediaRouter$RouteCategory getSystemCategory()> -> _SOURCE_
<android.telephony.PhoneNumberUtils: java.lang.String formatNumber(java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getNetworkOperator(int)> -> _SOURCE_
<android.telephony.CellInfoWcdma: android.telephony.CellIdentity getCellIdentity()> -> _SOURCE_
<android.media.session.ISessionController$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: java.util.List getEnabledInputMethodSubtypeList(java.lang.String,boolean)> -> _SOURCE_
<android.widget.AccessibilityIterators$PageTextSegmentIterator: android.widget.AccessibilityIterators$PageTextSegmentIterator getInstance()> -> _SOURCE_
<android.provider.Settings$Secure: long getLongForUser(android.content.ContentResolver,java.lang.String,long,int)> -> _SOURCE_
<android.net.Ikev2VpnProfile: java.lang.String getServerAddr()> -> _SOURCE_
<android.app.AppOpsManager: com.android.internal.app.IAppOpsService access$300()> -> _SOURCE_
<android.net.INetworkPolicyListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.CellInfoNr: int hashCode()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: int getNumberOfModemsWithSimultaneousDataConnections(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.hardware.camera2.CaptureRequest: java.lang.Class getKeyClass()> -> _SOURCE_
<android.location.GnssMeasurementCorrections: double getLatitudeDegrees()> -> _SOURCE_
<android.app.Notification$Action$Builder: android.os.Bundle getExtras()> -> _SOURCE_
<android.webkit.WebViewFactory: java.lang.String getWebViewLibrary(android.content.pm.ApplicationInfo)> -> _SOURCE_
<android.app.usage.UsageStats: long getLastTimeStamp()> -> _SOURCE_
<android.app.role.IRoleController$Stub: android.app.role.IRoleController getDefaultImpl()> -> _SOURCE_
<android.nfc.NfcManager: android.nfc.NfcAdapter getDefaultAdapter()> -> _SOURCE_
<android.telephony.CellInfoGsm: int describeContents()> -> _SOURCE_
<android.provider.DocumentsContract: java.lang.String getSearchDocumentsQuery(android.net.Uri)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean getCrossProfileCallerIdDisabled(android.content.ComponentName)> -> _SOURCE_
<android.provider.Telephony$Sms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],java.lang.String,java.lang.String)> -> _SOURCE_
<android.graphics.text.LineBreaker$ParagraphConstraints: float[] getTabStops()> -> _SOURCE_
<android.media.session.MediaController: android.media.session.MediaSession$Token getSessionToken()> -> _SOURCE_
<com.android.internal.os.KernelCpuUidBpfMapReader: com.android.internal.os.KernelCpuUidBpfMapReader getFreqTimeReaderInstance()> -> _SOURCE_
<android.hardware.ISensorPrivacyManager$Stub: android.hardware.ISensorPrivacyManager getDefaultImpl()> -> _SOURCE_
<android.media.audiopolicy.AudioVolumeGroup: java.util.List getAudioVolumeGroups()> -> _SOURCE_
<com.android.internal.compat.CompatibilityChangeInfo: java.lang.String getDescription()> -> _SOURCE_
<android.widget.EditText: android.text.method.MovementMethod getDefaultMovementMethod()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.lang.String[] getPackagesForUid(int)> -> _SOURCE_
<com.android.internal.telephony.ISms$Stub$Proxy: int getSmsCapacityOnIccForSubscriber(int)> -> _SOURCE_
<android.net.NetworkTemplate: byte[] getBytesForBackup()> -> _SOURCE_
<android.net.Uri$OpaqueUri: java.lang.String getScheme()> -> _SOURCE_
<android.app.usage.StorageStatsManager: android.app.usage.StorageStats queryStatsForUid(java.lang.String,int)> -> _SOURCE_
<android.view.WindowManagerImpl: android.view.WindowMetrics getMaximumWindowMetrics()> -> _SOURCE_
<android.permission.IPermissionManager$Default: java.util.List getWhitelistedRestrictedPermissions(java.lang.String,int,int)> -> _SOURCE_
<android.media.AudioDeviceInfo: int[] getEncapsulationModes()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isAffiliatedUser()> -> _SOURCE_
<android.telephony.PhoneNumberUtils: java.lang.String cdmaCheckAndProcessPlusCode(java.lang.String)> -> _SOURCE_
<com.android.internal.app.IAppOpsCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.bluetooth.IBluetoothHidHost$Stub$Proxy: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
<android.location.GpsMeasurement: short getTimeFromLastBitInMs()> -> _SOURCE_
<android.view.VerifiedKeyEvent: long getDownTimeNanos()> -> _SOURCE_
<android.os.INetworkManagementService$Stub$Proxy: android.net.InterfaceConfiguration getInterfaceConfig(java.lang.String)> -> _SOURCE_
<android.app.AutomaticZenRule: android.content.ComponentName getConfigurationActivity()> -> _SOURCE_
<android.nfc.tech.IsoDep: boolean isConnected()> -> _SOURCE_
<android.widget.RemoteViewsAdapter$RemoteViewsFrameLayout: android.content.Context getRemoteContext()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isVideoTelephonyAvailable()> -> _SOURCE_
<android.media.MediaRouter$UserRouteInfo: android.media.RemoteControlClient getRemoteControlClient()> -> _SOURCE_
<android.os.UserManager: long getUserCreationTime(android.os.UserHandle)> -> _SOURCE_
<com.android.internal.os.ZygoteConnection: java.io.DataOutputStream getSocketOutputStream()> -> _SOURCE_
<android.graphics.ParcelableColorSpace: float getMinValue(int)> -> _SOURCE_
<android.app.ApplicationPackageManager: boolean getSyntheticAppDetailsActivityEnabled(java.lang.String)> -> _SOURCE_
<android.animation.IntKeyframeSet: java.lang.Class getType()> -> _SOURCE_
<android.view.ContextThemeWrapper: android.content.res.Resources getResources()> -> _SOURCE_
<android.media.session.ISessionControllerCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.telephony.ISub$Stub$Proxy: int[] getSubId(int)> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Default: java.lang.String getMsisdn(java.lang.String,java.lang.String)> -> _SOURCE_
<android.media.IMediaRouter2Manager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.media.projection.IMediaProjectionCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.os.Environment: java.io.File getVendorDirectory()> -> _SOURCE_
<android.telephony.CellSignalStrengthCdma: android.telephony.CellSignalStrength copy()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isSmsCapable()> -> _SOURCE_
<android.os.connectivity.CellularBatteryStats: long getKernelActiveTimeMillis()> -> _SOURCE_
<android.os.storage.IStorageShutdownObserver$Stub: android.os.storage.IStorageShutdownObserver getDefaultImpl()> -> _SOURCE_
<com.android.internal.inputmethod.IInputContentUriToken$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telephony.SubscriptionManager: int getPhoneId(int)> -> _SOURCE_
<android.net.ConnectivityManager: java.util.List getVpnLockdownWhitelist(int)> -> _SOURCE_
<com.android.internal.telephony.ISub$Default: java.util.List getActiveSubscriptionInfoList(java.lang.String,java.lang.String)> -> _SOURCE_
<android.view.AbsSavedState: android.os.Parcelable getSuperState()> -> _SOURCE_
<android.app.job.JobInfo: long getTriggerContentUpdateDelay()> -> _SOURCE_
<android.transition.TransitionManager: android.transition.Transition getDefaultTransition()> -> _SOURCE_
<android.telephony.TelephonyManager: int getEmergencyNumberDbVersion()> -> _SOURCE_
<android.text.FontConfig$Family: android.text.FontConfig$Font[] getFonts()> -> _SOURCE_
<com.android.internal.compat.IOverrideValidator$Stub$Proxy: com.android.internal.compat.OverrideAllowedState getOverrideAllowedState(long,java.lang.String)> -> _SOURCE_
<android.media.Ringtone: float getVolume()> -> _SOURCE_
<com.android.internal.telephony.euicc.ICancelSessionCallback$Stub: com.android.internal.telephony.euicc.ICancelSessionCallback getDefaultImpl()> -> _SOURCE_
<android.webkit.WebViewDelegate: boolean isMultiProcessEnabled()> -> _SOURCE_
<android.view.ViewConfiguration: float getScaledAmbiguousGestureMultiplier()> -> _SOURCE_
<android.app.blob.IBlobStoreManager$Stub$Proxy: java.util.List queryBlobsForUser(int)> -> _SOURCE_
<android.view.MotionEvent: long getEventTime()> -> _SOURCE_
<com.android.internal.view.menu.MenuItemImpl: java.lang.CharSequence getTitle()> -> _SOURCE_
<android.app.NotificationManager: java.lang.String getNotificationDelegate()> -> _SOURCE_
<android.content.res.XmlBlock$Parser: java.lang.String getText()> -> _SOURCE_
<android.bluetooth.IBluetoothA2dpSink$Stub$Proxy: java.util.List getConnectedDevices()> -> _SOURCE_
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.hardware.radio.IAnnouncementListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.hardware.camera2.ICameraDeviceUser$Default: android.view.Surface getInputSurface()> -> _SOURCE_
<android.animation.AnimationHandler$MyFrameCallbackProvider: long getFrameDelay()> -> _SOURCE_
<android.app.Fragment: android.app.Fragment getParentFragment()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: android.os.BatteryStats$Timer getWifiScanTimer()> -> _SOURCE_
<com.android.internal.telephony.ISub$Stub$Proxy: int[] getActiveSubIdList(boolean)> -> _SOURCE_
<com.android.internal.telephony.SmsMessageBase: byte[] getUserData()> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: java.util.List getLibraryNames()> -> _SOURCE_
<android.telephony.CbGeoUtils$LatLng: java.lang.String toString()> -> _SOURCE_
<android.view.Window: android.transition.Transition getSharedElementReturnTransition()> -> _SOURCE_
<android.media.MediaCodecList: android.media.MediaCodecInfo[] getCodecInfos()> -> _SOURCE_
<android.app.job.IJobScheduler$Default: java.util.List getStartedJobs()> -> _SOURCE_
<android.view.InputDevice: java.util.List getMotionRanges()> -> _SOURCE_
<android.app.Fragment: android.transition.Transition getReturnTransition()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long getStartClockTime()> -> _SOURCE_
<android.content.pm.ShortcutInfo: java.lang.String getTitleResName()> -> _SOURCE_
<android.app.admin.NetworkEvent: java.lang.String getPackageName()> -> _SOURCE_
<com.android.internal.telephony.IBooleanConsumer$Stub: java.lang.String getTransactionName(int)> -> _SOURCE_
<android.os.connectivity.WifiBatteryStats: long getAppScanRequestCount()> -> _SOURCE_
<android.hardware.camera2.params.OisSample: float getYshift()> -> _SOURCE_
<android.net.wifi.nl80211.PnoSettings: long getIntervalMillis()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.String getDeviceOwnerName()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getSimOperatorNumeric(int)> -> _SOURCE_
<android.os.Environment: java.io.File getDataMiscCeDirectory()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase$OpenParams: android.database.DatabaseErrorHandler getErrorHandler()> -> _SOURCE_
<android.provider.DeviceConfig$Properties: java.lang.String getNamespace()> -> _SOURCE_
<android.telephony.PhoneNumberUtils: boolean isGlobalPhoneNumber(java.lang.String)> -> _SOURCE_
<android.telephony.PhoneNumberUtils: boolean isInternationalNumber(java.lang.String,java.lang.String)> -> _SOURCE_
<android.hardware.location.ContextHubInfo: float getSleepPowerDrawMw()> -> _SOURCE_
<android.net.LocalSocket: java.io.FileDescriptor getFileDescriptor()> -> _SOURCE_
<android.content.Intent: android.os.Bundle getExtras()> -> _SOURCE_
<android.app.timezonedetector.ManualTimeZoneSuggestion: java.lang.String getZoneId()> -> _SOURCE_
<android.telephony.AvailableNetworkInfo: int hashCode()> -> _SOURCE_
<android.text.Editable$Factory: android.text.Editable$Factory getInstance()> -> _SOURCE_
<android.app.backup.BackupManager: java.lang.String getCurrentTransport()> -> _SOURCE_
<android.hardware.usb.UsbManager: android.hardware.usb.UsbDeviceConnection openDevice(android.hardware.usb.UsbDevice)> -> _SOURCE_
<android.telephony.CellIdentityNr: java.util.Set getAdditionalPlmns()> -> _SOURCE_
<android.view.accessibility.AccessibilityManager: android.view.accessibility.AccessibilityManager getInstance(android.content.Context)> -> _SOURCE_
<com.android.internal.midi.MidiDispatcher: android.media.midi.MidiSender getSender()> -> _SOURCE_
<android.media.session.MediaSessionManager$Session2TokensChangedWrapper: android.media.session.ISession2TokensListener$Stub getStub()> -> _SOURCE_
<android.app.Notification$CarExtender$UnreadConversation: java.lang.String[] getParticipants()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: int getRadioAccessFamily(int,java.lang.String)> -> _SOURCE_
<android.os.incremental.IncrementalManager: android.os.incremental.IncrementalStorage getStorage(int)> -> _SOURCE_
<android.content.pm.IDataLoaderManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.graphics.ImageDecoder: boolean getDecodeAsAlphaMask()> -> _SOURCE_
<android.hardware.camera2.CaptureFailure: java.lang.String getPhysicalCameraId()> -> _SOURCE_
<android.widget.CursorAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> -> _SOURCE_
<android.net.INetworkScoreService$Stub$Proxy: android.net.NetworkScorerAppData getActiveScorer()> -> _SOURCE_
<android.telephony.CellSignalStrengthTdscdma: java.lang.String toString()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<com.android.internal.telephony.IPhoneStateListener$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SOURCE_
<android.media.session.IOnMediaKeyEventDispatchedListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.media.session.IActiveSessionsListener$Stub: android.media.session.IActiveSessionsListener getDefaultImpl()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo$ExtraRenderingInfo getExtraRenderingInfo()> -> _SOURCE_
<android.net.lowpan.ILowpanInterface$Default: java.lang.String getState()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int[] supplyPinReportResultForSubscriber(int,java.lang.String)> -> _SOURCE_
<android.app.assist.AssistStructure$ViewNode: java.lang.String getHintIdEntry()> -> _SOURCE_
<android.hardware.display.IDisplayManager$Default: android.hardware.display.BrightnessConfiguration getDefaultBrightnessConfiguration()> -> _SOURCE_
<android.net.IpSecConfig: java.lang.String getDestinationAddress()> -> _SOURCE_
<com.android.internal.view.menu.ActionMenuItem: java.lang.CharSequence getTooltipText()> -> _SOURCE_
<android.hardware.camera2.CameraManager$CameraManagerGlobal: java.lang.String[] getCameraIdListNoLazy()> -> _SOURCE_
<android.graphics.RenderNode: float getElevation()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean getAutoTimeZoneEnabled(android.content.ComponentName)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: java.lang.String getLine1NumberForDisplay(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.webkit.GeolocationPermissions: android.webkit.GeolocationPermissions getInstance()> -> _SOURCE_
<android.telephony.data.ApnSetting: java.lang.String getMvnoMatchData()> -> _SOURCE_
<android.security.KeyStore$KeyAttestationCallbackResult: android.security.keystore.KeystoreResponse getKeystoreResponse()> -> _SOURCE_
<android.location.ILocationManager$Default: long getGnssCapabilities()> -> _SOURCE_
<android.view.InsetsSourceConsumer: android.view.InsetsSourceControl getControl()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: android.app.admin.SystemUpdateInfo getPendingSystemUpdate(android.content.ComponentName)> -> _SOURCE_
<android.net.NetworkStatsHistory: long getTotalBytes()> -> _SOURCE_
<com.android.internal.telephony.SmsMessageBase: java.lang.String getOriginatingAddress()> -> _SOURCE_
<android.app.job.IJobScheduler$Stub$Proxy: android.content.pm.ParceledListSlice getAllPendingJobs()> -> _SOURCE_
<android.hardware.radio.V1_5.BarringInfo$BarringTypeSpecificInfo: byte getDiscriminator()> -> _SOURCE_
<android.accounts.AccountManager: android.accounts.AuthenticatorDescription[] getAuthenticatorTypes()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.view.textclassifier.TextClassifierEvent: android.os.Bundle getExtras()> -> _SOURCE_
<android.content.pm.ShortcutInfo: java.lang.String getId()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isPackageAllowedToAccessCalendar(java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.ISub$Stub$Proxy: java.util.List getAccessibleSubscriptionInfoList(java.lang.String)> -> _SOURCE_
<android.telephony.ims.ImsMmTelManager: int getVoWiFiModeSetting()> -> _SOURCE_
<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getActivityLogo(android.content.ComponentName)> -> _SOURCE_
<android.os.Temperature: java.lang.String getName()> -> _SOURCE_
<android.telecom.Logging.Session: java.lang.String getShortMethodName()> -> _SOURCE_
<android.util.KeyValueListParser$StringValue: java.lang.String getDefaultValue()> -> _SOURCE_
<android.location.GnssReflectingPlane: double getAzimuthDegrees()> -> _SOURCE_
<android.os.UserManager: boolean isSystemUser()> -> _SOURCE_
<android.app.ActivityThread: android.content.pm.IPackageManager getPackageManager()> -> _SOURCE_
<android.media.MediaCodecList: android.media.MediaCodecInfo getInfoFor(java.lang.String)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: android.os.UserHandle createAndManageUser(android.content.ComponentName,java.lang.String,android.content.ComponentName,android.os.PersistableBundle,int)> -> _SOURCE_
<android.app.usage.UsageStatsManager: java.util.List queryConfigurations(int,long,long)> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase$OpenParams: android.database.sqlite.SQLiteDatabase$CursorFactory getCursorFactory()> -> _SOURCE_
<android.app.DownloadManager: java.lang.String getWhereClauseForIds(long[])> -> _SOURCE_
<android.app.ActivityOptions: android.view.IAppTransitionAnimationSpecsFuture getSpecsFuture()> -> _SOURCE_
<android.app.role.IOnRoleHoldersChangedListener$Stub: android.app.role.IOnRoleHoldersChangedListener getDefaultImpl()> -> _SOURCE_
<android.app.SearchManager: boolean isVisible()> -> _SOURCE_
<android.telephony.TelephonyManager: void requestModemActivityInfo(android.os.ResultReceiver)> -> _SOURCE_
<android.print.PrintJob: android.print.PrintJobId getId()> -> _SOURCE_
<android.telephony.CellIdentity: android.telephony.CellIdentity create(android.hardware.radio.V1_0.CellIdentity)> -> _SOURCE_
<android.util.Log: java.lang.String getStackTraceString(java.lang.Throwable)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewSizes()> -> _SOURCE_
<android.net.lowpan.LowpanBeaconInfo: byte[] getBeaconAddress()> -> _SOURCE_
<android.nfc.cardemulation.ApduServiceInfo: java.lang.String getSettingsActivityName()> -> _SOURCE_
<com.android.internal.view.InlineSuggestionsRequestInfo: android.content.ComponentName getComponentName()> -> _SOURCE_
<android.telephony.CellIdentityTdscdma: int describeContents()> -> _SOURCE_
<android.content.Context: android.os.IBinder getActivityToken()> -> _SOURCE_
<android.os.storage.StorageManager: java.lang.String getMountedObbPath(java.lang.String)> -> _SOURCE_
<android.media.IMediaRouterService$Stub: android.media.IMediaRouterService getDefaultImpl()> -> _SOURCE_
<android.media.RingtoneManager: android.net.Uri getCacheForType(int,int)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isDeviceProvisioningConfigApplied()> -> _SOURCE_
<android.media.session.ISessionController$Default: java.lang.String getPackageName()> -> _SOURCE_
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: java.util.Set getHighSpeedVideoSizes()> -> _SOURCE_
<android.location.Address: java.lang.String getPhone()> -> _SOURCE_
<android.view.inputmethod.CompletionInfo: java.lang.CharSequence getText()> -> _SOURCE_
<android.webkit.WebStorage$Origin: long getQuota()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isResetPasswordTokenActive(android.content.ComponentName)> -> _SOURCE_
<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.hardware.ICameraService getCameraService()> -> _SOURCE_
<android.webkit.MimeTypeMap: android.webkit.MimeTypeMap getSingleton()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: java.lang.String iccTransmitApduLogicalChannelBySlot(int,int,int,int,int,int,int,java.lang.String)> -> _SOURCE_
<android.view.InputDevice: java.lang.String getName()> -> _SOURCE_
<com.android.internal.widget.ToolbarWidgetWrapper: android.view.View getCustomView()> -> _SOURCE_
<android.net.lowpan.ILowpanInterface$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.database.SortCursor: short getShort(int)> -> _SOURCE_
<android.hardware.camera2.ICameraDeviceCallbacks$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.assist.AssistStructure$HtmlInfoNode: java.lang.String getTag()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.lang.String getCdmaMin(int)> -> _SOURCE_
<android.telephony.PhoneNumberUtils: java.lang.String cdmaCheckAndProcessPlusCodeByNumberFormat(java.lang.String,int,int)> -> _SOURCE_
<android.view.InputDevice: int[] getDeviceIds()> -> _SOURCE_
<com.android.internal.telephony.euicc.IListNotificationsCallback$Stub: com.android.internal.telephony.euicc.IListNotificationsCallback getDefaultImpl()> -> _SOURCE_
<android.net.LocalSocketImpl: java.io.FileDescriptor getFileDescriptor()> -> _SOURCE_
<android.app.IBackupAgent$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.media.WebVttTrack: android.media.SubtitleTrack$RenderingWidget getRenderingWidget()> -> _SOURCE_
<android.view.WindowManagerGlobal: android.view.IWindowSession getWindowSession()> -> _SOURCE_
<android.telephony.SmsMessage: byte[] getPdu()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.os.IVoldListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.accounts.AbstractAccountAuthenticator: android.os.IBinder getIBinder()> -> _SOURCE_
<android.telephony.TelephonyManager: android.telephony.IccOpenLogicalChannelResponse iccOpenLogicalChannel(java.lang.String,int)> -> _SOURCE_
<android.telephony.DataConnectionRealTimeInfo: int getDcPowerState()> -> _SOURCE_
<android.telephony.AccessNetworkConstants$AccessNetworkType: java.lang.String toString(int)> -> _SOURCE_
<com.android.internal.telephony.SmsConstants$MessageClass: com.android.internal.telephony.SmsConstants$MessageClass[] values()> -> _SOURCE_
<android.app.usage.NetworkStats$Bucket: long getRxBytes()> -> _SOURCE_
<android.permission.PermissionControllerManager: java.util.concurrent.CompletableFuture lambda$applyStagedRuntimePermissionBackup$10(java.lang.String,android.os.UserHandle,android.permission.IPermissionController)> -> _SOURCE_
<com.android.internal.app.IAppOpsService$Default: java.util.List getOpsForPackage(int,java.lang.String,int[])> -> _SOURCE_
<android.hardware.hdmi.IHdmiControlService$Default: java.util.List getInputDevices()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.util.List retrievePreRebootSecurityLogs(android.content.ComponentName)> -> _SOURCE_
<android.view.textclassifier.ConversationAction: android.os.Bundle getExtras()> -> _SOURCE_
<com.android.internal.telephony.IBooleanConsumer$Stub: com.android.internal.telephony.IBooleanConsumer asInterface(android.os.IBinder)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isDeviceManaged()> -> _SOURCE_
<android.net.NetworkTemplate: java.lang.String getNetworkId()> -> _SOURCE_
<android.app.IActivityController$Stub: android.app.IActivityController getDefaultImpl()> -> _SOURCE_
<android.graphics.drawable.NinePatchDrawable: android.graphics.Insets getOpticalInsets()> -> _SOURCE_
<com.android.internal.telephony.cdma.SmsMessage: com.android.internal.telephony.cdma.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,int,byte[],boolean)> -> _SOURCE_
<android.media.MediaRoute2Info: java.lang.String getClientPackageName()> -> _SOURCE_
<android.hardware.soundtrigger.SoundTrigger$KeyphraseSoundModel: android.hardware.soundtrigger.SoundTrigger$Keyphrase[] getKeyphrases()> -> _SOURCE_
<android.telephony.TelephonyManager: android.telephony.VisualVoicemailSmsFilterSettings getActiveVisualVoicemailSmsFilterSettings(int)> -> _SOURCE_
<android.os.StrictMode: android.os.StrictMode$VmPolicy getVmPolicy()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.util.List getTelephonyHistograms()> -> _SOURCE_
<android.hardware.display.DeviceProductInfo$ManufactureDate: java.lang.Integer getYear()> -> _SOURCE_
<android.database.sqlite._$$Lambda$RBWjWVyGrOTsQrLCYzJ_G8Uk25Q: java.lang.Object get()> -> _SOURCE_
<android.media.RouteDiscoveryPreference: android.os.Bundle getExtras()> -> _SOURCE_
<android.telephony.CellSignalStrengthWcdma: android.telephony.CellSignalStrength copy()> -> _SOURCE_
<android.os.storage.StorageManager: long getAllocatableBytes(java.util.UUID,int)> -> _SOURCE_
<android.app.ApplicationPackageManager: int[] getPackageGids(java.lang.String,int)> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec: java.util.Date getKeyValidityStart()> -> _SOURCE_
<android.hardware.display.BrightnessConfiguration: long getShortTermModelTimeoutMillis()> -> _SOURCE_
<android.view.Display$HdrCapabilities: float getDesiredMinLuminance()> -> _SOURCE_
<android.telephony.TelephonyHistogram: int getBucketCount()> -> _SOURCE_
<android.bluetooth.le.ScanFilter: byte[] getServiceData()> -> _SOURCE_
<android.net.LinkAddress: boolean isIPv6()> -> _SOURCE_
<android.app.usage.NetworkStatsManager: android.app.usage.NetworkStats queryDetailsForUidTagState(int,java.lang.String,long,long,int,int,int)> -> _SOURCE_
<android.util.proto.ProtoStream: java.lang.String getWireTypeString(int)> -> _SOURCE_
<android.content.pm.IPinItemRequest$Stub: android.content.pm.IPinItemRequest getDefaultImpl()> -> _SOURCE_
<android.app.IAlarmManager$Default: long getNextWakeFromIdleTime()> -> _SOURCE_
<android.telephony.CellIdentity: long inRangeOrUnavailable(long,long,long)> -> _SOURCE_
<android.app.ListFragment: android.widget.ListView getListView()> -> _SOURCE_
<android.location.GpsMeasurement: byte getMultipathIndicator()> -> _SOURCE_
<android.security.net.config.ConfigNetworkSecurityPolicy: boolean isCleartextTrafficPermitted()> -> _SOURCE_
<com.android.internal.telephony.SmsMessageBase: int getStatusOnIcc()> -> _SOURCE_
<com.android.internal.inputmethod.IIntResultCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.os.IDeviceIdleController$Default: int[] getAppIdUserWhitelist()> -> _SOURCE_
<android.telecom.Logging.Session: java.lang.String getOwnerInfo()> -> _SOURCE_
<android.inputmethodservice.AbstractInputMethodService: android.view.KeyEvent$DispatcherState getKeyDispatcherState()> -> _SOURCE_
<android.graphics.drawable.AnimatedVectorDrawable$VectorDrawableAnimatorRT: long getAnimatorNativePtr()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: java.util.Map getSyncedTables()> -> _SOURCE_
<android.view.inputmethod.InputMethodManager: boolean isActive(android.view.View)> -> _SOURCE_
<android.media.AudioRecord: android.media.AudioDeviceInfo getRoutedDevice()> -> _SOURCE_
<com.android.internal.telephony.ISub$Default: int clearSubInfo()> -> _SOURCE_
<android.os.IServiceCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telephony.VisualVoicemailSms$Builder: android.os.Bundle access$200(android.telephony.VisualVoicemailSms$Builder)> -> _SOURCE_
<android.app.ContextImpl: java.util.concurrent.Executor getMainExecutor()> -> _SOURCE_
<com.android.internal.telephony.euicc.ISwitchToProfileCallback$Stub: com.android.internal.telephony.euicc.ISwitchToProfileCallback getDefaultImpl()> -> _SOURCE_
<android.telephony.CarrierRestrictionRules: java.util.List areCarrierIdentifiersAllowed(java.util.List)> -> _SOURCE_
<com.android.internal.telephony.ISetOpportunisticDataCallback$Default: android.os.IBinder asBinder()> -> _SOURCE_
<android.telephony.SmsMessage: int getSubId()> -> _SOURCE_
<android.telephony.CallQuality: int getMaxRelativeJitter()> -> _SOURCE_
<android.view.accessibility.AccessibilityManager: java.util.List getAccessibilityServiceList()> -> _SOURCE_
<android.telephony.TelephonyManager: int getDataNetworkType()> -> _SOURCE_
<android.net.Uri$HierarchicalUri: java.util.List getPathSegments()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String iccTransmitApduLogicalChannel(int,int,int,int,int,int,int,java.lang.String)> -> _SOURCE_
<android.animation.Keyframe: java.lang.Class getType()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long getCurrentDailyStartTime()> -> _SOURCE_
<android.hardware.soundtrigger.SoundTrigger$SoundModel: java.util.UUID getVendorUuid()> -> _SOURCE_
<android.location.IGnssStatusListener$Stub: android.location.IGnssStatusListener getDefaultImpl()> -> _SOURCE_
<com.android.internal.view.menu.MenuItemImpl: char getShortcut()> -> _SOURCE_
<android.app.ContextImpl: android.content.Context getOuterContext()> -> _SOURCE_
<android.app.backup.IBackupObserver$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.location.Geofence: double getLatitude()> -> _SOURCE_
<android.os.NativeHandle: java.io.FileDescriptor getFileDescriptor()> -> _SOURCE_
<android.os.storage.StorageManager: java.lang.String getVolumeState(java.lang.String)> -> _SOURCE_
<android.view.ViewRootImpl: android.view.SurfaceControl getSurfaceControl()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getNetworkSpecifier()> -> _SOURCE_
<android.content.pm.dex.ArtManager: java.io.File getProfileSnapshotFileForName(java.lang.String,java.lang.String)> -> _SOURCE_
<android.content.res.AssetManager: java.lang.String getLastResourceResolution()> -> _SOURCE_
<android.hardware.camera2.impl.PhysicalCaptureResultInfo: java.lang.String getCameraId()> -> _SOURCE_
<android.telephony.SubscriptionManager: java.util.List getSubscriptionPlans(int)> -> _SOURCE_
<android.os.LocaleList: android.os.LocaleList getAdjustedDefault()> -> _SOURCE_
<android.telephony.SignalStrength: int getLteAsuLevel()> -> _SOURCE_
<android.media.IVolumeController$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.util.List getDelegatePackages(android.content.ComponentName,java.lang.String)> -> _SOURCE_
<android.net.IEthernetManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telephony.CellIdentity$1: android.telephony.CellIdentity createFromParcel(android.os.Parcel)> -> _SOURCE_
<android.app.role.RoleManager: java.lang.String getDefaultSmsPackage(int)> -> _SOURCE_
<android.content.pm.PackageInstaller$SessionInfo: float getProgress()> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: java.lang.String[][] getUsesStaticLibrariesCertDigests()> -> _SOURCE_
<android.net.ProxyInfo: java.lang.String[] getExclusionList()> -> _SOURCE_
<android.net.INetworkScoreService$Stub: android.net.INetworkScoreService getDefaultImpl()> -> _SOURCE_
<android.hardware.fingerprint.FingerprintManager: java.lang.String getAcquiredString(android.content.Context,int,int)> -> _SOURCE_
<android.telephony.SmsMessage: android.telephony.SmsMessage createFromEfRecord(int,byte[])> -> _SOURCE_
<android.telephony.data.ApnSetting: java.lang.String getEntryName()> -> _SOURCE_
<android.location.GnssMeasurement: double getAutomaticGainControlLevelDb()> -> _SOURCE_
<com.android.internal.util.MemInfoReader: long getZramTotalSizeKb()> -> _SOURCE_
<com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: java.util.List getSupportedCountries(boolean)> -> _SOURCE_
<android.media.AudioFocusInfo: android.media.AudioAttributes getAttributes()> -> _SOURCE_
<android.widget.inline.InlinePresentationSpec: android.os.Bundle getStyle()> -> _SOURCE_
<android.net.ConnectivityManager: java.lang.String[] getTetheredDhcpRanges()> -> _SOURCE_
<com.android.internal.telephony.SmsHeader$ConcatRef: int hashCode()> -> _SOURCE_
<android.telephony.CellIdentityNr: int getTac()> -> _SOURCE_
<com.android.internal.app.IBatteryStats$Stub$Proxy: long getAwakeTimeBattery()> -> _SOURCE_
<android.media.AudioPresentation: java.util.Locale getLocale()> -> _SOURCE_
<android.telephony.UiccAccessRule: java.lang.String getPackageName()> -> _SOURCE_
<com.android.internal.policy.PhoneWindow: boolean getAllowEnterTransitionOverlap()> -> _SOURCE_
<android.net.INetworkScoreCache$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.backup.IFullBackupRestoreObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.IPackageInstaller getPackageInstaller()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: java.util.List getAllCellInfo(java.lang.String,java.lang.String)> -> _SOURCE_
<android.bluetooth.IBluetoothSocketManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.bluetooth.IBluetoothStateChangeCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.WindowConfiguration: android.graphics.Rect getBounds()> -> _SOURCE_
<android.nfc.tech.NfcB: byte[] getApplicationData()> -> _SOURCE_
<android.content.res.AssetManager: android.content.res.Configuration[] getSizeConfigurations()> -> _SOURCE_
<android.content.SyncRequest: long getSyncFlexTime()> -> _SOURCE_
<android.app.slice.ISliceManager$Stub$Proxy: android.app.slice.SliceSpec[] getPinnedSpecs(android.net.Uri,java.lang.String)> -> _SOURCE_
<android.graphics.Paint: android.graphics.Shader getShader()> -> _SOURCE_
<android.location.GnssClock: long getElapsedRealtimeNanos()> -> _SOURCE_
<android.hardware.camera2.params.SessionConfiguration: java.util.List getOutputConfigurations()> -> _SOURCE_
<android.os.connectivity.CellularBatteryStats: long getIdleTimeMillis()> -> _SOURCE_
<android.content.BroadcastReceiver: java.lang.String getResultData()> -> _SOURCE_
<android.app.LocalActivityManager: android.os.Bundle saveInstanceState()> -> _SOURCE_
<android.view.animation.LayoutAnimationController: android.view.animation.Interpolator getInterpolator()> -> _SOURCE_
<android.nfc.IAppCallback$Stub: android.nfc.IAppCallback getDefaultImpl()> -> _SOURCE_
<android.content.res.AssetManager: java.lang.String getResourceName(int)> -> _SOURCE_
<android.app.assist.AssistStructure$ViewNodeBuilder: android.view.autofill.AutofillId getAutofillId()> -> _SOURCE_
<android.app.Person: android.net.Uri getIconUri()> -> _SOURCE_
<android.widget.Spinner: java.lang.CharSequence getAccessibilityClassName()> -> _SOURCE_
<com.android.internal.view.menu.MenuItemImpl: java.lang.CharSequence getTooltipText()> -> _SOURCE_
<com.android.internal.view.menu.ActionMenuItem: android.view.SubMenu getSubMenu()> -> _SOURCE_
<android.net.wifi.nl80211.PnoNetwork: byte[] getSsid()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getLteOnCdmaModeForSubscriber(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.view.accessibility.AccessibilityManager: boolean isTouchExplorationEnabled()> -> _SOURCE_
<android.app.IActivityManager$Stub$Proxy: java.util.List getAllStackInfos()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: java.util.ArrayList getDailyPackageChanges()> -> _SOURCE_
<android.content.pm.IPackageMoveObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.internal.telephony.util.TelephonyUtils: android.content.pm.ComponentInfo getComponentInfo(android.content.pm.ResolveInfo)> -> _SOURCE_
<android.net.ConnectivityManager: boolean isTetheringSupported()> -> _SOURCE_
<android.bluetooth.IBluetoothPbap$Default: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
<android.nfc.INfcFCardEmulation$Stub$Proxy: java.lang.String getSystemCodeForService(int,android.content.ComponentName)> -> _SOURCE_
<android.media.AudioManager: boolean isStreamMute(int)> -> _SOURCE_
<android.os.storage.IStorageManager$Default: java.lang.String getPassword()> -> _SOURCE_
<android.app.usage.UsageEvents$Event: java.lang.String getNotificationChannelId()> -> _SOURCE_
<android.view.SurfaceControl: long[] getPhysicalDisplayIds()> -> _SOURCE_
<android.content.ContentResolver: java.util.List getPersistedUriPermissions()> -> _SOURCE_
<com.android.internal.policy.PhoneWindow: android.view.WindowInsetsController getInsetsController()> -> _SOURCE_
<android.view.ViewGroup$1: java.lang.CharSequence getTitle()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isConcurrentVoiceAndDataSupported()> -> _SOURCE_
<android.content.pm.ShortcutInfo: android.os.PersistableBundle getExtras()> -> _SOURCE_
<android.telephony.CellSignalStrengthGsm: int getBitErrorRate()> -> _SOURCE_
<android.text.method.TimeKeyListener: char[] getAcceptedChars()> -> _SOURCE_
<android.widget.Magnifier: android.graphics.drawable.Drawable getOverlay()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isCommonCriteriaModeEnabled(android.content.ComponentName)> -> _SOURCE_
<android.content.ContentResolver: java.util.List getCurrentSyncs()> -> _SOURCE_
<android.telephony.CbGeoUtils: java.util.List parseGeometriesFromString(java.lang.String)> -> _SOURCE_
<android.app.DisabledWallpaperManager: android.graphics.drawable.Drawable getBuiltInDrawable(int,int,boolean,float,float)> -> _SOURCE_
<android.location.GpsMeasurement: double getAzimuthInDeg()> -> _SOURCE_
<android.app.UiModeManager: int getNightMode()> -> _SOURCE_
<android.transition.Transition: android.util.ArrayMap getNameOverrides()> -> _SOURCE_
<android.app.ContextImpl: java.lang.String getOpPackageName()> -> _SOURCE_
<android.location.GnssClock: double getReferenceCarrierFrequencyHzForIsb()> -> _SOURCE_
<android.hardware.face.IFaceServiceReceiver$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.nfc.INfcCardEmulation$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.hardware.camera2.params.OisSample: long getTimestamp()> -> _SOURCE_
<android.text.method.PasswordTransformationMethod: android.text.method.PasswordTransformationMethod getInstance()> -> _SOURCE_
<android.content.pm.PackageInstaller: android.content.pm.PackageInstaller$SessionInfo getActiveStagedSession()> -> _SOURCE_
<android.app.RemoteInput: android.os.Bundle getExtras()> -> _SOURCE_
<android.animation.LayoutTransition: java.util.List getTransitionListeners()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long getAwakeTimeBattery()> -> _SOURCE_
<android.telephony.TelephonyManager: com.android.internal.telephony.ISms getSmsService()> -> _SOURCE_
<android.hardware.IConsumerIrService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.graphics.Canvas: android.graphics.Rect getClipBounds()> -> _SOURCE_
<android.net.IEthernetManager$Stub$Proxy: java.lang.String[] getAvailableInterfaces()> -> _SOURCE_
<android.security.net.config.SystemCertificateSource: android.security.net.config.SystemCertificateSource getInstance()> -> _SOURCE_
<android.app.DownloadManager: android.net.Uri getDownloadUri(long)> -> _SOURCE_
<android.os.Debug: java.lang.String getCallers(int,java.lang.String)> -> _SOURCE_
<android.net.Uri$OpaqueUri: java.lang.String getSchemeSpecificPart()> -> _SOURCE_
<android.view.DisplayCutout: android.graphics.Rect getBoundingRectRight()> -> _SOURCE_
<android.view.IRecentsAnimationRunner$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.INotificationManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.AppOpsManager: void getHistoricalOpsFromDiskRaw(android.app.AppOpsManager$HistoricalOpsRequest,java.util.concurrent.Executor,java.util.function.Consumer)> -> _SOURCE_
<android.telephony.ICellInfoCallback$Stub: android.telephony.ICellInfoCallback asInterface(android.os.IBinder)> -> _SOURCE_
<android.view.ScrollCaptureTarget: android.graphics.Point getPositionInWindow()> -> _SOURCE_
<android.content.ContentProviderProxy: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)> -> _SOURCE_
<android.telephony.ims.feature.CapabilityChangeRequest: java.util.List getCapabilitiesToEnable()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.CharSequence getDeviceOwnerLockScreenInfo()> -> _SOURCE_
<android.net.RouteInfo: android.net.LinkAddress getDestinationLinkAddress()> -> _SOURCE_
<android.nfc.INfcTag$Default: boolean getExtendedLengthApdusSupported()> -> _SOURCE_
<android.app.PictureInPictureParams: android.graphics.Rect getSourceRectHint()> -> _SOURCE_
<android.app.ActivityManager: java.util.List getHistoricalProcessExitReasons(java.lang.String,int,int)> -> _SOURCE_
<com.android.internal.telephony.IOns$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.prediction.AppTargetEvent: android.app.prediction.AppTarget getTarget()> -> _SOURCE_
<android.os.NativeHandle: int[] getInts()> -> _SOURCE_
<android.os.storage.StorageManager: boolean isBlockEncrypting()> -> _SOURCE_
<android.os.UserManager: boolean isUserOfType(java.lang.String)> -> _SOURCE_
<android.print.PrintManager: android.print.PrintManager getGlobalPrintManagerForUser(int)> -> _SOURCE_
<com.android.internal.telephony.euicc.IPrepareDownloadCallback$Stub: com.android.internal.telephony.euicc.IPrepareDownloadCallback getDefaultImpl()> -> _SOURCE_
<com.android.internal.telephony.SmsApplication$SmsApplicationData: java.lang.String access$600(com.android.internal.telephony.SmsApplication$SmsApplicationData)> -> _SOURCE_
<android.net.IEthernetManager$Default: java.lang.String[] getAvailableInterfaces()> -> _SOURCE_
<android.app.EnterTransitionCoordinator: java.util.ArrayList getPendingExitSharedElementNames()> -> _SOURCE_
<android.telephony.CellSignalStrength: int getRssiDbmFromAsu(int)> -> _SOURCE_
<android.location.GnssMeasurement: double getSatelliteInterSignalBiasNanos()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getPackageName()> -> _SOURCE_
<android.accounts.AccountManager: android.accounts.Account[] getAccounts()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.print.PrintJob: android.print.PrintJobInfo getInfo()> -> _SOURCE_
<android.hardware.usb.UsbInterface: java.lang.String getName()> -> _SOURCE_
<android.window.IWindowOrganizerController$Stub: android.window.IWindowOrganizerController getDefaultImpl()> -> _SOURCE_
<android.view.WindowlessWindowManager: android.view.IWindowId getWindowId(android.os.IBinder)> -> _SOURCE_
<android.appwidget.AppWidgetManager: android.appwidget.AppWidgetManager getInstance(android.content.Context)> -> _SOURCE_
<com.android.internal.view.StandaloneActionMode: android.view.MenuInflater getMenuInflater()> -> _SOURCE_
<android.view.IOnKeyguardExitResult$Stub: android.view.IOnKeyguardExitResult getDefaultImpl()> -> _SOURCE_
<android.content.IIntentReceiver$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.os.storage.StorageManager: java.util.List getVolumes()> -> _SOURCE_
<android.os.Debug: java.lang.String getCallers(int,int)> -> _SOURCE_
<android.view.DisplayInfo: android.view.Display$Mode getMode()> -> _SOURCE_
<com.android.internal.textservice.ITextServicesSessionListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.content.res.loader.ResourcesLoader: java.util.List getProviders()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.CharSequence getSimCarrierIdName()> -> _SOURCE_
<android.media.AudioManager: int getRouting(int)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: android.os.BatteryStats$Timer getBluetoothScanTimer()> -> _SOURCE_
<android.net.ConnectivityManager: java.lang.String getAlwaysOnVpnPackageForUser(int)> -> _SOURCE_
<android.telephony.TelephonyManager: java.util.List getUiccCardsInfo()> -> _SOURCE_
<android.app.ActivityManager$TaskDescription: java.lang.String getIconResourcePackage()> -> _SOURCE_
<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getApplicationLogo(java.lang.String)> -> _SOURCE_
<android.telephony.TelephonyManager: android.telephony.ims.aidl.IImsRegistration getImsRegistration(int,int)> -> _SOURCE_
<android.view.textclassifier.TextLinks$Request: java.time.ZonedDateTime getReferenceTime()> -> _SOURCE_
<android.app.backup.IBackupManager$Stub$Proxy: java.lang.String getDestinationStringForUser(int,java.lang.String)> -> _SOURCE_
<android.telephony.SmsCbEtwsInfo: byte[] getPrimaryNotificationSignature()> -> _SOURCE_
<android.app.Dialog: android.view.Window getWindow()> -> _SOURCE_
<android.media.tv.tunerresourcemanager.ITunerResourceManager$Stub: android.media.tv.tunerresourcemanager.ITunerResourceManager getDefaultImpl()> -> _SOURCE_
<android.app.job.JobParameters: android.net.Network getNetwork()> -> _SOURCE_
<android.content.pm.IDataLoaderStatusListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.hardware.usb.IUsbManager$Default: long getCurrentFunctions()> -> _SOURCE_
<android.app.ActivityManager: java.util.List getProcessesInErrorState()> -> _SOURCE_
<android.media.AudioRecordingConfiguration: android.media.AudioFormat getClientFormat()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo$ExtraRenderingInfo: android.util.Size getLayoutSize()> -> _SOURCE_
<android.app.LocalActivityManager: java.util.HashMap dispatchRetainNonConfigurationInstance()> -> _SOURCE_
<android.media.soundtrigger_middleware.ISoundTriggerModule$Stub$Proxy: android.media.soundtrigger_middleware.ModelParameterRange queryModelParameterSupport(int,int)> -> _SOURCE_
<android.bluetooth.IBluetoothSap$Stub$Proxy: java.util.List getConnectedDevices()> -> _SOURCE_
<android.media.tv.ITvInputHardwareCallback$Stub: android.media.tv.ITvInputHardwareCallback getDefaultImpl()> -> _SOURCE_
<android.media.IRingtonePlayer$Stub$Proxy: java.lang.String getTitle(android.net.Uri)> -> _SOURCE_
<android.content.ContentResolver: java.util.List getOutgoingUriPermissions()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: android.telephony.SignalStrength getSignalStrength(int)> -> _SOURCE_
<android.graphics.drawable.GradientDrawable: float getGradientCenterY()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: boolean isIccLockEnabled(int)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.lang.String[] getMergedImsisFromGroup(int,java.lang.String)> -> _SOURCE_
<android.hardware.hdmi.IHdmiRecordListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.IActivityManager$Stub: android.app.IActivityManager getDefaultImpl()> -> _SOURCE_
<android.app.ActivityThread: android.permission.IPermissionManager getPermissionManager()> -> _SOURCE_
<android.graphics.Paint: android.graphics.Paint$Style getStyle()> -> _SOURCE_
<android.telephony.ims.aidl.IImsRegistrationCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.content.pm.parsing.result.ParseTypeImpl: java.lang.Exception getException()> -> _SOURCE_
<android.view.textclassifier.ConversationActions$Request: android.os.Bundle getExtras()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getSimOperatorName()> -> _SOURCE_
<android.text.method.DialerKeyListener: android.text.method.DialerKeyListener getInstance()> -> _SOURCE_
<android.net.LinkProperties: java.net.Inet4Address getDhcpServerAddress()> -> _SOURCE_
<android.hardware.hdmi.IHdmiVendorCommandListener$Stub: android.hardware.hdmi.IHdmiVendorCommandListener getDefaultImpl()> -> _SOURCE_
<com.android.internal.telephony.IBooleanConsumer$Default: android.os.IBinder asBinder()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String[] getMergedImsisFromGroup()> -> _SOURCE_
<android.location.LocationRequest: java.lang.String getProvider()> -> _SOURCE_
<android.net.NetworkTemplate: int[] getAllCollapsedRatTypes()> -> _SOURCE_
<android.net.wifi.nl80211.IClientInterface$Default: int[] getPacketCounters()> -> _SOURCE_
<android.location.LocationManager: java.util.List getProviders(android.location.Criteria,boolean)> -> _SOURCE_
<android.database.sqlite.SQLiteQueryBuilder: android.database.sqlite.SQLiteDatabase$CursorFactory getCursorFactory()> -> _SOURCE_
<android.os.IVibratorService$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.view.textclassifier.TextSelection: java.lang.String getId()> -> _SOURCE_
<android.net.TrafficStats: long getUidTxPackets(int)> -> _SOURCE_
<android.hardware.camera2.CaptureResult: java.lang.Class getKeyClass()> -> _SOURCE_
<android.permission.PermissionControllerManager: java.util.concurrent.CompletableFuture lambda$getPermissionUsages$20(boolean,long,android.permission.IPermissionController)> -> _SOURCE_
<android.widget.ProgressBar: android.graphics.drawable.Drawable getCurrentDrawable()> -> _SOURCE_
<android.app.job.JobInfo: android.os.PersistableBundle getExtras()> -> _SOURCE_
<android.telephony.CellIdentityLte: java.lang.String getMobileNetworkOperator()> -> _SOURCE_
<android.view.MenuInflater: android.content.Context getContext()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: android.telephony.UiccSlotInfo[] getUiccSlotsInfo()> -> _SOURCE_
<android.print.IPrintManager$Default: java.util.List getPrintJobInfos(int,int)> -> _SOURCE_
<android.telephony.SignalStrength: java.util.List getCellSignalStrengths()> -> _SOURCE_
<android.nfc.cardemulation.NfcFServiceInfo: java.lang.String getSystemCode()> -> _SOURCE_
<android.widget.ProgressBar: boolean getMirrorForRtl()> -> _SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkInfo getActiveNetworkInfo()> -> _SOURCE_
<com.android.internal.telephony.SmsApplication: android.content.ComponentName getDefaultSmsApplication(android.content.Context,boolean)> -> _SOURCE_
<android.drm.DrmSupportInfo: java.util.Iterator getFileSuffixIterator()> -> _SOURCE_
<android.telephony.SmsMessage: int getIndexOnIcc()> -> _SOURCE_
<android.view.accessibility.AccessibilityRecord: android.os.Parcelable getParcelableData()> -> _SOURCE_
<android.app.NotificationManager: java.util.List getEnabledNotificationListenerPackages()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getOverrideApns(android.content.ComponentName)> -> _SOURCE_
<android.view.IWindowFocusObserver$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.telecom.ITelecomService$Stub$Proxy: android.telecom.PhoneAccountHandle getUserSelectedOutgoingPhoneAccount(java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.GsmAlphabet: java.lang.String gsm8BitUnpackedToString(byte[],int,int,java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getCdmaEriIconIndex(java.lang.String,java.lang.String)> -> _SOURCE_
<com.android.internal.app.IVoiceInteractorRequest$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.view.IDisplayWindowListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.accounts.AccountManager: java.lang.String getPreviousName(android.accounts.Account)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<com.android.ims.internal.IImsEcbm$Stub: com.android.ims.internal.IImsEcbm getDefaultImpl()> -> _SOURCE_
<android.view.accessibility.IAccessibilityManager$Default: java.util.List getInstalledAccessibilityServiceList(int)> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: java.util.List getActionList()> -> _SOURCE_
<android.location.GnssMeasurementCorrections: java.util.List getSingleSatelliteCorrectionList()> -> _SOURCE_
<android.drm.DrmManagerClient: java.util.Collection getAvailableDrmSupportInfo()> -> _SOURCE_
<android.location.Address: java.lang.String getAdminArea()> -> _SOURCE_
<android.telephony.CellIdentityGsm: android.telephony.CellLocation asCellLocation()> -> _SOURCE_
<android.app.IUserSwitchObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.view.animation.Animation: long getStartTime()> -> _SOURCE_
<com.android.internal.telephony.IIntegerConsumer$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.content.pm.parsing.component.ParsedMainComponent: java.lang.String getProcessName()> -> _SOURCE_
<android.app.AppOpsManager$PackageOps: java.util.List getOps()> -> _SOURCE_
<android.os.UserManager: long getUserUnlockRealtime()> -> _SOURCE_
<com.android.internal.app.WindowDecorActionBar: java.lang.CharSequence getSubtitle()> -> _SOURCE_
<com.android.internal.os.Zygote: int[] getUsapPipeFDs()> -> _SOURCE_
<com.android.internal.telephony.OperatorInfo: int getRan()> -> _SOURCE_
<android.widget.EditText: boolean getFreezesText()> -> _SOURCE_
<android.telephony.ModemActivityInfo: int getSleepTimeMillis()> -> _SOURCE_
<android.os.incremental.IncrementalManager: android.os.incremental.IncrementalStorage createStorage(java.lang.String,android.content.pm.DataLoaderParams,int,boolean,android.content.pm.IDataLoaderStatusListener,android.os.incremental.StorageHealthCheckParams,android.os.incremental.IStorageHealthListener)> -> _SOURCE_
<android.webkit.WebSyncManager: java.lang.Object clone()> -> _SOURCE_
<android.content.ComponentName: java.lang.String getShortClassName()> -> _SOURCE_
<android.hardware.hdmi.HdmiClient: android.hardware.hdmi.HdmiDeviceInfo getActiveSource()> -> _SOURCE_
<com.android.internal.view.InputConnectionWrapper: android.view.inputmethod.ExtractedText getExtractedText(android.view.inputmethod.ExtractedTextRequest,int)> -> _SOURCE_
<android.app.Notification: android.graphics.drawable.Icon getLargeIcon()> -> _SOURCE_
<android.net.shared.Inet4AddressUtils: java.net.Inet4Address getPrefixMaskAsInet4Address(int)> -> _SOURCE_
<android.media.MediaPlayer$DrmInfo: java.util.Map getPssh()> -> _SOURCE_
<android.media.AudioManager: boolean isAudioFocusExclusive()> -> _SOURCE_
<android.view.contentcapture.ContentCaptureContext: android.os.Bundle getExtras()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.util.List getKeepUninstalledPackages(android.content.ComponentName)> -> _SOURCE_
<android.content.res.ColorStateList: int[][] getStates()> -> _SOURCE_
<android.app.ApplicationPackageManager: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int)> -> _SOURCE_
<android.os.PowerManager: int getMinimumScreenBrightnessForVrSetting()> -> _SOURCE_
<android.content.ContextWrapper: boolean isRestricted()> -> _SOURCE_
<android.view.KeyEvent: char getNumber()> -> _SOURCE_
<android.app.blob.LeaseInfo: long getExpiryTimeMillis()> -> _SOURCE_
<android.hardware.location.IContextHubService$Stub$Proxy: android.hardware.location.NanoAppInstanceInfo getNanoAppInstanceInfo(int)> -> _SOURCE_
<android.location.Location: long getTime()> -> _SOURCE_
<android.accounts.IAccountManagerResponse$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.media.AudioRecordingConfiguration: android.media.AudioDeviceInfo getAudioDevice()> -> _SOURCE_
<android.app.ActivityManager: void getMyMemoryState(android.app.ActivityManager$RunningAppProcessInfo)> -> _SOURCE_
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable getCurrent()> -> _SOURCE_
<android.hardware.display.IDisplayManager$Stub$Proxy: android.content.pm.ParceledListSlice getAmbientBrightnessStats()> -> _SOURCE_
<android.view.contentcapture.ContentCaptureManager: android.content.ComponentName getServiceComponentName()> -> _SOURCE_
<android.net.NetworkAgentConfig: java.lang.String getSubscriberId()> -> _SOURCE_
<android.bluetooth.le.ScanResult: long getTimestampNanos()> -> _SOURCE_
<android.telephony.TelephonyManager: int getVoiceActivationState()> -> _SOURCE_
<com.android.internal.os.BatteryStatsHelper: java.util.List getUsageList()> -> _SOURCE_
<android.hardware.usb.UsbDevice: java.lang.String getManufacturerName()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<com.android.telephony.Rlog: boolean isLoggable(java.lang.String,int)> -> _SOURCE_
<android.hardware.radio.RadioManager$ModuleProperties: android.hardware.radio.RadioManager$BandDescriptor[] getBands()> -> _SOURCE_
<com.android.internal.telephony.euicc.IAuthenticateServerCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.content.pm.SharedLibraryInfo: long getLongVersion()> -> _SOURCE_
<android.hardware.face.IFaceService$Stub$Proxy: java.util.List getEnrolledFaces(int,java.lang.String)> -> _SOURCE_
<android.telephony.PhoneNumberUtils: boolean isReallyDialable(char)> -> _SOURCE_
<android.webkit.WebViewFactory: android.content.pm.PackageInfo getLoadedPackageInfo()> -> _SOURCE_
<android.telephony.CellIdentityCdma: android.telephony.CellIdentity sanitizeLocationInfo()> -> _SOURCE_
<android.media.AudioManager: boolean isWiredHeadsetOn()> -> _SOURCE_
<android.content.pm.ApplicationInfo: java.lang.String[] getSplitResourcePaths()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isVolteAvailable()> -> _SOURCE_
<android.hardware.camera2.CameraCharacteristics: java.util.List getAvailableSessionKeys()> -> _SOURCE_
<android.os.DropBoxManager$Entry: long getTimeMillis()> -> _SOURCE_
<com.android.internal.appwidget.IAppWidgetHost$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.lang.String getContentCaptureServicePackageName()> -> _SOURCE_
<android.media.AudioDeviceInfo: int[] getChannelIndexMasks()> -> _SOURCE_
<android.view.autofill.AutofillPopupWindow$2: android.os.IBinder getWindowToken()> -> _SOURCE_
<android.app.LoaderManager: android.app.FragmentHostCallback getFragmentHostCallback()> -> _SOURCE_
<android.app.Notification: java.lang.String getShortcutId()> -> _SOURCE_
<android.text.style.TextAppearanceSpan: android.os.LocaleList getTextLocales()> -> _SOURCE_
<com.android.internal.util.MemInfoReader: long getKernelUsedSize()> -> _SOURCE_
<android.telephony.SmsCbEtwsInfo: long getPrimaryNotificationTimestamp()> -> _SOURCE_
<android.app.backup.IBackupManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.webkit.IWebViewUpdateService$Stub: java.lang.String getTransactionName(int)> -> _SOURCE_
<android.security.net.config.ApplicationConfig: javax.net.ssl.X509TrustManager getTrustManager()> -> _SOURCE_
<android.net.lowpan.LowpanChannelInfo: android.net.lowpan.LowpanChannelInfo getChannelInfoForIeee802154Page0(int)> -> _SOURCE_
<android.security.keystore.AndroidKeyStoreECPublicKey: java.security.spec.ECParameterSpec getParams()> -> _SOURCE_
<android.app.VoiceInteractor$CompleteVoiceRequest: java.lang.String getRequestTypeName()> -> _SOURCE_
<android.hardware.display.Curve: float[] getX()> -> _SOURCE_
<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getHighSpeedVideoSizes()> -> _SOURCE_
<android.view.ViewRootImpl: android.os.IBinder getInputToken()> -> _SOURCE_
<com.android.internal.telephony.euicc.IRemoveNotificationFromListCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.hardware.camera2.CameraCharacteristics: java.lang.Class getKeyClass()> -> _SOURCE_
<android.view.ViewRootInsetsControllerHost: java.lang.String getRootViewTitle()> -> _SOURCE_
<android.telephony.PhoneNumberUtils: boolean isPotentialEmergencyNumber(java.lang.String,java.lang.String)> -> _SOURCE_
<android.view.ViewConfiguration: float getScrollFriction()> -> _SOURCE_
<android.telephony.TelephonyManager$MultiSimVariants: android.telephony.TelephonyManager$MultiSimVariants[] values()> -> _SOURCE_
<android.bluetooth.IBluetoothPbap$Stub$Proxy: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
<android.view.IDisplayWindowInsetsController$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.view.textclassifier.SelectionEvent: java.lang.String getPackageName()> -> _SOURCE_
<android.media.IMediaHTTPConnection$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.view.ContextThemeWrapper: android.content.res.AssetManager getAssets()> -> _SOURCE_
<android.graphics.ParcelableColorSpace: android.graphics.ColorSpace getColorSpace()> -> _SOURCE_
<android.content.ContentResolver: boolean isSyncPendingAsUser(android.accounts.Account,java.lang.String,int)> -> _SOURCE_
<android.location.IGnssStatusListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.nfc.INfcAdapter$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.os.strictmode.InstanceCountViolation: long getNumberOfInstances()> -> _SOURCE_
<android.net.CaptivePortalData: long getRefreshTimeMillis()> -> _SOURCE_
<android.hardware.display.WifiDisplaySessionInfo: java.lang.String getGroupId()> -> _SOURCE_
<android.security.net.config.RootTrustManager: java.security.cert.X509Certificate[] getAcceptedIssuers()> -> _SOURCE_
<android.hardware.radio.RadioManager$FmBandConfig: boolean getRds()> -> _SOURCE_
<android.graphics.drawable.GradientDrawable: boolean getUseLevel()> -> _SOURCE_
<android.media.AudioDeviceInfo: int[] getEncodings()> -> _SOURCE_
<android.hardware.display.DeviceProductInfo: java.lang.String getName()> -> _SOURCE_
<android.content.pm.PackageInstaller$SessionInfo: long getSize()> -> _SOURCE_
<android.media.session.ISession$Stub: android.media.session.ISession getDefaultImpl()> -> _SOURCE_
<android.app.Activity: boolean isTaskRoot()> -> _SOURCE_
<android.renderscript.Matrix2f: float[] getArray()> -> _SOURCE_
<android.security.keystore.recovery.KeyChainProtectionParams: byte[] getSecret()> -> _SOURCE_
<android.media.tv.TvTrackInfo: java.lang.CharSequence getDescription()> -> _SOURCE_
<android.app.WallpaperManager: android.graphics.drawable.Drawable getBuiltInDrawable(int)> -> _SOURCE_
<android.app.ApplicationPackageManager: android.content.Intent getCarLaunchIntentForPackage(java.lang.String)> -> _SOURCE_
<com.android.server.SystemConfig: android.util.ArrayMap getAndClearPackageToUserTypeBlacklist()> -> _SOURCE_
<android.view.ViewRootImpl: android.view.WindowLeaked getLocation()> -> _SOURCE_
<android.telephony.SignalStrength: int getEvdoSnr()> -> _SOURCE_
<android.animation.Keyframe: android.animation.TimeInterpolator getInterpolator()> -> _SOURCE_
<android.permission.IPermissionManager$Default: java.util.List getAutoRevokeExemptionGrantedPackages(int)> -> _SOURCE_
<android.net.INetworkStatsSession$Stub$Proxy: android.net.NetworkStatsHistory getHistoryForNetwork(android.net.NetworkTemplate,int)> -> _SOURCE_
<android.media.session.IOnMediaKeyEventSessionChangedListener$Stub: android.media.session.IOnMediaKeyEventSessionChangedListener getDefaultImpl()> -> _SOURCE_
<android.os.IIncidentCompanion$Default: java.util.List getPendingReports()> -> _SOURCE_
<android.hardware.camera2.ICameraDeviceCallbacks$Stub: android.hardware.camera2.ICameraDeviceCallbacks getDefaultImpl()> -> _SOURCE_
<android.database.sqlite.SQLiteGlobal: java.lang.String getDefaultJournalMode()> -> _SOURCE_
<com.android.internal.telephony.ISub$Stub: com.android.internal.telephony.ISub asInterface(android.os.IBinder)> -> _SOURCE_
<android.media.RoutingSessionInfo: java.lang.String getOwnerPackageName()> -> _SOURCE_
<android.animation.ObjectAnimator: java.lang.Object getTarget()> -> _SOURCE_
<android.telephony.SubscriptionPlan: java.lang.CharSequence getSummary()> -> _SOURCE_
<android.media.audiopolicy.AudioMix: java.lang.String getRegistration()> -> _SOURCE_
<android.net.wifi.nl80211.IApInterfaceEventCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Default: java.lang.String getDeviceSvnUsingSubId(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.app.DownloadManager: long getActiveNetworkWarningBytes(android.content.Context)> -> _SOURCE_
<android.telephony.ClosedSubscriberGroupInfo$1: android.telephony.ClosedSubscriberGroupInfo createFromParcel(android.os.Parcel)> -> _SOURCE_
<com.android.internal.content.om.OverlayConfig: java.util.ArrayList getImmutableFrameworkOverlayIdmapInvocations()> -> _SOURCE_
<android.media.AudioDeviceInfo: android.media.AudioDevicePort getPort()> -> _SOURCE_
<android.telephony.CellIdentityLte: int getMcc()> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Default: java.lang.String getDeviceIdWithFeature(java.lang.String,java.lang.String)> -> _SOURCE_
<android.service.persistentdata.IPersistentDataBlockService$Stub$Proxy: long getMaximumDataBlockSize()> -> _SOURCE_
<com.android.internal.graphics.palette.Palette: com.android.internal.graphics.palette.Palette$Swatch getMutedSwatch()> -> _SOURCE_
<android.content.ContextWrapper: java.lang.String getAttributionTag()> -> _SOURCE_
<android.telephony.SmsCbMessage: long getReceivedTime()> -> _SOURCE_
<android.print.PrintJobInfo: android.print.PageRange[] getPages()> -> _SOURCE_
<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getActivityLogo(android.content.Intent)> -> _SOURCE_
<android.os.IUserManager$Stub$Proxy: java.lang.String getUserName()> -> _SOURCE_
<android.telephony.CellInfoWcdma: java.lang.String toString()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<com.android.internal.util.SyncResultReceiver: java.lang.String[] getStringArrayResult()> -> _SOURCE_
<android.app.ISearchManager$Stub$Proxy: java.util.List getGlobalSearchActivities()> -> _SOURCE_
<android.security.net.config.NetworkSecurityConfig: android.security.net.config.PinSet getPins()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: android.telephony.ServiceState getServiceStateForSubscriber(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureRequest getRequest()> -> _SOURCE_
<android.net.TrafficStats: long getRxBytes(java.lang.String)> -> _SOURCE_
<com.android.internal.widget.ICheckCredentialProgressCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.hardware.Sensor: float getPower()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.os.UserManager: java.util.List getEnabledProfiles(int)> -> _SOURCE_
<android.telephony.ImsiEncryptionInfo: java.lang.String getKeyIdentifier()> -> _SOURCE_
<android.app.ActivityManager: boolean isLowRamDevice()> -> _SOURCE_
<android.net.NetworkIdentity: boolean getRoaming()> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: float getMinAspectRatio()> -> _SOURCE_
<android.app.AppOpsManager: java.lang.String getFlagName(int)> -> _SOURCE_
<android.app.prediction.AppPredictor: android.app.prediction.AppPredictionSessionId getSessionId()> -> _SOURCE_
<android.hardware.radio.TunerAdapter: android.hardware.radio.ProgramList getDynamicProgramList(android.hardware.radio.ProgramList$Filter)> -> _SOURCE_
<android.telephony.ServiceState: int getCdmaNetworkId()> -> _SOURCE_
<com.android.internal.content.om._$$Lambda$TnMimLdK_xwmEZLrRzFg7LG1Yfg: java.lang.Object get()> -> _SOURCE_
<android.webkit.JsPromptResult: java.lang.String getStringResult()> -> _SOURCE_
<android.app.servertransaction.ClientTransaction: android.app.servertransaction.ActivityLifecycleItem getLifecycleStateRequest()> -> _SOURCE_
<android.telephony.CallQuality: int getNumRtpPacketsTransmitted()> -> _SOURCE_
<android.bluetooth.BluetoothHidDevice: java.lang.String getUserAppName()> -> _SOURCE_
<android.net.ConnectivityManager: boolean isAlwaysOnVpnPackageSupportedForUser(int,java.lang.String)> -> _SOURCE_
<android.view.textclassifier.ConversationActions$Message: android.os.Bundle getExtras()> -> _SOURCE_
<android.view.FrameStats: long getEndTimeNano()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.CharSequence getLongSupportMessageForUser(android.content.ComponentName,int)> -> _SOURCE_
<com.android.internal.telephony.euicc.IResetMemoryCallback$Stub: com.android.internal.telephony.euicc.IResetMemoryCallback getDefaultImpl()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isProfileActivePasswordSufficientForParent(int)> -> _SOURCE_
<android.bluetooth.IBluetoothProfileServiceConnection$Stub: android.bluetooth.IBluetoothProfileServiceConnection getDefaultImpl()> -> _SOURCE_
<android.animation.Animator: java.util.ArrayList getListeners()> -> _SOURCE_
<android.content.res.FontResourcesParser$FontFileResourceEntry: java.lang.String getFileName()> -> _SOURCE_
<android.telephony.SubscriptionManager: boolean isNetworkRoaming(int)> -> _SOURCE_
<android.telephony.SignalStrength: int getAsuLevel()> -> _SOURCE_
<android.telephony.TelephonyManager: int getSimApplicationState(int)> -> _SOURCE_
<android.view.ViewGroup: boolean getClipToPadding()> -> _SOURCE_
<android.net.lowpan.ILowpanManagerListener$Stub: android.net.lowpan.ILowpanManagerListener getDefaultImpl()> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getSubscriberIdWithFeature(java.lang.String,java.lang.String)> -> _SOURCE_
<android.telephony.SignalStrength: int getGsmSignalStrength()> -> _SOURCE_
<com.android.internal.app.ISoundTriggerService$Stub$Proxy: android.hardware.soundtrigger.SoundTrigger$ModelParamRange queryParameter(android.os.ParcelUuid,int)> -> _SOURCE_
<android.os.IThermalStatusListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.ims.aidl.IImsMmTelFeature$Default: java.lang.String getSmsFormat()> -> _SOURCE_
<android.media.RingtoneManager: android.net.Uri getValidRingtoneUri(android.content.Context)> -> _SOURCE_
<android.service.persistentdata.PersistentDataBlockManager: boolean getOemUnlockEnabled()> -> _SOURCE_
<android.animation.StateListAnimator$Tuple: int[] getSpecs()> -> _SOURCE_
<android.os.WorkSource: java.util.List getWorkChains()> -> _SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkState[] getAllNetworkState()> -> _SOURCE_
<android.telephony.TelephonyManager: android.telephony.ImsiEncryptionInfo getCarrierInfoForImsiEncryption(int)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub: java.lang.String getTransactionName(int)> -> _SOURCE_
<android.app.IActivityTaskManager$Stub$Proxy: android.window.IWindowOrganizerController getWindowOrganizerController()> -> _SOURCE_
<android.view.contentcapture.ViewNode$ViewStructureImpl: android.os.Bundle getExtras()> -> _SOURCE_
<android.content.pm.ShortcutInfo: java.lang.String getIconResName()> -> _SOURCE_
<android.util.jar.StrictJarManifest: java.util.jar.Attributes getAttributes(java.lang.String)> -> _SOURCE_
<android.app.DownloadManager$Query: android.database.Cursor runQuery(android.content.ContentResolver,java.lang.String[],android.net.Uri)> -> _SOURCE_
<android.os.Message: android.os.Handler getTarget()> -> _SOURCE_
<android.os.TelephonyServiceManager: android.os.TelephonyServiceManager$ServiceRegisterer getSmsServiceRegisterer()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getDisallowedSystemApps(android.content.ComponentName,int,java.lang.String)> -> _SOURCE_
<android.graphics.drawable.Drawable: android.graphics.Rect getBounds()> -> _SOURCE_
<android.telephony.AccessNetworkUtils: int getDuplexModeForEutranBand(int)> -> _SOURCE_
<android.telephony.NetworkRegistrationInfo: boolean isRoaming()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: boolean isUserDataEnabled(int)> -> _SOURCE_
<android.bluetooth.BluetoothSap: android.bluetooth.BluetoothDevice getClient()> -> _SOURCE_
<android.widget.inline.InlinePresentationSpec: android.util.Size getMaxSize()> -> _SOURCE_
<android.net.wifi.nl80211.IWificond$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.internal.telephony.IOns$Stub$Proxy: boolean isEnabled(java.lang.String)> -> _SOURCE_
<android.os.UserManager: boolean isGuestUser()> -> _SOURCE_
<android.location.LocationManager: android.location.GnssCapabilities getGnssCapabilities()> -> _SOURCE_
<android.graphics.drawable.shapes.Shape: float getWidth()> -> _SOURCE_
<android.os.BatteryManager: long computeChargeTimeRemaining()> -> _SOURCE_
<android.window.IWindowOrganizerController$Default: android.window.IDisplayAreaOrganizerController getDisplayAreaOrganizerController()> -> _SOURCE_
<android.media.IAudioRoutesObserver$Stub: android.media.IAudioRoutesObserver getDefaultImpl()> -> _SOURCE_
<com.android.internal.widget.ILockSettings$Stub$Proxy: int[] getRecoverySecretTypes()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean getCameraDisabled(android.content.ComponentName)> -> _SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: android.net.LinkProperties getLinkProperties(android.net.Network)> -> _SOURCE_
<android.telephony.mbms.ServiceInfo: java.util.Date getSessionEndTime()> -> _SOURCE_
<android.net.netstats.provider.INetworkStatsProvider$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.Activity: android.media.session.MediaController getMediaController()> -> _SOURCE_
<android.net.LocalSocket: java.io.InputStream getInputStream()> -> _SOURCE_
<android.telephony.CellIdentity: int getChannelNumber()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Default: java.util.List getDisallowedSystemApps(android.content.ComponentName,int,java.lang.String)> -> _SOURCE_
<android.telephony.CellInfoCdma: android.telephony.CellSignalStrengthCdma getCellSignalStrength()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.renderscript.Allocation: long getTimeStamp()> -> _SOURCE_
<android.content.pm.SigningInfo: android.content.pm.Signature[] getSigningCertificateHistory()> -> _SOURCE_
<android.view.textclassifier.TextSelection: android.os.Bundle getExtras()> -> _SOURCE_
<android.telephony.SmsMessage: java.lang.String getEmailBody()> -> _SOURCE_
<android.nfc.INfcAdapter$Stub: android.nfc.INfcAdapter getDefaultImpl()> -> _SOURCE_
<com.android.internal.widget.ILockSettings$Stub$Proxy: android.security.keystore.recovery.KeyChainSnapshot getKeyChainSnapshot()> -> _SOURCE_
<android.app.DisabledWallpaperManager: android.os.ParcelFileDescriptor getWallpaperFile(int)> -> _SOURCE_
<com.android.internal.textservice.ISpellCheckerSessionListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.media.tv.TvTrackInfo: android.os.Bundle getExtra()> -> _SOURCE_
<android.graphics.Canvas: javax.microedition.khronos.opengles.GL getGL()> -> _SOURCE_
<android.location.GnssMeasurement: double getCarrierPhase()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: java.lang.String[] getMobileIfaces()> -> _SOURCE_
<android.hardware.cas.V1_0.ICas$Stub: java.util.ArrayList getHashChain()> -> _SOURCE_
<android.media.SubtitleData: long getStartTimeUs()> -> _SOURCE_
<android.view.autofill.AutofillPopupWindow: android.view.View getContentView()> -> _SOURCE_
<android.webkit.WebSettings: boolean getUseDoubleTree()> -> _SOURCE_
<android.telephony.SmsMessage: android.telephony.SmsMessage$SubmitPdu getSmsPdu(int,int,java.lang.String,java.lang.String,java.lang.String,long)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.location.GnssMeasurement: double getSatelliteInterSignalBiasUncertaintyNanos()> -> _SOURCE_
<android.hardware.camera2.impl.RequestLastFrameNumbersHolder: long getLastReprocessFrameNumber()> -> _SOURCE_
<android.net.TrafficStats: long getUidTcpTxSegments(int)> -> _SOURCE_
<android.bluetooth.le.AdvertiseData: java.util.List getServiceUuids()> -> _SOURCE_
<com.android.internal.view.menu.SubMenuBuilder: android.view.Menu getParentMenu()> -> _SOURCE_
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice getSystemAvailableFeatures()> -> _SOURCE_
<android.app.EnterTransitionCoordinator: android.transition.Transition getEnterViewsTransition()> -> _SOURCE_
<android.telephony.ServiceState: boolean isSearching()> -> _SOURCE_
<android.net.lowpan.LowpanProvision: android.net.lowpan.LowpanCredential getLowpanCredential()> -> _SOURCE_
<android.accounts.IAccountManager$Stub$Proxy: android.accounts.Account[] getAccountsByTypeForPackage(java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.hardware.cas.V1_0.ICas$Proxy: java.util.ArrayList getHashChain()> -> _SOURCE_
<android.location.LocationManager: java.util.List getTestProviderCurrentRequests(java.lang.String)> -> _SOURCE_
<android.app.IStopUserCallback$Stub: android.app.IStopUserCallback getDefaultImpl()> -> _SOURCE_
<android.app.INotificationManager$Stub$Proxy: android.service.notification.StatusBarNotification[] getActiveNotificationsWithAttribution(java.lang.String,java.lang.String)> -> _SOURCE_
<android.net.NetworkIdentity: java.lang.String getSubscriberId()> -> _SOURCE_
<android.telephony.ServiceState: int getCdmaEriIconMode()> -> _SOURCE_
<android.net.wifi.nl80211.WifiNl80211Manager: android.net.wifi.nl80211.DeviceWiphyCapabilities getDeviceWiphyCapabilities(java.lang.String)> -> _SOURCE_
<android.os.Debug: java.lang.String getCallers(int)> -> _SOURCE_
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.CharSequence getHarmfulAppWarning(java.lang.String,int)> -> _SOURCE_
<android.app.ApplicationPackageManager: android.content.pm.ProviderInfo getProviderInfo(android.content.ComponentName,int)> -> _SOURCE_
<android.view.SurfaceControl$ScreenshotGraphicBuffer: android.graphics.ColorSpace getColorSpace()> -> _SOURCE_
<android.app.PendingIntent: android.content.IIntentSender getTarget()> -> _SOURCE_
<com.android.internal.telephony.SmsApplication$SmsApplicationData: java.lang.String access$200(com.android.internal.telephony.SmsApplication$SmsApplicationData)> -> _SOURCE_
<android.media.AudioManager: boolean isHapticPlaybackSupported()> -> _SOURCE_
<android.media.Image: android.graphics.Rect getCropRect()> -> _SOURCE_
<android.hardware.camera2.legacy.RequestThreadManager: int getAudioRestriction()> -> _SOURCE_
<android.app.IActivityTaskManager$Stub$Proxy: android.graphics.Rect getTaskBounds(int)> -> _SOURCE_
<android.telephony.SmsCbLocation: int hashCode()> -> _SOURCE_
<android.media.session.ISessionController$Stub: android.media.session.ISessionController getDefaultImpl()> -> _SOURCE_
<android.bluetooth.IBluetoothHeadsetClient$Default: java.util.List getCurrentCalls(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<android.os.image.IDynamicSystemService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.net.Uri$StringUri: java.lang.String getSchemeSpecificPart()> -> _SOURCE_
<android.media.tv.tunerresourcemanager.IResourcesReclaimListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.accounts.AccountManager: android.accounts.Account[] getAccountsByType(java.lang.String)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.view.animation.Animation: boolean getFillAfter()> -> _SOURCE_
<android.app.RemoteInput: java.lang.String getResultKey()> -> _SOURCE_
<android.app.backup.ISelectBackupTransportCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.util.apk.WrappedX509Certificate: java.util.Set getCriticalExtensionOIDs()> -> _SOURCE_
<android.window.WindowContainerTransaction$Change: android.content.res.Configuration getConfiguration()> -> _SOURCE_
<android.view.ViewConfiguration: int getHoverTooltipHideShortTimeout()> -> _SOURCE_
<android.telephony.TelephonyManager: android.telephony.PinResult supplyPukReportPinResult(java.lang.String,java.lang.String)> -> _SOURCE_
<android.app.ActionBar: android.content.Context getThemedContext()> -> _SOURCE_
<android.media.MediaCodec$MediaImage: long getTimestamp()> -> _SOURCE_
<android.hardware.radio.RadioManager$ModuleProperties: java.util.Map getVendorInfo()> -> _SOURCE_
<android.content.pm.parsing.component.ParsedActivity: java.lang.Float getMaxAspectRatio()> -> _SOURCE_
<android.media.MediaRouter$RouteInfo: android.media.MediaRouter$RouteGroup getGroup()> -> _SOURCE_
<android.content.pm.IPackageManager$Stub$Proxy: byte[] getIntentFilterVerificationBackup(int)> -> _SOURCE_
<com.android.internal.graphics.palette.Palette: com.android.internal.graphics.palette.Palette$Swatch getSwatchForTarget(com.android.internal.graphics.palette.Target)> -> _SOURCE_
<android.view.LayoutInflater: android.view.LayoutInflater$Factory getFactory()> -> _SOURCE_
<android.view.contentcapture.ViewNode: java.lang.String getHintIdEntry()> -> _SOURCE_
<android.media.MediaRecorder: android.os.PersistableBundle getMetrics()> -> _SOURCE_
<android.security.keystore.IKeystoreKeyCharacteristicsCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telephony.euicc.EuiccManager: android.telephony.euicc.EuiccInfo getEuiccInfo()> -> _SOURCE_
<android.media.tv.TvInputInfo$TvInputSettings: java.util.Map getCustomLabels(android.content.Context,int)> -> _SOURCE_
<android.telephony.TelephonyHistogram: java.lang.String toString()> -> _SOURCE_
<android.database.CursorWrapper: boolean isFirst()> -> _SOURCE_
<android.webkit.Plugin: java.lang.String getName()> -> _SOURCE_
<android.app.IProcessObserver$Stub: android.app.IProcessObserver getDefaultImpl()> -> _SOURCE_
<android.os.IUpdateEngine$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.os.IClientCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getStateDescription()> -> _SOURCE_
<android.media.tv.ITvInputManager$Default: java.util.List getBlockedRatings(int)> -> _SOURCE_
<android.telephony.NetworkRegistrationInfo: int getRejectCause()> -> _SOURCE_
<android.widget.Spinner$DialogPopup: java.lang.CharSequence getHintText()> -> _SOURCE_
<android.location.LocationRequest: long getExpireIn()> -> _SOURCE_
<android.webkit.PluginList: java.util.List getList()> -> _SOURCE_
<android.net.LinkAddress: long getDeprecationTime()> -> _SOURCE_
<android.content.ContextWrapper: java.io.File getFilesDir()> -> _SOURCE_
<android.view.accessibility.AccessibilityWindowInfo: android.view.accessibility.AccessibilityWindowInfo getParent()> -> _SOURCE_
<android.os.StatFs: long getFreeBytes()> -> _SOURCE_
<android.accounts.AccountManager$AmsTask: android.os.Bundle getResult()> -> _SOURCE_
<android.media.session.MediaController: android.os.Bundle getSessionInfo()> -> _SOURCE_
<android.bluetooth.le.ScanFilter: byte[] getManufacturerDataMask()> -> _SOURCE_
<android.media.session.MediaSessionManager: boolean isGlobalPriorityActive()> -> _SOURCE_
<android.app.TaskInfo: android.content.res.Configuration getConfiguration()> -> _SOURCE_
<android.view.contentcapture.DataShareRequest: java.lang.String getMimeType()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean getEmergencyCallbackMode(int)> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: android.telephony.ImsiEncryptionInfo getCarrierInfoForImsiEncryption(int,int,java.lang.String)> -> _SOURCE_
<android.hardware.display.ColorDisplayManager: boolean isDisplayWhiteBalanceEnabled()> -> _SOURCE_
<android.hardware.cas.V1_0.ICasListener$Stub: java.util.ArrayList getHashChain()> -> _SOURCE_
<android.net.ProxyInfo: java.net.InetSocketAddress getSocketAddress()> -> _SOURCE_
<android.app.KeyguardManager: boolean isDeviceLocked(int)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.lang.String getImeiForSlot(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.net.lowpan.ILowpanInterfaceListener$Stub: android.net.lowpan.ILowpanInterfaceListener getDefaultImpl()> -> _SOURCE_
<android.hardware.usb.UsbManager: long getCurrentFunctions()> -> _SOURCE_
<android.app.backup.BackupManager: android.app.backup.RestoreSession beginRestoreSession()> -> _SOURCE_
<android.bluetooth.BluetoothHeadsetClientCall: java.util.UUID getUUID()> -> _SOURCE_
<android.telephony.ims.aidl.IImsRcsController$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isAccessibilityServicePermittedByAdmin(android.content.ComponentName,java.lang.String,int)> -> _SOURCE_
<android.net.ConnectivityManager: java.lang.String getMobileProvisioningUrl()> -> _SOURCE_
<android.telephony.CellSignalStrengthGsm: boolean isValid()> -> _SOURCE_
<android.hardware.camera2.impl.CameraDeviceImpl: android.hardware.camera2.impl.CameraDeviceImpl$CameraDeviceCallbacks getCallbacks()> -> _SOURCE_
<android.service.oemlock.OemLockManager: java.lang.String getLockName()> -> _SOURCE_
<android.net.TrafficStats: long getUidRxBytes(int)> -> _SOURCE_
<android.content.pm.ShortcutManager: java.util.List getManifestShortcuts()> -> _SOURCE_
<android.view.ViewRootInsetsControllerHost: android.os.Handler getHandler()> -> _SOURCE_
<android.view.ContextThemeWrapper: android.content.res.Configuration getOverrideConfiguration()> -> _SOURCE_
<com.android.internal.telephony.euicc.IGetProfileCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.internal.telephony.OperatorInfo: com.android.internal.telephony.OperatorInfo$State getState()> -> _SOURCE_
<android.content.ContentProviderClient: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SOURCE_
<android.hardware.display.DisplayManagerGlobal: android.hardware.display.DisplayManagerGlobal getInstance()> -> _SOURCE_
<android.media.CamcorderProfile: android.media.CamcorderProfile get(int,int)> -> _SOURCE_
<android.app.slice.SliceItem: android.graphics.drawable.Icon getIcon()> -> _SOURCE_
<com.android.server.SystemConfig: android.util.ArraySet getAllowIgnoreLocationSettings()> -> _SOURCE_
<android.media.MediaMetadataRetriever: byte[] getEmbeddedPicture()> -> _SOURCE_
<android.graphics.drawable.VectorDrawable$VGroup: float getPivotX()> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: java.lang.String getStaticSharedLibName()> -> _SOURCE_
<android.view.DisplayCutout: android.graphics.Rect[] getBoundingRectsAll()> -> _SOURCE_
<android.app.LoadedApk: java.lang.String getResDir()> -> _SOURCE_
<android.security.IFileIntegrityService$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.media.VolumeShaper$State: float getXOffset()> -> _SOURCE_
<android.content.pm.Signature: java.lang.String toCharsString()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getCalculatedPreferredNetworkType(java.lang.String,java.lang.String)> -> _SOURCE_
<android.view.Display: android.view.Display$Mode[] getSupportedModes()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: long getAllowedNetworkTypes(int)> -> _SOURCE_
<com.android.internal.app.IAppOpsNotedCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.media.MediaDescription: java.lang.CharSequence getTitle()> -> _SOURCE_
<android.app.prediction.IPredictionCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.VoiceInteractor$PickOptionRequest$Option: android.os.Bundle getExtras()> -> _SOURCE_
<android.app.NotificationManager: android.app.AutomaticZenRule getAutomaticZenRule(java.lang.String)> -> _SOURCE_
<com.android.net.IProxyService$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.location.LocationManager: boolean isLocationEnabled()> -> _SOURCE_
<android.app.DisabledWallpaperManager: int getDesiredMinimumWidth()> -> _SOURCE_
<android.app.ActivityManager: android.content.pm.ConfigurationInfo getDeviceConfigurationInfo()> -> _SOURCE_
<android.bluetooth.BluetoothDevice: android.bluetooth.IBluetooth getService()> -> _SOURCE_
<android.permission.IOnPermissionsChangeListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.ims.internal.IImsVideoCallCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.os.IMessenger$Stub: android.os.IMessenger getDefaultImpl()> -> _SOURCE_
<android.database.CursorWrapper: java.lang.String getColumnName(int)> -> _SOURCE_
<com.android.internal.telephony.ISms$Default: int getPremiumSmsPermissionForSubscriber(int,java.lang.String)> -> _SOURCE_
<android.nfc.INfcCardEmulation$Stub$Proxy: android.nfc.cardemulation.AidGroup getAidGroupForService(int,android.content.ComponentName,java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.cdma.SmsMessage: com.android.internal.telephony.cdma.SmsMessage$SubmitPdu getDeliverPdu(java.lang.String,java.lang.String,long)> -> _SOURCE_
<android.hardware.usb.UsbDevice: java.lang.String getDeviceName()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.security.keystore.IKeystoreCertificateChainCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.bluetooth.BluetoothGatt: java.util.List getConnectedDevices()> -> _SOURCE_
<android.os.HardwarePropertiesManager: float[] getDeviceTemperatures(int,int)> -> _SOURCE_
<android.app.contentsuggestions.ISelectionsCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl: boolean isAborting()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.CharSequence getOrganizationNameForUser(int)> -> _SOURCE_
<android.content.res.ResourcesImpl: java.lang.String getLastResourceResolution()> -> _SOURCE_
<android.hardware.display.DisplayedContentSample: long getNumFrames()> -> _SOURCE_
<android.app.VoiceInteractor$PickOptionRequest: java.lang.String getRequestTypeName()> -> _SOURCE_
<android.view.accessibility.AccessibilityRecord: long getSourceNodeId()> -> _SOURCE_
<android.telephony.PinResult: java.lang.String toString()> -> _SOURCE_
<android.content.BroadcastReceiver: android.os.UserHandle getSendingUser()> -> _SOURCE_
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String getIncidentReportApproverPackageName()> -> _SOURCE_
<android.content.pm.IPackageInstallerSession$Default: java.lang.String[] getNames()> -> _SOURCE_
<android.os.Message: android.os.Bundle getData()> -> _SOURCE_
<android.location.LocationManager: java.util.List getAllProviders()> -> _SOURCE_
<android.graphics.drawable.ShapeDrawable: android.graphics.Paint getPaint()> -> _SOURCE_
<android.app.WallpaperInfo: boolean getShowMetadataInPreview()> -> _SOURCE_
<android.bluetooth.IBluetooth$Stub: android.bluetooth.IBluetooth getDefaultImpl()> -> _SOURCE_
<android.app.AppOpsManager$OpEntry: java.lang.String getOpStr()> -> _SOURCE_
<android.os.AsyncTask: java.lang.Object get()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Default: java.util.List getOverrideApns(android.content.ComponentName)> -> _SOURCE_
<com.android.internal.telecom.ITelecomService$Stub$Proxy: android.telecom.PhoneAccount getPhoneAccount(android.telecom.PhoneAccountHandle)> -> _SOURCE_
<android.telephony.euicc.EuiccManager: java.util.List getUnsupportedCountries()> -> _SOURCE_
<android.service.autofill.FillEventHistory$Event: java.util.Set getIgnoredDatasetIds()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: int getPermissionPolicy(android.content.ComponentName)> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.String[] getAccountTypesWithManagementDisabledAsUser(int,boolean)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: long forceNetworkLogs()> -> _SOURCE_
<android.content.res.AssetManager: java.lang.String[] getApkPaths()> -> _SOURCE_
<android.net.INetworkStatsSession$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.app.IAppOpsAsyncNotedCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.contentsuggestions.IContentSuggestionsManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.content.ContentProvider$Transport: android.content.ContentProvider getContentProvider()> -> _SOURCE_
<android.location.Location: float getBearing()> -> _SOURCE_
<android.hardware.hdmi.HdmiControlManager: java.util.List getConnectedDevices()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.bluetooth.le.ScanFilter: android.os.ParcelUuid getServiceUuidMask()> -> _SOURCE_
<android.hardware.display.ColorDisplayManager$ColorDisplayManagerInternal: android.hardware.display.Time getNightDisplayCustomEndTime()> -> _SOURCE_
<android.app.ContextImpl: android.os.Looper getMainLooper()> -> _SOURCE_
<android.os.IVoldListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.net.INetworkPolicyManager$Stub: android.net.INetworkPolicyManager getDefaultImpl()> -> _SOURCE_
<android.os.image.DynamicSystemManager: boolean isInstalled()> -> _SOURCE_
<android.telephony.ServiceState: java.lang.String getOperatorAlphaShort()> -> _SOURCE_
<android.location.IGnssNavigationMessageListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.usage.UsageEvents$Event: java.lang.String getShortcutId()> -> _SOURCE_
<com.android.internal.telephony.IMms$Default: boolean deleteStoredMessage(java.lang.String,android.net.Uri)> -> _SOURCE_
<android.content.rollback.RollbackManager: java.util.List getRecentlyCommittedRollbacks()> -> _SOURCE_
<android.location.ILocationManager$Default: java.lang.String[] getIgnoreSettingsWhitelist()> -> _SOURCE_
<android.service.autofill.UserData: android.os.Bundle getDefaultFieldClassificationArgs()> -> _SOURCE_
<com.android.internal.telephony.ISub$Default: int getAllSubInfoCount(java.lang.String,java.lang.String)> -> _SOURCE_
<android.media.MediaRouter$Static: boolean isPlaybackActive()> -> _SOURCE_
<android.app.WallpaperManager$ColorManagementProxy: java.util.Set getSupportedColorSpaces()> -> _SOURCE_
<android.content.res.Resources: android.content.res.ConfigurationBoundResourceCache getStateListAnimatorCache()> -> _SOURCE_
<android.app.backup.IBackupManager$Stub$Proxy: java.lang.String getCurrentTransport()> -> _SOURCE_
<android.app.slice.SliceItem: java.lang.CharSequence getText()> -> _SOURCE_
<android.net.wifi.nl80211.ISendMgmtFrameEvent$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.hardware.camera2.params.MandatoryStreamCombination: java.util.List getStreamsInformation()> -> _SOURCE_
<com.android.internal.ml.clustering.KMeans$Mean: float[] getCentroid()> -> _SOURCE_
<android.view.textclassifier.TextLanguage$Request: android.os.Bundle getExtras()> -> _SOURCE_
<android.transition.Transition: long getStartDelay()> -> _SOURCE_
<android.os.BasicShellCommandHandler: java.lang.String getNextOption()> -> _SOURCE_
<android.text.Layout: java.lang.CharSequence getText()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getCrossProfileCalendarPackages(android.content.ComponentName)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.lang.String getVisualVoicemailPackageName(java.lang.String,java.lang.String,int)> -> _SOURCE_
<android.os.storage.IStorageManager$Stub$Proxy: java.lang.String getField(java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: android.telephony.CellIdentity getCellLocation(java.lang.String,java.lang.String)> -> _SOURCE_
<android.app.ApplicationPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)> -> _SOURCE_
<android.telephony.CellIdentityNr: android.telephony.CellIdentityNr createFromParcelBody(android.os.Parcel)> -> _SOURCE_
<android.net.TrafficStats: long getUidTxBytes(int)> -> _SOURCE_
<android.drm.DrmSupportInfo: java.lang.String getDescriprition()> -> _SOURCE_
<android.content.IContentService$Stub$Proxy: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String,android.content.ComponentName)> -> _SOURCE_
<android.text.method.ScrollingMovementMethod: android.text.method.MovementMethod getInstance()> -> _SOURCE_
<android.media.IRingtonePlayer$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.internal.telephony.euicc.IRetrieveNotificationCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.content.ContextWrapper: java.io.File getCacheDir()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: android.telephony.VisualVoicemailSmsFilterSettings getVisualVoicemailSmsFilterSettings(java.lang.String,int)> -> _SOURCE_
<android.hardware.hdmi.IHdmiControlStatusChangeListener$Stub: android.hardware.hdmi.IHdmiControlStatusChangeListener getDefaultImpl()> -> _SOURCE_
<android.bluetooth.le.ScanRecord: java.util.List getServiceSolicitationUuids()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getCdmaEriIconIndexForSubscriber(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.content.res.ResourcesImpl: android.view.DisplayAdjustments getDisplayAdjustments()> -> _SOURCE_
<android.telephony.CellSignalStrengthTdscdma: android.telephony.CellSignalStrength copy()> -> _SOURCE_
<android.text.PrecomputedText$Params: android.text.TextDirectionHeuristic getTextDirection()> -> _SOURCE_
<android.view.accessibility.AccessibilityManager: java.util.List getInstalledAccessibilityShortcutListAsUser(android.content.Context,int)> -> _SOURCE_
<android.app.servertransaction.TransactionExecutorHelper: android.app.servertransaction.ActivityLifecycleItem getLifecycleRequestForCurrentState(android.app.ActivityThread$ActivityClientRecord)> -> _SOURCE_
<android.content.pm.PackageInstaller$SessionInfo: android.net.Uri getOriginatingUri()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.util.Set getAllCrossProfilePackages()> -> _SOURCE_
<android.media.MediaCodecInfo: java.lang.String getName()> -> _SOURCE_
<android.app.INotificationManager$Stub$Proxy: android.service.notification.ZenModeConfig getZenModeConfig()> -> _SOURCE_
<android.inputmethodservice.InlineSuggestionSession: com.android.internal.view.InlineSuggestionsRequestInfo getRequestInfo()> -> _SOURCE_
<com.android.internal.telephony.SmsApplication$SmsApplicationData: java.lang.String access$502(com.android.internal.telephony.SmsApplication$SmsApplicationData,java.lang.String)> -> _SOURCE_
<android.content.ClipData: android.content.ClipDescription getDescription()> -> _SOURCE_
<android.location.GpsMeasurement: double getDopplerShiftInHz()> -> _SOURCE_
<android.net.StaticIpConfiguration: java.net.InetAddress getGateway()> -> _SOURCE_
<android.app._$$Lambda$AppOpsManager$HistoricalOp$HUOLFYs8TiaQIOXcrq6JzjxA6gs: java.lang.Object get()> -> _SOURCE_
<android.net.TrafficStats: long getUidTcpTxBytes(int)> -> _SOURCE_
<android.telephony.CarrierConfigManager$Apn: android.os.PersistableBundle access$000()> -> _SOURCE_
<com.android.internal.textservice.ISpellCheckerSession$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.database.CursorWrapper: byte[] getBlob(int)> -> _SOURCE_
<android.telephony.SignalStrength: int getCdmaDbm()> -> _SOURCE_
<android.telephony.ClosedSubscriberGroupInfo: boolean getCsgIndicator()> -> _SOURCE_
<android.view.contentcapture.IContentCaptureDirectManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telephony.SubscriptionManager: int getActiveDataSubscriptionId()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isWorldPhone()> -> _SOURCE_
<android.text.style.ScaleXSpan: float getScaleX()> -> _SOURCE_
<android.app.job.IJobCallback$Stub: android.app.job.IJobCallback getDefaultImpl()> -> _SOURCE_
<android.content.om.IOverlayManager$Stub$Proxy: java.lang.String[] getDefaultOverlayPackages()> -> _SOURCE_
<android.hardware.display.DisplayManagerGlobal: java.util.List getBrightnessEvents(java.lang.String)> -> _SOURCE_
<android.view.autofill.IAutofillWindowPresenter$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.SmsCbMessage: android.telephony.SmsCbEtwsInfo getEtwsWarningInfo()> -> _SOURCE_
<android.view.ViewPropertyAnimator: long getStartDelay()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.lang.String getPermissionControllerPackageName()> -> _SOURCE_
<com.android.internal.app.LocalePicker$LocaleInfo: java.lang.String getLabel()> -> _SOURCE_
<com.android.internal.statusbar.IStatusBarService$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: android.os.BatteryStats$ControllerActivityCounter getWifiControllerActivity()> -> _SOURCE_
<com.android.internal.telephony.SmsMessageBase: com.android.internal.telephony.SmsHeader getUserDataHeader()> -> _SOURCE_
<android.telephony.SubscriptionInfo: java.util.List getEhplmns()> -> _SOURCE_
<com.android.internal.app.IAppOpsActiveCallback$Stub: com.android.internal.app.IAppOpsActiveCallback getDefaultImpl()> -> _SOURCE_
<android.webkit.IWebViewUpdateService$Stub$Proxy: android.webkit.WebViewProviderInfo[] getAllWebViewPackages()> -> _SOURCE_
<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)> -> _SOURCE_
<android.telephony.SubscriptionInfo: boolean isOpportunistic()> -> _SOURCE_
<android.net.lowpan.ILowpanInterface$Default: java.lang.String[] getLinkAddresses()> -> _SOURCE_
<android.view.accessibility.AccessibilityManager: java.util.List getRequestPreparersForAccessibilityId(int)> -> _SOURCE_
<android.graphics.ImageDecoder$ImageInfo: android.graphics.ColorSpace getColorSpace()> -> _SOURCE_
<com.android.internal.telephony.ISub$Stub$Proxy: int getDefaultSubId()> -> _SOURCE_
<android.telephony.CellSignalStrengthLte: int getAsuLevel()> -> _SOURCE_
<android.app.role.RoleControllerManager: java.util.concurrent.CompletableFuture lambda$onClearRoleHolders$3(java.lang.String,int,android.app.role.IRoleController)> -> _SOURCE_
<android.app.ApplicationPackageManager: int getMoveStatus(int)> -> _SOURCE_
<android.telephony.PhoneNumberUtils: java.lang.String extractPostDialPortion(java.lang.String)> -> _SOURCE_
<android.app.prediction.AppPredictionContext: java.lang.String getPackageName()> -> _SOURCE_
<android.content.LoggingContentInterface: java.lang.String getType(android.net.Uri)> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec: java.lang.String getKeystoreAlias()> -> _SOURCE_
<com.android.internal.telecom.ITelecomService$Stub$Proxy: java.lang.String getSystemDialerPackage()> -> _SOURCE_
<android.graphics.Paint: android.graphics.Paint$Cap getStrokeCap()> -> _SOURCE_
<android.util.MapCollections: java.util.Collection getValues()> -> _SOURCE_
<android.widget.AbsSpinner: android.view.autofill.AutofillValue getAutofillValue()> -> _SOURCE_
<android.view.contentcapture.ContentCaptureHelper: int getDefaultLoggingLevel()> -> _SOURCE_
<android.hardware.usb.UsbDevice: int getDeviceProtocol()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.app.IActivityTaskManager$Default: java.util.List getAllStackInfosOnDisplay(int)> -> _SOURCE_
<android.telephony.ServiceState: int getDataRoamingType()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: int getDataNetworkTypeForSubscriber(int,java.lang.String,java.lang.String)> -> _SOURCE_
<com.android.internal.app.WindowDecorActionBar: android.app.ActionBar$Tab getSelectedTab()> -> _SOURCE_
<android.os.IDeviceIdleController$Default: int[] getAppIdTempWhitelist()> -> _SOURCE_
<android.location.LocationManager: android.location.GpsStatus getGpsStatus(android.location.GpsStatus)> -> _SOURCE_
<com.android.internal.telephony.SmsApplication$SmsApplicationData: java.lang.String access$100(com.android.internal.telephony.SmsApplication$SmsApplicationData)> -> _SOURCE_
<android.telephony.PreciseCallState: int getBackgroundCallState()> -> _SOURCE_
<android.app.IAppTask$Stub$Proxy: android.app.ActivityManager$RecentTaskInfo getTaskInfo()> -> _SOURCE_
<android.view.IDisplayWindowInsetsController$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.graphics.drawable.GradientDrawable: float getGradientRadius()> -> _SOURCE_
<android.content.ContentResolver: android.os.Bundle getCache(android.net.Uri)> -> _SOURCE_
<android.telephony.TelephonyManager: android.telephony.TelephonyManager$MultiSimVariants getMultiSimConfiguration()> -> _SOURCE_
<android.view.accessibility.IAccessibilityInteractionConnectionCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.data.ApnSetting: int getApnTypesBitmaskFromString(java.lang.String)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getBasebandVersionForPhone(int)> -> _SOURCE_
<android.webkit.WebViewZygote: java.lang.String getPackageName()> -> _SOURCE_
<android.view.Display: boolean isHdr()> -> _SOURCE_
<android.content.pm.parsing.component.ParsedActivity: java.lang.String getTargetActivity()> -> _SOURCE_
<android.hardware.hdmi.IHdmiControlService$Stub: android.hardware.hdmi.IHdmiControlService getDefaultImpl()> -> _SOURCE_
<com.android.internal.compat.CompatibilityChangeInfo: java.lang.String getName()> -> _SOURCE_
<android.telecom.TelecomAnalytics$SessionTiming: java.lang.Integer getKey()> -> _SOURCE_
<com.android.internal.telephony.ISub$Default: int getDefaultSmsSubId()> -> _SOURCE_
<android.os.storage.StorageManager: java.util.List getStorageVolumes()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: android.telephony.ims.aidl.IImsMmTelFeature getMmTelFeatureAndListen(int,com.android.ims.internal.IImsServiceFeatureCallback)> -> _SOURCE_
<android.app.RuntimeAppOpAccessMessage: java.lang.String getMessage()> -> _SOURCE_
<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getUserBadgeForDensity(android.os.UserHandle,int)> -> _SOURCE_
<android.view.accessibility.AccessibilityManager: boolean isAccessibilityButtonSupported()> -> _SOURCE_
<android.telephony.SmsCbMessage: int getSlotIndex()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: android.net.Uri getVoicemailRingtoneUri(android.telecom.PhoneAccountHandle)> -> _SOURCE_
<android.view.inputmethod.InlineSuggestionsRequest: android.os.LocaleList getSupportedLocales()> -> _SOURCE_
<android.app.IStopUserCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputContext getInputContext()> -> _SOURCE_
<android.app.backup.ISelectBackupTransportCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.hardware.cas.V1_1.IMediaCasService$Stub: android.internal.hidl.base.V1_0.DebugInfo getDebugInfo()> -> _SOURCE_
<android.media.tv.TvInputInfo$TvInputSettings: java.util.Set getHiddenTvInputIds(android.content.Context,int)> -> _SOURCE_
<android.telephony.SmsMessage: boolean isReplace()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)> -> _SOURCE_
<android.app.ApplicationPackageManager: boolean isWirelessConsentModeEnabled()> -> _SOURCE_
<android.app.RemoteInputHistoryItem: android.net.Uri getUri()> -> _SOURCE_
<android.webkit.CookieManager: java.lang.Object clone()> -> _SOURCE_
<android.hardware.camera2.CameraMetadata: java.util.List getKeys()> -> _SOURCE_
<com.android.ims.internal.IImsCallSession$Stub$Proxy: com.android.ims.internal.IImsVideoCallProvider getVideoCallProvider()> -> _SOURCE_
<android.media.MediaCodecInfo$VideoCapabilities: android.util.Range getSupportedHeights()> -> _SOURCE_
<android.view.inputmethod.BaseInputConnection: android.text.Editable getEditable()> -> _SOURCE_
<android.service.notification.SnoozeCriterion: java.lang.String getId()> -> _SOURCE_
<android.view.MotionEvent: float getYPrecision()> -> _SOURCE_
<android.hardware.ICameraService$Stub: android.hardware.ICameraService getDefaultImpl()> -> _SOURCE_
<android.hardware.location.NanoApp: int[] getOutputEvents()> -> _SOURCE_
<android.internal.hidl.base.V1_0.IBase$Proxy: android.internal.hidl.base.V1_0.DebugInfo getDebugInfo()> -> _SOURCE_
<android.widget.ActionMenuPresenter$OverflowMenuButton$1: com.android.internal.view.menu.ShowableListMenu getPopup()> -> _SOURCE_
<android.media.MediaRoute2Info: java.lang.String getProviderId()> -> _SOURCE_
<android.os.IIncidentManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.hardware.display.DisplayManager: android.hardware.display.BrightnessConfiguration getBrightnessConfigurationForUser(int)> -> _SOURCE_
<android.content.ContentResolver: java.util.List getOutgoingPersistedUriPermissions()> -> _SOURCE_
<android.os.UserManager: android.os.Bundle getUserRestrictions(android.os.UserHandle)> -> _SOURCE_
<android.telephony.SubscriptionInfo: java.lang.String getCountryIso()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.view.autofill.IAutoFillManagerClient$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.internal.telephony.ISub$Stub$Proxy: android.telephony.SubscriptionInfo getActiveSubscriptionInfoForIccId(java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.os.Handler: android.os.Handler getMain()> -> _SOURCE_
<android.security.keystore.KeyGenParameterSpec: java.lang.String[] getDigests()> -> _SOURCE_
<android.debug.IAdbManager$Default: java.util.Map getPairedDevices()> -> _SOURCE_
<android.hardware.input.InputManager: android.hardware.input.KeyboardLayout[] getKeyboardLayoutsForInputDevice(android.hardware.input.InputDeviceIdentifier)> -> _SOURCE_
<android.bluetooth.IBluetooth$Stub$Proxy: android.bluetooth.IBluetoothSocketManager getSocketManager()> -> _SOURCE_
<android.telephony.CellSignalStrengthLte: int describeContents()> -> _SOURCE_
<android.os.VibrationAttributes: android.media.AudioAttributes getAudioAttributes()> -> _SOURCE_
<android.accounts.AccountManager: java.util.Map getPackagesAndVisibilityForAccount(android.accounts.Account)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.hardware.location.ContextHubInfo: float getPeakPowerDrawMw()> -> _SOURCE_
<android.widget.ScrollBarDrawable: boolean getAlwaysDrawVerticalTrack()> -> _SOURCE_
<android.os.incremental.IStorageHealthListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.media.MediaCodecInfo$VideoCapabilities: android.util.Range getSupportedWidths()> -> _SOURCE_
<com.android.internal.widget.LockPatternUtils: boolean isFileEncryptionEnabled()> -> _SOURCE_
<android.view.Window: boolean getSharedElementsUseOverlay()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: android.app.admin.FactoryResetProtectionPolicy getFactoryResetProtectionPolicy(android.content.ComponentName)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.util.List getMeteredDataDisabledPackages(android.content.ComponentName)> -> _SOURCE_
<android.app.role.RoleControllerManager: java.util.concurrent.CompletableFuture lambda$isApplicationQualifiedForRole$4(java.lang.String,java.lang.String,android.app.role.IRoleController)> -> _SOURCE_
<android.hardware.usb.UsbPort: java.lang.String getId()> -> _SOURCE_
<com.android.internal.view.menu.MenuBuilder: com.android.internal.view.menu.MenuItemImpl getExpandedItem()> -> _SOURCE_
<android.content.pm.IPackageManager$Default: java.lang.String getAppPredictionServicePackageName()> -> _SOURCE_
<android.hardware.Camera$Parameters: java.lang.String getSceneMode()> -> _SOURCE_
<android.telephony.SmsMessage: android.telephony.SmsMessage createFromEfRecord(int,byte[],int)> -> _SOURCE_
<com.android.internal.os.BackgroundThread: java.util.concurrent.Executor getExecutor()> -> _SOURCE_
<android.view.textclassifier.TextClassification: android.view.View$OnClickListener getOnClickListener()> -> _SOURCE_
<android.app.Activity: android.content.ComponentName getComponentName()> -> _SOURCE_
<android.text.style.URLSpan: java.lang.String getURL()> -> _SOURCE_
<android.nfc.cardemulation.NfcFCardEmulation: java.lang.String getNfcid2ForService(android.content.ComponentName)> -> _SOURCE_
<android.app.IActivityTaskManager$Default: java.util.List getAppTasks(java.lang.String)> -> _SOURCE_
<android.bluetooth.BluetoothManager: int getConnectionState(android.bluetooth.BluetoothDevice,int)> -> _SOURCE_
<android.provider.DocumentsContract: android.graphics.Bitmap getDocumentThumbnail(android.content.ContentResolver,android.net.Uri,android.graphics.Point,android.os.CancellationSignal)> -> _SOURCE_
<android.content.res.ResourcesImpl$ThemeImpl: long getNativeTheme()> -> _SOURCE_
<com.android.internal.view.menu.SubMenuBuilder: java.lang.String getActionViewStatesKey()> -> _SOURCE_
<android.telephony.CellInfo: android.telephony.CellInfo create(android.hardware.radio.V1_4.CellInfo,long)> -> _SOURCE_
<android.app.usage.NetworkStatsManager: android.app.usage.NetworkStats querySummary(int,java.lang.String,long,long)> -> _SOURCE_
<android.telephony.CellIdentityWcdma: java.lang.String toString()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.view.autofill.AutofillManager: boolean isFieldClassificationEnabled()> -> _SOURCE_
<android.hardware.camera2.params.HighSpeedVideoConfiguration: android.util.Size getSize()> -> _SOURCE_
<android.os.PowerManager: boolean isAmbientDisplaySuppressed()> -> _SOURCE_
<android.view.ViewConfiguration: long getDefaultActionModeHideDuration()> -> _SOURCE_
<android.location.GnssAntennaInfo$SphericalCorrections: double[][] getCorrectionsArray()> -> _SOURCE_
<android.graphics.fonts.Font: long getNativePtr()> -> _SOURCE_
<android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getAppActiveNotifications(java.lang.String,int)> -> _SOURCE_
<android.hardware.display.VirtualDisplayConfig: android.view.Surface getSurface()> -> _SOURCE_
<android.app.WallpaperManager: java.lang.String access$000()> -> _SOURCE_
<android.hardware.display.DisplayManager: android.hardware.display.BrightnessConfiguration getBrightnessConfiguration()> -> _SOURCE_
<android.telephony.euicc.DownloadableSubscription: java.util.List getAccessRules()> -> _SOURCE_
<android.view.ViewRootImpl: android.view.ScrollCaptureClient getScrollCaptureClient()> -> _SOURCE_
<android.telephony.TelephonyManager: android.telephony.TelephonyManager createForPhoneAccountHandle(android.telecom.PhoneAccountHandle)> -> _SOURCE_
<android.content.pm.parsing.component.ParsedMainComponent: java.lang.String getSplitName()> -> _SOURCE_
<android.service.autofill.UserData: java.lang.String getId()> -> _SOURCE_
<android.app.UiAutomation: android.view.WindowContentFrameStats getWindowContentFrameStats(int)> -> _SOURCE_
<android.content.pm.IPackageManager$Default: java.lang.String getSharedSystemSharedLibraryPackageName()> -> _SOURCE_
<com.android.internal.widget.LockPatternUtils: boolean isDeviceEncryptionEnabled()> -> _SOURCE_
<android.permission.IPermissionManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.view.Choreographer: long getLastFrameTimeNanos()> -> _SOURCE_
<android.hardware.display.DisplayManager: android.view.Display[] getDisplays(java.lang.String)> -> _SOURCE_
<android.telephony.SmsMessage: android.telephony.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,java.lang.String,boolean,int)> -> _SOURCE_
<android.net.IpSecConfig: java.lang.String getSourceAddress()> -> _SOURCE_
<android.view.contentcapture.IContentCaptureManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.graphics.ImageDecoder$Source: int getDensity()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: boolean isRadioOn(java.lang.String)> -> _SOURCE_
<android.telephony.TelephonyManager: int getMaxNumberOfSimultaneouslyActiveSims()> -> _SOURCE_
<android.media.AudioManager: boolean isBluetoothA2dpOn()> -> _SOURCE_
<android.webkit.TracingConfig: int getPredefinedCategories()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.lang.String getDeviceSoftwareVersionForSlot(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.content.pm.ApplicationInfo: java.lang.String getBaseCodePath()> -> _SOURCE_
<android.util.apk.WrappedX509Certificate: boolean[] getSubjectUniqueID()> -> _SOURCE_
<android.net.lowpan.LowpanInterface: boolean isEnabled()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.util.List queryIntentActivities(android.content.Intent,int)> -> _SOURCE_
<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo getProfileParent(int)> -> _SOURCE_
<com.android.internal.telephony.ISub$Default: int getSimStateForSlotIndex(int)> -> _SOURCE_
<android.hardware.SensorManager: float[] getOrientation(float[],float[])> -> _SOURCE_
<android.app.admin.DevicePolicyManager: int getPasswordQuality(android.content.ComponentName,int)> -> _SOURCE_
<android.location.ILocationManager$Stub$Proxy: java.util.List getProviderPackages(java.lang.String)> -> _SOURCE_
<android.content.pm.IPackageManager$Default: java.lang.String getSetupWizardPackageName()> -> _SOURCE_
<android.telephony.SubscriptionInfo: int getSubscriptionId()> -> _SOURCE_
<android.app.IWindowToken$Stub: android.app.IWindowToken getDefaultImpl()> -> _SOURCE_
<android.bluetooth.le.ScanFilter: android.os.ParcelUuid getServiceDataUuid()> -> _SOURCE_
<com.android.internal.inputmethod.IInputMethodPrivilegedOperations$Stub: com.android.internal.inputmethod.IInputMethodPrivilegedOperations getDefaultImpl()> -> _SOURCE_
<android.app.VoiceInteractor$Request: java.lang.String getRequestTypeName()> -> _SOURCE_
<android.content.pm.dex.ISnapshotRuntimeProfileCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.net.IConnectivityManager$Default: android.net.NetworkState[] getAllNetworkState()> -> _SOURCE_
<com.android.internal.telephony.ISub$Stub$Proxy: android.os.IBinder asBinder()> -> _SOURCE_
<com.android.internal.telephony.SmsApplication: android.content.ComponentName getDefaultSmsApplicationAsUser(android.content.Context,boolean,int)> -> _SOURCE_
<android.graphics.drawable.BitmapDrawable: android.content.res.ColorStateList getTint()> -> _SOURCE_
<android.hardware.ISerialManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkInfo getNetworkInfo(int)> -> _SOURCE_
<com.android.server.SystemConfig: android.util.ArraySet getBackupTransportWhitelist()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: android.util.SparseArray getSensorStats()> -> _SOURCE_
<android.telephony.ServiceState: int getBitmaskForTech(int)> -> _SOURCE_
<com.android.internal.policy.PhoneWindow: android.media.session.MediaController getMediaController()> -> _SOURCE_
<android.telephony.LteVopsSupportInfo: int describeContents()> -> _SOURCE_
<android.provider.DocumentsContract: java.lang.String getRootId(android.net.Uri)> -> _SOURCE_
<android.view.SurfaceControl$ScreenshotGraphicBuffer: android.graphics.GraphicBuffer getGraphicBuffer()> -> _SOURCE_
<android.location.GpsMeasurement: double getAccumulatedDeltaRangeInMeters()> -> _SOURCE_
<android.media.tv.ITvInputManagerCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.service.notification.IStatusBarNotificationHolder$Stub$Proxy: android.service.notification.StatusBarNotification get()> -> _SOURCE_
<android.media.IPlaybackConfigDispatcher$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getCarrierPrivilegeStatusForUid(int,int)> -> _SOURCE_
<android.webkit.JsResult: boolean getResult()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: android.os.Bundle getVisualVoicemailSettings(java.lang.String,int)> -> _SOURCE_
<com.android.internal.telephony.SmsMessageBase: long getTimestampMillis()> -> _SOURCE_
<com.android.internal.telephony.ICarrierConfigLoader$Default: android.os.PersistableBundle getConfigForSubIdWithFeature(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.bluetooth.BluetoothMap: java.util.List getConnectedDevices()> -> _SOURCE_
<android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl: android.view.Surface getInputSurface()> -> _SOURCE_
<android.net.NetworkScorerAppData: java.lang.String getRecommendationServiceLabel()> -> _SOURCE_
<android.text.style.AbsoluteSizeSpan: boolean getDip()> -> _SOURCE_
<android.media.tv.ITvInputManager$Default: java.util.List getTvInputList(int)> -> _SOURCE_
<android.view.InputMonitor: android.view.IInputMonitorHost getHost()> -> _SOURCE_
<android.content.pm.PackageParser$Package: boolean isOdm()> -> _SOURCE_
<android.telephony.ims.aidl.IRcsFeatureListener$Stub: android.telephony.ims.aidl.IRcsFeatureListener getDefaultImpl()> -> _SOURCE_
<android.net.IConnectivityManager$Default: android.net.NetworkInfo getActiveNetworkInfo()> -> _SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.net.NetworkIdentity: java.lang.String getNetworkId()> -> _SOURCE_
<android.hardware.input.InputManager: android.view.InputDevice getInputDevice(int)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: long getPasswordExpirationTimeout(android.content.ComponentName,int,boolean)> -> _SOURCE_
<android.app.IApplicationThread$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.content.ContextWrapper: java.io.File[] getExternalCacheDirs()> -> _SOURCE_
<android.view.accessibility.AccessibilityRecord: java.lang.CharSequence getClassName()> -> _SOURCE_
<android.media.MediaCodecInfo$VideoCapabilities: java.util.List getSupportedPerformancePoints()> -> _SOURCE_
<android.hardware.display.WifiDisplaySessionInfo: java.lang.String getIP()> -> _SOURCE_
<android.location.GnssAntennaInfo$SphericalCorrections: double getDeltaPhi()> -> _SOURCE_
<android.net.ConnectivityManager: android.net.ProxyInfo getProxyForNetwork(android.net.Network)> -> _SOURCE_
<android.content.res.AssetManager: java.lang.String getResourceEntryName(int)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean getScreenCaptureDisabled(android.content.ComponentName,int)> -> _SOURCE_
<android.media.MediaRecorder: android.media.AudioDeviceInfo getRoutedDevice()> -> _SOURCE_
<android.permission.IPermissionManager$Stub$Proxy: android.content.pm.ParceledListSlice getAllPermissionGroups(int)> -> _SOURCE_
<android.location.Address: java.lang.String getPostalCode()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.content.pm.ShortcutInfo: java.lang.String getBitmapPath()> -> _SOURCE_
<android.telephony.PhoneNumberUtils: java.lang.String calledPartyBCDToString(byte[],int,int,int)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.location.GnssAntennaInfo$PhaseCenterOffset: double getXOffsetMm()> -> _SOURCE_
<android.media.MediaPlayer: android.media.AudioDeviceInfo getRoutedDevice()> -> _SOURCE_
<android.app.NotificationManager: java.util.List getEnabledNotificationListeners(int)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: boolean isRadioOnForSubscriberWithFeature(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.os.IUserManager$Stub$Proxy: long getUserUnlockRealtime()> -> _SOURCE_
<android.location.GnssMeasurementsEvent: java.util.Collection getMeasurements()> -> _SOURCE_
<android.content.pm.ShortcutInfo: android.graphics.drawable.Icon getIcon()> -> _SOURCE_
<android.app.NotificationHistory$HistoricalNotification: java.lang.String getChannelId()> -> _SOURCE_
<android.content.res.ResourcesImpl: android.content.res.Configuration[] getSizeConfigurations()> -> _SOURCE_
<android.location.GnssSingleSatCorrection: float getProbabilityLineOfSight()> -> _SOURCE_
<android.animation.ObjectAnimator: java.lang.String getPropertyName()> -> _SOURCE_
<com.android.ims.internal.IImsCallSession$Default: android.telephony.ims.ImsCallProfile getCallProfile()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: java.util.List getPackagesWithCarrierPrivilegesForAllPhones()> -> _SOURCE_
<android.app.ActivityManager$TaskDescription: android.graphics.Bitmap getInMemoryIcon()> -> _SOURCE_
<android.app.admin.StartInstallingUpdateCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telephony.PhoneNumberUtils: boolean isLocalEmergencyNumber(android.content.Context,java.lang.String)> -> _SOURCE_
<android.accounts.IAccountAuthenticator$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telephony.SubscriptionManager: int getActiveSubscriptionInfoCount()> -> _SOURCE_
<android.widget.RemoteViewsAdapter$FixedSizeRemoteViewsCache: android.widget.RemoteViewsAdapter$RemoteViewsMetaData getMetaData()> -> _SOURCE_
<android.media.MediaRouter2Utils: java.lang.String getOriginalId(java.lang.String)> -> _SOURCE_
<android.bluetooth.IBluetoothGattServerCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.hardware.biometrics.IBiometricEnabledOnKeyguardCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.internal.view.menu.ActionMenuItem: android.view.ContextMenu$ContextMenuInfo getMenuInfo()> -> _SOURCE_
<android.telephony.ims.feature.RcsFeature: android.telephony.ims.stub.RcsPresenceExchangeImplBase getPresenceExchangeImpl()> -> _SOURCE_
<android.telephony.SmsMessage: java.lang.String getServiceCenterAddress()> -> _SOURCE_
<android.text.FontConfig$Font: android.net.Uri getUri()> -> _SOURCE_
<android.content.IntentFilter$AuthorityEntry: java.lang.String getHost()> -> _SOURCE_
<android.bluetooth.IBluetoothPbapClient$Stub: android.bluetooth.IBluetoothPbapClient getDefaultImpl()> -> _SOURCE_
<android.location.Address: java.lang.String getSubThoroughfare()> -> _SOURCE_
<android.telephony.UiccAccessRule: java.lang.String getCertificateHexString()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: boolean isApplicationOnUicc(int,int)> -> _SOURCE_
<android.content.pm.IPackageManager$Default: java.util.List getMimeGroup(java.lang.String,java.lang.String)> -> _SOURCE_
<android.app.AppOpsManager$OpEntry: java.lang.String getProxyPackageName()> -> _SOURCE_
<android.media.tv.ITvInputManager$Stub: android.media.tv.ITvInputManager getDefaultImpl()> -> _SOURCE_
<android.graphics.drawable.DrawableWrapper: android.graphics.Insets getOpticalInsets()> -> _SOURCE_
<android.view.ViewConfiguration: int getHoverTapTimeout()> -> _SOURCE_
<android.view.textclassifier.TextLinks$Request: java.lang.CharSequence getText()> -> _SOURCE_
<android.content.pm.parsing.component.ParsedActivity: java.lang.String getParentActivityName()> -> _SOURCE_
<android.app.ActivityTaskManager: android.app.IActivityTaskManager getService()> -> _SOURCE_
<android.app.Person: java.lang.String getUri()> -> _SOURCE_
<android.net.INetworkScoreService$Default: android.net.NetworkScorerAppData getActiveScorer()> -> _SOURCE_
<android.telephony.BarringInfo: android.telephony.BarringInfo$BarringServiceInfo getBarringServiceInfo(int)> -> _SOURCE_
<android.view.accessibility.IAccessibilityEmbeddedConnection$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.os.DeviceIdleManager: java.lang.String[] getSystemPowerWhitelist()> -> _SOURCE_
<android.telephony.ICellInfoCallback$Stub: android.telephony.ICellInfoCallback getDefaultImpl()> -> _SOURCE_
<android.net.INetworkStatsService$Stub$Proxy: long getIfaceStats(java.lang.String,int)> -> _SOURCE_
<android.os.BatterySaverPolicyConfig: boolean getDisableOptionalSensors()> -> _SOURCE_
<android.content.res.AssetManager: java.lang.String[] getResourceStringArray(int)> -> _SOURCE_
<android.security.keystore.IKeystoreExportKeyCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.os.IServiceManager$Stub$Proxy: android.os.IBinder getService(java.lang.String)> -> _SOURCE_
<android.telephony.CbGeoUtils: java.lang.String encodeGeometriesToString(java.util.List)> -> _SOURCE_
<com.android.internal.textservice.ITextServicesSessionListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getCdmaEriText()> -> _SOURCE_
<android.net.Uri$HierarchicalUri: java.lang.String getEncodedAuthority()> -> _SOURCE_
<android.location.IGnssAntennaInfoListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.bluetooth.le.AdvertiseData: android.util.SparseArray getManufacturerSpecificData()> -> _SOURCE_
<android.telephony.PhoneNumberUtils: boolean isPotentialEmergencyNumber(java.lang.String)> -> _SOURCE_
<android.telephony.CellInfoCdma: int describeContents()> -> _SOURCE_
<com.android.internal.telephony.gsm.SmsMessage: com.android.internal.telephony.SmsConstants$MessageClass getMessageClass()> -> _SOURCE_
<android.os.IUserRestrictionsListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.IActivityTaskManager$Stub$Proxy: android.content.pm.ConfigurationInfo getDeviceConfigurationInfo()> -> _SOURCE_
<com.android.internal.os.PowerProfile: double getBatteryCapacity()> -> _SOURCE_
<android.media.tv.ITvInputManagerCallback$Stub: android.media.tv.ITvInputManagerCallback getDefaultImpl()> -> _SOURCE_
<android.content.IContentService$Default: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String,android.content.ComponentName)> -> _SOURCE_
<android.os.StrictMode$ViolationInfo: java.lang.String getViolationDetails()> -> _SOURCE_
<android.hardware.cas.V1_2.IMediaCasService$Proxy: android.internal.hidl.base.V1_0.DebugInfo getDebugInfo()> -> _SOURCE_
<android.graphics.NinePatch: java.lang.String getName()> -> _SOURCE_
<android.print.PrinterInfo: android.print.PrinterId getId()> -> _SOURCE_
<android.app.RuntimeAppOpAccessMessage: java.lang.String getOp()> -> _SOURCE_
<com.android.internal.app.IAppOpsStartedCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.timedetector.TelephonyTimeSuggestion: java.util.List getDebugInfo()> -> _SOURCE_
<android.content.pm.PackageParser$Package: boolean isSystemExt()> -> _SOURCE_
<android.media.IRemoteVolumeObserver$Stub: android.media.IRemoteVolumeObserver getDefaultImpl()> -> _SOURCE_
<android.os.Environment: boolean isExternalStorageEmulated()> -> _SOURCE_
<com.android.internal.policy.PhoneWindow: android.view.View getCurrentFocus()> -> _SOURCE_
<android.service.notification.NotificationListenerService$Ranking: android.app.NotificationChannel getChannel()> -> _SOURCE_
<android.telephony.CellIdentity: java.lang.CharSequence getOperatorAlphaLong()> -> _SOURCE_
<android.provider.FontsContract: android.provider.FontsContract$FontInfo[] getFontFromProvider(android.content.Context,android.provider.FontRequest,java.lang.String,android.os.CancellationSignal)> -> _SOURCE_
<android.app.contentsuggestions.ContentSuggestionsManager: boolean isEnabled()> -> _SOURCE_
<android.view.WindowInsets: android.graphics.Rect getSystemWindowInsetsAsRect()> -> _SOURCE_
<android.webkit.WebViewDatabase: android.webkit.WebViewDatabase getInstance(android.content.Context)> -> _SOURCE_
<com.android.internal.telephony.ISms$Stub: java.lang.String getTransactionName(int)> -> _SOURCE_
<android.webkit.WebView$PrivateAccess: float getVerticalScrollFactor()> -> _SOURCE_
<android.widget.ProgressBar: android.graphics.PorterDuff$Mode getProgressTintMode()> -> _SOURCE_
<android.telephony.TelephonyManager: android.telephony.PinResult supplyPinReportPinResult(java.lang.String)> -> _SOURCE_
<android.telephony.TelephonyManager: android.telecom.PhoneAccountHandle getPhoneAccountHandleForSubscriptionId(int)> -> _SOURCE_
<android.animation.PathKeyframes: java.util.ArrayList getKeyframes()> -> _SOURCE_
<android.accessibilityservice.IAccessibilityServiceConnection$Default: android.accessibilityservice.AccessibilityServiceInfo getServiceInfo()> -> _SOURCE_
<android.view.ViewRootImpl: android.view.HandlerActionQueue getRunQueue()> -> _SOURCE_
<android.media.IMediaHTTPConnection$Stub$Proxy: java.lang.String getMIMEType()> -> _SOURCE_
<android.telephony.CellInfoTdscdma: android.telephony.CellIdentity getCellIdentity()> -> _SOURCE_
<android.telephony.emergency.EmergencyNumber: java.util.List getEmergencyNumberSources()> -> _SOURCE_
<android.provider.FontRequest: java.lang.String getIdentifier()> -> _SOURCE_
<android.net.lowpan.ILowpanInterface$Stub$Proxy: java.lang.String getNcpVersion()> -> _SOURCE_
<android.net.lowpan.LowpanBeaconInfo: android.net.lowpan.LowpanIdentity getLowpanIdentity()> -> _SOURCE_
<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getApplicationBanner(java.lang.String)> -> _SOURCE_
<android.content.pm.parsing.component.ParsedProvider: android.content.pm.PathPermission[] getPathPermissions()> -> _SOURCE_
<android.app.blob.IBlobStoreManager$Stub$Proxy: java.util.List getLeasedBlobs(java.lang.String)> -> _SOURCE_
<android.app.KeyguardManager: boolean isDeviceSecure()> -> _SOURCE_
<android.content.pm.ILauncherApps$Stub$Proxy: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,java.lang.String,int,android.os.UserHandle)> -> _SOURCE_
<android.media.soundtrigger.SoundTriggerManager: int getModelState(java.util.UUID)> -> _SOURCE_
<android.security.KeyStore$KeyCharacteristicsPromise: java.util.concurrent.CompletableFuture getFuture()> -> _SOURCE_
<android.os.connectivity.GpsBatteryStats: long getLoggingDurationMs()> -> _SOURCE_
<android.bluetooth.BluetoothDevice: byte[] getMetadata(int)> -> _SOURCE_
<android.os.BatteryManager: int getIntProperty(int)> -> _SOURCE_
<android.bluetooth.le.IScannerCallback$Stub: android.bluetooth.le.IScannerCallback getDefaultImpl()> -> _SOURCE_
<android.view.textclassifier.TextClassifierEvent: java.lang.String[] getEntityTypes()> -> _SOURCE_
<android.telephony.DataSpecificRegistrationInfo: int describeContents()> -> _SOURCE_
<com.android.internal.telecom.ITelecomService$Stub: com.android.internal.telecom.ITelecomService getDefaultImpl()> -> _SOURCE_
<android.telephony.TelephonyManager: byte[] iccExchangeSimIO(int,int,int,int,int,java.lang.String)> -> _SOURCE_
<android.telephony.CellSignalStrengthGsm: int getRssi()> -> _SOURCE_
<android.telephony.CellSignalStrengthLte: int getRssnr()> -> _SOURCE_
<android.hardware.location.NanoAppMessage: long getNanoAppId()> -> _SOURCE_
<android.renderscript.Allocation: java.nio.ByteBuffer getByteBuffer()> -> _SOURCE_
<android.os.UserManager: int getCredentialOwnerProfile(int)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.bluetooth.BluetoothGattDescriptor: byte[] getValue()> -> _SOURCE_
<android.net.LocalSocket: android.net.LocalSocketAddress getRemoteSocketAddress()> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: android.os.IBinder asBinder()> -> _SOURCE_
<android.window.ITaskOrganizerController$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Default: java.util.List getCrossProfileCalendarPackages(android.content.ComponentName)> -> _SOURCE_
<android.app.ApplicationPackageManager: java.lang.String getDefaultTextClassifierPackageName()> -> _SOURCE_
<android.widget.ProgressBar: android.view.animation.Interpolator getInterpolator()> -> _SOURCE_
<android.app.trust.ITrustListener$Stub: android.app.trust.ITrustListener getDefaultImpl()> -> _SOURCE_
<android.content.pm.PackageManager: boolean isPackageSuspended()> -> _SOURCE_
<android.telephony.PhoneNumberUtils: java.lang.String replaceUnicodeDigits(java.lang.String)> -> _SOURCE_
<android.app.timedetector.ManualTimeSuggestion: android.os.TimestampedValue getUtcTime()> -> _SOURCE_
<android.app.NotificationManager: android.app.NotificationManager$Policy getConsolidatedNotificationPolicy()> -> _SOURCE_
<android.net.lowpan.LowpanIdentity: java.lang.String getName()> -> _SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: android.net.Network getNetworkForType(int)> -> _SOURCE_
<android.content.pm.IPackageStatsObserver$Stub: android.content.pm.IPackageStatsObserver getDefaultImpl()> -> _SOURCE_
<android.media.TimedMetaData: byte[] getMetaData()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean supplyPin(java.lang.String)> -> _SOURCE_
<android.app.usage.ExternalStorageStats: long getImageBytes()> -> _SOURCE_
<android.content.pm.parsing.component.ParsedActivity: java.lang.String getPermission()> -> _SOURCE_
<android.app.BackStackRecord: java.lang.String getName()> -> _SOURCE_
<android.security.KeyStore: boolean isEmpty()> -> _SOURCE_
<android.internal.hidl.base.V1_0.IBase$Stub: java.util.ArrayList getHashChain()> -> _SOURCE_
<com.android.internal.telephony.euicc.ISetDefaultSmdpAddressCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.media.IAudioService$Stub$Proxy: int[] getSupportedSystemUsages()> -> _SOURCE_
<com.android.internal.telephony.gsm.SmsMessage: com.android.internal.telephony.gsm.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,java.lang.String,boolean,byte[],int,int,int,int)> -> _SOURCE_
<android.app.IActivityTaskManager$Stub$Proxy: android.os.Bundle getAssistContextExtras(int)> -> _SOURCE_
<android.media.AudioRecordingMonitorImpl: android.media.AudioRecordingConfiguration getActiveRecordingConfiguration()> -> _SOURCE_
<com.android.internal.policy.PhoneWindow: android.transition.Transition getExitTransition()> -> _SOURCE_
<android.media.MediaRouter: int getRouteCountStatic()> -> _SOURCE_
<android.graphics.Paint: java.lang.String getFontVariationSettings()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: long forceSecurityLogs()> -> _SOURCE_
<android.view.ViewConfiguration: int getTapTimeout()> -> _SOURCE_
<com.android.internal.view.IInputMethodManager$Default: android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtype()> -> _SOURCE_
<android.location.GnssMeasurementCorrections: float getEnvironmentBearingDegrees()> -> _SOURCE_
<android.nfc.INfcFCardEmulation$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telecom.ParcelableCallAnalytics: java.util.List getEventTimings()> -> _SOURCE_
<com.android.internal.os.KernelCpuProcStringReader: com.android.internal.os.KernelCpuProcStringReader getActiveTimeReaderInstance()> -> _SOURCE_
<android.media.audiopolicy.AudioPolicy: android.media.audiopolicy.AudioPolicyConfig getConfig()> -> _SOURCE_
<com.android.internal.telephony.cdma.SmsMessage: byte[] getIncomingSmsFingerprint()> -> _SOURCE_
<android.view.KeyEvent: char getDisplayLabel()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isOffhook()> -> _SOURCE_
<android.os.TestLooperManager: android.os.Message next()> -> _SOURCE_
<android.app.Fragment: android.transition.Transition getReenterTransition()> -> _SOURCE_
<android.net.lowpan.ILowpanInterface$Stub$Proxy: android.net.lowpan.LowpanCredential getLowpanCredential()> -> _SOURCE_
<android.media.AudioMetadata$1: java.lang.Class getValueClass()> -> _SOURCE_
<android.text.FontConfig$Font: android.graphics.fonts.FontVariationAxis[] getAxes()> -> _SOURCE_
<android.location.ILocationManager$Default: java.util.List getProviders(android.location.Criteria,boolean)> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getIccSerialNumberWithFeature(java.lang.String,java.lang.String)> -> _SOURCE_
<android.net.lowpan.LowpanProperties$LowpanStandardProperty: java.lang.Class getType()> -> _SOURCE_
<com.android.internal.view.menu.MenuPopupHelper: com.android.internal.view.menu.MenuPopup getPopup()> -> _SOURCE_
<android.location.GpsClock: short getLeapSecond()> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Default: java.lang.String getIccSerialNumberForSubscriber(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.app.Activity: android.app.VoiceInteractor getVoiceInteractor()> -> _SOURCE_
<android.view.inputmethod.CompletionInfo: long getId()> -> _SOURCE_
<android.hardware.display.ColorDisplayManager$ColorDisplayManagerInternal: boolean isDeviceColorManaged()> -> _SOURCE_
<android.text.TextPaint: float getUnderlineThickness()> -> _SOURCE_
<android.content.pm.IPackageDeleteObserver2$Stub: android.content.pm.IPackageDeleteObserver2 getDefaultImpl()> -> _SOURCE_
<android.service.notification.INotificationListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.graphics.drawable.GradientDrawable: int[] getColors()> -> _SOURCE_
<android.app.DownloadManager: java.lang.String[] getWhereArgsForIds(long[])> -> _SOURCE_
<android.content.UndoManager: int getHistorySize()> -> _SOURCE_
<android.nfc.cardemulation.ApduServiceInfo: java.util.List getAids()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getTrustAgentConfiguration(android.content.ComponentName,android.content.ComponentName,int,boolean)> -> _SOURCE_
<android.app.Notification$Action$WearableExtender: boolean getHintDisplayActionInline()> -> _SOURCE_
<android.bluetooth.IBluetoothPbapClient$Default: java.util.List getConnectedDevices()> -> _SOURCE_
<com.android.internal.compat.IPlatformCompat$Stub$Proxy: com.android.internal.compat.CompatibilityChangeConfig getAppConfig(android.content.pm.ApplicationInfo)> -> _SOURCE_
<android.app.DownloadManager: android.database.Cursor query(android.app.DownloadManager$Query)> -> _SOURCE_
<android.location.GpsNavigationMessage: short getMessageId()> -> _SOURCE_
<android.hardware.location.IContextHubClient$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.internal.telephony.ISms$Stub$Proxy: java.lang.String getImsSmsFormatForSubscriber(int)> -> _SOURCE_
<android.telephony.TelephonyManager: java.util.Locale getSimLocale()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.os.UserManager: boolean isSameProfileGroup(int,int)> -> _SOURCE_
<android.media.AudioManager: float getStreamVolumeDb(int,int,int)> -> _SOURCE_
<android.renderscript.RenderScript: android.renderscript.RenderScript$RSErrorHandler getErrorHandler()> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Default: java.lang.String getIsimIst(int)> -> _SOURCE_
<android.accessibilityservice.AccessibilityServiceInfo: java.util.List getCapabilityInfos()> -> _SOURCE_
<android.telephony.SubscriptionManager: int lambda$setDisplayNumber$4(java.lang.String,int,com.android.internal.telephony.ISub)> -> _SOURCE_
<android.hardware.camera2.impl.CameraMetadataNative$Key: long getVendorId()> -> _SOURCE_
<android.appwidget.AppWidgetManager: boolean isRequestPinAppWidgetSupported()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: int getLockTaskFeatures(android.content.ComponentName)> -> _SOURCE_
<android.os.ServiceManager: android.os.IBinder getService(java.lang.String)> -> _SOURCE_
<android.net.nsd.INsdManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telephony.ims.ImsMmTelManager: boolean isAvailable(int,int)> -> _SOURCE_
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.dex.IArtManager getArtManager()> -> _SOURCE_
<android.content.pm.ShortcutInfo: java.lang.CharSequence getLongLabel()> -> _SOURCE_
<android.accounts.IAccountManager$Stub$Proxy: java.util.Map getAccountsAndVisibilityForPackage(java.lang.String,java.lang.String)> -> _SOURCE_
<android.hardware.Camera$Parameters: float getFocalLength()> -> _SOURCE_
<android.graphics.drawable.GradientDrawable: android.graphics.ColorFilter getColorFilter()> -> _SOURCE_
<android.media.IMediaRouter2Manager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.view.ContextThemeWrapper: android.content.res.Resources$Theme getTheme()> -> _SOURCE_
<android.util.KeyValueListParser$StringValue: java.lang.String getValue()> -> _SOURCE_
<android.net.wifi.nl80211.WifiNl80211Manager: int[] getChannelsMhzForBand(int)> -> _SOURCE_
<android.net.Uri$HierarchicalUri: java.lang.String getEncodedPath()> -> _SOURCE_
<android.os.storage.StorageManager: java.util.List getWritablePrivateVolumes()> -> _SOURCE_
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int,boolean)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.net.lowpan.LowpanInterface: android.net.lowpan.LowpanIdentity getLowpanIdentity()> -> _SOURCE_
<android.media.session.MediaSession$QueueItem: android.media.MediaDescription getDescription()> -> _SOURCE_
<android.app.AppGlobals: java.lang.String getInitialPackage()> -> _SOURCE_
<android.hardware.location.NanoAppInstanceInfo: long getAppId()> -> _SOURCE_
<android.telephony.SmsCbCmasInfo: int getMessageClass()> -> _SOURCE_
<android.util.apk.WrappedX509Certificate: boolean[] getIssuerUniqueID()> -> _SOURCE_
<android.inputmethodservice.InputMethodService: android.view.LayoutInflater getLayoutInflater()> -> _SOURCE_
<android.hardware.radio.ProgramList$Filter: java.util.Set getIdentifierTypes()> -> _SOURCE_
<android.telephony.SubscriptionInfo: int getDataRoaming()> -> _SOURCE_
<android.database.sqlite.SQLiteCompatibilityWalFlags: long getTruncateSize()> -> _SOURCE_
<android.os.StrictMode$ViolationInfo: java.lang.Class getViolationClass()> -> _SOURCE_
<android.os.storage.StorageVolume: java.lang.String getPath()> -> _SOURCE_
<android.app.NotificationChannel: java.lang.String getConversationId()> -> _SOURCE_
<android.view.AccessibilityIterators$WordTextSegmentIterator: android.view.AccessibilityIterators$WordTextSegmentIterator getInstance(java.util.Locale)> -> _SOURCE_
<com.android.internal.infra.ServiceConnector$Impl: long getRequestTimeoutMs()> -> _SOURCE_
<android.bluetooth.IBluetoothSap$Default: java.util.List getConnectedDevices()> -> _SOURCE_
<android.net.ISocketKeepaliveCallback$Stub: android.net.ISocketKeepaliveCallback getDefaultImpl()> -> _SOURCE_
<com.android.internal.telephony.SmsHeader: com.android.internal.telephony.SmsHeader fromByteArray(byte[])> -> _SOURCE_
<com.android.internal.telephony.euicc.IAuthenticateServerCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean isTetheringApnRequiredForSubscriber(int)> -> _SOURCE_
<android.view.Window: android.view.View getStatusBarBackgroundView()> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Default: java.lang.String[] getIsimPcscf(int)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getVoiceMailNumber(int)> -> _SOURCE_
<com.android.internal.telephony.euicc.IRetrieveNotificationListCallback$Stub: com.android.internal.telephony.euicc.IRetrieveNotificationListCallback getDefaultImpl()> -> _SOURCE_
<android.util.apk.WrappedX509Certificate: java.util.Date getNotAfter()> -> _SOURCE_
<android.telephony.ims.aidl.IImsMmTelFeature$Stub$Proxy: com.android.ims.internal.IImsUt getUtInterface()> -> _SOURCE_
<android.os.Environment: java.io.File getLegacyExternalStorageObbDirectory()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: android.app.admin.PasswordMetrics getPasswordMinimumMetrics(int)> -> _SOURCE_
<android.accounts.IAccountManager$Stub$Proxy: java.lang.String getPassword(android.accounts.Account)> -> _SOURCE_
<android.app.contentsuggestions.ClassificationsRequest: android.os.Bundle getExtras()> -> _SOURCE_
<android.content.IContentService$Default: boolean getMasterSyncAutomatically()> -> _SOURCE_
<com.android.internal.widget.ILockSettings$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.TelephonyScanManager$NetworkScanInfo: java.util.concurrent.Executor access$200(android.telephony.TelephonyScanManager$NetworkScanInfo)> -> _SOURCE_
<android.telephony.TelephonyManager: java.util.List getCarrierPrivilegedPackagesForAllActiveSubscriptions()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.util.List getCarrierPackageNamesForIntentAndPhone(android.content.Intent,int)> -> _SOURCE_
<android.hardware.soundtrigger.SoundTrigger$Keyphrase: int[] getUsers()> -> _SOURCE_
<android.net.ConnectivityManager: java.lang.String getCallbackName(int)> -> _SOURCE_
<android.telephony.TelephonyManager: java.util.List getCarrierPackageNamesForIntent(android.content.Intent)> -> _SOURCE_
<android.telephony.CellInfoGsm: int hashCode()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean iccCloseLogicalChannel(int,int)> -> _SOURCE_
<com.android.internal.os.BatteryStatsHelper: long getProcessForegroundTimeMs(android.os.BatteryStats$Uid,int)> -> _SOURCE_
<android.print.PrinterInfo: android.app.PendingIntent getInfoIntent()> -> _SOURCE_
<android.telephony.CellIdentityWcdma: android.telephony.CellIdentityWcdma copy()> -> _SOURCE_
<com.android.internal.widget.ActionBarOverlayLayout: boolean isOverflowMenuShowPending()> -> _SOURCE_
<android.os.TimestampedValue: java.lang.Object getValue()> -> _SOURCE_
<android.database.AbstractCursor: android.database.CursorWindow getWindow()> -> _SOURCE_
<android.app.UiModeManager: java.time.LocalTime getCustomNightModeEnd()> -> _SOURCE_
<android.app.admin.SystemUpdatePolicy: java.util.List getFreezePeriods()> -> _SOURCE_
<android.app.AlarmManager: android.app.AlarmManager$AlarmClockInfo getNextAlarmClock(int)> -> _SOURCE_
<android.content.pm.ILauncherApps$Stub$Proxy: android.content.pm.ParceledListSlice getShortcuts(java.lang.String,android.content.pm.ShortcutQueryWrapper,android.os.UserHandle)> -> _SOURCE_
<android.net.http.SslCertificate$DName: java.lang.String getUName()> -> _SOURCE_
<android.print.IPrintDocumentAdapterObserver$Stub: android.print.IPrintDocumentAdapterObserver getDefaultImpl()> -> _SOURCE_
<android.os.ISystemConfig$Stub: android.os.ISystemConfig getDefaultImpl()> -> _SOURCE_
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()> -> _SOURCE_
<android.net.ConnectivityManager: java.lang.String getCaptivePortalServerUrl()> -> _SOURCE_
<android.media.ExifInterface: long getDateTimeOriginal()> -> _SOURCE_
<android.hardware.location.NanoApp: int[] getNeededSensors()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: android.content.ComponentName getRestrictionsProvider(int)> -> _SOURCE_
<android.content.ContextWrapper: java.io.File getDataDir()> -> _SOURCE_
<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewFrameRates()> -> _SOURCE_
<com.android.internal.os.KernelCpuUidBpfMapReader: com.android.internal.os.KernelCpuUidBpfMapReader getClusterTimeReaderInstance()> -> _SOURCE_
<android.text.FontConfig: android.text.FontConfig$Family[] getFamilies()> -> _SOURCE_
<android.text.InputFilter$AllCaps$CharSequenceWrapper: java.lang.Object[] getSpans(int,int,java.lang.Class)> -> _SOURCE_
<android.hardware.camera2.legacy.LegacyCameraDevice: java.util.List getSurfaceIds(android.util.SparseArray)> -> _SOURCE_
<android.telephony.NetworkRegistrationInfo: java.lang.String getRegisteredPlmn()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: android.os.Bundle getUserRestrictions(android.content.ComponentName)> -> _SOURCE_
<android.service.notification.Adjustment: android.os.Bundle getSignals()> -> _SOURCE_
<android.content.pm.IShortcutChangeCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.widget.Editor: android.widget.Editor$InsertionPointCursorController getInsertionController()> -> _SOURCE_
<android.app.blob.BlobStoreManager: long createSession(android.app.blob.BlobHandle)> -> _SOURCE_
<android.app.Notification$TvExtender: android.app.PendingIntent getContentIntent()> -> _SOURCE_
<android.view.textservice.SpellCheckerSubtype: java.lang.String getLanguageTag()> -> _SOURCE_
<com.android.internal.telephony.SmsMessageBase: java.lang.String getServiceCenterAddress()> -> _SOURCE_
<android.view.InputDevice$MotionRange: float getRange()> -> _SOURCE_
<android.app.usage.IUsageStatsManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getPermittedInputMethodsForCurrentUser()> -> _SOURCE_
<android.accessibilityservice.AccessibilityService$MagnificationController: float getScale()> -> _SOURCE_
<android.media.soundtrigger.SoundTriggerDetector$EventPayload: android.media.AudioFormat getCaptureAudioFormat()> -> _SOURCE_
<android.telephony.ims.aidl.IRcsUceControllerCallback$Stub: android.telephony.ims.aidl.IRcsUceControllerCallback getDefaultImpl()> -> _SOURCE_
<com.android.internal.telephony.ITelephonyRegistry$Stub: com.android.internal.telephony.ITelephonyRegistry getDefaultImpl()> -> _SOURCE_
<android.content.ContentProvider: android.content.IContentProvider getIContentProvider()> -> _SOURCE_
<android.telephony.TelephonyManager: int getDataActivationState(int)> -> _SOURCE_
<android.os.IProgressListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.location.GpsMeasurement: double getPseudorangeInMeters()> -> _SOURCE_
<android.debug.IAdbManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.WallpaperManager: android.graphics.drawable.Drawable getDrawable()> -> _SOURCE_
<android.service.carrier.CarrierIdentifier: java.lang.String getImsi()> -> _SOURCE_
<android.app.prediction.AppTargetEvent: java.lang.String getLaunchLocation()> -> _SOURCE_
<android.view.ViewConfiguration: int getLongPressTooltipHideTimeout()> -> _SOURCE_
<android.telephony.CellIdentityLte: int getChannelNumber()> -> _SOURCE_
<android.window.IDisplayAreaOrganizerController$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.os.storage.StorageManager: boolean isUsbMassStorageConnected()> -> _SOURCE_
<android.app.SearchableInfo: java.lang.String getSuggestIntentAction()> -> _SOURCE_
<android.app.ActivityManager: android.os.Debug$MemoryInfo[] getProcessMemoryInfo(int[])> -> _SOURCE_
<android.hardware.location.IContextHubTransactionCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.internal.widget.ToolbarWidgetWrapper: android.view.Menu getMenu()> -> _SOURCE_
<android.telephony.SmsManager: boolean deleteMessageFromIcc(int)> -> _SOURCE_
<android.text.MeasuredParagraph: android.text.AutoGrowArray$IntArray getFontMetrics()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getMsisdn(int)> -> _SOURCE_
<android.util.apk.ApkSigningBlockUtils: java.lang.String getSignatureAlgorithmJcaKeyAlgorithm(int)> -> _SOURCE_
<android.view._$$Lambda$9vBfnQOmNnsc9WU80IIatZHQGKc: java.lang.Object get()> -> _SOURCE_
<android.telephony.emergency.EmergencyNumber: java.lang.String getNumber()> -> _SOURCE_
<android.permission.PermissionManager$SplitPermissionInfo: java.lang.String getSplitPermission()> -> _SOURCE_
<android.webkit.WebViewDelegate: android.app.Application getApplication()> -> _SOURCE_
<android.accessibilityservice.IAccessibilityServiceConnection$Stub$Proxy: android.graphics.Region getMagnificationRegion(int)> -> _SOURCE_
<android.telephony.ims.aidl.IImsCapabilityCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice getPackagesHoldingPermissions(java.lang.String[],int,int)> -> _SOURCE_
<android.app.AppOpsManager: boolean access$000()> -> _SOURCE_
<android.app.RemoteInput: java.util.Map getDataResultsFromIntent(android.content.Intent,java.lang.String)> -> _SOURCE_
<android.app.Activity: java.lang.CharSequence getTitle()> -> _SOURCE_
<android.window.WindowContainerTransaction$HierarchyOp: android.os.IBinder getContainer()> -> _SOURCE_
<android.os.storage.StorageManager: boolean isCacheBehaviorTombstone(java.io.File)> -> _SOURCE_
<android.content.RestrictionsManager: java.util.List getManifestRestrictions(java.lang.String)> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: boolean isMultipleAdvertisementSupported()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getLabeledBy()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isDataRoamingEnabled()> -> _SOURCE_
<android.telephony.ServiceState: java.lang.String getVoiceOperatorAlphaLong()> -> _SOURCE_
<android.content.pm.PackageInstaller$SessionInfo: android.graphics.Bitmap getAppIcon()> -> _SOURCE_
<android.telephony.TelephonyManager: int getCarrierIdFromSimMccMnc()> -> _SOURCE_
<android.system.suspend.ISuspendControlService$Stub: android.system.suspend.ISuspendControlService getDefaultImpl()> -> _SOURCE_
<android.content.pm.PackageInstaller$Session: java.lang.String[] getNames()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.util.List getClientRequestStats(java.lang.String,java.lang.String,int)> -> _SOURCE_
<android.bluetooth.BluetoothGattService: java.util.UUID getUuid()> -> _SOURCE_
<android.hardware.ISensorPrivacyListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.IAlarmManager$Stub: android.app.IAlarmManager getDefaultImpl()> -> _SOURCE_
<android.hardware.camera2.impl.CaptureCallbackHolder: java.util.concurrent.Executor getExecutor()> -> _SOURCE_
<android.os.Environment$UserEnvironment: java.io.File getExternalStorageDirectory()> -> _SOURCE_
<android.hardware.fingerprint.IFingerprintServiceReceiver$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.os.IDeviceIdleController$Stub$Proxy: int[] getAppIdWhitelist()> -> _SOURCE_
<android.view.textclassifier.TextClassificationSessionId: android.os.IBinder getToken()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getVoiceActivationState(int,java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.IMms$Stub$Proxy: android.net.Uri importMultimediaMessage(java.lang.String,android.net.Uri,java.lang.String,long,boolean,boolean)> -> _SOURCE_
<com.android.internal.telephony.euicc.IResetMemoryCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.media.IMediaRouter2$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.print.IPrintServicesChangeListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.text.style.CharacterStyle: android.text.style.CharacterStyle getUnderlying()> -> _SOURCE_
<android.security.keystore.IKeystoreCertificateChainCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.media.MediaDrm$MediaDrmStateException: java.lang.String getDiagnosticInfo()> -> _SOURCE_
<android.app.ActivityManager$TaskDescription: boolean getEnsureNavigationBarContrastWhenTransparent()> -> _SOURCE_
<com.android.internal.app.ISoundTriggerService$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telephony.SmsMessage: android.telephony.SmsMessage createFromPdu(byte[])> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getGroupIdLevel1()> -> _SOURCE_
<android.view.accessibility.AccessibilityManager: android.accessibilityservice.AccessibilityServiceInfo getInstalledServiceInfoWithComponentName(android.content.ComponentName)> -> _SOURCE_
<android.telephony.TelephonyManager: int getCardIdForDefaultEuicc()> -> _SOURCE_
<com.android.internal.view.IInputMethodManager$Stub: com.android.internal.view.IInputMethodManager getDefaultImpl()> -> _SOURCE_
<android.app.ActivityManager: boolean isBackgroundRestricted()> -> _SOURCE_
<android.database.IContentObserver$Stub: android.database.IContentObserver getDefaultImpl()> -> _SOURCE_
<android.view.textclassifier.SelectionEvent: android.view.textclassifier.SystemTextClassifierMetadata getSystemTextClassifierMetadata()> -> _SOURCE_
<android.content.ContentResolver: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.os.ICancellationSignal$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.ActivityManager: boolean isHighEndGfx()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isEmergencyNumber(java.lang.String)> -> _SOURCE_
<android.view.ViewGroup: android.view.animation.Transformation getChildTransformation()> -> _SOURCE_
<android.view.MotionEvent: float getTouchMinor()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.util.List queryContentProviders(java.lang.String,int,int)> -> _SOURCE_
<android.os.Build: java.lang.String getSerial()> -> _SOURCE_
<android.print.PrinterInfo: java.lang.String getDescription()> -> _SOURCE_
<com.android.internal.graphics.palette.Palette: java.util.List getSwatches()> -> _SOURCE_
<android.content.res.AssetManager: int getResourceIdentifier(java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<com.android.internal.app.WindowDecorActionBar$ActionModeImpl: android.view.View getCustomView()> -> _SOURCE_
<android.location.GnssClock: double getDriftUncertaintyNanosPerSecond()> -> _SOURCE_
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName,int,int)> -> _SOURCE_
<android.widget.AbsSpinner: android.view.View getSelectedView()> -> _SOURCE_
<android.accessibilityservice.IAccessibilityServiceConnection$Stub: android.accessibilityservice.IAccessibilityServiceConnection getDefaultImpl()> -> _SOURCE_
<android.provider.Browser: java.lang.String[] getVisitedHistory(android.content.ContentResolver)> -> _SOURCE_
<android.hardware.SystemSensorManager: java.util.List getFullDynamicSensorList()> -> _SOURCE_
<android.app.IUiModeManager$Stub$Proxy: long getCustomNightModeStart()> -> _SOURCE_
<android.app.ApplicationPackageManager: int[] getPackageGids(java.lang.String)> -> _SOURCE_
<android.app.NotificationManager: boolean isNotificationAssistantAccessGranted(android.content.ComponentName)> -> _SOURCE_
<android.app.LoadedApk$ReceiverDispatcher$Args: java.lang.Runnable getRunnable()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Default: java.util.List getTrustAgentConfiguration(android.content.ComponentName,android.content.ComponentName,int,boolean)> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: java.util.List getPreferredActivityFilters()> -> _SOURCE_
<android.accounts.AccountManager: android.accounts.Account[] getAccountsByTypeForPackage(java.lang.String,java.lang.String)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.app.Notification$MessagingStyle$Message: java.lang.CharSequence getSender()> -> _SOURCE_
<android.os.storage.IStorageEventListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.service.persistentdata.IPersistentDataBlockService$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.util.KeyValueListParser$IntValue: java.lang.String getKey()> -> _SOURCE_
<android.view.IDisplayWindowInsetsController$Stub: android.view.IDisplayWindowInsetsController getDefaultImpl()> -> _SOURCE_
<android.telecom.Logging.SessionManager: android.telecom.Logging.Session$Info getExternalSession(java.lang.String)> -> _SOURCE_
<android.app.IActivityManager$Default: int[] getRunningUserIds()> -> _SOURCE_
<android.content.pm.IPackageManager$Default: java.util.List getInstalledModules(int)> -> _SOURCE_
<android.content.pm.parsing.component.ParsedComponent: java.util.List getIntents()> -> _SOURCE_
<android.provider.Settings$Secure: long getLongForUser(android.content.ContentResolver,java.lang.String,int)> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: java.util.List getConfigPreferences()> -> _SOURCE_
<android.telephony.SubscriptionInfo: int describeContents()> -> _SOURCE_
<android.telephony.AvailableNetworkInfo: java.util.List getMccMncs()> -> _SOURCE_
<android.telephony.CallForwardingInfo: java.lang.String toString()> -> _SOURCE_
<android.media.MediaRouter$RouteInfo: java.lang.String getDeviceAddress()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: long getLastSecurityLogRetrievalTime()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: boolean isAdvancedCallingSettingEnabled(int)> -> _SOURCE_
<android.media.session.MediaController$PlaybackInfo: android.media.AudioAttributes getAudioAttributes()> -> _SOURCE_
<android.telecom.Logging.SessionManager: java.lang.String printActiveSessions()> -> _SOURCE_
<android.telephony.SubscriptionManager: boolean isUsableSubscriptionId(int)> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Default: java.lang.String getLine1Number(java.lang.String,java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.lang.String getMmsUAProfUrl(int)> -> _SOURCE_
<com.android.internal.view.menu.MenuItemImpl: java.lang.Runnable getCallback()> -> _SOURCE_
<android.telephony.CellSignalStrengthGsm: int getLevel()> -> _SOURCE_
<android.app.AppOpsManager$NoteOpEvent: android.app.AppOpsManager$OpEventProxyInfo getProxy()> -> _SOURCE_
<android.telephony.SignalStrength: int getLteRsrp()> -> _SOURCE_
<com.android.internal.telephony.ISub$Default: int getSlotIndex(int)> -> _SOURCE_
<android.media.session.ISession$Stub$Proxy: android.media.session.ISessionController getController()> -> _SOURCE_
<android.media.RoutingSessionInfo: java.lang.String getOriginalId()> -> _SOURCE_
<android.media.RoutingSessionInfo: java.util.List getSelectedRoutes()> -> _SOURCE_
<android.content.pm.PackageParser$Package: boolean isOem()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: int[] supplyPukReportResultForSubscriber(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.app.ActivityManager: int getLauncherLargeIconDensity()> -> _SOURCE_
<android.os.ParcelUuid: java.util.UUID getUuid()> -> _SOURCE_
<android.text.MeasuredParagraph: android.graphics.text.MeasuredText getMeasuredText()> -> _SOURCE_
<android.location.LocationRequest: long getFastestInterval()> -> _SOURCE_
<android.telephony.SmsCbCmasInfo: int getSeverity()> -> _SOURCE_
<android.graphics.Paint: android.graphics.Rasterizer getRasterizer()> -> _SOURCE_
<android.view.InputChannel: java.lang.String getName()> -> _SOURCE_
<android.bluetooth.IBluetoothManagerCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.util.FastXmlSerializer: java.lang.String getNamespace()> -> _SOURCE_
<android.view.textservice.SpellCheckerSubtype: java.lang.String getLocale()> -> _SOURCE_
<android.graphics.drawable.Icon: byte[] getDataBytes()> -> _SOURCE_
<com.android.internal.app.IVoiceInteractorCallback$Stub: com.android.internal.app.IVoiceInteractorCallback getDefaultImpl()> -> _SOURCE_
<android.security.IKeyChainService$Stub$Proxy: android.content.pm.StringParceledListSlice getUserCaAliases()> -> _SOURCE_
<android.app.usage.UsageStats: long getTotalTimeVisible()> -> _SOURCE_
<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.CameraDevice getDevice()> -> _SOURCE_
<android.hardware.camera2.params.MandatoryStreamCombination$Builder: java.util.List getAvailableMandatoryConcurrentStreamCombinations()> -> _SOURCE_
<android.net.lowpan.ILowpanInterface$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.Notification: java.lang.Class getNotificationStyleClass(java.lang.String)> -> _SOURCE_
<android.hardware.biometrics.IAuthService$Stub: android.hardware.biometrics.IAuthService getDefaultImpl()> -> _SOURCE_
<android.transition.Transition: java.util.List getTargets()> -> _SOURCE_
<android.service.notification.NotificationListenerService$Ranking: java.lang.CharSequence getImportanceExplanation()> -> _SOURCE_
<android.media.tv.TvInputManager: boolean isParentalControlsEnabled()> -> _SOURCE_
<com.android.internal.telephony.ISms$Default: int getPremiumSmsPermission(java.lang.String)> -> _SOURCE_
<android.media.IMediaRouter2$Stub: android.media.IMediaRouter2 getDefaultImpl()> -> _SOURCE_
<android.view.contentcapture.IDataShareWriteAdapter$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.ISearchManager$Stub$Proxy: java.util.List getSearchablesInGlobalSearch()> -> _SOURCE_
<android.content.pm.IPackageInstallerCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: android.content.ComponentName getProfileOwnerAsUser(android.os.UserHandle)> -> _SOURCE_
<android.content.pm.PackageInstaller: java.util.List getActiveStagedSessions()> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: android.os.Bundle getMetaData()> -> _SOURCE_
<android.telephony.ServiceState: java.lang.String getDataOperatorNumeric()> -> _SOURCE_
<android.database.AbstractCursor: android.os.Bundle getExtras()> -> _SOURCE_
<android.os.storage.StorageManager: boolean isFileEncryptedEmulatedOnly()> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getVoiceMailNumberForSubscriber(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.text.style.ImageSpan: java.lang.String getSource()> -> _SOURCE_
<android.telephony.TelephonyManager: int[] getAllNetworkTypes()> -> _SOURCE_
<android.telephony.ims.ImsMmTelManager: boolean isVoWiFiSettingEnabled()> -> _SOURCE_
<android.app.WallpaperInfo: java.lang.String getSettingsActivity()> -> _SOURCE_
<android.telephony.TelephonyManager: int getSimCarrierId()> -> _SOURCE_
<android.bluetooth.IBluetoothSap$Default: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
<android.app.backup.IRestoreObserver$Stub: android.app.backup.IRestoreObserver getDefaultImpl()> -> _SOURCE_
<com.android.internal.telephony.CellBroadcastUtils: java.lang.String getDefaultCellBroadcastReceiverPackageName(android.content.Context)> -> _SOURCE_
<android.content.pm.IOnAppsChangedListener$Stub: android.content.pm.IOnAppsChangedListener getDefaultImpl()> -> _SOURCE_
<android.media.audiopolicy.AudioMixingRule: java.util.ArrayList getCriteria()> -> _SOURCE_
<android.bluetooth.IBluetoothManager$Stub: android.bluetooth.IBluetoothManager getDefaultImpl()> -> _SOURCE_
<com.android.internal.util.State: java.lang.String getName()> -> _SOURCE_
<android.content.pm.PackageManager: java.lang.CharSequence getHarmfulAppWarning(java.lang.String)> -> _SOURCE_
<android.telephony.VisualVoicemailSmsFilterSettings$Builder: java.lang.String access$400(android.telephony.VisualVoicemailSmsFilterSettings$Builder)> -> _SOURCE_
<android.hardware.radio.RadioManager$FmBandConfig: boolean getTa()> -> _SOURCE_
<android.app.ApplicationPackageManager: android.content.Intent getLeanbackLaunchIntentForPackage(java.lang.String)> -> _SOURCE_
<android.hardware.usb.IUsbManager$Stub: android.hardware.usb.IUsbManager getDefaultImpl()> -> _SOURCE_
<android.view.textclassifier.TextClassifierEvent: java.lang.String getModelName()> -> _SOURCE_
<android.view.inputmethod.InputMethodManager: boolean isAcceptingText()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: long getRequiredStrongAuthTimeout(android.content.ComponentName,int)> -> _SOURCE_
<android.os.BasicShellCommandHandler: android.os.Binder getTarget()> -> _SOURCE_
<android.renderscript.BaseObj: java.lang.String getName()> -> _SOURCE_
<android.location.GpsMeasurement: double getTimeOffsetInNs()> -> _SOURCE_
<android.hardware.radio.ProgramSelector: android.hardware.radio.ProgramSelector$Identifier getPrimaryId()> -> _SOURCE_
<android.media.IAudioServerStateDispatcher$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.internal.telephony.ISub$Default: java.util.List getAvailableSubscriptionInfoList(java.lang.String,java.lang.String)> -> _SOURCE_
<android.util.jar.StrictJarFile: android.util.jar.StrictJarManifest getManifest()> -> _SOURCE_
<android.view.WindowlessWindowManager: android.view.SurfaceControl getSurfaceControl(android.view.View)> -> _SOURCE_
<android.view.DragEvent: java.lang.Object getLocalState()> -> _SOURCE_
<com.android.internal.telephony.IIntegerConsumer$Stub: com.android.internal.telephony.IIntegerConsumer getDefaultImpl()> -> _SOURCE_
<android.security.KeyStore: android.content.Context getApplicationContext()> -> _SOURCE_
<android.net.lowpan.ILowpanManager$Stub$Proxy: android.net.lowpan.ILowpanInterface getInterface(java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.ISms$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.graphics.drawable.GradientDrawable: float getThicknessRatio()> -> _SOURCE_
<android.app.WallpaperManager: android.content.ComponentName getDefaultWallpaperComponent(android.content.Context)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: int getPasswordMinimumLetters(android.content.ComponentName,int)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: int getCarrierIdFromMccMnc(int,java.lang.String,boolean)> -> _SOURCE_
<android.content.UndoManager: java.lang.CharSequence getUndoLabel(android.content.UndoOwner[])> -> _SOURCE_
<android.telephony.VisualVoicemailSms$Builder: java.lang.String access$100(android.telephony.VisualVoicemailSms$Builder)> -> _SOURCE_
<android.os.storage.IStorageManager$Stub$Proxy: long getCacheQuotaBytes(java.lang.String,int)> -> _SOURCE_
<com.android.internal.telephony.ICarrierConfigLoader$Stub: java.lang.String getTransactionName(int)> -> _SOURCE_
<android.window.ITaskOrganizerController$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.net.INetworkManagementEventObserver$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.media.AudioPlaybackCaptureConfiguration: int[] getMatchingUids()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: java.lang.String getLabel()> -> _SOURCE_
<android.media.MediaPlayer$2$1: android.os.Looper getSubtitleLooper()> -> _SOURCE_
<android.bluetooth.BluetoothHearingAid: java.util.List getActiveDevices()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean isVideoTelephonyAvailable(int)> -> _SOURCE_
<android.app.PendingIntent: android.os.UserHandle getCreatorUserHandle()> -> _SOURCE_
<android.hardware.cas.V1_2.ICasListener$Stub: java.util.ArrayList getHashChain()> -> _SOURCE_
<android.view.ViewOverlay: android.view.ViewGroup getOverlayView()> -> _SOURCE_
<android.bluetooth.le.IAdvertisingSetCallback$Stub: android.bluetooth.le.IAdvertisingSetCallback getDefaultImpl()> -> _SOURCE_
<android.net.wifi.nl80211.IWificond$Stub$Proxy: int[] getAvailableDFSChannels()> -> _SOURCE_
<android.system.suspend.ISuspendControlService$Stub$Proxy: android.system.suspend.WakeLockInfo[] getWakeLockStats()> -> _SOURCE_
<android.os.MessageQueue: boolean isPolling()> -> _SOURCE_
<android.provider.Settings$Global: java.lang.String getString(android.content.ContentResolver,java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: android.os.IBinder asBinder()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean needsOtaServiceProvisioning()> -> _SOURCE_
<android.os.storage.IStorageManager$Stub$Proxy: long getAllocatableBytes(java.lang.String,int,java.lang.String)> -> _SOURCE_
<android.net.IConnectivityManager$Default: android.net.NetworkRequest getDefaultRequest()> -> _SOURCE_
<android.net.nsd.INsdManager$Default: android.os.Messenger getMessenger()> -> _SOURCE_
<android.os.IRecoverySystemProgressListener$Stub: android.os.IRecoverySystemProgressListener getDefaultImpl()> -> _SOURCE_
<android.animation.AnimatorSet$AnimationEvent: long getTime()> -> _SOURCE_
<android.view.Choreographer: android.view.Choreographer getInstance()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getSimOperatorNameForPhone(int)> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Default: java.util.List getDefaultCrossProfilePackages()> -> _SOURCE_
<android.telephony.PhoneNumberUtils: boolean isEmergencyNumber(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.os.IVoldTaskListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.assist.AssistContent: android.net.Uri getWebUri()> -> _SOURCE_
<android.content.pm.parsing.component.ParsedProvider: java.lang.String getWritePermission()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo$RangeInfo: float getCurrent()> -> _SOURCE_
<android.media.IStrategyPreferredDeviceDispatcher$Stub: android.media.IStrategyPreferredDeviceDispatcher getDefaultImpl()> -> _SOURCE_
<com.android.internal.inputmethod.IExtractedTextResultCallback$Stub: com.android.internal.inputmethod.IExtractedTextResultCallback getDefaultImpl()> -> _SOURCE_
<android.telephony.data.ApnSetting: boolean getPermanentFailed()> -> _SOURCE_
<android.app.job.JobInfo: android.content.ClipData getClipData()> -> _SOURCE_
<android.drm.DrmRights: byte[] getData()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub: android.app.admin.IDevicePolicyManager getDefaultImpl()> -> _SOURCE_
<android.view.contentcapture.ViewNode: java.lang.CharSequence[] getAutofillOptions()> -> _SOURCE_
<android.telephony.ims.aidl.IImsMmTelFeature$Default: com.android.ims.internal.IImsMultiEndpoint getMultiEndpointInterface()> -> _SOURCE_
<android.telephony.CellSignalStrengthNr: int getCsiSinr()> -> _SOURCE_
<android.content.Intent: android.graphics.Rect getSourceBounds()> -> _SOURCE_
<android.nfc.cardemulation.NfcFServiceInfo: java.lang.String getDescription()> -> _SOURCE_
<android.bluetooth.IBluetoothAvrcpController$Default: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
<android.os.connectivity.WifiBatteryStats: long getMonitoredRailChargeConsumedMaMillis()> -> _SOURCE_
<android.telephony.SubscriptionManager: void clearCaches()> -> _SOURCE_
<android.app.DexLoadReporter: android.app.DexLoadReporter getInstance()> -> _SOURCE_
<android.net.lowpan.LowpanIdentity: byte[] getRawName()> -> _SOURCE_
<android.widget.Spinner$DialogPopup: boolean isShowing()> -> _SOURCE_
<android.hardware.input.ITabletModeChangedListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.view.accessibility.AccessibilityManager: int getAccessibilityWindowId(android.os.IBinder)> -> _SOURCE_
<android.net.INetworkStatsSession$Stub$Proxy: android.net.NetworkStats getSummaryForAllUid(android.net.NetworkTemplate,long,long,boolean)> -> _SOURCE_
<android.nfc.NfcAdapter: boolean isSecureNfcEnabled()> -> _SOURCE_
<android.view.InsetsController: android.view.InsetsSourceConsumer getSourceConsumer(int)> -> _SOURCE_
<android.view.IDisplayWindowListener$Stub: android.view.IDisplayWindowListener getDefaultImpl()> -> _SOURCE_
<android.net.LocalSocket: java.io.FileDescriptor[] getAncillaryFileDescriptors()> -> _SOURCE_
<android.media.session.MediaController: android.media.session.MediaController$PlaybackInfo getPlaybackInfo()> -> _SOURCE_
<android.app.NotificationManager: java.util.Map getAutomaticZenRules()> -> _SOURCE_
<android.app.IServiceConnection$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.media.IAudioServerStateDispatcher$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.ApplicationPackageManager: java.lang.String getNameForUid(int)> -> _SOURCE_
<android.service.autofill.FieldClassification$Match: float getScore()> -> _SOURCE_
<com.android.internal.telephony.ISub$Default: int getActiveSubInfoCount(java.lang.String,java.lang.String)> -> _SOURCE_
<android.app.usage.UsageStatsManager: java.util.List queryEventStats(int,long,long)> -> _SOURCE_
<android.service.gatekeeper.IGateKeeperService$Stub: android.service.gatekeeper.IGateKeeperService getDefaultImpl()> -> _SOURCE_
<com.android.internal.compat.IPlatformCompat$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.os.RuntimeInit: android.os.IBinder getApplicationObject()> -> _SOURCE_
<android.graphics.BLASTBufferQueue: android.view.Surface getSurface()> -> _SOURCE_
<android.telephony.CellIdentityNr: int getNrarfcn()> -> _SOURCE_
<android.telephony.TelephonyHistogram: int describeContents()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Default: long getLastSecurityLogRetrievalTime()> -> _SOURCE_
<android.provider.Settings$Config: java.util.Map getStrings(android.content.ContentResolver,java.lang.String,java.util.List)> -> _SOURCE_
<android.os.Looper: java.lang.Thread getThread()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: long getPasswordExpirationTimeout(android.content.ComponentName)> -> _SOURCE_
<android.app.backup.BackupManager: android.content.Intent getDataManagementIntent(java.lang.String)> -> _SOURCE_
<android.app.NotificationChannelGroup: java.util.List getChannels()> -> _SOURCE_
<android.os.UserManager: java.lang.String getUserAccount(int)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getVoiceMailAlphaTagForSubscriber(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.view.KeyboardShortcutInfo: java.lang.CharSequence getLabel()> -> _SOURCE_
<android.view.WindowlessWindowManager: android.os.IBinder asBinder()> -> _SOURCE_
<android.hardware.radio.V1_5.CellIdentity: byte getDiscriminator()> -> _SOURCE_
<com.android.internal.telephony.ISub$Stub$Proxy: int getActiveSubInfoCountMax()> -> _SOURCE_
<android.hardware.lights.ILightsManager$Stub: android.hardware.lights.ILightsManager getDefaultImpl()> -> _SOURCE_
<android.app.ContextImpl: java.io.File[] getExternalCacheDirs()> -> _SOURCE_
<android.view.accessibility.AccessibilityManager: boolean isEnabled()> -> _SOURCE_
<android.content.pm.ShortcutInfo: android.os.UserHandle getUserHandle()> -> _SOURCE_
<android.hardware.radio.RadioManager$AmBandConfig: boolean getStereo()> -> _SOURCE_
<android.inputmethodservice.InputMethodService: android.view.inputmethod.InputBinding getCurrentInputBinding()> -> _SOURCE_
<android.bluetooth.IBluetoothAvrcpController$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getCdmaEriIconModeForSubscriber(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.view.contentcapture.ViewNode$ViewStructureImpl: java.lang.CharSequence getText()> -> _SOURCE_
<android.telephony.mbms.ServiceInfo: java.util.List getLocales()> -> _SOURCE_
<android.print.PrinterCapabilitiesInfo: android.print.PrintAttributes getDefaults()> -> _SOURCE_
<com.android.internal.view.InlineSuggestionsRequestInfo: android.view.autofill.AutofillId getAutofillId()> -> _SOURCE_
<android.app.IRequestFinishCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telephony.SmsCbEtwsInfo: boolean isPopupAlert()> -> _SOURCE_
<android.app.timezonedetector.ITimeZoneDetectorService$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.os.storage.VolumeInfo: java.lang.String getFsUuid()> -> _SOURCE_
<android.telephony.SubscriptionManager: void invalidateDefaultDataSubIdCaches()> -> _SOURCE_
<android.app.Activity: java.lang.Object getLastNonConfigurationInstance()> -> _SOURCE_
<android.bluetooth.IBluetoothSap$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telephony.ims.aidl.IRcsFeatureListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.telephony.ISetOpportunisticDataCallback$Stub: com.android.internal.telephony.ISetOpportunisticDataCallback asInterface(android.os.IBinder)> -> _SOURCE_
<android.media.projection.IMediaProjectionManager$Default: android.media.projection.MediaProjectionInfo getActiveProjectionInfo()> -> _SOURCE_
<android.hardware.display.IDisplayManager$Default: android.graphics.Point getStableDisplaySize()> -> _SOURCE_
<android.view.IOnKeyguardExitResult$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.telephony.euicc.IGetSmdsAddressCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.webkit.Plugin: java.lang.String getDescription()> -> _SOURCE_
<android.hardware.hdmi.IHdmiInputChangeListener$Stub: android.hardware.hdmi.IHdmiInputChangeListener getDefaultImpl()> -> _SOURCE_
<android.view.PendingInsetsController: android.view.InsetsState getState()> -> _SOURCE_
<android.os.BinderProxy: android.os.BinderProxy$InterfaceCount[] getSortedInterfaceCounts(int)> -> _SOURCE_
<android.media.MediaDrm$Certificate: byte[] getWrappedPrivateKey()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: java.lang.String getVisualVoicemailPackageName(java.lang.String,java.lang.String,int)> -> _SOURCE_
<android.hardware.cas.V1_1.IMediaCasService$Stub: java.util.ArrayList getHashChain()> -> _SOURCE_
<android.service.oemlock.OemLockManager: boolean isOemUnlockAllowed()> -> _SOURCE_
<android.permission.PermissionControllerManager$1: long getRequestTimeoutMs()> -> _SOURCE_
<com.android.internal.app.IAppOpsNotedCallback$Stub: com.android.internal.app.IAppOpsNotedCallback getDefaultImpl()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: void getImsMmTelFeatureState(int,com.android.internal.telephony.IIntegerConsumer)> -> _SOURCE_
<android.hardware.display.WifiDisplayStatus: android.hardware.display.WifiDisplay[] getDisplays()> -> _SOURCE_
<android.content.pm.PackageParser$PackageLite: java.util.List getAllCodePaths()> -> _SOURCE_
<android.telephony.data.ApnSetting: java.lang.String getProtocolStringFromInt(int)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: android.telephony.VisualVoicemailSmsFilterSettings getVisualVoicemailSmsFilterSettings(java.lang.String,int)> -> _SOURCE_
<android.content.pm.PackageParser$Package: boolean isExternal()> -> _SOURCE_
<android.content.pm.PackageParser$Package: boolean isPrivileged()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.lang.String getNetworkCountryIsoForPhone(int)> -> _SOURCE_
<com.android.internal.telephony.euicc.IEuiccController$Stub: com.android.internal.telephony.euicc.IEuiccController getDefaultImpl()> -> _SOURCE_
<android.net.http.SslCertificate: java.util.Date getValidNotAfterDate()> -> _SOURCE_
<com.android.internal.view.menu.MenuItemImpl: android.content.Intent getIntent()> -> _SOURCE_
<android.app.IProcessObserver$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.telephony.EncodeException: int getError()> -> _SOURCE_
<android.location.IGnssMeasurementsListener$Stub: android.location.IGnssMeasurementsListener getDefaultImpl()> -> _SOURCE_
<android.media.AudioFocusInfo: long getGen()> -> _SOURCE_
<android.content.pm.ShortcutManager$ShareShortcutInfo: android.content.pm.ShortcutInfo getShortcutInfo()> -> _SOURCE_
<android.view.DragEvent: float getY()> -> _SOURCE_
<com.android.internal.telephony.INumberVerificationCallback$Stub: java.lang.String getTransactionName(int)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: int getOrganizationColorForUser(int)> -> _SOURCE_
<android.nfc.cardemulation.NfcFCardEmulation: java.lang.String getSystemCodeForService(android.content.ComponentName)> -> _SOURCE_
<android.hardware.camera2.impl.CameraMetadataNative: java.lang.Object get(android.hardware.camera2.impl.CameraMetadataNative$Key)> -> _SOURCE_
<android.app.blob.IBlobStoreSession$Stub: android.app.blob.IBlobStoreSession getDefaultImpl()> -> _SOURCE_
<com.android.internal.telephony.SmsApplication: java.util.Collection getApplicationCollection(android.content.Context)> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: java.util.List getMostRecentlyConnectedDevices()> -> _SOURCE_
<com.android.internal.telecom.ITelecomService$Stub$Proxy: java.util.List getAllPhoneAccounts()> -> _SOURCE_
<android.telephony.BarringInfo: android.telephony.BarringInfo create(android.hardware.radio.V1_5.CellIdentity,java.util.List)> -> _SOURCE_
<android.accounts.IAccountManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.internal.inputmethod.IIntResultCallback$Stub: com.android.internal.inputmethod.IIntResultCallback getDefaultImpl()> -> _SOURCE_
<android.telephony.CarrierRestrictionRules: boolean isAllCarriersAllowed()> -> _SOURCE_
<android.telephony.VisualVoicemailService: android.os.IBinder onBind(android.content.Intent)> -> _SOURCE_
<android.content.res.Resources: java.lang.ClassLoader getClassLoader()> -> _SOURCE_
<android.os.UserManager: java.lang.CharSequence getBadgedLabelForUser(java.lang.CharSequence,android.os.UserHandle)> -> _SOURCE_
<android.media.MediaCas$PluginDescriptor: java.lang.String getName()> -> _SOURCE_
<android.telephony.UiccCardInfo: int getCardId()> -> _SOURCE_
<android.hardware.camera2.impl.RequestLastFrameNumbersHolder: long getLastFrameNumber()> -> _SOURCE_
<android.telephony.Rlog: java.lang.String pii(boolean,java.lang.Object)> -> _SOURCE_
<android.media.IAudioService$Default: java.util.List getAudioProductStrategies()> -> _SOURCE_
<android.content.pm.parsing.component.ParsedProvider: java.lang.String getAuthority()> -> _SOURCE_
<android.content.IContentService$Default: java.util.List getCurrentSyncsAsUser(int)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.lang.String getApplicationRestrictionsManagingPackage(android.content.ComponentName)> -> _SOURCE_
<android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri)> -> _SOURCE_
<android.security.keystore.IKeystoreCertificateChainCallback$Stub: android.security.keystore.IKeystoreCertificateChainCallback getDefaultImpl()> -> _SOURCE_
<android.view.inputmethod.InputMethodManager: java.util.List getEnabledInputMethodSubtypeList(android.view.inputmethod.InputMethodInfo,boolean)> -> _SOURCE_
<android.os.connectivity.WifiActivityEnergyInfo: long getControllerEnergyUsedMicroJoules()> -> _SOURCE_
<android.media.AudioManager: java.lang.String getProperty(java.lang.String)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: com.android.internal.os.BatteryStatsImpl$ControllerActivityCounterImpl getOrCreateWifiControllerActivityLocked()> -> _SOURCE_
<android.content.pm.DataLoaderParams: android.content.pm.DataLoaderParamsParcel getData()> -> _SOURCE_
<android.view.SurfaceControl: java.lang.Throwable getReleaseStack()> -> _SOURCE_
<android.os.Message: java.lang.Runnable getCallback()> -> _SOURCE_
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: android.widget.RemoteViews getAppWidgetViews(java.lang.String,int)> -> _SOURCE_
<android.bluetooth.IBluetoothPan$Stub$Proxy: java.util.List getConnectedDevices()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: int getMaximumFailedPasswordsForWipe(android.content.ComponentName,int)> -> _SOURCE_
<android.view.IWindowSession$Default: boolean getInTouchMode()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getSimCountryIso(int)> -> _SOURCE_
<android.os.ISystemConfig$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.os.IThermalService$Default: android.os.Temperature[] getCurrentTemperatures()> -> _SOURCE_
<android.app.IBackupAgent$Stub: android.app.IBackupAgent getDefaultImpl()> -> _SOURCE_
<com.android.internal.view.menu.MenuBuilder: android.content.res.Resources getResources()> -> _SOURCE_
<android.graphics.Paint: android.graphics.PathEffect getPathEffect()> -> _SOURCE_
<android.net.lowpan.LowpanManager: android.net.lowpan.LowpanInterface getInterface(android.net.lowpan.ILowpanInterface)> -> _SOURCE_
<android.view.textclassifier.ConversationActions$Request: java.util.List getHints()> -> _SOURCE_
<android.media.ExifInterface: long[] getThumbnailRange()> -> _SOURCE_
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice getInstantApps(int)> -> _SOURCE_
<android.content.pm.ShortcutInfo: java.lang.String getResourcePackageName(java.lang.String)> -> _SOURCE_
<android.accessibilityservice.AccessibilityButtonController: boolean isAccessibilityButtonAvailable()> -> _SOURCE_
<android.view.autofill.AutofillManager: android.view.autofill.AutofillId getNextAutofillId()> -> _SOURCE_
<android.hardware.camera2.impl.CaptureCallback: java.util.concurrent.Executor getExecutor()> -> _SOURCE_
<com.android.internal.content.om.OverlayConfig: com.android.internal.content.om.OverlayConfig getSystemInstance()> -> _SOURCE_
<android.view.IPinnedStackController$Stub: android.view.IPinnedStackController getDefaultImpl()> -> _SOURCE_
<android.telephony.SubscriptionManager: int getSlotIndex(int)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: boolean isTtyOverVolteEnabled(int)> -> _SOURCE_
<com.android.internal.view.BaseSurfaceHolder: android.view.SurfaceHolder$Callback[] getCallbacks()> -> _SOURCE_
<android.view.ViewPropertyAnimator: android.animation.TimeInterpolator getInterpolator()> -> _SOURCE_
<android.view.textclassifier.TextClassification$Request: java.lang.CharSequence getText()> -> _SOURCE_
<android.service.vr.IVrManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.hardware.ICamera$Stub: android.hardware.ICamera getDefaultImpl()> -> _SOURCE_
<com.android.internal.view.menu.MenuAdapter: com.android.internal.view.menu.MenuBuilder getAdapterMenu()> -> _SOURCE_
<android.location.GpsMeasurement: double getElevationInDeg()> -> _SOURCE_
<com.android.ims.internal.IImsVideoCallProvider$Stub: com.android.ims.internal.IImsVideoCallProvider getDefaultImpl()> -> _SOURCE_
<android.telephony.CellInfoWcdma: android.telephony.CellInfoWcdma createFromParcelBody(android.os.Parcel)> -> _SOURCE_
<android.app.LocalActivityManager: android.app.Activity getCurrentActivity()> -> _SOURCE_
<com.android.internal.telephony.ISms$Stub: android.os.IBinder asBinder()> -> _SOURCE_
<android.graphics.ImageDecoder: android.graphics.PostProcessor getPostProcessor()> -> _SOURCE_
<android.graphics.drawable.Drawable: int getIntrinsicWidth()> -> _SOURCE_
<android.os.UserManager: boolean isAdminUser()> -> _SOURCE_
<android.app.INotificationManager$Default: android.content.ComponentName getAllowedNotificationAssistant()> -> _SOURCE_
<android.app.usage.NetworkStats: android.app.usage.NetworkStats$Bucket getSummaryAggregate()> -> _SOURCE_
<android.content.ComponentName: java.lang.String getClassName()> -> _SOURCE_
<android.telephony.NetworkRegistrationInfo: int getAccessNetworkTechnology()> -> _SOURCE_
<android.graphics.RenderNode: float getTranslationZ()> -> _SOURCE_
<android.hardware.camera2.impl.CameraOfflineSessionImpl: android.view.Surface getInputSurface()> -> _SOURCE_
<android.net.wifi.nl80211.WifiNl80211Manager: android.net.wifi.nl80211.WifiNl80211Manager$TxPacketCounters getTxPacketCounters(java.lang.String)> -> _SOURCE_
<android.app.IActivityTaskManager$Stub$Proxy: android.app.ActivityManager$StackInfo getStackInfoOnDisplay(int,int,int)> -> _SOURCE_
<android.service.autofill.UserData: java.lang.String[] getValues()> -> _SOURCE_
<android.app.job.JobInfo: long getEstimatedNetworkUploadBytes()> -> _SOURCE_
<android.hardware.camera2.CaptureRequest: java.lang.String getLogicalCameraId()> -> _SOURCE_
<android.app.Activity: android.content.Intent getParentActivityIntent()> -> _SOURCE_
<android.net.Network: javax.net.SocketFactory getSocketFactory()> -> _SOURCE_
<android.app._$$Lambda$SystemServiceRegistry$16$s6mZ42tuGUunhKa_5iwjLY5FGdM: java.lang.Object get()> -> _SOURCE_
<android.app.IActivityManager$Stub$Proxy: android.app.PendingIntent getRunningServiceControlPanel(android.content.ComponentName)> -> _SOURCE_
<android.widget.Toolbar: java.lang.CharSequence getTitle()> -> _SOURCE_
<android.telephony.ServiceState: int getCdmaEriIconIndex()> -> _SOURCE_
<android.hardware.location.ContextHubManager: android.hardware.location.ContextHubTransaction queryNanoApps(android.hardware.location.ContextHubInfo)> -> _SOURCE_
<android.accessibilityservice.util.AccessibilityUtils: java.lang.String getFilteredHtmlText(java.lang.String)> -> _SOURCE_
<android.view.ViewGroup: android.view.ViewGroupOverlay getOverlay()> -> _SOURCE_
<android.os.IInstalld$Stub$Proxy: long[] getExternalSize(java.lang.String,int,int,int[])> -> _SOURCE_
<android.view.animation.Animation: boolean getFillBefore()> -> _SOURCE_
<android.service.vr.IVrManager$Default: boolean getVrModeState()> -> _SOURCE_
<com.android.internal.view.menu.MenuBuilder: android.content.Context getContext()> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: long getDiscoveryEndMillis()> -> _SOURCE_
<android.view.inputmethod.InputMethodSubtype: java.lang.CharSequence getDisplayName(android.content.Context,java.lang.String,android.content.pm.ApplicationInfo)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getPreferredNetworkType(int)> -> _SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkRequest getDefaultRequest()> -> _SOURCE_
<android.app.ContextImpl: java.lang.ClassLoader getClassLoader()> -> _SOURCE_
<android.app.ApplicationPackageManager: android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName,int)> -> _SOURCE_
<android.os.PowerManager: float getBrightnessConstraint(int)> -> _SOURCE_
<android.app.usage.NetworkStats$Bucket: long getStartTimeStamp()> -> _SOURCE_
<android.app.LoadedApk: java.io.File getCredentialProtectedDataDirFile()> -> _SOURCE_
<android.hardware.soundtrigger.SoundTrigger$SoundModel: byte[] getData()> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageUtils: android.content.pm.PackageParser$SigningDetails getSigningDetails(android.content.pm.parsing.ParsingPackageRead,boolean)> -> _SOURCE_
<android.graphics.text.LineBreaker$ParagraphConstraints: float getFirstWidth()> -> _SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: android.net.LinkProperties getLinkPropertiesForType(int)> -> _SOURCE_
<android.net.LinkProperties: java.util.List getLinkAddresses()> -> _SOURCE_
<android.text.method.DateKeyListener: char[] getAcceptedChars()> -> _SOURCE_
<android.view.InsetsSourceControl: android.graphics.Point getSurfacePosition()> -> _SOURCE_
<android.telephony.TelephonyManager: void requestNumberVerification(android.telephony.PhoneNumberRange,long,java.util.concurrent.Executor,android.telephony.NumberVerificationCallback)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean isTtyModeSupported()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.util.List getPackagesWithCarrierPrivilegesForAllPhones()> -> _SOURCE_
<android.telephony.ims.aidl.IRcsFeatureListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.transition.Transition: android.transition.Transition$EpicenterCallback getEpicenterCallback()> -> _SOURCE_
<android.content.Intent: java.lang.String getType()> -> _SOURCE_
<android.webkit.MimeTypeMap: java.lang.String getFileExtensionFromUrl(java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.INumberVerificationCallback$Stub: com.android.internal.telephony.INumberVerificationCallback asInterface(android.os.IBinder)> -> _SOURCE_
<android.media.MediaCodecList: java.util.Map getGlobalSettings()> -> _SOURCE_
<android.telephony.SmsMessage$NoEmsSupportConfig: java.lang.String toString()> -> _SOURCE_
<com.android.ims.internal.IImsEcbm$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.bluetooth.le.ScanFilter: java.lang.String getDeviceName()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getImei(int)> -> _SOURCE_
<android.view.inputmethod.InputConnectionWrapper: android.os.Handler getHandler()> -> _SOURCE_
<android.media.session.MediaController: android.media.MediaMetadata getMetadata()> -> _SOURCE_
<android.appwidget.AppWidgetManager: int[] getAppWidgetIds(android.content.ComponentName)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean isEmergencyNumber(java.lang.String,boolean)> -> _SOURCE_
<android.telephony.PreciseCallState: int getRingingCallState()> -> _SOURCE_
<android.util.apk.WrappedX509Certificate: byte[] getEncoded()> -> _SOURCE_
<android.graphics.Bitmap: android.hardware.HardwareBuffer getHardwareBuffer()> -> _SOURCE_
<android.app.Notification$BigPictureStyle: android.graphics.Bitmap getBigPicture()> -> _SOURCE_
<com.android.internal.telephony.euicc.IGetEuiccInfo2Callback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.net.RouteInfo: java.net.InetAddress getGateway()> -> _SOURCE_
<com.android.internal.policy.PhoneWindow: float getElevation()> -> _SOURCE_
<android.net.IEthernetManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.ContextImpl: java.io.File getNoBackupFilesDir()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: int getCarrierPrivilegeStatusForUid(int,int)> -> _SOURCE_
<android.app.usage.IStorageStatsManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.view.accessibility.IAccessibilityInteractionConnection$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.NotificationHistory: java.util.List getNotificationsToWrite()> -> _SOURCE_
<com.android.ims.internal.IImsMultiEndpoint$Stub: com.android.ims.internal.IImsMultiEndpoint getDefaultImpl()> -> _SOURCE_
<android.net.LinkProperties: boolean isIPv6Provisioned()> -> _SOURCE_
<android.media.MediaRouter$RouteInfo: android.view.Display getPresentationDisplay()> -> _SOURCE_
<android.hardware.camera2.impl.FrameNumberTracker: long getCompletedReprocessFrameNumber()> -> _SOURCE_
<android.widget.EditText: java.lang.CharSequence getAccessibilityClassName()> -> _SOURCE_
<android.telephony.euicc.EuiccManager: java.util.List getSupportedCountries()> -> _SOURCE_
<android.telephony.VisualVoicemailSms: android.os.Bundle getFields()> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Default: java.lang.String getLine1AlphaTag(java.lang.String,java.lang.String)> -> _SOURCE_
<android.telephony.CellIdentityCdma: int hashCode()> -> _SOURCE_
<android.bluetooth.BluetoothActivityEnergyInfo: long getTimeStamp()> -> _SOURCE_
<android.os.MemoryFile: java.io.OutputStream getOutputStream()> -> _SOURCE_
<android.content.ContextWrapper: java.io.File getExternalCacheDir()> -> _SOURCE_
<android.app.Activity: android.os.IBinder getActivityToken()> -> _SOURCE_
<android.media.session.IOnMediaKeyEventSessionChangedListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.os.Environment: java.io.File getDataSystemDirectory()> -> _SOURCE_
<android.view.IGraphicsStats$Stub: android.view.IGraphicsStats getDefaultImpl()> -> _SOURCE_
<android.telephony.CellIdentity: int describeContents()> -> _SOURCE_
<android.telephony.ims.feature.RcsFeature: android.telephony.ims.stub.RcsSipOptionsImplBase getOptionsExchangeImpl()> -> _SOURCE_
<com.android.internal.telephony.ISub$Default: int getPhoneId(int)> -> _SOURCE_
<android.app.IUiAutomationConnection$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.util.proto.ProtoOutputStream: byte[] getBytes()> -> _SOURCE_
<android.os.storage.VolumeInfo: java.lang.String getDiskId()> -> _SOURCE_
<android.hardware.location.GeofenceHardwareRequestParcelable: double getLongitude()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.app.ApplicationPackageManager: java.lang.String getWellbeingPackageName()> -> _SOURCE_
<android.service.oemlock.IOemLockService$Stub: android.service.oemlock.IOemLockService getDefaultImpl()> -> _SOURCE_
<android.telephony.PhoneNumberUtils: boolean isStartsPostDial(char)> -> _SOURCE_
<android.view.WindowlessWindowManager: boolean getInTouchMode()> -> _SOURCE_
<com.android.internal.telephony.IPhoneStateListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.internal.telephony.euicc.ISetDefaultSmdpAddressCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.ActivityThread: android.app.Instrumentation getInstrumentation()> -> _SOURCE_
<android.telephony.CellInfoGsm: android.telephony.CellInfoGsm createFromParcelBody(android.os.Parcel)> -> _SOURCE_
<android.location.LocationManager$GnssStatusListenerManager: android.location.GnssStatus getGnssStatus()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: boolean isWifiCallingAvailable(int)> -> _SOURCE_
<android.telephony.CdmaEriInformation: int getEriIconIndex()> -> _SOURCE_
<android.content.pm.ILauncherApps$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.os.IDeviceIdleController$Stub: android.os.IDeviceIdleController getDefaultImpl()> -> _SOURCE_
<android.content.pm.LauncherApps$PinItemRequest: boolean isValid()> -> _SOURCE_
<android.app.IWallpaperManagerCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.net.ConnectivityManager: byte[] getNetworkWatchlistConfigHash()> -> _SOURCE_
<android.os.storage.StorageManager: android.os.storage.StorageVolume[] getVolumeList()> -> _SOURCE_
<android.net.ProxyInfo: android.net.Uri getPacFileUrl()> -> _SOURCE_
<android.hardware.cas.V1_2.IMediaCasService$Stub: java.util.ArrayList getHashChain()> -> _SOURCE_
<android.hardware.radio.ProgramSelector: android.hardware.radio.ProgramSelector$Identifier[] getSecondaryIds()> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.String getAlwaysOnVpnPackage(android.content.ComponentName)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean isRadioOn(java.lang.String)> -> _SOURCE_
<android.net.lowpan.LowpanInterface: android.net.LinkAddress[] getLinkAddresses()> -> _SOURCE_
<com.android.ims.internal.IImsCallSession$Default: android.telephony.ims.ImsCallProfile getRemoteCallProfile()> -> _SOURCE_
<android.animation.KeyframeSet: java.lang.Object getValue(float)> -> _SOURCE_
<android.view.accessibility.IAccessibilityEmbeddedConnection$Stub: android.view.accessibility.IAccessibilityEmbeddedConnection getDefaultImpl()> -> _SOURCE_
<android.hardware.fingerprint.IFingerprintClientActiveCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.content.ISyncStatusObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.webkit.CookieManager: java.lang.String getCookie(android.net.WebAddress)> -> _SOURCE_
<android.app.job.IJobScheduler$Default: android.content.pm.ParceledListSlice getAllPendingJobs()> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Default: java.lang.String getVoiceMailAlphaTag(java.lang.String,java.lang.String)> -> _SOURCE_
<com.android.internal.inputmethod.IExtractedTextResultCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.blob.BlobStoreManager: java.util.List queryBlobsForUser(android.os.UserHandle)> -> _SOURCE_
<android.net.ConnectivityManager: android.net.Network getActiveNetworkForUid(int,boolean)> -> _SOURCE_
<android.hardware.display.IDisplayManager$Default: int[] getDisplayIds()> -> _SOURCE_
<android.os.BatteryStatsManager: android.os.connectivity.WifiBatteryStats getWifiBatteryStats()> -> _SOURCE_
<android.os.UserManager: boolean isUserRunning(android.os.UserHandle)> -> _SOURCE_
<android.media.AudioSystem: java.lang.String getInputDeviceName(int)> -> _SOURCE_
<android.media.IAudioFocusDispatcher$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.UiccSlotInfo: int describeContents()> -> _SOURCE_
<android.bluetooth.IBluetoothHeadsetClient$Stub$Proxy: java.util.List getConnectedDevices()> -> _SOURCE_
<android.webkit.WebResourceResponse: java.lang.String getEncoding()> -> _SOURCE_
<android.net.ConnectivityManager: boolean isVpnLockdownEnabled(int)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: long getMaximumTimeToLock(android.content.ComponentName)> -> _SOURCE_
<android.content.ContextWrapper: android.content.pm.PackageManager getPackageManager()> -> _SOURCE_
<android.location.GpsMeasurement: byte getLossOfLock()> -> _SOURCE_
<android.hardware.input.IInputManager$Stub$Proxy: android.hardware.input.KeyboardLayout[] getKeyboardLayoutsForInputDevice(android.hardware.input.InputDeviceIdentifier)> -> _SOURCE_
<android.hardware.camera2.ICameraOfflineSession$Stub: android.hardware.camera2.ICameraOfflineSession getDefaultImpl()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid$Sensor: android.os.BatteryStats$Timer getSensorBackgroundTime()> -> _SOURCE_
<android.view.ViewConfiguration: long getDeviceGlobalActionKeyTimeout()> -> _SOURCE_
<android.media.AudioPresentation: java.util.Map getLabels()> -> _SOURCE_
<android.hardware.hdmi.IHdmiControlService$Stub$Proxy: java.util.List getInputDevices()> -> _SOURCE_
<android.view.ViewConfiguration: int getPressedStateDuration()> -> _SOURCE_
<android.content.pm.PackageManager: java.util.List getDeclaredSharedLibraries(java.lang.String,int)> -> _SOURCE_
<android.media.PlaybackParams: float getSpeed()> -> _SOURCE_
<android.view.contentcapture.ContentCaptureEvent: long getEventTime()> -> _SOURCE_
<android.content.res.loader.ResourcesProvider: android.content.res.ApkAssets getApkAssets()> -> _SOURCE_
<android.telephony.CellIdentity: int hashCode()> -> _SOURCE_
<android.webkit.WebSettings: java.lang.String getDefaultUserAgent(android.content.Context)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.view.textservice.SpellCheckerInfo: java.lang.String getSettingsActivity()> -> _SOURCE_
<android.telephony.SubscriptionPlan: java.lang.String toString()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.telephony.CellSignalStrength: int getAsuFromRssiDbm(int)> -> _SOURCE_
<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfoAsUserCached(java.lang.String,int,int)> -> _SOURCE_
<android.telephony.TelephonyManager: android.telephony.CarrierRestrictionRules getCarrierRestrictionRules()> -> _SOURCE_
<android.hardware.camera2.impl.RequestLastFrameNumbersHolder: long getLastRegularFrameNumber()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: android.telephony.UiccSlotInfo[] getUiccSlotsInfo()> -> _SOURCE_
<android.hardware.IConsumerIrService$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.hardware.IConsumerIrService$Default: int[] getCarrierFrequencies()> -> _SOURCE_
<android.telephony.CellInfoWcdma$1: android.telephony.CellInfoWcdma createFromParcel(android.os.Parcel)> -> _SOURCE_
<android.telephony.SubscriptionManager: boolean canManageSubscription(android.telephony.SubscriptionInfo)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getBasebandVersion()> -> _SOURCE_
<android.app.Fragment: android.content.res.Resources getResources()> -> _SOURCE_
<android.media.tv.ITvInputHardware$Stub: android.media.tv.ITvInputHardware getDefaultImpl()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.lang.CharSequence getShortSupportMessageForUser(android.content.ComponentName,int)> -> _SOURCE_
<android.view.SurfaceControlViewHost$SurfacePackage: android.view.SurfaceControl getSurfaceControl()> -> _SOURCE_
<android.telephony.TelephonyManager: void factoryReset(int)> -> _SOURCE_
<android.telephony.SmsMessage: android.telephony.SmsMessage$MessageClass getMessageClass()> -> _SOURCE_
<com.android.internal.net.INetworkWatchlistManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.location.Country: long getTimestamp()> -> _SOURCE_
<android.app.IAlarmCompleteListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telephony.SubscriptionInfo: java.util.List getAccessRules()> -> _SOURCE_
<android.media.IAudioRoutesObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.internal.telephony.IUpdateAvailableNetworksCallback$Stub: com.android.internal.telephony.IUpdateAvailableNetworksCallback asInterface(android.os.IBinder)> -> _SOURCE_
<com.android.internal.view.menu.MenuBuilder: com.android.internal.view.menu.MenuBuilder getRootMenu()> -> _SOURCE_
<android.view.textclassifier.TextLinks$Request: android.view.textclassifier.TextClassifier$EntityConfig getEntityConfig()> -> _SOURCE_
<android.app.ActivityThread: android.os.Handler getHandler()> -> _SOURCE_
<android.os.storage.StorageVolume: java.lang.String getMediaStoreVolumeName()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isRadioOn()> -> _SOURCE_
<android.content.IntentFilter: java.util.ArrayList getHostsList()> -> _SOURCE_
<android.view.animation.GridLayoutAnimationController: float getColumnDelay()> -> _SOURCE_
<android.telephony.CarrierConfigManager: android.os.PersistableBundle getConfig()> -> _SOURCE_
<android.app.ActivityTaskManager: int getDefaultAppRecentsLimitStatic()> -> _SOURCE_
<android.view.accessibility.IAccessibilityManagerClient$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.net.EthernetManager: java.lang.String[] getAvailableInterfaces()> -> _SOURCE_
<android.app.Fragment: android.app.FragmentManager getChildFragmentManager()> -> _SOURCE_
<android.view.textclassifier.TextLinks$TextLinkSpan: java.lang.String getUrl()> -> _SOURCE_
<android.window.WindowContainerTransaction$HierarchyOp: android.os.IBinder getNewParent()> -> _SOURCE_
<android.content.ContentProviderOperation: android.net.Uri getUri()> -> _SOURCE_
<android.app.FragmentHostCallback: boolean getRetainLoaders()> -> _SOURCE_
<android.telephony.SmsMessage: android.telephony.SmsMessage newFromCMT(byte[])> -> _SOURCE_
<android.app.role.IOnRoleHoldersChangedListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.widget.ProgressBar: android.graphics.PorterDuff$Mode getSecondaryProgressTintMode()> -> _SOURCE_
<android.hardware.display.WifiDisplayStatus: android.hardware.display.WifiDisplay getActiveDisplay()> -> _SOURCE_
<android.os.health.HealthStatsParceler: android.os.health.HealthStats getHealthStats()> -> _SOURCE_
<android.hardware.display.WifiDisplay: java.lang.String getDeviceName()> -> _SOURCE_
<android.os.Handler: android.os.IMessenger getIMessenger()> -> _SOURCE_
<android.view.Choreographer: android.view.Choreographer getMainThreadInstance()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean getStorageEncryption(android.content.ComponentName)> -> _SOURCE_
<android.telephony.PhoneNumberUtils: boolean isPotentialLocalEmergencyNumber(android.content.Context,int,java.lang.String)> -> _SOURCE_
<android.app.prediction.AppTarget: java.lang.String getPackageName()> -> _SOURCE_
<android.view.contentcapture.ViewNode$ViewStructureImpl: java.lang.CharSequence getHint()> -> _SOURCE_
<android.view.LayoutInflater: android.view.LayoutInflater$Factory2 getFactory2()> -> _SOURCE_
<android.telephony.data.ApnSetting: java.lang.String getApnTypesStringFromBitmask(int)> -> _SOURCE_
<android.media.session.ISessionController$Stub$Proxy: android.content.pm.ParceledListSlice getQueue()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long[] getCpuFreqs()> -> _SOURCE_
<android.app.INotificationManager$Stub$Proxy: android.app.NotificationChannelGroup getNotificationChannelGroup(java.lang.String,java.lang.String)> -> _SOURCE_
<android.content.pm.IPackageStatsObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.accessibilityservice.AccessibilityServiceInfo: boolean getCanRetrieveWindowContent()> -> _SOURCE_
<com.android.internal.telephony.ISub$Default: int getPreferredDataSubscriptionId()> -> _SOURCE_
<android.nfc.INfcTag$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telephony.CellInfoCdma$1: android.telephony.CellInfoCdma createFromParcel(android.os.Parcel)> -> _SOURCE_
<android.app.admin.SystemUpdateInfo: long getReceivedTime()> -> _SOURCE_
<android.graphics.Bitmap: long getNativeInstance()> -> _SOURCE_
<android.app.ApplicationPackageManager: int getPackageUidAsUser(java.lang.String,int,int)> -> _SOURCE_
<android.telephony.CellIdentityCdma: int getLatitude()> -> _SOURCE_
<android.app.IActivityManager$Default: java.lang.String getProviderMimeType(android.net.Uri,int)> -> _SOURCE_
<android.telephony.CallQuality: int getNumRtpPacketsReceived()> -> _SOURCE_
<android.media.AudioFocusInfo: java.lang.String getPackageName()> -> _SOURCE_
<android.telephony.SubscriptionManager: android.telephony.SubscriptionInfo getDefaultDataSubscriptionInfo()> -> _SOURCE_
<android.content.RestrictionEntry: java.lang.String getTitle()> -> _SOURCE_
<android.telephony.TelephonyScanManager: android.telephony.NetworkScan requestNetworkScan(int,android.telephony.NetworkScanRequest,java.util.concurrent.Executor,android.telephony.TelephonyScanManager$NetworkScanCallback,java.lang.String,java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean isTtyOverVolteEnabled(int)> -> _SOURCE_
<android.media.RingtoneManager: boolean getIncludeDrm()> -> _SOURCE_
<android.os.incremental.IncrementalStorage: byte[] getFileMetadata(java.util.UUID)> -> _SOURCE_
<com.android.internal.view.menu.MenuBuilder: java.util.ArrayList getVisibleItems()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getTelephonyProperty(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.security.net.config.ApplicationConfig: boolean isCleartextTrafficPermitted()> -> _SOURCE_
<android.media.TimedMetaData: long getTimestamp()> -> _SOURCE_
<com.android.internal.telephony.ITelephonyRegistry$Stub: com.android.internal.telephony.ITelephonyRegistry asInterface(android.os.IBinder)> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getDefaultCrossProfilePackages()> -> _SOURCE_
<android.telephony.SubscriptionManager: boolean isSubscriptionVisible(android.telephony.SubscriptionInfo)> -> _SOURCE_
<android.text.style.TextAppearanceSpan: float getShadowDx()> -> _SOURCE_
<android.content.res.CompatibilityInfo: android.content.res.CompatibilityInfo$Translator getTranslator()> -> _SOURCE_
<com.android.internal.app.IVoiceInteractor$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.DataFailCause: java.lang.String toString(int)> -> _SOURCE_
<android.media.session.ISessionController$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.media.AudioPlaybackCaptureConfiguration: int[] getMatchingUsages()> -> _SOURCE_
<com.android.internal.view.FloatingActionMode: java.lang.CharSequence getSubtitle()> -> _SOURCE_
<android.content.pm.PackageManager: java.lang.String getSystemTextClassifierPackageName()> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getIccSerialNumber(java.lang.String)> -> _SOURCE_
<android.animation.AnimatorSet: long getCurrentPlayTime()> -> _SOURCE_
<android.telephony.SmsCbLocation: int describeContents()> -> _SOURCE_
<android.hardware.radio.Announcement: java.util.Map getVendorInfo()> -> _SOURCE_
<android.telephony.SmsMessage: int getStatusOnSim()> -> _SOURCE_
<android.app.Instrumentation$ActivityMonitor: android.app.Instrumentation$ActivityResult getResult()> -> _SOURCE_
<android.hardware.soundtrigger.SoundTrigger$ModuleProperties: java.lang.String getSupportedModelArch()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.lang.String getAttentionServicePackageName()> -> _SOURCE_
<android.graphics.ImageDecoder$InputStreamSource: android.content.res.Resources getResources()> -> _SOURCE_
<com.android.internal.telephony.IBooleanConsumer$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.location.GnssNavigationMessage: byte[] getData()> -> _SOURCE_
<com.android.internal.telephony.ISub$Stub$Proxy: boolean isActiveSubId(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.security.keystore.recovery.KeyChainSnapshot: long getCounterId()> -> _SOURCE_
<android.telephony.UiccAccessRule: android.telephony.UiccAccessRule[] decodeRules(byte[])> -> _SOURCE_
<android.telephony.SubscriptionPlan: long access$702(android.telephony.SubscriptionPlan,long)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: java.util.List getCarrierPackageNamesForIntentAndPhone(android.content.Intent,int)> -> _SOURCE_
<android.renderscript.ProgramStore: android.renderscript.ProgramStore$DepthFunc getDepthFunc()> -> _SOURCE_
<android.os.IIncidentReportStatusListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.hardware.radio.IAnnouncementListener$Stub: android.hardware.radio.IAnnouncementListener getDefaultImpl()> -> _SOURCE_
<android.content.res.TypedArray: android.content.res.Resources getResources()> -> _SOURCE_
<android.content.res.FontResourcesParser$ProviderResourceEntry: java.lang.String getAuthority()> -> _SOURCE_
<android.hardware.hdmi.IHdmiRecordListener$Stub$Proxy: byte[] getOneTouchRecordSource(int)> -> _SOURCE_
<android.os.BasicShellCommandHandler: java.io.OutputStream getRawErrorStream()> -> _SOURCE_
<android.telecom.TelecomManager: boolean isVoiceMailNumber(android.telecom.PhoneAccountHandle,java.lang.String)> -> _SOURCE_
<android.content.ContextWrapper: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)> -> _SOURCE_
<android.view.IGraphicsStats$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.AppOpsManager$AppOpsCollector: java.util.concurrent.Executor getAsyncNotedExecutor()> -> _SOURCE_
<android.location.LocationRequest: android.os.WorkSource getWorkSource()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: int getDataStateForSubId(int)> -> _SOURCE_
<android.app.Fragment: android.app.LoaderManager getLoaderManager()> -> _SOURCE_
<android.telephony.MbmsDownloadSession: android.telephony.MbmsDownloadSession create(android.content.Context,java.util.concurrent.Executor,int,android.telephony.mbms.MbmsDownloadSessionCallback)> -> _SOURCE_
<android.app.backup.FullBackup$BackupScheme$PathWithRequiredFlags: java.lang.String getPath()> -> _SOURCE_
<android.telecom.PhoneAccount: java.util.List getSupportedUriSchemes()> -> _SOURCE_
<android.view.autofill.AutofillPopupWindow: android.graphics.drawable.Drawable getBackground()> -> _SOURCE_
<android.app.Fragment: android.app.Fragment getTargetFragment()> -> _SOURCE_
<android.content.res.Resources: android.content.res.ConfigurationBoundResourceCache getAnimatorCache()> -> _SOURCE_
<android.telephony.VisualVoicemailSmsFilterSettings$Builder: java.util.List access$200(android.telephony.VisualVoicemailSmsFilterSettings$Builder)> -> _SOURCE_
<android.telephony.TelephonyManager: java.util.Map getLogicalToPhysicalSlotMapping()> -> _SOURCE_
<android.provider.Browser: android.database.Cursor getAllVisitedUrls(android.content.ContentResolver)> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo$RangeInfo: float getMin()> -> _SOURCE_
<com.android.internal.app.IVoiceInteractorRequest$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.ims.internal.IImsVideoCallCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.graphics.drawable.DrawableWrapper: android.graphics.ColorFilter getColorFilter()> -> _SOURCE_
<android.content.IRestrictionsManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telephony.SubscriptionManager: boolean allDefaultsSelected()> -> _SOURCE_
<android.app.usage.StorageStatsManager: android.app.usage.ExternalStorageStats queryExternalStatsForUser(java.util.UUID,android.os.UserHandle)> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothDevice getRemoteDevice(byte[])> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<com.android.internal.infra.IAndroidFuture$Stub: com.android.internal.infra.IAndroidFuture getDefaultImpl()> -> _SOURCE_
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String[] getNamesForUids(int[])> -> _SOURCE_
<android.net.wifi.nl80211.IInterfaceEventCallback$Stub: android.net.wifi.nl80211.IInterfaceEventCallback getDefaultImpl()> -> _SOURCE_
<android.net.IpSecManager: android.net.IpSecManager$UdpEncapsulationSocket openUdpEncapsulationSocket()> -> _SOURCE_
<android.content.pm.PackageManager: java.util.List queryIntentContentProvidersAsUser(android.content.Intent,int,android.os.UserHandle)> -> _SOURCE_
<android.hardware.cas.V1_2.ICasListener$Proxy: java.util.ArrayList getHashChain()> -> _SOURCE_
<android.os.PowerManager: boolean isAmbientDisplaySuppressedForToken(java.lang.String)> -> _SOURCE_
<android.view.accessibility.IWindowMagnificationConnectionCallback$Stub: android.view.accessibility.IWindowMagnificationConnectionCallback getDefaultImpl()> -> _SOURCE_
<android.hardware.Camera$Parameters: java.util.List getSupportedWhiteBalance()> -> _SOURCE_
<android.view.autofill.AutofillManager: java.lang.String getUserDataId()> -> _SOURCE_
<com.android.internal.graphics.palette.VariationalKMeansQuantizer: java.util.List getQuantizedColors()> -> _SOURCE_
<android.app.usage.StorageStats: long getDataBytes()> -> _SOURCE_
<android.content.pm.ShortcutInfo: java.lang.String getDisabledReasonDebugString(int)> -> _SOURCE_
<android.telephony.ims.aidl.IImsRcsFeature$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.graphics.drawable.VectorDrawable$VGroup: float getRotation()> -> _SOURCE_
<android.net.wifi.nl80211.IWifiScannerImpl$Stub$Proxy: android.net.wifi.nl80211.NativeScanResult[] getScanResults()> -> _SOURCE_
<android.os.UserManager: android.os.Bundle getApplicationRestrictions(java.lang.String,android.os.UserHandle)> -> _SOURCE_
<android.telephony.CellSignalStrengthWcdma: java.lang.String toString()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.bluetooth.BluetoothA2dp: android.bluetooth.BluetoothCodecStatus getCodecStatus(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<android.view.ViewConfiguration: int getTouchSlop()> -> _SOURCE_
<android.content.pm.ILauncherApps$Stub$Proxy: android.content.pm.LauncherApps$AppUsageLimit getAppUsageLimit(java.lang.String,java.lang.String,android.os.UserHandle)> -> _SOURCE_
<android.os.BatterySaverPolicyConfig: boolean getEnableNightMode()> -> _SOURCE_
<android.printservice.recommendation.IRecommendationsChangeListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.os.UserManager: int getMaxSupportedUsers()> -> _SOURCE_
<android.content.om.OverlayInfo: java.lang.String getCategory()> -> _SOURCE_
<android.security.KeyStore$OperationPromise: java.util.concurrent.CompletableFuture getFuture()> -> _SOURCE_
<android.app.PendingIntent: java.lang.String getCreatorPackage()> -> _SOURCE_
<com.android.internal.telecom.ITelecomService$Stub$Proxy: android.net.Uri getAdnUriForPhoneAccount(android.telecom.PhoneAccountHandle,java.lang.String)> -> _SOURCE_
<android.os.IThermalService$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.widget.Toolbar: android.view.Menu getMenu()> -> _SOURCE_
<android.os.storage.IStorageManager$Stub$Proxy: java.lang.String getPrimaryStorageUuid()> -> _SOURCE_
<android.telephony.SubscriptionManager: boolean isValidSubscriptionId(int)> -> _SOURCE_
<android.hardware.face.IFaceServiceReceiver$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.bluetooth.IBluetoothHeadset$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.drm.DrmRights: java.lang.String getMimeType()> -> _SOURCE_
<android.nfc.INfcFCardEmulation$Stub: android.nfc.INfcFCardEmulation getDefaultImpl()> -> _SOURCE_
<android.app.Notification$Action$WearableExtender: java.lang.CharSequence getConfirmLabel()> -> _SOURCE_
<android.net.NetworkAgentConfig: java.lang.String getLegacyTypeName()> -> _SOURCE_
<android.view.KeyboardShortcutInfo: android.graphics.drawable.Icon getIcon()> -> _SOURCE_
<android.app.slice.ISliceManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.graphics.text.MeasuredText: long getNativePtr()> -> _SOURCE_
<com.android.internal.telephony.euicc.IResetMemoryCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.Instrumentation: android.content.Context getTargetContext()> -> _SOURCE_
<android.net.TrafficStats: long getUidUdpRxBytes(int)> -> _SOURCE_
<com.android.internal.textservice.ITextServicesManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.content.ContextWrapper: android.content.res.Resources$Theme getTheme()> -> _SOURCE_
<android.os.PowerWhitelistManager: int[] getWhitelistedAppIds(boolean)> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: long getMaximumSize()> -> _SOURCE_
<android.app.usage.StorageStatsManager: java.util.Collection queryCratesForUid(java.util.UUID,int)> -> _SOURCE_
<android.text.style.EasyEditSpan: android.app.PendingIntent getPendingIntent()> -> _SOURCE_
<android.text.Spannable$Factory: android.text.Spannable$Factory getInstance()> -> _SOURCE_
<android.app.blob.BlobStoreManager: android.app.blob.LeaseInfo getLeaseInfo(android.app.blob.BlobHandle)> -> _SOURCE_
<android.media.MediaCodec$CodecException: java.lang.String getDiagnosticInfo()> -> _SOURCE_
<com.android.internal.os.RailStats: long getWifiTotalEnergyUseduWs()> -> _SOURCE_
<android.telephony.ServiceState: int getCdmaDefaultRoamingIndicator()> -> _SOURCE_
<android.hardware.fingerprint.IFingerprintServiceReceiver$Stub: android.hardware.fingerprint.IFingerprintServiceReceiver getDefaultImpl()> -> _SOURCE_
<android.content.pm.IOnAppsChangedListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.TelephonyManager: long getMaxNumberVerificationTimeoutMillis()> -> _SOURCE_
<android.hardware.radio.ProgramList: android.hardware.radio.RadioManager$ProgramInfo get(android.hardware.radio.ProgramSelector$Identifier)> -> _SOURCE_
<android.text.style.TextAppearanceSpan: java.lang.String getFamily()> -> _SOURCE_
<android.content.res.ApkAssets: android.content.res.loader.AssetsProvider getAssetsProvider()> -> _SOURCE_
<android.media.tv.ITvInputManager$Default: java.util.List getDvbDeviceList()> -> _SOURCE_
<android.widget.PopupWindow: android.graphics.Rect getTransitionEpicenter()> -> _SOURCE_
<android.hardware.Sensor: float getMaximumRange()> -> _SOURCE_
<android.os.UserManager: int getUserBadgeNoBackgroundResId(int)> -> _SOURCE_
<android.content.integrity.IAppIntegrityManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.telephony.ISub$Stub$Proxy: boolean isSubscriptionEnabled(int)> -> _SOURCE_
<android.app.Person: java.lang.String getKey()> -> _SOURCE_
<android.widget.BaseAdapter: java.lang.CharSequence[] getAutofillOptions()> -> _SOURCE_
<android.app.DisabledWallpaperManager: android.graphics.drawable.Drawable getBuiltInDrawable(int,int,boolean,float,float,int)> -> _SOURCE_
<android.hardware.radio.ITuner$Stub$Proxy: android.hardware.radio.RadioManager$BandConfig getConfiguration()> -> _SOURCE_
<android.app.blob.IBlobStoreManager$Stub$Proxy: long getRemainingLeaseQuotaBytes(java.lang.String)> -> _SOURCE_
<com.android.internal.telephony.euicc.IGetEuiccInfo1Callback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.hardware.camera2.impl.CameraMetadataNative$Key: java.lang.String getName()> -> _SOURCE_
<android.media.tv.TvInputInfo: android.hardware.hdmi.HdmiDeviceInfo getHdmiDeviceInfo()> -> _SOURCE_
<android.content.pm.IPackageManager$Stub$Proxy: java.util.List getAllPackages()> -> _SOURCE_
<android.app.INotificationManager$Stub$Proxy: android.app.NotificationManager$Policy getNotificationPolicy(java.lang.String)> -> _SOURCE_
<com.android.internal.widget.IRemoteViewsFactory$Default: android.widget.RemoteViews getLoadingView()> -> _SOURCE_
<android.net.http.SslError: java.lang.String getUrl()> -> _SOURCE_
<android.view.Window: android.view.Window getContainer()> -> _SOURCE_
<android.util.KeyValueListParser$LongValue: long getDefaultValue()> -> _SOURCE_
<android.webkit.WebViewDelegate: java.lang.String getDataDirectorySuffix()> -> _SOURCE_
<android.content.ContentResolver: java.lang.String getType(android.net.Uri)> -> _SOURCE_
<android.app.ApplicationPackageManager: android.content.pm.VerifierDeviceIdentity getVerifierDeviceIdentity()> -> _SOURCE_
<android.telephony.CellInfo$1: android.telephony.CellInfo createFromParcel(android.os.Parcel)> -> _SOURCE_
<android.app.backup.IBackupManager$Stub$Proxy: android.os.UserHandle getUserForAncestralSerialNumber(long)> -> _SOURCE_
<android.media.projection.IMediaProjectionManager$Stub: android.media.projection.IMediaProjectionManager getDefaultImpl()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.lang.String getSubscriptionSpecificCarrierName(int)> -> _SOURCE_
<android.net.NetworkStatsHistory: long getEnd()> -> _SOURCE_
<android.app.AlertDialog: android.widget.ListView getListView()> -> _SOURCE_
<android.os.IThermalStatusListener$Stub: android.os.IThermalStatusListener getDefaultImpl()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: void getImsMmTelFeatureState(int,com.android.internal.telephony.IIntegerConsumer)> -> _SOURCE_
<android.view.FrameStats: long getRefreshPeriodNano()> -> _SOURCE_
<com.android.internal.compat.IOverrideValidator$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.media.tv.ITvInputHardware$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.media.RemoteControlClient: android.media.session.MediaSession getMediaSession()> -> _SOURCE_
<android.net.IConnectivityManager$Default: android.net.Network[] getAllNetworks()> -> _SOURCE_
<android.media.IVolumeController$Stub: android.media.IVolumeController getDefaultImpl()> -> _SOURCE_
<android.location.LocationManager: int getGnssYearOfHardware()> -> _SOURCE_
<android.view.IWindowManager$Default: float[] getAnimationScales()> -> _SOURCE_
<android.provider.Telephony$Sms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[])> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.net.LinkProperties: android.net.Uri getCaptivePortalApiUrl()> -> _SOURCE_
<android.util.MapCollections$MapIterator: java.lang.Object getValue()> -> _SOURCE_
<android.util.Range: java.lang.Comparable getUpper()> -> _SOURCE_
<android.bluetooth.IBluetoothMapClient$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.hardware.camera2.impl.CameraCaptureSessionImpl: android.hardware.camera2.impl.CameraDeviceImpl$StateCallbackKK getDeviceStateCallback()> -> _SOURCE_
<android.view.animation.Animation: long getStartOffset()> -> _SOURCE_
<android.os.StatsServiceManager$ServiceRegisterer: android.os.IBinder get()> -> _SOURCE_
<android.telephony.PhoneNumberUtils: boolean isVoiceMailNumber(java.lang.String)> -> _SOURCE_
<android.app.RuntimeAppOpAccessMessage: java.lang.String getPackageName()> -> _SOURCE_
<android.hardware.biometrics.CryptoObject: javax.crypto.Cipher getCipher()> -> _SOURCE_
<android.view.accessibility.IAccessibilityManagerClient$Stub: android.view.accessibility.IAccessibilityManagerClient getDefaultImpl()> -> _SOURCE_
<android.content.pm.IPackageMoveObserver$Stub: android.content.pm.IPackageMoveObserver getDefaultImpl()> -> _SOURCE_
<android.app.NotificationChannel: java.lang.String getId()> -> _SOURCE_
<android.graphics.Canvas: long getNativeCanvasWrapper()> -> _SOURCE_
<com.android.internal.view.FloatingActionMode: android.view.Menu getMenu()> -> _SOURCE_
<android.hardware.display.DeviceProductInfo: java.lang.String getManufacturerPnpId()> -> _SOURCE_
<com.android.internal.telephony.SmsApplication$SmsApplicationData: java.lang.String access$002(com.android.internal.telephony.SmsApplication$SmsApplicationData,java.lang.String)> -> _SOURCE_
<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewFormats()> -> _SOURCE_
<android.app.ContextImpl: android.view.Display getDisplayNoVerify()> -> _SOURCE_
<android.net.NetworkPolicy: byte[] getBytesForBackup()> -> _SOURCE_
<android.hardware.camera2.utils.ConcurrentCameraIdCombination: java.util.Set getConcurrentCameraIdCombination()> -> _SOURCE_
<android.view.DisplayCutout: android.graphics.Insets getWaterfallInsets()> -> _SOURCE_
<android.telephony.CellIdentity: boolean isSameCell(android.telephony.CellIdentity)> -> _SOURCE_
<android.bluetooth.IBluetoothSap$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.view.accessibility.AccessibilityRecord: android.view.accessibility.AccessibilityNodeInfo getSource()> -> _SOURCE_
<android.view.DisplayInfo: android.view.Display$Mode getDefaultMode()> -> _SOURCE_
<android.location.LocationManager: android.location.LocationProvider getProvider(java.lang.String)> -> _SOURCE_
<android.media.audiopolicy.AudioProductStrategy: android.media.audiopolicy.AudioProductStrategy getAudioProductStrategyWithId(int)> -> _SOURCE_
<android.location.GpsNavigationMessage: short getSubmessageId()> -> _SOURCE_
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String[] getPackagesForUid(int)> -> _SOURCE_
<android.net.NetworkScoreManager: boolean isCallerActiveScorer(int)> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.util.List getOwnerInstalledCaCerts(android.os.UserHandle)> -> _SOURCE_
<android.media.MicrophoneInfo: java.util.List getChannelMapping()> -> _SOURCE_
<android.telecom.Logging.Session: java.lang.String getSessionId()> -> _SOURCE_
<android.net.INetworkScoreService$Default: java.lang.String getActiveScorerPackage()> -> _SOURCE_
<android.content.IContentService$Stub$Proxy: android.content.SyncAdapterType[] getSyncAdapterTypes()> -> _SOURCE_
<android.content.pm.ShortcutManager: boolean isRequestPinShortcutSupported()> -> _SOURCE_
<android.security.FileIntegrityManager: boolean isAppSourceCertificateTrusted(java.security.cert.X509Certificate)> -> _SOURCE_
<android.graphics.drawable.Drawable: int getAlpha()> -> _SOURCE_
<android.bluetooth.BluetoothDevice: java.lang.String getName()> -> _SOURCE_
<android.net.ConnectivityDiagnosticsManager$ConnectivityReport: long getReportTimestamp()> -> _SOURCE_
<android.app.SystemServiceRegistry: java.lang.String getSystemServiceClassName(java.lang.String)> -> _SOURCE_
<android.os.connectivity.CellularBatteryStats: long getLoggingDurationMillis()> -> _SOURCE_
<android.telephony.PreciseCallState: int getDisconnectCause()> -> _SOURCE_
<android.os.VibrationEffect$OneShot: long getDuration()> -> _SOURCE_
<android.telephony.CellIdentityLte: java.lang.String getMncString()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.graphics.drawable.GradientDrawable: android.graphics.Insets getOpticalInsets()> -> _SOURCE_
<android.app.ContextImpl: java.io.File getDataDir()> -> _SOURCE_
<android.os.IncidentManager: android.os.IncidentManager$IncidentReport getIncidentReport(android.net.Uri)> -> _SOURCE_
<android.net.lowpan.ILowpanInterface$Stub$Proxy: java.lang.String getRole()> -> _SOURCE_
<android.telephony.CellSignalStrengthCdma: int getLevel()> -> _SOURCE_
<android.graphics.drawable.BitmapDrawable: android.graphics.Paint getPaint()> -> _SOURCE_
<android.net.http.SslCertificate$DName: java.lang.String getOName()> -> _SOURCE_
<android.os.UserManager: boolean isUserRunning(int)> -> _SOURCE_
<android.app.AsyncNotedAppOp: java.lang.String getAttributionTag()> -> _SOURCE_
<com.android.internal.widget.LockPatternUtils: byte[] getPasswordHistoryHashFactor(com.android.internal.widget.LockscreenCredential,int)> -> _SOURCE_
<android.app.timezone.IRulesManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.os.IIncidentManager$Default: java.util.List getIncidentReportList(java.lang.String,java.lang.String)> -> _SOURCE_
<android.content.ContentProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],android.os.Bundle,android.os.CancellationSignal)> -> _SOURCE_
<android.widget.ProgressBar: android.graphics.BlendMode getProgressTintBlendMode()> -> _SOURCE_
<com.android.internal.widget.ActionBarOverlayLayout: boolean isOverflowMenuShowing()> -> _SOURCE_
<android.location.GnssAntennaInfo$PhaseCenterOffset: double getYOffsetUncertaintyMm()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: int getNetworkTypeForSubscriber(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.view.accessibility.IAccessibilityManager$Default: java.util.List getEnabledAccessibilityServiceList(int,int)> -> _SOURCE_
<android.content.pm.ShortcutManager: java.util.List getShortcuts(int)> -> _SOURCE_
<android.widget.EditorTouchState: float getLastDownX()> -> _SOURCE_
<android.app.timedetector.ITimeDetectorService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.PhoneNumberUtils: boolean is12Key(char)> -> _SOURCE_
<android.view.ViewPropertyAnimator: android.animation.Animator$AnimatorListener getListener()> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: boolean isLeExtendedAdvertisingSupported()> -> _SOURCE_
<android.widget.CursorAdapter: android.widget.Filter getFilter()> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: java.util.List getRequestedPermissions()> -> _SOURCE_
<android.app.FragmentHostCallback: android.app.Activity getActivity()> -> _SOURCE_
<android.os.INetworkManagementService$Stub$Proxy: java.lang.String[] getDnsForwarders()> -> _SOURCE_
<android.telephony.ClientRequestStats: long getCompletedRequestsCount()> -> _SOURCE_
<android.webkit.WebSettings: java.lang.String getPluginsPath()> -> _SOURCE_
<android.content.pm.IPackageDataObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.hardware.display.WifiDisplayStatus: android.hardware.display.WifiDisplaySessionInfo getSessionInfo()> -> _SOURCE_
<android.location.ILocationManager$Default: java.lang.String[] getBackgroundThrottlingWhitelist()> -> _SOURCE_
<android.content.res.Resources: android.content.res.Configuration getConfiguration()> -> _SOURCE_
<android.os.CpuUsageInfo: long getTotal()> -> _SOURCE_
<android.app.Instrumentation$ActivityMonitor: android.content.IntentFilter getFilter()> -> _SOURCE_
<android.app.assist.AssistStructure$ViewNode: java.lang.String[] getAutofillHints()> -> _SOURCE_
<android.view.contentcapture.DataRemovalRequest: java.util.List getLocusIdRequests()> -> _SOURCE_
<android.telephony.SubscriptionManager: boolean isActiveSubId(int)> -> _SOURCE_
<android.app.UiModeManager: java.time.LocalTime getCustomNightModeStart()> -> _SOURCE_
<android.media.session.ISessionController$Default: android.media.MediaMetadata getMetadata()> -> _SOURCE_
<android.app.SearchableInfo: boolean getVoiceSearchEnabled()> -> _SOURCE_
<android.telephony.mbms.IDownloadProgressListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.location.GpsMeasurement: long getReceivedGpsTowInNs()> -> _SOURCE_
<android.hardware.cas.V1_1.ICasListener$Stub: java.util.ArrayList getHashChain()> -> _SOURCE_
<android.hardware.location.ContextHubClient: android.hardware.location.ContextHubInfo getAttachedHub()> -> _SOURCE_
<android.telephony.CellSignalStrengthNr: int getSsRsrp()> -> _SOURCE_
<android.telecom.Logging.Session: java.util.ArrayList getChildSessions()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getNetworkCountryIso(int)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String[] getForbiddenPlmns(int,int)> -> _SOURCE_
<android.bluetooth.IBluetoothGattCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.provider.Settings$ContentProviderHolder: android.content.IContentProvider getProvider(android.content.ContentResolver)> -> _SOURCE_
<android.app.AppOpsManager$HistoricalOps: long getEndTimeMillis()> -> _SOURCE_
<android.appwidget.AppWidgetManager: android.os.Bundle getAppWidgetOptions(int)> -> _SOURCE_
<android.net.TrafficStats: long getMobileTcpTxPackets()> -> _SOURCE_
<android.content.pm.PackageManager: android.os.Bundle getSuspendedPackageAppExtras()> -> _SOURCE_
<android.app.timezone.IRulesManager$Stub$Proxy: android.app.timezone.RulesState getRulesState()> -> _SOURCE_
<com.android.internal.os.KernelCpuProcStringReader: com.android.internal.os.KernelCpuProcStringReader getFreqTimeReaderInstance()> -> _SOURCE_
<android.permission.IPermissionManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.view.inputmethod.CursorAnchorInfo: float getInsertionMarkerHorizontal()> -> _SOURCE_
<android.os.storage.StorageVolume: java.lang.String getState()> -> _SOURCE_
<android.os.IUserManager$Stub$Proxy: android.os.Bundle getDefaultGuestRestrictions()> -> _SOURCE_
<android.view.accessibility.IAccessibilityManager$Stub$Proxy: java.util.List getAccessibilityShortcutTargets(int)> -> _SOURCE_
<android.bluetooth.BluetoothAvrcpController: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
<android.view.LayoutInflater: android.view.LayoutInflater$Filter getFilter()> -> _SOURCE_
<android.app.WallpaperManager: android.app.WallpaperManager$Globals access$100()> -> _SOURCE_
<android.hardware.radio.ITuner$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.lang.CharSequence getApplicationLabel(android.content.pm.ApplicationInfo)> -> _SOURCE_
<android.app.ApplicationPackageManager: boolean isAutoRevokeWhitelisted(java.lang.String)> -> _SOURCE_
<com.android.internal.view.menu.MenuItemImpl: android.graphics.PorterDuff$Mode getIconTintMode()> -> _SOURCE_
<android.app.NotificationChannel: java.lang.String getDescription()> -> _SOURCE_
<android.hardware.hdmi.IHdmiHotplugEventListener$Stub: android.hardware.hdmi.IHdmiHotplugEventListener getDefaultImpl()> -> _SOURCE_
<android.app.blob.IBlobStoreManager$Stub$Proxy: android.app.blob.LeaseInfo getLeaseInfo(android.app.blob.BlobHandle,java.lang.String)> -> _SOURCE_
<android.hardware.usb.IUsbSerialReader$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.net.http.SslCertificate$DName: java.lang.String getCName()> -> _SOURCE_
<android.telephony.data.ApnSetting: java.util.List getApnTypes()> -> _SOURCE_
<android.window.IDisplayAreaOrganizer$Stub: android.window.IDisplayAreaOrganizer getDefaultImpl()> -> _SOURCE_
<android.nfc.INfcTag$Stub$Proxy: int[] getTechList(int)> -> _SOURCE_
<android.telephony.emergency.EmergencyNumber: java.util.List getEmergencyServiceCategories()> -> _SOURCE_
<android.net.wifi.nl80211.NativeScanResult: java.util.List getRadioChainInfos()> -> _SOURCE_
<android.view.ViewRootImpl: android.view.ViewRootImpl$GfxInfo getGfxInfo()> -> _SOURCE_
<android.media.VolumeShaper$Configuration: float[] getVolumes()> -> _SOURCE_
<android.telephony.CellIdentity: java.lang.String getMncString()> -> _SOURCE_
<android.content.res.Resources$Theme: java.lang.String[] getTheme()> -> _SOURCE_
<android.hardware.SensorManager: java.util.List getSensorList(int)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getSimOperator(int)> -> _SOURCE_
<android.accounts.AbstractAccountAuthenticator: android.os.Bundle getAccountCredentialsForCloning(android.accounts.AccountAuthenticatorResponse,android.accounts.Account)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.app.LocalActivityManager: java.lang.String getCurrentId()> -> _SOURCE_
<android.view.ScrollCaptureClient: android.view.ScrollCaptureClient$DelayedAction getTimeoutAction()> -> _SOURCE_
<com.android.internal.policy.PhoneFallbackEventHandler: android.media.session.MediaSessionManager getMediaSessionManager()> -> _SOURCE_
<android.view.KeyboardShortcutInfo: char getBaseCharacter()> -> _SOURCE_
<android.view.autofill.AutofillManager: android.service.autofill.FillEventHistory getFillEventHistory()> -> _SOURCE_
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPictureSize()> -> _SOURCE_
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: android.view.textservice.SpellCheckerSubtype getCurrentSpellCheckerSubtype(int,boolean)> -> _SOURCE_
<android.graphics.ColorSpace: android.graphics.ColorSpace$Model getModel()> -> _SOURCE_
<android.content.RestrictionEntry: java.lang.String getDescription()> -> _SOURCE_
<android.content.IClipboard$Stub: android.content.IClipboard getDefaultImpl()> -> _SOURCE_
<com.android.internal.view.InputConnectionWrapper: java.lang.CharSequence getTextBeforeCursor(int,int)> -> _SOURCE_
<android.app.WallpaperManager: android.app.WallpaperInfo getWallpaperInfo()> -> _SOURCE_
<android.app.usage.StorageStatsManager: long getTotalBytes(java.lang.String)> -> _SOURCE_
<android.app.trust.TrustManager: boolean isTrustUsuallyManaged(int)> -> _SOURCE_
<android.os.image.DynamicSystemManager: boolean isEnabled()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: int getUserProvisioningState()> -> _SOURCE_
<android.telephony.TelephonyManager: int getLteOnCdmaMode(int)> -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getDelegatedScopes(android.content.ComponentName,java.lang.String)> -> _SOURCE_
<android.net.INetworkScoreService$Stub$Proxy: java.util.List getAllValidScorers()> -> _SOURCE_
<android.os.BatterySaverPolicyConfig: boolean getForceAllAppsStandby()> -> _SOURCE_
<android.os.storage.StorageVolume: java.lang.String getInternalPath()> -> _SOURCE_
<android.content.pm.IDexModuleRegisterCallback$Stub: android.content.pm.IDexModuleRegisterCallback getDefaultImpl()> -> _SOURCE_
<android.hardware.cas.V1_2.ICasListener$Stub: android.internal.hidl.base.V1_0.DebugInfo getDebugInfo()> -> _SOURCE_
<com.android.internal.telephony.IMms$Default: boolean updateStoredMessageStatus(java.lang.String,android.net.Uri,android.content.ContentValues)> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isTetheringApnRequired()> -> _SOURCE_
<android.os.ZygoteProcess$ZygoteState: android.net.LocalSocket getUsapSessionSocket()> -> _SOURCE_
<com.android.internal.telephony.SmsAddress: boolean isNetworkSpecific()> -> _SOURCE_
<android.view.inputmethod.CursorAnchorInfo: java.lang.CharSequence getComposingText()> -> _SOURCE_
<android.media.tv.ITvInputHardwareCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.os.UserManager: boolean isUserSwitcherEnabled()> -> _SOURCE_
<android.telephony.ServiceState: java.util.List getNetworkRegistrationInfoList()> -> _SOURCE_
<android.graphics.drawable.RotateDrawable: float getFromDegrees()> -> _SOURCE_
<android.os.image.IDynamicSystemService$Stub: android.os.image.IDynamicSystemService getDefaultImpl()> -> _SOURCE_
<com.android.internal.telephony.euicc.IGetSmdsAddressCallback$Stub: com.android.internal.telephony.euicc.IGetSmdsAddressCallback getDefaultImpl()> -> _SOURCE_
<android.service.carrier.CarrierIdentifier: java.lang.String getMcc()> -> _SOURCE_
<android.webkit.WebViewFactory: android.webkit.WebViewFactoryProvider getProvider()> -> _SOURCE_
<android.telephony.CellIdentityGsm: java.util.Set getAdditionalPlmns()> -> _SOURCE_
<android.media.AudioRecord: android.media.AudioFormat getFormat()> -> _SOURCE_
<android.telephony.AvailableNetworkInfo: int describeContents()> -> _SOURCE_
<android.media.midi.MidiDevice: android.media.midi.MidiDeviceInfo getInfo()> -> _SOURCE_
<android.telephony.SubscriptionManager: int getActiveSubscriptionInfoCountMax()> -> _SOURCE_
<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.autofill.AutofillId getAutofillId()> -> _SOURCE_
<com.android.internal.textservice.ISpellCheckerSessionListener$Stub: com.android.internal.textservice.ISpellCheckerSessionListener getDefaultImpl()> -> _SOURCE_
<android.app.job.JobInfo: android.app.job.JobInfo$TriggerContentUri[] getTriggerContentUris()> -> _SOURCE_
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: android.appwidget.AppWidgetProviderInfo getAppWidgetInfo(java.lang.String,int)> -> _SOURCE_
<android.nfc.INfcAdapter$Stub$Proxy: android.nfc.INfcCardEmulation getNfcCardEmulationInterface()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean isVtSettingEnabled(int)> -> _SOURCE_
<android.app.usage.NetworkStatsManager: android.app.usage.NetworkStats queryDetails(int,java.lang.String,long,long)> -> _SOURCE_
<android.content.res.AssetManager: java.lang.CharSequence getPooledStringForCookie(int,int)> -> _SOURCE_
<android.telephony.SignalStrength: int getGsmBitErrorRate()> -> _SOURCE_
<android.net.IpSecConfig: android.net.Network getNetwork()> -> _SOURCE_
<android.app.blob.LeaseInfo: java.lang.String getPackageName()> -> _SOURCE_
<com.android.internal.view.menu.MenuAdapter: boolean getForceShowIcon()> -> _SOURCE_
<android.media.MediaRoute2Info: android.net.Uri getIconUri()> -> _SOURCE_
<android.telephony.ClientRequestStats: java.lang.String toString()> -> _SOURCE_
<android.widget.RemoteViews: android.graphics.Rect getSourceBounds(android.view.View)> -> _SOURCE_
<android.app.IActivityTaskManager$Default: java.util.List getAllStackInfos()> -> _SOURCE_
<android.service.oemlock.IOemLockService$Default: java.lang.String getLockName()> -> _SOURCE_
<android.transition.ChangeBounds: java.lang.String[] getTransitionProperties()> -> _SOURCE_
<android.view.accessibility.IWindowMagnificationConnectionCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telephony.CellSignalStrengthWcdma: int getBitErrorRate()> -> _SOURCE_
<android.app.usage.StorageStatsManager: java.util.Collection queryCratesForPackage(java.util.UUID,java.lang.String,android.os.UserHandle)> -> _SOURCE_
<com.android.internal.view.menu.MenuBuilder: java.util.ArrayList getNonActionItems()> -> _SOURCE_
<android.accounts.AccountManager: java.util.Map getAccountsAndVisibilityForPackage(java.lang.String,java.lang.String)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.content.IOnPrimaryClipChangedListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telephony.SubscriptionInfo: int getCarrierId()> -> _SOURCE_
<android.util.AtomicFile: java.io.File getBaseFile()> -> _SOURCE_
<android.os.UserManager: java.util.List getUsers(boolean,boolean,boolean)> -> _SOURCE_
<android.view.IWindowSession$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.drm.DrmUtils: android.drm.DrmUtils$ExtendedMetadataParser getExtendedMetadataParser(byte[])> -> _SOURCE_
<android.app.Activity: android.app.ActivityThread getActivityThread()> -> _SOURCE_
<android.os.TelephonyServiceManager: android.os.TelephonyServiceManager$ServiceRegisterer getSubscriptionServiceRegisterer()> -> _SOURCE_
<android.telephony.TelephonyManager: void refreshUiccProfile()> -> _SOURCE_
<android.view.IWindowSessionCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.media.MediaMetadataRetriever: android.graphics.Bitmap getFrameAtTime()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.util.List queryInstrumentation(java.lang.String,int)> -> _SOURCE_
<android.accessibilityservice.AccessibilityServiceInfo: android.content.ComponentName getComponentName()> -> _SOURCE_
<android.app.blob.IBlobStoreSession$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: java.lang.String getCdmaMin(int)> -> _SOURCE_
<android.telephony.TelephonyManager: java.util.List getCarrierPackageNamesForIntentAndPhone(android.content.Intent,int)> -> _SOURCE_
<android.hardware.camera2.params.OisSample: float getXshift()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.lang.String getImsProvisioningString(int,int)> -> _SOURCE_
<android.widget.Toast: float getHorizontalMargin()> -> _SOURCE_
<android.bluetooth.IBluetoothHeadset$Default: boolean getAudioRouteAllowed()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: android.os.connectivity.CellularBatteryStats getCellularBatteryStats()> -> _SOURCE_
<android.hardware.fingerprint.IFingerprintService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.hardware.fingerprint.FingerprintManager: long preEnroll()> -> _SOURCE_
<android.location.LocationManager$LocationListenerTransport: java.lang.String getListenerId()> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: java.util.List getReceivers()> -> _SOURCE_
<android.widget.Toolbar: com.android.internal.widget.DecorToolbar getWrapper()> -> _SOURCE_
<com.android.internal.view.menu.CascadingMenuPopup: android.widget.ListView getListView()> -> _SOURCE_
<android.telephony.SubscriptionManager: boolean isActiveSubscriptionId(int)> -> _SOURCE_
<com.android.internal.util.StateMachine$LogRec: java.lang.String getInfo()> -> _SOURCE_
<com.android.internal.app.IBatteryStats$Default: byte[] getStatistics()> -> _SOURCE_
<android.animation.ArgbEvaluator: android.animation.ArgbEvaluator getInstance()> -> _SOURCE_
<android.hardware.face.IFaceService$Stub$Proxy: long getAuthenticatorId(int)> -> _SOURCE_
<android.app.INotificationManager$Default: java.util.List getEnabledNotificationListeners(int)> -> _SOURCE_
<com.android.ims.internal.IImsUtListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.service.vr.IPersistentVrStateCallbacks$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.service.notification.StatusBarNotification: java.lang.String getOverrideGroupKey()> -> _SOURCE_
<android.app.usage.UsageStats: java.lang.String getPackageName()> -> _SOURCE_
<android.os.IncidentManager$PendingReport: long getTimestamp()> -> _SOURCE_
<android.telephony.TelephonyManager: boolean doesSwitchMultiSimConfigTriggerReboot()> -> _SOURCE_
<android.telephony.mbms.MbmsUtils: android.content.ComponentName getOverrideServiceName(android.content.Context,java.lang.String)> -> _SOURCE_
<android.nfc.INfcCardEmulation$Stub$Proxy: android.nfc.cardemulation.ApduServiceInfo getPreferredPaymentService(int)> -> _SOURCE_
<com.android.internal.view.IInputMethod$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.util.List getTrustAgentConfiguration(android.content.ComponentName,android.content.ComponentName,int)> -> _SOURCE_
<android.content.pm.IDataLoaderManager$Stub$Proxy: android.content.pm.IDataLoader getDataLoader(int)> -> _SOURCE_
<android.telephony.TelephonyManager: java.util.List getNeighboringCellInfo()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.app.Instrumentation: android.os.Bundle getAllocCounts()> -> _SOURCE_
<android.graphics.Paint: android.graphics.BlendMode getBlendMode()> -> _SOURCE_
<com.android.internal.telephony.SmsApplication$SmsApplicationData: java.lang.String toString()> -> _SOURCE_
<android.app.Activity: boolean isOverlayWithDecorCaptionEnabled()> -> _SOURCE_
<android.content.pm.PackageManager: android.content.pm.dex.ArtManager getArtManager()> -> _SOURCE_
<android.hardware.display.IDisplayManager$Default: android.hardware.display.Curve getMinimumBrightnessCurve()> -> _SOURCE_
<android.view.ViewGroup: java.lang.CharSequence getAccessibilityClassName()> -> _SOURCE_
<com.android.internal.telephony.IMms$Stub$Proxy: android.os.IBinder asBinder()> -> _SOURCE_
<android.hardware.usb.UsbAccessory: java.lang.String getManufacturer()> -> _SOURCE_
<android.app.IUiModeManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.UiccCardInfo: java.lang.String toString()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<com.android.internal.util.StateMachine$LogRec: com.android.internal.util.IState getOriginalState()> -> _SOURCE_
<android.os.incremental.IIncrementalServiceConnector$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.hardware.face.FaceManager: java.util.List getEnrolledFaces()> -> _SOURCE_
<android.hardware.soundtrigger.SoundTrigger$ModuleProperties: java.lang.String getDescription()> -> _SOURCE_
<android.hardware.Camera$Parameters: java.lang.String getWhiteBalance()> -> _SOURCE_
<android.os.storage.StorageManager$ObbListenerDelegate: android.os.storage.OnObbStateChangeListener getListener()> -> _SOURCE_
<android.telephony.TelephonyManager: int getCdmaRoamingMode()> -> _SOURCE_
<android.os.IDeviceIdleController$Stub$Proxy: java.lang.String[] getSystemPowerWhitelistExceptIdle()> -> _SOURCE_
<android.nfc.cardemulation.ApduServiceInfo: java.lang.String getDescription()> -> _SOURCE_
<android.app.Service: java.lang.String getClassName()> -> _SOURCE_
<android.graphics.SurfaceTexture: long getTimestamp()> -> _SOURCE_
<android.media.tv.TvInputManager$Session: android.os.IBinder getToken()> -> _SOURCE_
<android.hardware.ICameraClient$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telephony.SubscriptionInfo: java.lang.String getMccString()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.service.voice.IVoiceInteractionSession$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.ims.aidl.IImsCallSessionListener$Stub: android.telephony.ims.aidl.IImsCallSessionListener getDefaultImpl()> -> _SOURCE_
<android.media.session.PlaybackState: long getLastPositionUpdateTime()> -> _SOURCE_
<android.content.integrity.IAppIntegrityManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.location.LocationManager: boolean isLocationEnabledForUser(android.os.UserHandle)> -> _SOURCE_
<com.android.internal.app.WindowDecorActionBar$TabImpl: android.view.View getCustomView()> -> _SOURCE_
<android.telephony.CellIdentityLte: int getBandwidth()> -> _SOURCE_
<android.net.ConnectivityDiagnosticsManager$DataStallReport: android.os.PersistableBundle getStallDetails()> -> _SOURCE_
<android.graphics.RenderNode: float getTranslationX()> -> _SOURCE_
<android.app.ActivityOptions: boolean getAvoidMoveToFront()> -> _SOURCE_
<android.service.gatekeeper.IGateKeeperService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.content.res.AssetManager: java.lang.CharSequence getResourceText(int)> -> _SOURCE_
<android.bluetooth.le.ScanRecord: android.util.SparseArray getManufacturerSpecificData()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.telephony.euicc.EuiccManager: boolean isEnabled()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.lang.CharSequence getEndUserSessionMessage(android.content.ComponentName)> -> _SOURCE_
<android.media.RouteDiscoveryPreference: java.util.List getPreferredFeatures()> -> _SOURCE_
<android.nfc.NfcAdapter: android.nfc.INfcDta getNfcDtaInterface()> -> _SOURCE_
<android.security.KeyStore$KeystoreResultPromise: java.util.concurrent.CompletableFuture getFuture()> -> _SOURCE_
<android.app.Notification: java.lang.String getChannel()> -> _SOURCE_
<android.location.Location: android.os.Bundle getExtras()> -> _SOURCE_
<android.telephony.CarrierRestrictionRules: java.util.List access$300(android.telephony.CarrierRestrictionRules)> -> _SOURCE_
<android.nfc.INfcFCardEmulation$Stub$Proxy: java.lang.String getNfcid2ForService(int,android.content.ComponentName)> -> _SOURCE_
<android.view.animation.AnimationSet: long getDuration()> -> _SOURCE_
<android.view.ViewOverlay: boolean isEmpty()> -> _SOURCE_
<android.graphics.drawable.VectorDrawable$VClipPath: long getNativePtr()> -> _SOURCE_
<android.os.UserManager: long getSerialNumberForUser(android.os.UserHandle)> -> _SOURCE_
<android.view.IRotationWatcher$Stub: android.view.IRotationWatcher getDefaultImpl()> -> _SOURCE_
<android.media.MediaHTTPConnection: java.lang.String getUri()> -> _SOURCE_
<android.telephony.ims.aidl.IImsMmTelListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.media.session.ISessionController$Stub$Proxy: android.media.session.MediaController$PlaybackInfo getVolumeAttributes()> -> _SOURCE_
<android.content.pm.split.DefaultSplitAssetLoader: android.content.res.AssetManager getBaseAssetManager()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: int getVoiceNetworkTypeForSubscriber(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.telephony.UiccSlotInfo: java.lang.String toString()> -> _SOURCE_
<android.widget.RemoteViews$RemoteViewsContextWrapper: android.content.res.Resources getResources()> -> _SOURCE_
<android.net.http.SslError: android.net.http.SslCertificate getCertificate()> -> _SOURCE_
<android.telephony.CellIdentityLte: android.telephony.CellIdentity sanitizeLocationInfo()> -> _SOURCE_
<com.android.internal.app.IAppOpsCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.bluetooth.IBluetoothPan$Default: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
<android.app.ApplicationPackageManager: java.lang.String getServicesSystemSharedLibraryPackageName()> -> _SOURCE_
<android.view.textclassifier.TextClassification$Request: android.os.Bundle getExtras()> -> _SOURCE_
<android.os.PatternMatcher: java.lang.String getPath()> -> _SOURCE_
<android.telephony.SmsCbMessage: android.telephony.SmsCbCmasInfo getCmasWarningInfo()> -> _SOURCE_
<android.graphics.drawable.Icon: java.lang.String getUriString()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: int getCdmaRoamingMode(int)> -> _SOURCE_
<android.app.IUidObserver$Stub: android.app.IUidObserver getDefaultImpl()> -> _SOURCE_
<android.view.ViewConfiguration: long getAccessibilityShortcutKeyTimeout()> -> _SOURCE_
<android.hardware.camera2.legacy.GLThreadManager: android.graphics.SurfaceTexture getCurrentSurfaceTexture()> -> _SOURCE_
<android.os.storage.VolumeInfo: java.lang.String getId()> -> _SOURCE_
<com.android.server.SystemConfig: android.util.ArraySet getAllowImplicitBroadcasts()> -> _SOURCE_
<android.net.ITestNetworkManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.webkit.IWebViewUpdateService$Default: android.webkit.WebViewProviderInfo[] getValidWebViewPackages()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getCdmaMin()> -> _SOURCE_
<com.android.internal.app.IVoiceInteractor$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.telephony.ISub$Stub: java.lang.String getTransactionName(int)> -> _SOURCE_
<android.location.GnssAntennaInfo: android.location.GnssAntennaInfo$SphericalCorrections getPhaseCenterVariationCorrections()> -> _SOURCE_
<android.widget.ToastPresenter: java.lang.String getPackageName()> -> _SOURCE_
<android.content.pm.InstantAppResolveInfo$InstantAppDigest: int[] getDigestPrefix()> -> _SOURCE_
<android.content.ContentProvider: java.lang.String getAuthorityWithoutUserId(java.lang.String)> -> _SOURCE_
<android.os.IUpdateEngineCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.view.textclassifier.TextSelection$Request: android.os.LocaleList getDefaultLocales()> -> _SOURCE_
<android.text.style.AlignmentSpan$Standard: android.text.Layout$Alignment getAlignment()> -> _SOURCE_
<android.nfc.cardemulation.NfcFServiceInfo: java.lang.String getNfcid2()> -> _SOURCE_
<android.os.UserManager: java.util.List getUsers(boolean)> -> _SOURCE_
<com.android.internal.appwidget.IAppWidgetHost$Stub: com.android.internal.appwidget.IAppWidgetHost getDefaultImpl()> -> _SOURCE_
<android.location.ICountryListener$Stub: android.location.ICountryListener getDefaultImpl()> -> _SOURCE_
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getLine1AlphaTagForSubscriber(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.os.Environment: java.io.File getDataDirectory()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: long getRequiredStrongAuthTimeout(android.content.ComponentName)> -> _SOURCE_
<android.media.ExifInterface$1: long getSize()> -> _SOURCE_
<android.telephony.CallForwardingInfo: java.lang.String getNumber()> -> _SOURCE_
<com.android.internal.telephony.ISms$Default: boolean isSmsSimPickActivityNeeded(int)> -> _SOURCE_
<android.window.IWindowContainerTransactionCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.content.om.IOverlayManager$Stub$Proxy: java.util.Map getAllOverlays(int)> -> _SOURCE_
<android.widget.AdapterViewAnimator: android.widget.FrameLayout getFrameForChild()> -> _SOURCE_
<android.view.KeyEvent: long getEventTime()> -> _SOURCE_
<android.view.InputQueue: long getNativePtr()> -> _SOURCE_
<com.android.internal.app.IAppOpsAsyncNotedCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.media.IMediaRouterService$Stub$Proxy: java.util.List getSystemRoutes()> -> _SOURCE_
<android.net.ITetheredInterfaceCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.net.lowpan.ILowpanManagerListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.hardware.usb.IUsbManager$Stub$Proxy: long getCurrentFunctions()> -> _SOURCE_
<android.widget.ArrayAdapter: android.widget.Filter getFilter()> -> _SOURCE_
<android.bluetooth.IBluetoothHeadset$Stub: android.bluetooth.IBluetoothHeadset getDefaultImpl()> -> _SOURCE_
<android.content.UndoManager: android.content.UndoOperation getLastOperation(android.content.UndoOwner,int)> -> _SOURCE_
<android.app.blob.IBlobStoreSession$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.RemoteInput: java.lang.CharSequence getLabel()> -> _SOURCE_
<android.app.ActivityTransitionCoordinator: java.util.ArrayList getMappedNames()> -> _SOURCE_
<android.view.textclassifier.EntityConfidence: java.util.List getEntities()> -> _SOURCE_
<android.os.storage.VolumeInfo: java.io.File getPath()> -> _SOURCE_
<android.text.style.SuggestionSpan: java.lang.String getLocale()> -> _SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: com.android.internal.net.VpnConfig getVpnConfig(int)> -> _SOURCE_
<android.content.pm.IPackageInstaller$Stub$Proxy: android.content.pm.ParceledListSlice getMySessions(java.lang.String,int)> -> _SOURCE_
<com.android.internal.view.menu.MenuBuilder: java.lang.String getActionViewStatesKey()> -> _SOURCE_
<android.view.ViewConfiguration: long getScreenshotChordKeyTimeout()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: android.content.ComponentName getProfileOwnerOrDeviceOwnerSupervisionComponent(android.os.UserHandle)> -> _SOURCE_
<android.companion.CompanionDeviceManager: boolean isDeviceAssociatedForWifiConnection(java.lang.String,android.net.MacAddress,android.os.UserHandle)> -> _SOURCE_
<android.app.usage.StorageStatsManager: long getCacheBytes(java.util.UUID)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: int getImsProvisioningInt(int,int)> -> _SOURCE_
<android.hardware.usb.UsbDeviceConnection: java.lang.String getSerial()> -> _SOURCE_
<android.telephony.MbmsDownloadSession: android.telephony.mbms.InternalDownloadSessionCallback access$200(android.telephony.MbmsDownloadSession)> -> _SOURCE_
<android.hardware.camera2.CameraManager$CameraManagerGlobal: android.hardware.camera2.CameraManager$CameraManagerGlobal get()> -> _SOURCE_
<com.android.ims.internal.IImsEcbm$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.CellInfoWcdma: android.telephony.CellSignalStrength getCellSignalStrength()> -> _SOURCE_
<android.service.notification.SnoozeCriterion: java.lang.CharSequence getExplanation()> -> _SOURCE_
<android.graphics.drawable.AnimatedImageDrawable: android.graphics.ColorFilter getColorFilter()> -> _SOURCE_
<android.app.Notification$BigTextStyle: java.lang.CharSequence getBigText()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.lang.CharSequence getOrganizationName(android.content.ComponentName)> -> _SOURCE_
<android.telephony.ims.ImsSsData: boolean isTypeCf()> -> _SOURCE_
<android.net.NetworkRequest: java.lang.String getRequestorPackageName()> -> _SOURCE_
<android.security.NetworkSecurityPolicy: android.security.net.config.ApplicationConfig getApplicationConfigForPackage(android.content.Context,java.lang.String)> -> _SOURCE_
<android.view.animation.Transformation: android.graphics.Matrix getMatrix()> -> _SOURCE_
<android.os.BaseBundle: android.util.ArrayMap getMap()> -> _SOURCE_
<android.util.apk.ApkSigningBlockUtils: java.nio.ByteBuffer getByteBuffer(java.nio.ByteBuffer,int)> -> _SOURCE_
<android.animation.AnimationHandler$MyFrameCallbackProvider: long getFrameTime()> -> _SOURCE_
<android.widget.CompoundButton: java.lang.CharSequence getButtonStateDescription()> -> _SOURCE_
<android.app.Notification$TvExtender: android.app.PendingIntent getDeleteIntent()> -> _SOURCE_
<android.media.midi.MidiDeviceInfo$PortInfo: java.lang.String getName()> -> _SOURCE_
<android.telecom.TelecomManager: android.telecom.PhoneAccountHandle getSimCallManager()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.lang.String getSetupWizardPackageName()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.util.List getAllCellInfo(java.lang.String,java.lang.String)> -> _SOURCE_
<com.android.internal.graphics.palette.Palette: com.android.internal.graphics.palette.Palette$Swatch getDominantSwatch()> -> _SOURCE_
<android.transition.ChangeTransform: boolean getReparent()> -> _SOURCE_
<android.service.notification.Adjustment: java.lang.String getKey()> -> _SOURCE_
<android.hardware.biometrics.IBiometricServiceReceiverInternal$Stub: android.hardware.biometrics.IBiometricServiceReceiverInternal getDefaultImpl()> -> _SOURCE_
<android.window.WindowContainerTransaction: java.util.Map getChanges()> -> _SOURCE_
<android.telephony.TelephonyManager: int getCallState(int)> -> _SOURCE_
<android.location.GnssAntennaInfo$PhaseCenterOffset: double getXOffsetUncertaintyMm()> -> _SOURCE_
<com.android.internal.telephony.euicc.IGetEuiccChallengeCallback$Stub: com.android.internal.telephony.euicc.IGetEuiccChallengeCallback getDefaultImpl()> -> _SOURCE_
<com.android.internal.view.menu.ActionMenuItem: java.lang.CharSequence getContentDescription()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.util.List queryIntentActivityOptions(android.content.ComponentName,android.content.Intent[],android.content.Intent,int)> -> _SOURCE_
<android.ddm.DdmHandleAppName$Names: java.lang.String getPkgName()> -> _SOURCE_
<android.view.inputmethod.InputMethodInfo: android.content.ComponentName getComponent()> -> _SOURCE_
<android.content.res.AssetManager: int getResourceArray(int,int[])> -> _SOURCE_
<android.app.SearchManager: android.app.SearchableInfo getSearchableInfo(android.content.ComponentName)> -> _SOURCE_
<android.telephony.mbms.DownloadRequest: android.net.Uri getDestinationUri()> -> _SOURCE_
<android.accessibilityservice.AccessibilityService$ScreenshotResult: long getTimestamp()> -> _SOURCE_
<android.view.inputmethod.InputMethodSubtype: java.lang.String getExtraValue()> -> _SOURCE_
<android.service.persistentdata.PersistentDataBlockManager: int getDataBlockSize()> -> _SOURCE_
<android.view.MotionEvent: float getX()> -> _SOURCE_
<android.os.storage.IStorageManager$Default: android.os.storage.DiskInfo[] getDisks()> -> _SOURCE_
<android.telephony.SubscriptionManager: android.telephony.SubscriptionInfo getDefaultVoiceSubscriptionInfo()> -> _SOURCE_
<android.media.AudioTrack: android.media.AudioDeviceInfo getRoutedDevice()> -> _SOURCE_
<android.telephony.PhoneNumberUtils: java.lang.String calledPartyBCDToString(byte[],int,int)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.view.InsetsSourceConsumer: boolean isRequestedVisibleAwaitingControl()> -> _SOURCE_
<android.media.AudioManager: long getMaxAdditionalOutputDeviceDelay(android.media.AudioDeviceInfo)> -> _SOURCE_
<android.widget.AdapterViewAnimator: java.lang.CharSequence getAccessibilityClassName()> -> _SOURCE_
<android.media.session.MediaSessionManager: java.util.List getSession2Tokens()> -> _SOURCE_
<android.telephony.PhoneNumberUtils: int getMinMatchForTest()> -> _SOURCE_
<android.bluetooth.IBluetoothHidDevice$Stub$Proxy: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
<android.service.vr.IVrManager$Default: boolean getPersistentVrModeEnabled()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: int getDataActivityForSubId(int)> -> _SOURCE_
<com.android.internal.os.HandlerCaller: android.os.Handler getHandler()> -> _SOURCE_
<android.hardware.face.IFaceService$Stub: android.hardware.face.IFaceService getDefaultImpl()> -> _SOURCE_
<com.android.internal.compat.CompatibilityChangeInfo: boolean getDisabled()> -> _SOURCE_
<android.hardware.usb.UsbDevice: boolean getHasAudioCapture()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.lang.String nvReadItem(int)> -> _SOURCE_
<android.app.ActivityManager$TaskSnapshot: android.graphics.ColorSpace getColorSpace()> -> _SOURCE_
<android.content.pm.PackageParser$Package: java.util.List getAllCodePathsExcludingResourceOnly()> -> _SOURCE_
<android.app.Activity: android.view.View getCurrentFocus()> -> _SOURCE_
<android.view.inputmethod.InputMethodInfo: java.lang.String getPackageName()> -> _SOURCE_
<android.text.Annotation: java.lang.String getValue()> -> _SOURCE_
<android.app.IUiAutomationConnection$Stub$Proxy: android.view.WindowContentFrameStats getWindowContentFrameStats(int)> -> _SOURCE_
<android.provider.Settings$System: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)> -> _SOURCE_
<android.telecom.ParcelableCallAnalytics$EventTiming: long getTime()> -> _SOURCE_
<android.content.ContentResolver: int getIsSyncableAsUser(android.accounts.Account,java.lang.String,int)> -> _SOURCE_
<android.content.pm.PackageParser$Package: long getLatestForegroundPackageUseTimeInMills()> -> _SOURCE_
<android.view.Window: android.transition.Transition getSharedElementExitTransition()> -> _SOURCE_
<android.service.autofill.UserData: java.lang.String[] getCategoryIds()> -> _SOURCE_
<android.telephony.IccOpenLogicalChannelResponse: int getStatus()> -> _SOURCE_
<android.bluetooth.BluetoothManager: android.bluetooth.BluetoothAdapter getAdapter()> -> _SOURCE_
<android.content.pm.ShortcutManager: int getRemainingCallCount()> -> _SOURCE_
<android.telephony.TelephonyManager: void enableLocationUpdates(int)> -> _SOURCE_
<android.hardware.Camera$Parameters: java.util.List getSupportedSceneModes()> -> _SOURCE_
<android.content.pm.SuspendDialogInfo: java.lang.String getDialogMessage()> -> _SOURCE_
<android.view.Window: android.content.Context getContext()> -> _SOURCE_
<android.app.BackStackRecord: java.lang.CharSequence getBreadCrumbShortTitle()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: java.lang.String[] getLockTaskPackages(android.content.ComponentName)> -> _SOURCE_
<android.content.pm.PackageInstaller: java.util.List getMySessions()> -> _SOURCE_
<android.app.WallpaperColors: java.util.List getMainColors()> -> _SOURCE_
<android.hardware.biometrics.CryptoObject: java.security.Signature getSignature()> -> _SOURCE_
<android.content.Intent: java.lang.String getScheme()> -> _SOURCE_
<com.android.internal.telephony.SmsApplication$SmsApplicationData: java.lang.String access$400(com.android.internal.telephony.SmsApplication$SmsApplicationData)> -> _SOURCE_
<android.permission.IPermissionManager$Stub$Proxy: java.lang.String getDefaultBrowser(int)> -> _SOURCE_
<android.media.AudioDeviceAttributes: java.lang.String getAddress()> -> _SOURCE_
<android.os.TelephonyServiceManager: android.os.TelephonyServiceManager$ServiceRegisterer getIccPhoneBookServiceRegisterer()> -> _SOURCE_
<android.os.storage.IObbActionListener$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.view.contentcapture.IContentCaptureDirectManager$Stub: android.view.contentcapture.IContentCaptureDirectManager getDefaultImpl()> -> _SOURCE_
<android.telephony.SubscriptionManager: int getEnabledSubscriptionId(int)> -> _SOURCE_
<android.net.nsd.NsdManager: java.lang.String access$200()> -> _SOURCE_
<android.app.Activity: android.view.MenuInflater getMenuInflater()> -> _SOURCE_
<com.android.internal.policy.PhoneWindow: boolean getAllowReturnTransitionOverlap()> -> _SOURCE_
<android.security.net.config.NetworkSecurityTrustManager: java.security.cert.X509Certificate[] getAcceptedIssuers()> -> _SOURCE_
<com.android.internal.view.AppearanceRegion: android.graphics.Rect getBounds()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.lang.String getInstantAppAndroidId(java.lang.String,android.os.UserHandle)> -> _SOURCE_
<android.bluetooth.le.ScanRecord: java.util.Map getServiceData()> -> _SOURCE_
<android.accessibilityservice.GestureDescription$StrokeDescription: long getStartTime()> -> _SOURCE_
<com.android.internal.view.StandaloneActionMode: java.lang.CharSequence getSubtitle()> -> _SOURCE_
<android.view.Window: android.transition.Transition getReturnTransition()> -> _SOURCE_
<android.location.Location: double getLatitude()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.location.ILocationManager$Default: java.lang.String getGnssHardwareModelName()> -> _SOURCE_
<android.widget.ScrollBarDrawable: android.graphics.drawable.Drawable getVerticalTrackDrawable()> -> _SOURCE_
<android.os.IDeviceIdleController$Stub$Proxy: java.lang.String[] getUserPowerWhitelist()> -> _SOURCE_
<com.android.internal.widget.ToolbarWidgetWrapper: boolean isOverflowMenuShowing()> -> _SOURCE_
<com.android.internal.textservice.ISpellCheckerSession$Stub: com.android.internal.textservice.ISpellCheckerSession getDefaultImpl()> -> _SOURCE_
<com.android.internal.app.IVoiceInteractorCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.content.res.ResourcesImpl: android.util.LongSparseArray getPreloadedDrawables()> -> _SOURCE_
<android.media.tv.TvContentRating: java.util.List getSubRatings()> -> _SOURCE_
<com.android.internal.view.IInputMethod$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.os.storage.IStorageManager$Stub$Proxy: android.os.storage.VolumeInfo[] getVolumes(int)> -> _SOURCE_
<android.graphics.ParcelableColorSpace: long getNativeInstance()> -> _SOURCE_
<com.android.internal.widget.LockscreenCredential: byte[] getCredential()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.lang.String getCurrentPackageName()> -> _SOURCE_
<android.graphics.Paint: android.graphics.Paint$Join getStrokeJoin()> -> _SOURCE_
<android.permission.PermissionControllerManager: void getAppPermissions(java.lang.String,android.permission.PermissionControllerManager$OnGetAppPermissionResultCallback,android.os.Handler)> -> _SOURCE_
<android.net.wifi.nl80211.NativeScanResult: byte[] getSsid()> -> _SOURCE_
<android.media.session.ISessionController$Stub$Proxy: android.app.PendingIntent getLaunchPendingIntent()> -> _SOURCE_
<android.hardware.camera2.legacy.LegacyCameraDevice: android.util.Size getTextureSize(android.graphics.SurfaceTexture)> -> _SOURCE_
<android.telephony.ClosedSubscriberGroupInfo: android.telephony.ClosedSubscriberGroupInfo createFromParcelBody(android.os.Parcel)> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid: android.os.BatteryStats$Counter getBluetoothScanResultCounter()> -> _SOURCE_
<android.content.Context: android.os.Handler getMainThreadHandler()> -> _SOURCE_
<android.telephony.ServiceState: int getRilVoiceRadioTechnology()> -> _SOURCE_
<android.app.IUiModeManager$Default: long getCustomNightModeEnd()> -> _SOURCE_
<android.bluetooth.BluetoothCodecConfig: long getCodecSpecific2()> -> _SOURCE_
<android.os.BatteryStats$Timer: android.os.BatteryStats$Timer getSubTimer()> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: java.lang.String getAppComponentFactory()> -> _SOURCE_
<android.provider.DocumentsContract$Path: java.util.List getPath()> -> _SOURCE_
<com.android.internal.app.ToolbarActionBar: android.view.Window$Callback getWrappedWindowCallback()> -> _SOURCE_
<android.app.FragmentController: android.app.FragmentManager getFragmentManager()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.util.List getInstalledApplicationsAsUser(int,int)> -> _SOURCE_
<android.provider.FontsContract$FontInfo: android.graphics.fonts.FontVariationAxis[] getAxes()> -> _SOURCE_
<android.hardware.location.GeofenceHardwareRequest: double getLongitude()> -> _SOURCE_
<android.app.ListFragment: long getSelectedItemId()> -> _SOURCE_
<android.telephony.TelephonyManager: int getPhoneType(int)> -> _SOURCE_
<android.bluetooth.IBluetoothHidHost$Default: java.util.List getConnectedDevices()> -> _SOURCE_
<android.app.RemoteAction: java.lang.CharSequence getContentDescription()> -> _SOURCE_
<android.app.admin.DevicePolicyManager: boolean isApplicationHidden(android.content.ComponentName,java.lang.String)> -> _SOURCE_
<android.service.notification.NotificationListenerService$Ranking: java.util.List getAdditionalPeople()> -> _SOURCE_
<android.view.textservice.TextInfo: java.lang.String getText()> -> _SOURCE_
<android.content.Intent: java.util.Set getCategories()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getLine1Number(int)> -> _SOURCE_
<android.os.image.IDynamicSystemService$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.media.IMediaHTTPConnection$Default: long getSize()> -> _SOURCE_
<com.android.internal.inputmethod.IExtractedTextResultCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.content.ContentProviderClient: java.lang.String getType(android.net.Uri)> -> _SOURCE_
<com.android.internal.telephony.IUpdateAvailableNetworksCallback$Default: android.os.IBinder asBinder()> -> _SOURCE_
<android.app.ContextImpl: java.io.File[] getExternalMediaDirs()> -> _SOURCE_
<android.accounts.IAccountAuthenticatorResponse$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.text.method.DateTimeKeyListener: char[] getAcceptedChars()> -> _SOURCE_
<android.internal.hidl.base.V1_0.IBase$Stub: android.internal.hidl.base.V1_0.DebugInfo getDebugInfo()> -> _SOURCE_
<android.permission.IPermissionManager$Stub$Proxy: android.content.pm.PermissionGroupInfo getPermissionGroupInfo(java.lang.String,int)> -> _SOURCE_
<com.android.internal.telephony.ICarrierConfigLoader$Default: java.lang.String getDefaultCarrierServicePackageName()> -> _SOURCE_
<android.content.pm.IShortcutService$Stub$Proxy: byte[] getBackupPayload(int)> -> _SOURCE_
<android.telephony.TelephonyManager: boolean isOpportunisticNetworkEnabled()> -> _SOURCE_
<android.app.ContextImpl: java.io.File getFilesDir()> -> _SOURCE_
<android.os.IncidentManager: java.util.List getIncidentReportList(java.lang.String)> -> _SOURCE_
<android.content.pm.IPackageManager$Default: android.content.ComponentName getInstantAppResolverSettingsComponent()> -> _SOURCE_
<android.app.IActivityManager$Stub$Proxy: java.util.List getProcessesInErrorState()> -> _SOURCE_
<android.telephony.mbms.DownloadRequest: java.lang.String getHash()> -> _SOURCE_
<android.graphics.ColorFilter: long getNativeInstance()> -> _SOURCE_
<android.view.IRotationWatcher$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.location.GnssMeasurement: double getBasebandCn0DbHz()> -> _SOURCE_
<android.content.pm.LauncherApps: java.util.List getShortcuts(android.content.pm.LauncherApps$ShortcutQuery,android.os.UserHandle)> -> _SOURCE_
<com.android.ims.internal.IImsCallSession$Stub$Proxy: java.lang.String getProperty(java.lang.String)> -> _SOURCE_
<android.content.integrity.IAppIntegrityManager$Stub$Proxy: java.lang.String getCurrentRuleSetProvider()> -> _SOURCE_
<android.bluetooth.IBluetoothMapClient$Default: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
<android.media.MediaFormat: java.util.Set getFeatures()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: java.lang.String getMeidForSlot(int,java.lang.String,java.lang.String)> -> _SOURCE_
<android.hardware.Sensor: java.lang.String getRequiredPermission()> -> _SOURCE_
<android.media.SubtitleTrack: android.media.MediaFormat getFormat()> -> _SOURCE_
<android.companion.AssociationRequest: java.util.List getDeviceFilters()> -> _SOURCE_
<android.media.tv.TvInputInfo: android.content.pm.ServiceInfo getServiceInfo()> -> _SOURCE_
<android.bluetooth.IBluetooth$Default: android.bluetooth.BluetoothDevice[] getBondedDevices()> -> _SOURCE_
<com.android.internal.textservice.ITextServicesManager$Stub: com.android.internal.textservice.ITextServicesManager getDefaultImpl()> -> _SOURCE_
<android.media.MediaCodec$MediaImage: android.media.Image$Plane[] getPlanes()> -> _SOURCE_
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String getMobileProvisioningUrl()> -> _SOURCE_
<android.os.Environment: boolean isExternalStorageRemovable()> -> _SOURCE_
<android.media.IRemoteVolumeController$Stub: android.media.IRemoteVolumeController getDefaultImpl()> -> _SOURCE_
<android.window.IDisplayAreaOrganizer$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.hardware.biometrics.IAuthService$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.os.TelephonyServiceManager: android.os.TelephonyServiceManager$ServiceRegisterer getEuiccCardControllerServiceRegisterer()> -> _SOURCE_
<android.telecom.Logging.SessionManager: android.telecom.Logging.Session$Info getExternalSession()> -> _SOURCE_
<android.net.lowpan.ILowpanInterface$Default: java.lang.String[] getSupportedNetworkTypes()> -> _SOURCE_
<com.android.internal.telecom.ITelecomService$Stub$Proxy: java.lang.String getLine1Number(android.telecom.PhoneAccountHandle,java.lang.String,java.lang.String)> -> _SOURCE_
<android.app.INotificationManager$Stub$Proxy: android.content.ComponentName getAllowedNotificationAssistant()> -> _SOURCE_
<android.security.IKeyChainService$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.telephony.ISub$Default: int getDefaultVoiceSubId()> -> _SOURCE_
<android.bluetooth.IBluetoothHeadsetClient$Stub$Proxy: android.os.Bundle getCurrentAgFeatures(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<android.bluetooth.IBluetoothManager$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.job.IJobScheduler$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: int getCardIdForDefaultEuicc(int,java.lang.String)> -> _SOURCE_
<android.app.slice.Slice: android.net.Uri getUri()> -> _SOURCE_
<android.media.tv.ITvInputClient$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.provider.FontRequest: java.lang.String getProviderPackage()> -> _SOURCE_
<com.android.internal.telephony.SmsAddress: java.lang.String getAddressString()> -> _SOURCE_
<android.telephony.ServiceState: java.lang.String roamingTypeToString(int)> -> _SOURCE_
<android.view.textclassifier.SelectionEvent: java.lang.String getResultId()> -> _SOURCE_
<android.location.GnssAntennaInfo$PhaseCenterOffset: double getZOffsetMm()> -> _SOURCE_
<android.telephony.ims.aidl.IImsRegistrationCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAccountsByTypeAndFeatures(java.lang.String,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.app.admin.IDevicePolicyManager$Stub$Proxy: long getManagedProfileMaximumTimeOff(android.content.ComponentName)> -> _SOURCE_
<android.service.notification.NotificationListenerService$Ranking: java.lang.String getKey()> -> _SOURCE_
<android.app.ActivityManager$TaskSnapshot: android.graphics.Point getTaskSize()> -> _SOURCE_
<com.android.internal.policy.IKeyguardDismissCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telecom.TelecomAnalytics: java.util.List getSessionTimings()> -> _SOURCE_
<android.content.pm.ParceledListSlice: java.util.List getList()> -> _SOURCE_
<android.view.contentcapture.ChildContentCaptureSession: android.view.contentcapture.MainContentCaptureSession getMainCaptureSession()> -> _SOURCE_
<android.accessibilityservice.AccessibilityService: android.accessibilityservice.AccessibilityService$MagnificationController getMagnificationController()> -> _SOURCE_
<android.service.notification.NotificationListenerService$Ranking: java.util.List getSnoozeCriteria()> -> _SOURCE_
<android.telecom.ParcelableCallAnalytics$AnalyticsEvent: long getTimeSinceLastEvent()> -> _SOURCE_
<android.net.Uri$HierarchicalUri: java.lang.String getEncodedQuery()> -> _SOURCE_
<android.media.session.ISessionCallback$Stub: android.media.session.ISessionCallback getDefaultImpl()> -> _SOURCE_
<android.content.ContextWrapper: android.view.Display getDisplay()> -> _SOURCE_
<android.graphics.drawable.GradientDrawable$GradientState: android.graphics.drawable.GradientDrawable$Orientation getOrientation()> -> _SOURCE_
<android.os.IMessenger$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.ml.clustering.KMeans$Mean: java.util.List getItems()> -> _SOURCE_
<android.app.INotificationManager$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.ApplicationPackageManager: android.content.pm.ModuleInfo getModuleInfo(java.lang.String,int)> -> _SOURCE_
<android.content.res.AssetManager: int[] getAttributeResolutionStack(long,int,int,int)> -> _SOURCE_
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String getContentCaptureServicePackageName()> -> _SOURCE_
<android.media.tv.ITvInputHardwareCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<com.android.internal.os.BatteryStatsHelper: long getForegroundActivityTotalTimeUs(android.os.BatteryStats$Uid,long)> -> _SOURCE_
<android.os.IClientCallback$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.media.IMediaRouterService$Default: java.util.List getSystemRoutes()> -> _SOURCE_
<android.content.pm.PackageManager: java.lang.String getDefaultTextClassifierPackageName()> -> _SOURCE_
<android.bluetooth.IBluetoothHearingAid$Default: java.util.List getConnectedDevices()> -> _SOURCE_
<android.app.ContextImpl: android.content.pm.PackageManager getPackageManager()> -> _SOURCE_
<com.android.internal.telephony.OperatorInfo: java.lang.String getOperatorAlphaShort()> -> _SOURCE_
<android.app.ActivityManager: boolean isRunningInTestHarness()> -> _SOURCE_
<android.text.BidiFormatter: android.text.BidiFormatter getInstance()> -> _SOURCE_
<android.service.autofill.FillEventHistory: android.os.Bundle getClientState()> -> _SOURCE_
<android.media.session.ISession$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.telephony.CellSignalStrengthWcdma: int getEcNo()> -> _SOURCE_
<com.android.server.SystemConfig: android.util.ArrayMap getSharedLibraries()> -> _SOURCE_
<com.android.internal.view.menu.MenuItemImpl: char getNumericShortcut()> -> _SOURCE_
<android.content.Intent$FilterComparison: android.content.Intent getIntent()> -> _SOURCE_
<android.media.RemoteController: android.media.RemoteController$OnClientUpdateListener getUpdateListener()> -> _SOURCE_
<android.util.proto.ProtoStream: java.lang.String getFieldCountString(long)> -> _SOURCE_
<android.app.slice.SliceItem: java.lang.String getSubType()> -> _SOURCE_
<android.media.RoutingSessionInfo: java.lang.String getProviderId()> -> _SOURCE_
<com.android.internal.widget.FloatingToolbar: boolean isHidden()> -> _SOURCE_
<android.telephony.SignalStrength: int getWcdmaRscp()> -> _SOURCE_
<android.media.AudioManager: boolean isStreamAffectedByRingerMode(int)> -> _SOURCE_
<android.bluetooth.BluetoothDevice: java.lang.String getAddress()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<com.android.internal.policy.PhoneWindow: android.view.View getDecorView()> -> _SOURCE_
<android.app.ISearchManager$Stub$Proxy: android.content.ComponentName getGlobalSearchActivity()> -> _SOURCE_
<android.app.contentsuggestions.SelectionsRequest: android.graphics.Point getInterestPoint()> -> _SOURCE_
<android.content.pm.parsing.ParsingPackageImpl: java.lang.String getVolumeUuid()> -> _SOURCE_
<com.android.internal.os.BatteryStatsHelper: java.util.List getMobilemsppList()> -> _SOURCE_
<android.security.keystore.recovery.KeyChainProtectionParams: android.security.keystore.recovery.KeyDerivationParams getKeyDerivationParams()> -> _SOURCE_
<android.net.LocalSocketAddress: android.net.LocalSocketAddress$Namespace getNamespace()> -> _SOURCE_
<android.media.session.ISessionController$Default: java.lang.CharSequence getQueueTitle()> -> _SOURCE_
<android.telephony.ims.RegistrationManager$RegistrationCallback: android.telephony.ims.aidl.IImsRegistrationCallback getBinder()> -> _SOURCE_
<android.animation.ValueAnimator: java.lang.Object getAnimatedValue()> -> _SOURCE_
<android.view.textclassifier.ConversationActions$Message: java.lang.CharSequence getText()> -> _SOURCE_
<android.widget.ScrollBarDrawable: android.graphics.drawable.Drawable getHorizontalTrackDrawable()> -> _SOURCE_
<android.app.ActivityManager: android.app.IActivityTaskManager access$000()> -> _SOURCE_
<android.security.keystore.IKeystoreKeyCharacteristicsCallback$Stub: android.security.keystore.IKeystoreKeyCharacteristicsCallback getDefaultImpl()> -> _SOURCE_
<android.hardware.camera2.impl.ICameraDeviceUserWrapper: android.hardware.camera2.impl.CameraMetadataNative getCameraInfo()> -> _SOURCE_
<com.android.internal.inputmethod.ICharSequenceResultCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.ISearchManager$Stub$Proxy: android.content.ComponentName getWebSearchActivity()> -> _SOURCE_
<android.graphics.drawable.VectorDrawable$VFullPath: float getStrokeAlpha()> -> _SOURCE_
<com.android.internal.os.IShellCallback$Stub: com.android.internal.os.IShellCallback getDefaultImpl()> -> _SOURCE_
<android.hardware.cas.V1_1.ICas$Proxy: java.util.ArrayList getHashChain()> -> _SOURCE_
<android.hardware.radio.ICloseHandle$Stub: android.hardware.radio.ICloseHandle getDefaultImpl()> -> _SOURCE_
<android.app.Notification$MessagingStyle: android.graphics.drawable.Icon getShortcutIcon()> -> _SOURCE_
<android.hardware.display.BrightnessConfiguration: java.lang.String getDescription()> -> _SOURCE_
<android.os.IHardwarePropertiesManager$Stub: android.os.IHardwarePropertiesManager getDefaultImpl()> -> _SOURCE_
<android.view.textservice.SpellCheckerSubtype: java.lang.String getExtraValue()> -> _SOURCE_
<android.hardware.radio.IRadioService$Stub: android.hardware.radio.IRadioService getDefaultImpl()> -> _SOURCE_
<android.text.method.QwertyKeyListener: android.text.method.QwertyKeyListener getInstanceForFullKeyboard()> -> _SOURCE_
<android.nfc.INfcCardEmulation$Stub$Proxy: java.util.List getServices(int,java.lang.String)> -> _SOURCE_
<android.net.NetworkScorerAppData: java.lang.String getNetworkAvailableNotificationChannelId()> -> _SOURCE_
<android.graphics.Typeface$CustomFallbackBuilder: int getMaxCustomFallbackCount()> -> _SOURCE_
<android.companion.ICompanionDeviceManager$Stub$Proxy: java.util.List getAssociations(java.lang.String,int)> -> _SOURCE_
<android.security.net.config.ManifestConfigSource: java.util.Set getPerDomainConfigs()> -> _SOURCE_
<android.net.lowpan.ILowpanNetScanCallback$Stub: android.net.lowpan.ILowpanNetScanCallback getDefaultImpl()> -> _SOURCE_
<android.app.ApplicationPackageManager: java.util.List getIntentFilterVerifications(java.lang.String)> -> _SOURCE_
<android.content.integrity.IAppIntegrityManager$Default: java.lang.String getCurrentRuleSetProvider()> -> _SOURCE_
<android.renderscript.RenderScript: long getMinorVersion()> -> _SOURCE_
<android.media.MediaCodecInfo$VideoCapabilities: android.util.Size getBlockSize()> -> _SOURCE_
<android.media.IMediaHTTPService$Stub: android.media.IMediaHTTPService getDefaultImpl()> -> _SOURCE_
<android.telephony.TelephonyManager: void answerRingingCall()> -> _SOURCE_
<android.app.Notification$MessagingStyle$Message: long getTimestamp()> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: boolean isOffloadedFilteringSupported()> -> _SOURCE_
<android.telephony.TelephonyManager: android.telephony.IccOpenLogicalChannelResponse iccOpenLogicalChannel(java.lang.String)> -> _SOURCE_
<android.telephony.CellIdentityNr: java.lang.String getMccString()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<com.android.internal.view.menu.ActionMenuItem: android.graphics.drawable.Drawable getIcon()> -> _SOURCE_
<android.telephony.TelephonyDisplayInfo: java.lang.String overrideNetworkTypeToString(int)> -> _SOURCE_
<android.widget._$$Lambda$E_XesXLNXm7BCuVAnjZcIGfnQJQ: java.lang.Object get()> -> _SOURCE_
<android.app.RemoteAction: android.app.PendingIntent getActionIntent()> -> _SOURCE_
<com.android.internal.telephony.euicc.IGetEuiccInfo1Callback$Stub: com.android.internal.telephony.euicc.IGetEuiccInfo1Callback getDefaultImpl()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean hasIccCard()> -> _SOURCE_
<android.telephony.NetworkRegistrationInfo: int getRegistrationState()> -> _SOURCE_
<android.os.BasicShellCommandHandler: java.io.OutputStream getRawOutputStream()> -> _SOURCE_
<android.appwidget.AppWidgetManager: java.util.List getInstalledProvidersForProfile(int,android.os.UserHandle,java.lang.String)> -> _SOURCE_
<android.app.assist.AssistStructure$ViewNodeBuilder: android.graphics.Rect getTempRect()> -> _SOURCE_
<android.net.lowpan.LowpanBeaconInfo: java.util.Collection getFlags()> -> _SOURCE_
<android.net.wifi.nl80211.IWifiScannerImpl$Default: android.net.wifi.nl80211.NativeScanResult[] getPnoScanResults()> -> _SOURCE_
<android.net.ConnectivityDiagnosticsManager$DataStallReport: android.net.LinkProperties getLinkProperties()> -> _SOURCE_
<android.widget.PopupWindow: android.view.WindowManager$LayoutParams getDecorViewLayoutParams()> -> _SOURCE_
<android.content.pm.IPackageManager$Stub$Proxy: android.content.ComponentName getInstantAppInstallerComponent()> -> _SOURCE_
<android.text.AutoGrowArray$FloatArray: float[] getRawArray()> -> _SOURCE_
<android.view.ViewConfiguration: long getGlobalActionKeyTimeout()> -> _SOURCE_
<android.provider.DocumentsContract: boolean isRootsUri(android.content.Context,android.net.Uri)> -> _SOURCE_
<android.security.keystore.KeystoreResponse: java.lang.String getErrorMessage()> -> _SOURCE_
<com.android.internal.telephony.SmsMessageBase: java.lang.String getDisplayMessageBody()> -> _SOURCE_
<android.telephony.CellInfoCdma: android.telephony.CellInfo sanitizeLocationInfo()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub$Proxy: android.telephony.ims.aidl.IImsMmTelFeature getMmTelFeatureAndListen(int,com.android.ims.internal.IImsServiceFeatureCallback)> -> _SOURCE_
<android.view.contentcapture.ContentCaptureManager: android.view.contentcapture.MainContentCaptureSession getMainContentCaptureSession()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg: android.util.ArrayMap getWakeupAlarmStats()> -> _SOURCE_
<android.app.ContextImpl: android.app.IApplicationThread getIApplicationThread()> -> _SOURCE_
<android.location.GnssMeasurementCorrections: double getLongitudeDegrees()> -> _SOURCE_
<android.telephony.TelephonyManager: void disableVisualVoicemailSmsFilter(int)> -> _SOURCE_
<android.text.method.QwertyKeyListener: android.text.method.QwertyKeyListener getInstance(boolean,android.text.method.TextKeyListener$Capitalize)> -> _SOURCE_
<android.service.gatekeeper.GateKeeperResponse: byte[] getPayload()> -> _SOURCE_
<android.animation.ObjectAnimator: java.lang.String getNameForTrace()> -> _SOURCE_
<android.inputmethodservice.InputMethodService: android.app.Dialog getWindow()> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.hardware.camera2.legacy.LegacyCameraDevice: android.util.Size getSurfaceSize(android.view.Surface)> -> _SOURCE_
<android.media.audiopolicy.AudioMixingRule$AudioMixMatchCriterion: android.media.AudioAttributes getAudioAttributes()> -> _SOURCE_
<android.telephony.SubscriptionManager: android.telephony.SubscriptionManager from(android.content.Context)> -> _SOURCE_
<android.os.Bundle: java.lang.ClassLoader getClassLoader()> -> _SOURCE_
<android.bluetooth.le.IAdvertisingSetCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.provider.DocumentsContract: java.lang.String getTreeDocumentId(android.net.Uri)> -> _SOURCE_
<android.view.CutoutSpecification: android.graphics.Rect getRightBound()> -> _SOURCE_
<android.app.Dialog: android.view.View getCurrentFocus()> -> _SOURCE_
<android.app.IActivityTaskManager$Stub$Proxy: java.util.List getAllStackInfos()> -> _SOURCE_
<android.telephony.SubscriptionManager: boolean isValidSlotIndex(int)> -> _SOURCE_
<android.app.FragmentManagerImpl: android.view.LayoutInflater$Factory2 getLayoutInflaterFactory()> -> _SOURCE_
<android.hardware.display.DisplayManager: android.util.Pair getMinimumBrightnessCurve()> -> _SOURCE_
<android.app.ContextImpl: java.lang.String getPackageName()> -> _SOURCE_
<android.hardware.usb.IUsbManager$Stub$Proxy: android.hardware.usb.UsbPortStatus getPortStatus(java.lang.String)> -> _SOURCE_
<android.accounts.AccountManager: java.lang.String getUserData(android.accounts.Account,java.lang.String)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.security.net.config.XmlConfigSource: java.util.Set getPerDomainConfigs()> -> _SOURCE_
<android.net.NetworkPolicyManager: int[] getUidsWithPolicy(int)> -> _SOURCE_
<android.telephony.DataSpecificRegistrationInfo: int hashCode()> -> _SOURCE_
<android.bluetooth.BluetoothHidDeviceAppSdpSettings: java.lang.String getProvider()> -> _SOURCE_
<android.view.contentcapture.ViewNode: float getTextSize()> -> _SOURCE_
<android.view.IRecentsAnimationController$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.internal.view.menu.MenuBuilder: java.util.ArrayList getActionItems()> -> _SOURCE_
<android.app.NotificationManager: int getZenMode()> -> _SOURCE_
<android.os.ICancellationSignal$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<com.android.internal.os.BatteryStatsImpl: long getAwakeTimePlugged()> -> _SOURCE_
<android.telephony.mbms.ServiceInfo: java.lang.CharSequence getNameForLocale(java.util.Locale)> -> _SOURCE_
<android.service.notification.INotificationListener$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.Notification$CarExtender: android.app.Notification$CarExtender$UnreadConversation getUnreadConversation()> -> _SOURCE_
<com.android.internal.telephony.IIntegerConsumer$Stub$Proxy: android.os.IBinder asBinder()> -> _SOURCE_
<com.android.internal.view.IInputMethodManager$Stub$Proxy: java.util.List getInputMethodList(int)> -> _SOURCE_
<android.view.RemoteAnimationAdapter: android.view.IRemoteAnimationRunner getRunner()> -> _SOURCE_
<android.content.pm.ShortcutInfo: java.util.Set getCategories()> -> _SOURCE_
<android.util.XmlPullAttributes: java.lang.String getClassAttribute()> -> _SOURCE_
<android.nfc.NfcAdapter: android.nfc.INfcAdapter getService()> -> _SOURCE_
<android.app.ActivityThread: java.lang.String getProfileFilePath()> -> _SOURCE_
<android.content.pm.ILauncherApps$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.app.ApplicationPackageManager: android.os.storage.VolumeInfo getPackageCurrentVolume(android.content.pm.ApplicationInfo)> -> _SOURCE_
<com.android.internal.telephony._$$Lambda$RILConstants$ODSbRKyUeaOFMcez_ZudOmaKCBw: java.lang.Object apply(java.lang.Object)> -> _SOURCE_
<android.telephony.NetworkRegistrationInfo: java.lang.String registrationStateToString(int)> -> _SOURCE_
<com.android.internal.telephony.ITelephony$Default: int getDataState()> -> _SOURCE_
<android.bluetooth.IBluetoothPbap$Default: java.util.List getConnectedDevices()> -> _SOURCE_
<android.service.autofill.FillEventHistory$Event: android.os.Bundle getClientState()> -> _SOURCE_
<android.bluetooth.le.IPeriodicAdvertisingCallback$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.security.net.config.WfaCertificateSource: android.security.net.config.WfaCertificateSource getInstance()> -> _SOURCE_
<android.media.AudioAttributes: java.util.Set getTags()> -> _SOURCE_
<android.content.pm.IPinItemRequest$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.ContextImpl: java.lang.String getAttributionTag()> -> _SOURCE_
<android.app.ActivityManager: int getPackageScreenCompatMode(java.lang.String)> -> _SOURCE_
<android.content.res.AssetManager: long createTheme()> -> _SOURCE_
<android.app.IUiModeManager$Stub: android.app.IUiModeManager getDefaultImpl()> -> _SOURCE_
<android.service.notification.NotificationListenerService: android.service.notification.NotificationListenerService$RankingMap getCurrentRanking()> -> _SOURCE_
<android.telephony.CellIdentityGsm: java.lang.String getMccString()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.hardware.usb.UsbInterface: int getInterfaceSubclass()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.net.wifi.nl80211.IClientInterface$Default: java.lang.String getInterfaceName()> -> _SOURCE_
<android.graphics.drawable.ShapeDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()> -> _SOURCE_
<android.bluetooth.BluetoothHidDeviceAppSdpSettings: byte getSubclass()> -> _SOURCE_
<android.app.UiAutomation: android.util.SparseArray getWindowsOnAllDisplays()> -> _SOURCE_
<android.bluetooth.IBluetoothPan$Stub$Proxy: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
<android.hardware.camera2.CameraManager$CameraManagerGlobal: java.util.Set getConcurrentCameraIds()> -> _SOURCE_
<android.nfc.ITagRemovedCallback$Stub: android.nfc.ITagRemovedCallback getDefaultImpl()> -> _SOURCE_
<android.os.IDeviceIdleController$Default: int[] getAppIdWhitelistExceptIdle()> -> _SOURCE_
<android.app.timezonedetector.ITimeZoneDetectorService$Stub: android.app.timezonedetector.ITimeZoneDetectorService getDefaultImpl()> -> _SOURCE_
<android.content.pm.KeySet: android.os.IBinder getToken()> -> _SOURCE_
<android.telephony.ClientRequestStats: long getPendingRequestsCount()> -> _SOURCE_
<android.app.IUserSwitchObserver$Stub: android.app.IUserSwitchObserver getDefaultImpl()> -> _SOURCE_
<com.android.internal.util.MemInfoReader: long getFreeSize()> -> _SOURCE_
<android.app.timedetector.ITimeDetectorService$Stub: java.lang.String getDefaultTransactionName(int)> -> _SOURCE_
<android.app.backup.IRestoreObserver$Stub$Proxy: java.lang.String getInterfaceDescriptor()> -> _SOURCE_
<android.telephony.TelephonyManager: void enableServiceHandleCaching()> -> _SOURCE_
<android.view.inputmethod.CompletionInfo: java.lang.CharSequence getLabel()> -> _SOURCE_
<android.telephony.CellSignalStrengthWcdma: int getAsuLevel()> -> _SOURCE_
<android.media.midi.MidiDeviceInfo: android.media.midi.MidiDeviceInfo$PortInfo[] getPorts()> -> _SOURCE_
<android.media.MicrophoneInfo: android.media.MicrophoneInfo$Coordinate3F getPosition()> -> _SOURCE_
